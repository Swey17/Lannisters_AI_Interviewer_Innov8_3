[
  {
    "id": 1606,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Ordered Set",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:\n\nThe ith (0-indexed) request arrives.\nIf all servers are busy, the request is dropped (not handled at all).\nIf the (i % k)th server is available, assign the request to that server.\nOtherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on.\n\nYou are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.\nReturn a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.\n\u00a0\nExample 1:\n\n\nInput: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] \nOutput: [1] \nExplanation: \nAll of the servers start out available.\nThe first 3 requests are handled by the first 3 servers in order.\nRequest 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.\n\nExample 2:\n\nInput: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]\nOutput: [0]\nExplanation: \nThe first 3 requests are handled by first 3 servers.\nRequest 3 comes in. It is handled by server 0 since the server is available.\nServer 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.\n\nExample 3:\n\nInput: k = 3, arrival = [1,2,3], load = [10,12,11]\nOutput: [0,1,2]\nExplanation: Each server handles a single request, so they are all considered the busiest.\n\n\u00a0\nConstraints:\n\n1 <= k <= 105\n1 <= arrival.length, load.length <= 105\narrival.length == load.length\n1 <= arrival[i], load[i] <= 109\narrival is strictly increasing.\n\n",
    "starterCode": "class Solution:\n    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "k = 5, arrival = [1,7,8,9,10], load = [5,2,3,3,3]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 3, arrival = [1,2,3,4], load = [1,2,1,2]",
        "output": "[0]"
      },
      {
        "input": "k = 3, arrival = [1,2,3], load = [10,12,11]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 1, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[0]"
      },
      {
        "input": "k = 5, arrival = [1,7,8,9,10,11,12], load = [2,3,2,1,3,2,2]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 10, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 4, arrival = [1,10,20,30,40], load = [2,2,2,2,2]",
        "output": "[0]"
      },
      {
        "input": "k = 1, arrival = [1,2,3,4,5], load = [1,1,1,1,1]",
        "output": "[0]"
      },
      {
        "input": "k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3]",
        "output": "[1]"
      },
      {
        "input": "k = 5, arrival = [1,7,8,9,10], load = [5,2,10,3,1]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 5, arrival = [1,7,13,19,25,31,37,43,49,55], load = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 4, arrival = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57], load = [4,3,2,1,4,3,2,1,4,3,2,1,4,3,2]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 4, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], load = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 20, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], load = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 9, arrival = [1,11,21,31,41,51,61,71,81,91,101,111,121,131,141,151,161,171,181,191], load = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 4, arrival = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77], load = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 10, arrival = [1,10,20,30,40,50,60,70,80,90,100], load = [1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[0]"
      },
      {
        "input": "k = 1000, arrival = [1,1001,2001,3001,4001,5001,6001,7001,8001,9001,10001], load = [100,100,100,100,100,100,100,100,100,100,100]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "k = 10, arrival = [2,5,8,11,14,17,20,23,26,29,32,35,38,41,44,47,50,53,56,59], load = [3,2,5,4,3,2,5,4,3,2,5,4,3,2,5,4,3,2,5,4]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 100, arrival = [1,101,201,301,401,501,601,701,801,901,1001], load = [10,10,10,10,10,10,10,10,10,10,10]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "k = 8, arrival = [1,4,8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128,136,144], load = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 4, arrival = [1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575], load = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 10, arrival = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95], load = [1,3,2,4,1,3,2,4,1,3,2,4,1,3,2,4,1,3,2,4]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 7, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], load = [3,6,4,2,5,7,1,8,3,5,6,4,2,7,1]",
        "output": "[0]"
      },
      {
        "input": "k = 12, arrival = [1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90], load = [5,2,7,3,8,4,6,1,9,5,2,7,3,8,4,6,1,9,5,2,7,3,8,4,6,1,9,5,2,7,3]",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "k = 12, arrival = [1,13,25,37,49,61,73,85,97,109,121,133,145,157,169,181,193,205,217,229], load = [1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "k = 7, arrival = [1,3,6,10,14,18,22,26,30,34,38,42,46,50], load = [2,4,6,8,10,12,14,16,18,20,22,24,26,28]",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], load = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 4, arrival = [1,4,9,16,25,36,49,64,81,100,121,144,169,196,225], load = [3,6,2,8,5,9,3,7,1,10,4,6,8,2,9]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 10, arrival = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77], load = [10,8,6,4,2,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 20, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], load = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,10,20,30,40,50,60,70,80,90,100]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 5, arrival = [1,10,20,30,40,50,60,70,80,90,100], load = [10,5,7,6,2,4,8,3,9,1,6]",
        "output": "[0]"
      },
      {
        "input": "k = 15, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], load = [2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "k = 3, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], load = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 4, arrival = [1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040], load = [5,3,2,8,6,4,7,9,1,10,3,5,8,6,4,7,9,1,10,3,5,8,6,4,7,9,1,10,3]",
        "output": "[0]"
      },
      {
        "input": "k = 8, arrival = [1,2,3,5,10,12,15,20,25,30,35,40,45,50,55,60], load = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "k = 7, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,3,4,5,6,7,8,9,10,11]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 10, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], load = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 8, arrival = [1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121,126,131,136,141,146,151,156,161,166,171,176,181,186,191,196,201,206], load = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 5, arrival = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95], load = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 10, arrival = [1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400], load = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], load = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 8, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], load = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 4, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], load = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 11, arrival = [1,12,23,34,45,56,67,78,89,100,111,122,133,144,155,166,177,188,199,210], load = [11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "k = 15, arrival = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400], load = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "k = 7, arrival = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190], load = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 20, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], load = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
      },
      {
        "input": "k = 9, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99], load = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 7, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], load = [10,8,9,7,6,5,4,3,2,1,10,8,9,7,6,5,4,3,2,1,10,8,9,7,6,5,4,3,2,1,10,8,9,7,6,5,4,3,2,1]",
        "output": "[0, 1, 3, 4]"
      },
      {
        "input": "k = 6, arrival = [1,5,10,15,20,25,30,35,40,45,50,55], load = [10,20,10,20,10,20,10,20,10,20,10,20]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 8, arrival = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,101,105,109,113,117], load = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 8, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], load = [9,1,8,2,7,3,6,4,5,6,4,5,3,7,2,8,9,1,8,2]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 10, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], load = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 9, arrival = [1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58], load = [9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], load = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,100]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 7, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], load = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 10, arrival = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77], load = [2,4,3,5,6,2,8,7,3,4,5,2,3,1,7,4,2,8,6,5]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 5, arrival = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384], load = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 10, arrival = [2,6,10,14,18,22,26,30,34,38,42,46,50,54,58], load = [4,7,2,9,1,8,6,5,3,2,10,5,7,9,1]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], load = [5,5,5,5,5,1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 6, arrival = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768], load = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 10, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], load = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 6, arrival = [1,3,6,10,15,21,28,36,45,55,66,78,91,105,120,136,153,171,190,210], load = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 15, arrival = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300], load = [5,15,10,5,10,15,5,10,15,5,10,15,5,10,15,5,10,15,5,10,15,5,10,15,5,10,15,5,10,15]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "k = 8, arrival = [1,2,4,8,16,32,64,128,256,512,1024], load = [1,2,4,8,16,32,64,128,256,512,1024]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 8, arrival = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190], load = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 12, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99], load = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 7, arrival = [1,4,7,10,13,16,19,22,25,28,31,34,37,40], load = [2,3,1,4,2,5,3,1,4,2,5,3,1,4]",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "k = 10, arrival = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500], load = [50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 8, arrival = [1,11,21,31,41,51,61,71,81,91,101,111,121,131,141,151,161,171,181,191], load = [8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 3, arrival = [1,10,20,30,40,50,60,70,80,90], load = [80,70,60,50,40,30,20,10,5,1]",
        "output": "[0, 2]"
      },
      {
        "input": "k = 7, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], load = [2,4,3,5,1,6,2,3,4,5,1,2,3,4,5,6,1,2,3,4]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 6, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], load = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 15, arrival = [1,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,255,270,285], load = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 15, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], load = [10,8,6,4,2,10,8,6,4,2,10,8,6,4,2,10,8,6,4,2,10,8,6,4,2,10,8,6,4,2]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "k = 4, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], load = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 10, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], load = [2,4,1,3,5,2,3,4,1,2,3,4,5,1,2,3,4,1,2,3,4,5,1,2,3,4,1,2,3,4]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10], load = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], load = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 7, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], load = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60]",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "k = 7, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], load = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 6, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], load = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "[0]"
      },
      {
        "input": "k = 4, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], load = [2,3,1,4,2,1,3,4,1,2,3,4,1,2,3,4,1,2,3,4]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 20, arrival = [1,20,40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380,400], load = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
      },
      {
        "input": "k = 6, arrival = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384], load = [2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 6, arrival = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], load = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 9, arrival = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190], load = [9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 5, arrival = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], load = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]",
        "output": "[0]"
      },
      {
        "input": "k = 10, arrival = [1,5,9,13,17,21,25,29,33,37], load = [2,2,2,2,2,2,2,2,2,2]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 5, arrival = [1,3,5,7,9,11,13,15], load = [2,2,2,2,2,2,2,2]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 1, arrival = [1,10,20,30], load = [5,5,5,5]",
        "output": "[0]"
      },
      {
        "input": "k = 4, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,2,2,2,2,2,2,2,2,2]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 6, arrival = [1,3,5,7,9,11,13,15,17,19], load = [2,4,6,8,10,12,14,16,18,20]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 4, arrival = [1,3,5,7,9,11,13,15], load = [2,2,2,2,2,2,2,2]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 7, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], load = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "k = 6, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 10, arrival = [1,5,9,13,17,21,25,29,33,37], load = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 5, arrival = [1,5,9,14,18], load = [4,3,5,2,3]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 7, arrival = [1,5,9,13,17,21,25,29,33,37,41,45], load = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 1, arrival = [1,10,20,30,40], load = [1,1,1,1,1]",
        "output": "[0]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,1,2,1,2,1,2,1,2,1]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 3, arrival = [1,2,3,4,5,6], load = [3,2,1,1,2,3]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 5, arrival = [1,7,13,19], load = [10,10,10,10]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 10, arrival = [1,2,3,4,5,6,7,8,9,10], load = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 2, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], load = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 2, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 4, arrival = [10,20,30,40,50,60,70,80,90,100], load = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 5, arrival = [1,3,5,7,9], load = [2,2,2,2,2]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,3,1,5,4,2,3,1,2,1]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 7, arrival = [1,3,5,7,9,11,13,15,17,19], load = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 10, arrival = [1,10,20,30,40,50,60,70,80,90], load = [9,9,9,9,9,9,9,9,9,9]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 6, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], load = [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 2, arrival = [1,3,5,7,9], load = [2,2,2,2,2]",
        "output": "[0]"
      },
      {
        "input": "k = 100, arrival = [1,101,201,301,401,501,601,701,801,901], load = [100,100,100,100,100,100,100,100,100,100]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,8,10,13,15,16,17,20], load = [2,3,1,4,2,3,2,1,2,3]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 1, arrival = [1,10,20,30,40], load = [5,5,5,5,5]",
        "output": "[0]"
      },
      {
        "input": "k = 2, arrival = [1,2,3,4,5,6,7,8,9,10], load = [5,3,5,3,5,3,5,3,5,3]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 10000, arrival = [1,10001,20001,30001,40001], load = [10000,10000,10000,10000,10000]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 4, arrival = [1,10,20,30,40,50,60,70,80,90], load = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 10, arrival = [1,5,9,13,17], load = [3,3,3,3,3]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 1, arrival = [1,10,19,28,37,46,55,64,73,82], load = [9,9,9,9,9,9,9,9,9,9]",
        "output": "[0]"
      },
      {
        "input": "k = 6, arrival = [1,3,5,7,9,11,13,15,17,19], load = [3,3,3,3,3,3,3,3,3,3]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 6, arrival = [1,10,20,30,40,50,60,70,80,90], load = [20,10,20,10,20,10,20,10,20,10]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 4, arrival = [1,5,9,13,17,21], load = [2,2,2,2,2,2]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 5, arrival = [1,7,13,19,25], load = [5,6,7,8,9]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 4, arrival = [1,10,20,30,40,50], load = [3,3,3,3,3,3]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 5, arrival = [1,7,13,19,25], load = [5,3,8,6,2]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 100, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], load = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]"
      },
      {
        "input": "k = 1, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,2,2,2,2,2,2,2,2,2]",
        "output": "[0]"
      },
      {
        "input": "k = 6, arrival = [1,2,3,4,5,6,7,8,9,10,11,12], load = [1,2,3,4,5,6,1,2,3,4,5,6]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 2, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,2,1,2,1,2,1,2,1,2]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 1, arrival = [1,2,3,4,5], load = [5,4,3,2,1]",
        "output": "[0]"
      },
      {
        "input": "k = 7, arrival = [1,4,7,10,13,16,19,22,25,28], load = [2,2,2,2,2,2,2,2,2,2]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 1000, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 7, arrival = [10,20,30,40,50,60,70,80,90,100], load = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 2, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,1,2,1,2,1,2,1,2,1]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 10, arrival = [1,3,5,7,9,11,13,15,17,19], load = [2,4,6,8,10,12,14,16,18,20]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 10, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], load = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 10, arrival = [1,3,5,7,9,11,13,15,17,19], load = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 4, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 7, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], load = [2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "k = 4, arrival = [1,2,3,4,5,6,7,8,9,10,11,12], load = [1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 10, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 2, arrival = [1,2,3,4,5,6,7,8,9,10], load = [3,3,3,3,3,3,3,3,3,3]",
        "output": "[0]"
      },
      {
        "input": "k = 10, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], load = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 6, arrival = [1,4,7,10,13,16,19,22,25,28], load = [3,3,3,3,3,3,3,3,3,3]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 7, arrival = [1,3,5,7,9,11,13,15], load = [2,2,2,2,2,2,2,2]",
        "output": "[0]"
      },
      {
        "input": "k = 100, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 5, arrival = [1,7,13,19,25,31], load = [5,5,5,5,5,5]",
        "output": "[0]"
      },
      {
        "input": "k = 5, arrival = [1,7,13,19], load = [5,5,5,5]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 2, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 7, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], load = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[0]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,2,3,4,5,1,2,3,4,5]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 4, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,1,3,2,1,3,2,1,3,2]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 6, arrival = [1,3,5,7,9,11,13,15,17,19], load = [2,4,6,8,10,1,3,5,7,9]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 10, arrival = [1,3,5,7,9,11,13,15,17,19], load = [2,2,2,2,2,2,2,2,2,2]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,2,2,2,2,2,2,2,2,2]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 7, arrival = [1,5,9,13,17,21,25,29,33,37], load = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 10, arrival = [1,11,21,31,41,51,61,71,81,91], load = [10,10,10,10,10,10,10,10,10,10]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 4, arrival = [1,5,9,13,17], load = [4,4,4,4,4]",
        "output": "[0]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,3,4,5,6,1,2,3,4,5]",
        "output": "[0]"
      },
      {
        "input": "k = 5, arrival = [1,10,20,30,40,50,60,70,80,90], load = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 6, arrival = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], load = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 4, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,2,1,2,1,2,1,2,1,2]",
        "output": "[0, 1]"
      },
      {
        "input": "k = 4, arrival = [1,3,5,7,9], load = [1,2,1,2,1]",
        "output": "[0]"
      },
      {
        "input": "k = 1, arrival = [1,10,100,1000,10000], load = [1,2,3,4,5]",
        "output": "[0]"
      },
      {
        "input": "k = 5, arrival = [1,7,13,19,25], load = [5,5,5,5,5]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 1, arrival = [1,10,100,1000,10000], load = [1,1,1,1,1]",
        "output": "[0]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,3,2,1,2,3,2,1,2,3]",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "k = 7, arrival = [1,3,5,7,9,11,13,15,17,19], load = [4,2,6,3,5,1,7,8,2,5]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 10, arrival = [1,5,9,13,17,21,25,29,33,37], load = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "k = 7, arrival = [1,10,20,30,40,50,60,70,80,90], load = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "k = 5, arrival = [1,2,3,4,5,6,7,8,9,10], load = [2,3,4,5,6,7,8,9,10,1]",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "k = 4, arrival = [1,2,3,4,5,6,7,8,9,10], load = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[0]"
      },
      {
        "input": "k = 2, arrival = [1,3,5,7,9,11,13,15,17,19], load = [1,2,1,2,1,2,1,2,1,2]",
        "output": "[0, 1]"
      }
    ]
  },
  {
    "id": 2147,
    "difficulty": "Hard",
    "tags": [
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "problemDescription": "Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string corridor of length n consisting of letters 'S' and 'P' where each 'S' represents a seat and each 'P' represents a plant.\nOne room divider has already been installed to the left of index 0, and another to the right of index n - 1. Additional room dividers can be installed. For each position between indices i - 1 and i (1 <= i <= n - 1), at most one divider can be installed.\nDivide the corridor into non-overlapping sections, where each section has exactly two seats with any number of plants. There may be multiple ways to perform the division. Two ways are different if there is a position with a room divider installed in the first way but not in the second way.\nReturn the number of ways to divide the corridor. Since the answer may be very large, return it modulo 109 + 7. If there is no way, return 0.\n\u00a0\nExample 1:\n\n\nInput: corridor = \"SSPPSPS\"\nOutput: 3\nExplanation: There are 3 different ways to divide the corridor.\nThe black bars in the above image indicate the two room dividers already installed.\nNote that in each of the ways, each section has exactly two seats.\n\nExample 2:\n\n\nInput: corridor = \"PPSPSP\"\nOutput: 1\nExplanation: There is only 1 way to divide the corridor, by not installing any additional dividers.\nInstalling any would create some section that does not have exactly two seats.\n\nExample 3:\n\n\nInput: corridor = \"S\"\nOutput: 0\nExplanation: There is no way to divide the corridor because there will always be a section that does not have exactly two seats.\n\n\u00a0\nConstraints:\n\nn == corridor.length\n1 <= n <= 105\ncorridor[i] is either 'S' or 'P'.\n\n",
    "starterCode": "class Solution:\n    def numberOfWays(self, corridor: str) -> int:\n        ",
    "testCases": [
      {
        "input": "corridor = \"PPPPSSPPPPSSPPPP\"",
        "output": "5"
      },
      {
        "input": "corridor = \"SSSSSSSSSS\"",
        "output": "1"
      },
      {
        "input": "corridor = \"SPSPSPSP\"",
        "output": "2"
      },
      {
        "input": "corridor = \"SSSPPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"PSSPSPSPPS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SS\"",
        "output": "1"
      },
      {
        "input": "corridor = \"PPPP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPSS\"",
        "output": "3"
      },
      {
        "input": "corridor = \"SSSSPPSSSS\"",
        "output": "3"
      },
      {
        "input": "corridor = \"SSPSSP\"",
        "output": "2"
      },
      {
        "input": "corridor = \"SSPSSPSS\"",
        "output": "4"
      },
      {
        "input": "corridor = \"SSPPPPPSSPPPPSS\"",
        "output": "30"
      },
      {
        "input": "corridor = \"SSPSPSPSPS\"",
        "output": "4"
      },
      {
        "input": "corridor = \"SSSS\"",
        "output": "1"
      },
      {
        "input": "corridor = \"SSSPPPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSSPPS\"",
        "output": "1"
      },
      {
        "input": "corridor = \"PPSSPPSSPP\"",
        "output": "3"
      },
      {
        "input": "corridor = \"SSPPSSPPSS\"",
        "output": "9"
      },
      {
        "input": "corridor = \"SSPPSPS\"",
        "output": "3"
      },
      {
        "input": "corridor = \"SSPPSPPS\"",
        "output": "3"
      },
      {
        "input": "corridor = \"S\"",
        "output": "0"
      },
      {
        "input": "corridor = \"PPSPSP\"",
        "output": "1"
      },
      {
        "input": "corridor = \"SPPSPPSPPS\"",
        "output": "3"
      },
      {
        "input": "corridor = \"PPSPSPSPSPSPSPSPSP\"",
        "output": "8"
      },
      {
        "input": "corridor = \"SSSPSSSSPPSSPPSSSSPPSSSSPPSSSSSSSSSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SPPSPSPSPSPSPSPSPS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPSSPSSPSSPSSPSSPSS\"",
        "output": "64"
      },
      {
        "input": "corridor = \"PPSSPPSPSSPPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPSSSSSSSSPPSSSSSSSSPPSSSSSSSSSS\"",
        "output": "27"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSS\"",
        "output": "27"
      },
      {
        "input": "corridor = \"SPSSPSSPSSPSSPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"PPPPPPSSPPPPSSPPPP\"",
        "output": "5"
      },
      {
        "input": "corridor = \"SSPPPPPPSSPPPPSSPPPPSSPPSS\"",
        "output": "525"
      },
      {
        "input": "corridor = \"PPSSPPSSPPSSPPSS\"",
        "output": "27"
      },
      {
        "input": "corridor = \"PPPPSSPPPPSSPPPPSSPPPPSSPPPPSSPPPP\"",
        "output": "625"
      },
      {
        "input": "corridor = \"SSSPSPSPSPSPSSSSPSPS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPSPSPSSSSPPPPSS\"",
        "output": "30"
      },
      {
        "input": "corridor = \"SSPPSSSSSSSSSSSSSS\"",
        "output": "3"
      },
      {
        "input": "corridor = \"PPPPPPPPPPPPPPPPPP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SPPSPSPSPSPSPSPSPSPS\"",
        "output": "16"
      },
      {
        "input": "corridor = \"SPSPPSPSPPSPSPPSPSPP\"",
        "output": "27"
      },
      {
        "input": "corridor = \"PPSSPPSSPPSSPP\"",
        "output": "9"
      },
      {
        "input": "corridor = \"SSPSPSPSPSPS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSSPSSSPSSSPSSSPSS\"",
        "output": "4"
      },
      {
        "input": "corridor = \"PPSSPPSSSSSSSSSSSS\"",
        "output": "3"
      },
      {
        "input": "corridor = \"SSPPPPPPPPSSPPPPSS\"",
        "output": "45"
      },
      {
        "input": "corridor = \"SSPPSSSSSSPPSS\"",
        "output": "9"
      },
      {
        "input": "corridor = \"SSPPPPPPSSPPPPPSS\"",
        "output": "42"
      },
      {
        "input": "corridor = \"SSSSPPPPSSPPSSPPSSSSPPPPSSSSSS\"",
        "output": "225"
      },
      {
        "input": "corridor = \"SSPPPPSSPPSS\"",
        "output": "15"
      },
      {
        "input": "corridor = \"SSSSPPPPSSPPPPSSSSPPPPSS\"",
        "output": "125"
      },
      {
        "input": "corridor = \"SSPPPPSSPPPPSSPPPPSSPPPPSS\"",
        "output": "625"
      },
      {
        "input": "corridor = \"SSPPSPSSSSSSSSSSPPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SPPSPPSPPSPPS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPSPPSPSPSPSPPPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSSPPSSPPSSPPSSPPSSPPSSPPSSPPSSPPSS\"",
        "output": "177147"
      },
      {
        "input": "corridor = \"PPPPPPSPPPPSPPPPSPPPPS\"",
        "output": "5"
      },
      {
        "input": "corridor = \"SSSSSSSSSSSSSSSS\"",
        "output": "1"
      },
      {
        "input": "corridor = \"SSPPSPSSPPSPSSPPSPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"PPSSPPSSPPSS\"",
        "output": "9"
      },
      {
        "input": "corridor = \"SSPPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS\"",
        "output": "1536"
      },
      {
        "input": "corridor = \"SSSPSSPPSSPPSSSSPPSSPPSSPPSSSSPPSSSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSSSSSSSSSSSSSSSSSSSSSSSSS\"",
        "output": "1"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSSPPSSSSPPSSSSPPSSSS\"",
        "output": "729"
      },
      {
        "input": "corridor = \"SSPPSPPPSPSPPS\"",
        "output": "6"
      },
      {
        "input": "corridor = \"SSPPPPSSPPPPSSPPSSPPPPSS\"",
        "output": "375"
      },
      {
        "input": "corridor = \"SSPPPPPPSPPPPPSSSSPP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"PPSSSSPPPPSS\"",
        "output": "5"
      },
      {
        "input": "corridor = \"SSPPSPPPSSSSPPSPSS\"",
        "output": "6"
      },
      {
        "input": "corridor = \"PPPPPPSSPPSS\"",
        "output": "3"
      },
      {
        "input": "corridor = \"SSPPSPSSPPSPSSPPSPSSPPSPSS\"",
        "output": "36"
      },
      {
        "input": "corridor = \"SSSPSSSPSSSPSSSPSSSPSSSPSSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSSPSSSSPPSSPPSSSSPPSSSSPPSSSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SPPPPPPPPPPP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"PPPPSPSPPPPSPSPPPPSP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"PPSSPPSSPPSSPPSSPPSSPPSSPPSS\"",
        "output": "729"
      },
      {
        "input": "corridor = \"PPPPPPPPPPPPPPPPPPPP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPSSPSSPSSPSSPSSPSSPSS\"",
        "output": "128"
      },
      {
        "input": "corridor = \"SSPPPPSPSPPPSS\"",
        "output": "20"
      },
      {
        "input": "corridor = \"PPSSPSSPPSSPSSPPSSPSSPPSS\"",
        "output": "216"
      },
      {
        "input": "corridor = \"SSPPPSSPPPSSPPPSS\"",
        "output": "64"
      },
      {
        "input": "corridor = \"SSPSSSPSSPSSPSSPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSSPPSSPPSSPPSS\"",
        "output": "729"
      },
      {
        "input": "corridor = \"PPSSPPPPSSPPPPSS\"",
        "output": "25"
      },
      {
        "input": "corridor = \"SPSSSPSSSPSSSPSSSPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"PSPSPSPSPSPSPSPSPS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPSSPSPSPSSP\"",
        "output": "12"
      },
      {
        "input": "corridor = \"SSSSSSSSSSSSSSSSSS\"",
        "output": "1"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSPSSPPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPSPSPPPSSSPPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPSSSSPPSSSSPPS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPPPPPSSSSSSSSSS\"",
        "output": "7"
      },
      {
        "input": "corridor = \"SSPPPPSSPPPPSSSSPPPPSSSSPPPPSSSS\"",
        "output": "625"
      },
      {
        "input": "corridor = \"SSSSSSSSSSPPPPPPSS\"",
        "output": "7"
      },
      {
        "input": "corridor = \"SSSSPPSSSSSSPPSSSS\"",
        "output": "9"
      },
      {
        "input": "corridor = \"SSPSSPSSPSSPSSPSSPSSPSSPSSPS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPSPSPSPPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"PPSSPPPPSSPPSSPP\"",
        "output": "15"
      },
      {
        "input": "corridor = \"SPSSSPSSSPSSSPSS\"",
        "output": "4"
      },
      {
        "input": "corridor = \"PSPPSPSPSPSPSPSPSPSP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSSSSSPPSSSSSSPPSSSSSSPPSSSSSS\"",
        "output": "27"
      },
      {
        "input": "corridor = \"SSPPSSPSSPPSSPSSPPSS\"",
        "output": "108"
      },
      {
        "input": "corridor = \"SSSPSPSPSPSPSPSPSPSPSP\"",
        "output": "16"
      },
      {
        "input": "corridor = \"PPPPPPSSPPPP\"",
        "output": "1"
      },
      {
        "input": "corridor = \"PPSSPPSSPPSSPPSSPPSSPPSSPPSSPPSSPPSSPPSS\"",
        "output": "19683"
      },
      {
        "input": "corridor = \"SSPPSPSSPSPSSPSPSSPSPSS\"",
        "output": "24"
      },
      {
        "input": "corridor = \"SSSPPSSSPPPSSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSSSSSSSSSSS\"",
        "output": "1"
      },
      {
        "input": "corridor = \"SSSSSPPPSSSSSPPPSSSS\"",
        "output": "4"
      },
      {
        "input": "corridor = \"SSSSSSSSPPPPPPPPSSSSSSSSPPPPPPPPSSSS\"",
        "output": "81"
      },
      {
        "input": "corridor = \"SSSSSS\"",
        "output": "1"
      },
      {
        "input": "corridor = \"SSPPPPPPSSSSSSPPSSPP\"",
        "output": "21"
      },
      {
        "input": "corridor = \"SSPSPSPSPSPSPSPSPSPSPSPSPSPSPS\"",
        "output": "128"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSSPPSS\"",
        "output": "81"
      },
      {
        "input": "corridor = \"SSSSPPPPSSSSPPPPSSSS\"",
        "output": "25"
      },
      {
        "input": "corridor = \"SSPSPPSSPSPPSSPSPPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SPSPSP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPPPSPSSPPPSS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSSSPSPSPSPS\"",
        "output": "4"
      },
      {
        "input": "corridor = \"PPPPPP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPPPPPPPPPSSPPPPSSPPSS\"",
        "output": "165"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSSPPSSPPSSPPSSPPSSPPSS\"",
        "output": "6561"
      },
      {
        "input": "corridor = \"SSPPPPSSPPPPSSPPSS\"",
        "output": "75"
      },
      {
        "input": "corridor = \"SSSSSSSSSSSSSSSSSSSS\"",
        "output": "1"
      },
      {
        "input": "corridor = \"SSSSPPPPSSSSPPSSSS\"",
        "output": "15"
      },
      {
        "input": "corridor = \"PPPPPPPPPPPPPPPP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSSPSPSPSPSPSPSPSPSS\"",
        "output": "16"
      },
      {
        "input": "corridor = \"SSPPSPSSSSPPSPSSSS\"",
        "output": "6"
      },
      {
        "input": "corridor = \"SSPSSPSSPSSPSSPSS\"",
        "output": "32"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSSPPSSPP\"",
        "output": "81"
      },
      {
        "input": "corridor = \"PPPPSSPPPPSSPPPPSSPPPPSSPPPPSS\"",
        "output": "625"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSSPPSSPPSSPPSSPPSS\"",
        "output": "2187"
      },
      {
        "input": "corridor = \"SSSSPPSSSSPPSSSS\"",
        "output": "9"
      },
      {
        "input": "corridor = \"SSSSSSPPPPSSSSPPPPSSSSSSPPPP\"",
        "output": "25"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSSPPSSPPSS\"",
        "output": "243"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSSSS\"",
        "output": "27"
      },
      {
        "input": "corridor = \"SSPSPSPSPSPSPSPS\"",
        "output": "0"
      },
      {
        "input": "corridor = \"SSPPSPSPSPSPSS\"",
        "output": "12"
      },
      {
        "input": "corridor = \"SPSPSPSPSPSPSPSPSPSP\"",
        "output": "16"
      },
      {
        "input": "corridor = \"SSPPSSSSPPPPSSSSSSSS\"",
        "output": "15"
      },
      {
        "input": "corridor = \"PPPPSSPPSSPPSSPPPP\"",
        "output": "9"
      },
      {
        "input": "corridor = \"SPSPPSPSPPSPSPPSPSPPSP\"",
        "output": "0"
      },
      {
        "input": "corridor = \"PPSPSPSPSPSPPSPSPS\"",
        "output": "8"
      },
      {
        "input": "corridor = \"SPSPSPSPPSPS\"",
        "output": "6"
      },
      {
        "input": "corridor = \"SSPPSSPPSSPPSSSSPPSSPPSSSSPPSS\"",
        "output": "729"
      }
    ]
  },
  {
    "id": 1788,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "problemDescription": "There is a garden of n flowers, and each flower has an integer beauty value. The flowers are arranged in a line. You are given an integer array flowers of size n and each flowers[i] represents the beauty of the ith flower.\\r\n\\r\nA garden is valid if it meets these conditions:\\r\n\\r\n\\r\n\tThe garden has at least two flowers.\\r\n\tThe first and the last flower of the garden have the same beauty value.\\r\n\\r\n\\r\nAs the appointed gardener, you have the ability to remove any (possibly none) flowers from the garden. You want to remove flowers in a way that makes the remaining garden valid. The beauty of the garden is the sum of the beauty of all the remaining flowers.\\r\n\\r\nReturn the maximum possible beauty of some valid garden after you have removed any (possibly none) flowers.\\r\n\\r\n\u00a0\\r\nExample 1:\\r\n\\r\n\\r\nInput: flowers = [1,2,3,1,2]\\r\nOutput: 8\\r\nExplanation: You can produce the valid garden [2,3,1,2] to have a total beauty of 2 + 3 + 1 + 2 = 8.\\r\n\\r\nExample 2:\\r\n\\r\n\\r\nInput: flowers = [100,1,1,-3,1]\\r\nOutput: 3\\r\nExplanation: You can produce the valid garden [1,1,1] to have a total beauty of 1 + 1 + 1 = 3.\\r\n\\r\n\\r\nExample 3:\\r\n\\r\n\\r\nInput: flowers = [-1,-2,0,-1]\\r\nOutput: -2\\r\nExplanation: You can produce the valid garden [-1,-1] to have a total beauty of -1 + -1 = -2.\\r\n\\r\n\\r\n\u00a0\\r\nConstraints:\\r\n\\r\n\\r\n\t2 <= flowers.length <= 105\\r\n\t-104 <= flowers[i] <= 104\\r\n\tIt is possible to create a valid garden by removing some (possibly none) flowers.\\r\n",
    "starterCode": "class Solution:\n    def maximumBeauty(self, flowers: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "flowers = [-10000,10000,-10000,10000,-10000,10000]",
        "output": "30000"
      },
      {
        "input": "flowers = [5,8,5,3,5,2,5]",
        "output": "33"
      },
      {
        "input": "flowers = [100,1,1,-3,1]",
        "output": "3"
      },
      {
        "input": "flowers = [2,3,4,5,4,3,2,1,2]",
        "output": "26"
      },
      {
        "input": "flowers = [5,3,5,2,5]",
        "output": "20"
      },
      {
        "input": "flowers = [1,2,3,1,2]",
        "output": "8"
      },
      {
        "input": "flowers = [3,2,1,2,3,2,1]",
        "output": "11"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,1]",
        "output": "46"
      },
      {
        "input": "flowers = [2,3,2,1,2,3,2,2]",
        "output": "17"
      },
      {
        "input": "flowers = [1,-1,1,-1,1]",
        "output": "3"
      },
      {
        "input": "flowers = [-1,-2,0,-1]",
        "output": "-2"
      },
      {
        "input": "flowers = [-1,-2,-3,-4,-1]",
        "output": "-2"
      },
      {
        "input": "flowers = [1,-2,3,-4,5,-6,7,-8,9,-10,1]",
        "output": "26"
      },
      {
        "input": "flowers = [-10000,0,10000,0,-10000]",
        "output": "10000"
      },
      {
        "input": "flowers = [5,5,5,5,5]",
        "output": "25"
      },
      {
        "input": "flowers = [-10000, 10000, -10000, 10000]",
        "output": "20000"
      },
      {
        "input": "flowers = [1,-1,2,-2,1,-1]",
        "output": "4"
      },
      {
        "input": "flowers = [-10000,10000,-10000]",
        "output": "-10000"
      },
      {
        "input": "flowers = [-5,-5,-5,-5,-5]",
        "output": "-10"
      },
      {
        "input": "flowers = [1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "flowers = [10000,10000,10000]",
        "output": "30000"
      },
      {
        "input": "flowers = [2,4,6,8,10,8,6,4,2]",
        "output": "50"
      },
      {
        "input": "flowers = [0,0,0,0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "flowers = [5,1,5,2,5,3,5]",
        "output": "26"
      },
      {
        "input": "flowers = [10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "110"
      },
      {
        "input": "flowers = [1,2,3,4,5,4,3,2,1]",
        "output": "25"
      },
      {
        "input": "flowers = [1,-1,1,-1,1,-1,1,-1]",
        "output": "4"
      },
      {
        "input": "flowers = [0,0,1,2,1,2,1,0,0]",
        "output": "7"
      },
      {
        "input": "flowers = [1,3,2,4,2,3,1]",
        "output": "16"
      },
      {
        "input": "flowers = [10000,-10000,10000,-10000,10000]",
        "output": "30000"
      },
      {
        "input": "flowers = [-1, -2, -3, -4, -5, -4, -3, -2, -1]",
        "output": "-2"
      },
      {
        "input": "flowers = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1]",
        "output": "200"
      },
      {
        "input": "flowers = [10, -10, 20, -20, 30, 20, -10, 10]",
        "output": "90"
      },
      {
        "input": "flowers = [-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5]",
        "output": "-10"
      },
      {
        "input": "flowers = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10, 10]",
        "output": "20"
      },
      {
        "input": "flowers = [5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "104"
      },
      {
        "input": "flowers = [100, -200, 300, -400, 500, -300, 200, 100, -100, 200, -300, 400, -500, 300, -200, 100]",
        "output": "2200"
      },
      {
        "input": "flowers = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "80"
      },
      {
        "input": "flowers = [5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5]",
        "output": "55"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "121"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1]",
        "output": "46"
      },
      {
        "input": "flowers = [1, -1, 1, -1, 1, -1, 1, -1, 1]",
        "output": "5"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]",
        "output": "49"
      },
      {
        "input": "flowers = [1, 3, -2, 4, 3, 1, 5, 1]",
        "output": "18"
      },
      {
        "input": "flowers = [10, 20, 30, 40, 50, 60, 50, 40, 30, 20, 10]",
        "output": "360"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1]",
        "output": "211"
      },
      {
        "input": "flowers = [5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5]",
        "output": "55"
      },
      {
        "input": "flowers = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1]",
        "output": "110"
      },
      {
        "input": "flowers = [-1, -2, -3, -4, -5, -4, -3, -2, -1, -2, -3, -4, -5, -4, -3, -2, -1]",
        "output": "-2"
      },
      {
        "input": "flowers = [-10, 20, -30, 40, -50, 40, -30, 20, -10, 20]",
        "output": "140"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 13, 14, 15, 1]",
        "output": "122"
      },
      {
        "input": "flowers = [5, 3, 1, 3, 5, 2, 5, 1, 3, 5, 4, 3, 5]",
        "output": "45"
      },
      {
        "input": "flowers = [10, 20, 30, -10, 20, -10, 40, 30, 20, 10]",
        "output": "180"
      },
      {
        "input": "flowers = [10,10,20,20,30,30,40,40,50,50,40,40,30,30,20,20,10,10,20,20,30,30,40,40,50,50]",
        "output": "580"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]",
        "output": "166"
      },
      {
        "input": "flowers = [-5, -4, -3, -2, -1, -2, -3, -4, -5]",
        "output": "-4"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 4, 3, 2, 1]",
        "output": "25"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "12"
      },
      {
        "input": "flowers = [1, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1]",
        "output": "141"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "81"
      },
      {
        "input": "flowers = [5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5]",
        "output": "39"
      },
      {
        "input": "flowers = [3, -1, 2, -1, 3, -1, 2, -1, 3]",
        "output": "13"
      },
      {
        "input": "flowers = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10, 1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]",
        "output": "65"
      },
      {
        "input": "flowers = [1, -2, 3, 4, -2, 3, 1, -1, 1]",
        "output": "13"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]",
        "output": "56"
      },
      {
        "input": "flowers = [10,-20,30,-40,50,-40,30,-20,10]",
        "output": "130"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "20"
      },
      {
        "input": "flowers = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "20"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "440"
      },
      {
        "input": "flowers = [10, 20, 30, 40, 50, 10, -10, -20, -30, -40, -50]",
        "output": "160"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "100"
      },
      {
        "input": "flowers = [1, -2, 3, 4, 3, 2, 1]",
        "output": "14"
      },
      {
        "input": "flowers = [1000, -500, 2000, -1000, 1000, 3000, 4000, -500, 1000]",
        "output": "12000"
      },
      {
        "input": "flowers = [7,1,3,3,1,7,2,5,2,7]",
        "output": "38"
      },
      {
        "input": "flowers = [-5, -5, -5, -5, -5, -5, -5]",
        "output": "-10"
      },
      {
        "input": "flowers = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "75"
      },
      {
        "input": "flowers = [10,20,30,40,50,60,70,80,90,100,90,80,70,60,50,40,30,20,10]",
        "output": "1000"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]",
        "output": "176"
      },
      {
        "input": "flowers = [10, 20, -10, 30, -20, 40, -10, 20, 10, 50]",
        "output": "130"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "225"
      },
      {
        "input": "flowers = [-5, -1, -5, -2, -3, -1, -4, -1, -5]",
        "output": "-2"
      },
      {
        "input": "flowers = [100, -1, 200, -2, 300, -3, 100, -1, 200, -2, 300, -3]",
        "output": "900"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "175"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "196"
      },
      {
        "input": "flowers = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -1]",
        "output": "-2"
      },
      {
        "input": "flowers = [1,3,2,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,3]",
        "output": "102"
      },
      {
        "input": "flowers = [-1, -2, -3, -4, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0]",
        "output": "25"
      },
      {
        "input": "flowers = [5, 3, -2, 5, 7, -2, 5, 3, 5, 8, 5, 3, -2, 5, 7, -2, 5, 3, 5, 8, 5]",
        "output": "87"
      },
      {
        "input": "flowers = [10000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10000]",
        "output": "20045"
      },
      {
        "input": "flowers = [1, -2, 3, 4, -2, 3, 1, 5, 1]",
        "output": "18"
      },
      {
        "input": "flowers = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "420"
      },
      {
        "input": "flowers = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "75"
      },
      {
        "input": "flowers = [100, 200, 300, 400, 500, 400, 300, 200, 100]",
        "output": "2500"
      },
      {
        "input": "flowers = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10]",
        "output": "40"
      },
      {
        "input": "flowers = [-1,-2,-3,-4,-5,-4,-3,-2,-1,-2,-1]",
        "output": "-2"
      },
      {
        "input": "flowers = [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1]",
        "output": "0"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "144"
      },
      {
        "input": "flowers = [1,2,3,4,5,4,3,2,1,2,1,2,3,4,3,2,1,2,1,2,3,4,3,2,1,2,1]",
        "output": "64"
      },
      {
        "input": "flowers = [1, -2, 3, 4, 5, 3, 2, 1]",
        "output": "19"
      },
      {
        "input": "flowers = [1, -2, 3, 4, -1, 5, 6, 3, -2, 1]",
        "output": "23"
      },
      {
        "input": "flowers = [1, -2, 3, 4, -5, 3, 2, -1, 3]",
        "output": "15"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "100"
      },
      {
        "input": "flowers = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 100, -100, -200, -300, -400, -500, -600, -700, -800, -900, -1000]",
        "output": "5600"
      },
      {
        "input": "flowers = [10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 10000, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 10000]",
        "output": "119955"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "65"
      },
      {
        "input": "flowers = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 100]",
        "output": "5600"
      },
      {
        "input": "flowers = [1,2,3,4,5,4,3,2,1,2,1]",
        "output": "28"
      },
      {
        "input": "flowers = [7, -3, 5, -3, 2, 5, -3, 7, 5, 7]",
        "output": "38"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "30"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "100"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, -1, -2, -3, -4, -5]",
        "output": "46"
      },
      {
        "input": "flowers = [10000, -10000, 10000, -10000, 10000, -10000, 10000]",
        "output": "40000"
      },
      {
        "input": "flowers = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1]",
        "output": "5"
      },
      {
        "input": "flowers = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]",
        "output": "50"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]",
        "output": "30"
      },
      {
        "input": "flowers = [100,200,300,200,100,200,300,200,100,200,300,200,100]",
        "output": "2500"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,1]",
        "output": "103"
      },
      {
        "input": "flowers = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1]",
        "output": "75"
      },
      {
        "input": "flowers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "1000"
      },
      {
        "input": "flowers = [10, 20, -30, 10, 20, 10, 20, 30, 20, 10]",
        "output": "150"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "110"
      },
      {
        "input": "flowers = [10, 20, -30, 40, -50, 60, -70, 80, -90, 100, 20, 30, 40]",
        "output": "370"
      },
      {
        "input": "flowers = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1]",
        "output": "6"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "169"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "199"
      },
      {
        "input": "flowers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "100"
      }
    ]
  },
  {
    "id": 1183,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Math",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "Consider a matrix M with dimensions width * height, such that every cell has value 0\u00a0or 1, and any square\u00a0sub-matrix of M of size sideLength * sideLength\u00a0has at most maxOnes\u00a0ones.\nReturn the maximum possible number of ones that the matrix M can have.\n\u00a0\nExample 1:\n\nInput: width = 3, height = 3, sideLength = 2, maxOnes = 1\nOutput: 4\nExplanation:\nIn a 3*3 matrix, no 2*2 sub-matrix can have more than 1 one.\nThe best solution that has 4 ones is:\n[1,0,1]\n[0,0,0]\n[1,0,1]\n\nExample 2:\n\nInput: width = 3, height = 3, sideLength = 2, maxOnes = 2\nOutput: 6\nExplanation:\n[1,0,1]\n[1,0,1]\n[1,0,1]\n\n\u00a0\nConstraints:\n\n1 <= width, height <= 100\n1 <= sideLength <= width, height\n0 <= maxOnes <= sideLength * sideLength\n\n",
    "starterCode": "class Solution:\n    def maximumNumberOfOnes(self, width: int, height: int, sideLength: int, maxOnes: int) -> int:\n        ",
    "testCases": [
      {
        "input": "width = 4, height = 4, sideLength = 3, maxOnes = 2",
        "output": "6"
      },
      {
        "input": "width = 6, height = 6, sideLength = 3, maxOnes = 3",
        "output": "12"
      },
      {
        "input": "width = 10, height = 10, sideLength = 5, maxOnes = 6",
        "output": "24"
      },
      {
        "input": "width = 5, height = 5, sideLength = 3, maxOnes = 3",
        "output": "12"
      },
      {
        "input": "width = 4, height = 4, sideLength = 2, maxOnes = 3",
        "output": "12"
      },
      {
        "input": "width = 3, height = 3, sideLength = 2, maxOnes = 1",
        "output": "4"
      },
      {
        "input": "width = 3, height = 3, sideLength = 2, maxOnes = 2",
        "output": "6"
      },
      {
        "input": "width = 6, height = 6, sideLength = 2, maxOnes = 4",
        "output": "36"
      },
      {
        "input": "width = 100, height = 100, sideLength = 10, maxOnes = 25",
        "output": "2500"
      },
      {
        "input": "width = 6, height = 6, sideLength = 3, maxOnes = 4",
        "output": "16"
      },
      {
        "input": "width = 5, height = 5, sideLength = 3, maxOnes = 2",
        "output": "8"
      },
      {
        "input": "width = 4, height = 4, sideLength = 2, maxOnes = 1",
        "output": "4"
      },
      {
        "input": "width = 30, height = 25, sideLength = 7, maxOnes = 10",
        "output": "192"
      },
      {
        "input": "width = 70, height = 70, sideLength = 25, maxOnes = 50",
        "output": "450"
      },
      {
        "input": "width = 80, height = 40, sideLength = 16, maxOnes = 6",
        "output": "90"
      },
      {
        "input": "width = 50, height = 30, sideLength = 12, maxOnes = 15",
        "output": "216"
      },
      {
        "input": "width = 70, height = 60, sideLength = 12, maxOnes = 18",
        "output": "540"
      },
      {
        "input": "width = 8, height = 16, sideLength = 5, maxOnes = 4",
        "output": "30"
      },
      {
        "input": "width = 21, height = 21, sideLength = 7, maxOnes = 12",
        "output": "108"
      },
      {
        "input": "width = 90, height = 45, sideLength = 9, maxOnes = 8",
        "output": "400"
      },
      {
        "input": "width = 12, height = 9, sideLength = 3, maxOnes = 4",
        "output": "48"
      },
      {
        "input": "width = 25, height = 35, sideLength = 8, maxOnes = 5",
        "output": "92"
      },
      {
        "input": "width = 20, height = 10, sideLength = 5, maxOnes = 6",
        "output": "48"
      },
      {
        "input": "width = 50, height = 50, sideLength = 8, maxOnes = 3",
        "output": "147"
      },
      {
        "input": "width = 8, height = 12, sideLength = 4, maxOnes = 4",
        "output": "24"
      },
      {
        "input": "width = 75, height = 100, sideLength = 15, maxOnes = 12",
        "output": "420"
      },
      {
        "input": "width = 40, height = 35, sideLength = 9, maxOnes = 18",
        "output": "360"
      },
      {
        "input": "width = 30, height = 40, sideLength = 12, maxOnes = 6",
        "output": "72"
      },
      {
        "input": "width = 100, height = 100, sideLength = 10, maxOnes = 5",
        "output": "500"
      },
      {
        "input": "width = 15, height = 20, sideLength = 5, maxOnes = 4",
        "output": "48"
      },
      {
        "input": "width = 7, height = 9, sideLength = 3, maxOnes = 2",
        "output": "18"
      },
      {
        "input": "width = 18, height = 15, sideLength = 3, maxOnes = 2",
        "output": "60"
      },
      {
        "input": "width = 90, height = 90, sideLength = 18, maxOnes = 27",
        "output": "675"
      },
      {
        "input": "width = 90, height = 50, sideLength = 10, maxOnes = 7",
        "output": "315"
      },
      {
        "input": "width = 7, height = 8, sideLength = 2, maxOnes = 1",
        "output": "16"
      },
      {
        "input": "width = 100, height = 100, sideLength = 10, maxOnes = 9",
        "output": "900"
      },
      {
        "input": "width = 70, height = 80, sideLength = 7, maxOnes = 10",
        "output": "1200"
      },
      {
        "input": "width = 99, height = 100, sideLength = 10, maxOnes = 15",
        "output": "1500"
      },
      {
        "input": "width = 16, height = 18, sideLength = 5, maxOnes = 6",
        "output": "84"
      },
      {
        "input": "width = 80, height = 70, sideLength = 14, maxOnes = 20",
        "output": "600"
      },
      {
        "input": "width = 30, height = 25, sideLength = 5, maxOnes = 15",
        "output": "450"
      },
      {
        "input": "width = 18, height = 18, sideLength = 6, maxOnes = 9",
        "output": "81"
      },
      {
        "input": "width = 12, height = 15, sideLength = 4, maxOnes = 3",
        "output": "36"
      },
      {
        "input": "width = 100, height = 100, sideLength = 50, maxOnes = 1500",
        "output": "6000"
      },
      {
        "input": "width = 95, height = 65, sideLength = 13, maxOnes = 9",
        "output": "360"
      },
      {
        "input": "width = 60, height = 70, sideLength = 10, maxOnes = 8",
        "output": "336"
      },
      {
        "input": "width = 100, height = 100, sideLength = 25, maxOnes = 10",
        "output": "160"
      },
      {
        "input": "width = 20, height = 15, sideLength = 4, maxOnes = 5",
        "output": "100"
      },
      {
        "input": "width = 75, height = 45, sideLength = 10, maxOnes = 4",
        "output": "160"
      },
      {
        "input": "width = 16, height = 16, sideLength = 8, maxOnes = 16",
        "output": "64"
      },
      {
        "input": "width = 50, height = 40, sideLength = 10, maxOnes = 15",
        "output": "300"
      },
      {
        "input": "width = 15, height = 15, sideLength = 5, maxOnes = 8",
        "output": "72"
      },
      {
        "input": "width = 9, height = 6, sideLength = 2, maxOnes = 2",
        "output": "30"
      },
      {
        "input": "width = 120, height = 120, sideLength = 25, maxOnes = 30",
        "output": "750"
      },
      {
        "input": "width = 50, height = 50, sideLength = 13, maxOnes = 10",
        "output": "160"
      },
      {
        "input": "width = 80, height = 70, sideLength = 7, maxOnes = 20",
        "output": "2400"
      },
      {
        "input": "width = 75, height = 75, sideLength = 12, maxOnes = 7",
        "output": "343"
      },
      {
        "input": "width = 10, height = 8, sideLength = 3, maxOnes = 5",
        "output": "51"
      },
      {
        "input": "width = 60, height = 70, sideLength = 14, maxOnes = 8",
        "output": "200"
      },
      {
        "input": "width = 60, height = 60, sideLength = 12, maxOnes = 10",
        "output": "250"
      },
      {
        "input": "width = 15, height = 15, sideLength = 4, maxOnes = 5",
        "output": "80"
      },
      {
        "input": "width = 20, height = 20, sideLength = 7, maxOnes = 10",
        "output": "90"
      },
      {
        "input": "width = 40, height = 30, sideLength = 6, maxOnes = 9",
        "output": "315"
      },
      {
        "input": "width = 70, height = 30, sideLength = 14, maxOnes = 4",
        "output": "60"
      },
      {
        "input": "width = 9, height = 12, sideLength = 4, maxOnes = 4",
        "output": "36"
      },
      {
        "input": "width = 18, height = 12, sideLength = 6, maxOnes = 6",
        "output": "36"
      },
      {
        "input": "width = 22, height = 18, sideLength = 6, maxOnes = 10",
        "output": "120"
      },
      {
        "input": "width = 15, height = 20, sideLength = 5, maxOnes = 7",
        "output": "84"
      },
      {
        "input": "width = 75, height = 85, sideLength = 8, maxOnes = 25",
        "output": "2649"
      },
      {
        "input": "width = 100, height = 100, sideLength = 20, maxOnes = 25",
        "output": "625"
      },
      {
        "input": "width = 9, height = 12, sideLength = 4, maxOnes = 3",
        "output": "27"
      },
      {
        "input": "width = 60, height = 60, sideLength = 10, maxOnes = 5",
        "output": "180"
      },
      {
        "input": "width = 25, height = 25, sideLength = 6, maxOnes = 9",
        "output": "185"
      },
      {
        "input": "width = 9, height = 10, sideLength = 4, maxOnes = 3",
        "output": "24"
      },
      {
        "input": "width = 100, height = 100, sideLength = 15, maxOnes = 30",
        "output": "1470"
      },
      {
        "input": "width = 90, height = 80, sideLength = 16, maxOnes = 25",
        "output": "750"
      },
      {
        "input": "width = 8, height = 10, sideLength = 3, maxOnes = 2",
        "output": "24"
      },
      {
        "input": "width = 100, height = 90, sideLength = 18, maxOnes = 30",
        "output": "900"
      },
      {
        "input": "width = 8, height = 6, sideLength = 4, maxOnes = 5",
        "output": "20"
      },
      {
        "input": "width = 30, height = 20, sideLength = 6, maxOnes = 10",
        "output": "200"
      },
      {
        "input": "width = 97, height = 83, sideLength = 13, maxOnes = 20",
        "output": "1120"
      },
      {
        "input": "width = 15, height = 20, sideLength = 5, maxOnes = 8",
        "output": "96"
      },
      {
        "input": "width = 90, height = 90, sideLength = 11, maxOnes = 22",
        "output": "1620"
      },
      {
        "input": "width = 50, height = 50, sideLength = 20, maxOnes = 15",
        "output": "135"
      },
      {
        "input": "width = 11, height = 11, sideLength = 4, maxOnes = 2",
        "output": "18"
      },
      {
        "input": "width = 90, height = 50, sideLength = 15, maxOnes = 8",
        "output": "192"
      },
      {
        "input": "width = 60, height = 45, sideLength = 5, maxOnes = 12",
        "output": "1296"
      },
      {
        "input": "width = 60, height = 50, sideLength = 8, maxOnes = 12",
        "output": "644"
      },
      {
        "input": "width = 15, height = 20, sideLength = 7, maxOnes = 5",
        "output": "45"
      },
      {
        "input": "width = 55, height = 55, sideLength = 5, maxOnes = 3",
        "output": "363"
      },
      {
        "input": "width = 15, height = 12, sideLength = 5, maxOnes = 7",
        "output": "63"
      },
      {
        "input": "width = 14, height = 14, sideLength = 7, maxOnes = 9",
        "output": "36"
      },
      {
        "input": "width = 14, height = 14, sideLength = 6, maxOnes = 9",
        "output": "66"
      },
      {
        "input": "width = 100, height = 50, sideLength = 20, maxOnes = 18",
        "output": "270"
      },
      {
        "input": "width = 85, height = 75, sideLength = 15, maxOnes = 20",
        "output": "600"
      },
      {
        "input": "width = 99, height = 99, sideLength = 17, maxOnes = 12",
        "output": "432"
      },
      {
        "input": "width = 60, height = 60, sideLength = 12, maxOnes = 16",
        "output": "400"
      },
      {
        "input": "width = 85, height = 65, sideLength = 20, maxOnes = 25",
        "output": "500"
      },
      {
        "input": "width = 25, height = 25, sideLength = 5, maxOnes = 12",
        "output": "300"
      },
      {
        "input": "width = 45, height = 55, sideLength = 18, maxOnes = 9",
        "output": "108"
      },
      {
        "input": "width = 80, height = 80, sideLength = 15, maxOnes = 10",
        "output": "360"
      },
      {
        "input": "width = 60, height = 60, sideLength = 15, maxOnes = 20",
        "output": "320"
      },
      {
        "input": "width = 8, height = 12, sideLength = 4, maxOnes = 3",
        "output": "18"
      },
      {
        "input": "width = 11, height = 11, sideLength = 4, maxOnes = 3",
        "output": "27"
      },
      {
        "input": "width = 85, height = 55, sideLength = 11, maxOnes = 7",
        "output": "280"
      },
      {
        "input": "width = 25, height = 30, sideLength = 7, maxOnes = 10",
        "output": "192"
      },
      {
        "input": "width = 25, height = 30, sideLength = 4, maxOnes = 5",
        "output": "258"
      },
      {
        "input": "width = 45, height = 55, sideLength = 17, maxOnes = 20",
        "output": "240"
      },
      {
        "input": "width = 70, height = 70, sideLength = 7, maxOnes = 12",
        "output": "1200"
      },
      {
        "input": "width = 45, height = 55, sideLength = 11, maxOnes = 12",
        "output": "295"
      }
    ]
  },
  {
    "id": 2809,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "problemDescription": "You are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation:\n\nChoose an index 0 <= i < nums1.length and make nums1[i] = 0.\n\nYou are also given an integer x.\nReturn the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible.\n\u00a0\nExample 1:\n\nInput: nums1 = [1,2,3], nums2 = [1,2,3], x = 4\nOutput: 3\nExplanation: \nFor the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6]. \nFor the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9]. \nFor the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0]. \nNow sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3.\n\n\nExample 2:\n\nInput: nums1 = [1,2,3], nums2 = [3,3,3], x = 4\nOutput: -1\nExplanation: It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.\n\n\u00a0\nConstraints:\n\n1 <= nums1.length <= 103\n1 <= nums1[i] <= 103\n0 <= nums2[i] <= 103\nnums1.length == nums2.length\n0 <= x <= 106\n\n",
    "starterCode": "class Solution:\n    def minimumTime(self, nums1: List[int], nums2: List[int], x: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums1 = [1,2,3], nums2 = [1,2,3], x = 4",
        "output": "3"
      },
      {
        "input": "nums1 = [5,3,8], nums2 = [2,1,4], x = 15",
        "output": "1"
      },
      {
        "input": "nums1 = [5,5,5], nums2 = [1,1,1], x = 15",
        "output": "0"
      },
      {
        "input": "nums1 = [10,10,10], nums2 = [0,0,0], x = 30",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1], nums2 = [0,0,0], x = 0",
        "output": "3"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1], x = 25",
        "output": "0"
      },
      {
        "input": "nums1 = [100,200,300], nums2 = [10,20,30], x = 1000",
        "output": "0"
      },
      {
        "input": "nums1 = [3,3,3], nums2 = [1,2,3], x = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [3,3,3], x = 4",
        "output": "-1"
      },
      {
        "input": "nums1 = [10,20,30], nums2 = [0,0,0], x = 15",
        "output": "2"
      },
      {
        "input": "nums1 = [100,200], nums2 = [50,100], x = 1000",
        "output": "0"
      },
      {
        "input": "nums1 = [10,20,30], nums2 = [0,0,0], x = 10",
        "output": "2"
      },
      {
        "input": "nums1 = [1,1,1,1], nums2 = [1,1,1,1], x = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,1,1], nums2 = [2,2,2,2,2], x = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [2,4,6], nums2 = [1,1,1], x = 12",
        "output": "0"
      },
      {
        "input": "nums1 = [10,20,30,40], nums2 = [1,2,3,4], x = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [5,3,1], nums2 = [2,1,3], x = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [7,5,3], nums2 = [2,4,6], x = 20",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2], nums2 = [3,4], x = 5",
        "output": "0"
      },
      {
        "input": "nums1 = [3,2,1], nums2 = [1,1,1], x = 5",
        "output": "1"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [5,5,5,5,5], x = 25",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,1], nums2 = [1,1,1,1], x = 4",
        "output": "0"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [1,2,3,4,5], x = 150",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1], nums2 = [1,1,1], x = 1",
        "output": "-1"
      },
      {
        "input": "nums1 = [3,3,3], nums2 = [1,1,1], x = 5",
        "output": "3"
      },
      {
        "input": "nums1 = [999, 998, 997, 996, 995], nums2 = [1, 2, 3, 4, 5], x = 4500",
        "output": "1"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [5, 5, 5, 5, 5], x = 5",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300, 400], nums2 = [0, 0, 0, 0], x = 1000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 5",
        "output": "-1"
      },
      {
        "input": "nums1 = [10, 20, 30], nums2 = [1, 2, 3], x = 50",
        "output": "1"
      },
      {
        "input": "nums1 = [10, 20, 30], nums2 = [0, 0, 0], x = 15",
        "output": "2"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 5000",
        "output": "1"
      },
      {
        "input": "nums1 = [10, 20, 30], nums2 = [1, 2, 3], x = 60",
        "output": "0"
      },
      {
        "input": "nums1 = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 50",
        "output": "10"
      },
      {
        "input": "nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1], x = 4",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 10, 100, 1000], nums2 = [1000, 100, 10, 1], x = 2000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9], nums2 = [9, 7, 5, 3, 1], x = 20",
        "output": "-1"
      },
      {
        "input": "nums1 = [50, 100, 150, 200], nums2 = [1, 2, 3, 4], x = 300",
        "output": "2"
      },
      {
        "input": "nums1 = [1000, 1000, 1000], nums2 = [1, 1, 1], x = 2500",
        "output": "1"
      },
      {
        "input": "nums1 = [10, 10, 10, 10, 10], nums2 = [5, 5, 5, 5, 5], x = 25",
        "output": "-1"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 550",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 10, 10, 10], nums2 = [1, 2, 3, 4], x = 30",
        "output": "2"
      },
      {
        "input": "nums1 = [5, 10, 15, 20], nums2 = [1, 1, 1, 1], x = 15",
        "output": "3"
      },
      {
        "input": "nums1 = [5, 15, 25, 35, 45], nums2 = [1, 1, 1, 1, 1], x = 50",
        "output": "3"
      },
      {
        "input": "nums1 = [999, 998, 997, 996, 995], nums2 = [1, 2, 3, 4, 5], x = 5000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [10, 20, 30, 40, 50], x = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], x = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300], nums2 = [10, 20, 30], x = 1500",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1], x = 5",
        "output": "0"
      },
      {
        "input": "nums1 = [500, 500, 500], nums2 = [1, 1, 1], x = 1000",
        "output": "2"
      },
      {
        "input": "nums1 = [1000, 1000, 1000, 1000, 1000], nums2 = [1000, 1000, 1000, 1000, 1000], x = 5000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [1, 1, 1, 1, 1], x = 5",
        "output": "-1"
      },
      {
        "input": "nums1 = [3, 6, 9], nums2 = [2, 4, 6], x = 20",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [9, 8, 7, 6, 5], x = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 100",
        "output": "-1"
      },
      {
        "input": "nums1 = [1, 1, 1, 1], nums2 = [1, 1, 1, 1], x = 0",
        "output": "-1"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 55",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], x = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [19, 17, 15, 13, 11, 9, 7, 5, 3, 1], x = 200",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [5, 4, 3, 2, 1], x = 5",
        "output": "0"
      },
      {
        "input": "nums1 = [1000, 500, 250, 125, 62, 31], nums2 = [62, 31, 15, 7, 3, 1], x = 2000",
        "output": "0"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25], nums2 = [1, 2, 3, 4, 5], x = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300], nums2 = [10, 20, 30], x = 1000",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], x = 10",
        "output": "0"
      },
      {
        "input": "nums1 = [5, 10, 15, 20], nums2 = [2, 4, 6, 8], x = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [0, 0, 0, 0, 0], x = 15",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], x = 5000",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 100, 100], nums2 = [50, 50, 50], x = 300",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], x = 550",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300], nums2 = [0, 0, 0], x = 150",
        "output": "2"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [0, 0, 0, 0, 0], x = 50",
        "output": "3"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25], nums2 = [5, 4, 3, 2, 1], x = 50",
        "output": "3"
      },
      {
        "input": "nums1 = [100, 200, 300, 400], nums2 = [1, 2, 3, 4], x = 500",
        "output": "2"
      },
      {
        "input": "nums1 = [9, 9, 9, 9], nums2 = [1, 2, 3, 4], x = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [1000, 1000, 1000], nums2 = [1000, 1000, 1000], x = 3000",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 150, 200, 250, 300], nums2 = [5, 10, 15, 20, 25], x = 2000",
        "output": "0"
      },
      {
        "input": "nums1 = [999, 999, 999], nums2 = [1000, 1000, 1000], x = 2997",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], x = 55",
        "output": "0"
      },
      {
        "input": "nums1 = [9, 8, 7, 6, 5], nums2 = [0, 1, 2, 3, 4], x = 30",
        "output": "3"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [1, 2, 3, 4, 5], x = 50",
        "output": "3"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [1, 2, 3, 4, 5], x = 15",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 600",
        "output": "0"
      },
      {
        "input": "nums1 = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 5500",
        "output": "0"
      },
      {
        "input": "nums1 = [50, 50, 50, 50], nums2 = [0, 0, 0, 0], x = 150",
        "output": "1"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1], x = 20",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [5, 4, 3, 2, 1], x = 100",
        "output": "2"
      },
      {
        "input": "nums1 = [10, 20, 30], nums2 = [5, 0, 0], x = 30",
        "output": "2"
      },
      {
        "input": "nums1 = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500], nums2 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], x = 10000",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40], nums2 = [1, 2, 3, 4], x = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 10, 10, 10, 10], nums2 = [0, 0, 0, 0, 0], x = 10",
        "output": "4"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [1, 2, 3, 4, 5], x = 1500",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [5, 4, 3, 2, 1], x = 150",
        "output": "0"
      },
      {
        "input": "nums1 = [2, 4, 6, 8, 10], nums2 = [1, 3, 5, 7, 9], x = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 5000",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [0, 0, 0, 0, 0], x = 150",
        "output": "0"
      },
      {
        "input": "nums1 = [500, 500, 500, 500, 500], nums2 = [0, 1, 2, 3, 4], x = 2000",
        "output": "2"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1], x = 50",
        "output": "0"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [0, 0, 0, 0, 1000], x = 1500",
        "output": "0"
      },
      {
        "input": "nums1 = [50, 40, 30, 20, 10], nums2 = [1, 2, 3, 4, 5], x = 150",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [5, 5, 5, 5, 5], x = 200",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 100",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 55",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [100, 100, 100, 100, 100], x = 500",
        "output": "0"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25], nums2 = [1, 1, 1, 1, 1], x = 50",
        "output": "2"
      },
      {
        "input": "nums1 = [100, 200, 300], nums2 = [5, 10, 15], x = 600",
        "output": "0"
      },
      {
        "input": "nums1 = [999, 999, 999], nums2 = [1, 1, 1], x = 2995",
        "output": "1"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x = 500",
        "output": "1"
      },
      {
        "input": "nums1 = [100, 200, 300], nums2 = [5, 10, 15], x = 500",
        "output": "1"
      },
      {
        "input": "nums1 = [9, 8, 7, 6, 5, 4, 3, 2, 1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9], x = 45",
        "output": "0"
      },
      {
        "input": "nums1 = [7, 14, 21, 28], nums2 = [1, 1, 1, 1], x = 50",
        "output": "1"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [1, 1, 1, 1, 1], x = 1500",
        "output": "0"
      }
    ]
  },
  {
    "id": 2868,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Math",
      "Two Pointers",
      "String",
      "Game Theory"
    ],
    "problemDescription": "Alice and Bob each have a lexicographically sorted array of strings named a and b respectively.\nThey are playing a wording game with the following rules:\n\nOn each turn, the current player should play a word from their list such that the new word is closely greater than the last played word; then it's the other player's turn.\nIf a player can't play a word on their turn, they lose.\n\nAlice starts the game by playing her lexicographically smallest word.\nGiven a and b, return true if Alice can win knowing that both players play their best, and false otherwise.\nA word w is closely greater than a word z if the following conditions are met:\n\nw is lexicographically greater than z.\nIf w1 is the first letter of w and z1 is the first letter of z, w1 should either be equal to z1 or be the letter after z1 in the alphabet.\nFor example, the word \"care\" is closely greater than \"book\" and \"car\", but is not closely greater than \"ant\" or \"cook\".\n\nA string s is lexicographically greater than a string t if in the first position where s and t differ, string s has a letter that appears later in the alphabet than the corresponding letter in t. If the first min(s.length, t.length) characters do not differ, then the longer string is the lexicographically greater one.\n\u00a0\nExample 1:\n\nInput: a = [\"avokado\",\"dabar\"], b = [\"brazil\"]\nOutput: false\nExplanation: Alice must start the game by playing the word \"avokado\" since it's her smallest word, then Bob plays his only word, \"brazil\", which he can play because its first letter, 'b', is the letter after Alice's word's first letter, 'a'.\nAlice can't play a word since the first letter of the only word left is not equal to 'b' or the letter after 'b', 'c'.\nSo, Alice loses, and the game ends.\nExample 2:\n\nInput: a = [\"ananas\",\"atlas\",\"banana\"], b = [\"albatros\",\"cikla\",\"nogomet\"]\nOutput: true\nExplanation: Alice must start the game by playing the word \"ananas\".\nBob can't play a word since the only word he has that starts with the letter 'a' or 'b' is \"albatros\", which is smaller than Alice's word.\nSo Alice wins, and the game ends.\nExample 3:\n\nInput: a = [\"hrvatska\",\"zastava\"], b = [\"bijeli\",\"galeb\"]\nOutput: true\nExplanation: Alice must start the game by playing the word \"hrvatska\".\nBob can't play a word since the first letter of both of his words are smaller than the first letter of Alice's word, 'h'.\nSo Alice wins, and the game ends.\n\n\u00a0\nConstraints:\n\n1 <= a.length, b.length <= 105\na[i] and b[i] consist only of lowercase English letters.\na and b are lexicographically sorted.\nAll the words in a and b combined are distinct.\nThe sum of the lengths of all the words in a and b combined does not exceed 106.\n\n",
    "starterCode": "class Solution:\n    def canAliceWin(self, a: List[str], b: List[str]) -> bool:\n        ",
    "testCases": [
      {
        "input": "a = [\"apple\", \"apricot\"], b = [\"banana\", \"berry\"]",
        "output": "False"
      },
      {
        "input": "a = [\"cat\",\"dog\",\"elephant\"], b = [\"ant\",\"bat\",\"car\"]",
        "output": "True"
      },
      {
        "input": "a = [\"dog\"], b = [\"cat\", \"camel\"]",
        "output": "True"
      },
      {
        "input": "a = [\"ant\", \"antelope\"], b = [\"ant\", \"anteater\"]",
        "output": "True"
      },
      {
        "input": "a = [\"cat\"], b = [\"dog\", \"dolphin\"]",
        "output": "False"
      },
      {
        "input": "a = [\"apple\",\"apricot\",\"banana\"], b = [\"avocado\",\"berry\",\"blueberry\"]",
        "output": "False"
      },
      {
        "input": "a = [\"hrvatska\",\"zastava\"], b = [\"bijeli\",\"galeb\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aardvark\", \"albatross\"], b = [\"anteater\", \"armadillo\"]",
        "output": "False"
      },
      {
        "input": "a = [\"avokado\",\"dabar\"], b = [\"brazil\"]",
        "output": "False"
      },
      {
        "input": "a = [\"zebra\"], b = [\"yak\", \"xenon\"]",
        "output": "True"
      },
      {
        "input": "a = [\"apple\", \"banana\"], b = [\"apricot\", \"blueberry\"]",
        "output": "False"
      },
      {
        "input": "a = [\"ananas\",\"atlas\",\"banana\"], b = [\"albatros\",\"cikla\",\"nogomet\"]",
        "output": "True"
      },
      {
        "input": "a = [\"antelope\", \"antenna\"], b = [\"ant\", \"anteater\", \"anemone\"]",
        "output": "True"
      },
      {
        "input": "a = [\"apple\", \"apricot\", \"avocado\"], b = [\"banana\", \"blueberry\", \"blackberry\"]",
        "output": "False"
      },
      {
        "input": "a = [\"feline\", \"felix\"], b = [\"felidae\", \"felinidae\", \"felonia\"]",
        "output": "False"
      },
      {
        "input": "a = [\"quail\", \"quake\", \"quack\"], b = [\"qua\", \"quag\", \"quagmire\"]",
        "output": "True"
      },
      {
        "input": "a = [\"mango\", \"melon\", \"muskmelon\", \"nectarine\"], b = [\"mangosteen\", \"melonade\", \"nectar\", \"papaya\"]",
        "output": "True"
      },
      {
        "input": "a = [\"meerkat\", \"melon\", \"melt\"], b = [\"meet\", \"meal\", \"mean\"]",
        "output": "True"
      },
      {
        "input": "a = [\"narwhal\", \"nail\", \"name\"], b = [\"nail\", \"nanny\", \"nap\"]",
        "output": "True"
      },
      {
        "input": "a = [\"apple\", \"apricot\", \"banana\", \"blueberry\"], b = [\"avocado\", \"berry\", \"blackberry\", \"bluegrass\"]",
        "output": "False"
      },
      {
        "input": "a = [\"gorilla\", \"giraffe\", \"goat\"], b = [\"goose\", \"gnome\", \"gopher\"]",
        "output": "True"
      },
      {
        "input": "a = [\"anaconda\", \"anachronism\", \"anagram\"], b = [\"anatomy\", \"anaphylaxis\", \"anatomist\"]",
        "output": "False"
      },
      {
        "input": "a = [\"pelican\", \"peak\", \"peal\"], b = [\"pea\", \"pear\", \"peat\"]",
        "output": "True"
      },
      {
        "input": "a = [\"apple\", \"apricot\", \"avocado\"], b = [\"apricot\", \"avocado\", \"banana\", \"berry\"]",
        "output": "False"
      },
      {
        "input": "a = [\"viper\", \"vulture\"], b = [\"toucan\", \"tuna\", \"turtle\", \"viper\", \"vulture\", \"walrus\"]",
        "output": "False"
      },
      {
        "input": "a = [\"sloth\", \"skunk\", \"sparrow\"], b = [\"sloth\", \"skunk\", \"sparrow\", \"squirrel\"]",
        "output": "False"
      },
      {
        "input": "a = [\"cat\", \"caterpillar\", \"caterwaul\"], b = [\"canary\", \"caterpillar\", \"catfish\"]",
        "output": "False"
      },
      {
        "input": "a = [\"jaguar\", \"jackal\", \"javelina\"], b = [\"jaguarundi\", \"jackrabbit\", \"jay\"]",
        "output": "False"
      },
      {
        "input": "a = [\"ostrich\", \"otter\"], b = [\"narwhal\", \"octopus\", \"orca\", \"otter\", \"owl\"]",
        "output": "False"
      },
      {
        "input": "a = [\"baboon\", \"baboonb\", \"baboonc\"], b = [\"babood\", \"babooe\", \"babooe\"]",
        "output": "True"
      },
      {
        "input": "a = [\"abc\", \"abcd\", \"abcde\"], b = [\"ab\", \"abf\", \"ac\"]",
        "output": "False"
      },
      {
        "input": "a = [\"xenon\", \"xerox\", \"xylophone\"], b = [\"vulcan\", \"wasp\", \"wyrm\", \"xenon\", \"xerox\", \"xylophone\", \"yak\", \"yam\", \"yak\"]",
        "output": "False"
      },
      {
        "input": "a = [\"zebra\", \"zephyr\"], b = [\"yxion\", \"yokel\"]",
        "output": "True"
      },
      {
        "input": "a = [\"banana\", \"bandanna\", \"bandito\"], b = [\"bandanna\", \"bandit\", \"banjo\"]",
        "output": "False"
      },
      {
        "input": "a = [\"umbrella\", \"unicorn\", \"urial\"], b = [\"umbrella\", \"unicorn\", \"urial\", \"uakari\"]",
        "output": "True"
      },
      {
        "input": "a = [\"blueberry\", \"cherry\", \"date\"], b = [\"banana\", \"cantaloupe\", \"dragonfruit\"]",
        "output": "False"
      },
      {
        "input": "a = [\"apple\", \"apricot\", \"banana\", \"blueberry\"], b = [\"avocado\", \"berry\", \"blackberry\", \"bluefish\"]",
        "output": "False"
      },
      {
        "input": "a = [\"antelope\", \"antenna\"], b = [\"anemone\", \"antelope\", \"anteater\"]",
        "output": "True"
      },
      {
        "input": "a = [\"antelope\", \"ant\", \"ape\"], b = [\"bat\", \"bear\", \"beetle\"]",
        "output": "False"
      },
      {
        "input": "a = [\"iguana\", \"impala\", \"indri\"], b = [\"iguana\", \"impala\", \"ibis\"]",
        "output": "True"
      },
      {
        "input": "a = [\"ant\", \"antelope\", \"antiquity\"], b = [\"aardvark\", \"apricot\", \"armadillo\"]",
        "output": "False"
      },
      {
        "input": "a = [\"zebra\", \"zest\"], b = [\"yak\", \"yam\"]",
        "output": "True"
      },
      {
        "input": "a = [\"antelope\", \"antimony\", \"antler\"], b = [\"antelope\", \"antler\", \"anvil\"]",
        "output": "False"
      },
      {
        "input": "a = [\"aardvark\", \"armadillo\", \"antelope\"], b = [\"antiquity\", \"ant\", \"apricot\"]",
        "output": "True"
      },
      {
        "input": "a = [\"panda\", \"peacock\", \"pelican\"], b = [\"ostrich\", \"owl\", \"panda\", \"peacock\", \"pelican\", \"penguin\", \"python\", \"quail\"]",
        "output": "False"
      },
      {
        "input": "a = [\"antelope\", \"antiquity\", \"armadillo\", \"aardvark\"], b = [\"ant\", \"apricot\", \"avocado\"]",
        "output": "False"
      },
      {
        "input": "a = [\"banana\", \"blueberry\", \"bluefish\", \"boysenberry\", \"cantaloupe\"], b = [\"apple\", \"apricot\", \"avocado\", \"berry\", \"blackberry\"]",
        "output": "True"
      },
      {
        "input": "a = [\"zebra\", \"yak\", \"xylophone\"], b = [\"wolf\", \"vulture\", \"toucan\"]",
        "output": "True"
      },
      {
        "input": "a = [\"a\", \"b\", \"c\", \"d\"], b = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]",
        "output": "False"
      },
      {
        "input": "a = [\"ant\", \"ape\", \"arc\", \"are\", \"arm\"], b = [\"apt\", \"arc\", \"ard\", \"art\"]",
        "output": "False"
      },
      {
        "input": "a = [\"aaa\", \"aaab\", \"aaac\"], b = [\"aaad\", \"aaae\", \"aaaf\"]",
        "output": "False"
      },
      {
        "input": "a = [\"xylophone\", \"yacht\", \"yak\"], b = [\"xylophone\", \"xenon\", \"xerox\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aaa\", \"aaab\", \"aaac\"], b = [\"aaaa\", \"aab\", \"aac\"]",
        "output": "False"
      },
      {
        "input": "a = [\"antelope\", \"antenna\", \"antler\"], b = [\"ant\", \"anteater\", \"anemone\"]",
        "output": "True"
      },
      {
        "input": "a = [\"turtle\", \"turkey\", \"toucan\"], b = [\"squirrel\", \"tortoise\", \"turkey\", \"toucan\", \"turtle\", \"turtle\", \"turtle\"]",
        "output": "True"
      },
      {
        "input": "a = [\"azalea\", \"azimuth\"], b = [\"axolotl\", \"ayahuasca\"]",
        "output": "True"
      },
      {
        "input": "a = [\"quail\", \"quokka\", \"quoll\"], b = [\"possum\", \"quail\", \"quokka\", \"quoll\", \"rabbit\"]",
        "output": "False"
      },
      {
        "input": "a = [\"quail\", \"quilt\", \"quit\"], b = [\"quip\", \"quipu\", \"quipus\"]",
        "output": "True"
      },
      {
        "input": "a = [\"cherry\", \"citrus\", \"cucumber\"], b = [\"berry\", \"broccoli\", \"cabbage\", \"carrot\", \"cucumber\"]",
        "output": "False"
      },
      {
        "input": "a = [\"lemur\", \"lemon\", \"lens\"], b = [\"lem\", \"len\", \"level\"]",
        "output": "False"
      },
      {
        "input": "a = [\"ananas\", \"antelope\", \"apricot\", \"avocado\"], b = [\"albatross\", \"anteater\", \"armadillo\", \"baboon\", \"banana\", \"babysitter\"]",
        "output": "False"
      },
      {
        "input": "a = [\"kangaroo\", \"kayak\", \"karate\"], b = [\"kanal\", \"kay\", \"ka\"]",
        "output": "True"
      },
      {
        "input": "a = [\"kiwi\", \"kumquat\", \"lemon\", \"lime\"], b = [\"jackfruit\", \"jujube\", \"kiwi\", \"kumquat\", \"lemonade\", \"limeade\"]",
        "output": "False"
      },
      {
        "input": "a = [\"cat\", \"cherry\", \"citrus\", \"coconut\"], b = [\"banana\", \"berry\", \"broccoli\", \"cabbage\", \"carrot\"]",
        "output": "True"
      },
      {
        "input": "a = [\"quagga\", \"quokka\", \"quoll\"], b = [\"quagga\", \"quokka\", \"quoll\", \"quetzal\"]",
        "output": "True"
      },
      {
        "input": "a = [\"dolphin\", \"dome\", \"domino\"], b = [\"dog\", \"dove\", \"dragonfly\"]",
        "output": "False"
      },
      {
        "input": "a = [\"panda\", \"parrot\", \"peacock\"], b = [\"panda\", \"parrot\", \"pelican\"]",
        "output": "False"
      },
      {
        "input": "a = [\"raccoon\", \"raven\", \"reindeer\"], b = [\"raccoon\", \"raven\", \"reindeer\", \"rhinoceros\"]",
        "output": "False"
      },
      {
        "input": "a = [\"xylophone\", \"yak\", \"yam\"], b = [\"wombat\", \"wolf\", \"wombat\", \"xenon\", \"xylophone\", \"yak\", \"yam\", \"yak\", \"yak\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aardvark\", \"aardwolf\"], b = [\"aalii\", \"aaliyah\"]",
        "output": "True"
      },
      {
        "input": "a = [\"cat\", \"caterpillar\", \"cathedral\"], b = [\"camel\", \"car\", \"canoe\"]",
        "output": "True"
      },
      {
        "input": "a = [\"zebra\", \"zoo\"], b = [\"yak\", \"yeti\", \"yodel\"]",
        "output": "True"
      },
      {
        "input": "a = [\"abcd\", \"abce\", \"abcf\"], b = [\"abcc\", \"abcg\", \"abch\"]",
        "output": "False"
      },
      {
        "input": "a = [\"flower\", \"fowl\", \"fox\"], b = [\"flour\", \"frost\", \"fog\"]",
        "output": "False"
      },
      {
        "input": "a = [\"abacaxi\", \"abacaxu\", \"abacaxin\", \"abacaxo\"], b = [\"abacax\", \"abacaxos\", \"abacaxi\", \"abacaxio\"]",
        "output": "True"
      },
      {
        "input": "a = [\"iguana\", \"ice\", \"iguana\"], b = [\"iceberg\", \"ice cream\", \"icy\"]",
        "output": "True"
      },
      {
        "input": "a = [\"dog\", \"dolphin\", \"dragon\"], b = [\"dove\", \"donkey\", \"drake\"]",
        "output": "False"
      },
      {
        "input": "a = [\"cat\", \"caterpillar\", \"catch\"], b = [\"car\", \"cart\", \"cash\"]",
        "output": "True"
      },
      {
        "input": "a = [\"octopus\", \"oak\", \"oboe\"], b = [\"obe\", \"obey\", \"obeisance\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aaa\", \"aab\", \"aac\", \"aad\"], b = [\"aba\", \"abb\", \"abc\", \"abd\"]",
        "output": "False"
      },
      {
        "input": "a = [\"narwhal\", \"newt\", \"nymph\"], b = [\"narwhal\", \"newt\", \"nyala\"]",
        "output": "True"
      },
      {
        "input": "a = [\"apple\", \"banana\", \"cherry\"], b = [\"apricot\", \"blueberry\", \"grape\"]",
        "output": "True"
      },
      {
        "input": "a = [\"apple\", \"apricot\", \"avocado\"], b = [\"apricot\", \"banana\", \"blueberry\"]",
        "output": "False"
      },
      {
        "input": "a = [\"dog\", \"dove\", \"dragon\"], b = [\"dactyl\", \"dandelion\", \"darjeeling\"]",
        "output": "True"
      },
      {
        "input": "a = [\"giraffe\", \"gorilla\", \"grizzly\"], b = [\"gibbon\", \"gorilla\", \"grizzly\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aardvark\", \"ant\", \"apricot\"], b = [\"antelope\", \"antiquity\", \"armadillo\"]",
        "output": "False"
      },
      {
        "input": "a = [\"walrus\", \"wasp\", \"weasel\"], b = [\"vulture\", \"wasp\", \"weasel\", \"whale\", \"wolf\", \"wombat\"]",
        "output": "False"
      },
      {
        "input": "a = [\"apricot\", \"avocado\", \"banana\"], b = [\"ant\", \"antelope\", \"antiquity\"]",
        "output": "True"
      },
      {
        "input": "a = [\"amor\", \"amoroso\", \"amour\"], b = [\"amor\", \"amour\", \"amour\"]",
        "output": "False"
      },
      {
        "input": "a = [\"aardvark\", \"aardwolf\", \"aasvogel\"], b = [\"abacaxi\", \"abalone\", \"abraxas\"]",
        "output": "False"
      },
      {
        "input": "a = [\"apple\", \"apricot\", \"avocado\", \"banana\", \"berry\"], b = [\"apex\", \"banana\", \"cherry\", \"date\"]",
        "output": "False"
      },
      {
        "input": "a = [\"zebra\"], b = [\"yak\", \"yak\", \"yak\", \"yak\", \"yak\", \"yak\", \"yak\"]",
        "output": "True"
      },
      {
        "input": "a = [\"zebra\", \"zucchini\"], b = [\"yak\", \"yeti\", \"yam\"]",
        "output": "True"
      },
      {
        "input": "a = [\"cat\", \"caterpillar\", \"catering\"], b = [\"cab\", \"car\", \"cashmere\"]",
        "output": "True"
      },
      {
        "input": "a = [\"bear\", \"bee\", \"beetle\"], b = [\"badger\", \"bat\", \"beaver\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aardwolf\", \"aardvark\", \"aardvarka\"], b = [\"aardvarkb\", \"aardvarkc\", \"aardvarkd\"]",
        "output": "True"
      },
      {
        "input": "a = [\"lion\", \"lynx\", \"leopard\"], b = [\"tiger\", \"tapir\", \"tenrec\"]",
        "output": "True"
      },
      {
        "input": "a = [\"cherry\", \"cantaloupe\"], b = [\"cranberry\", \"cucumber\", \"citrus\"]",
        "output": "False"
      },
      {
        "input": "a = [\"koala\", \"kangaroo\", \"kinkajou\"], b = [\"koala\", \"kangaroo\", \"kiwi\"]",
        "output": "True"
      },
      {
        "input": "a = [\"llama\", \"lemur\", \"leopard\"], b = [\"llama\", \"lemur\", \"leopard\", \"liger\"]",
        "output": "True"
      },
      {
        "input": "a = [\"frog\", \"fox\", \"ferret\"], b = [\"giraffe\", \"goat\", \"gnu\"]",
        "output": "False"
      },
      {
        "input": "a = [\"cat\", \"cherry\", \"coconut\"], b = [\"bear\", \"bat\", \"bird\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aardvark\", \"aardwolf\", \"albatross\", \"alligator\"], b = [\"anteater\", \"antelope\", \"armadillo\", \"baboon\", \"badger\"]",
        "output": "False"
      },
      {
        "input": "a = [\"fig\", \"grape\", \"grapefruit\"], b = [\"elderberry\", \"ginkgo\", \"guava\", \"honeydew\"]",
        "output": "False"
      },
      {
        "input": "a = [\"quince\", \"raspberry\", \"strawberry\"], b = [\"pomegranate\", \"quincefruit\", \"raspberrysauce\", \"strawberryjello\", \"tangerine\"]",
        "output": "False"
      },
      {
        "input": "a = [\"dog\", \"dolphin\"], b = [\"cat\", \"cow\", \"crane\"]",
        "output": "True"
      },
      {
        "input": "a = [\"zebra\"], b = [\"yak\", \"xylophone\"]",
        "output": "True"
      },
      {
        "input": "a = [\"a\", \"ab\", \"abc\"], b = [\"a\", \"ab\", \"abc\"]",
        "output": "True"
      },
      {
        "input": "a = [\"a\", \"ab\", \"abc\"], b = [\"ac\", \"ad\", \"ae\"]",
        "output": "False"
      },
      {
        "input": "a = [\"antelope\", \"antenna\", \"antibody\"], b = [\"amino\", \"and\", \"angle\", \"ankle\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aardvark\", \"albatross\", \"antelope\"], b = [\"baboon\", \"badger\", \"bat\"]",
        "output": "False"
      },
      {
        "input": "a = [\"xyz\", \"xyza\", \"xyzab\"], b = [\"xyzabc\", \"xyzabcd\", \"xyzabcde\"]",
        "output": "False"
      },
      {
        "input": "a = [\"cherry\", \"coconut\", \"cranberry\"], b = [\"blueberry\", \"boysenberry\", \"cantaloupe\", \"chardonnay\", \"clementine\"]",
        "output": "True"
      },
      {
        "input": "a = [\"toucan\", \"tapir\", \"tarantula\"], b = [\"toucan\", \"tapir\", \"tarantula\", \"tarsier\"]",
        "output": "True"
      },
      {
        "input": "a = [\"antelope\", \"antiquity\", \"armadillo\"], b = [\"ant\", \"apricot\", \"avocado\"]",
        "output": "False"
      },
      {
        "input": "a = [\"giraffe\", \"goat\", \"gorilla\"], b = [\"elephant\", \"emu\", \"flamingo\", \"frog\", \"goat\", \"gorilla\"]",
        "output": "True"
      },
      {
        "input": "a = [\"panda\", \"panther\", \"parrot\"], b = [\"monkey\", \"meerkat\", \"marmot\"]",
        "output": "True"
      },
      {
        "input": "a = [\"antelope\", \"apricot\", \"armadillo\"], b = [\"aardvark\", \"ant\", \"antiquity\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aardvark\", \"albatross\", \"antelope\", \"anteater\"], b = [\"aardwolf\", \"alpaca\", \"ant\", \"armadillo\"]",
        "output": "False"
      },
      {
        "input": "a = [\"grape\", \"grapefruit\", \"grapevine\"], b = [\"green\", \"grey\", \"grew\"]",
        "output": "False"
      },
      {
        "input": "a = [\"aardvark\", \"apricot\", \"antiquity\"], b = [\"ant\", \"armadillo\", \"antelope\"]",
        "output": "False"
      },
      {
        "input": "a = [\"jackal\", \"jaguar\", \"jail\"], b = [\"jack\", \"jar\", \"jaw\"]",
        "output": "False"
      },
      {
        "input": "a = [\"umbrella\", \"violet\", \"wheat\", \"xylophone\", \"yellow\", \"zebra\"], b = [\"underground\", \"ufo\", \"violetflower\", \"watermelon\", \"xylophonebox\", \"yellowstone\", \"zebracrossing\"]",
        "output": "False"
      },
      {
        "input": "a = [\"antelope\", \"ant\", \"anaconda\"], b = [\"antelope\", \"anvil\", \"aphid\"]",
        "output": "False"
      },
      {
        "input": "a = [\"banana\", \"bandana\", \"bandwidth\"], b = [\"bamboo\", \"bandicoot\", \"bandanna\"]",
        "output": "True"
      },
      {
        "input": "a = [\"zebra\", \"zoo\"], b = [\"xylophone\", \"xenon\", \"xylography\"]",
        "output": "True"
      },
      {
        "input": "a = [\"zebra\", \"zoo\"], b = [\"yak\", \"yx\", \"yw\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aardvark\", \"albatross\", \"antelope\"], b = [\"aardwolf\", \"alpaca\", \"ant\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aardvark\", \"aardwolf\", \"albatross\"], b = [\"aardvark\", \"albatross\", \"antelope\"]",
        "output": "False"
      },
      {
        "input": "a = [\"aaa\", \"aab\", \"aac\"], b = [\"aaaa\", \"aaab\", \"aaac\"]",
        "output": "True"
      },
      {
        "input": "a = [\"banana\", \"blueberry\", \"cherry\"], b = [\"apple\", \"apricot\", \"avocado\"]",
        "output": "True"
      },
      {
        "input": "a = [\"antelope\", \"antiquity\", \"armadillo\"], b = [\"aardvark\", \"ant\", \"apricot\"]",
        "output": "True"
      },
      {
        "input": "a = [\"dog\", \"dolphin\", \"donkey\"], b = [\"cat\", \"chimpanzee\", \"cow\", \"crab\", \"crocodile\", \"crow\", \"deer\"]",
        "output": "True"
      },
      {
        "input": "a = [\"melon\", \"mango\", \"mule\"], b = [\"lemon\", \"lichen\", \"mango\", \"melon\", \"mule\", \"muskrat\"]",
        "output": "False"
      },
      {
        "input": "a = [\"iguana\", \"iguanaa\", \"iguanaaa\"], b = [\"iguanaaaaa\", \"iguanaaaaaa\", \"iguanaaaaaaaaa\"]",
        "output": "False"
      },
      {
        "input": "a = [\"elephant\", \"elbow\", \"elk\"], b = [\"eagle\", \"earth\", \"egg\"]",
        "output": "True"
      },
      {
        "input": "a = [\"giraffe\", \"gorilla\", \"guinea\"], b = [\"grape\", \"grapefruit\", \"grapevine\"]",
        "output": "True"
      },
      {
        "input": "a = [\"mule\", \"mongoose\", \"meerkat\"], b = [\"mule\", \"mongoose\", \"marmot\"]",
        "output": "True"
      },
      {
        "input": "a = [\"kiwi\", \"kangaroo\"], b = [\"jaguar\", \"jellyfish\", \"kangaroo\", \"koala\"]",
        "output": "False"
      },
      {
        "input": "a = [\"abcd\", \"abce\", \"abcf\"], b = [\"abcd\", \"abce\", \"abcf\", \"abcdg\"]",
        "output": "True"
      },
      {
        "input": "a = [\"apple\", \"apricot\", \"banana\", \"blueberry\"], b = [\"avocado\", \"banana\", \"blackberry\", \"blueberry\"]",
        "output": "True"
      },
      {
        "input": "a = [\"zebra\"], b = [\"yak\", \"xenon\", \"wombat\"]",
        "output": "True"
      },
      {
        "input": "a = [\"elephant\", \"emu\", \"eagle\"], b = [\"dog\", \"dolphin\", \"deer\"]",
        "output": "True"
      },
      {
        "input": "a = [\"cat\", \"dog\", \"elephant\"], b = [\"catfish\", \"dogwood\", \"elephantine\"]",
        "output": "False"
      },
      {
        "input": "a = [\"antelope\", \"ape\", \"apricot\"], b = [\"ant\", \"antler\", \"anvil\", \"ape\", \"apricot\", \"aquarium\"]",
        "output": "False"
      },
      {
        "input": "a = [\"zebra\", \"zoo\"], b = [\"yak\", \"yodel\"],",
        "output": "Error: ord() expected a character, but string of length 3 found"
      },
      {
        "input": "a = [\"banana\", \"berry\", \"blueberry\"], b = [\"banana\", \"berry\", \"blueberry\", \"blackberry\"]",
        "output": "True"
      },
      {
        "input": "a = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], b = [\"apricot\", \"blueberry\", \"cranberry\", \"fig\", \"grape\"]",
        "output": "True"
      },
      {
        "input": "a = [\"zebra\", \"zoo\"], b = [\"yak\", \"yxion\"]",
        "output": "True"
      },
      {
        "input": "a = [\"ant\", \"bear\", \"cat\"], b = [\"ape\", \"bat\", \"canine\"]",
        "output": "True"
      },
      {
        "input": "a = [\"aardvark\", \"apple\", \"apricot\", \"avocado\", \"banana\", \"blueberry\", \"blackberry\", \"carrot\"], b = [\"aardwolf\", \"albatross\", \"ant\", \"antelope\", \"apricot\", \"avocado\", \"banana\", \"blackberry\", \"blueberry\"]",
        "output": "True"
      },
      {
        "input": "a = [\"ocelot\", \"orangutan\", \"opossum\"], b = [\"ocelot\", \"orangutan\", \"ostrich\"]",
        "output": "False"
      },
      {
        "input": "a = [\"orange\", \"papaya\", \"peach\", \"pear\"], b = [\"orangeade\", \"papayafruit\", \"peachtree\", \"pearfruit\", \"plum\"]",
        "output": "False"
      },
      {
        "input": "a = [\"heron\", \"herb\", \"hemlock\"], b = [\"hen\", \"heap\", \"heal\"]",
        "output": "True"
      }
    ]
  },
  {
    "id": 23,
    "difficulty": "Hard",
    "tags": [
      "Linked List",
      "Divide and Conquer",
      "Heap (Priority Queue)",
      "Merge Sort"
    ],
    "problemDescription": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\n\u00a0\nExample 1:\n\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n\nExample 2:\n\nInput: lists = []\nOutput: []\n\nExample 3:\n\nInput: lists = [[]]\nOutput: []\n\n\u00a0\nConstraints:\n\nk == lists.length\n0 <= k <= 104\n0 <= lists[i].length <= 500\n-104 <= lists[i][j] <= 104\nlists[i] is sorted in ascending order.\nThe sum of lists[i].length will not exceed 104.\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "lists = []",
        "output": "None"
      },
      {
        "input": "lists = [[],[],[],[]]",
        "output": "None"
      },
      {
        "input": "lists = [[]]",
        "output": "None"
      }
    ]
  },
  {
    "id": 1916,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Graph",
      "Topological Sort",
      "Math",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "problemDescription": "You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly. Room 0 is already built, so prevRoom[0] = -1. The expansion\u00a0plan is given such that once all the rooms are built, every room will be reachable from room 0.\\r\n\\r\nYou can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected.\u00a0You can choose to build any room as long as its previous room\u00a0is already built.\\r\n\\r\nReturn the number of different orders you can build all the rooms in. Since the answer may be large, return it modulo 109 + 7.\\r\n\\r\n\u00a0\\r\nExample 1:\\r\n\\r\n\\r\nInput: prevRoom = [-1,0,1]\\r\nOutput: 1\\r\nExplanation:\u00a0There is only one way to build the additional rooms: 0 \u2192 1 \u2192 2\\r\n\\r\n\\r\nExample 2:\\r\n\\r\n\\r\n\\r\nInput: prevRoom = [-1,0,0,1,2]\\r\nOutput: 6\\r\nExplanation:\\r\nThe 6 ways are:\\r\n0 \u2192 1 \u2192 3 \u2192 2 \u2192 4\\r\n0 \u2192 2 \u2192 4 \u2192 1 \u2192 3\\r\n0 \u2192 1 \u2192 2 \u2192 3 \u2192 4\\r\n0 \u2192 1 \u2192 2 \u2192 4 \u2192 3\\r\n0 \u2192 2 \u2192 1 \u2192 3 \u2192 4\\r\n0 \u2192 2 \u2192 1 \u2192 4 \u2192 3\\r\n\\r\n\\r\n\u00a0\\r\nConstraints:\\r\n\\r\n\\r\n\tn == prevRoom.length\\r\n\t2 <= n <= 105\\r\n\tprevRoom[0] == -1\\r\n\t0 <= prevRoom[i] < n for all 1 <= i < n\\r\n\tEvery room is reachable from room 0 once all the rooms are built.\\r\n",
    "starterCode": "class Solution:\n    def waysToBuildRooms(self, prevRoom: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]",
        "output": "258365767"
      },
      {
        "input": "prevRoom = [-1,0,1,1,2,2]",
        "output": "8"
      },
      {
        "input": "prevRoom = [-1,0,0,1,2]",
        "output": "6"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2]",
        "output": "80"
      },
      {
        "input": "prevRoom = [-1,0,1]",
        "output": "1"
      },
      {
        "input": "prevRoom = [-1,0,0,0]",
        "output": "6"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,2,2]",
        "output": "120"
      },
      {
        "input": "prevRoom = [-1,0,1,2,2,3,3,4,4,5,5]",
        "output": "896"
      },
      {
        "input": "prevRoom = [-1,0,1,2,3,4]",
        "output": "1"
      },
      {
        "input": "prevRoom = [-1,0,1,2,3,4,5,6,7,8,9]",
        "output": "1"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4]",
        "output": "3360"
      },
      {
        "input": "prevRoom = [-1,0,1,2,3,4,5,6,7,8]",
        "output": "1"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,2,2]",
        "output": "560"
      },
      {
        "input": "prevRoom = [-1,0,0,2,2,4,4,6,6,8,8,10,10,12,12]",
        "output": "645120"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14]",
        "output": "203434154"
      },
      {
        "input": "prevRoom = [-1,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]",
        "output": "37717233"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8]",
        "output": "118354482"
      },
      {
        "input": "prevRoom = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,14]",
        "output": "2"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4]",
        "output": "977384288"
      },
      {
        "input": "prevRoom = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "1"
      },
      {
        "input": "prevRoom = [-1,0,1,2,1,4,2,6,5,7,5,9,8,10,9,11,12,13,14,10]",
        "output": "245044800"
      },
      {
        "input": "prevRoom = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14]",
        "output": "645247453"
      },
      {
        "input": "prevRoom = [-1,0,0,2,2,1,1,3,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "466985999"
      },
      {
        "input": "prevRoom = [-1,0,1,2,0,2,3,4,3,4,5,5,6,7,8,9,10,11,12,11,12]",
        "output": "777509735"
      },
      {
        "input": "prevRoom = [-1,0,0,1,2,3,0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "960269310"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,11,11,12,12]",
        "output": "270200339"
      },
      {
        "input": "prevRoom = [-1,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3]",
        "output": "815328371"
      },
      {
        "input": "prevRoom = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39]",
        "output": "558903913"
      },
      {
        "input": "prevRoom = [-1,0,0,1,2,1,3,4,3,5,6,7,5,8,9,10,11,12,11,13,14,15,16,17,18]",
        "output": "574577861"
      },
      {
        "input": "prevRoom = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]",
        "output": "1"
      },
      {
        "input": "prevRoom = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12]",
        "output": "594293086"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]",
        "output": "65279563"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "258365767"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6]",
        "output": "916824814"
      },
      {
        "input": "prevRoom = [-1,0,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5]",
        "output": "499858301"
      },
      {
        "input": "prevRoom = [-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3]",
        "output": "144195955"
      },
      {
        "input": "prevRoom = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17]",
        "output": "977718734"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5]",
        "output": "927211300"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9]",
        "output": "214454105"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]",
        "output": "881663664"
      },
      {
        "input": "prevRoom = [-1,0,0,1,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7]",
        "output": "182996126"
      },
      {
        "input": "prevRoom = [-1,0,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6]",
        "output": "904828424"
      },
      {
        "input": "prevRoom = [-1,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14]",
        "output": "19170323"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9]",
        "output": "232266423"
      },
      {
        "input": "prevRoom = [-1,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10]",
        "output": "281601700"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7]",
        "output": "134837072"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35]",
        "output": "151296514"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19]",
        "output": "580542770"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6]",
        "output": "374254273"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5]",
        "output": "506880"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,3,4,4,5,5,6,6,7,7]",
        "output": "4036032"
      },
      {
        "input": "prevRoom = [-1,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24]",
        "output": "457389881"
      },
      {
        "input": "prevRoom = [-1,0,1,1,2,2,3,3,3,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9]",
        "output": "862785756"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20]",
        "output": "259495482"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39]",
        "output": "104533170"
      },
      {
        "input": "prevRoom = [-1,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29]",
        "output": "944857254"
      },
      {
        "input": "prevRoom = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4]",
        "output": "185834123"
      },
      {
        "input": "prevRoom = [-1,0,1,2,3,0,5,6,7,8,4,11,12,13,14,10,16,17,18,19]",
        "output": "462"
      },
      {
        "input": "prevRoom = [-1,0,0,1,2,3,2,3,4,5,6,7,8,9,10]",
        "output": "686400"
      },
      {
        "input": "prevRoom = [-1,0,1,1,2,2,3,3,3,4,4,5,5,6,6,6,7,7,7,8,8,9,9,9,10,10,10,11,11,11,12,12]",
        "output": "846964197"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12]",
        "output": "839553459"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9]",
        "output": "864359005"
      },
      {
        "input": "prevRoom = [-1,0,1,0,2,3,2,4,5,6,5,7,8,9,10,11,10,11,12,13,14,15,14,15,16,17,18,19,20]",
        "output": "696057029"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5]",
        "output": "495153778"
      },
      {
        "input": "prevRoom = [-1,0,1,2,1,4,5,6,4,8,9,5,10,11,6,12,13,7,14,15,8,16,17,9,18,19]",
        "output": "298444100"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,1,2,2,2,3,3,3,4,4,5,5,6,6,6,7,7,7,8,8,8,9,9,9]",
        "output": "980653881"
      },
      {
        "input": "prevRoom = [-1,0,1,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "185998261"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]",
        "output": "820019200"
      },
      {
        "input": "prevRoom = [-1,0,0,1,2,2,3,4,4,5,6,7,7,8,8,9,9,10,11,11,12,12,13,14,15,15,16,17,18,19,20,20,21,21,22,22,23,23,24,24]",
        "output": "316920121"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5]",
        "output": "645414306"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8]",
        "output": "989258543"
      },
      {
        "input": "prevRoom = [-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]",
        "output": "414301485"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,1,2,2,2,3,3,4,4,4,5,5,6,6,7,7]",
        "output": "452706138"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11]",
        "output": "37717233"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "185998261"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34]",
        "output": "764478009"
      },
      {
        "input": "prevRoom = [-1,0,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9]",
        "output": "874133999"
      },
      {
        "input": "prevRoom = [-1,0,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]",
        "output": "838387635"
      },
      {
        "input": "prevRoom = [-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "544962428"
      },
      {
        "input": "prevRoom = [-1,0,0,0,0,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5]",
        "output": "268444119"
      },
      {
        "input": "prevRoom = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]",
        "output": "1"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24]",
        "output": "435629637"
      },
      {
        "input": "prevRoom = [-1,0,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11]",
        "output": "59583424"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29]",
        "output": "468972288"
      },
      {
        "input": "prevRoom = [-1,0,1,0,2,1,3,2,4,3,5,4,6,5,7,6,8,7,9,8]",
        "output": "930392109"
      },
      {
        "input": "prevRoom = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "466985999"
      },
      {
        "input": "prevRoom = [-1,0,0,0,1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17]",
        "output": "715654985"
      },
      {
        "input": "prevRoom = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4]",
        "output": "199114634"
      },
      {
        "input": "prevRoom = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]",
        "output": "1"
      }
    ]
  },
  {
    "id": 2392,
    "difficulty": "Hard",
    "tags": [
      "Graph",
      "Topological Sort",
      "Array",
      "Matrix"
    ],
    "problemDescription": "You are given a positive integer k. You are also given:\n\na 2D integer array rowConditions of size n where rowConditions[i] = [abovei, belowi], and\na 2D integer array colConditions of size m where colConditions[i] = [lefti, righti].\n\nThe two arrays contain integers from 1 to k.\nYou have to build a k x k matrix that contains each of the numbers from 1 to k exactly once. The remaining cells should have the value 0.\nThe matrix should also satisfy the following conditions:\n\nThe number abovei should appear in a row that is strictly above the row at which the number belowi appears for all i from 0 to n - 1.\nThe number lefti should appear in a column that is strictly left of the column at which the number righti appears for all i from 0 to m - 1.\n\nReturn any matrix that satisfies the conditions. If no answer exists, return an empty matrix.\n\u00a0\nExample 1:\n\n\nInput: k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]\nOutput: [[3,0,0],[0,0,1],[0,2,0]]\nExplanation: The diagram above shows a valid example of a matrix that satisfies all the conditions.\nThe row conditions are the following:\n- Number 1 is in row 1, and number 2 is in row 2, so 1 is above 2 in the matrix.\n- Number 3 is in row 0, and number 2 is in row 2, so 3 is above 2 in the matrix.\nThe column conditions are the following:\n- Number 2 is in column 1, and number 1 is in column 2, so 2 is left of 1 in the matrix.\n- Number 3 is in column 0, and number 2 is in column 1, so 3 is left of 2 in the matrix.\nNote that there may be multiple correct answers.\n\nExample 2:\n\nInput: k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]]\nOutput: []\nExplanation: From the first two conditions, 3 has to be below 1 but the third conditions needs 3 to be above 1 to be satisfied.\nNo matrix can satisfy all the conditions, so we return the empty matrix.\n\n\u00a0\nConstraints:\n\n2 <= k <= 400\n1 <= rowConditions.length, colConditions.length <= 104\nrowConditions[i].length == colConditions[i].length == 2\n1 <= abovei, belowi, lefti, righti <= k\nabovei != belowi\nlefti != righti\n\n",
    "starterCode": "class Solution:\n    def buildMatrix(self, k: int, rowConditions: List[List[int]], colConditions: List[List[int]]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "k = 5, rowConditions = [[1,5],[2,5],[3,5],[4,5]], colConditions = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "[[1, 0, 0, 0, 0], [0, 2, 0, 0, 0], [0, 0, 3, 0, 0], [0, 0, 0, 4, 0], [0, 0, 0, 0, 5]]"
      },
      {
        "input": "k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]",
        "output": "[[0, 0, 1], [3, 0, 0], [0, 2, 0]]"
      },
      {
        "input": "k = 4, rowConditions = [[4,3],[3,2],[2,1]], colConditions = [[4,3],[3,2],[2,1]]",
        "output": "[[4, 0, 0, 0], [0, 3, 0, 0], [0, 0, 2, 0], [0, 0, 0, 1]]"
      },
      {
        "input": "k = 4, rowConditions = [[1,2],[2,3],[3,4]], colConditions = [[1,2],[2,3],[3,4]]",
        "output": "[[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]"
      },
      {
        "input": "k = 6, rowConditions = [[1,2],[1,3],[2,4],[3,4],[4,5],[4,6]], colConditions = [[1,2],[1,3],[2,4],[3,4],[4,5],[4,6]]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 6]]"
      },
      {
        "input": "k = 4, rowConditions = [[1,2],[3,4]], colConditions = [[1,3],[2,4]]",
        "output": "[[1, 0, 0, 0], [0, 0, 3, 0], [0, 2, 0, 0], [0, 0, 0, 4]]"
      },
      {
        "input": "k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]]",
        "output": "[]"
      },
      {
        "input": "k = 6, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,1]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,1]]",
        "output": "[]"
      },
      {
        "input": "k = 15, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[1,15]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[1,15]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15]]"
      },
      {
        "input": "k = 7, rowConditions = [[7,6],[6,5],[5,4],[4,3],[3,2],[2,1]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "[[0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 15, rowConditions = [[1,15],[2,14],[3,13],[4,12],[5,11],[6,10],[7,9]], colConditions = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9]]"
      },
      {
        "input": "k = 8, rowConditions = [[8,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "[[0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 15, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], colConditions = [[1,8],[2,9],[3,10],[4,11],[5,12],[6,13],[7,14],[8,15]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15]]"
      },
      {
        "input": "k = 15, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[1,15]], colConditions = [[1,15],[2,15],[3,15],[4,15],[5,15],[6,15],[7,15],[8,15],[9,15],[10,15],[11,15],[12,15],[13,15],[14,15],[1,15]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,5],[2,5],[3,6],[4,7],[5,8],[6,9],[7,10]], colConditions = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 10, 0, 0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 9, rowConditions = [[1,9],[2,8],[3,7],[4,6],[5,6]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0]]"
      },
      {
        "input": "k = 6, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[1,6],[2,5],[3,6],[4,6]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[1,6],[2,5],[3,6],[4,6]]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 6]]"
      },
      {
        "input": "k = 7, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], colConditions = [[1,7],[2,6],[3,5],[4,5],[5,6],[6,7]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 7]]"
      },
      {
        "input": "k = 8, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], colConditions = [[1,8],[2,7],[3,6],[4,5]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], colConditions = [[1,10],[2,9],[3,8],[4,7],[5,6]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 10, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 7, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], colConditions = [[1,4],[4,7],[2,5],[5,7],[3,6],[6,7]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 7]]"
      },
      {
        "input": "k = 8, rowConditions = [[1,8],[2,7],[3,6],[4,5],[5,6],[6,7],[7,8]], colConditions = [[1,4],[2,5],[3,6],[4,7],[5,8]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 8]]"
      },
      {
        "input": "k = 9, rowConditions = [[1,3],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], colConditions = [[1,4],[2,5],[3,6],[4,7],[5,8],[6,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,3],[2,4],[5,8],[6,9],[3,7],[4,10]], colConditions = [[1,5],[2,6],[3,9],[4,10],[7,8]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 10, 0]]"
      },
      {
        "input": "k = 6, rowConditions = [[1,3],[2,3],[4,5],[4,6],[5,6]], colConditions = [[1,4],[2,5],[3,6]]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 6]]"
      },
      {
        "input": "k = 12, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]], colConditions = [[1,6],[2,7],[3,8],[4,9],[5,10],[6,11],[7,12]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12]]"
      },
      {
        "input": "k = 13, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]], colConditions = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,1]]",
        "output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0], [0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0], [0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 12, rowConditions = [[1,6],[6,11],[2,7],[7,12],[3,8],[4,9],[5,10]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12]]"
      },
      {
        "input": "k = 8, rowConditions = [[1,3],[3,5],[5,7],[2,4],[4,6],[6,8]], colConditions = [[1,2],[3,4],[5,6],[7,8]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8]]"
      },
      {
        "input": "k = 6, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 6]]"
      },
      {
        "input": "k = 12, rowConditions = [[1,3],[3,5],[5,7],[7,9],[9,11]], colConditions = [[1,4],[4,8],[2,5],[5,9],[3,6],[6,10],[7,11],[8,12]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 11, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], colConditions = [[1,3],[3,5],[5,7],[7,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 0, 0, 0, 10, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 7, rowConditions = [[1,3],[1,4],[1,5],[1,6],[1,7],[2,3],[2,4],[2,5],[2,6],[2,7]], colConditions = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,3],[2,4],[2,5],[2,6],[2,7]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 7]]"
      },
      {
        "input": "k = 9, rowConditions = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9]], colConditions = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9]]"
      },
      {
        "input": "k = 9, rowConditions = [[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1]], colConditions = [[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1]]",
        "output": "[]"
      },
      {
        "input": "k = 12, rowConditions = [[1,4],[2,5],[3,6],[4,7],[5,8],[6,9],[7,10],[8,11],[9,12]], colConditions = [[1,6],[2,7],[3,8],[4,9],[5,10],[6,11],[7,12]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,2],[3,4],[5,6],[7,8],[9,10]], colConditions = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10]]"
      },
      {
        "input": "k = 8, rowConditions = [[1,4],[4,7],[7,8],[2,5],[5,8],[3,6],[6,8]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 8]]"
      },
      {
        "input": "k = 6, rowConditions = [[1,4],[2,4],[3,4],[5,6]], colConditions = [[1,3],[2,3],[5,6]]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 5, 0, 0], [0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 6]]"
      },
      {
        "input": "k = 9, rowConditions = [[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 9, 0, 0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 7, rowConditions = [[1,7],[2,6],[3,5],[4,5],[5,6],[6,7]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 7]]"
      },
      {
        "input": "k = 15, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15]]"
      },
      {
        "input": "k = 11, rowConditions = [[1,11],[2,10],[3,9],[4,8],[5,7]], colConditions = [[1,6],[2,7],[3,8],[4,9],[5,10],[6,11]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 6, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,1]], colConditions = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1]]",
        "output": "[]"
      },
      {
        "input": "k = 6, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[1,6]]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 6]]"
      },
      {
        "input": "k = 9, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[1,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9]]"
      },
      {
        "input": "k = 8, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], colConditions = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 8]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], colConditions = [[1,3],[3,5],[5,7],[7,9],[2,4],[4,6],[6,8],[8,10]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10]]"
      },
      {
        "input": "k = 20, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]], colConditions = [[1,10],[2,11],[3,12],[4,13],[5,14],[6,15],[7,16],[8,17],[9,18],[10,19],[11,20]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20]]"
      },
      {
        "input": "k = 7, rowConditions = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,6],[3,7],[4,7],[5,7]], colConditions = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,6],[3,7],[4,7],[5,7]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 7]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,3],[3,5],[5,7],[7,9],[2,4],[4,6],[6,8],[8,10]], colConditions = [[1,4],[4,7],[7,10],[2,5],[5,8],[3,6],[6,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10]]"
      },
      {
        "input": "k = 7, rowConditions = [[1,3],[2,4],[3,5],[4,6],[5,7]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 7]]"
      },
      {
        "input": "k = 12, rowConditions = [[1,6],[2,6],[3,6],[4,6],[5,6],[6,12],[7,12],[8,12],[9,12],[10,12],[11,12]], colConditions = [[1,3],[3,5],[5,7],[7,9],[9,11]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 7, rowConditions = [[1,2],[2,3],[4,5],[5,6],[6,7]], colConditions = [[1,2],[3,4],[5,6],[6,7]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 2, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 7]]"
      },
      {
        "input": "k = 8, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], colConditions = [[1,3],[3,5],[5,7],[2,4],[4,6],[6,8]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 8]]"
      },
      {
        "input": "k = 12, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12]]"
      },
      {
        "input": "k = 5, rowConditions = [[1,5],[2,5],[3,5],[4,5]], colConditions = [[1,3],[2,3],[3,4],[4,5]]",
        "output": "[[1, 0, 0, 0, 0], [0, 2, 0, 0, 0], [0, 0, 3, 0, 0], [0, 0, 0, 4, 0], [0, 0, 0, 0, 5]]"
      },
      {
        "input": "k = 6, rowConditions = [[1,4],[2,5],[3,6],[4,6]], colConditions = [[1,3],[2,4],[3,5],[4,6]]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 6]]"
      },
      {
        "input": "k = 9, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9]]"
      },
      {
        "input": "k = 8, rowConditions = [[1,8],[2,7],[3,6],[4,5]], colConditions = [[1,8],[2,7],[3,6],[4,5]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 0, 5]]"
      },
      {
        "input": "k = 7, rowConditions = [[1,3],[2,5],[3,6],[4,7],[5,7],[6,7]], colConditions = [[1,4],[2,5],[3,6],[4,7],[5,7],[6,7]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0], [0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 7]]"
      },
      {
        "input": "k = 12, rowConditions = [[1,6],[6,11],[11,3],[3,9],[9,5],[5,2],[2,8],[8,4],[4,12],[12,7],[7,10]], colConditions = [[1,3],[3,5],[5,7],[7,9],[9,11],[11,2],[2,4],[4,6],[6,8],[8,10],[10,12]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12], [0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0]]"
      },
      {
        "input": "k = 15, rowConditions = [[1,5],[2,5],[3,5],[4,5],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], colConditions = [[1,3],[2,4],[3,6],[4,7],[5,8],[6,9],[7,10],[8,11],[9,12],[10,13],[11,14],[12,15]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15]]"
      },
      {
        "input": "k = 6, rowConditions = [[1,6],[2,5],[3,4],[4,6],[5,6]], colConditions = [[1,5],[2,6],[3,5],[4,6]]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 6]]"
      },
      {
        "input": "k = 12, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]], colConditions = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12]]"
      },
      {
        "input": "k = 8, rowConditions = [[1,3],[3,5],[2,4],[4,6],[5,7],[6,8]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 8]]"
      },
      {
        "input": "k = 20, rowConditions = [[1,20],[2,19],[3,18],[4,17],[5,16],[6,15],[7,14],[8,13],[9,12],[10,11]], colConditions = [[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[8,18],[9,19]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 8, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], colConditions = [[8,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1]]",
        "output": "[[0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0], [0, 7, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 15, rowConditions = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,3],[2,3],[3,5],[3,6],[4,7],[7,8],[9,10]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,2],[3,4],[5,6],[7,8],[9,10],[2,3],[4,5],[6,7],[8,9],[1,3],[5,7],[9,11]], colConditions = [[1,2],[3,4],[5,6],[7,8],[9,10],[2,3],[4,5],[6,7],[8,9],[1,3],[5,7],[9,11]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "k = 20, rowConditions = [[1,20],[2,19],[3,18],[4,17],[5,16],[6,15],[7,14],[8,13],[9,12],[10,11]], colConditions = [[1,10],[2,9],[3,8],[4,7],[5,6],[11,19],[12,18],[13,17],[14,16],[15,20]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10]], colConditions = [[1,2],[3,4],[5,6],[7,8],[9,10]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10]]"
      },
      {
        "input": "k = 12, rowConditions = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12]]"
      },
      {
        "input": "k = 9, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], colConditions = [[1,9],[2,8],[3,7],[4,6],[5,7],[6,8],[7,9],[8,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9]]"
      },
      {
        "input": "k = 6, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6]], colConditions = [[1,3],[3,5],[5,6]]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 6]]"
      },
      {
        "input": "k = 15, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], colConditions = [[1,15],[2,14],[3,13],[4,12],[5,11],[6,10],[7,9],[8,8]]",
        "output": "[]"
      },
      {
        "input": "k = 10, rowConditions = [[1,10],[2,9],[3,8],[4,7],[5,6]], colConditions = [[1,10],[2,9],[3,8],[4,7],[5,6]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 10, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6]]"
      },
      {
        "input": "k = 8, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], colConditions = [[1,3],[3,5],[5,7]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 8, 0, 0, 0]]"
      },
      {
        "input": "k = 9, rowConditions = [[1,5],[2,5],[3,5],[4,5],[5,9],[6,9],[7,9],[8,9]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9]]"
      },
      {
        "input": "k = 12, rowConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]], colConditions = [[1,3],[3,5],[5,7],[7,9],[9,11]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11], [0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "k = 6, rowConditions = [[1,3],[2,3],[1,4],[2,4],[1,5],[3,5],[1,6],[2,6]], colConditions = [[1,2],[1,3],[2,4],[3,4],[1,5],[3,5]]",
        "output": "[[1, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0], [0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5]]"
      },
      {
        "input": "k = 15, rowConditions = [[1,3],[3,5],[5,7],[7,9],[9,11],[11,13],[13,15],[2,4],[4,6],[6,8],[8,10],[10,12],[12,14]], colConditions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15]]"
      },
      {
        "input": "k = 10, rowConditions = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]], colConditions = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 10]]"
      }
    ]
  },
  {
    "id": 3193,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given an integer n and a 2D array requirements, where requirements[i] = [endi, cnti] represents the end index and the inversion count of each requirement.\nA pair of indices (i, j) from an integer array nums is called an inversion if:\n\ni < j and nums[i] > nums[j]\n\nReturn the number of permutations perm of [0, 1, 2, ..., n - 1] such that for all requirements[i], perm[0..endi] has exactly cnti inversions.\nSince the answer may be very large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\nInput: n = 3, requirements = [[2,2],[0,0]]\nOutput: 2\nExplanation:\nThe two permutations are:\n\n[2, 0, 1]\n\nPrefix [2, 0, 1] has inversions (0, 1) and (0, 2).\nPrefix [2] has 0 inversions.\n\n\n[1, 2, 0]\n\nPrefix [1, 2, 0] has inversions (0, 2) and (1, 2).\nPrefix [1] has 0 inversions.\n\n\n\n\nExample 2:\n\nInput: n = 3, requirements = [[2,2],[1,1],[0,0]]\nOutput: 1\nExplanation:\nThe only satisfying permutation is [2, 0, 1]:\n\nPrefix [2, 0, 1] has inversions (0, 1) and (0, 2).\nPrefix [2, 0] has an inversion (0, 1).\nPrefix [2] has 0 inversions.\n\n\nExample 3:\n\nInput: n = 2, requirements = [[0,0],[1,0]]\nOutput: 1\nExplanation:\nThe only satisfying permutation is [0, 1]:\n\nPrefix [0] has 0 inversions.\nPrefix [0, 1] has an inversion (0, 1).\n\n\n\u00a0\nConstraints:\n\n2 <= n <= 300\n1 <= requirements.length <= n\nrequirements[i] = [endi, cnti]\n0 <= endi <= n - 1\n0 <= cnti <= 400\nThe input is generated such that there is at least one i such that endi == n - 1.\nThe input is generated such that all endi are unique.\n\n",
    "starterCode": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 4, requirements = [[3,3],[1,1],[2,2],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 5, requirements = [[4,6],[2,2],[3,3],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 2, requirements = [[0,0],[1,0]]",
        "output": "1"
      },
      {
        "input": "n = 3, requirements = [[2,2],[0,0]]",
        "output": "2"
      },
      {
        "input": "n = 3, requirements = [[2,2],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 5, requirements = [[4,5],[2,2],[0,0]]",
        "output": "8"
      },
      {
        "input": "n = 15, requirements = [[14,50],[10,25],[6,15],[4,10],[2,5],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 6, requirements = [[5,6],[3,3],[1,1],[0,0]]",
        "output": "12"
      },
      {
        "input": "n = 7, requirements = [[6,15],[4,10],[2,5],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 30, requirements = [[29,150],[24,75],[19,40],[15,20],[11,10],[7,5],[5,3],[3,1],[1,0],[0,0]]",
        "output": "363866727"
      },
      {
        "input": "n = 15, requirements = [[14,60],[8,20],[9,30],[4,8],[5,12],[2,4],[3,6],[6,18],[7,24],[10,40],[11,50],[12,60],[13,70],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 8, requirements = [[7,14],[5,6],[3,3],[1,1],[2,2],[4,4],[6,8],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 15, requirements = [[14,85],[12,45],[10,20],[8,10],[6,6],[4,3],[2,2],[0,0],[3,5],[5,8],[7,12],[9,18],[11,30],[13,50]]",
        "output": "0"
      },
      {
        "input": "n = 20, requirements = [[19,90],[16,60],[13,40],[10,20],[7,10],[4,5],[2,2],[0,0]]",
        "output": "358259893"
      },
      {
        "input": "n = 5, requirements = [[4,10],[3,6],[2,3],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 15, requirements = [[14,91],[13,78],[12,65],[11,52],[10,39],[9,26],[8,13],[7,0],[6,0],[5,0],[4,0],[3,0],[2,0],[1,0],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 12, requirements = [[11,40],[9,25],[7,15],[5,10],[3,5],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 7, requirements = [[6,21],[5,15],[4,10],[3,6],[2,3],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 8, requirements = [[7,18],[5,10],[4,7],[3,4],[2,3],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 10, requirements = [[9,30],[7,15],[5,8],[3,4],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 9, requirements = [[8,20],[6,12],[5,8],[4,5],[3,3],[2,2],[1,1],[0,0]]",
        "output": "8"
      },
      {
        "input": "n = 6, requirements = [[5,10],[3,4],[2,2],[1,1],[0,0]]",
        "output": "4"
      },
      {
        "input": "n = 20, requirements = [[19,171],[18,153],[17,136],[16,119],[15,102],[14,85],[13,68],[12,51],[11,34],[10,17],[9,0],[8,0],[7,0],[6,0],[5,0],[4,0],[3,0],[2,0],[1,0],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 15, requirements = [[14,105],[11,40],[8,15],[6,7],[3,3],[2,1],[1,0],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 8, requirements = [[7,28],[6,21],[5,15],[4,10],[3,6],[2,3],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 8, requirements = [[7,20],[6,15],[5,10],[4,6],[3,4],[2,3],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 12, requirements = [[11,45],[9,25],[7,15],[5,8],[3,4],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 9, requirements = [[8,18],[6,12],[4,8],[2,4],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 10, requirements = [[9,35],[8,25],[7,20],[6,15],[5,10],[4,6],[3,4],[2,3],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 25, requirements = [[24,100],[15,30],[16,40],[12,20],[13,25],[8,10],[9,15],[6,5],[7,10],[4,3],[5,6],[2,2],[3,3],[17,50],[18,60],[19,70],[20,80],[21,90],[22,100],[23,110],[1,1],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 12, requirements = [[11,66],[8,30],[6,15],[4,7],[2,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 8, requirements = [[7,10],[4,4],[5,5],[2,1],[3,2],[6,6],[1,0],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 25, requirements = [[24,150],[21,105],[18,70],[15,45],[12,30],[9,20],[6,15],[3,10],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 9, requirements = [[8,25],[7,20],[6,15],[5,10],[4,6],[3,4],[2,3],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 7, requirements = [[6,15],[4,8],[2,4],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 6, requirements = [[5,6],[4,3],[3,2],[2,1],[1,0],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 7, requirements = [[6,10],[4,5],[3,3],[2,1],[1,0],[0,0]]",
        "output": "6"
      },
      {
        "input": "n = 10, requirements = [[9,30],[5,10],[6,15],[3,4],[4,8],[2,2],[7,20],[8,25],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 6, requirements = [[5,10],[3,5],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 6, requirements = [[5,6],[3,2],[2,1],[1,0],[0,0]]",
        "output": "5"
      },
      {
        "input": "n = 25, requirements = [[24,250],[22,170],[20,100],[18,60],[16,40],[14,20],[12,10],[10,6],[8,4],[6,3],[4,2],[2,1],[0,0],[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23]]",
        "output": "0"
      },
      {
        "input": "n = 10, requirements = [[9,45],[7,21],[5,10],[4,6],[3,4],[2,2],[1,1],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 10, requirements = [[9,25],[7,15],[5,10],[3,5],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 8, requirements = [[7,10],[5,5],[3,3],[1,1],[0,0]]",
        "output": "54"
      },
      {
        "input": "n = 10, requirements = [[9,28],[7,15],[5,6],[3,3],[1,1],[2,2],[4,4],[6,8],[8,20],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 6, requirements = [[5,9],[4,7],[3,5],[2,3],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 18, requirements = [[17,60],[13,30],[9,15],[6,10],[4,5],[2,2],[0,0]]",
        "output": "217514306"
      },
      {
        "input": "n = 7, requirements = [[6,15],[5,10],[4,6],[3,4],[2,2],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 8, requirements = [[7,21],[5,10],[4,6],[3,4],[2,2],[1,1],[0,0]]",
        "output": "3"
      },
      {
        "input": "n = 15, requirements = [[14,50],[12,30],[10,20],[8,15],[6,10],[4,5],[2,3],[0,0]]",
        "output": "57024"
      },
      {
        "input": "n = 8, requirements = [[7,15],[3,5],[5,10],[2,2],[1,1],[0,0]]",
        "output": "30"
      },
      {
        "input": "n = 7, requirements = [[6,15],[4,10],[2,3],[0,0],[3,4],[5,9],[1,1]]",
        "output": "0"
      },
      {
        "input": "n = 20, requirements = [[19,130],[17,80],[15,40],[13,20],[11,10],[9,6],[7,4],[5,3],[3,2],[1,1],[0,0],[2,2],[4,4],[6,6],[8,8],[10,10],[12,12],[14,14],[16,16],[18,18]]",
        "output": "0"
      },
      {
        "input": "n = 12, requirements = [[11,66],[10,55],[9,45],[8,36],[7,28],[6,21],[5,15],[4,10],[3,6],[2,3],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 6, requirements = [[5,12],[4,8],[3,5],[2,3],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 18, requirements = [[17,63],[14,42],[11,28],[8,21],[5,14],[2,7],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 15, requirements = [[14,45],[11,25],[8,10],[5,5],[2,2],[0,0]]",
        "output": "5518800"
      },
      {
        "input": "n = 12, requirements = [[11,28],[8,15],[5,8],[2,3],[0,0]]",
        "output": "51170"
      },
      {
        "input": "n = 10, requirements = [[9,45],[8,36],[7,28],[6,21],[5,15],[4,10],[3,6],[2,3],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 25, requirements = [[24,100],[20,50],[15,25],[11,15],[7,10],[5,5],[3,2],[1,0],[0,0]]",
        "output": "195391545"
      },
      {
        "input": "n = 10, requirements = [[9,35],[8,25],[7,18],[6,12],[5,8],[4,5],[3,3],[2,2],[1,1],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 8, requirements = [[7,21],[4,10],[3,5],[2,3],[1,1],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 8, requirements = [[7,10],[6,5],[5,2],[4,1],[3,0],[2,0],[1,0],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 9, requirements = [[8,36],[7,28],[6,21],[5,15],[4,10],[3,6],[2,3],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 15, requirements = [[14,105],[13,84],[12,63],[11,42],[10,28],[9,21],[8,15],[7,10],[6,6],[5,4],[4,2],[3,1],[2,1],[1,0],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 12, requirements = [[11,30],[8,15],[5,8],[3,3],[1,1],[0,0]]",
        "output": "47250"
      },
      {
        "input": "n = 20, requirements = [[19,190],[18,171],[17,153],[16,136],[15,119],[14,105],[13,92],[12,80],[11,69],[10,58],[9,48],[8,39],[7,31],[6,24],[5,18],[4,13],[3,9],[2,6],[1,4],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 5, requirements = [[4,6],[3,4],[2,3],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 8, requirements = [[7,14],[5,7],[3,3],[1,1],[0,0]]",
        "output": "105"
      },
      {
        "input": "n = 10, requirements = [[9,45],[5,15],[3,5],[2,3],[1,1],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 8, requirements = [[7,20],[5,10],[3,5],[1,2],[0,0],[6,12],[4,6]]",
        "output": "0"
      },
      {
        "input": "n = 8, requirements = [[7,21],[5,12],[3,6],[1,3],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 9, requirements = [[8,28],[6,18],[4,10],[2,5],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 10, requirements = [[9,40],[7,25],[5,15],[4,10],[3,6],[2,4],[1,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 6, requirements = [[5,6],[3,3],[1,1],[2,2],[4,4],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 10, requirements = [[9,20],[6,10],[4,5],[2,2],[0,0]]",
        "output": "2688"
      },
      {
        "input": "n = 7, requirements = [[6,15],[5,10],[4,6],[2,3],[0,0]]",
        "output": "4"
      },
      {
        "input": "n = 5, requirements = [[4,6],[3,4],[2,2],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 20, requirements = [[19,80],[15,40],[11,20],[7,10],[5,5],[3,2],[1,0],[0,0]]",
        "output": "208478921"
      },
      {
        "input": "n = 15, requirements = [[14,91],[12,50],[10,25],[8,15],[6,8],[4,4],[2,2],[0,0]]",
        "output": "0"
      },
      {
        "input": "n = 6, requirements = [[5,15],[4,10],[3,6],[2,3],[1,1],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 6, requirements = [[5,6],[3,3],[2,1],[1,0],[0,0]]",
        "output": "4"
      },
      {
        "input": "n = 10, requirements = [[9,20],[8,15],[7,10],[6,5],[5,3],[4,2],[3,1],[2,0],[1,0],[0,0]]",
        "output": "1"
      },
      {
        "input": "n = 20, requirements = [[19,150],[10,50],[11,60],[7,20],[8,30],[5,10],[6,15],[3,5],[4,10],[1,2],[2,3],[12,70],[13,80],[14,90],[15,100],[16,110],[17,120],[18,130],[0,0]]",
        "output": "0"
      }
    ]
  },
  {
    "id": 1096,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Breadth-First Search",
      "String",
      "Backtracking"
    ],
    "problemDescription": "Under the grammar given below, strings can represent a set of lowercase words. Let\u00a0R(expr)\u00a0denote the set of words the expression represents.\nThe grammar can best be understood through simple examples:\n\nSingle letters represent a singleton set containing that word.\n\t\nR(\"a\") = {\"a\"}\nR(\"w\") = {\"w\"}\n\n\nWhen we take a comma-delimited list of two or more expressions, we take the union of possibilities.\n\t\nR(\"{a,b,c}\") = {\"a\",\"b\",\"c\"}\nR(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"} (notice the final set only contains each word at most once)\n\n\nWhen we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n\t\nR(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"}\nR(\"a{b,c}{d,e}f{g,h}\") = {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"}\n\n\n\nFormally, the three rules for our grammar:\n\nFor every lowercase letter x, we have R(x) = {x}.\nFor expressions e1, e2, ... , ek with k >= 2, we have R({e1, e2, ...}) = R(e1) \u222a R(e2) \u222a ...\nFor expressions e1 and e2, we have R(e1 + e2) = {a + b for (a, b) in R(e1) \u00d7 R(e2)}, where + denotes concatenation, and \u00d7 denotes the cartesian product.\n\nGiven an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.\n\u00a0\nExample 1:\n\nInput: expression = \"{a,b}{c,{d,e}}\"\nOutput: [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]\n\nExample 2:\n\nInput: expression = \"{{a,z},a{b,c},{ab,z}}\"\nOutput: [\"a\",\"ab\",\"ac\",\"z\"]\nExplanation: Each distinct word is written only once in the final answer.\n\n\u00a0\nConstraints:\n\n1 <= expression.length <= 60\nexpression[i] consists of '{', '}', ','or lowercase English letters.\nThe given\u00a0expression\u00a0represents a set of words based on the grammar given in the description.\n\n",
    "starterCode": "class Solution:\n    def braceExpansionII(self, expression: str) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "expression = \"a\"",
        "output": "['a']"
      },
      {
        "input": "expression = \"{a,bc,def}\"",
        "output": "['a', 'bc', 'def']"
      },
      {
        "input": "expression = \"a{b{c,d},e{f,g}}\"",
        "output": "['abc', 'abd', 'aef', 'aeg']"
      },
      {
        "input": "expression = \"{a,b,c}\"",
        "output": "['a', 'b', 'c']"
      },
      {
        "input": "expression = \"{a,b}c\"",
        "output": "['ac', 'bc']"
      },
      {
        "input": "expression = \"{abc}\"",
        "output": "['abc']"
      },
      {
        "input": "expression = \"a{b,c,d}e\"",
        "output": "['abe', 'ace', 'ade']"
      },
      {
        "input": "expression = \"{a,b}{c,{d,{e,f}}}\"",
        "output": "['ac', 'ad', 'ae', 'af', 'bc', 'bd', 'be', 'bf']"
      },
      {
        "input": "expression = \"a{b,c}\"",
        "output": "['ab', 'ac']"
      },
      {
        "input": "expression = \"{a,b}{c,d}\"",
        "output": "['ac', 'ad', 'bc', 'bd']"
      },
      {
        "input": "expression = \"a{b,c}d\"",
        "output": "['abd', 'acd']"
      },
      {
        "input": "expression = \"{a,b}{c,{d,e}}\"",
        "output": "['ac', 'ad', 'ae', 'bc', 'bd', 'be']"
      },
      {
        "input": "expression = \"a{b,c}d{e,f}\"",
        "output": "['abde', 'abdf', 'acde', 'acdf']"
      },
      {
        "input": "expression = \"{a,b}{c,{d{e,f},g}}\"",
        "output": "['ac', 'ade', 'adf', 'ag', 'bc', 'bde', 'bdf', 'bg']"
      },
      {
        "input": "expression = \"{a{b,c},d{e,f}}\"",
        "output": "['ab', 'ac', 'de', 'df']"
      },
      {
        "input": "expression = \"{a,b}{c,d,e}\"",
        "output": "['ac', 'ad', 'ae', 'bc', 'bd', 'be']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f}\"",
        "output": "['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']"
      },
      {
        "input": "expression = \"{{a,z},a{b,c},{ab,z}}\"",
        "output": "['a', 'ab', 'ac', 'z']"
      },
      {
        "input": "expression = \"{a{b{c,d},e{f,g}},{h{i,j},k{l,m,n}}}\"",
        "output": "['abc', 'abd', 'aef', 'aeg', 'hi', 'hj', 'kl', 'km', 'kn']"
      },
      {
        "input": "expression = \"{a,b}{c{d{e{f,g},h},i},j{k{l,m{no,pq{r,s}},t{u,v}}}}\"",
        "output": "['acdef', 'acdeg', 'acdh', 'aci', 'ajkl', 'ajkmno', 'ajkmpqr', 'ajkmpqs', 'ajktu', 'ajktv', 'bcdef', 'bcdeg', 'bcdh', 'bci', 'bjkl', 'bjkmno', 'bjkmpqr', 'bjkmpqs', 'bjktu', 'bjktv']"
      },
      {
        "input": "expression = \"{a,b{c,d{e,f}},g{h,i}}{j,k}\"",
        "output": "['aj', 'ak', 'bcj', 'bck', 'bdej', 'bdek', 'bdfj', 'bdfk', 'ghj', 'ghk', 'gij', 'gik']"
      },
      {
        "input": "expression = \"{a{b{c,d},e},f{g{h,i},j}}\"",
        "output": "['abc', 'abd', 'ae', 'fgh', 'fgi', 'fj']"
      },
      {
        "input": "expression = \"{a,b,c}{d,{e,f},{g,h}}{i,j}\"",
        "output": "['adi', 'adj', 'aei', 'aej', 'afi', 'afj', 'agi', 'agj', 'ahi', 'ahj', 'bdi', 'bdj', 'bei', 'bej', 'bfi', 'bfj', 'bgi', 'bgj', 'bhi', 'bhj', 'cdi', 'cdj', 'cei', 'cej', 'cfi', 'cfj', 'cgi', 'cgj', 'chi', 'chj']"
      },
      {
        "input": "expression = \"{a{b{c{d,e},f},g},h{i,j}}\"",
        "output": "['abcd', 'abce', 'abf', 'ag', 'hi', 'hj']"
      },
      {
        "input": "expression = \"{a,b}{c{d,e,f},g{h,i}}{j,k}\"",
        "output": "['acdj', 'acdk', 'acej', 'acek', 'acfj', 'acfk', 'aghj', 'aghk', 'agij', 'agik', 'bcdj', 'bcdk', 'bcej', 'bcek', 'bcfj', 'bcfk', 'bghj', 'bghk', 'bgij', 'bgik']"
      },
      {
        "input": "expression = \"{a,b}{c,d,e,f}{g,h,i}{j,k,l,m,n}{o,p,q,r,s,t,u,v,w,x,y,z}\"",
        "output": "['acgjo', 'acgjp', 'acgjq', 'acgjr', 'acgjs', 'acgjt', 'acgju', 'acgjv', 'acgjw', 'acgjx', 'acgjy', 'acgjz', 'acgko', 'acgkp', 'acgkq', 'acgkr', 'acgks', 'acgkt', 'acgku', 'acgkv', 'acgkw', 'acgkx', 'acgky', 'acgkz', 'acglo', 'acglp', 'acglq', 'acglr', 'acgls', 'acglt', 'acglu', 'acglv', 'acglw', 'acglx', 'acgly', 'acglz', 'acgmo', 'acgmp', 'acgmq', 'acgmr', 'acgms', 'acgmt', 'acgmu', 'acgmv', 'acgmw', 'acgmx', 'acgmy', 'acgmz', 'acgno', 'acgnp', 'acgnq', 'acgnr', 'acgns', 'acgnt', 'acgnu', 'acgnv', 'acgnw', 'acgnx', 'acgny', 'acgnz', 'achjo', 'achjp', 'achjq', 'achjr', 'achjs', 'achjt', 'achju', 'achjv', 'achjw', 'achjx', 'achjy', 'achjz', 'achko', 'achkp', 'achkq', 'achkr', 'achks', 'achkt', 'achku', 'achkv', 'achkw', 'achkx', 'achky', 'achkz', 'achlo', 'achlp', 'achlq', 'achlr', 'achls', 'achlt', 'achlu', 'achlv', 'achlw', 'achlx', 'achly', 'achlz', 'achmo', 'achmp', 'achmq', 'achmr', 'achms', 'achmt', 'achmu', 'achmv', 'achmw', 'achmx', 'achmy', 'achmz', 'achno', 'achnp', 'achnq', 'achnr', 'achns', 'achnt', 'achnu', 'achnv', 'achnw', 'achnx', 'achny', 'achnz', 'acijo', 'acijp', 'acijq', 'acijr', 'acijs', 'acijt', 'aciju', 'acijv', 'acijw', 'acijx', 'acijy', 'acijz', 'aciko', 'acikp', 'acikq', 'acikr', 'aciks', 'acikt', 'aciku', 'acikv', 'acikw', 'acikx', 'aciky', 'acikz', 'acilo', 'acilp', 'acilq', 'acilr', 'acils', 'acilt', 'acilu', 'acilv', 'acilw', 'acilx', 'acily', 'acilz', 'acimo', 'acimp', 'acimq', 'acimr', 'acims', 'acimt', 'acimu', 'acimv', 'acimw', 'acimx', 'acimy', 'acimz', 'acino', 'acinp', 'acinq', 'acinr', 'acins', 'acint', 'acinu', 'acinv', 'acinw', 'acinx', 'aciny', 'acinz', 'adgjo', 'adgjp', 'adgjq', 'adgjr', 'adgjs', 'adgjt', 'adgju', 'adgjv', 'adgjw', 'adgjx', 'adgjy', 'adgjz', 'adgko', 'adgkp', 'adgkq', 'adgkr', 'adgks', 'adgkt', 'adgku', 'adgkv', 'adgkw', 'adgkx', 'adgky', 'adgkz', 'adglo', 'adglp', 'adglq', 'adglr', 'adgls', 'adglt', 'adglu', 'adglv', 'adglw', 'adglx', 'adgly', 'adglz', 'adgmo', 'adgmp', 'adgmq', 'adgmr', 'adgms', 'adgmt', 'adgmu', 'adgmv', 'adgmw', 'adgmx', 'adgmy', 'adgmz', 'adgno', 'adgnp', 'adgnq', 'adgnr', 'adgns', 'adgnt', 'adgnu', 'adgnv', 'adgnw', 'adgnx', 'adgny', 'adgnz', 'adhjo', 'adhjp', 'adhjq', 'adhjr', 'adhjs', 'adhjt', 'adhju', 'adhjv', 'adhjw', 'adhjx', 'adhjy', 'adhjz', 'adhko', 'adhkp', 'adhkq', 'adhkr', 'adhks', 'adhkt', 'adhku', 'adhkv', 'adhkw', 'adhkx', 'adhky', 'adhkz', 'adhlo', 'adhlp', 'adhlq', 'adhlr', 'adhls', 'adhlt', 'adhlu', 'adhlv', 'adhlw', 'adhlx', 'adhly', 'adhlz', 'adhmo', 'adhmp', 'adhmq', 'adhmr', 'adhms', 'adhmt', 'adhmu', 'adhmv', 'adhmw', 'adhmx', 'adhmy', 'adhmz', 'adhno', 'adhnp', 'adhnq', 'adhnr', 'adhns', 'adhnt', 'adhnu', 'adhnv', 'adhnw', 'adhnx', 'adhny', 'adhnz', 'adijo', 'adijp', 'adijq', 'adijr', 'adijs', 'adijt', 'adiju', 'adijv', 'adijw', 'adijx', 'adijy', 'adijz', 'adiko', 'adikp', 'adikq', 'adikr', 'adiks', 'adikt', 'adiku', 'adikv', 'adikw', 'adikx', 'adiky', 'adikz', 'adilo', 'adilp', 'adilq', 'adilr', 'adils', 'adilt', 'adilu', 'adilv', 'adilw', 'adilx', 'adily', 'adilz', 'adimo', 'adimp', 'adimq', 'adimr', 'adims', 'adimt', 'adimu', 'adimv', 'adimw', 'adimx', 'adimy', 'adimz', 'adino', 'adinp', 'adinq', 'adinr', 'adins', 'adint', 'adinu', 'adinv', 'adinw', 'adinx', 'adiny', 'adinz', 'aegjo', 'aegjp', 'aegjq', 'aegjr', 'aegjs', 'aegjt', 'aegju', 'aegjv', 'aegjw', 'aegjx', 'aegjy', 'aegjz', 'aegko', 'aegkp', 'aegkq', 'aegkr', 'aegks', 'aegkt', 'aegku', 'aegkv', 'aegkw', 'aegkx', 'aegky', 'aegkz', 'aeglo', 'aeglp', 'aeglq', 'aeglr', 'aegls', 'aeglt', 'aeglu', 'aeglv', 'aeglw', 'aeglx', 'aegly', 'aeglz', 'aegmo', 'aegmp', 'aegmq', 'aegmr', 'aegms', 'aegmt', 'aegmu', 'aegmv', 'aegmw', 'aegmx', 'aegmy', 'aegmz', 'aegno', 'aegnp', 'aegnq', 'aegnr', 'aegns', 'aegnt', 'aegnu', 'aegnv', 'aegnw', 'aegnx', 'aegny', 'aegnz', 'aehjo', 'aehjp', 'aehjq', 'aehjr', 'aehjs', 'aehjt', 'aehju', 'aehjv', 'aehjw', 'aehjx', 'aehjy', 'aehjz', 'aehko', 'aehkp', 'aehkq', 'aehkr', 'aehks', 'aehkt', 'aehku', 'aehkv', 'aehkw', 'aehkx', 'aehky', 'aehkz', 'aehlo', 'aehlp', 'aehlq', 'aehlr', 'aehls', 'aehlt', 'aehlu', 'aehlv', 'aehlw', 'aehlx', 'aehly', 'aehlz', 'aehmo', 'aehmp', 'aehmq', 'aehmr', 'aehms', 'aehmt', 'aehmu', 'aehmv', 'aehmw', 'aehmx', 'aehmy', 'aehmz', 'aehno', 'aehnp', 'aehnq', 'aehnr', 'aehns', 'aehnt', 'aehnu', 'aehnv', 'aehnw', 'aehnx', 'aehny', 'aehnz', 'aeijo', 'aeijp', 'aeijq', 'aeijr', 'aeijs', 'aeijt', 'aeiju', 'aeijv', 'aeijw', 'aeijx', 'aeijy', 'aeijz', 'aeiko', 'aeikp', 'aeikq', 'aeikr', 'aeiks', 'aeikt', 'aeiku', 'aeikv', 'aeikw', 'aeikx', 'aeiky', 'aeikz', 'aeilo', 'aeilp', 'aeilq', 'aeilr', 'aeils', 'aeilt', 'aeilu', 'aeilv', 'aeilw', 'aeilx', 'aeily', 'aeilz', 'aeimo', 'aeimp', 'aeimq', 'aeimr', 'aeims', 'aeimt', 'aeimu', 'aeimv', 'aeimw', 'aeimx', 'aeimy', 'aeimz', 'aeino', 'aeinp', 'aeinq', 'aeinr', 'aeins', 'aeint', 'aeinu', 'aeinv', 'aeinw', 'aeinx', 'aeiny', 'aeinz', 'afgjo', 'afgjp', 'afgjq', 'afgjr', 'afgjs', 'afgjt', 'afgju', 'afgjv', 'afgjw', 'afgjx', 'afgjy', 'afgjz', 'afgko', 'afgkp', 'afgkq', 'afgkr', 'afgks', 'afgkt', 'afgku', 'afgkv', 'afgkw', 'afgkx', 'afgky', 'afgkz', 'afglo', 'afglp', 'afglq', 'afglr', 'afgls', 'afglt', 'afglu', 'afglv', 'afglw', 'afglx', 'afgly', 'afglz', 'afgmo', 'afgmp', 'afgmq', 'afgmr', 'afgms', 'afgmt', 'afgmu', 'afgmv', 'afgmw', 'afgmx', 'afgmy', 'afgmz', 'afgno', 'afgnp', 'afgnq', 'afgnr', 'afgns', 'afgnt', 'afgnu', 'afgnv', 'afgnw', 'afgnx', 'afgny', 'afgnz', 'afhjo', 'afhjp', 'afhjq', 'afhjr', 'afhjs', 'afhjt', 'afhju', 'afhjv', 'afhjw', 'afhjx', 'afhjy', 'afhjz', 'afhko', 'afhkp', 'afhkq', 'afhkr', 'afhks', 'afhkt', 'afhku', 'afhkv', 'afhkw', 'afhkx', 'afhky', 'afhkz', 'afhlo', 'afhlp', 'afhlq', 'afhlr', 'afhls', 'afhlt', 'afhlu', 'afhlv', 'afhlw', 'afhlx', 'afhly', 'afhlz', 'afhmo', 'afhmp', 'afhmq', 'afhmr', 'afhms', 'afhmt', 'afhmu', 'afhmv', 'afhmw', 'afhmx', 'afhmy', 'afhmz', 'afhno', 'afhnp', 'afhnq', 'afhnr', 'afhns', 'afhnt', 'afhnu', 'afhnv', 'afhnw', 'afhnx', 'afhny', 'afhnz', 'afijo', 'afijp', 'afijq', 'afijr', 'afijs', 'afijt', 'afiju', 'afijv', 'afijw', 'afijx', 'afijy', 'afijz', 'afiko', 'afikp', 'afikq', 'afikr', 'afiks', 'afikt', 'afiku', 'afikv', 'afikw', 'afikx', 'afiky', 'afikz', 'afilo', 'afilp', 'afilq', 'afilr', 'afils', 'afilt', 'afilu', 'afilv', 'afilw', 'afilx', 'afily', 'afilz', 'afimo', 'afimp', 'afimq', 'afimr', 'afims', 'afimt', 'afimu', 'afimv', 'afimw', 'afimx', 'afimy', 'afimz', 'afino', 'afinp', 'afinq', 'afinr', 'afins', 'afint', 'afinu', 'afinv', 'afinw', 'afinx', 'afiny', 'afinz', 'bcgjo', 'bcgjp', 'bcgjq', 'bcgjr', 'bcgjs', 'bcgjt', 'bcgju', 'bcgjv', 'bcgjw', 'bcgjx', 'bcgjy', 'bcgjz', 'bcgko', 'bcgkp', 'bcgkq', 'bcgkr', 'bcgks', 'bcgkt', 'bcgku', 'bcgkv', 'bcgkw', 'bcgkx', 'bcgky', 'bcgkz', 'bcglo', 'bcglp', 'bcglq', 'bcglr', 'bcgls', 'bcglt', 'bcglu', 'bcglv', 'bcglw', 'bcglx', 'bcgly', 'bcglz', 'bcgmo', 'bcgmp', 'bcgmq', 'bcgmr', 'bcgms', 'bcgmt', 'bcgmu', 'bcgmv', 'bcgmw', 'bcgmx', 'bcgmy', 'bcgmz', 'bcgno', 'bcgnp', 'bcgnq', 'bcgnr', 'bcgns', 'bcgnt', 'bcgnu', 'bcgnv', 'bcgnw', 'bcgnx', 'bcgny', 'bcgnz', 'bchjo', 'bchjp', 'bchjq', 'bchjr', 'bchjs', 'bchjt', 'bchju', 'bchjv', 'bchjw', 'bchjx', 'bchjy', 'bchjz', 'bchko', 'bchkp', 'bchkq', 'bchkr', 'bchks', 'bchkt', 'bchku', 'bchkv', 'bchkw', 'bchkx', 'bchky', 'bchkz', 'bchlo', 'bchlp', 'bchlq', 'bchlr', 'bchls', 'bchlt', 'bchlu', 'bchlv', 'bchlw', 'bchlx', 'bchly', 'bchlz', 'bchmo', 'bchmp', 'bchmq', 'bchmr', 'bchms', 'bchmt', 'bchmu', 'bchmv', 'bchmw', 'bchmx', 'bchmy', 'bchmz', 'bchno', 'bchnp', 'bchnq', 'bchnr', 'bchns', 'bchnt', 'bchnu', 'bchnv', 'bchnw', 'bchnx', 'bchny', 'bchnz', 'bcijo', 'bcijp', 'bcijq', 'bcijr', 'bcijs', 'bcijt', 'bciju', 'bcijv', 'bcijw', 'bcijx', 'bcijy', 'bcijz', 'bciko', 'bcikp', 'bcikq', 'bcikr', 'bciks', 'bcikt', 'bciku', 'bcikv', 'bcikw', 'bcikx', 'bciky', 'bcikz', 'bcilo', 'bcilp', 'bcilq', 'bcilr', 'bcils', 'bcilt', 'bcilu', 'bcilv', 'bcilw', 'bcilx', 'bcily', 'bcilz', 'bcimo', 'bcimp', 'bcimq', 'bcimr', 'bcims', 'bcimt', 'bcimu', 'bcimv', 'bcimw', 'bcimx', 'bcimy', 'bcimz', 'bcino', 'bcinp', 'bcinq', 'bcinr', 'bcins', 'bcint', 'bcinu', 'bcinv', 'bcinw', 'bcinx', 'bciny', 'bcinz', 'bdgjo', 'bdgjp', 'bdgjq', 'bdgjr', 'bdgjs', 'bdgjt', 'bdgju', 'bdgjv', 'bdgjw', 'bdgjx', 'bdgjy', 'bdgjz', 'bdgko', 'bdgkp', 'bdgkq', 'bdgkr', 'bdgks', 'bdgkt', 'bdgku', 'bdgkv', 'bdgkw', 'bdgkx', 'bdgky', 'bdgkz', 'bdglo', 'bdglp', 'bdglq', 'bdglr', 'bdgls', 'bdglt', 'bdglu', 'bdglv', 'bdglw', 'bdglx', 'bdgly', 'bdglz', 'bdgmo', 'bdgmp', 'bdgmq', 'bdgmr', 'bdgms', 'bdgmt', 'bdgmu', 'bdgmv', 'bdgmw', 'bdgmx', 'bdgmy', 'bdgmz', 'bdgno', 'bdgnp', 'bdgnq', 'bdgnr', 'bdgns', 'bdgnt', 'bdgnu', 'bdgnv', 'bdgnw', 'bdgnx', 'bdgny', 'bdgnz', 'bdhjo', 'bdhjp', 'bdhjq', 'bdhjr', 'bdhjs', 'bdhjt', 'bdhju', 'bdhjv', 'bdhjw', 'bdhjx', 'bdhjy', 'bdhjz', 'bdhko', 'bdhkp', 'bdhkq', 'bdhkr', 'bdhks', 'bdhkt', 'bdhku', 'bdhkv', 'bdhkw', 'bdhkx', 'bdhky', 'bdhkz', 'bdhlo', 'bdhlp', 'bdhlq', 'bdhlr', 'bdhls', 'bdhlt', 'bdhlu', 'bdhlv', 'bdhlw', 'bdhlx', 'bdhly', 'bdhlz', 'bdhmo', 'bdhmp', 'bdhmq', 'bdhmr', 'bdhms', 'bdhmt', 'bdhmu', 'bdhmv', 'bdhmw', 'bdhmx', 'bdhmy', 'bdhmz', 'bdhno', 'bdhnp', 'bdhnq', 'bdhnr', 'bdhns', 'bdhnt', 'bdhnu', 'bdhnv', 'bdhnw', 'bdhnx', 'bdhny', 'bdhnz', 'bdijo', 'bdijp', 'bdijq', 'bdijr', 'bdijs', 'bdijt', 'bdiju', 'bdijv', 'bdijw', 'bdijx', 'bdijy', 'bdijz', 'bdiko', 'bdikp', 'bdikq', 'bdikr', 'bdiks', 'bdikt', 'bdiku', 'bdikv', 'bdikw', 'bdikx', 'bdiky', 'bdikz', 'bdilo', 'bdilp', 'bdilq', 'bdilr', 'bdils', 'bdilt', 'bdilu', 'bdilv', 'bdilw', 'bdilx', 'bdily', 'bdilz', 'bdimo', 'bdimp', 'bdimq', 'bdimr', 'bdims', 'bdimt', 'bdimu', 'bdimv', 'bdimw', 'bdimx', 'bdimy', 'bdimz', 'bdino', 'bdinp', 'bdinq', 'bdinr', 'bdins', 'bdint', 'bdinu', 'bdinv', 'bdinw', 'bdinx', 'bdiny', 'bdinz', 'begjo', 'begjp', 'begjq', 'begjr', 'begjs', 'begjt', 'begju', 'begjv', 'begjw', 'begjx', 'begjy', 'begjz', 'begko', 'begkp', 'begkq', 'begkr', 'begks', 'begkt', 'begku', 'begkv', 'begkw', 'begkx', 'begky', 'begkz', 'beglo', 'beglp', 'beglq', 'beglr', 'begls', 'beglt', 'beglu', 'beglv', 'beglw', 'beglx', 'begly', 'beglz', 'begmo', 'begmp', 'begmq', 'begmr', 'begms', 'begmt', 'begmu', 'begmv', 'begmw', 'begmx', 'begmy', 'begmz', 'begno', 'begnp', 'begnq', 'begnr', 'begns', 'begnt', 'begnu', 'begnv', 'begnw', 'begnx', 'begny', 'begnz', 'behjo', 'behjp', 'behjq', 'behjr', 'behjs', 'behjt', 'behju', 'behjv', 'behjw', 'behjx', 'behjy', 'behjz', 'behko', 'behkp', 'behkq', 'behkr', 'behks', 'behkt', 'behku', 'behkv', 'behkw', 'behkx', 'behky', 'behkz', 'behlo', 'behlp', 'behlq', 'behlr', 'behls', 'behlt', 'behlu', 'behlv', 'behlw', 'behlx', 'behly', 'behlz', 'behmo', 'behmp', 'behmq', 'behmr', 'behms', 'behmt', 'behmu', 'behmv', 'behmw', 'behmx', 'behmy', 'behmz', 'behno', 'behnp', 'behnq', 'behnr', 'behns', 'behnt', 'behnu', 'behnv', 'behnw', 'behnx', 'behny', 'behnz', 'beijo', 'beijp', 'beijq', 'beijr', 'beijs', 'beijt', 'beiju', 'beijv', 'beijw', 'beijx', 'beijy', 'beijz', 'beiko', 'beikp', 'beikq', 'beikr', 'beiks', 'beikt', 'beiku', 'beikv', 'beikw', 'beikx', 'beiky', 'beikz', 'beilo', 'beilp', 'beilq', 'beilr', 'beils', 'beilt', 'beilu', 'beilv', 'beilw', 'beilx', 'beily', 'beilz', 'beimo', 'beimp', 'beimq', 'beimr', 'beims', 'beimt', 'beimu', 'beimv', 'beimw', 'beimx', 'beimy', 'beimz', 'beino', 'beinp', 'beinq', 'beinr', 'beins', 'beint', 'beinu', 'beinv', 'beinw', 'beinx', 'beiny', 'beinz', 'bfgjo', 'bfgjp', 'bfgjq', 'bfgjr', 'bfgjs', 'bfgjt', 'bfgju', 'bfgjv', 'bfgjw', 'bfgjx', 'bfgjy', 'bfgjz', 'bfgko', 'bfgkp', 'bfgkq', 'bfgkr', 'bfgks', 'bfgkt', 'bfgku', 'bfgkv', 'bfgkw', 'bfgkx', 'bfgky', 'bfgkz', 'bfglo', 'bfglp', 'bfglq', 'bfglr', 'bfgls', 'bfglt', 'bfglu', 'bfglv', 'bfglw', 'bfglx', 'bfgly', 'bfglz', 'bfgmo', 'bfgmp', 'bfgmq', 'bfgmr', 'bfgms', 'bfgmt', 'bfgmu', 'bfgmv', 'bfgmw', 'bfgmx', 'bfgmy', 'bfgmz', 'bfgno', 'bfgnp', 'bfgnq', 'bfgnr', 'bfgns', 'bfgnt', 'bfgnu', 'bfgnv', 'bfgnw', 'bfgnx', 'bfgny', 'bfgnz', 'bfhjo', 'bfhjp', 'bfhjq', 'bfhjr', 'bfhjs', 'bfhjt', 'bfhju', 'bfhjv', 'bfhjw', 'bfhjx', 'bfhjy', 'bfhjz', 'bfhko', 'bfhkp', 'bfhkq', 'bfhkr', 'bfhks', 'bfhkt', 'bfhku', 'bfhkv', 'bfhkw', 'bfhkx', 'bfhky', 'bfhkz', 'bfhlo', 'bfhlp', 'bfhlq', 'bfhlr', 'bfhls', 'bfhlt', 'bfhlu', 'bfhlv', 'bfhlw', 'bfhlx', 'bfhly', 'bfhlz', 'bfhmo', 'bfhmp', 'bfhmq', 'bfhmr', 'bfhms', 'bfhmt', 'bfhmu', 'bfhmv', 'bfhmw', 'bfhmx', 'bfhmy', 'bfhmz', 'bfhno', 'bfhnp', 'bfhnq', 'bfhnr', 'bfhns', 'bfhnt', 'bfhnu', 'bfhnv', 'bfhnw', 'bfhnx', 'bfhny', 'bfhnz', 'bfijo', 'bfijp', 'bfijq', 'bfijr', 'bfijs', 'bfijt', 'bfiju', 'bfijv', 'bfijw', 'bfijx', 'bfijy', 'bfijz', 'bfiko', 'bfikp', 'bfikq', 'bfikr', 'bfiks', 'bfikt', 'bfiku', 'bfikv', 'bfikw', 'bfikx', 'bfiky', 'bfikz', 'bfilo', 'bfilp', 'bfilq', 'bfilr', 'bfils', 'bfilt', 'bfilu', 'bfilv', 'bfilw', 'bfilx', 'bfily', 'bfilz', 'bfimo', 'bfimp', 'bfimq', 'bfimr', 'bfims', 'bfimt', 'bfimu', 'bfimv', 'bfimw', 'bfimx', 'bfimy', 'bfimz', 'bfino', 'bfinp', 'bfinq', 'bfinr', 'bfins', 'bfint', 'bfinu', 'bfinv', 'bfinw', 'bfinx', 'bfiny', 'bfinz']"
      },
      {
        "input": "expression = \"a{b{c,d},e{f,g}}h\"",
        "output": "['abch', 'abdh', 'aefh', 'aegh']"
      },
      {
        "input": "expression = \"{a,{b,{c,{d,e}}}}{f,g}\"",
        "output": "['af', 'ag', 'bf', 'bg', 'cf', 'cg', 'df', 'dg', 'ef', 'eg']"
      },
      {
        "input": "expression = \"{a,b,c}{d{e,f},g{h,i}}{j,k}\"",
        "output": "['adej', 'adek', 'adfj', 'adfk', 'aghj', 'aghk', 'agij', 'agik', 'bdej', 'bdek', 'bdfj', 'bdfk', 'bghj', 'bghk', 'bgij', 'bgik', 'cdej', 'cdek', 'cdfj', 'cdfk', 'cghj', 'cghk', 'cgij', 'cgik']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f}{g,h}\"",
        "output": "['adg', 'adh', 'aeg', 'aeh', 'afg', 'afh', 'bdg', 'bdh', 'beg', 'beh', 'bfg', 'bfh', 'cdg', 'cdh', 'ceg', 'ceh', 'cfg', 'cfh']"
      },
      {
        "input": "expression = \"{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}a{b,c}\"",
        "output": "['aab', 'aac', 'bab', 'bac', 'cab', 'cac', 'dab', 'dac', 'eab', 'eac', 'fab', 'fac', 'gab', 'gac', 'hab', 'hac', 'iab', 'iac', 'jab', 'jac', 'kab', 'kac', 'lab', 'lac', 'mab', 'mac', 'nab', 'nac', 'oab', 'oac', 'pab', 'pac', 'qab', 'qac', 'rab', 'rac', 'sab', 'sac', 'tab', 'tac', 'uab', 'uac', 'vab', 'vac', 'wab', 'wac', 'xab', 'xac', 'yab', 'yac', 'zab', 'zac']"
      },
      {
        "input": "expression = \"{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{x,y,z}\"",
        "output": "['ax', 'ay', 'az', 'bx', 'by', 'bz', 'cx', 'cy', 'cz', 'dx', 'dy', 'dz', 'ex', 'ey', 'ez', 'fx', 'fy', 'fz', 'gx', 'gy', 'gz', 'hx', 'hy', 'hz', 'ix', 'iy', 'iz', 'jx', 'jy', 'jz', 'kx', 'ky', 'kz', 'lx', 'ly', 'lz', 'mx', 'my', 'mz', 'nx', 'ny', 'nz', 'ox', 'oy', 'oz', 'px', 'py', 'pz', 'qx', 'qy', 'qz', 'rx', 'ry', 'rz', 'sx', 'sy', 'sz', 'tx', 'ty', 'tz', 'ux', 'uy', 'uz', 'vx', 'vy', 'vz', 'wx', 'wy', 'wz', 'xx', 'xy', 'xz', 'yx', 'yy', 'yz', 'zx', 'zy', 'zz']"
      },
      {
        "input": "expression = \"{a,b{c,d},e{f,g}}{h,i}\"",
        "output": "['ah', 'ai', 'bch', 'bci', 'bdh', 'bdi', 'efh', 'efi', 'egh', 'egi']"
      },
      {
        "input": "expression = \"{a,b{c,d{e,f}}}{g,h}\"",
        "output": "['ag', 'ah', 'bcg', 'bch', 'bdeg', 'bdeh', 'bdfg', 'bdfh']"
      },
      {
        "input": "expression = \"{a,b}{c{d,e}}{f,g{h,i}}{j,k{m,n}}\"",
        "output": "['acdfj', 'acdfkm', 'acdfkn', 'acdghj', 'acdghkm', 'acdghkn', 'acdgij', 'acdgikm', 'acdgikn', 'acefj', 'acefkm', 'acefkn', 'aceghj', 'aceghkm', 'aceghkn', 'acegij', 'acegikm', 'acegikn', 'bcdfj', 'bcdfkm', 'bcdfkn', 'bcdghj', 'bcdghkm', 'bcdghkn', 'bcdgij', 'bcdgikm', 'bcdgikn', 'bcefj', 'bcefkm', 'bcefkn', 'bceghj', 'bceghkm', 'bceghkn', 'bcegij', 'bcegikm', 'bcegikn']"
      },
      {
        "input": "expression = \"{a,{b,{c,d}}}{e,{f,{g,h}}}\"",
        "output": "['ae', 'af', 'ag', 'ah', 'be', 'bf', 'bg', 'bh', 'ce', 'cf', 'cg', 'ch', 'de', 'df', 'dg', 'dh']"
      },
      {
        "input": "expression = \"{a,b}{c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}\"",
        "output": "Execution timed out"
      },
      {
        "input": "expression = \"{a,b}{c,d,e}{f,g,h}{i,j,k}\"",
        "output": "['acfi', 'acfj', 'acfk', 'acgi', 'acgj', 'acgk', 'achi', 'achj', 'achk', 'adfi', 'adfj', 'adfk', 'adgi', 'adgj', 'adgk', 'adhi', 'adhj', 'adhk', 'aefi', 'aefj', 'aefk', 'aegi', 'aegj', 'aegk', 'aehi', 'aehj', 'aehk', 'bcfi', 'bcfj', 'bcfk', 'bcgi', 'bcgj', 'bcgk', 'bchi', 'bchj', 'bchk', 'bdfi', 'bdfj', 'bdfk', 'bdgi', 'bdgj', 'bdgk', 'bdhi', 'bdhj', 'bdhk', 'befi', 'befj', 'befk', 'begi', 'begj', 'begk', 'behi', 'behj', 'behk']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f,g}\"",
        "output": "['ad', 'ae', 'af', 'ag', 'bd', 'be', 'bf', 'bg', 'cd', 'ce', 'cf', 'cg']"
      },
      {
        "input": "expression = \"{a,{b,{c,{d,e}}}}f\"",
        "output": "['af', 'bf', 'cf', 'df', 'ef']"
      },
      {
        "input": "expression = \"{a,b}{c{d,e},f{g,h}}{i,j}{k,l}\"",
        "output": "['acdik', 'acdil', 'acdjk', 'acdjl', 'aceik', 'aceil', 'acejk', 'acejl', 'afgik', 'afgil', 'afgjk', 'afgjl', 'afhik', 'afhil', 'afhjk', 'afhjl', 'bcdik', 'bcdil', 'bcdjk', 'bcdjl', 'bceik', 'bceil', 'bcejk', 'bcejl', 'bfgik', 'bfgil', 'bfgjk', 'bfgjl', 'bfhik', 'bfhil', 'bfhjk', 'bfhjl']"
      },
      {
        "input": "expression = \"{a,b}{c,d{e,f}}\"",
        "output": "['ac', 'ade', 'adf', 'bc', 'bde', 'bdf']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f}{g,h,{i,j},{k,l}}\"",
        "output": "['adg', 'adh', 'adi', 'adj', 'adk', 'adl', 'aeg', 'aeh', 'aei', 'aej', 'aek', 'ael', 'afg', 'afh', 'afi', 'afj', 'afk', 'afl', 'bdg', 'bdh', 'bdi', 'bdj', 'bdk', 'bdl', 'beg', 'beh', 'bei', 'bej', 'bek', 'bel', 'bfg', 'bfh', 'bfi', 'bfj', 'bfk', 'bfl', 'cdg', 'cdh', 'cdi', 'cdj', 'cdk', 'cdl', 'ceg', 'ceh', 'cei', 'cej', 'cek', 'cel', 'cfg', 'cfh', 'cfi', 'cfj', 'cfk', 'cfl']"
      },
      {
        "input": "expression = \"{{a,b,c},{d,e,f},{g,h,i}}{j,k,l}\"",
        "output": "['aj', 'ak', 'al', 'bj', 'bk', 'bl', 'cj', 'ck', 'cl', 'dj', 'dk', 'dl', 'ej', 'ek', 'el', 'fj', 'fk', 'fl', 'gj', 'gk', 'gl', 'hj', 'hk', 'hl', 'ij', 'ik', 'il']"
      },
      {
        "input": "expression = \"{a,b}{c,{d,e}}{f,{g,h}}{i,j}\"",
        "output": "['acfi', 'acfj', 'acgi', 'acgj', 'achi', 'achj', 'adfi', 'adfj', 'adgi', 'adgj', 'adhi', 'adhj', 'aefi', 'aefj', 'aegi', 'aegj', 'aehi', 'aehj', 'bcfi', 'bcfj', 'bcgi', 'bcgj', 'bchi', 'bchj', 'bdfi', 'bdfj', 'bdgi', 'bdgj', 'bdhi', 'bdhj', 'befi', 'befj', 'begi', 'begj', 'behi', 'behj']"
      },
      {
        "input": "expression = \"{a,b}{c,{d,e,f}}{g,h}\"",
        "output": "['acg', 'ach', 'adg', 'adh', 'aeg', 'aeh', 'afg', 'afh', 'bcg', 'bch', 'bdg', 'bdh', 'beg', 'beh', 'bfg', 'bfh']"
      },
      {
        "input": "expression = \"{a,{b,{c,{d,{e,f}}}}}\"",
        "output": "['a', 'b', 'c', 'd', 'e', 'f']"
      },
      {
        "input": "expression = \"{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{a,b,c,d}{a,b,c}\"",
        "output": "Execution timed out"
      },
      {
        "input": "expression = \"{a,b}{c,d}{e,f}\"",
        "output": "['ace', 'acf', 'ade', 'adf', 'bce', 'bcf', 'bde', 'bdf']"
      },
      {
        "input": "expression = \"{a,b}{c,d,e}{f,g,h,i}\"",
        "output": "['acf', 'acg', 'ach', 'aci', 'adf', 'adg', 'adh', 'adi', 'aef', 'aeg', 'aeh', 'aei', 'bcf', 'bcg', 'bch', 'bci', 'bdf', 'bdg', 'bdh', 'bdi', 'bef', 'beg', 'beh', 'bei']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f}{g,h,i}{j,k,l,m,n,o,p}\"",
        "output": "['adgj', 'adgk', 'adgl', 'adgm', 'adgn', 'adgo', 'adgp', 'adhj', 'adhk', 'adhl', 'adhm', 'adhn', 'adho', 'adhp', 'adij', 'adik', 'adil', 'adim', 'adin', 'adio', 'adip', 'aegj', 'aegk', 'aegl', 'aegm', 'aegn', 'aego', 'aegp', 'aehj', 'aehk', 'aehl', 'aehm', 'aehn', 'aeho', 'aehp', 'aeij', 'aeik', 'aeil', 'aeim', 'aein', 'aeio', 'aeip', 'afgj', 'afgk', 'afgl', 'afgm', 'afgn', 'afgo', 'afgp', 'afhj', 'afhk', 'afhl', 'afhm', 'afhn', 'afho', 'afhp', 'afij', 'afik', 'afil', 'afim', 'afin', 'afio', 'afip', 'bdgj', 'bdgk', 'bdgl', 'bdgm', 'bdgn', 'bdgo', 'bdgp', 'bdhj', 'bdhk', 'bdhl', 'bdhm', 'bdhn', 'bdho', 'bdhp', 'bdij', 'bdik', 'bdil', 'bdim', 'bdin', 'bdio', 'bdip', 'begj', 'begk', 'begl', 'begm', 'begn', 'bego', 'begp', 'behj', 'behk', 'behl', 'behm', 'behn', 'beho', 'behp', 'beij', 'beik', 'beil', 'beim', 'bein', 'beio', 'beip', 'bfgj', 'bfgk', 'bfgl', 'bfgm', 'bfgn', 'bfgo', 'bfgp', 'bfhj', 'bfhk', 'bfhl', 'bfhm', 'bfhn', 'bfho', 'bfhp', 'bfij', 'bfik', 'bfil', 'bfim', 'bfin', 'bfio', 'bfip', 'cdgj', 'cdgk', 'cdgl', 'cdgm', 'cdgn', 'cdgo', 'cdgp', 'cdhj', 'cdhk', 'cdhl', 'cdhm', 'cdhn', 'cdho', 'cdhp', 'cdij', 'cdik', 'cdil', 'cdim', 'cdin', 'cdio', 'cdip', 'cegj', 'cegk', 'cegl', 'cegm', 'cegn', 'cego', 'cegp', 'cehj', 'cehk', 'cehl', 'cehm', 'cehn', 'ceho', 'cehp', 'ceij', 'ceik', 'ceil', 'ceim', 'cein', 'ceio', 'ceip', 'cfgj', 'cfgk', 'cfgl', 'cfgm', 'cfgn', 'cfgo', 'cfgp', 'cfhj', 'cfhk', 'cfhl', 'cfhm', 'cfhn', 'cfho', 'cfhp', 'cfij', 'cfik', 'cfil', 'cfim', 'cfin', 'cfio', 'cfip']"
      },
      {
        "input": "expression = \"{a{b,c},d{e,f}}{g{h,i},j{k,l}}\"",
        "output": "['abgh', 'abgi', 'abjk', 'abjl', 'acgh', 'acgi', 'acjk', 'acjl', 'degh', 'degi', 'dejk', 'dejl', 'dfgh', 'dfgi', 'dfjk', 'dfjl']"
      },
      {
        "input": "expression = \"{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}\"",
        "output": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
      },
      {
        "input": "expression = \"{x{y,z},a{b,c}{d,e},f{g{h,i},j{k,l}},m{n{o,p},q{r,s}}}\"",
        "output": "['abd', 'abe', 'acd', 'ace', 'fgh', 'fgi', 'fjk', 'fjl', 'mno', 'mnp', 'mqr', 'mqs', 'xy', 'xz']"
      },
      {
        "input": "expression = \"{a,b}{c,d}{e,f}{g,h}{i,j}{k,l}{m,n}{o,p}{q,r}{s,t}{u,v}{w,x}{y,z}\"",
        "output": "Execution timed out"
      },
      {
        "input": "expression = \"{a,b{c{d,e},f},g{h,i}}{j,k}\"",
        "output": "['aj', 'ak', 'bcdj', 'bcdk', 'bcej', 'bcek', 'bfj', 'bfk', 'ghj', 'ghk', 'gij', 'gik']"
      },
      {
        "input": "expression = \"{a,b}c{d,e}\"",
        "output": "['acd', 'ace', 'bcd', 'bce']"
      },
      {
        "input": "expression = \"a{b{c{d,e},f},g{h,i{,j}}{k,l}}m\"",
        "output": "['abcdm', 'abcem', 'abfm', 'aghkm', 'aghlm', 'agijkm', 'agijlm', 'agikm', 'agilm']"
      },
      {
        "input": "expression = \"{a{b{c{d{e{f{g{h}}}}}}}}{i,j}{k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}\"",
        "output": "['abcdefghik', 'abcdefghil', 'abcdefghim', 'abcdefghin', 'abcdefghio', 'abcdefghip', 'abcdefghiq', 'abcdefghir', 'abcdefghis', 'abcdefghit', 'abcdefghiu', 'abcdefghiv', 'abcdefghiw', 'abcdefghix', 'abcdefghiy', 'abcdefghiz', 'abcdefghjk', 'abcdefghjl', 'abcdefghjm', 'abcdefghjn', 'abcdefghjo', 'abcdefghjp', 'abcdefghjq', 'abcdefghjr', 'abcdefghjs', 'abcdefghjt', 'abcdefghju', 'abcdefghjv', 'abcdefghjw', 'abcdefghjx', 'abcdefghjy', 'abcdefghjz']"
      },
      {
        "input": "expression = \"{a{b{c{d{e{f{g{h{i{j{k{l{m{n{o{p{q{r{s{t{u{v{w{x{y{z}}}}}}}}}}}}}}}}}}}}}\"",
        "output": "['{a{b{c{d{efghijklmnopqrstuvwxyz']"
      },
      {
        "input": "expression = \"{a,b,c,d}{e,f,g,h}\"",
        "output": "['ae', 'af', 'ag', 'ah', 'be', 'bf', 'bg', 'bh', 'ce', 'cf', 'cg', 'ch', 'de', 'df', 'dg', 'dh']"
      },
      {
        "input": "expression = \"{a,b}{{c,d},{e,f}}{g,h}\"",
        "output": "['acg', 'ach', 'adg', 'adh', 'aeg', 'aeh', 'afg', 'afh', 'bcg', 'bch', 'bdg', 'bdh', 'beg', 'beh', 'bfg', 'bfh']"
      },
      {
        "input": "expression = \"{a,{b,c{d,e}},f{g,h}}\"",
        "output": "['a', 'b', 'cd', 'ce', 'fg', 'fh']"
      },
      {
        "input": "expression = \"{a,b}{c{d,e},f{g,h}}\"",
        "output": "['acd', 'ace', 'afg', 'afh', 'bcd', 'bce', 'bfg', 'bfh']"
      },
      {
        "input": "expression = \"{a,b{c,d}}{e,f}\"",
        "output": "['ae', 'af', 'bce', 'bcf', 'bde', 'bdf']"
      },
      {
        "input": "expression = \"a{b,{c,{d,e}}}{f,g}\"",
        "output": "['abf', 'abg', 'acf', 'acg', 'adf', 'adg', 'aef', 'aeg']"
      },
      {
        "input": "expression = \"{a,b,c,d}{e,f,g,h}{i,j,k,l,m,n,o,p}{q,r,s,t,u,v,w,x,y,z}\"",
        "output": "['aeiq', 'aeir', 'aeis', 'aeit', 'aeiu', 'aeiv', 'aeiw', 'aeix', 'aeiy', 'aeiz', 'aejq', 'aejr', 'aejs', 'aejt', 'aeju', 'aejv', 'aejw', 'aejx', 'aejy', 'aejz', 'aekq', 'aekr', 'aeks', 'aekt', 'aeku', 'aekv', 'aekw', 'aekx', 'aeky', 'aekz', 'aelq', 'aelr', 'aels', 'aelt', 'aelu', 'aelv', 'aelw', 'aelx', 'aely', 'aelz', 'aemq', 'aemr', 'aems', 'aemt', 'aemu', 'aemv', 'aemw', 'aemx', 'aemy', 'aemz', 'aenq', 'aenr', 'aens', 'aent', 'aenu', 'aenv', 'aenw', 'aenx', 'aeny', 'aenz', 'aeoq', 'aeor', 'aeos', 'aeot', 'aeou', 'aeov', 'aeow', 'aeox', 'aeoy', 'aeoz', 'aepq', 'aepr', 'aeps', 'aept', 'aepu', 'aepv', 'aepw', 'aepx', 'aepy', 'aepz', 'afiq', 'afir', 'afis', 'afit', 'afiu', 'afiv', 'afiw', 'afix', 'afiy', 'afiz', 'afjq', 'afjr', 'afjs', 'afjt', 'afju', 'afjv', 'afjw', 'afjx', 'afjy', 'afjz', 'afkq', 'afkr', 'afks', 'afkt', 'afku', 'afkv', 'afkw', 'afkx', 'afky', 'afkz', 'aflq', 'aflr', 'afls', 'aflt', 'aflu', 'aflv', 'aflw', 'aflx', 'afly', 'aflz', 'afmq', 'afmr', 'afms', 'afmt', 'afmu', 'afmv', 'afmw', 'afmx', 'afmy', 'afmz', 'afnq', 'afnr', 'afns', 'afnt', 'afnu', 'afnv', 'afnw', 'afnx', 'afny', 'afnz', 'afoq', 'afor', 'afos', 'afot', 'afou', 'afov', 'afow', 'afox', 'afoy', 'afoz', 'afpq', 'afpr', 'afps', 'afpt', 'afpu', 'afpv', 'afpw', 'afpx', 'afpy', 'afpz', 'agiq', 'agir', 'agis', 'agit', 'agiu', 'agiv', 'agiw', 'agix', 'agiy', 'agiz', 'agjq', 'agjr', 'agjs', 'agjt', 'agju', 'agjv', 'agjw', 'agjx', 'agjy', 'agjz', 'agkq', 'agkr', 'agks', 'agkt', 'agku', 'agkv', 'agkw', 'agkx', 'agky', 'agkz', 'aglq', 'aglr', 'agls', 'aglt', 'aglu', 'aglv', 'aglw', 'aglx', 'agly', 'aglz', 'agmq', 'agmr', 'agms', 'agmt', 'agmu', 'agmv', 'agmw', 'agmx', 'agmy', 'agmz', 'agnq', 'agnr', 'agns', 'agnt', 'agnu', 'agnv', 'agnw', 'agnx', 'agny', 'agnz', 'agoq', 'agor', 'agos', 'agot', 'agou', 'agov', 'agow', 'agox', 'agoy', 'agoz', 'agpq', 'agpr', 'agps', 'agpt', 'agpu', 'agpv', 'agpw', 'agpx', 'agpy', 'agpz', 'ahiq', 'ahir', 'ahis', 'ahit', 'ahiu', 'ahiv', 'ahiw', 'ahix', 'ahiy', 'ahiz', 'ahjq', 'ahjr', 'ahjs', 'ahjt', 'ahju', 'ahjv', 'ahjw', 'ahjx', 'ahjy', 'ahjz', 'ahkq', 'ahkr', 'ahks', 'ahkt', 'ahku', 'ahkv', 'ahkw', 'ahkx', 'ahky', 'ahkz', 'ahlq', 'ahlr', 'ahls', 'ahlt', 'ahlu', 'ahlv', 'ahlw', 'ahlx', 'ahly', 'ahlz', 'ahmq', 'ahmr', 'ahms', 'ahmt', 'ahmu', 'ahmv', 'ahmw', 'ahmx', 'ahmy', 'ahmz', 'ahnq', 'ahnr', 'ahns', 'ahnt', 'ahnu', 'ahnv', 'ahnw', 'ahnx', 'ahny', 'ahnz', 'ahoq', 'ahor', 'ahos', 'ahot', 'ahou', 'ahov', 'ahow', 'ahox', 'ahoy', 'ahoz', 'ahpq', 'ahpr', 'ahps', 'ahpt', 'ahpu', 'ahpv', 'ahpw', 'ahpx', 'ahpy', 'ahpz', 'beiq', 'beir', 'beis', 'beit', 'beiu', 'beiv', 'beiw', 'beix', 'beiy', 'beiz', 'bejq', 'bejr', 'bejs', 'bejt', 'beju', 'bejv', 'bejw', 'bejx', 'bejy', 'bejz', 'bekq', 'bekr', 'beks', 'bekt', 'beku', 'bekv', 'bekw', 'bekx', 'beky', 'bekz', 'belq', 'belr', 'bels', 'belt', 'belu', 'belv', 'belw', 'belx', 'bely', 'belz', 'bemq', 'bemr', 'bems', 'bemt', 'bemu', 'bemv', 'bemw', 'bemx', 'bemy', 'bemz', 'benq', 'benr', 'bens', 'bent', 'benu', 'benv', 'benw', 'benx', 'beny', 'benz', 'beoq', 'beor', 'beos', 'beot', 'beou', 'beov', 'beow', 'beox', 'beoy', 'beoz', 'bepq', 'bepr', 'beps', 'bept', 'bepu', 'bepv', 'bepw', 'bepx', 'bepy', 'bepz', 'bfiq', 'bfir', 'bfis', 'bfit', 'bfiu', 'bfiv', 'bfiw', 'bfix', 'bfiy', 'bfiz', 'bfjq', 'bfjr', 'bfjs', 'bfjt', 'bfju', 'bfjv', 'bfjw', 'bfjx', 'bfjy', 'bfjz', 'bfkq', 'bfkr', 'bfks', 'bfkt', 'bfku', 'bfkv', 'bfkw', 'bfkx', 'bfky', 'bfkz', 'bflq', 'bflr', 'bfls', 'bflt', 'bflu', 'bflv', 'bflw', 'bflx', 'bfly', 'bflz', 'bfmq', 'bfmr', 'bfms', 'bfmt', 'bfmu', 'bfmv', 'bfmw', 'bfmx', 'bfmy', 'bfmz', 'bfnq', 'bfnr', 'bfns', 'bfnt', 'bfnu', 'bfnv', 'bfnw', 'bfnx', 'bfny', 'bfnz', 'bfoq', 'bfor', 'bfos', 'bfot', 'bfou', 'bfov', 'bfow', 'bfox', 'bfoy', 'bfoz', 'bfpq', 'bfpr', 'bfps', 'bfpt', 'bfpu', 'bfpv', 'bfpw', 'bfpx', 'bfpy', 'bfpz', 'bgiq', 'bgir', 'bgis', 'bgit', 'bgiu', 'bgiv', 'bgiw', 'bgix', 'bgiy', 'bgiz', 'bgjq', 'bgjr', 'bgjs', 'bgjt', 'bgju', 'bgjv', 'bgjw', 'bgjx', 'bgjy', 'bgjz', 'bgkq', 'bgkr', 'bgks', 'bgkt', 'bgku', 'bgkv', 'bgkw', 'bgkx', 'bgky', 'bgkz', 'bglq', 'bglr', 'bgls', 'bglt', 'bglu', 'bglv', 'bglw', 'bglx', 'bgly', 'bglz', 'bgmq', 'bgmr', 'bgms', 'bgmt', 'bgmu', 'bgmv', 'bgmw', 'bgmx', 'bgmy', 'bgmz', 'bgnq', 'bgnr', 'bgns', 'bgnt', 'bgnu', 'bgnv', 'bgnw', 'bgnx', 'bgny', 'bgnz', 'bgoq', 'bgor', 'bgos', 'bgot', 'bgou', 'bgov', 'bgow', 'bgox', 'bgoy', 'bgoz', 'bgpq', 'bgpr', 'bgps', 'bgpt', 'bgpu', 'bgpv', 'bgpw', 'bgpx', 'bgpy', 'bgpz', 'bhiq', 'bhir', 'bhis', 'bhit', 'bhiu', 'bhiv', 'bhiw', 'bhix', 'bhiy', 'bhiz', 'bhjq', 'bhjr', 'bhjs', 'bhjt', 'bhju', 'bhjv', 'bhjw', 'bhjx', 'bhjy', 'bhjz', 'bhkq', 'bhkr', 'bhks', 'bhkt', 'bhku', 'bhkv', 'bhkw', 'bhkx', 'bhky', 'bhkz', 'bhlq', 'bhlr', 'bhls', 'bhlt', 'bhlu', 'bhlv', 'bhlw', 'bhlx', 'bhly', 'bhlz', 'bhmq', 'bhmr', 'bhms', 'bhmt', 'bhmu', 'bhmv', 'bhmw', 'bhmx', 'bhmy', 'bhmz', 'bhnq', 'bhnr', 'bhns', 'bhnt', 'bhnu', 'bhnv', 'bhnw', 'bhnx', 'bhny', 'bhnz', 'bhoq', 'bhor', 'bhos', 'bhot', 'bhou', 'bhov', 'bhow', 'bhox', 'bhoy', 'bhoz', 'bhpq', 'bhpr', 'bhps', 'bhpt', 'bhpu', 'bhpv', 'bhpw', 'bhpx', 'bhpy', 'bhpz', 'ceiq', 'ceir', 'ceis', 'ceit', 'ceiu', 'ceiv', 'ceiw', 'ceix', 'ceiy', 'ceiz', 'cejq', 'cejr', 'cejs', 'cejt', 'ceju', 'cejv', 'cejw', 'cejx', 'cejy', 'cejz', 'cekq', 'cekr', 'ceks', 'cekt', 'ceku', 'cekv', 'cekw', 'cekx', 'ceky', 'cekz', 'celq', 'celr', 'cels', 'celt', 'celu', 'celv', 'celw', 'celx', 'cely', 'celz', 'cemq', 'cemr', 'cems', 'cemt', 'cemu', 'cemv', 'cemw', 'cemx', 'cemy', 'cemz', 'cenq', 'cenr', 'cens', 'cent', 'cenu', 'cenv', 'cenw', 'cenx', 'ceny', 'cenz', 'ceoq', 'ceor', 'ceos', 'ceot', 'ceou', 'ceov', 'ceow', 'ceox', 'ceoy', 'ceoz', 'cepq', 'cepr', 'ceps', 'cept', 'cepu', 'cepv', 'cepw', 'cepx', 'cepy', 'cepz', 'cfiq', 'cfir', 'cfis', 'cfit', 'cfiu', 'cfiv', 'cfiw', 'cfix', 'cfiy', 'cfiz', 'cfjq', 'cfjr', 'cfjs', 'cfjt', 'cfju', 'cfjv', 'cfjw', 'cfjx', 'cfjy', 'cfjz', 'cfkq', 'cfkr', 'cfks', 'cfkt', 'cfku', 'cfkv', 'cfkw', 'cfkx', 'cfky', 'cfkz', 'cflq', 'cflr', 'cfls', 'cflt', 'cflu', 'cflv', 'cflw', 'cflx', 'cfly', 'cflz', 'cfmq', 'cfmr', 'cfms', 'cfmt', 'cfmu', 'cfmv', 'cfmw', 'cfmx', 'cfmy', 'cfmz', 'cfnq', 'cfnr', 'cfns', 'cfnt', 'cfnu', 'cfnv', 'cfnw', 'cfnx', 'cfny', 'cfnz', 'cfoq', 'cfor', 'cfos', 'cfot', 'cfou', 'cfov', 'cfow', 'cfox', 'cfoy', 'cfoz', 'cfpq', 'cfpr', 'cfps', 'cfpt', 'cfpu', 'cfpv', 'cfpw', 'cfpx', 'cfpy', 'cfpz', 'cgiq', 'cgir', 'cgis', 'cgit', 'cgiu', 'cgiv', 'cgiw', 'cgix', 'cgiy', 'cgiz', 'cgjq', 'cgjr', 'cgjs', 'cgjt', 'cgju', 'cgjv', 'cgjw', 'cgjx', 'cgjy', 'cgjz', 'cgkq', 'cgkr', 'cgks', 'cgkt', 'cgku', 'cgkv', 'cgkw', 'cgkx', 'cgky', 'cgkz', 'cglq', 'cglr', 'cgls', 'cglt', 'cglu', 'cglv', 'cglw', 'cglx', 'cgly', 'cglz', 'cgmq', 'cgmr', 'cgms', 'cgmt', 'cgmu', 'cgmv', 'cgmw', 'cgmx', 'cgmy', 'cgmz', 'cgnq', 'cgnr', 'cgns', 'cgnt', 'cgnu', 'cgnv', 'cgnw', 'cgnx', 'cgny', 'cgnz', 'cgoq', 'cgor', 'cgos', 'cgot', 'cgou', 'cgov', 'cgow', 'cgox', 'cgoy', 'cgoz', 'cgpq', 'cgpr', 'cgps', 'cgpt', 'cgpu', 'cgpv', 'cgpw', 'cgpx', 'cgpy', 'cgpz', 'chiq', 'chir', 'chis', 'chit', 'chiu', 'chiv', 'chiw', 'chix', 'chiy', 'chiz', 'chjq', 'chjr', 'chjs', 'chjt', 'chju', 'chjv', 'chjw', 'chjx', 'chjy', 'chjz', 'chkq', 'chkr', 'chks', 'chkt', 'chku', 'chkv', 'chkw', 'chkx', 'chky', 'chkz', 'chlq', 'chlr', 'chls', 'chlt', 'chlu', 'chlv', 'chlw', 'chlx', 'chly', 'chlz', 'chmq', 'chmr', 'chms', 'chmt', 'chmu', 'chmv', 'chmw', 'chmx', 'chmy', 'chmz', 'chnq', 'chnr', 'chns', 'chnt', 'chnu', 'chnv', 'chnw', 'chnx', 'chny', 'chnz', 'choq', 'chor', 'chos', 'chot', 'chou', 'chov', 'chow', 'chox', 'choy', 'choz', 'chpq', 'chpr', 'chps', 'chpt', 'chpu', 'chpv', 'chpw', 'chpx', 'chpy', 'chpz', 'deiq', 'deir', 'deis', 'deit', 'deiu', 'deiv', 'deiw', 'deix', 'deiy', 'deiz', 'dejq', 'dejr', 'dejs', 'dejt', 'deju', 'dejv', 'dejw', 'dejx', 'dejy', 'dejz', 'dekq', 'dekr', 'deks', 'dekt', 'deku', 'dekv', 'dekw', 'dekx', 'deky', 'dekz', 'delq', 'delr', 'dels', 'delt', 'delu', 'delv', 'delw', 'delx', 'dely', 'delz', 'demq', 'demr', 'dems', 'demt', 'demu', 'demv', 'demw', 'demx', 'demy', 'demz', 'denq', 'denr', 'dens', 'dent', 'denu', 'denv', 'denw', 'denx', 'deny', 'denz', 'deoq', 'deor', 'deos', 'deot', 'deou', 'deov', 'deow', 'deox', 'deoy', 'deoz', 'depq', 'depr', 'deps', 'dept', 'depu', 'depv', 'depw', 'depx', 'depy', 'depz', 'dfiq', 'dfir', 'dfis', 'dfit', 'dfiu', 'dfiv', 'dfiw', 'dfix', 'dfiy', 'dfiz', 'dfjq', 'dfjr', 'dfjs', 'dfjt', 'dfju', 'dfjv', 'dfjw', 'dfjx', 'dfjy', 'dfjz', 'dfkq', 'dfkr', 'dfks', 'dfkt', 'dfku', 'dfkv', 'dfkw', 'dfkx', 'dfky', 'dfkz', 'dflq', 'dflr', 'dfls', 'dflt', 'dflu', 'dflv', 'dflw', 'dflx', 'dfly', 'dflz', 'dfmq', 'dfmr', 'dfms', 'dfmt', 'dfmu', 'dfmv', 'dfmw', 'dfmx', 'dfmy', 'dfmz', 'dfnq', 'dfnr', 'dfns', 'dfnt', 'dfnu', 'dfnv', 'dfnw', 'dfnx', 'dfny', 'dfnz', 'dfoq', 'dfor', 'dfos', 'dfot', 'dfou', 'dfov', 'dfow', 'dfox', 'dfoy', 'dfoz', 'dfpq', 'dfpr', 'dfps', 'dfpt', 'dfpu', 'dfpv', 'dfpw', 'dfpx', 'dfpy', 'dfpz', 'dgiq', 'dgir', 'dgis', 'dgit', 'dgiu', 'dgiv', 'dgiw', 'dgix', 'dgiy', 'dgiz', 'dgjq', 'dgjr', 'dgjs', 'dgjt', 'dgju', 'dgjv', 'dgjw', 'dgjx', 'dgjy', 'dgjz', 'dgkq', 'dgkr', 'dgks', 'dgkt', 'dgku', 'dgkv', 'dgkw', 'dgkx', 'dgky', 'dgkz', 'dglq', 'dglr', 'dgls', 'dglt', 'dglu', 'dglv', 'dglw', 'dglx', 'dgly', 'dglz', 'dgmq', 'dgmr', 'dgms', 'dgmt', 'dgmu', 'dgmv', 'dgmw', 'dgmx', 'dgmy', 'dgmz', 'dgnq', 'dgnr', 'dgns', 'dgnt', 'dgnu', 'dgnv', 'dgnw', 'dgnx', 'dgny', 'dgnz', 'dgoq', 'dgor', 'dgos', 'dgot', 'dgou', 'dgov', 'dgow', 'dgox', 'dgoy', 'dgoz', 'dgpq', 'dgpr', 'dgps', 'dgpt', 'dgpu', 'dgpv', 'dgpw', 'dgpx', 'dgpy', 'dgpz', 'dhiq', 'dhir', 'dhis', 'dhit', 'dhiu', 'dhiv', 'dhiw', 'dhix', 'dhiy', 'dhiz', 'dhjq', 'dhjr', 'dhjs', 'dhjt', 'dhju', 'dhjv', 'dhjw', 'dhjx', 'dhjy', 'dhjz', 'dhkq', 'dhkr', 'dhks', 'dhkt', 'dhku', 'dhkv', 'dhkw', 'dhkx', 'dhky', 'dhkz', 'dhlq', 'dhlr', 'dhls', 'dhlt', 'dhlu', 'dhlv', 'dhlw', 'dhlx', 'dhly', 'dhlz', 'dhmq', 'dhmr', 'dhms', 'dhmt', 'dhmu', 'dhmv', 'dhmw', 'dhmx', 'dhmy', 'dhmz', 'dhnq', 'dhnr', 'dhns', 'dhnt', 'dhnu', 'dhnv', 'dhnw', 'dhnx', 'dhny', 'dhnz', 'dhoq', 'dhor', 'dhos', 'dhot', 'dhou', 'dhov', 'dhow', 'dhox', 'dhoy', 'dhoz', 'dhpq', 'dhpr', 'dhps', 'dhpt', 'dhpu', 'dhpv', 'dhpw', 'dhpx', 'dhpy', 'dhpz']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e{f,g{h,i}}}{j,k}\"",
        "output": "['adj', 'adk', 'aefj', 'aefk', 'aeghj', 'aeghk', 'aegij', 'aegik', 'bdj', 'bdk', 'befj', 'befk', 'beghj', 'beghk', 'begij', 'begik', 'cdj', 'cdk', 'cefj', 'cefk', 'ceghj', 'ceghk', 'cegij', 'cegik']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f}{g,h,i}\"",
        "output": "['adg', 'adh', 'adi', 'aeg', 'aeh', 'aei', 'afg', 'afh', 'afi', 'bdg', 'bdh', 'bdi', 'beg', 'beh', 'bei', 'bfg', 'bfh', 'bfi', 'cdg', 'cdh', 'cdi', 'ceg', 'ceh', 'cei', 'cfg', 'cfh', 'cfi']"
      },
      {
        "input": "expression = \"{x,y}{a,b,c}{m,n}\"",
        "output": "['xam', 'xan', 'xbm', 'xbn', 'xcm', 'xcn', 'yam', 'yan', 'ybm', 'ybn', 'ycm', 'ycn']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}\"",
        "output": "['ad', 'ae', 'af', 'ag', 'ah', 'ai', 'aj', 'ak', 'al', 'am', 'an', 'ao', 'ap', 'aq', 'ar', 'as', 'at', 'au', 'av', 'aw', 'ax', 'ay', 'az', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bk', 'bl', 'bm', 'bn', 'bo', 'bp', 'bq', 'br', 'bs', 'bt', 'bu', 'bv', 'bw', 'bx', 'by', 'bz', 'cd', 'ce', 'cf', 'cg', 'ch', 'ci', 'cj', 'ck', 'cl', 'cm', 'cn', 'co', 'cp', 'cq', 'cr', 'cs', 'ct', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz']"
      },
      {
        "input": "expression = \"{a{b{c,d},e},f{g,h}}{i,j}\"",
        "output": "['abci', 'abcj', 'abdi', 'abdj', 'aei', 'aej', 'fgi', 'fgj', 'fhi', 'fhj']"
      },
      {
        "input": "expression = \"{a{b{c,d{e,f}},g{h,i{}}},j{k{l,m{n{o,p},q{r,s}}},x{y,z}}}\"",
        "output": "['abc,jklabc', 'abc,jkljkl', 'abc,jkmnoabc', 'abc,jkmnojkmno', 'abc,jkmnpabc', 'abc,jkmnpjkmnp', 'abc,jkmqrabc', 'abc,jkmqrjkmqr', 'abc,jkmqsabc', 'abc,jkmqsjkmqs', 'abc,jxyabc', 'abc,jxyjxy', 'abc,jxzabc', 'abc,jxzjxz', 'abde,jklabde', 'abde,jkljkl', 'abde,jkmnoabde', 'abde,jkmnojkmno', 'abde,jkmnpabde', 'abde,jkmnpjkmnp', 'abde,jkmqrabde', 'abde,jkmqrjkmqr', 'abde,jkmqsabde', 'abde,jkmqsjkmqs', 'abde,jxyabde', 'abde,jxyjxy', 'abde,jxzabde', 'abde,jxzjxz', 'abdf,jklabdf', 'abdf,jkljkl', 'abdf,jkmnoabdf', 'abdf,jkmnojkmno', 'abdf,jkmnpabdf', 'abdf,jkmnpjkmnp', 'abdf,jkmqrabdf', 'abdf,jkmqrjkmqr', 'abdf,jkmqsabdf', 'abdf,jkmqsjkmqs', 'abdf,jxyabdf', 'abdf,jxyjxy', 'abdf,jxzabdf', 'abdf,jxzjxz', 'agh,jklagh', 'agh,jkljkl', 'agh,jkmnoagh', 'agh,jkmnojkmno', 'agh,jkmnpagh', 'agh,jkmnpjkmnp', 'agh,jkmqragh', 'agh,jkmqrjkmqr', 'agh,jkmqsagh', 'agh,jkmqsjkmqs', 'agh,jxyagh', 'agh,jxyjxy', 'agh,jxzagh', 'agh,jxzjxz', 'agi', 'agijkl', 'agijkmno', 'agijkmnp', 'agijkmqr', 'agijkmqs', 'agijxy', 'agijxz']"
      },
      {
        "input": "expression = \"{a,b,c,d,e}{f,g,h,i,j,k}{l,m,n,o,p}\"",
        "output": "['afl', 'afm', 'afn', 'afo', 'afp', 'agl', 'agm', 'agn', 'ago', 'agp', 'ahl', 'ahm', 'ahn', 'aho', 'ahp', 'ail', 'aim', 'ain', 'aio', 'aip', 'ajl', 'ajm', 'ajn', 'ajo', 'ajp', 'akl', 'akm', 'akn', 'ako', 'akp', 'bfl', 'bfm', 'bfn', 'bfo', 'bfp', 'bgl', 'bgm', 'bgn', 'bgo', 'bgp', 'bhl', 'bhm', 'bhn', 'bho', 'bhp', 'bil', 'bim', 'bin', 'bio', 'bip', 'bjl', 'bjm', 'bjn', 'bjo', 'bjp', 'bkl', 'bkm', 'bkn', 'bko', 'bkp', 'cfl', 'cfm', 'cfn', 'cfo', 'cfp', 'cgl', 'cgm', 'cgn', 'cgo', 'cgp', 'chl', 'chm', 'chn', 'cho', 'chp', 'cil', 'cim', 'cin', 'cio', 'cip', 'cjl', 'cjm', 'cjn', 'cjo', 'cjp', 'ckl', 'ckm', 'ckn', 'cko', 'ckp', 'dfl', 'dfm', 'dfn', 'dfo', 'dfp', 'dgl', 'dgm', 'dgn', 'dgo', 'dgp', 'dhl', 'dhm', 'dhn', 'dho', 'dhp', 'dil', 'dim', 'din', 'dio', 'dip', 'djl', 'djm', 'djn', 'djo', 'djp', 'dkl', 'dkm', 'dkn', 'dko', 'dkp', 'efl', 'efm', 'efn', 'efo', 'efp', 'egl', 'egm', 'egn', 'ego', 'egp', 'ehl', 'ehm', 'ehn', 'eho', 'ehp', 'eil', 'eim', 'ein', 'eio', 'eip', 'ejl', 'ejm', 'ejn', 'ejo', 'ejp', 'ekl', 'ekm', 'ekn', 'eko', 'ekp']"
      },
      {
        "input": "expression = \"{a,b,c,d}{e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}\"",
        "output": "['aea', 'aeb', 'aec', 'aed', 'aee', 'aef', 'aeg', 'aeh', 'aei', 'aej', 'aek', 'ael', 'aem', 'aen', 'aeo', 'aep', 'aeq', 'aer', 'aes', 'aet', 'aeu', 'aev', 'aew', 'aex', 'aey', 'aez', 'afa', 'afb', 'afc', 'afd', 'afe', 'aff', 'afg', 'afh', 'afi', 'afj', 'afk', 'afl', 'afm', 'afn', 'afo', 'afp', 'afq', 'afr', 'afs', 'aft', 'afu', 'afv', 'afw', 'afx', 'afy', 'afz', 'aga', 'agb', 'agc', 'agd', 'age', 'agf', 'agg', 'agh', 'agi', 'agj', 'agk', 'agl', 'agm', 'agn', 'ago', 'agp', 'agq', 'agr', 'ags', 'agt', 'agu', 'agv', 'agw', 'agx', 'agy', 'agz', 'aha', 'ahb', 'ahc', 'ahd', 'ahe', 'ahf', 'ahg', 'ahh', 'ahi', 'ahj', 'ahk', 'ahl', 'ahm', 'ahn', 'aho', 'ahp', 'ahq', 'ahr', 'ahs', 'aht', 'ahu', 'ahv', 'ahw', 'ahx', 'ahy', 'ahz', 'aia', 'aib', 'aic', 'aid', 'aie', 'aif', 'aig', 'aih', 'aii', 'aij', 'aik', 'ail', 'aim', 'ain', 'aio', 'aip', 'aiq', 'air', 'ais', 'ait', 'aiu', 'aiv', 'aiw', 'aix', 'aiy', 'aiz', 'aja', 'ajb', 'ajc', 'ajd', 'aje', 'ajf', 'ajg', 'ajh', 'aji', 'ajj', 'ajk', 'ajl', 'ajm', 'ajn', 'ajo', 'ajp', 'ajq', 'ajr', 'ajs', 'ajt', 'aju', 'ajv', 'ajw', 'ajx', 'ajy', 'ajz', 'aka', 'akb', 'akc', 'akd', 'ake', 'akf', 'akg', 'akh', 'aki', 'akj', 'akk', 'akl', 'akm', 'akn', 'ako', 'akp', 'akq', 'akr', 'aks', 'akt', 'aku', 'akv', 'akw', 'akx', 'aky', 'akz', 'ala', 'alb', 'alc', 'ald', 'ale', 'alf', 'alg', 'alh', 'ali', 'alj', 'alk', 'all', 'alm', 'aln', 'alo', 'alp', 'alq', 'alr', 'als', 'alt', 'alu', 'alv', 'alw', 'alx', 'aly', 'alz', 'ama', 'amb', 'amc', 'amd', 'ame', 'amf', 'amg', 'amh', 'ami', 'amj', 'amk', 'aml', 'amm', 'amn', 'amo', 'amp', 'amq', 'amr', 'ams', 'amt', 'amu', 'amv', 'amw', 'amx', 'amy', 'amz', 'ana', 'anb', 'anc', 'and', 'ane', 'anf', 'ang', 'anh', 'ani', 'anj', 'ank', 'anl', 'anm', 'ann', 'ano', 'anp', 'anq', 'anr', 'ans', 'ant', 'anu', 'anv', 'anw', 'anx', 'any', 'anz', 'aoa', 'aob', 'aoc', 'aod', 'aoe', 'aof', 'aog', 'aoh', 'aoi', 'aoj', 'aok', 'aol', 'aom', 'aon', 'aoo', 'aop', 'aoq', 'aor', 'aos', 'aot', 'aou', 'aov', 'aow', 'aox', 'aoy', 'aoz', 'apa', 'apb', 'apc', 'apd', 'ape', 'apf', 'apg', 'aph', 'api', 'apj', 'apk', 'apl', 'apm', 'apn', 'apo', 'app', 'apq', 'apr', 'aps', 'apt', 'apu', 'apv', 'apw', 'apx', 'apy', 'apz', 'aqa', 'aqb', 'aqc', 'aqd', 'aqe', 'aqf', 'aqg', 'aqh', 'aqi', 'aqj', 'aqk', 'aql', 'aqm', 'aqn', 'aqo', 'aqp', 'aqq', 'aqr', 'aqs', 'aqt', 'aqu', 'aqv', 'aqw', 'aqx', 'aqy', 'aqz', 'ara', 'arb', 'arc', 'ard', 'are', 'arf', 'arg', 'arh', 'ari', 'arj', 'ark', 'arl', 'arm', 'arn', 'aro', 'arp', 'arq', 'arr', 'ars', 'art', 'aru', 'arv', 'arw', 'arx', 'ary', 'arz', 'asa', 'asb', 'asc', 'asd', 'ase', 'asf', 'asg', 'ash', 'asi', 'asj', 'ask', 'asl', 'asm', 'asn', 'aso', 'asp', 'asq', 'asr', 'ass', 'ast', 'asu', 'asv', 'asw', 'asx', 'asy', 'asz', 'ata', 'atb', 'atc', 'atd', 'ate', 'atf', 'atg', 'ath', 'ati', 'atj', 'atk', 'atl', 'atm', 'atn', 'ato', 'atp', 'atq', 'atr', 'ats', 'att', 'atu', 'atv', 'atw', 'atx', 'aty', 'atz', 'aua', 'aub', 'auc', 'aud', 'aue', 'auf', 'aug', 'auh', 'aui', 'auj', 'auk', 'aul', 'aum', 'aun', 'auo', 'aup', 'auq', 'aur', 'aus', 'aut', 'auu', 'auv', 'auw', 'aux', 'auy', 'auz', 'ava', 'avb', 'avc', 'avd', 'ave', 'avf', 'avg', 'avh', 'avi', 'avj', 'avk', 'avl', 'avm', 'avn', 'avo', 'avp', 'avq', 'avr', 'avs', 'avt', 'avu', 'avv', 'avw', 'avx', 'avy', 'avz', 'awa', 'awb', 'awc', 'awd', 'awe', 'awf', 'awg', 'awh', 'awi', 'awj', 'awk', 'awl', 'awm', 'awn', 'awo', 'awp', 'awq', 'awr', 'aws', 'awt', 'awu', 'awv', 'aww', 'awx', 'awy', 'awz', 'axa', 'axb', 'axc', 'axd', 'axe', 'axf', 'axg', 'axh', 'axi', 'axj', 'axk', 'axl', 'axm', 'axn', 'axo', 'axp', 'axq', 'axr', 'axs', 'axt', 'axu', 'axv', 'axw', 'axx', 'axy', 'axz', 'aya', 'ayb', 'ayc', 'ayd', 'aye', 'ayf', 'ayg', 'ayh', 'ayi', 'ayj', 'ayk', 'ayl', 'aym', 'ayn', 'ayo', 'ayp', 'ayq', 'ayr', 'ays', 'ayt', 'ayu', 'ayv', 'ayw', 'ayx', 'ayy', 'ayz', 'aza', 'azb', 'azc', 'azd', 'aze', 'azf', 'azg', 'azh', 'azi', 'azj', 'azk', 'azl', 'azm', 'azn', 'azo', 'azp', 'azq', 'azr', 'azs', 'azt', 'azu', 'azv', 'azw', 'azx', 'azy', 'azz', 'bea', 'beb', 'bec', 'bed', 'bee', 'bef', 'beg', 'beh', 'bei', 'bej', 'bek', 'bel', 'bem', 'ben', 'beo', 'bep', 'beq', 'ber', 'bes', 'bet', 'beu', 'bev', 'bew', 'bex', 'bey', 'bez', 'bfa', 'bfb', 'bfc', 'bfd', 'bfe', 'bff', 'bfg', 'bfh', 'bfi', 'bfj', 'bfk', 'bfl', 'bfm', 'bfn', 'bfo', 'bfp', 'bfq', 'bfr', 'bfs', 'bft', 'bfu', 'bfv', 'bfw', 'bfx', 'bfy', 'bfz', 'bga', 'bgb', 'bgc', 'bgd', 'bge', 'bgf', 'bgg', 'bgh', 'bgi', 'bgj', 'bgk', 'bgl', 'bgm', 'bgn', 'bgo', 'bgp', 'bgq', 'bgr', 'bgs', 'bgt', 'bgu', 'bgv', 'bgw', 'bgx', 'bgy', 'bgz', 'bha', 'bhb', 'bhc', 'bhd', 'bhe', 'bhf', 'bhg', 'bhh', 'bhi', 'bhj', 'bhk', 'bhl', 'bhm', 'bhn', 'bho', 'bhp', 'bhq', 'bhr', 'bhs', 'bht', 'bhu', 'bhv', 'bhw', 'bhx', 'bhy', 'bhz', 'bia', 'bib', 'bic', 'bid', 'bie', 'bif', 'big', 'bih', 'bii', 'bij', 'bik', 'bil', 'bim', 'bin', 'bio', 'bip', 'biq', 'bir', 'bis', 'bit', 'biu', 'biv', 'biw', 'bix', 'biy', 'biz', 'bja', 'bjb', 'bjc', 'bjd', 'bje', 'bjf', 'bjg', 'bjh', 'bji', 'bjj', 'bjk', 'bjl', 'bjm', 'bjn', 'bjo', 'bjp', 'bjq', 'bjr', 'bjs', 'bjt', 'bju', 'bjv', 'bjw', 'bjx', 'bjy', 'bjz', 'bka', 'bkb', 'bkc', 'bkd', 'bke', 'bkf', 'bkg', 'bkh', 'bki', 'bkj', 'bkk', 'bkl', 'bkm', 'bkn', 'bko', 'bkp', 'bkq', 'bkr', 'bks', 'bkt', 'bku', 'bkv', 'bkw', 'bkx', 'bky', 'bkz', 'bla', 'blb', 'blc', 'bld', 'ble', 'blf', 'blg', 'blh', 'bli', 'blj', 'blk', 'bll', 'blm', 'bln', 'blo', 'blp', 'blq', 'blr', 'bls', 'blt', 'blu', 'blv', 'blw', 'blx', 'bly', 'blz', 'bma', 'bmb', 'bmc', 'bmd', 'bme', 'bmf', 'bmg', 'bmh', 'bmi', 'bmj', 'bmk', 'bml', 'bmm', 'bmn', 'bmo', 'bmp', 'bmq', 'bmr', 'bms', 'bmt', 'bmu', 'bmv', 'bmw', 'bmx', 'bmy', 'bmz', 'bna', 'bnb', 'bnc', 'bnd', 'bne', 'bnf', 'bng', 'bnh', 'bni', 'bnj', 'bnk', 'bnl', 'bnm', 'bnn', 'bno', 'bnp', 'bnq', 'bnr', 'bns', 'bnt', 'bnu', 'bnv', 'bnw', 'bnx', 'bny', 'bnz', 'boa', 'bob', 'boc', 'bod', 'boe', 'bof', 'bog', 'boh', 'boi', 'boj', 'bok', 'bol', 'bom', 'bon', 'boo', 'bop', 'boq', 'bor', 'bos', 'bot', 'bou', 'bov', 'bow', 'box', 'boy', 'boz', 'bpa', 'bpb', 'bpc', 'bpd', 'bpe', 'bpf', 'bpg', 'bph', 'bpi', 'bpj', 'bpk', 'bpl', 'bpm', 'bpn', 'bpo', 'bpp', 'bpq', 'bpr', 'bps', 'bpt', 'bpu', 'bpv', 'bpw', 'bpx', 'bpy', 'bpz', 'bqa', 'bqb', 'bqc', 'bqd', 'bqe', 'bqf', 'bqg', 'bqh', 'bqi', 'bqj', 'bqk', 'bql', 'bqm', 'bqn', 'bqo', 'bqp', 'bqq', 'bqr', 'bqs', 'bqt', 'bqu', 'bqv', 'bqw', 'bqx', 'bqy', 'bqz', 'bra', 'brb', 'brc', 'brd', 'bre', 'brf', 'brg', 'brh', 'bri', 'brj', 'brk', 'brl', 'brm', 'brn', 'bro', 'brp', 'brq', 'brr', 'brs', 'brt', 'bru', 'brv', 'brw', 'brx', 'bry', 'brz', 'bsa', 'bsb', 'bsc', 'bsd', 'bse', 'bsf', 'bsg', 'bsh', 'bsi', 'bsj', 'bsk', 'bsl', 'bsm', 'bsn', 'bso', 'bsp', 'bsq', 'bsr', 'bss', 'bst', 'bsu', 'bsv', 'bsw', 'bsx', 'bsy', 'bsz', 'bta', 'btb', 'btc', 'btd', 'bte', 'btf', 'btg', 'bth', 'bti', 'btj', 'btk', 'btl', 'btm', 'btn', 'bto', 'btp', 'btq', 'btr', 'bts', 'btt', 'btu', 'btv', 'btw', 'btx', 'bty', 'btz', 'bua', 'bub', 'buc', 'bud', 'bue', 'buf', 'bug', 'buh', 'bui', 'buj', 'buk', 'bul', 'bum', 'bun', 'buo', 'bup', 'buq', 'bur', 'bus', 'but', 'buu', 'buv', 'buw', 'bux', 'buy', 'buz', 'bva', 'bvb', 'bvc', 'bvd', 'bve', 'bvf', 'bvg', 'bvh', 'bvi', 'bvj', 'bvk', 'bvl', 'bvm', 'bvn', 'bvo', 'bvp', 'bvq', 'bvr', 'bvs', 'bvt', 'bvu', 'bvv', 'bvw', 'bvx', 'bvy', 'bvz', 'bwa', 'bwb', 'bwc', 'bwd', 'bwe', 'bwf', 'bwg', 'bwh', 'bwi', 'bwj', 'bwk', 'bwl', 'bwm', 'bwn', 'bwo', 'bwp', 'bwq', 'bwr', 'bws', 'bwt', 'bwu', 'bwv', 'bww', 'bwx', 'bwy', 'bwz', 'bxa', 'bxb', 'bxc', 'bxd', 'bxe', 'bxf', 'bxg', 'bxh', 'bxi', 'bxj', 'bxk', 'bxl', 'bxm', 'bxn', 'bxo', 'bxp', 'bxq', 'bxr', 'bxs', 'bxt', 'bxu', 'bxv', 'bxw', 'bxx', 'bxy', 'bxz', 'bya', 'byb', 'byc', 'byd', 'bye', 'byf', 'byg', 'byh', 'byi', 'byj', 'byk', 'byl', 'bym', 'byn', 'byo', 'byp', 'byq', 'byr', 'bys', 'byt', 'byu', 'byv', 'byw', 'byx', 'byy', 'byz', 'bza', 'bzb', 'bzc', 'bzd', 'bze', 'bzf', 'bzg', 'bzh', 'bzi', 'bzj', 'bzk', 'bzl', 'bzm', 'bzn', 'bzo', 'bzp', 'bzq', 'bzr', 'bzs', 'bzt', 'bzu', 'bzv', 'bzw', 'bzx', 'bzy', 'bzz', 'cea', 'ceb', 'cec', 'ced', 'cee', 'cef', 'ceg', 'ceh', 'cei', 'cej', 'cek', 'cel', 'cem', 'cen', 'ceo', 'cep', 'ceq', 'cer', 'ces', 'cet', 'ceu', 'cev', 'cew', 'cex', 'cey', 'cez', 'cfa', 'cfb', 'cfc', 'cfd', 'cfe', 'cff', 'cfg', 'cfh', 'cfi', 'cfj', 'cfk', 'cfl', 'cfm', 'cfn', 'cfo', 'cfp', 'cfq', 'cfr', 'cfs', 'cft', 'cfu', 'cfv', 'cfw', 'cfx', 'cfy', 'cfz', 'cga', 'cgb', 'cgc', 'cgd', 'cge', 'cgf', 'cgg', 'cgh', 'cgi', 'cgj', 'cgk', 'cgl', 'cgm', 'cgn', 'cgo', 'cgp', 'cgq', 'cgr', 'cgs', 'cgt', 'cgu', 'cgv', 'cgw', 'cgx', 'cgy', 'cgz', 'cha', 'chb', 'chc', 'chd', 'che', 'chf', 'chg', 'chh', 'chi', 'chj', 'chk', 'chl', 'chm', 'chn', 'cho', 'chp', 'chq', 'chr', 'chs', 'cht', 'chu', 'chv', 'chw', 'chx', 'chy', 'chz', 'cia', 'cib', 'cic', 'cid', 'cie', 'cif', 'cig', 'cih', 'cii', 'cij', 'cik', 'cil', 'cim', 'cin', 'cio', 'cip', 'ciq', 'cir', 'cis', 'cit', 'ciu', 'civ', 'ciw', 'cix', 'ciy', 'ciz', 'cja', 'cjb', 'cjc', 'cjd', 'cje', 'cjf', 'cjg', 'cjh', 'cji', 'cjj', 'cjk', 'cjl', 'cjm', 'cjn', 'cjo', 'cjp', 'cjq', 'cjr', 'cjs', 'cjt', 'cju', 'cjv', 'cjw', 'cjx', 'cjy', 'cjz', 'cka', 'ckb', 'ckc', 'ckd', 'cke', 'ckf', 'ckg', 'ckh', 'cki', 'ckj', 'ckk', 'ckl', 'ckm', 'ckn', 'cko', 'ckp', 'ckq', 'ckr', 'cks', 'ckt', 'cku', 'ckv', 'ckw', 'ckx', 'cky', 'ckz', 'cla', 'clb', 'clc', 'cld', 'cle', 'clf', 'clg', 'clh', 'cli', 'clj', 'clk', 'cll', 'clm', 'cln', 'clo', 'clp', 'clq', 'clr', 'cls', 'clt', 'clu', 'clv', 'clw', 'clx', 'cly', 'clz', 'cma', 'cmb', 'cmc', 'cmd', 'cme', 'cmf', 'cmg', 'cmh', 'cmi', 'cmj', 'cmk', 'cml', 'cmm', 'cmn', 'cmo', 'cmp', 'cmq', 'cmr', 'cms', 'cmt', 'cmu', 'cmv', 'cmw', 'cmx', 'cmy', 'cmz', 'cna', 'cnb', 'cnc', 'cnd', 'cne', 'cnf', 'cng', 'cnh', 'cni', 'cnj', 'cnk', 'cnl', 'cnm', 'cnn', 'cno', 'cnp', 'cnq', 'cnr', 'cns', 'cnt', 'cnu', 'cnv', 'cnw', 'cnx', 'cny', 'cnz', 'coa', 'cob', 'coc', 'cod', 'coe', 'cof', 'cog', 'coh', 'coi', 'coj', 'cok', 'col', 'com', 'con', 'coo', 'cop', 'coq', 'cor', 'cos', 'cot', 'cou', 'cov', 'cow', 'cox', 'coy', 'coz', 'cpa', 'cpb', 'cpc', 'cpd', 'cpe', 'cpf', 'cpg', 'cph', 'cpi', 'cpj', 'cpk', 'cpl', 'cpm', 'cpn', 'cpo', 'cpp', 'cpq', 'cpr', 'cps', 'cpt', 'cpu', 'cpv', 'cpw', 'cpx', 'cpy', 'cpz', 'cqa', 'cqb', 'cqc', 'cqd', 'cqe', 'cqf', 'cqg', 'cqh', 'cqi', 'cqj', 'cqk', 'cql', 'cqm', 'cqn', 'cqo', 'cqp', 'cqq', 'cqr', 'cqs', 'cqt', 'cqu', 'cqv', 'cqw', 'cqx', 'cqy', 'cqz', 'cra', 'crb', 'crc', 'crd', 'cre', 'crf', 'crg', 'crh', 'cri', 'crj', 'crk', 'crl', 'crm', 'crn', 'cro', 'crp', 'crq', 'crr', 'crs', 'crt', 'cru', 'crv', 'crw', 'crx', 'cry', 'crz', 'csa', 'csb', 'csc', 'csd', 'cse', 'csf', 'csg', 'csh', 'csi', 'csj', 'csk', 'csl', 'csm', 'csn', 'cso', 'csp', 'csq', 'csr', 'css', 'cst', 'csu', 'csv', 'csw', 'csx', 'csy', 'csz', 'cta', 'ctb', 'ctc', 'ctd', 'cte', 'ctf', 'ctg', 'cth', 'cti', 'ctj', 'ctk', 'ctl', 'ctm', 'ctn', 'cto', 'ctp', 'ctq', 'ctr', 'cts', 'ctt', 'ctu', 'ctv', 'ctw', 'ctx', 'cty', 'ctz', 'cua', 'cub', 'cuc', 'cud', 'cue', 'cuf', 'cug', 'cuh', 'cui', 'cuj', 'cuk', 'cul', 'cum', 'cun', 'cuo', 'cup', 'cuq', 'cur', 'cus', 'cut', 'cuu', 'cuv', 'cuw', 'cux', 'cuy', 'cuz', 'cva', 'cvb', 'cvc', 'cvd', 'cve', 'cvf', 'cvg', 'cvh', 'cvi', 'cvj', 'cvk', 'cvl', 'cvm', 'cvn', 'cvo', 'cvp', 'cvq', 'cvr', 'cvs', 'cvt', 'cvu', 'cvv', 'cvw', 'cvx', 'cvy', 'cvz', 'cwa', 'cwb', 'cwc', 'cwd', 'cwe', 'cwf', 'cwg', 'cwh', 'cwi', 'cwj', 'cwk', 'cwl', 'cwm', 'cwn', 'cwo', 'cwp', 'cwq', 'cwr', 'cws', 'cwt', 'cwu', 'cwv', 'cww', 'cwx', 'cwy', 'cwz', 'cxa', 'cxb', 'cxc', 'cxd', 'cxe', 'cxf', 'cxg', 'cxh', 'cxi', 'cxj', 'cxk', 'cxl', 'cxm', 'cxn', 'cxo', 'cxp', 'cxq', 'cxr', 'cxs', 'cxt', 'cxu', 'cxv', 'cxw', 'cxx', 'cxy', 'cxz', 'cya', 'cyb', 'cyc', 'cyd', 'cye', 'cyf', 'cyg', 'cyh', 'cyi', 'cyj', 'cyk', 'cyl', 'cym', 'cyn', 'cyo', 'cyp', 'cyq', 'cyr', 'cys', 'cyt', 'cyu', 'cyv', 'cyw', 'cyx', 'cyy', 'cyz', 'cza', 'czb', 'czc', 'czd', 'cze', 'czf', 'czg', 'czh', 'czi', 'czj', 'czk', 'czl', 'czm', 'czn', 'czo', 'czp', 'czq', 'czr', 'czs', 'czt', 'czu', 'czv', 'czw', 'czx', 'czy', 'czz', 'dea', 'deb', 'dec', 'ded', 'dee', 'def', 'deg', 'deh', 'dei', 'dej', 'dek', 'del', 'dem', 'den', 'deo', 'dep', 'deq', 'der', 'des', 'det', 'deu', 'dev', 'dew', 'dex', 'dey', 'dez', 'dfa', 'dfb', 'dfc', 'dfd', 'dfe', 'dff', 'dfg', 'dfh', 'dfi', 'dfj', 'dfk', 'dfl', 'dfm', 'dfn', 'dfo', 'dfp', 'dfq', 'dfr', 'dfs', 'dft', 'dfu', 'dfv', 'dfw', 'dfx', 'dfy', 'dfz', 'dga', 'dgb', 'dgc', 'dgd', 'dge', 'dgf', 'dgg', 'dgh', 'dgi', 'dgj', 'dgk', 'dgl', 'dgm', 'dgn', 'dgo', 'dgp', 'dgq', 'dgr', 'dgs', 'dgt', 'dgu', 'dgv', 'dgw', 'dgx', 'dgy', 'dgz', 'dha', 'dhb', 'dhc', 'dhd', 'dhe', 'dhf', 'dhg', 'dhh', 'dhi', 'dhj', 'dhk', 'dhl', 'dhm', 'dhn', 'dho', 'dhp', 'dhq', 'dhr', 'dhs', 'dht', 'dhu', 'dhv', 'dhw', 'dhx', 'dhy', 'dhz', 'dia', 'dib', 'dic', 'did', 'die', 'dif', 'dig', 'dih', 'dii', 'dij', 'dik', 'dil', 'dim', 'din', 'dio', 'dip', 'diq', 'dir', 'dis', 'dit', 'diu', 'div', 'diw', 'dix', 'diy', 'diz', 'dja', 'djb', 'djc', 'djd', 'dje', 'djf', 'djg', 'djh', 'dji', 'djj', 'djk', 'djl', 'djm', 'djn', 'djo', 'djp', 'djq', 'djr', 'djs', 'djt', 'dju', 'djv', 'djw', 'djx', 'djy', 'djz', 'dka', 'dkb', 'dkc', 'dkd', 'dke', 'dkf', 'dkg', 'dkh', 'dki', 'dkj', 'dkk', 'dkl', 'dkm', 'dkn', 'dko', 'dkp', 'dkq', 'dkr', 'dks', 'dkt', 'dku', 'dkv', 'dkw', 'dkx', 'dky', 'dkz', 'dla', 'dlb', 'dlc', 'dld', 'dle', 'dlf', 'dlg', 'dlh', 'dli', 'dlj', 'dlk', 'dll', 'dlm', 'dln', 'dlo', 'dlp', 'dlq', 'dlr', 'dls', 'dlt', 'dlu', 'dlv', 'dlw', 'dlx', 'dly', 'dlz', 'dma', 'dmb', 'dmc', 'dmd', 'dme', 'dmf', 'dmg', 'dmh', 'dmi', 'dmj', 'dmk', 'dml', 'dmm', 'dmn', 'dmo', 'dmp', 'dmq', 'dmr', 'dms', 'dmt', 'dmu', 'dmv', 'dmw', 'dmx', 'dmy', 'dmz', 'dna', 'dnb', 'dnc', 'dnd', 'dne', 'dnf', 'dng', 'dnh', 'dni', 'dnj', 'dnk', 'dnl', 'dnm', 'dnn', 'dno', 'dnp', 'dnq', 'dnr', 'dns', 'dnt', 'dnu', 'dnv', 'dnw', 'dnx', 'dny', 'dnz', 'doa', 'dob', 'doc', 'dod', 'doe', 'dof', 'dog', 'doh', 'doi', 'doj', 'dok', 'dol', 'dom', 'don', 'doo', 'dop', 'doq', 'dor', 'dos', 'dot', 'dou', 'dov', 'dow', 'dox', 'doy', 'doz', 'dpa', 'dpb', 'dpc', 'dpd', 'dpe', 'dpf', 'dpg', 'dph', 'dpi', 'dpj', 'dpk', 'dpl', 'dpm', 'dpn', 'dpo', 'dpp', 'dpq', 'dpr', 'dps', 'dpt', 'dpu', 'dpv', 'dpw', 'dpx', 'dpy', 'dpz', 'dqa', 'dqb', 'dqc', 'dqd', 'dqe', 'dqf', 'dqg', 'dqh', 'dqi', 'dqj', 'dqk', 'dql', 'dqm', 'dqn', 'dqo', 'dqp', 'dqq', 'dqr', 'dqs', 'dqt', 'dqu', 'dqv', 'dqw', 'dqx', 'dqy', 'dqz', 'dra', 'drb', 'drc', 'drd', 'dre', 'drf', 'drg', 'drh', 'dri', 'drj', 'drk', 'drl', 'drm', 'drn', 'dro', 'drp', 'drq', 'drr', 'drs', 'drt', 'dru', 'drv', 'drw', 'drx', 'dry', 'drz', 'dsa', 'dsb', 'dsc', 'dsd', 'dse', 'dsf', 'dsg', 'dsh', 'dsi', 'dsj', 'dsk', 'dsl', 'dsm', 'dsn', 'dso', 'dsp', 'dsq', 'dsr', 'dss', 'dst', 'dsu', 'dsv', 'dsw', 'dsx', 'dsy', 'dsz', 'dta', 'dtb', 'dtc', 'dtd', 'dte', 'dtf', 'dtg', 'dth', 'dti', 'dtj', 'dtk', 'dtl', 'dtm', 'dtn', 'dto', 'dtp', 'dtq', 'dtr', 'dts', 'dtt', 'dtu', 'dtv', 'dtw', 'dtx', 'dty', 'dtz', 'dua', 'dub', 'duc', 'dud', 'due', 'duf', 'dug', 'duh', 'dui', 'duj', 'duk', 'dul', 'dum', 'dun', 'duo', 'dup', 'duq', 'dur', 'dus', 'dut', 'duu', 'duv', 'duw', 'dux', 'duy', 'duz', 'dva', 'dvb', 'dvc', 'dvd', 'dve', 'dvf', 'dvg', 'dvh', 'dvi', 'dvj', 'dvk', 'dvl', 'dvm', 'dvn', 'dvo', 'dvp', 'dvq', 'dvr', 'dvs', 'dvt', 'dvu', 'dvv', 'dvw', 'dvx', 'dvy', 'dvz', 'dwa', 'dwb', 'dwc', 'dwd', 'dwe', 'dwf', 'dwg', 'dwh', 'dwi', 'dwj', 'dwk', 'dwl', 'dwm', 'dwn', 'dwo', 'dwp', 'dwq', 'dwr', 'dws', 'dwt', 'dwu', 'dwv', 'dww', 'dwx', 'dwy', 'dwz', 'dxa', 'dxb', 'dxc', 'dxd', 'dxe', 'dxf', 'dxg', 'dxh', 'dxi', 'dxj', 'dxk', 'dxl', 'dxm', 'dxn', 'dxo', 'dxp', 'dxq', 'dxr', 'dxs', 'dxt', 'dxu', 'dxv', 'dxw', 'dxx', 'dxy', 'dxz', 'dya', 'dyb', 'dyc', 'dyd', 'dye', 'dyf', 'dyg', 'dyh', 'dyi', 'dyj', 'dyk', 'dyl', 'dym', 'dyn', 'dyo', 'dyp', 'dyq', 'dyr', 'dys', 'dyt', 'dyu', 'dyv', 'dyw', 'dyx', 'dyy', 'dyz', 'dza', 'dzb', 'dzc', 'dzd', 'dze', 'dzf', 'dzg', 'dzh', 'dzi', 'dzj', 'dzk', 'dzl', 'dzm', 'dzn', 'dzo', 'dzp', 'dzq', 'dzr', 'dzs', 'dzt', 'dzu', 'dzv', 'dzw', 'dzx', 'dzy', 'dzz']"
      },
      {
        "input": "expression = \"{a{b{c{d{e}}}}}{f{g{h{i}}}}\"",
        "output": "['abcdefghi']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f}{g,h,i}{j,k,l}\"",
        "output": "['adgj', 'adgk', 'adgl', 'adhj', 'adhk', 'adhl', 'adij', 'adik', 'adil', 'aegj', 'aegk', 'aegl', 'aehj', 'aehk', 'aehl', 'aeij', 'aeik', 'aeil', 'afgj', 'afgk', 'afgl', 'afhj', 'afhk', 'afhl', 'afij', 'afik', 'afil', 'bdgj', 'bdgk', 'bdgl', 'bdhj', 'bdhk', 'bdhl', 'bdij', 'bdik', 'bdil', 'begj', 'begk', 'begl', 'behj', 'behk', 'behl', 'beij', 'beik', 'beil', 'bfgj', 'bfgk', 'bfgl', 'bfhj', 'bfhk', 'bfhl', 'bfij', 'bfik', 'bfil', 'cdgj', 'cdgk', 'cdgl', 'cdhj', 'cdhk', 'cdhl', 'cdij', 'cdik', 'cdil', 'cegj', 'cegk', 'cegl', 'cehj', 'cehk', 'cehl', 'ceij', 'ceik', 'ceil', 'cfgj', 'cfgk', 'cfgl', 'cfhj', 'cfhk', 'cfhl', 'cfij', 'cfik', 'cfil']"
      },
      {
        "input": "expression = \"{a,b}{c,d}{e,f}{g,h}\"",
        "output": "['aceg', 'aceh', 'acfg', 'acfh', 'adeg', 'adeh', 'adfg', 'adfh', 'bceg', 'bceh', 'bcfg', 'bcfh', 'bdeg', 'bdeh', 'bdfg', 'bdfh']"
      },
      {
        "input": "expression = \"{a,b}{c,d}{e,{f,g{h,i}}}\"",
        "output": "['ace', 'acf', 'acgh', 'acgi', 'ade', 'adf', 'adgh', 'adgi', 'bce', 'bcf', 'bcgh', 'bcgi', 'bde', 'bdf', 'bdgh', 'bdgi']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f}{g,h,i}{j,k,l}{m,n,o}{p,q,r}{s,t,u}{v,w,x}{y,z}\"",
        "output": "Execution timed out"
      },
      {
        "input": "expression = \"{a{b{c,d},e},f{g,h}}\"",
        "output": "['abc', 'abd', 'ae', 'fg', 'fh']"
      },
      {
        "input": "expression = \"{a{b,c}{d,e}{f,g},{h,i}{j,k}{l,m},{n,o}{p,q}{r,s},{t,u}{v,w}{x,y,z}}\"",
        "output": "['abdf', 'abdg', 'abef', 'abeg', 'acdf', 'acdg', 'acef', 'aceg', 'hjl', 'hjm', 'hkl', 'hkm', 'ijl', 'ijm', 'ikl', 'ikm', 'npr', 'nps', 'nqr', 'nqs', 'opr', 'ops', 'oqr', 'oqs', 'tvx', 'tvy', 'tvz', 'twx', 'twy', 'twz', 'uvx', 'uvy', 'uvz', 'uwx', 'uwy', 'uwz']"
      },
      {
        "input": "expression = \"{a,b}{c,d,e}{f,g,h}\"",
        "output": "['acf', 'acg', 'ach', 'adf', 'adg', 'adh', 'aef', 'aeg', 'aeh', 'bcf', 'bcg', 'bch', 'bdf', 'bdg', 'bdh', 'bef', 'beg', 'beh']"
      },
      {
        "input": "expression = \"{a{b,c},{d,e}{f,g}}\"",
        "output": "['ab', 'ac', 'df', 'dg', 'ef', 'eg']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f}{g,h,i,j}\"",
        "output": "['adg', 'adh', 'adi', 'adj', 'aeg', 'aeh', 'aei', 'aej', 'afg', 'afh', 'afi', 'afj', 'bdg', 'bdh', 'bdi', 'bdj', 'beg', 'beh', 'bei', 'bej', 'bfg', 'bfh', 'bfi', 'bfj', 'cdg', 'cdh', 'cdi', 'cdj', 'ceg', 'ceh', 'cei', 'cej', 'cfg', 'cfh', 'cfi', 'cfj']"
      },
      {
        "input": "expression = \"{a,b}{c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}\"",
        "output": "['ac', 'ad', 'ae', 'af', 'ag', 'ah', 'ai', 'aj', 'ak', 'al', 'am', 'an', 'ao', 'ap', 'aq', 'ar', 'as', 'at', 'au', 'av', 'aw', 'ax', 'ay', 'az', 'bc', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bk', 'bl', 'bm', 'bn', 'bo', 'bp', 'bq', 'br', 'bs', 'bt', 'bu', 'bv', 'bw', 'bx', 'by', 'bz']"
      },
      {
        "input": "expression = \"a{b,c}d{e,f}g{h,i}\"",
        "output": "['abdegh', 'abdegi', 'abdfgh', 'abdfgi', 'acdegh', 'acdegi', 'acdfgh', 'acdfgi']"
      },
      {
        "input": "expression = \"{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{a,b,c,d}\"",
        "output": "Execution timed out"
      },
      {
        "input": "expression = \"{a,b{c,d{e,f}},g{h,i{,j}}{k,l}}m{n,o{p,q}}\"",
        "output": "['amn', 'amop', 'amoq', 'bcmn', 'bcmop', 'bcmoq', 'bdemn', 'bdemop', 'bdemoq', 'bdfmn', 'bdfmop', 'bdfmoq', 'ghkmn', 'ghkmop', 'ghkmoq', 'ghlmn', 'ghlmop', 'ghlmoq', 'gijkmn', 'gijkmop', 'gijkmoq', 'gijlmn', 'gijlmop', 'gijlmoq', 'gikmn', 'gikmop', 'gikmoq', 'gilmn', 'gilmop', 'gilmoq']"
      },
      {
        "input": "expression = \"{a,b}{c{d,e{f,g}},h}\"",
        "output": "['acd', 'acef', 'aceg', 'ah', 'bcd', 'bcef', 'bceg', 'bh']"
      },
      {
        "input": "expression = \"{a,b}{c{d{e,f},g},h{ij,k}}\"",
        "output": "['acde', 'acdf', 'acg', 'ahij', 'ahk', 'bcde', 'bcdf', 'bcg', 'bhij', 'bhk']"
      },
      {
        "input": "expression = \"{a{b,c},d{e,f}}{g,h}\"",
        "output": "['abg', 'abh', 'acg', 'ach', 'deg', 'deh', 'dfg', 'dfh']"
      },
      {
        "input": "expression = \"{a,b{c,d{e,f}},g{h,i{,j}}}\"",
        "output": "['a', 'bc', 'bde', 'bdf', 'gh', 'gi', 'gij']"
      },
      {
        "input": "expression = \"{a{b{c{d{e{f{g{h{i{j{k{l{m{n{o{p{q{r{s{t{u{v{w{x{y{z{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}}}}}}}}}}}}}}}}}}}}}\"",
        "output": "['{a{b{c{d{e{fghijklmnopqrstuvwxyza', '{a{b{c{d{e{fghijklmnopqrstuvwxyzb', '{a{b{c{d{e{fghijklmnopqrstuvwxyzc', '{a{b{c{d{e{fghijklmnopqrstuvwxyzd', '{a{b{c{d{e{fghijklmnopqrstuvwxyze', '{a{b{c{d{e{fghijklmnopqrstuvwxyzf', '{a{b{c{d{e{fghijklmnopqrstuvwxyzg', '{a{b{c{d{e{fghijklmnopqrstuvwxyzh', '{a{b{c{d{e{fghijklmnopqrstuvwxyzi', '{a{b{c{d{e{fghijklmnopqrstuvwxyzj', '{a{b{c{d{e{fghijklmnopqrstuvwxyzk', '{a{b{c{d{e{fghijklmnopqrstuvwxyzl', '{a{b{c{d{e{fghijklmnopqrstuvwxyzm', '{a{b{c{d{e{fghijklmnopqrstuvwxyzn', '{a{b{c{d{e{fghijklmnopqrstuvwxyzo', '{a{b{c{d{e{fghijklmnopqrstuvwxyzp', '{a{b{c{d{e{fghijklmnopqrstuvwxyzq', '{a{b{c{d{e{fghijklmnopqrstuvwxyzr', '{a{b{c{d{e{fghijklmnopqrstuvwxyzs', '{a{b{c{d{e{fghijklmnopqrstuvwxyzt', '{a{b{c{d{e{fghijklmnopqrstuvwxyzu', '{a{b{c{d{e{fghijklmnopqrstuvwxyzv', '{a{b{c{d{e{fghijklmnopqrstuvwxyzw', '{a{b{c{d{e{fghijklmnopqrstuvwxyzx', '{a{b{c{d{e{fghijklmnopqrstuvwxyzy', '{a{b{c{d{e{fghijklmnopqrstuvwxyzz']"
      },
      {
        "input": "expression = \"{a,b{c,d}}{e,f{g,h}}{i,{j,k}}\"",
        "output": "['aei', 'aej', 'aek', 'afgi', 'afgj', 'afgk', 'afhi', 'afhj', 'afhk', 'bcei', 'bcej', 'bcek', 'bcfgi', 'bcfgj', 'bcfgk', 'bcfhi', 'bcfhj', 'bcfhk', 'bdei', 'bdej', 'bdek', 'bdfgi', 'bdfgj', 'bdfgk', 'bdfhi', 'bdfhj', 'bdfhk']"
      },
      {
        "input": "expression = \"{x{y,z},{a,b,c}{d,e},{f,g}{h,{i,j}}}\"",
        "output": "['ad', 'ae', 'bd', 'be', 'cd', 'ce', 'fh', 'fi', 'fj', 'gh', 'gi', 'gj', 'xy', 'xz']"
      },
      {
        "input": "expression = \"{a,b,c}{d,e,f}{g,{h,i}}\"",
        "output": "['adg', 'adh', 'adi', 'aeg', 'aeh', 'aei', 'afg', 'afh', 'afi', 'bdg', 'bdh', 'bdi', 'beg', 'beh', 'bei', 'bfg', 'bfh', 'bfi', 'cdg', 'cdh', 'cdi', 'ceg', 'ceh', 'cei', 'cfg', 'cfh', 'cfi']"
      },
      {
        "input": "expression = \"{x,y,z}{a,b,c}{m,n}\"",
        "output": "['xam', 'xan', 'xbm', 'xbn', 'xcm', 'xcn', 'yam', 'yan', 'ybm', 'ybn', 'ycm', 'ycn', 'zam', 'zan', 'zbm', 'zbn', 'zcm', 'zcn']"
      },
      {
        "input": "expression = \"{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}\"",
        "output": "['aa', 'ab', 'ac', 'ad', 'ae', 'af', 'ag', 'ah', 'ai', 'aj', 'ak', 'al', 'am', 'an', 'ao', 'ap', 'aq', 'ar', 'as', 'at', 'au', 'av', 'aw', 'ax', 'ay', 'az', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bk', 'bl', 'bm', 'bn', 'bo', 'bp', 'bq', 'br', 'bs', 'bt', 'bu', 'bv', 'bw', 'bx', 'by', 'bz', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'cg', 'ch', 'ci', 'cj', 'ck', 'cl', 'cm', 'cn', 'co', 'cp', 'cq', 'cr', 'cs', 'ct', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz', 'da', 'db', 'dc', 'dd', 'de', 'df', 'dg', 'dh', 'di', 'dj', 'dk', 'dl', 'dm', 'dn', 'do', 'dp', 'dq', 'dr', 'ds', 'dt', 'du', 'dv', 'dw', 'dx', 'dy', 'dz', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'eg', 'eh', 'ei', 'ej', 'ek', 'el', 'em', 'en', 'eo', 'ep', 'eq', 'er', 'es', 'et', 'eu', 'ev', 'ew', 'ex', 'ey', 'ez', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff', 'fg', 'fh', 'fi', 'fj', 'fk', 'fl', 'fm', 'fn', 'fo', 'fp', 'fq', 'fr', 'fs', 'ft', 'fu', 'fv', 'fw', 'fx', 'fy', 'fz', 'ga', 'gb', 'gc', 'gd', 'ge', 'gf', 'gg', 'gh', 'gi', 'gj', 'gk', 'gl', 'gm', 'gn', 'go', 'gp', 'gq', 'gr', 'gs', 'gt', 'gu', 'gv', 'gw', 'gx', 'gy', 'gz', 'ha', 'hb', 'hc', 'hd', 'he', 'hf', 'hg', 'hh', 'hi', 'hj', 'hk', 'hl', 'hm', 'hn', 'ho', 'hp', 'hq', 'hr', 'hs', 'ht', 'hu', 'hv', 'hw', 'hx', 'hy', 'hz', 'ia', 'ib', 'ic', 'id', 'ie', 'if', 'ig', 'ih', 'ii', 'ij', 'ik', 'il', 'im', 'in', 'io', 'ip', 'iq', 'ir', 'is', 'it', 'iu', 'iv', 'iw', 'ix', 'iy', 'iz', 'ja', 'jb', 'jc', 'jd', 'je', 'jf', 'jg', 'jh', 'ji', 'jj', 'jk', 'jl', 'jm', 'jn', 'jo', 'jp', 'jq', 'jr', 'js', 'jt', 'ju', 'jv', 'jw', 'jx', 'jy', 'jz', 'ka', 'kb', 'kc', 'kd', 'ke', 'kf', 'kg', 'kh', 'ki', 'kj', 'kk', 'kl', 'km', 'kn', 'ko', 'kp', 'kq', 'kr', 'ks', 'kt', 'ku', 'kv', 'kw', 'kx', 'ky', 'kz', 'la', 'lb', 'lc', 'ld', 'le', 'lf', 'lg', 'lh', 'li', 'lj', 'lk', 'll', 'lm', 'ln', 'lo', 'lp', 'lq', 'lr', 'ls', 'lt', 'lu', 'lv', 'lw', 'lx', 'ly', 'lz', 'ma', 'mb', 'mc', 'md', 'me', 'mf', 'mg', 'mh', 'mi', 'mj', 'mk', 'ml', 'mm', 'mn', 'mo', 'mp', 'mq', 'mr', 'ms', 'mt', 'mu', 'mv', 'mw', 'mx', 'my', 'mz', 'na', 'nb', 'nc', 'nd', 'ne', 'nf', 'ng', 'nh', 'ni', 'nj', 'nk', 'nl', 'nm', 'nn', 'no', 'np', 'nq', 'nr', 'ns', 'nt', 'nu', 'nv', 'nw', 'nx', 'ny', 'nz', 'oa', 'ob', 'oc', 'od', 'oe', 'of', 'og', 'oh', 'oi', 'oj', 'ok', 'ol', 'om', 'on', 'oo', 'op', 'oq', 'or', 'os', 'ot', 'ou', 'ov', 'ow', 'ox', 'oy', 'oz', 'pa', 'pb', 'pc', 'pd', 'pe', 'pf', 'pg', 'ph', 'pi', 'pj', 'pk', 'pl', 'pm', 'pn', 'po', 'pp', 'pq', 'pr', 'ps', 'pt', 'pu', 'pv', 'pw', 'px', 'py', 'pz', 'qa', 'qb', 'qc', 'qd', 'qe', 'qf', 'qg', 'qh', 'qi', 'qj', 'qk', 'ql', 'qm', 'qn', 'qo', 'qp', 'qq', 'qr', 'qs', 'qt', 'qu', 'qv', 'qw', 'qx', 'qy', 'qz', 'ra', 'rb', 'rc', 'rd', 're', 'rf', 'rg', 'rh', 'ri', 'rj', 'rk', 'rl', 'rm', 'rn', 'ro', 'rp', 'rq', 'rr', 'rs', 'rt', 'ru', 'rv', 'rw', 'rx', 'ry', 'rz', 'sa', 'sb', 'sc', 'sd', 'se', 'sf', 'sg', 'sh', 'si', 'sj', 'sk', 'sl', 'sm', 'sn', 'so', 'sp', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'sx', 'sy', 'sz', 'ta', 'tb', 'tc', 'td', 'te', 'tf', 'tg', 'th', 'ti', 'tj', 'tk', 'tl', 'tm', 'tn', 'to', 'tp', 'tq', 'tr', 'ts', 'tt', 'tu', 'tv', 'tw', 'tx', 'ty', 'tz', 'ua', 'ub', 'uc', 'ud', 'ue', 'uf', 'ug', 'uh', 'ui', 'uj', 'uk', 'ul', 'um', 'un', 'uo', 'up', 'uq', 'ur', 'us', 'ut', 'uu', 'uv', 'uw', 'ux', 'uy', 'uz', 'va', 'vb', 'vc', 'vd', 've', 'vf', 'vg', 'vh', 'vi', 'vj', 'vk', 'vl', 'vm', 'vn', 'vo', 'vp', 'vq', 'vr', 'vs', 'vt', 'vu', 'vv', 'vw', 'vx', 'vy', 'vz', 'wa', 'wb', 'wc', 'wd', 'we', 'wf', 'wg', 'wh', 'wi', 'wj', 'wk', 'wl', 'wm', 'wn', 'wo', 'wp', 'wq', 'wr', 'ws', 'wt', 'wu', 'wv', 'ww', 'wx', 'wy', 'wz', 'xa', 'xb', 'xc', 'xd', 'xe', 'xf', 'xg', 'xh', 'xi', 'xj', 'xk', 'xl', 'xm', 'xn', 'xo', 'xp', 'xq', 'xr', 'xs', 'xt', 'xu', 'xv', 'xw', 'xx', 'xy', 'xz', 'ya', 'yb', 'yc', 'yd', 'ye', 'yf', 'yg', 'yh', 'yi', 'yj', 'yk', 'yl', 'ym', 'yn', 'yo', 'yp', 'yq', 'yr', 'ys', 'yt', 'yu', 'yv', 'yw', 'yx', 'yy', 'yz', 'za', 'zb', 'zc', 'zd', 'ze', 'zf', 'zg', 'zh', 'zi', 'zj', 'zk', 'zl', 'zm', 'zn', 'zo', 'zp', 'zq', 'zr', 'zs', 'zt', 'zu', 'zv', 'zw', 'zx', 'zy', 'zz']"
      },
      {
        "input": "expression = \"{x{y,z},a{b{c,d{e,f}},g{h,i{}}},j{k{l,m{n{o,p},q{r,s}}},x{y,z}}{a{b,c},d{e,f}}}\"",
        "output": "['abc,jklababc', 'abc,jklabjklab', 'abc,jklacabc', 'abc,jklacjklac', 'abc,jkldeabc', 'abc,jkldejklde', 'abc,jkldfabc', 'abc,jkldfjkldf', 'abc,jkmnoababc', 'abc,jkmnoabjkmnoab', 'abc,jkmnoacabc', 'abc,jkmnoacjkmnoac', 'abc,jkmnodeabc', 'abc,jkmnodejkmnode', 'abc,jkmnodfabc', 'abc,jkmnodfjkmnodf', 'abc,jkmnpababc', 'abc,jkmnpabjkmnpab', 'abc,jkmnpacabc', 'abc,jkmnpacjkmnpac', 'abc,jkmnpdeabc', 'abc,jkmnpdejkmnpde', 'abc,jkmnpdfabc', 'abc,jkmnpdfjkmnpdf', 'abc,jkmqrababc', 'abc,jkmqrabjkmqrab', 'abc,jkmqracabc', 'abc,jkmqracjkmqrac', 'abc,jkmqrdeabc', 'abc,jkmqrdejkmqrde', 'abc,jkmqrdfabc', 'abc,jkmqrdfjkmqrdf', 'abc,jkmqsababc', 'abc,jkmqsabjkmqsab', 'abc,jkmqsacabc', 'abc,jkmqsacjkmqsac', 'abc,jkmqsdeabc', 'abc,jkmqsdejkmqsde', 'abc,jkmqsdfabc', 'abc,jkmqsdfjkmqsdf', 'abc,jxyababc', 'abc,jxyabjxyab', 'abc,jxyacabc', 'abc,jxyacjxyac', 'abc,jxydeabc', 'abc,jxydejxyde', 'abc,jxydfabc', 'abc,jxydfjxydf', 'abc,jxzababc', 'abc,jxzabjxzab', 'abc,jxzacabc', 'abc,jxzacjxzac', 'abc,jxzdeabc', 'abc,jxzdejxzde', 'abc,jxzdfabc', 'abc,jxzdfjxzdf', 'abde,jklababde', 'abde,jklabjklab', 'abde,jklacabde', 'abde,jklacjklac', 'abde,jkldeabde', 'abde,jkldejklde', 'abde,jkldfabde', 'abde,jkldfjkldf', 'abde,jkmnoababde', 'abde,jkmnoabjkmnoab', 'abde,jkmnoacabde', 'abde,jkmnoacjkmnoac', 'abde,jkmnodeabde', 'abde,jkmnodejkmnode', 'abde,jkmnodfabde', 'abde,jkmnodfjkmnodf', 'abde,jkmnpababde', 'abde,jkmnpabjkmnpab', 'abde,jkmnpacabde', 'abde,jkmnpacjkmnpac', 'abde,jkmnpdeabde', 'abde,jkmnpdejkmnpde', 'abde,jkmnpdfabde', 'abde,jkmnpdfjkmnpdf', 'abde,jkmqrababde', 'abde,jkmqrabjkmqrab', 'abde,jkmqracabde', 'abde,jkmqracjkmqrac', 'abde,jkmqrdeabde', 'abde,jkmqrdejkmqrde', 'abde,jkmqrdfabde', 'abde,jkmqrdfjkmqrdf', 'abde,jkmqsababde', 'abde,jkmqsabjkmqsab', 'abde,jkmqsacabde', 'abde,jkmqsacjkmqsac', 'abde,jkmqsdeabde', 'abde,jkmqsdejkmqsde', 'abde,jkmqsdfabde', 'abde,jkmqsdfjkmqsdf', 'abde,jxyababde', 'abde,jxyabjxyab', 'abde,jxyacabde', 'abde,jxyacjxyac', 'abde,jxydeabde', 'abde,jxydejxyde', 'abde,jxydfabde', 'abde,jxydfjxydf', 'abde,jxzababde', 'abde,jxzabjxzab', 'abde,jxzacabde', 'abde,jxzacjxzac', 'abde,jxzdeabde', 'abde,jxzdejxzde', 'abde,jxzdfabde', 'abde,jxzdfjxzdf', 'abdf,jklababdf', 'abdf,jklabjklab', 'abdf,jklacabdf', 'abdf,jklacjklac', 'abdf,jkldeabdf', 'abdf,jkldejklde', 'abdf,jkldfabdf', 'abdf,jkldfjkldf', 'abdf,jkmnoababdf', 'abdf,jkmnoabjkmnoab', 'abdf,jkmnoacabdf', 'abdf,jkmnoacjkmnoac', 'abdf,jkmnodeabdf', 'abdf,jkmnodejkmnode', 'abdf,jkmnodfabdf', 'abdf,jkmnodfjkmnodf', 'abdf,jkmnpababdf', 'abdf,jkmnpabjkmnpab', 'abdf,jkmnpacabdf', 'abdf,jkmnpacjkmnpac', 'abdf,jkmnpdeabdf', 'abdf,jkmnpdejkmnpde', 'abdf,jkmnpdfabdf', 'abdf,jkmnpdfjkmnpdf', 'abdf,jkmqrababdf', 'abdf,jkmqrabjkmqrab', 'abdf,jkmqracabdf', 'abdf,jkmqracjkmqrac', 'abdf,jkmqrdeabdf', 'abdf,jkmqrdejkmqrde', 'abdf,jkmqrdfabdf', 'abdf,jkmqrdfjkmqrdf', 'abdf,jkmqsababdf', 'abdf,jkmqsabjkmqsab', 'abdf,jkmqsacabdf', 'abdf,jkmqsacjkmqsac', 'abdf,jkmqsdeabdf', 'abdf,jkmqsdejkmqsde', 'abdf,jkmqsdfabdf', 'abdf,jkmqsdfjkmqsdf', 'abdf,jxyababdf', 'abdf,jxyabjxyab', 'abdf,jxyacabdf', 'abdf,jxyacjxyac', 'abdf,jxydeabdf', 'abdf,jxydejxyde', 'abdf,jxydfabdf', 'abdf,jxydfjxydf', 'abdf,jxzababdf', 'abdf,jxzabjxzab', 'abdf,jxzacabdf', 'abdf,jxzacjxzac', 'abdf,jxzdeabdf', 'abdf,jxzdejxzde', 'abdf,jxzdfabdf', 'abdf,jxzdfjxzdf', 'agh,jklabagh', 'agh,jklabjklab', 'agh,jklacagh', 'agh,jklacjklac', 'agh,jkldeagh', 'agh,jkldejklde', 'agh,jkldfagh', 'agh,jkldfjkldf', 'agh,jkmnoabagh', 'agh,jkmnoabjkmnoab', 'agh,jkmnoacagh', 'agh,jkmnoacjkmnoac', 'agh,jkmnodeagh', 'agh,jkmnodejkmnode', 'agh,jkmnodfagh', 'agh,jkmnodfjkmnodf', 'agh,jkmnpabagh', 'agh,jkmnpabjkmnpab', 'agh,jkmnpacagh', 'agh,jkmnpacjkmnpac', 'agh,jkmnpdeagh', 'agh,jkmnpdejkmnpde', 'agh,jkmnpdfagh', 'agh,jkmnpdfjkmnpdf', 'agh,jkmqrabagh', 'agh,jkmqrabjkmqrab', 'agh,jkmqracagh', 'agh,jkmqracjkmqrac', 'agh,jkmqrdeagh', 'agh,jkmqrdejkmqrde', 'agh,jkmqrdfagh', 'agh,jkmqrdfjkmqrdf', 'agh,jkmqsabagh', 'agh,jkmqsabjkmqsab', 'agh,jkmqsacagh', 'agh,jkmqsacjkmqsac', 'agh,jkmqsdeagh', 'agh,jkmqsdejkmqsde', 'agh,jkmqsdfagh', 'agh,jkmqsdfjkmqsdf', 'agh,jxyabagh', 'agh,jxyabjxyab', 'agh,jxyacagh', 'agh,jxyacjxyac', 'agh,jxydeagh', 'agh,jxydejxyde', 'agh,jxydfagh', 'agh,jxydfjxydf', 'agh,jxzabagh', 'agh,jxzabjxzab', 'agh,jxzacagh', 'agh,jxzacjxzac', 'agh,jxzdeagh', 'agh,jxzdejxzde', 'agh,jxzdfagh', 'agh,jxzdfjxzdf', 'agi', 'agijklab', 'agijklac', 'agijklde', 'agijkldf', 'agijkmnoab', 'agijkmnoac', 'agijkmnode', 'agijkmnodf', 'agijkmnpab', 'agijkmnpac', 'agijkmnpde', 'agijkmnpdf', 'agijkmqrab', 'agijkmqrac', 'agijkmqrde', 'agijkmqrdf', 'agijkmqsab', 'agijkmqsac', 'agijkmqsde', 'agijkmqsdf', 'agijxyab', 'agijxyac', 'agijxyde', 'agijxydf', 'agijxzab', 'agijxzac', 'agijxzde', 'agijxzdf', 'xy,jklabjklab', 'xy,jklabxy', 'xy,jklacjklac', 'xy,jklacxy', 'xy,jkldejklde', 'xy,jkldexy', 'xy,jkldfjkldf', 'xy,jkldfxy', 'xy,jkmnoabjkmnoab', 'xy,jkmnoabxy', 'xy,jkmnoacjkmnoac', 'xy,jkmnoacxy', 'xy,jkmnodejkmnode', 'xy,jkmnodexy', 'xy,jkmnodfjkmnodf', 'xy,jkmnodfxy', 'xy,jkmnpabjkmnpab', 'xy,jkmnpabxy', 'xy,jkmnpacjkmnpac', 'xy,jkmnpacxy', 'xy,jkmnpdejkmnpde', 'xy,jkmnpdexy', 'xy,jkmnpdfjkmnpdf', 'xy,jkmnpdfxy', 'xy,jkmqrabjkmqrab', 'xy,jkmqrabxy', 'xy,jkmqracjkmqrac', 'xy,jkmqracxy', 'xy,jkmqrdejkmqrde', 'xy,jkmqrdexy', 'xy,jkmqrdfjkmqrdf', 'xy,jkmqrdfxy', 'xy,jkmqsabjkmqsab', 'xy,jkmqsabxy', 'xy,jkmqsacjkmqsac', 'xy,jkmqsacxy', 'xy,jkmqsdejkmqsde', 'xy,jkmqsdexy', 'xy,jkmqsdfjkmqsdf', 'xy,jkmqsdfxy', 'xy,jxyabjxyab', 'xy,jxyabxy', 'xy,jxyacjxyac', 'xy,jxyacxy', 'xy,jxydejxyde', 'xy,jxydexy', 'xy,jxydfjxydf', 'xy,jxydfxy', 'xy,jxzabjxzab', 'xy,jxzabxy', 'xy,jxzacjxzac', 'xy,jxzacxy', 'xy,jxzdejxzde', 'xy,jxzdexy', 'xy,jxzdfjxzdf', 'xy,jxzdfxy', 'xz,jklabjklab', 'xz,jklabxz', 'xz,jklacjklac', 'xz,jklacxz', 'xz,jkldejklde', 'xz,jkldexz', 'xz,jkldfjkldf', 'xz,jkldfxz', 'xz,jkmnoabjkmnoab', 'xz,jkmnoabxz', 'xz,jkmnoacjkmnoac', 'xz,jkmnoacxz', 'xz,jkmnodejkmnode', 'xz,jkmnodexz', 'xz,jkmnodfjkmnodf', 'xz,jkmnodfxz', 'xz,jkmnpabjkmnpab', 'xz,jkmnpabxz', 'xz,jkmnpacjkmnpac', 'xz,jkmnpacxz', 'xz,jkmnpdejkmnpde', 'xz,jkmnpdexz', 'xz,jkmnpdfjkmnpdf', 'xz,jkmnpdfxz', 'xz,jkmqrabjkmqrab', 'xz,jkmqrabxz', 'xz,jkmqracjkmqrac', 'xz,jkmqracxz', 'xz,jkmqrdejkmqrde', 'xz,jkmqrdexz', 'xz,jkmqrdfjkmqrdf', 'xz,jkmqrdfxz', 'xz,jkmqsabjkmqsab', 'xz,jkmqsabxz', 'xz,jkmqsacjkmqsac', 'xz,jkmqsacxz', 'xz,jkmqsdejkmqsde', 'xz,jkmqsdexz', 'xz,jkmqsdfjkmqsdf', 'xz,jkmqsdfxz', 'xz,jxyabjxyab', 'xz,jxyabxz', 'xz,jxyacjxyac', 'xz,jxyacxz', 'xz,jxydejxyde', 'xz,jxydexz', 'xz,jxydfjxydf', 'xz,jxydfxz', 'xz,jxzabjxzab', 'xz,jxzabxz', 'xz,jxzacjxzac', 'xz,jxzacxz', 'xz,jxzdejxzde', 'xz,jxzdexz', 'xz,jxzdfjxzdf', 'xz,jxzdfxz']"
      },
      {
        "input": "expression = \"{{a,b},{c,d}}{e,f}{g,h}\"",
        "output": "['aeg', 'aeh', 'afg', 'afh', 'beg', 'beh', 'bfg', 'bfh', 'ceg', 'ceh', 'cfg', 'cfh', 'deg', 'deh', 'dfg', 'dfh']"
      },
      {
        "input": "expression = \"{a,b}c{d,e}{f,g}\"",
        "output": "['acdf', 'acdg', 'acef', 'aceg', 'bcdf', 'bcdg', 'bcef', 'bceg']"
      },
      {
        "input": "expression = \"{a,b{c{d,e}}}{f,g{h,i}}{j,k{m,n}}\"",
        "output": "['afj', 'afkm', 'afkn', 'aghj', 'aghkm', 'aghkn', 'agij', 'agikm', 'agikn', 'bcdfj', 'bcdfkm', 'bcdfkn', 'bcdghj', 'bcdghkm', 'bcdghkn', 'bcdgij', 'bcdgikm', 'bcdgikn', 'bcefj', 'bcefkm', 'bcefkn', 'bceghj', 'bceghkm', 'bceghkn', 'bcegij', 'bcegikm', 'bcegikn']"
      },
      {
        "input": "expression = \"{a,{b,{c,{d,{e,{f,g}}}}}}\"",
        "output": "['a', 'b', 'c', 'd', 'e', 'f', 'g']"
      },
      {
        "input": "expression = \"{a{b,c},{d,e}f}\"",
        "output": "['ab', 'ac', 'df', 'ef']"
      }
    ]
  },
  {
    "id": 358,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Hash Table",
      "String",
      "Counting",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "Given a string s and an integer k, rearrange s such that the same characters are at least distance k from each other. If it is not possible to rearrange the string, return an empty string \"\".\n\u00a0\nExample 1:\n\nInput: s = \"aabbcc\", k = 3\nOutput: \"abcabc\"\nExplanation: The same letters are at least a distance of 3 from each other.\n\nExample 2:\n\nInput: s = \"aaabc\", k = 3\nOutput: \"\"\nExplanation: It is not possible to rearrange the string.\n\nExample 3:\n\nInput: s = \"aaadbbcc\", k = 2\nOutput: \"abacabcd\"\nExplanation: The same letters are at least a distance of 2 from each other.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 3 * 105\ns consists of only lowercase English letters.\n0 <= k <= s.length\n\n",
    "starterCode": "class Solution:\n    def rearrangeString(self, s: str, k: int) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"aaabc\", k = 3",
        "output": ""
      },
      {
        "input": "s = \"\", k = 5",
        "output": ""
      },
      {
        "input": "s = \"zzz\", k = 2",
        "output": ""
      },
      {
        "input": "s = \"aabbcc\", k = 3",
        "output": "abcabc"
      },
      {
        "input": "s = \"\", k = 0",
        "output": ""
      },
      {
        "input": "s = \"aaa\", k = 2",
        "output": ""
      },
      {
        "input": "s = \"aab\", k = 2",
        "output": "aba"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijj\", k = 5",
        "output": "abcdefghijabcdefghij"
      },
      {
        "input": "s = \"\", k = 1",
        "output": ""
      },
      {
        "input": "s = \"aabb\", k = 3",
        "output": ""
      },
      {
        "input": "s = \"abacabad\", k = 1",
        "output": "aaababcd"
      },
      {
        "input": "s = \"aaadbbcc\", k = 2",
        "output": "abacabcd"
      },
      {
        "input": "s = \"aaabbb\", k = 2",
        "output": "ababab"
      },
      {
        "input": "s = \"aa\", k = 0",
        "output": "aa"
      },
      {
        "input": "s = \"\", k = 3",
        "output": ""
      },
      {
        "input": "s = \"xyz\", k = 1",
        "output": "xyz"
      },
      {
        "input": "s = \"abc\", k = 3",
        "output": "abc"
      },
      {
        "input": "s = \"a\", k = 0",
        "output": "a"
      },
      {
        "input": "s = \"aabbccddeeff\", k = 2",
        "output": "abcdefabcdef"
      },
      {
        "input": "s = \"abcabcabc\", k = 3",
        "output": "abcabcabc"
      },
      {
        "input": "s = \"ababab\", k = 2",
        "output": "ababab"
      },
      {
        "input": "s = \"abacabad\", k = 3",
        "output": ""
      },
      {
        "input": "s = \"a\", k = 1",
        "output": "a"
      },
      {
        "input": "s = \"aabb\", k = 2",
        "output": "abab"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccccc\", k = 26",
        "output": ""
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 1000",
        "output": ""
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\", k = 5",
        "output": ""
      },
      {
        "input": "s = \"aaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 5",
        "output": "abcdeafghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"zzzxxxyyy\", k = 3",
        "output": "xyzxyzxyz"
      },
      {
        "input": "s = \"mississippi\", k = 4",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", k = 2",
        "output": "abcdefghiabcdefghi"
      },
      {
        "input": "s = \"mmmpqrstuuvw\", k = 4",
        "output": "mupqmrstmuvw"
      },
      {
        "input": "s = \"aabbaaabbbaaa\", k = 2",
        "output": ""
      },
      {
        "input": "s = \"aabaaaabaaabaaab\", k = 4",
        "output": ""
      },
      {
        "input": "s = \"aabbbccddeeefff\", k = 4",
        "output": "befabcdefabcdef"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 1",
        "output": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\", k = 3",
        "output": "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"
      },
      {
        "input": "s = \"aaaabbbbcccc\", k = 4",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", k = 20",
        "output": ""
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbcccccccc\", k = 4",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeffgghh\", k = 2",
        "output": "abcdefghabcdefgh"
      },
      {
        "input": "s = \"aabbbccddeeefff\", k = 2",
        "output": "befabcdefabcdef"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiii\", k = 4",
        "output": "abcdefghiabcdefghiabcdefghiabcdefghi"
      },
      {
        "input": "s = \"mnomnoomnomno\", k = 4",
        "output": ""
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbccccccccdddddddddeeeeeeeeee\", k = 6",
        "output": ""
      },
      {
        "input": "s = \"abcdefghijklmnop\", k = 1",
        "output": "abcdefghijklmnop"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\", k = 3",
        "output": "abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 25",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 50",
        "output": ""
      },
      {
        "input": "s = \"zzzzzxyy\", k = 3",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeeffggghhiiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 25",
        "output": "egiabcdfhjklmnopqrstuvwxyegizabcdfhjklmnopqrstuvwxegiyz"
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", k = 1",
        "output": "abcdefghiabcdefghi"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbccccccccdddddddd\", k = 9",
        "output": ""
      },
      {
        "input": "s = \"aaaabbbbcccc\", k = 2",
        "output": "abcabcabcabc"
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", k = 18",
        "output": ""
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 26",
        "output": ""
      },
      {
        "input": "s = \"zzzzzyyyxxww\", k = 3",
        "output": ""
      },
      {
        "input": "s = \"aaabbbcccddd\", k = 2",
        "output": "abcdabcdabcd"
      },
      {
        "input": "s = \"aaabbbcccddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuuvvvwwwxxxyyyzzz\", k = 10",
        "output": "uabcefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abcabcabcabc\", k = 2",
        "output": "abcabcabcabc"
      },
      {
        "input": "s = \"aabbbcc\", k = 0",
        "output": "babcabc"
      },
      {
        "input": "s = \"aabbbccddeeefff\", k = 8",
        "output": ""
      },
      {
        "input": "s = \"aaaabbbbccccdddd\", k = 1",
        "output": "abcdabcdabcdabcd"
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", k = 100",
        "output": ""
      },
      {
        "input": "s = \"aaaabbbbccccdddd\", k = 4",
        "output": "abcdabcdabcdabcd"
      },
      {
        "input": "s = \"aabbbccddeeefff\", k = 7",
        "output": ""
      },
      {
        "input": "s = \"abcdefghiabcdefghiabcdefghi\", k = 9",
        "output": "abcdefghiabcdefghiabcdefghi"
      },
      {
        "input": "s = \"aabbaa\", k = 2",
        "output": ""
      },
      {
        "input": "s = \"abcdefghijklmnop\", k = 0",
        "output": "abcdefghijklmnop"
      },
      {
        "input": "s = \"llllvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\", k = 3",
        "output": ""
      },
      {
        "input": "s = \"zzzzzyyyyxxwwvvuu\", k = 4",
        "output": "zyuvzywxzyuvzwxyz"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyz\", k = 3",
        "output": "xyzxyzxyzxyzxyzxyzxyzxyz"
      },
      {
        "input": "s = \"aabbaabbaabbaabb\", k = 2",
        "output": "abababababababab"
      },
      {
        "input": "s = \"mmmmmnnnnnpppppqeeeeerrttttyyyyy\", k = 5",
        "output": "emnpyemnptyemnptyemnprtyemnpqrty"
      },
      {
        "input": "s = \"ppppppppppqqqqqqqqqqrrrrrrrrrr\", k = 15",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", k = 9",
        "output": "abcdefghiabcdefghi"
      },
      {
        "input": "s = \"mnopqrstuvwxyzmnopqrstuvwxyz\", k = 27",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", k = 5",
        "output": "abcdefghiabcdefghi"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\", k = 4",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", k = 0",
        "output": "abcdefghiabcdefghi"
      },
      {
        "input": "s = \"ppppqqqrrrssstttuuuvvvwwxxyyzzz\", k = 5",
        "output": "pqrstpuvzqprstuvwxyzpqrstuvwxyz"
      },
      {
        "input": "s = \"abacabadabacabad\", k = 3",
        "output": ""
      },
      {
        "input": "s = \"aabbbccccddddeeeeffffgggghhhhiiii\", k = 1",
        "output": "cdefghibcdefghiabcdefghiabcdefghi"
      },
      {
        "input": "s = \"zzzzzzzzyyyyxxww\", k = 4",
        "output": ""
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 0",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 3",
        "output": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aabbbcccdde\", k = 3",
        "output": "bcabcdabcde"
      },
      {
        "input": "s = \"aaabbbcccddeeffggghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 10",
        "output": "abcgdefhijabcgklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\", k = 2",
        "output": "xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy"
      },
      {
        "input": "s = \"abacabad\", k = 0",
        "output": "aaababcd"
      },
      {
        "input": "s = \"abababababab\", k = 1",
        "output": "abababababab"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzaa\", k = 5",
        "output": "abcdeafghiajklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aabbbccddeeefffggghhhiiiijjjkkklllmmmnnooppqqrrssttuuvvwwxxyyzz\", k = 7",
        "output": "ibefghjiklmabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 26",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aabbcceeddffeegghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 10",
        "output": "eabcdfghijeklmnopqrsetuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 0",
        "output": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"mnopqr\", k = 1",
        "output": "mnopqr"
      },
      {
        "input": "s = \"aabbbccddeeefff\", k = 3",
        "output": "befabcdefabcdef"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 2",
        "output": ""
      },
      {
        "input": "s = \"aabbbccddeeefff\", k = 6",
        "output": "befacdbefacdbef"
      },
      {
        "input": "s = \"aabbbccddeeefff\", k = 5",
        "output": "befacbdefabcdef"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 2",
        "output": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 15",
        "output": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbccccccccdddddddeeeeeeeee\", k = 10",
        "output": ""
      }
    ]
  },
  {
    "id": 1782,
    "difficulty": "Hard",
    "tags": [
      "Graph",
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "You are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. You are also given an integer array queries.\nLet incident(a, b) be defined as the number of edges that are connected to either node a or b.\nThe answer to the jth query is the number of pairs of nodes (a, b) that satisfy both of the following conditions:\n\na < b\nincident(a, b) > queries[j]\n\nReturn an array answers such that answers.length == queries.length and answers[j] is the answer of the jth query.\nNote that there can be multiple edges between the same two nodes.\n\u00a0\nExample 1:\n\n\nInput: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]\nOutput: [6,5]\nExplanation: The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.\n\nExample 2:\n\nInput: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]\nOutput: [10,10,9,8,6]\n\n\u00a0\nConstraints:\n\n2 <= n <= 2 * 104\n1 <= edges.length <= 105\n1 <= ui, vi <= n\nui != vi\n1 <= queries.length <= 20\n0 <= queries[j] < edges.length\n\n",
    "starterCode": "class Solution:\n    def countPairs(self, n: int, edges: List[List[int]], queries: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]",
        "output": "[6, 5]"
      },
      {
        "input": "n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]",
        "output": "[10, 10, 9, 8, 6]"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[2,5],[3,4],[3,5],[3,6],[4,5],[4,6],[4,7],[5,6],[5,7],[5,8],[6,7],[6,8],[6,9],[7,8],[7,9],[7,10],[8,9],[8,10],[9,10]], queries = [5,10,15]",
        "output": "[45, 8, 0]"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20]], queries = [3,4,5,6]",
        "output": "[190, 187, 183, 148]"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[6,7],[6,8],[6,9],[7,8],[7,9],[8,9],[10,11],[10,12],[10,13],[11,12],[11,13],[12,13],[1,6],[2,7],[3,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15]], queries = [7,8,9,10,11]",
        "output": "[75, 69, 24, 0, 0]"
      },
      {
        "input": "n = 25, edges = [[i, (i % 25) + 1] for i in range(1, 26)] + [[i, i + 1] for i in range(1, 24)], queries = [2,4,6,8,10]",
        "output": "Error: Solution.countPairs() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1]], queries = [3,5,7,9]",
        "output": "[41, 33, 1, 0]"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[5,6],[5,7],[5,8],[6,7],[6,8],[7,8],[9,10]], queries = [5,6,7]",
        "output": "[16, 0, 0]"
      },
      {
        "input": "n = 10, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10]], queries = [1,5,9]",
        "output": "[45, 0, 0]"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[2,3],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6],[4,5],[4,6],[5,6],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,7]], queries = [3,8,13]",
        "output": "[176, 15, 0]"
      },
      {
        "input": "n = 100, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,1],[10,2],[2,5],[3,6],[4,7],[5,8],[6,9],[7,10],[8,1],[9,2],[10,3],[1,4],[2,6],[3,7],[4,8],[5,9],[6,10],[7,1],[8,2],[9,3],[10,4]], queries = [0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[945, 945, 945, 945, 945, 945, 945, 765, 45, 45, 45]"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15],[1,16],[1,17],[1,18],[1,19],[1,20],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,9],[2,10],[2,11],[2,12],[2,13],[2,14],[2,15],[2,16],[2,17],[2,18],[2,19],[2,20],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[4,5],[4,6],[4,7],[4,8],[4,9],[4,10],[4,11],[4,12],[4,13],[4,14],[4,15],[4,16],[4,17],[4,18],[4,19],[4,20],[5,6],[5,7],[5,8],[5,9],[5,10],[5,11],[5,12],[5,13],[5,14],[5,15],[5,16],[5,17],[5,18],[5,19],[5,20]], queries = [5,15,25,35,45]",
        "output": "[190, 85, 10, 10, 0]"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,1],[1,8],[2,9],[3,10],[4,11],[5,12],[6,13],[7,14],[8,15]], queries = [10,12,14]",
        "output": "[12, 0, 0]"
      },
      {
        "input": "n = 30, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22],[21,23],[22,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,1],[30,2]], queries = [15,20,25,30,35]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "n = 25, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[1,25],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22],[21,23],[22,24],[23,25]], queries = [4,9,14]",
        "output": "[300, 0, 0]"
      },
      {
        "input": "n = 25, edges = [[1,2],[1,3],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7],[6,8],[6,9],[7,8],[7,9],[8,9],[8,10],[8,11],[9,10],[9,11],[10,11],[10,12],[10,13],[11,12],[11,13],[12,13],[12,14],[12,15],[13,14],[13,15],[14,15],[14,16],[15,16],[15,17],[16,17],[16,18],[17,18],[17,19],[18,19],[19,20],[19,21],[20,21],[20,22],[20,23],[21,22],[21,23],[22,23],[22,24],[22,25],[23,24],[23,25],[24,25]], queries = [6,12,18,24]",
        "output": "[283, 0, 0, 0]"
      },
      {
        "input": "n = 10, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10],[2,5],[3,7],[4,8],[5,9],[6,10]], queries = [4,5,6,7,8]",
        "output": "[43, 28, 4, 0, 0]"
      },
      {
        "input": "n = 30, edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15],[1,16],[1,17],[1,18],[1,19],[1,20],[1,21],[1,22],[1,23],[1,24],[1,25],[1,26],[1,27],[1,28],[1,29],[1,30],[2,30],[3,29],[4,28],[5,27],[6,26],[7,25],[8,24],[9,23],[10,22],[11,21],[12,20],[13,19],[14,18],[15,17],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16]], queries = [20,25,30,35,40,45]",
        "output": "[29, 29, 14, 0, 0, 0]"
      },
      {
        "input": "n = 100, edges = [[i, i+1] for i in range(1, 100)] + [[i, i+2] for i in range(1, 99)] + [[i, i+3] for i in range(1, 98)], queries = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "Error: Solution.countPairs() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 30, edges = [[i, j] for i in range(1, 30) for j in range(i+1, 31)], queries = [15,20,25,30,35]",
        "output": "Error: Solution.countPairs() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 30, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[1,30],[2,29],[3,28],[4,27],[5,26],[6,25],[7,24],[8,23],[9,22],[10,21],[11,20],[12,19],[13,18],[14,17],[15,16]], queries = [0,5,10,15,20,25,30]",
        "output": "[435, 338, 0, 0, 0, 0, 0]"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7],[6,8],[6,9],[7,8],[7,9],[8,9],[8,10],[8,11],[9,10],[9,11],[10,11],[10,12],[10,13],[11,12],[11,13],[12,13],[13,14],[13,15],[14,15],[14,16],[15,16],[15,17],[16,17],[16,18],[17,18],[17,19],[18,19],[19,20],[20,1]], queries = [5,10,15,20]",
        "output": "[184, 0, 0, 0]"
      },
      {
        "input": "n = 50, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22],[21,23],[22,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30],[29,31],[30,32],[31,33],[32,34],[33,35],[34,36],[35,37],[36,38],[37,39],[38,40],[39,41],[40,42],[41,43],[42,44],[43,45],[44,46],[45,47],[46,48],[47,49],[48,50]], queries = [10,20,30,40,50]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "n = 12, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,1],[12,2]], queries = [3, 4, 5, 6, 7]",
        "output": "[66, 66, 66, 66, 42]"
      },
      {
        "input": "n = 25, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22],[21,23],[22,24],[23,25],[24,1],[25,2],[1,4],[2,5],[3,6],[4,7],[5,8],[6,9],[7,10],[8,11],[9,12],[10,13],[11,14],[12,15],[13,16],[14,17],[15,18],[16,19],[17,20],[18,21],[19,22],[20,23],[21,24],[22,25],[23,1],[24,2],[25,3]], queries = [10,15,20,25,30]",
        "output": "[300, 0, 0, 0, 0]"
      },
      {
        "input": "n = 30, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,1],[1,13],[2,14],[3,15],[4,16],[5,17],[6,18],[7,19],[8,20],[9,21],[10,22],[11,23],[12,24],[13,25],[14,26],[15,27],[16,28],[17,29],[18,30],[19,1],[20,2],[21,3],[22,4],[23,5],[24,6],[25,7],[26,8],[27,9],[28,10],[29,11],[30,12]], queries = [20,40,60,80,100]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "n = 15, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,1],[1,8],[2,9],[3,10],[4,11],[5,12],[6,13],[7,14],[8,15],[9,1],[10,2],[11,3],[12,4],[13,5],[14,6],[15,7]], queries = [10,15,20,25]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,2],[1,3],[2,3],[2,3],[2,4],[3,4],[3,5],[4,5],[4,6],[5,6],[5,7],[6,7],[6,8],[7,8],[7,9],[8,9],[8,10],[9,10],[9,11],[10,11],[10,12],[11,12],[11,13],[12,13],[12,14],[13,14],[13,15],[14,15]], queries = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[105, 105, 105, 104, 102, 89, 51, 17, 0, 0]"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]], queries = [3,4,5,6,7,8]",
        "output": "[136, 0, 0, 0, 0, 0]"
      },
      {
        "input": "n = 18, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,1],[18,2]], queries = [5, 10, 15, 20]",
        "output": "[153, 0, 0, 0]"
      },
      {
        "input": "n = 25, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[1,25],[1,24],[2,23],[2,22],[3,21],[3,20],[4,19],[4,18],[5,17],[5,16],[6,15],[6,14],[7,13],[7,12],[8,11],[8,10],[9,9],[10,8],[11,7],[12,6],[13,5],[14,4],[15,3],[16,2],[17,1]], queries = [15,20,25,30,35]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,15],[1,15],[2,15],[3,15],[4,15]], queries = [8,9,10,11]",
        "output": "[6, 0, 0, 0]"
      },
      {
        "input": "n = 100, edges = [[1,2],[1,3],[1,4],[2,3],[2,5],[2,6],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]], queries = [10,20,30,40,50,60,70,80,90,100]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "n = 25, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,1],[1,12],[2,13],[3,14],[4,15],[5,16],[6,17],[7,18],[8,19],[9,20],[10,21],[11,22],[12,23],[13,24],[14,25],[15,1],[16,2],[17,3],[18,4],[19,5],[20,6],[21,7],[22,8],[23,9],[24,10],[25,11]], queries = [15,30,45,60,75]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,1],[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,16],[13,17],[14,18],[15,19],[16,20]], queries = [5,10,15,20,25]",
        "output": "[187, 0, 0, 0, 0]"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[2,5],[3,4],[3,5],[3,6],[4,5],[4,6],[4,7],[5,6],[5,7],[5,8],[6,7],[6,8],[6,9],[7,8],[7,9],[7,10],[8,9],[8,10],[9,10]], queries = [5, 10, 15]",
        "output": "[45, 8, 0]"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[1,5],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], queries = [5,6,7]",
        "output": "[8, 0, 0]"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,1],[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[8,18],[9,19],[10,20]], queries = [10,20,30,40]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[1,20],[2,19],[3,18],[4,17],[5,16],[6,15],[7,14],[8,13],[9,12],[10,11]], queries = [10, 15, 20, 25, 30]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6],[3,7],[4,5],[4,6],[4,7],[4,8],[5,6],[5,7],[5,8],[5,9],[6,7],[6,8],[6,9],[6,10],[7,8],[7,9],[7,10],[7,11],[8,9],[8,10],[8,11],[8,12],[9,10],[9,11],[9,12],[9,13],[10,11],[10,12],[10,13],[10,14],[11,12],[11,13],[11,14],[11,15],[12,13],[12,14],[12,15],[13,14],[13,15],[14,15]], queries = [10,20,30,40]",
        "output": "[91, 0, 0, 0]"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,2],[1,3],[1,4],[2,3],[2,4],[2,5],[3,4],[3,5],[3,6],[4,5],[4,6],[4,7],[5,6],[5,7],[5,8],[6,7],[6,8],[7,8]], queries = [1, 2, 3, 4, 5]",
        "output": "[28, 28, 28, 28, 28]"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[1,20],[2,19],[3,18],[4,17],[5,16],[6,15],[7,14],[8,13],[9,12],[1,12],[2,13],[3,14],[4,15],[5,16],[6,17],[7,18],[8,19],[9,20]], queries = [10,15,20,25]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "n = 30, edges = [[1,2],[1,3],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7],[6,8],[6,9],[7,8],[7,9],[8,9],[8,10],[8,11],[9,10],[9,11],[10,11],[10,12],[10,13],[11,12],[11,13],[12,13],[12,14],[12,15],[13,14],[13,15],[14,15],[14,16],[15,16],[15,17],[16,17],[16,18],[17,18],[17,19],[18,19],[19,20],[19,21],[20,21],[20,22],[20,23],[21,22],[21,23],[22,23],[22,24],[22,25],[23,24],[23,25],[24,25],[24,26],[24,27],[25,26],[25,27],[26,27],[26,28],[26,29],[27,28],[27,29],[28,29],[28,30],[29,30]], queries = [7,14,21,28]",
        "output": "[360, 0, 0, 0]"
      },
      {
        "input": "n = 25, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22],[21,23],[22,24],[23,25],[24,1],[25,2]], queries = [15,20,25,30]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "n = 10, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1],[1,5],[2,6],[3,7],[4,8],[5,9],[6,10]], queries = [5,10,15]",
        "output": "[36, 0, 0]"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,1]], queries = [4,8,12,16]",
        "output": "[76, 1, 0, 0]"
      },
      {
        "input": "n = 30, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22],[21,23],[22,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30]], queries = [5,10,15]",
        "output": "[432, 0, 0]"
      },
      {
        "input": "n = 15, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[1,15]], queries = [2,7,12]",
        "output": "[105, 0, 0]"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,3],[2,5],[2,6],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10]], queries = [5,6,7]",
        "output": "[19, 4, 0]"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[2,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10]], queries = [5,10,15]",
        "output": "[24, 7, 0]"
      },
      {
        "input": "n = 15, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,1],[15,2],[1,4],[2,5],[3,6],[4,7],[5,8],[6,9],[7,10],[8,11],[9,12],[10,13],[11,14],[12,15],[13,1],[14,2],[15,3]], queries = [10,15,20,25,30]",
        "output": "[105, 0, 0, 0, 0]"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[1,20],[2,19],[3,18],[4,17],[5,16],[6,15],[7,14],[8,13],[9,12],[10,11]], queries = [0,5,10,15,20]",
        "output": "[190, 128, 0, 0, 0]"
      },
      {
        "input": "n = 15, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[1,15],[2,14],[3,13],[4,12],[5,11],[6,10],[7,9]], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[105, 105, 104, 98, 50, 0, 0, 0, 0, 0]"
      }
    ]
  },
  {
    "id": 420,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "String",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "A password is considered strong if the below conditions are all met:\n\nIt has at least 6 characters and at most 20 characters.\nIt contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\nIt does not contain three repeating characters in a row (i.e., \"Baaabb0\" is weak, but \"Baaba0\" is strong).\n\nGiven a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\nIn one step, you can:\n\nInsert one character to password,\nDelete one character from password, or\nReplace one character of password with another character.\n\n\u00a0\nExample 1:\nInput: password = \"a\"\nOutput: 5\nExample 2:\nInput: password = \"aA1\"\nOutput: 3\nExample 3:\nInput: password = \"1337C0d3\"\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= password.length <= 50\npassword consists of letters, digits, dot\u00a0'.' or exclamation mark '!'.\n\n",
    "starterCode": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n        ",
    "testCases": [
      {
        "input": "password = \"AAAbbb\"",
        "output": "2"
      },
      {
        "input": "password = \"aA1\"",
        "output": "3"
      },
      {
        "input": "password = \"Aa1234567890\"",
        "output": "0"
      },
      {
        "input": "password = \"........##@\"",
        "output": "3"
      },
      {
        "input": "password = \"Aaaaaa1A\"",
        "output": "1"
      },
      {
        "input": "password = \"Passwo0rd!!\"",
        "output": "0"
      },
      {
        "input": "password = \"A1b2C3\"",
        "output": "0"
      },
      {
        "input": "password = \"...!!!\"",
        "output": "3"
      },
      {
        "input": "password = \"A1b2C3d4E5f6G7\"",
        "output": "0"
      },
      {
        "input": "password = \"111111111111111111\"",
        "output": "6"
      },
      {
        "input": "password = \"A1B2C3D4E5F6G7H8I9J0\"",
        "output": "1"
      },
      {
        "input": "password = \"Aa1234567890!@#$%^\"",
        "output": "0"
      },
      {
        "input": "password = \"Aa1!Aa1!Aa1!Aa1!\"",
        "output": "0"
      },
      {
        "input": "password = \"Aa1111111111111111\"",
        "output": "5"
      },
      {
        "input": "password = \"A1A1A1A1\"",
        "output": "1"
      },
      {
        "input": "password = \"password\"",
        "output": "2"
      },
      {
        "input": "password = \"Aaaaaa\"",
        "output": "1"
      },
      {
        "input": "password = \"AAAAAaaaaaaa\"",
        "output": "3"
      },
      {
        "input": "password = \"Aa1234567890Aa1\"",
        "output": "0"
      },
      {
        "input": "password = \"Aa111\"",
        "output": "1"
      },
      {
        "input": "password = \"AaAaAaAaAaAaAaAaAaAa\"",
        "output": "1"
      },
      {
        "input": "password = \"aaa111\"",
        "output": "2"
      },
      {
        "input": "password = \"A1B2C3D4E5F6G7H8I9J0K\"",
        "output": "2"
      },
      {
        "input": "password = \"Aa1234567890123456\"",
        "output": "0"
      },
      {
        "input": "password = \"A1b2C3d4\"",
        "output": "0"
      },
      {
        "input": "password = \"12345678901234567890\"",
        "output": "2"
      },
      {
        "input": "password = \"aaaaaaa\"",
        "output": "2"
      },
      {
        "input": "password = \"Aa1234567890123\"",
        "output": "0"
      },
      {
        "input": "password = \"!@#$%^&*()_+\"",
        "output": "3"
      },
      {
        "input": "password = \"Aaa111\"",
        "output": "1"
      },
      {
        "input": "password = \"a\"",
        "output": "5"
      },
      {
        "input": "password = \"Aa1234567890Aa1234567890\"",
        "output": "4"
      },
      {
        "input": "password = \"AaAaAaAaAaAaAaAaAaA1\"",
        "output": "0"
      },
      {
        "input": "password = \"Aaaaaa1\"",
        "output": "1"
      },
      {
        "input": "password = \"............aaa\"",
        "output": "5"
      },
      {
        "input": "password = \"Aa1234567890!@#$%^&*()\"",
        "output": "2"
      },
      {
        "input": "password = \"Aa1234567890Aa123456\"",
        "output": "0"
      },
      {
        "input": "password = \"11111111111111111111\"",
        "output": "6"
      },
      {
        "input": "password = \"1337C0d3\"",
        "output": "0"
      },
      {
        "input": "password = \"Password123\"",
        "output": "0"
      },
      {
        "input": "password = \"aaaaaaaaaaaaaaaaaaaaa\"",
        "output": "7"
      },
      {
        "input": "password = \"Aa123456\"",
        "output": "0"
      },
      {
        "input": "password = \"ABABABABABABABABAB\"",
        "output": "2"
      },
      {
        "input": "password = \"ABABABABABABABABABAB1\"",
        "output": "2"
      },
      {
        "input": "password = \"Aa1234567890Aa123\"",
        "output": "0"
      },
      {
        "input": "password = \"aaaaaaaaaaaaaa1A\"",
        "output": "4"
      },
      {
        "input": "password = \"abcABC123!@#\"",
        "output": "0"
      },
      {
        "input": "password = \"A1b2C3D4E5F6G7H8I9J0\"",
        "output": "0"
      },
      {
        "input": "password = \"AAAbbbccc111111111111111111\"",
        "output": "11"
      },
      {
        "input": "password = \"AAAbbbCCCddd1111111111111111111\"",
        "output": "15"
      },
      {
        "input": "password = \"aaaabbbbccccddddeee\"",
        "output": "5"
      },
      {
        "input": "password = \"111222333444555666777888999000\"",
        "output": "12"
      },
      {
        "input": "password = \"abcABC123!!!123!!!123!!!123!!!\"",
        "output": "10"
      },
      {
        "input": "password = \"P@ssw0rd!\"",
        "output": "0"
      },
      {
        "input": "password = \"!@#$%^&*()_+~`|}{[]:;?><,./-=!@#$%^&*()\"",
        "output": "22"
      },
      {
        "input": "password = \"AaBbCc1234567890123456789012345678901234567890\"",
        "output": "26"
      },
      {
        "input": "password = \"AAAbbbCCCddd11111111111111111111\"",
        "output": "16"
      },
      {
        "input": "password = \"Aa1Aa1Aa1Aa1Aa1Aa1Aa1\"",
        "output": "1"
      },
      {
        "input": "password = \"A1A1A1A1A1A1A1A1A1A1\"",
        "output": "1"
      },
      {
        "input": "password = \"A1A1A1A1A1A1A1A1A1A1A1A1A\"",
        "output": "6"
      },
      {
        "input": "password = \"Aaaaaaaaaa1111111111!!!!!!!!!\"",
        "output": "14"
      },
      {
        "input": "password = \"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\"",
        "output": "15"
      },
      {
        "input": "password = \"abcdefgH1!\"",
        "output": "0"
      },
      {
        "input": "password = \"123456789012345678901234567890\"",
        "output": "12"
      },
      {
        "input": "password = \"aaaaaaaAAAAAA1111111\"",
        "output": "6"
      },
      {
        "input": "password = \"Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!\"",
        "output": "28"
      },
      {
        "input": "password = \"Password123Password123\"",
        "output": "2"
      },
      {
        "input": "password = \"abcABC123!@#abcABC123!@#abcABC123!@#\"",
        "output": "16"
      },
      {
        "input": "password = \"Aa1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!\"",
        "output": "56"
      },
      {
        "input": "password = \"aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1\"",
        "output": "28"
      },
      {
        "input": "password = \"!@#$%^&*()_+~`|}{[]:;?><,./-=\"",
        "output": "12"
      },
      {
        "input": "password = \"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\"",
        "output": "55"
      },
      {
        "input": "password = \"AAAbbbCCCddd1111111111111111111111\"",
        "output": "18"
      },
      {
        "input": "password = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "8"
      },
      {
        "input": "password = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
        "output": "19"
      },
      {
        "input": "password = \"xX1234567890Xx1234567890Xx1234567890\"",
        "output": "16"
      },
      {
        "input": "password = \"Aa1Bb2Cc3Dd4Ee5Ff6Gg7Hh8Ii9Jj0KkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"",
        "output": "42"
      },
      {
        "input": "password = \"aA1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1\"",
        "output": "23"
      },
      {
        "input": "password = \"aabababababababababa\"",
        "output": "2"
      },
      {
        "input": "password = \"Aa123456789012345\"",
        "output": "0"
      },
      {
        "input": "password = \"Password!Password!Pass\"",
        "output": "3"
      },
      {
        "input": "password = \"A1!aA1!aA1!aA1!aA1!aA1!aA1!a\"",
        "output": "8"
      },
      {
        "input": "password = \"A1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!\"",
        "output": "11"
      },
      {
        "input": "password = \"aaaaaaaaaaaaaaaaaaaa\"",
        "output": "6"
      },
      {
        "input": "password = \"1234567890!@#$%^&*()_+~`|}{[]:;?><,./-=\"",
        "output": "21"
      },
      {
        "input": "password = \"A1A1A1A1A1A1A1A1A1A1A1A1A1\"",
        "output": "7"
      },
      {
        "input": "password = \"A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z1\"",
        "output": "33"
      },
      {
        "input": "password = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "40"
      },
      {
        "input": "password = \"bbbbbbbbbbbbbbbbb\"",
        "output": "5"
      },
      {
        "input": "password = \"Aa1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!\"",
        "output": "20"
      },
      {
        "input": "password = \"A1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!a\"",
        "output": "12"
      },
      {
        "input": "password = \"!aA1!aA1!aA1!aA1!aA1\"",
        "output": "0"
      },
      {
        "input": "password = \"AaaBBB111\"",
        "output": "2"
      },
      {
        "input": "password = \"Aa!aAa!aAa!aAa!aAa!aAa!aAa!aAa!aAa!aAa!aAa!aAa!aAa!aAa!aAa!aAa!\"",
        "output": "44"
      },
      {
        "input": "password = \"A1A1A1A1A1A1A1A1A1A1A1\"",
        "output": "3"
      },
      {
        "input": "password = \"AAAbbbCCCddd11111111111111111111111\"",
        "output": "19"
      },
      {
        "input": "password = \"aAaAaAaAaAaAaAaAaAaAaAaAaA\"",
        "output": "7"
      },
      {
        "input": "password = \"aaAAaaAAaaAAaaAAaa\"",
        "output": "1"
      },
      {
        "input": "password = \"Aa!b@c#d$e%f^g&h*i(j)k\"",
        "output": "3"
      },
      {
        "input": "password = \"A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1\"",
        "output": "23"
      },
      {
        "input": "password = \"Aa1!Aa1!Aa1!\"",
        "output": "0"
      },
      {
        "input": "password = \"Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1A\"",
        "output": "23"
      },
      {
        "input": "password = \"aA1!aA1!aA1!aA1!aA1!\"",
        "output": "0"
      },
      {
        "input": "password = \"abAB1111111111111111\"",
        "output": "5"
      },
      {
        "input": "password = \"cccccccccccccccccccccccccccccccccccccccccccccccccccc\"",
        "output": "38"
      },
      {
        "input": "password = \"aaaaaaaAAAAAA666666\"",
        "output": "6"
      },
      {
        "input": "password = \"aaaAAA111!!!\"",
        "output": "4"
      },
      {
        "input": "password = \"aAaAaAaAaAaAaAaAaAaAaAaA\"",
        "output": "5"
      },
      {
        "input": "password = \"Aa111111111111111111\"",
        "output": "6"
      },
      {
        "input": "password = \"a!b@c#d$e%f^g&h*i(j)\"",
        "output": "2"
      },
      {
        "input": "password = \"aaAA111111111111111\"",
        "output": "5"
      },
      {
        "input": "password = \"A1!aA1!aA1!aA1!aA1!aA1!aA1!aA1\"",
        "output": "10"
      },
      {
        "input": "password = \"abcABC123abcABC123\"",
        "output": "0"
      },
      {
        "input": "password = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "28"
      },
      {
        "input": "password = \"abcABC123!@#abcABC123!@#\"",
        "output": "4"
      },
      {
        "input": "password = \"Aa1Bb2Ccc3Ddd\"",
        "output": "0"
      },
      {
        "input": "password = \"AAAbbbCCCccc111111111\"",
        "output": "7"
      },
      {
        "input": "password = \"abcABC!@#abcABC!@#abcABC!@#\"",
        "output": "8"
      },
      {
        "input": "password = \"Abcde!23456789\"",
        "output": "0"
      },
      {
        "input": "password = \"aAaAaAaAaAaAaAaAaAaAaAaAaAaA\"",
        "output": "9"
      },
      {
        "input": "password = \"AAAbbbCCCddd111111111111111111111111\"",
        "output": "20"
      },
      {
        "input": "password = \"aaabbbccc111222333\"",
        "output": "6"
      },
      {
        "input": "password = \"aA1bB2cC3dD4eE5fF6\"",
        "output": "0"
      },
      {
        "input": "password = \"aaaaaaaAAAAAA6666666\"",
        "output": "6"
      },
      {
        "input": "password = \"Aa1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!\"",
        "output": "40"
      },
      {
        "input": "password = \"Aa!b@c#d$e%f^g&h*i(j)\"",
        "output": "2"
      },
      {
        "input": "password = \"abcABC123abcABC123abcABC123\"",
        "output": "7"
      },
      {
        "input": "password = \"Aa1234567890123456789\"",
        "output": "1"
      },
      {
        "input": "password = \"!@#$%^&*()\"",
        "output": "3"
      },
      {
        "input": "password = \"!@#$%^&*()_+~`1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM\"",
        "output": "56"
      },
      {
        "input": "password = \"aA1!aA1!aA1!aA1!\"",
        "output": "0"
      },
      {
        "input": "password = \"aA1aA1aA1aA1aA1aA1\"",
        "output": "0"
      },
      {
        "input": "password = \"111222333444555666777888999000111222333\"",
        "output": "21"
      },
      {
        "input": "password = \"123!@#abcDEF\"",
        "output": "0"
      },
      {
        "input": "password = \"aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1aA1\"",
        "output": "22"
      },
      {
        "input": "password = \"Aa1Aa1Aa1Aa1Aa1Aa1\"",
        "output": "0"
      },
      {
        "input": "password = \"Abc!1\"",
        "output": "1"
      },
      {
        "input": "password = \"aaaAAAbBBB11111111111111\"",
        "output": "8"
      },
      {
        "input": "password = \"AaaBBBcccDDD123\"",
        "output": "3"
      },
      {
        "input": "password = \"AAAbbccccdddEEF1234567890\"",
        "output": "5"
      },
      {
        "input": "password = \"aA111aA111aA111aA111\"",
        "output": "4"
      },
      {
        "input": "password = \"aaaaaaaAAAAAA66666666666666666666\"",
        "output": "18"
      },
      {
        "input": "password = \"0123456789012345678901234567890\"",
        "output": "13"
      },
      {
        "input": "password = \"aA1!aA1!aA1!aA1!aA1!aA1!\"",
        "output": "4"
      },
      {
        "input": "password = \"A1b2C3d4E5f6G7H8I9J0KLMN\"",
        "output": "4"
      },
      {
        "input": "password = \"aA1234567890Aa1234567890aA1234567890\"",
        "output": "16"
      },
      {
        "input": "password = \"1234567890AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"",
        "output": "42"
      },
      {
        "input": "password = \"abcdefghijABCD1234567890\"",
        "output": "4"
      },
      {
        "input": "password = \"Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!\"",
        "output": "32"
      },
      {
        "input": "password = \"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\"",
        "output": "15"
      },
      {
        "input": "password = \"Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!Aa1!\"",
        "output": "12"
      },
      {
        "input": "password = \"1234567890!@#$%^&*()_+\"",
        "output": "4"
      },
      {
        "input": "password = \"AAAbbbCCCddd111111111111111111\"",
        "output": "14"
      },
      {
        "input": "password = \"Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1\"",
        "output": "31"
      },
      {
        "input": "password = \"123!@#abcDEF123!@#abcDEF\"",
        "output": "4"
      },
      {
        "input": "password = \"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\"",
        "output": "13"
      },
      {
        "input": "password = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
        "output": "8"
      },
      {
        "input": "password = \"AAAbbbCCCddd111111111111111111111\"",
        "output": "17"
      },
      {
        "input": "password = \"abcdefgHIJKLmnopQR1234567890!@#$%^&*()\"",
        "output": "18"
      },
      {
        "input": "password = \"A1!aA1!aA1!aA1!aA1!aA1!aA1!aA\"",
        "output": "9"
      },
      {
        "input": "password = \"a!B@c#D$e%F^G&H*I(J)\"",
        "output": "1"
      },
      {
        "input": "password = \"!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()\"",
        "output": "53"
      },
      {
        "input": "password = \"xXyYzZ0987654321@#\"",
        "output": "0"
      },
      {
        "input": "password = \"Password1Password1\"",
        "output": "0"
      },
      {
        "input": "password = \"Aa1aA1aA1aA1aA1aA1aA1\"",
        "output": "1"
      },
      {
        "input": "password = \"Aa12345678901234567890\"",
        "output": "2"
      },
      {
        "input": "password = \"Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1Aa1\"",
        "output": "46"
      },
      {
        "input": "password = \"aaAaaaAaaaAaaaAaaaAaaaA\"",
        "output": "5"
      },
      {
        "input": "password = \"00000000000000000000000000000000\"",
        "output": "18"
      },
      {
        "input": "password = \"aaaaaaaaaAAA9\"",
        "output": "4"
      },
      {
        "input": "password = \"Aaaaabbbb1\"",
        "output": "2"
      },
      {
        "input": "password = \"111222333444555666777888999000111222333444555666777888999000\"",
        "output": "42"
      },
      {
        "input": "password = \"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\"",
        "output": "11"
      },
      {
        "input": "password = \"Aa1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!aA1!\"",
        "output": "16"
      }
    ]
  },
  {
    "id": 736,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Recursion",
      "Hash Table",
      "String"
    ],
    "problemDescription": "You are given a string expression representing a Lisp-like expression to return the integer value of.\nThe syntax for these expressions is given as follows.\n\nAn expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\n(An integer could be positive or negative.)\nA let expression takes the form \"(let v1 e1 v2 e2 ... vn en expr)\", where let is always the string \"let\", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr.\nAn add expression takes the form \"(add e1 e2)\" where add is always the string \"add\", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2.\nA mult expression takes the form \"(mult e1 e2)\" where mult is always the string \"mult\", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2.\nFor this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names \"add\", \"let\", and \"mult\" are protected and will never be used as variable names.\nFinally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.\n\n\u00a0\nExample 1:\n\nInput: expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"\nOutput: 14\nExplanation: In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\nSince x = 3 is found first, the value of x is 3.\n\nExample 2:\n\nInput: expression = \"(let x 3 x 2 x)\"\nOutput: 2\nExplanation: Assignment in let statements is processed sequentially.\n\nExample 3:\n\nInput: expression = \"(let x 1 y 2 x (add x y) (add x y))\"\nOutput: 5\nExplanation: The first (add x y) evaluates as 3, and is assigned to x.\nThe second (add x y) evaluates as 3+2 = 5.\n\n\u00a0\nConstraints:\n\n1 <= expression.length <= 2000\nThere are no leading or trailing spaces in expression.\nAll tokens are separated by a single space in expression.\nThe answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.\nThe expression is guaranteed to be legal and evaluate to an integer.\n\n",
    "starterCode": "class Solution:\n    def evaluate(self, expression: str) -> int:\n        ",
    "testCases": [
      {
        "input": "expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"",
        "output": "14"
      },
      {
        "input": "expression = \"(let x 7 (let y 2 (let z 3 (mult x (add y z)))))\"",
        "output": "35"
      },
      {
        "input": "expression = \"(mult (let x 2 (mult 3 x)) (let x 2 (add 4 x)))\"",
        "output": "36"
      },
      {
        "input": "expression = \"(let x 0 (let x 1 x) x)\"",
        "output": "1"
      },
      {
        "input": "expression = \"(add 1 2)\"",
        "output": "3"
      },
      {
        "input": "expression = \"(mult 3 4)\"",
        "output": "12"
      },
      {
        "input": "expression = \"(add (let x 1 y 2 x) (mult x y))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let a 5 (let b 6 (let c 7 (mult (add a b) (add b c)))))\"",
        "output": "143"
      },
      {
        "input": "expression = \"(let x 0 (let x 1 x))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(mult (add 1 2) (add 3 4))\"",
        "output": "21"
      },
      {
        "input": "expression = \"(let x 0 (let x (add 1 x) (let x (mult x 2) x)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(mult (let x 2 (add x 2)) (let y 3 (mult y y)))\"",
        "output": "36"
      },
      {
        "input": "expression = \"(let x 1 y (add x 2) (mult x y))\"",
        "output": "3"
      },
      {
        "input": "expression = \"(let a 3 b (add a 1) c (mult a b) c)\"",
        "output": "12"
      },
      {
        "input": "expression = \"(let x 1 y 1 x (add x y) (add x y))\"",
        "output": "3"
      },
      {
        "input": "expression = \"(mult (let x 2 y 3) (let x 4 y 5))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 1 y 2 x (add x y) (add x y))\"",
        "output": "5"
      },
      {
        "input": "expression = \"(let x 3 x 2 x)\"",
        "output": "2"
      },
      {
        "input": "expression = \"(let x 2 (mult 3 (let x 3 y 4 (add x y))))\"",
        "output": "21"
      },
      {
        "input": "expression = \"(let x 1 (add x (let x 2 (add x (let x 3 (add x 4)))))\"",
        "output": "10"
      },
      {
        "input": "expression = \"(let x 1 (let y 2 (let z 3 (add x (add y z)))))\"",
        "output": "6"
      },
      {
        "input": "expression = \"(let x 1 (mult (let x 2 (add x 2)) x))\"",
        "output": "4"
      },
      {
        "input": "expression = \"(mult (let x 5) (let y 2 (add x y)))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 7 (let y 2 (let x 3 (add x y))))\"",
        "output": "5"
      },
      {
        "input": "expression = \"(mult (let a 2 b 3 (add a b)) (let c 4 d 5 (mult c d)))\"",
        "output": "100"
      },
      {
        "input": "expression = \"(let x 7 (add x 3) (mult x 2))\"",
        "output": "10"
      },
      {
        "input": "expression = \"(let x (add 1 2) (mult x 3))\"",
        "output": "9"
      },
      {
        "input": "expression = \"(let x 2 (let y 3 (let z (add x y) (mult x z))))\"",
        "output": "10"
      },
      {
        "input": "expression = \"(let a1 3 b2 4 (add a1 b2))\"",
        "output": "7"
      },
      {
        "input": "expression = \"(let a1 3 b2 (add a1 1) b2)\"",
        "output": "4"
      },
      {
        "input": "expression = \"(let x 1 (let y (let z 3 (add z 2)) (mult x y)) (add x y))\"",
        "output": "5"
      },
      {
        "input": "expression = \"(let x (let y 2 (mult y 3)) (add x 5))\"",
        "output": "11"
      },
      {
        "input": "expression = \"(let x 5 y (add x 3) z (mult x y) (let w 7 (add w (mult x z))))\"",
        "output": "207"
      },
      {
        "input": "expression = \"(let m 8 n (add m 2) o (mult m n) p (add o n) (mult p m))\"",
        "output": "720"
      },
      {
        "input": "expression = \"(let a 1 b (let a (add a 1) (mult a a)) (add a b))\"",
        "output": "5"
      },
      {
        "input": "expression = \"(let a 1 b 2 c (mult a b) d (add a b) (mult c d))\"",
        "output": "6"
      },
      {
        "input": "expression = \"(let x 3 y (mult x 2) z (let w (add x y) (mult w z)) (add x (mult y z)))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let a 1 b (add a 1) c (mult a b) (add c (let a 2 (mult a b))))\"",
        "output": "6"
      },
      {
        "input": "expression = \"(let x 2 (let y (let z (add x 3) (mult z 2)) (add y (let a (add z 4) (mult a 3))))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 5 (let y (mult x 2) (add (let z (add x y)) (mult z (let w (mult y 2)) w))))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(mult (let x 2 (let y 3 (add x y))) (let x 4 (let y 5 (mult x y))))\"",
        "output": "100"
      },
      {
        "input": "expression = \"(let a 1 b 2 c (add a b) d (mult a c) (add d c))\"",
        "output": "6"
      },
      {
        "input": "expression = \"(let x 2 y 3 z (mult x y) (add (let x 5 (mult x y)) (let y 4 (add y z))))\"",
        "output": "25"
      },
      {
        "input": "expression = \"(mult (let x 5 y (mult x 2) (add y 3)) (let z 4 w (add z 1) (mult w 3)))\"",
        "output": "195"
      },
      {
        "input": "expression = \"(let a 5 b (add a 3) (mult a b))\"",
        "output": "40"
      },
      {
        "input": "expression = \"(let a 1 (let b (add a 1) (let c (mult b 2) (let d (add c 3) (let e (mult d 4) (add e 5)))))\"",
        "output": "33"
      },
      {
        "input": "expression = \"(let m 5 n 10 (let p (add m n) (mult p (let q (mult m n) (add q (let r (add p q) r)))))\"",
        "output": "1725"
      },
      {
        "input": "expression = \"(let x (mult 3 3) y (add 5 5) z (let w (mult x y) (add w 10)) (mult z x))\"",
        "output": "900"
      },
      {
        "input": "expression = \"(let a 1 b (let c (mult a a) d (add a a) (mult c d)) e (let f (mult b b) g (add b b) (mult f g)) (add e e))\"",
        "output": "32"
      },
      {
        "input": "expression = \"(let a 1 b (add a 1) c (mult b 2) d (add c 3) e (mult d 2) (add e (mult e (add d (mult c (add b a))))))\"",
        "output": "280"
      },
      {
        "input": "expression = \"(let x 1 (let y (let z (let w (let v 5 (mult v v)) (add w v)) (mult z w)) (add y z)) (add x y))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(add (let x 5 (mult x 2)) (let y 3 (mult y 4)))\"",
        "output": "22"
      },
      {
        "input": "expression = \"(let a 1 b 2 c 3 d (add a (mult b c)) e (let f 4 (add d (mult f c))))\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "expression = \"(let a 10 (let b (mult a 2) (let c (add a b) (let d (mult b c) d))))\"",
        "output": "600"
      },
      {
        "input": "expression = \"(let m 2 (let n (mult m 3) (let o (add m n) (let p (mult m o) (add p (mult n o)))))\"",
        "output": "64"
      },
      {
        "input": "expression = \"(let x 5 (let y 3 (mult (add x y) (let z 2 (add z (mult x y)))))\"",
        "output": "136"
      },
      {
        "input": "expression = \"(let x (add 1 (mult 2 3)) y (let z (mult x 4) (add x (mult y z))) (mult x (add y z)))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(mult (let a 2 b (add a 3) c (mult a b)) (let a 4 b (add a 5) c (mult a b)))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let a (mult 2 3) b (add a 4) c (mult b a) d (add c b) (mult d c))\"",
        "output": "4200"
      },
      {
        "input": "expression = \"(let x 5 y 3 (let z (mult x y) (let w (add x z) (mult w (let v (add y z) v)))))\"",
        "output": "360"
      },
      {
        "input": "expression = \"(let x 1 (let y (add x 1) (let z (mult y 2) (let a (add z 3) (let b (mult a 4) (add (mult b 5) (let c (add b 6) (mult c 7)))))))\"",
        "output": "378"
      },
      {
        "input": "expression = \"(let a 1 b (add a 1) c (mult b 2) d (let e (add c b) (mult e a)) (add d (mult c a)))\"",
        "output": "10"
      },
      {
        "input": "expression = \"(mult (let x 2 (let y 3 (let z (add x y) (mult z 4)))) (let a 5 (let b 6 (let c (add a b) (mult c 7))))\"",
        "output": "1540"
      },
      {
        "input": "expression = \"(let x 7 y (mult x 2) z (add x y) (let w 3 (add w (mult x z))))\"",
        "output": "150"
      },
      {
        "input": "expression = \"(let x 1 y 2 (let x (add x y) y (mult x y) (let z (add x y) (mult x z))))\"",
        "output": "27"
      },
      {
        "input": "expression = \"(let x 1 (let y 2 (let z 3 (let a 4 (let b 5 (let c 6 (let d 7 (let e 8 (let f 9 (add x (mult y (add z (mult a (add b (mult c (add d (mult e f))))))))))))))))\"",
        "output": "3839"
      },
      {
        "input": "expression = \"(let x 10 (let y (add x 5) z (mult y 2) (let a (add z 3) b (mult a 4) (let c (add b 2) (mult c 5))))\"",
        "output": "670"
      },
      {
        "input": "expression = \"(let a 5 b (let a 6 c (let a 7 (mult a b))) (add a c))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let a (mult 2 3) b (add a 4) c (mult b a) d (add c b) e (mult d c) f (add e b) g (mult f e) h (add g f) i (mult h g) j (add i h))\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "expression = \"(let x 7 y (add x 2) z (mult x y) (let w (add y z) (mult w x)))\"",
        "output": "504"
      },
      {
        "input": "expression = \"(let x 5 y (add x 3) z (mult y 2) (let w (add x y) (mult w z)))\"",
        "output": "208"
      },
      {
        "input": "expression = \"(let x 1 (let y (let z (let w (let v 1 (let u 2 (mult u u))) (mult v v)) (mult w w)) (mult z z)) (mult y y))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x (let y (let z 3 (add z 1)) (mult y 2)) (mult x 5))\"",
        "output": "40"
      },
      {
        "input": "expression = \"(let x 10 (let y (mult x 3) (let z (add x y) (let w (mult y z) (let v (add w z) v)))))\"",
        "output": "1240"
      },
      {
        "input": "expression = \"(let x 1 (let y 2 (let z 3 (let w 4 (add (add x y) (add z w))))))\"",
        "output": "10"
      },
      {
        "input": "expression = \"(let a 2 b (mult a 3) c (add a b) d (mult b c) (add d c))\"",
        "output": "56"
      },
      {
        "input": "expression = \"(mult (add 1 2) (mult 3 4))\"",
        "output": "36"
      },
      {
        "input": "expression = \"(let a 1 b (let a 2 (let a 3 (add a b))) c (let a 4 (mult a b)) (add c (mult a b)))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 5 y (add x 3) z (mult x y) (add z (let x 10 (mult x y))))\"",
        "output": "120"
      },
      {
        "input": "expression = \"(let x 1 y (let x 2 z (let x 3 (let w 4 (let v 5 (mult (add (add x y) (add z w)) v))))) (add x z))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(mult (let x 5 (add (let y 3 (mult x y)) (let z 4 (add x z)))) (let a 2 (mult (let b 3 (add a b)) (let c 4 (mult b c))))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 10 y (add x 5) z (mult y 2) (let w (add x y) (mult w z)))\"",
        "output": "750"
      },
      {
        "input": "expression = \"(let x 5 (let y (add x 3) (mult x y)))\"",
        "output": "40"
      },
      {
        "input": "expression = \"(mult (let x 3 (let y 5 (add x y))) (let a 2 (mult a (let b 4 (add b 1))))\"",
        "output": "80"
      },
      {
        "input": "expression = \"(let x 5 y (let x 10 (add x 5)) z (mult y 2) (add z y))\"",
        "output": "45"
      },
      {
        "input": "expression = \"(let x 2 y (let x 3 (let x 4 (add x y))) z (let x 5 (mult x y)) (add z (mult x y)))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 1 (let y 2 (let z 3 (let a (add x y) (let b (mult y z) (add (mult a b) (let c (add a b) (mult c 2)))))))\"",
        "output": "36"
      },
      {
        "input": "expression = \"(let x 1 (let y (let x 2 (let z 3 (add x z))) (mult x y)) (add x y))\"",
        "output": "5"
      },
      {
        "input": "expression = \"(let x 1 y 2 z 3 a (add x y) b (mult a z) c (add b a) d (mult c b) (add d c) e (mult d a) (add e b))\"",
        "output": "120"
      },
      {
        "input": "expression = \"(let x 5 (let y (let z 3 (add x z)) (mult x y)) (let w (add x y) (mult w x)))\"",
        "output": "40"
      },
      {
        "input": "expression = \"(let x 1 (let y (add x 1) (let z (mult y 2) (add x (add y z)))))\"",
        "output": "7"
      },
      {
        "input": "expression = \"(let a 1 b 2 c 3 (add (mult a b) (mult b c)))\"",
        "output": "8"
      },
      {
        "input": "expression = \"(let x 1 (let y (mult x 2) (let z (add y 3) (mult x (add y z)))))\"",
        "output": "7"
      },
      {
        "input": "expression = \"(let a 2 b (mult a 2) c (let d (add b 1) (mult d 3)) (add c (mult a b)))\"",
        "output": "23"
      },
      {
        "input": "expression = \"(let a 1 b 2 (add a b) (mult a b))\"",
        "output": "3"
      },
      {
        "input": "expression = \"(let a 5 b (let a 10 (mult a b)) (add a b))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 1 y (let x 2 z (let x 3 (add x y))) (add x z))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(mult (let x 2 y (add x 3) z (mult x y)) (let x 4 y (add x 5) z (mult x y)))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 7 (let y (add x 3) z (mult y 2) (let w (add z 5) (mult w y))))\"",
        "output": "250"
      },
      {
        "input": "expression = \"(let x 10 y (add x 5) z (mult y 2) (let w (add y z) (mult w x)))\"",
        "output": "450"
      },
      {
        "input": "expression = \"(let a 1 b 2 c 3 (add (mult a b) c))\"",
        "output": "5"
      },
      {
        "input": "expression = \"(let x 1 (let y 2 (let z 3 (let w 4 (mult (add x y) (mult z w))))))\"",
        "output": "36"
      },
      {
        "input": "expression = \"(mult (let x 3 (let y 4 (add x y))) (let x 6 (let y 7 (mult x y))))\"",
        "output": "294"
      },
      {
        "input": "expression = \"(let x 2 y (let x 3 z (add x y)) (mult x z))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let a 1 b 2 c 3 (let d (add a b) e (mult b c) (add d e)))\"",
        "output": "9"
      },
      {
        "input": "expression = \"(let a 1 (let b 2 (let a 3 (let b 4 (add (mult a b) (let a 5 (mult a b)))))))\"",
        "output": "32"
      },
      {
        "input": "expression = \"(let x 5 (let y (mult x 2) (let z (add y 3) (mult x z))))\"",
        "output": "65"
      },
      {
        "input": "expression = \"(add (mult 2 3) (let x 4 (mult x 5)))\"",
        "output": "26"
      },
      {
        "input": "expression = \"(let x 1 (let y 2 (let z 3 (let a (add x y) b (mult y z) c (add a b) d (mult b c) (let e (add c d) (mult d e)))))\"",
        "output": "3402"
      },
      {
        "input": "expression = \"(let x 1 (let y 2 (let z 3 (let a (add x y) b (mult y z) c (add a b) (mult b c)))))\"",
        "output": "54"
      },
      {
        "input": "expression = \"(let x 5 y (let x 10 (add x 5)) z (mult y 2) w (add z y) v (mult w z) u (add v w) t (mult u v) s (add t u))\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "expression = \"(let x (let y (let z 3 (mult z z)) (add y 5)) (mult x x))\"",
        "output": "196"
      },
      {
        "input": "expression = \"(mult (let a 3 b (add a 2) c (mult b 2) (add c a)) (let d 4 e (mult d 3) (add e d)))\"",
        "output": "208"
      },
      {
        "input": "expression = \"(mult (let x 1 (let y (let z 2 (let w 3 (add (mult x y) (mult z w)))) (mult x y) (add z w))) (add x y))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 1 (let y (let z 2 (let w 3 (add (mult x y) (mult z w)))) (mult x y) (add z w)))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(mult (let x 7 (let y 3 (add x y))) (let x 4 (let y 6 (mult x y))))\"",
        "output": "240"
      },
      {
        "input": "expression = \"(let x (let y (let z 1 (let w 2 (let v 3 (mult v v)) (add w v)) (mult z w)) (add y z)) (add x y) (mult x y))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 2 (let y (let z 2 (add z z)) (mult x y)) (let a 3 (let b (mult a x) (add b (let c 4 (mult c x)))))\"",
        "output": "8"
      },
      {
        "input": "expression = \"(let x 1 y 2 (let z (add x y) (let w (mult x y) (let u (add z w) u))))\"",
        "output": "5"
      },
      {
        "input": "expression = \"(let a 1 (let b 2 (let c (add a b) (let d (mult b c) (mult c d))))\"",
        "output": "18"
      },
      {
        "input": "expression = \"(let a 1 b 2 c 3 d (add a b) e (add c d) (mult d (let a 5 (add a b))))\"",
        "output": "21"
      },
      {
        "input": "expression = \"(let x 10 (let y (mult x 2) (let z (add x y) (let w (mult y z) (add w z))))\"",
        "output": "630"
      },
      {
        "input": "expression = \"(let x 1 y (let x 2 (let x 3 (add x y))) z (let x 4 (mult x y)) (add z (mult x y)))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 1 (let y (add x 1) (let z (mult y 2) (let w (add x z) (mult w (let v (mult z 2) v)))))\"",
        "output": "40"
      },
      {
        "input": "expression = \"(mult (let a 1 b (let a 2 (mult a b))) (let a 3 b (let a 4 (add a b))))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 5 y (add x 3) (mult x y))\"",
        "output": "40"
      },
      {
        "input": "expression = \"(let x 5 (let y 10 (let z (add x y) (mult z x))))\"",
        "output": "75"
      },
      {
        "input": "expression = \"(let a 1 b (let a 2 (mult a b)) (let a 3 (add a b)) (let a 4 (mult a b)))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 10 y (let x 5 (add x 3)) z (mult x y) (add z y))\"",
        "output": "88"
      },
      {
        "input": "expression = \"(let x 1 y 2 z 3 a (add x y) b (mult a z) c (add b a) (mult c b))\"",
        "output": "108"
      },
      {
        "input": "expression = \"(let x 1 y (let x 2 z (let x 3 (add x y))) (mult x z))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let a 1 b (let a 2 c (let a 3 (let b 4 (mult (add a b) (let a 5 (add a b)))))) (add a c))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let x 1 (let y 2 (let z 3 (add (mult x y) z))))\"",
        "output": "5"
      },
      {
        "input": "expression = \"(let x 10 y (let x 20 z (let x 30 (let w 40 (mult (add x y) (add z w))))) (add x z))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(let a 1 b 2 c (add a b) (mult c (let b 4 (add a b))))\"",
        "output": "15"
      },
      {
        "input": "expression = \"(let x 1 (let y 2 (let z 3 (add (mult x y) (add y z)))))\"",
        "output": "7"
      },
      {
        "input": "expression = \"(let a 1 b 2 c 3 d 4 e 5 (add (mult a b) (add (mult b c) (add (mult c d) (mult d e)))))\"",
        "output": "40"
      },
      {
        "input": "expression = \"(let a 1 b 2 c 3 d 4 e 5 f 6 g 7 h 8 i 9 j (add a (mult b (add c (mult d (add e (mult f (add g (mult h (add i j))))))))))\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "expression = \"(add (let a 1 b (add a 1) c (mult b 2) (add c a)) (let d 4 e (mult d 3) (add e d)))\"",
        "output": "21"
      },
      {
        "input": "expression = \"(let z (mult 3 4) w (add z 5) x (let y (mult z w) (add y z)) x)\"",
        "output": "216"
      },
      {
        "input": "expression = \"(let x 5 (add (mult x 2) (let x 3 (add (mult x 4) (let x 6 (mult x 7))))))\"",
        "output": "64"
      },
      {
        "input": "expression = \"(let x 5 (let y (add x 2) z (mult y 3) (let w (add z 4) (mult w x))))\"",
        "output": "125"
      },
      {
        "input": "expression = \"(let x (mult 2 3) y (add x 5) (let z (mult x y) (add z (mult x y))))\"",
        "output": "132"
      }
    ]
  },
  {
    "id": 2538,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "There exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nEach node has an associated price. You are given an integer array price, where price[i] is the price of the ith node.\nThe price sum of a given path is the sum of the prices of all nodes lying on that path.\nThe tree can be rooted at any node root of your choice. The incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root.\nReturn the maximum possible cost amongst all possible root choices.\n\u00a0\nExample 1:\n\n\nInput: n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5]\nOutput: 24\nExplanation: The diagram above denotes the tree after rooting it at node 2. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.\n- The first path contains nodes [2,1,3,4]: the prices are [7,8,6,10], and the sum of the prices is 31.\n- The second path contains the node [2] with the price [7].\nThe difference between the maximum and minimum price sum is 24. It can be proved that 24 is the maximum cost.\n\nExample 2:\n\n\nInput: n = 3, edges = [[0,1],[1,2]], price = [1,1,1]\nOutput: 2\nExplanation: The diagram above denotes the tree after rooting it at node 0. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.\n- The first path contains nodes [0,1,2]: the prices are [1,1,1], and the sum of the prices is 3.\n- The second path contains node [0] with a price [1].\nThe difference between the maximum and minimum price sum is 2. It can be proved that 2 is the maximum cost.\n\n\u00a0\nConstraints:\n\n1 <= n <= 105\nedges.length == n - 1\n0 <= ai, bi <= n - 1\nedges represents a valid tree.\nprice.length == n\n1 <= price[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def maxOutput(self, n: int, edges: List[List[int]], price: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 5, edges = [[0,1],[0,2],[1,3],[1,4]], price = [5,4,3,2,1]",
        "output": "12"
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[1,3],[1,4]], price = [5,10,20,30,40]",
        "output": "55"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[1,3]], price = [10,5,1,1]",
        "output": "15"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[1,3]], price = [1,2,3,4]",
        "output": "6"
      },
      {
        "input": "n = 4, edges = [[0,1],[0,2],[0,3]], price = [2,3,4,5]",
        "output": "7"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]], price = [10,20,30,40,50]",
        "output": "140"
      },
      {
        "input": "n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5]",
        "output": "24"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[5,6]], price = [1,2,3,4,5,6,7]",
        "output": "19"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]], price = [10,9,8,7,6]",
        "output": "34"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9]], price = [1,2,3,4,5,6,7,8,9,10]",
        "output": "24"
      },
      {
        "input": "n = 3, edges = [[0,1],[1,2]], price = [1,1,1]",
        "output": "2"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[1,3]], price = [10,20,30,40]",
        "output": "60"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], price = [1,2,3,4,5,6,7,8,9,10]",
        "output": "21"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[2,3],[2,4],[2,5],[5,6]], price = [3,5,6,2,1,7,4]",
        "output": "21"
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[1,3],[1,4]], price = [5,2,3,4,6]",
        "output": "13"
      },
      {
        "input": "n = 1, edges = [], price = [100]",
        "output": "0"
      },
      {
        "input": "n = 9, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], price = [9,8,7,6,5,4,3,2,1]",
        "output": "44"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], price = [100,90,80,70,60,50,40,30,20,10,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16]",
        "output": "438"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], price = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "330"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7]], price = [7,6,5,4,3,2,1,8]",
        "output": "30"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19]], price = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "7"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], price = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "30"
      },
      {
        "input": "n = 14, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13]], price = [10,20,30,40,50,60,70,80,90,100,110,120,130,140]",
        "output": "320"
      },
      {
        "input": "n = 11, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10]], price = [5,5,5,5,5,5,5,5,5,5,5]",
        "output": "30"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], price = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "65"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], price = [100,200,300,400,500,600,700,800]",
        "output": "3500"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], price = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "33"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], price = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "7"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], price = [100000,99999,99998,99997,99996,99995,99994,99993,99992,99991,99990,99989,99988,99987,99986,99985,99984,99983,99982,99981,99980,99979,99978,99977,99976]",
        "output": "799956"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]], price = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60]",
        "output": "432000"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[5,11]], price = [5,1,9,3,7,2,8,4,6,10,12,11]",
        "output": "36"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]], price = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,21,20,23,22,25,24,27,26,29,28,30]",
        "output": "72"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7]], price = [15,25,35,45,55,65,75,85]",
        "output": "205"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]], price = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150]",
        "output": "370"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14]], price = [1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000,999999999,99999999,9999999,999999,99999,9999,999,99,9]",
        "output": "1010101109"
      },
      {
        "input": "n = 100, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40],[20,41],[20,42],[21,43],[21,44],[22,45],[22,46],[23,47],[23,48],[24,49],[24,50],[25,51],[25,52],[26,53],[26,54],[27,55],[27,56],[28,57],[28,58],[29,59],[29,60],[30,61],[30,62],[31,63],[31,64],[32,65],[32,66],[33,67],[33,68],[34,69],[34,70],[35,71],[35,72],[36,73],[36,74],[37,75],[37,76],[38,77],[38,78],[39,79],[39,80],[40,81],[40,82],[41,83],[41,84],[42,85],[42,86],[43,87],[43,88],[44,89],[44,90],[45,91],[45,92],[46,93],[46,94],[47,95],[47,96],[48,97],[48,98],[49,99]], price = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "285"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], price = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "50"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], price = [5,8,3,11,10,4,2,6,9,7,12,14,13,1,15,17,16,18,19,20]",
        "output": "65"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], price = [2,5,1,8,3,6,9,4,7,10,12,14,13,1,15,17,16,18,19,20,21,22,23,24,25]",
        "output": "68"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], price = [100,50,200,150,250,300,400,5,10,15,20,25,30,35,40]",
        "output": "1040"
      },
      {
        "input": "n = 50, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40],[20,41],[20,42],[21,43],[21,44],[22,45],[22,46],[23,47],[23,48],[24,49]], price = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101]",
        "output": "266"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[6,8],[6,9]], price = [5,10,15,20,25,30,35,40,45,50]",
        "output": "130"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], price = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500]",
        "output": "6500"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], price = [1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "6"
      },
      {
        "input": "n = 6, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]], price = [10,20,30,40,50,60]",
        "output": "200"
      },
      {
        "input": "n = 18, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17]], price = [15,22,10,25,30,12,18,20,21,24,26,27,31,32,33,34,35,36]",
        "output": "147"
      },
      {
        "input": "n = 12, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], price = [5,10,15,20,25,30,35,40,45,50,55,60]",
        "output": "385"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], price = [3,4,5,6,7,8,9]",
        "output": "21"
      },
      {
        "input": "n = 50, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40],[20,41],[20,42],[21,43],[21,44],[22,45],[22,46],[23,47],[23,48],[24,49]], price = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "138"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], price = [5,10,20,30,40,50,60,70,80,90,100,110,120,130,140]",
        "output": "275"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], price = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "29"
      },
      {
        "input": "n = 11, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10]], price = [10,20,30,40,50,60,70,80,90,100,110]",
        "output": "280"
      },
      {
        "input": "n = 50, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40],[20,41],[20,42],[21,43],[21,44],[22,45],[22,46],[23,47],[23,48],[24,49],[24,50]], price = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 12, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], price = [1,3,5,7,9,11,13,15,17,19,21,23]",
        "output": "143"
      },
      {
        "input": "n = 9, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8]], price = [1000,2000,3000,4000,5000,6000,7000,8000,9000]",
        "output": "20000"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], price = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "122"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], price = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500]",
        "output": "3300"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], price = [5,15,25,35,45,55,65]",
        "output": "110"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30]], price = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], price = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "500"
      }
    ]
  },
  {
    "id": 2983,
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "String",
      "Prefix Sum"
    ],
    "problemDescription": "You are given a 0-indexed string s having an even length n.\nYou are also given a 0-indexed 2D integer array, queries, where queries[i] = [ai, bi, ci, di].\nFor each query i, you are allowed to perform the following operations:\n\nRearrange the characters within the substring s[ai:bi], where 0 <= ai <= bi < n / 2.\nRearrange the characters within the substring s[ci:di], where n / 2 <= ci <= di < n.\n\nFor each query, your task is to determine whether it is possible to make s a palindrome by performing the operations.\nEach query is answered independently of the others.\nReturn a 0-indexed array answer, where answer[i] == true if it is possible to make s a palindrome by performing operations specified by the ith query, and false otherwise.\n\nA substring is a contiguous sequence of characters within a string.\ns[x:y] represents the substring consisting of characters from the index x to index y in s, both inclusive.\n\n\u00a0\nExample 1:\n\nInput: s = \"abcabc\", queries = [[1,1,3,5],[0,2,5,5]]\nOutput: [true,true]\nExplanation: In this example, there are two queries:\nIn the first query:\n- a0 = 1, b0 = 1, c0 = 3, d0 = 5.\n- So, you are allowed to rearrange s[1:1] => abcabc and s[3:5] => abcabc.\n- To make s a palindrome, s[3:5] can be rearranged to become => abccba.\n- Now, s is a palindrome. So, answer[0] = true.\nIn the second query:\n- a1 = 0, b1 = 2, c1 = 5, d1 = 5.\n- So, you are allowed to rearrange s[0:2] => abcabc and s[5:5] => abcabc.\n- To make s a palindrome, s[0:2] can be rearranged to become => cbaabc.\n- Now, s is a palindrome. So, answer[1] = true.\n\nExample 2:\n\nInput: s = \"abbcdecbba\", queries = [[0,2,7,9]]\nOutput: [false]\nExplanation: In this example, there is only one query.\na0 = 0, b0 = 2, c0 = 7, d0 = 9.\nSo, you are allowed to rearrange s[0:2] => abbcdecbba and s[7:9] => abbcdecbba.\nIt is not possible to make s a palindrome by rearranging these substrings because s[3:6] is not a palindrome.\nSo, answer[0] = false.\nExample 3:\n\nInput: s = \"acbcab\", queries = [[1,2,4,5]]\nOutput: [true]\nExplanation: In this example, there is only one query.\na0 = 1, b0 = 2, c0 = 4, d0 = 5.\nSo, you are allowed to rearrange s[1:2] => acbcab and s[4:5] => acbcab.\nTo make s a palindrome s[1:2] can be rearranged to become abccab.\nThen, s[4:5] can be rearranged to become abccba.\nNow, s is a palindrome. So, answer[0] = true.\n\u00a0\nConstraints:\n\n2 <= n == s.length <= 105\n1 <= queries.length <= 105\nqueries[i].length == 4\nai == queries[i][0], bi == queries[i][1]\nci == queries[i][2], di == queries[i][3]\n0 <= ai <= bi < n / 2\nn / 2 <= ci <= di < n \nn is even.\ns consists of only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def canMakePalindromeQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n        ",
    "testCases": [
      {
        "input": "s = \"abbcdecbba\", queries = [[0,2,7,9]]",
        "output": "[False]"
      },
      {
        "input": "s = \"abcabc\", queries = [[1,1,3,5],[0,2,5,5]]",
        "output": "[True, True]"
      },
      {
        "input": "s = \"abcdefgfedcba\", queries = [[1,2,11,12],[3,4,8,9]]",
        "output": "[True, True]"
      },
      {
        "input": "s = \"acbcab\", queries = [[1,2,4,5]]",
        "output": "[True]"
      },
      {
        "input": "s = \"aabbaa\", queries = [[0,2,3,5]]",
        "output": "[True]"
      },
      {
        "input": "s = \"abcdefgihgfedcba\", queries = [[0,3,8,11],[1,2,6,7]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdedcba\", queries = [[0,1,7,8],[2,3,5,6]]",
        "output": "[True, True]"
      },
      {
        "input": "s = \"aabbccdd\", queries = [[0,1,6,7],[2,3,4,5]]",
        "output": "[False, False]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,19,38,57],[1,18,39,56],[2,17,40,55]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"abcdefghijkllkjihgfedcba\", queries = [[0,4,11,15],[5,9,6,10]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"levellevel\", queries = [[0,2,5,7],[1,3,4,6]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aaabbbcccdddeeefffggghhhiiiijjjkkklllmmmnnnoooppqqrrrsssttuuvvwwxxyyzz\", queries = [[0,30,31,60],[10,20,40,50]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"qwertyuiopoiuytrewq\", queries = [[0,4,10,14],[5,7,8,12],[1,3,11,13]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdexyzwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\", queries = [[0,1,38,39],[2,3,36,37],[4,5,34,35]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,9,32,41],[1,5,28,37],[2,7,25,34]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"racecaracercar\", queries = [[0,2,10,12],[3,5,8,10],[1,4,7,9]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"abacaxbaxaba\", queries = [[0,1,9,10],[2,3,7,8],[4,5,5,6]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\", queries = [[0,12,12,24],[4,8,16,20],[6,10,10,14]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\", queries = [[0,12,13,25],[1,10,15,24]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abacabadabacaba\", queries = [[0,4,11,15],[1,3,12,14],[2,2,13,13]]",
        "output": "[True, True, True]"
      },
      {
        "input": "s = \"aabbccddeeffgg\", queries = [[0,5,7,12],[2,3,10,11]]",
        "output": "[False, False]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,15,16,29],[1,14,17,28],[2,13,18,27]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", queries = [[0,14,15,29],[1,13,16,28]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"racecaracecar\", queries = [[0,2,8,10],[1,4,6,9]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"zxcvbnmasdfghjklqwertyuiopoiuytrewqlkjhgfdasbvncxz\", queries = [[0,14,15,29],[1,13,16,28],[2,12,17,27]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,5,20,25],[6,10,15,19]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"mississippiissippi\", queries = [[0,4,10,14],[1,3,11,13]]",
        "output": "[False, False]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", queries = [[0,24,24,48],[1,23,25,47],[2,22,26,46]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghijhgfedcba\", queries = [[0,4,14,18],[1,3,15,17],[2,2,16,16]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,11,34,45],[12,22,23,33]]",
        "output": "[False, False]"
      },
      {
        "input": "s = \"mississippiissippi\", queries = [[0,4,10,14],[2,6,8,12]]",
        "output": "[False, False]"
      },
      {
        "input": "s = \"abacabadabacaba\", queries = [[0,6,11,17],[1,5,12,16],[2,4,13,15]]",
        "output": "[True, True, True]"
      },
      {
        "input": "s = \"xyzyxzyzyxzyzyxzyz\", queries = [[0,3,9,12],[4,7,13,16],[1,2,17,18]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"levellevel\", queries = [[1,2,5,6],[0,3,3,6],[2,4,4,5]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aaaabbbbccccdddd\", queries = [[0,3,12,15],[1,2,13,14],[2,3,14,15]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"levellevellevellevel\", queries = [[0,4,8,12],[1,3,9,11]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\", queries = [[0,12,12,24],[5,9,15,19]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"racecarannakayak\", queries = [[0,6,8,13],[1,5,9,12]]",
        "output": "[False, False]"
      },
      {
        "input": "s = \"noonnoon\", queries = [[0,2,5,7],[1,3,4,6]]",
        "output": "[True, True]"
      },
      {
        "input": "s = \"abcdeedcba\", queries = [[0,4,5,9],[1,3,6,8],[2,2,7,7]]",
        "output": "[True, True, True]"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\", queries = [[0,3,15,18],[1,4,14,17],[2,5,13,16],[3,6,12,15],[4,7,11,14]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "s = \"mississippiissippi\", queries = [[0,2,9,11],[1,3,8,10],[2,4,7,9]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", queries = [[0,5,26,31],[6,10,22,26],[11,15,17,21],[16,20,12,16]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"rotorrotorrotorrotor\", queries = [[0,4,12,16],[2,5,10,14],[3,6,11,15]]",
        "output": "[True, True, True]"
      },
      {
        "input": "s = \"abacabadabacabad\", queries = [[0,7,8,15],[1,6,9,14],[2,5,10,13],[3,4,11,12]]",
        "output": "[True, False, False, False]"
      },
      {
        "input": "s = \"abcdefghijzyxwvutsrqponmlkjihgfedcba\", queries = [[0,9,20,29],[1,8,21,28],[2,7,22,27],[3,6,23,26],[4,5,24,25]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "s = \"rotorrotor\", queries = [[0,2,7,9],[3,5,4,6]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"rotorrotor\", queries = [[0,2,6,8],[1,4,5,7]]",
        "output": "[True, True]"
      },
      {
        "input": "s = \"levellevel\", queries = [[0,1,6,7],[2,3,4,5],[1,2,5,6]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"racecar\", queries = [[1,3,2,4]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"thisisanoddlengthstring\", queries = [[0,4,14,19]]",
        "output": "[False]"
      },
      {
        "input": "s = \"abcdeffedcba\", queries = [[0,2,7,9],[1,3,6,8],[2,4,5,7]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghijklmnoponmlkjihgfedcba\", queries = [[0,15,15,30],[10,20,10,20]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aabbccddeeff\", queries = [[0,2,9,11],[1,3,8,10],[2,4,7,9]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"abcdefghihgfedcba\", queries = [[0,1,12,13],[3,3,8,8],[5,5,6,6]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,20,21,41],[1,19,22,40]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"mississippiissim\", queries = [[0,3,11,14],[2,4,9,12],[1,5,8,11]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\", queries = [[0,12,13,25],[6,18,7,19]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abacabadabacabad\", queries = [[0,3,8,11],[1,2,6,7],[4,5,12,13]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"abcdefghihgfedcba\", queries = [[0,4,7,10],[2,3,6,7],[1,3,5,8]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"mississippi\", queries = [[1,2,7,8],[0,1,10,11],[3,4,6,7]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,20,21,40],[5,15,26,36]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdedcbaabcdedcba\", queries = [[0,4,9,13],[2,5,8,12],[1,3,7,11]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"rotorrotor\", queries = [[0,2,5,7],[1,3,4,6],[2,4,3,5]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdedcbaa\", queries = [[0,1,8,9],[2,3,6,7],[1,4,5,8]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"zzzzzzzzzz\", queries = [[0,4,5,9],[1,3,6,8],[2,2,7,7]]",
        "output": "[True, True, True]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\", queries = [[0,1,28,29],[1,2,27,28],[2,3,26,27],[3,4,25,26],[4,5,24,25],[5,6,23,24]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\", queries = [[0,12,12,24],[5,10,14,19]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmlkjhgfdsapoiuytrewq\", queries = [[0,9,12,21],[3,6,18,23],[5,8,14,19]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abacabadabacabad\", queries = [[0,3,8,11],[1,4,9,12],[2,5,10,13]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\", queries = [[0,9,20,29],[1,8,21,28]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"amanaplanacanalpanama\", queries = [[0,4,23,27],[5,9,17,21],[10,14,13,18]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\", queries = [[0,25,25,0],[10,15,10,15]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"noonnoon\", queries = [[0,2,3,5],[1,3,2,4],[0,1,4,5]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aaabbbcccdddeeefffggg\", queries = [[0,4,11,15],[1,2,9,10]]",
        "output": "[False, False]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,24,25,49],[1,23,26,48],[2,22,27,47]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"racecarannakayak\", queries = [[0,2,9,11],[1,3,8,10],[2,4,7,9]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,5,26,31],[6,10,22,26],[11,15,17,21]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"noonnoon\", queries = [[0,1,5,6],[2,3,4,5]]",
        "output": "[True, True]"
      },
      {
        "input": "s = \"zyxzyxzyxzyx\", queries = [[0,2,9,11],[3,5,6,8]]",
        "output": "[False, False]"
      },
      {
        "input": "s = \"ababababababababab\", queries = [[0,1,8,9],[2,3,10,11],[4,5,12,13]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", queries = [[0,12,13,25],[1,11,14,24],[2,10,15,23]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabc\", queries = [[0,5,21,26],[6,11,15,20],[12,17,9,14]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"noonnoonnoon\", queries = [[1,3,9,11],[2,4,8,10],[0,2,6,8]]",
        "output": "[True, True, True]"
      },
      {
        "input": "s = \"abacabadabacaba\", queries = [[0,3,10,13],[1,4,9,12],[2,5,8,11],[3,6,7,10]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abcdefghihgfedcba\", queries = [[1,3,6,8],[2,4,5,7]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abacaxabacax\", queries = [[0,2,8,10],[1,3,6,8]]",
        "output": "[False, False]"
      },
      {
        "input": "s = \"abcdefghijkzyxwvutsrqponml\", queries = [[0,4,19,23],[2,3,17,18]]",
        "output": "[False, False]"
      },
      {
        "input": "s = \"noonnoonnoonnoon\", queries = [[0,3,12,15],[1,2,13,14]]",
        "output": "[True, True]"
      },
      {
        "input": "s = \"mississippiississippi\", queries = [[0,5,10,15],[3,8,7,12]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"xyzzyxzyxzyx\", queries = [[0,1,10,11],[2,3,8,9],[4,5,6,7]]",
        "output": "[False, False, False]"
      },
      {
        "input": "s = \"aabccbaabccba\", queries = [[0,2,7,9],[1,3,6,8],[2,4,5,7]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"abacabadabacaba\", queries = [[0,2,9,11],[1,3,10,12],[2,4,8,10]]",
        "output": "[True, True, True]"
      },
      {
        "input": "s = \"abababababab\", queries = [[0,1,5,6],[2,3,4,5],[1,2,3,4]]",
        "output": "Error: list index out of range"
      }
    ]
  },
  {
    "id": 928,
    "difficulty": "Hard",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph",
      "Array",
      "Hash Table"
    ],
    "problemDescription": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.\nWe will remove exactly one node from initial, completely removing it and any connections from this node to any other node.\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\n\u00a0\nExample 1:\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0\nExample 2:\nInput: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\nOutput: 1\nExample 3:\nInput: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\nOutput: 1\n\n\u00a0\nConstraints:\n\nn == graph.length\nn == graph[i].length\n2 <= n <= 300\ngraph[i][j] is 0 or 1.\ngraph[i][j] == graph[j][i]\ngraph[i][i] == 1\n1 <= initial.length <\u00a0n\n0 <= initial[i] <= n - 1\nAll the integers in initial are unique.\n\n",
    "starterCode": "class Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "graph = [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,1,0],[0,0,1,1,1],[0,0,0,1,1]], initial = [3,4]",
        "output": "3"
      },
      {
        "input": "graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]",
        "output": "1"
      },
      {
        "input": "graph = [[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]], initial = [2,3]",
        "output": "2"
      },
      {
        "input": "graph = [[1,0,0,0,0],[0,1,1,0,0],[0,1,1,1,1],[0,0,1,1,0],[0,0,1,0,1]], initial = [3,4]",
        "output": "3"
      },
      {
        "input": "graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [0,1,2]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [0,1]",
        "output": "0"
      },
      {
        "input": "graph = [[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]], initial = [0,1,3]",
        "output": "3"
      },
      {
        "input": "graph = [[1,1,1,0],[1,1,0,1],[1,0,1,1],[0,1,1,1]], initial = [0,1]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0],[1,1,0,0,0],[0,0,1,1,0],[0,0,1,1,1],[0,0,0,1,1]], initial = [3,4]",
        "output": "3"
      },
      {
        "input": "graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]",
        "output": "1"
      },
      {
        "input": "graph = [[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]], initial = [0,1]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0,0,0],[0,1,1,0,1,1,0,0,0,0,0,0,0],[0,1,0,1,0,0,1,0,0,0,0,0,0],[0,0,1,0,1,1,0,1,0,0,0,0,0],[0,0,1,0,1,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0,0,1,0,0,0],[0,0,0,0,1,0,0,1,1,0,1,0,0],[0,0,0,0,0,1,0,1,1,1,0,0,0],[0,0,0,0,0,0,1,0,1,1,1,0,0],[0,0,0,0,0,0,0,1,0,1,1,1,0],[0,0,0,0,0,0,0,0,0,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,1,1,1]], initial = [2,5,8,10,12]",
        "output": "2"
      },
      {
        "input": "graph = [[1,0,0,0,0,0,0,0,0],[0,1,1,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0],[0,0,1,1,1,0,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,0,1,1,1,0,0],[0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,1,1]], initial = [0,2,4,6,8]",
        "output": "2"
      },
      {
        "input": "graph = [[1,0,0,0,0,0,0,0,0,0],[0,1,0,1,1,0,0,0,0,0],[0,0,1,0,0,1,0,0,0,0],[0,1,0,1,1,1,0,0,0,0],[0,1,0,1,1,0,0,0,0,0],[0,0,1,1,0,1,1,0,0,0],[0,0,0,0,0,1,1,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,1]], initial = [1,4,6,8,9]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,1,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0,0],[0,1,1,1,0,0,0,0,0],[0,1,0,0,1,1,0,0,0],[0,0,0,0,1,1,1,0,0],[0,0,0,0,0,1,1,1,1],[0,0,0,0,0,0,1,1,0],[0,0,0,0,0,0,1,0,1]], initial = [3,5,7]",
        "output": "3"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,1,1]], initial = [0,2,4,6,8]",
        "output": "8"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,1,1]], initial = [0,3,7,9]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,1,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0],[0,0,1,0,1,1,0,0,0,0,0],[0,0,0,0,1,1,1,0,0,0,0],[0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,1,1]], initial = [0,4,7,9,10]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0],[0,1,1,1,0,0,0,0],[0,0,1,1,1,0,0,0],[0,0,0,1,1,1,0,0],[0,0,0,0,1,1,1,0],[0,0,0,0,0,1,1,1],[0,0,0,0,0,0,1,1]], initial = [0,4,7]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0],[0,1,1,1,0,0,0,0],[0,0,1,1,1,0,0,0],[0,0,0,1,1,1,0,0],[0,0,0,0,1,1,1,0],[0,0,0,0,0,1,1,1],[0,0,0,0,0,0,1,1]], initial = [1,2,4,5,7]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0,0,0],[0,0,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,0,1,1,1,0,0,0,0],[0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,0,1,1]], initial = [0,4,7,10,11]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,1,1]], initial = [0,3,5,7]",
        "output": "7"
      },
      {
        "input": "graph = [[1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[0,1,1,1,1,0,0,0],[0,0,0,1,1,1,0,0],[0,0,0,0,1,1,1,0],[0,0,0,0,0,1,1,1],[0,0,0,0,0,0,1,1]], initial = [1,4,6,7]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0],[1,1,1,1,0,0,0],[0,1,1,0,1,0,0],[0,1,0,1,0,1,0],[0,0,1,0,1,0,1],[0,0,0,1,0,1,1],[0,0,0,0,1,1,1]], initial = [0,2,3]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,1,0,0,0,0],[1,1,1,0,0,0,0],[1,1,1,1,0,0,0],[0,0,1,1,1,0,0],[0,0,0,1,1,1,0],[0,0,0,0,1,1,1],[0,0,0,0,0,1,1]], initial = [0,3,6]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,1,1,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[0,1,0,1,1,1,0,0,0,0],[0,0,0,0,1,1,1,1,0,0],[0,0,0,0,0,1,1,1,0,1],[0,0,0,0,0,1,1,1,1,0],[0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,1,0,1,1]], initial = [0,2,5,7]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0],[1,1,1,0,0,0],[0,1,1,1,0,0],[0,0,1,1,1,0],[0,0,0,1,1,1],[0,0,0,0,1,1]], initial = [1,2,5]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0],[0,0,1,1,1,0,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,0,1,1,1,0,0],[0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,1,1]], initial = [0,4,7,8]",
        "output": "0"
      },
      {
        "input": "graph = [[1,0,0,0,0,0,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,1,1,1,0,0,0,0],[0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,1,1]], initial = [1,3,5,7,9]",
        "output": "9"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0],[0,1,1,1,0,0,0,0],[0,0,1,1,1,0,0,0],[0,0,0,1,1,1,0,0],[0,0,0,0,1,1,1,0],[0,0,0,0,0,1,1,1],[0,0,0,0,0,0,1,1]], initial = [0,3,5,7]",
        "output": "0"
      },
      {
        "input": "graph = [[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,1,1,0,0,0],[0,0,1,1,0,1,0,0],[0,0,1,0,1,1,0,0],[0,0,0,1,1,1,1,0],[0,0,0,0,0,1,1,1],[0,0,0,0,0,0,1,1]], initial = [0,1,4,6]",
        "output": "6"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[0,1,1,1,1,0,0,0,0,0],[0,0,1,1,0,0,0,0,0,0],[0,0,1,0,1,1,0,0,0,0],[0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,1,1]], initial = [1,3,6,8,9]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0],[0,0,1,1,1,0,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,0,1,1,1,0,0],[0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,1,1]], initial = [1,3,5,7]",
        "output": "1"
      },
      {
        "input": "graph = [[1,0,0,0,0,0,0],[0,1,0,1,0,1,0],[0,0,1,0,1,0,0],[0,1,0,1,0,1,0],[0,0,1,0,1,1,1],[0,1,0,1,1,1,0],[0,0,0,0,1,0,1]], initial = [1,3,4]",
        "output": "4"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0,0,0],[0,0,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,0,1,1,1,0,0,0,0],[0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,0,1,1]], initial = [1,3,5,7,9,11]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,0,0,0,0],[1,1,1,0,0,0],[0,1,1,1,1,0],[0,0,1,1,1,1],[0,0,1,1,1,0],[0,0,0,1,0,1]], initial = [1,3,5]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[0,1,1,1,1,0,0,0,0,0],[0,0,1,1,1,1,0,0,0,0],[0,0,1,1,1,0,0,0,0,0],[0,0,0,1,0,1,1,0,0,0],[0,0,0,0,0,1,1,1,1,0],[0,0,0,0,0,0,1,1,1,1],[0,0,0,0,0,0,1,1,1,1],[0,0,0,0,0,0,0,1,1,1]], initial = [0,2,5,7,9]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,1,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0,0],[0,0,1,0,1,1,0,0,0,0,0,0],[0,0,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,0,1,1,1,0,0,0,0],[0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,0,1,1]], initial = [2,5,8,10,11]",
        "output": "2"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0],[1,1,1,0,0,0,0],[0,1,1,1,1,0,0],[0,0,1,1,0,0,0],[0,0,1,0,1,1,0],[0,0,0,0,1,1,1],[0,0,0,0,0,1,1]], initial = [0,3,5]",
        "output": "5"
      },
      {
        "input": "graph = [[1,0,1,0,1,0,0],[0,1,0,1,0,1,0],[1,0,1,0,1,0,0],[0,1,0,1,0,1,0],[1,0,1,0,1,0,0],[0,1,0,1,0,1,0],[0,0,0,0,0,0,1]], initial = [0,2,5]",
        "output": "5"
      },
      {
        "input": "graph = [[1,1,0,0,0,0],[1,1,1,1,0,0],[0,1,1,0,1,0],[0,1,0,1,1,0],[0,0,1,1,1,1],[0,0,0,0,1,1]], initial = [0,3,4]",
        "output": "4"
      },
      {
        "input": "graph = [[1,1,0,0,1,0],[1,1,1,0,0,0],[0,1,1,1,0,0],[0,0,1,1,0,1],[1,0,0,0,1,0],[0,0,0,1,0,1]], initial = [1,4]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,0,0,0,0],[1,1,1,0,0,0],[0,1,1,1,1,0],[0,0,1,1,0,0],[0,0,1,0,1,1],[0,0,0,0,1,1]], initial = [2,4,5]",
        "output": "2"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0],[0,1,1,1,1,0,0,0,0],[0,0,1,1,0,0,0,0,0],[0,0,1,0,1,1,0,0,0],[0,0,0,0,1,1,1,0,0],[0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,1,1]], initial = [2,3,5,8]",
        "output": "2"
      },
      {
        "input": "graph = [[1,1,1,0,0,0],[1,1,1,0,0,0],[1,1,1,0,0,0],[0,0,0,1,1,0],[0,0,0,1,1,0],[0,0,0,0,0,1]], initial = [0,3,5]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,0],[0,0,1,1,0,0,0,0],[0,0,1,1,1,0,0,0],[0,0,0,1,1,1,0,0],[0,0,0,0,1,1,1,0],[0,0,0,0,0,1,1,1],[0,0,0,0,0,0,1,1]], initial = [2,5,7]",
        "output": "2"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,1,1]], initial = [1,3,5,7,9]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0],[1,1,1,0,0,0,0],[0,1,1,1,0,0,0],[0,0,1,1,1,0,0],[0,0,0,1,1,1,0],[0,0,0,0,1,1,1],[0,0,0,0,0,1,1]], initial = [0,4,6]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,1,0,0,0,0],[1,1,0,1,0,0,0],[1,0,1,1,0,0,0],[0,1,1,1,1,0,0],[0,0,0,1,1,1,0],[0,0,0,0,1,1,1],[0,0,0,0,0,1,1]], initial = [0,3,5,6]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,1,1,1,0,0,0,0],[0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,1,1]], initial = [0,3,5,8,10]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,1,1,1,0,0,0,0],[0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,1,1]], initial = [0,2,4,6,8,10]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,1,0,0,0,0,0],[1,1,0,1,1,0,0,0],[1,0,1,0,1,1,0,0],[0,1,0,1,0,0,1,1],[0,1,1,0,1,1,0,0],[0,0,1,0,1,1,1,0],[0,0,0,1,0,1,1,0],[0,0,0,1,0,0,0,1]], initial = [2,4,6]",
        "output": "2"
      },
      {
        "input": "graph = [[1,1,0,0,0,0],[1,1,1,0,0,0],[0,1,1,1,0,0],[0,0,1,1,1,0],[0,0,0,1,1,1],[0,0,0,0,1,1]], initial = [1,4,5]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,0,0,0,0],[1,1,1,0,0,0],[0,1,1,1,0,0],[0,0,1,1,1,0],[0,0,0,1,1,1],[0,0,0,0,1,1]], initial = [0,1,5]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,1,1]], initial = [2,3,5,7,8]",
        "output": "2"
      },
      {
        "input": "graph = [[1,1,0,0,1,0],[1,1,1,0,0,0],[0,1,1,1,1,0],[0,0,1,1,0,0],[1,0,1,0,1,1],[0,0,0,0,1,1]], initial = [0,3,5]",
        "output": "0"
      },
      {
        "input": "graph = [[1,0,0,0,0,0,0],[0,1,1,1,0,0,0],[0,1,1,1,1,1,0],[0,1,1,1,0,1,1],[0,0,1,0,1,0,0],[0,0,1,1,0,1,0],[0,0,0,1,0,0,1]], initial = [1,3,4,5]",
        "output": "3"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,1,1,1,0,0,0,0],[0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,1,1]], initial = [0,4,7,8,10]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0],[1,1,1,0,0,0],[0,1,1,1,0,0],[0,0,1,1,1,0],[0,0,0,1,1,1],[0,0,0,0,1,1]], initial = [0,2,5]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0],[0,1,1,1,1,0,0,0,0,0,0],[0,0,1,1,1,1,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0,0],[0,0,0,1,0,1,1,0,0,0,0],[0,0,0,0,0,1,1,1,1,0,0],[0,0,0,0,0,0,1,1,1,1,0],[0,0,0,0,0,0,1,1,1,1,1],[0,0,0,0,0,0,0,1,1,1,1],[0,0,0,0,0,0,0,0,1,1,1]], initial = [1,3,4,6,8,10]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,1,0,0],[1,1,1,0,0],[1,1,1,1,1],[0,0,1,1,1],[0,0,1,1,1]], initial = [2,3,4]",
        "output": "2"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,0,0,0,0,0,0,0],[0,0,1,1,1,1,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0,0,0],[0,0,0,1,0,1,1,0,0,0,0,0],[0,0,0,0,0,1,1,1,1,0,0,0],[0,0,0,0,0,0,1,1,1,1,0,0],[0,0,0,0,0,0,1,1,1,1,1,0],[0,0,0,0,0,0,0,1,1,1,1,1],[0,0,0,0,0,0,0,0,1,1,1,1],[0,0,0,0,0,0,0,0,0,1,1,1]], initial = [0,2,5,7,9,10]",
        "output": "0"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0],[1,1,1,0,0,0,0],[0,1,1,1,0,0,0],[0,0,1,1,1,0,0],[0,0,0,1,1,1,0],[0,0,0,0,1,1,0],[0,0,0,0,0,0,1]], initial = [1,2,5]",
        "output": "1"
      },
      {
        "input": "graph = [[1,0,0,0,0,0,0,0],[0,1,1,0,0,0,0,0],[0,1,1,1,0,1,0,0],[0,0,1,1,1,0,0,0],[0,0,0,1,1,1,0,1],[0,0,1,0,1,1,1,0],[0,0,0,0,0,1,1,1],[0,0,0,0,1,0,1,1]], initial = [0,5]",
        "output": "5"
      },
      {
        "input": "graph = [[1,1,1,1,0,0,0],[1,1,1,1,0,0,0],[1,1,1,1,0,0,0],[1,1,1,1,0,0,0],[0,0,0,0,1,1,1],[0,0,0,0,1,1,1],[0,0,0,0,1,1,1]], initial = [1,4,6]",
        "output": "1"
      },
      {
        "input": "graph = [[1,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0],[0,1,1,0,1,0,0,0,0],[0,1,0,1,1,1,0,0,0],[0,0,1,1,1,0,1,0,0],[0,0,0,1,0,1,1,1,0],[0,0,0,0,1,1,1,0,1],[0,0,0,0,0,1,0,1,1],[0,0,0,0,0,0,1,1,1]], initial = [1,3,5,8]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,0],[0,0,1,1,1,0,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,0,1,1,1,0,0],[0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,1,1]], initial = [0,4,8]",
        "output": "4"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,1,1]], initial = [1,4,7,9]",
        "output": "1"
      },
      {
        "input": "graph = [[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,1,0,1,1,0,0],[0,0,1,1,1,0,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,1,0,1,1,1,0,0],[0,0,1,0,0,1,1,1,0],[0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,1,1]], initial = [2,5,7]",
        "output": "7"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,0],[0,0,1,1,1,0,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,0,1,1,1,0,0],[0,0,0,0,0,1,1,1,0],[0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,1,1]], initial = [1,4,7]",
        "output": "1"
      },
      {
        "input": "graph = [[1,1,1,0,0,0,0],[1,1,1,0,0,0,0],[1,1,1,1,0,0,0],[0,0,1,1,1,0,0],[0,0,0,1,1,1,0],[0,0,0,0,1,1,1],[0,0,0,0,0,1,1]], initial = [0,2,4,6]",
        "output": "0"
      },
      {
        "input": "graph = [[1,0,1,0,0,0,0,0],[0,1,0,1,0,0,0,0],[1,0,1,0,1,0,0,0],[0,1,0,1,0,1,0,0],[0,0,1,0,1,0,1,0],[0,0,0,1,0,1,0,1],[0,0,0,0,1,0,1,0],[0,0,0,0,0,1,0,1]], initial = [1,3,5]",
        "output": "5"
      },
      {
        "input": "graph = [[1,1,0,0,0,0,0],[1,1,1,0,1,0,0],[0,1,1,1,0,0,0],[0,0,1,1,1,1,0],[0,1,0,1,1,0,0],[0,0,0,1,0,1,1],[0,0,0,0,0,1,1]], initial = [2,3,6]",
        "output": "2"
      }
    ]
  },
  {
    "id": 1330,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Math"
    ],
    "problemDescription": "You are given an integer array nums. The value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1.\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.\nFind maximum possible value of the final array.\n\u00a0\nExample 1:\n\nInput: nums = [2,3,1,5,4]\nOutput: 10\nExplanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.\n\nExample 2:\n\nInput: nums = [2,4,9,24,2,1,10]\nOutput: 68\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 3 * 104\n-105 <= nums[i] <= 105\nThe answer is guaranteed to fit in a 32-bit integer.\n\n",
    "starterCode": "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,3,2,4,5]",
        "output": "9"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10]",
        "output": "230"
      },
      {
        "input": "nums = [1,-1,2,-2,3,-3]",
        "output": "22"
      },
      {
        "input": "nums = [1,-1,1,-1,1]",
        "output": "8"
      },
      {
        "input": "nums = [1,-1,1,-1,1,-1]",
        "output": "10"
      },
      {
        "input": "nums = [100000,-100000,100000,-100000,100000]",
        "output": "800000"
      },
      {
        "input": "nums = [-10,-5,0,5,10]",
        "output": "40"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5]",
        "output": "8"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "230"
      },
      {
        "input": "nums = [2,4,9,24,2,1,10]",
        "output": "68"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "8"
      },
      {
        "input": "nums = [1,3,2,1,2,3,1]",
        "output": "9"
      },
      {
        "input": "nums = [-1,4,-2,3]",
        "output": "16"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [-100000,100000,-100000,100000]",
        "output": "600000"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90]",
        "output": "200"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "38"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,100000,1,100000,1]",
        "output": "399996"
      },
      {
        "input": "nums = [100,-100,100,-100]",
        "output": "600"
      },
      {
        "input": "nums = [100000,-100000,100000,-100000]",
        "output": "600000"
      },
      {
        "input": "nums = [-100000,100000,-100000,100000,-100000]",
        "output": "800000"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "8"
      },
      {
        "input": "nums = [2,3,1,5,4]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,1,2,1]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "38"
      },
      {
        "input": "nums = [5, 3, 8, 6, 7, 2, 4, 1, 9]",
        "output": "33"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [100000, -100000, 50000, -50000, 25000, -25000, 12500]",
        "output": "687500"
      },
      {
        "input": "nums = [-10, 10, -10, 10, -10, 10, -10, 10, -10, 10]",
        "output": "180"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 8, 6, 4, 2, 0]",
        "output": "29"
      },
      {
        "input": "nums = [-10, 10, -20, 20, -30, 30, -40, 40, -50, 50]",
        "output": "580"
      },
      {
        "input": "nums = [100000, 0, -100000, 100000, 0, -100000, 100000]",
        "output": "900000"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15, 14, 16, 15, 17, 16, 18, 17, 19, 18, 20, 19, 21, 20]",
        "output": "91"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995]",
        "output": "11"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1]",
        "output": "9"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4]",
        "output": "38"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]",
        "output": "53"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 9, 1]",
        "output": "39"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1]",
        "output": "38"
      },
      {
        "input": "nums = [100, -100, 200, -200, 300, -300, 400]",
        "output": "2900"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]",
        "output": "20"
      },
      {
        "input": "nums = [-50000, 50000, -50000, 50000, -50000]",
        "output": "400000"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "9"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]",
        "output": "38"
      },
      {
        "input": "nums = [100000, -100000, 100000, -100000, 100000, -100000]",
        "output": "1000000"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]",
        "output": "21"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "nums = [100000, 0, -100000, 0, 100000, 0, -100000, 0, 100000]",
        "output": "900000"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30, 40, -40, 50, -50]",
        "output": "580"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "23"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "53"
      },
      {
        "input": "nums = [1, -100000, 2, -99999, 3, -99998, 4, -99997, 5, -99996]",
        "output": "900013"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]",
        "output": "23"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 1, 9]",
        "output": "36"
      },
      {
        "input": "nums = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]",
        "output": "0"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 1, 9, 10]",
        "output": "43"
      },
      {
        "input": "nums = [10000, 1000, 100, 10, 1, 0, -1, -10, -100, -1000, -10000]",
        "output": "31000"
      },
      {
        "input": "nums = [1, 2, 3, -1, -2, -3, 4, 5, 6, -4, -5, -6, 7, 8, 9]",
        "output": "70"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]",
        "output": "28"
      },
      {
        "input": "nums = [0, -1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]",
        "output": "219"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "38"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "38"
      },
      {
        "input": "nums = [-100000, 100000, -100000, 100000, -100000, 100000, -100000, 100000, -100000, 100000]",
        "output": "1800000"
      },
      {
        "input": "nums = [100000, -100000, 100000, -100000, 100000]",
        "output": "800000"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "23"
      },
      {
        "input": "nums = [1, 100, 2, 99, 3, 98, 4, 97]",
        "output": "675"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]",
        "output": "17"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "320"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "nums = [-5, 5, -15, 15, -25, 25, -35, 35, -45, 45, -55, 55]",
        "output": "710"
      },
      {
        "input": "nums = [9, 1, 8, 2, 7, 3, 6, 4, 5, 0, 6, 4, 3, 2, 1]",
        "output": "59"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]",
        "output": "107"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]",
        "output": "38"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]",
        "output": "33"
      },
      {
        "input": "nums = [1, 2, 3, 100, 3, 2, 1, 99, 2, 1, 0]",
        "output": "399"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30, 40, -40]",
        "output": "380"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "68"
      },
      {
        "input": "nums = [100000, -100000, 100000, -100000, 100000, -100000, 100000, -100000]",
        "output": "1400000"
      },
      {
        "input": "nums = [-100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000]",
        "output": "0"
      },
      {
        "input": "nums = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991]",
        "output": "23"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]",
        "output": "36"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15]",
        "output": "236"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "32"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]",
        "output": "49"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 10000, 6, 7, 8, 9, 10]",
        "output": "20011"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "0"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]",
        "output": "230"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "53"
      },
      {
        "input": "nums = [100, -100, 200, -200, 300, -300, 400, -400, 500, -500]",
        "output": "5800"
      },
      {
        "input": "nums = [1, 200000, 3, 400000, 5, 600000, 7, 800000, 9, 1000000]",
        "output": "5799951"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 4000, 3000, 2000, 1000]",
        "output": "12000"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "31"
      },
      {
        "input": "nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]",
        "output": "859"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9]",
        "output": "48"
      },
      {
        "input": "nums = [5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5, -5, 5]",
        "output": "140"
      }
    ]
  },
  {
    "id": 3088,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "String",
      "Counting Sort",
      "Sorting"
    ],
    "problemDescription": "We call a string s of even length n an anti-palindrome if for each index 0 <= i < n, s[i] != s[n - i - 1].\nGiven a string s, your task is to make s an anti-palindrome by doing any number of operations (including zero).\nIn one operation, you can select two characters from s and swap them.\nReturn the resulting string. If multiple strings meet the conditions, return the lexicographically smallest one. If it can't be made into an anti-palindrome, return \"-1\".\n\u00a0\nExample 1:\n\nInput: s = \"abca\"\nOutput: \"aabc\"\nExplanation:\n\"aabc\" is an anti-palindrome string since s[0] != s[3] and s[1] != s[2]. Also, it is a rearrangement of \"abca\".\n\nExample 2:\n\nInput: s = \"abba\"\nOutput: \"aabb\"\nExplanation:\n\"aabb\" is an anti-palindrome string since s[0] != s[3] and s[1] != s[2]. Also, it is a rearrangement of \"abba\".\n\nExample 3:\n\nInput: s = \"cccd\"\nOutput: \"-1\"\nExplanation:\nYou can see that no matter how you rearrange the characters of \"cccd\", either s[0] == s[3] or s[1] == s[2]. So it can not form an anti-palindrome string.\n\n\u00a0\nConstraints:\n\n2 <= s.length <= 105\ns.length % 2 == 0\ns consists only of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def makeAntiPalindrome(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"aaabbbccc\"",
        "output": "aaabccbbc"
      },
      {
        "input": "s = \"cccd\"",
        "output": "-1"
      },
      {
        "input": "s = \"aabbaa\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdef\"",
        "output": "abcdef"
      },
      {
        "input": "s = \"abcdcba\"",
        "output": "aabccbd"
      },
      {
        "input": "s = \"abcdefgihj\"",
        "output": "abcdefghij"
      },
      {
        "input": "s = \"abcdefgihjklmnopqrstuvwxyz\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"mnopqr\"",
        "output": "mnopqr"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcddcba\"",
        "output": "aabbccdd"
      },
      {
        "input": "s = \"abcabc\"",
        "output": "aabcbc"
      },
      {
        "input": "s = \"leetcode\"",
        "output": "cdeeloet"
      },
      {
        "input": "s = \"abba\"",
        "output": "aabb"
      },
      {
        "input": "s = \"abacab\"",
        "output": "aaabbc"
      },
      {
        "input": "s = \"zzzzzzzzzz\"",
        "output": "-1"
      },
      {
        "input": "s = \"xyzyxzyx\"",
        "output": "xxxyzyyz"
      },
      {
        "input": "s = \"abcdefghijklmnop\"",
        "output": "abcdefghijklmnop"
      },
      {
        "input": "s = \"aaabbb\"",
        "output": "aaabbb"
      },
      {
        "input": "s = \"aabbccddeeff\"",
        "output": "aabbccddeeff"
      },
      {
        "input": "s = \"zzzzzz\"",
        "output": "-1"
      },
      {
        "input": "s = \"aabbcc\"",
        "output": "aabcbc"
      },
      {
        "input": "s = \"aaabbbcccddd\"",
        "output": "aaabbbcccddd"
      },
      {
        "input": "s = \"abacaba\"",
        "output": "-1"
      },
      {
        "input": "s = \"abca\"",
        "output": "aabc"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aaaabbbbccccdddd\"",
        "output": "aaaabbbbccccdddd"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabbaabb\"",
        "output": "aaaaaaaaaaaabbbbbbbbbbbb"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffffffffff\"",
        "output": "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffffffffff"
      },
      {
        "input": "s = \"aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnnooooppppqrrrrssttttuuuuvvvvwwwwwxxxxxyyyyyzzzzz\"",
        "output": "aaabbbcccdddeeefffggghhhiiiijjjjkkkkllllmmmmnnnoooonppppqrrrrssttttuuuuvvvvwwwwwxxxxxyyyyyzzzzz"
      },
      {
        "input": "s = \"zzzzzyyyyyxxxxxwwwvvvuuutttsssrqqppoonnmmllkkjjiihhggffeedcba\"",
        "output": "abcdeeffgghhiijjkkllmmnnooppqqrssstttuuuvvvwwwxxxxxyyyyyzzzzz"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\"",
        "output": "aaaaaaaaaabbbbbcccccbbbbbccccc"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwxyzzzz\"",
        "output": "aabbccddeeffgghhiijjkkllmnnmooppqqrrssttuuvvwxyzzzz"
      },
      {
        "input": "s = \"mnbvcxzlkjhgfdsapoiuytrewqzxcvbnmlkjhgfdsapoiuytrewq\"",
        "output": "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "aaaaaaaaaaaaaaaabbbbbbbbccccccccbbbbbbbbcccccccc"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzqq\"",
        "output": "aabbccddeeffgghhiijjkkllmmnonoppqqqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"zyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyx\"",
        "output": "xxxxxxxxxxxxxxxxxxxyyyyyyyyyzzzzzzzzzzyyyyyyyyyyzzzzzzzzz"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvqponmlkjihgfedcba\"",
        "output": "aabbccddeeffgghhiijkkjllmmnnooppqqrstuv"
      },
      {
        "input": "s = \"cccccccccccccccccccccccccccccccccccccccccccccccc\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"aabbbccccddddeeeffffggg\"",
        "output": "aabbbccccddeeeddffffggg"
      },
      {
        "input": "s = \"abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef\"",
        "output": "aaaaaaaaaabbbbbbbbbbccccccccccddddddddddeeeeeeeeeeffffffffff"
      },
      {
        "input": "s = \"aaabbbaaaccbbaaa\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvsyzxwvutsrqponmlkjihgfedcba\"",
        "output": "aabbccddeeffgghhiijjkkllmmnnooppqqrrsssttuuvvwxyz"
      },
      {
        "input": "s = \"aabbaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "aaaabbbbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxyyyyzzzz\"",
        "output": "aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmnnnnmooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxyyyyzzzz"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\"",
        "output": "aabbccddeeffgghhiijjkkllmnnmooppqqrrssttuuvvwwxxyyz"
      },
      {
        "input": "s = \"aaaaabbbbbccccddeeeeffffgggghhhhiiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz\"",
        "output": "aaaaabbbbbccccddeeeeffffgggghhhhiiiiijjjjkkkkllllmmmnnnnmooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabb\"",
        "output": "aaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbb"
      },
      {
        "input": "s = \"abababababababababababababab\"",
        "output": "aaaaaaaaaaaaaabbbbbbbbbbbbbb"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "-1"
      },
      {
        "input": "s = \"aabbaabbaabbaabb\"",
        "output": "aaaaaaaabbbbbbbb"
      }
    ]
  },
  {
    "id": 2234,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Two Pointers",
      "Binary Search",
      "Enumeration",
      "Prefix Sum",
      "Sorting"
    ],
    "problemDescription": "Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens.\nYou are given a 0-indexed integer array flowers of size n, where flowers[i] is the number of flowers already planted in the ith garden. Flowers that are already planted cannot be removed. You are then given another integer newFlowers, which is the maximum number of flowers that Alice can additionally plant. You are also given the integers target, full, and partial.\nA garden is considered complete if it has at least target flowers. The total beauty of the gardens is then determined as the sum of the following:\n\nThe number of complete gardens multiplied by full.\nThe minimum number of flowers in any of the incomplete gardens multiplied by partial. If there are no incomplete gardens, then this value will be 0.\n\nReturn the maximum total beauty that Alice can obtain after planting at most newFlowers flowers.\n\u00a0\nExample 1:\n\nInput: flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1\nOutput: 14\nExplanation: Alice can plant\n- 2 flowers in the 0th garden\n- 3 flowers in the 1st garden\n- 1 flower in the 2nd garden\n- 1 flower in the 3rd garden\nThe gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.\nThere is 1 garden that is complete.\nThe minimum number of flowers in the incomplete gardens is 2.\nThus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.\nNo other way of planting flowers can obtain a total beauty higher than 14.\n\nExample 2:\n\nInput: flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6\nOutput: 30\nExplanation: Alice can plant\n- 3 flowers in the 0th garden\n- 0 flowers in the 1st garden\n- 0 flowers in the 2nd garden\n- 2 flowers in the 3rd garden\nThe gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.\nThere are 3 gardens that are complete.\nThe minimum number of flowers in the incomplete gardens is 4.\nThus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.\nNo other way of planting flowers can obtain a total beauty higher than 30.\nNote that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.\n\n\u00a0\nConstraints:\n\n1 <= flowers.length <= 105\n1 <= flowers[i], target <= 105\n1 <= newFlowers <= 1010\n1 <= full, partial <= 105\n\n",
    "starterCode": "class Solution:\n    def maximumBeauty(self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int) -> int:\n        ",
    "testCases": [
      {
        "input": "flowers = [10,20,30,40,50], newFlowers = 100, target = 25, full = 5, partial = 2",
        "output": "68"
      },
      {
        "input": "flowers = [1,1,1,1], newFlowers = 15, target = 3, full = 5, partial = 3",
        "output": "21"
      },
      {
        "input": "flowers = [5,5,5,5], newFlowers = 10, target = 5, full = 10, partial = 5",
        "output": "40"
      },
      {
        "input": "flowers = [10,20,30], newFlowers = 100, target = 25, full = 50, partial = 10",
        "output": "340"
      },
      {
        "input": "flowers = [10,1,2,3], newFlowers = 15, target = 10, full = 5, partial = 2",
        "output": "20"
      },
      {
        "input": "flowers = [1,2,3,4,5], newFlowers = 15, target = 5, full = 10, partial = 5",
        "output": "60"
      },
      {
        "input": "flowers = [5,5,5,5], newFlowers = 10, target = 5, full = 10, partial = 1",
        "output": "40"
      },
      {
        "input": "flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6",
        "output": "30"
      },
      {
        "input": "flowers = [100000,100000,100000], newFlowers = 300000, target = 100000, full = 100000, partial = 100000",
        "output": "300000"
      },
      {
        "input": "flowers = [1,2,3,4,5], newFlowers = 15, target = 4, full = 20, partial = 5",
        "output": "100"
      },
      {
        "input": "flowers = [10,10,10], newFlowers = 0, target = 10, full = 100, partial = 50",
        "output": "300"
      },
      {
        "input": "flowers = [1,2,3,4,5], newFlowers = 15, target = 5, full = 10, partial = 3",
        "output": "52"
      },
      {
        "input": "flowers = [5,5,5,5], newFlowers = 10, target = 5, full = 10, partial = 10",
        "output": "40"
      },
      {
        "input": "flowers = [5,5,5,5], newFlowers = 10, target = 5, full = 2, partial = 6",
        "output": "8"
      },
      {
        "input": "flowers = [1,1,1,1], newFlowers = 20, target = 3, full = 7, partial = 3",
        "output": "28"
      },
      {
        "input": "flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1",
        "output": "14"
      },
      {
        "input": "flowers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], newFlowers = 100, target = 10, full = 100, partial = 1",
        "output": "1000"
      },
      {
        "input": "flowers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], newFlowers = 100, target = 10, full = 30, partial = 20",
        "output": "450"
      },
      {
        "input": "flowers = [100000, 50000, 25000, 12500, 6250, 3125, 1562, 781, 390, 195], newFlowers = 1000000, target = 50000, full = 500, partial = 250",
        "output": "12504250"
      },
      {
        "input": "flowers = [50000, 100000, 25000, 75000], newFlowers = 100000, target = 80000, full = 500, partial = 200",
        "output": "16001300"
      },
      {
        "input": "flowers = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000], newFlowers = 10000, target = 2000, full = 1000, partial = 500",
        "output": "1008500"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], newFlowers = 50, target = 7, full = 15, partial = 3",
        "output": "153"
      },
      {
        "input": "flowers = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], newFlowers = 10000000000, target = 500000000, full = 100000, partial = 50000",
        "output": "25000000850000"
      },
      {
        "input": "flowers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], newFlowers = 500, target = 55, full = 15, partial = 7",
        "output": "513"
      },
      {
        "input": "flowers = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000], newFlowers = 1000000, target = 90000, full = 1000, partial = 500",
        "output": "10000"
      },
      {
        "input": "flowers = [1, 10, 100, 1000, 10000, 100000], newFlowers = 100000, target = 50000, full = 1000, partial = 500",
        "output": "11112000"
      },
      {
        "input": "flowers = [1,5,9,13,17,21], newFlowers = 25, target = 15, full = 10, partial = 3",
        "output": "74"
      },
      {
        "input": "flowers = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000], newFlowers = 1000000, target = 100000, full = 1, partial = 1",
        "output": "10"
      },
      {
        "input": "flowers = [50, 40, 30, 20, 10, 0, 0, 0, 0, 0], newFlowers = 150, target = 35, full = 100, partial = 20",
        "output": "940"
      },
      {
        "input": "flowers = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], newFlowers = 10000000000, target = 100000, full = 1000, partial = 500",
        "output": "50008500"
      },
      {
        "input": "flowers = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], newFlowers = 5000, target = 500, full = 100, partial = 50",
        "output": "25850"
      },
      {
        "input": "flowers = [1,3,5,7,9,11,13,15,17,19], newFlowers = 50, target = 10, full = 15, partial = 5",
        "output": "180"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], newFlowers = 50, target = 8, full = 50, partial = 10",
        "output": "770"
      },
      {
        "input": "flowers = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], newFlowers = 50, target = 8, full = 20, partial = 5",
        "output": "215"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], newFlowers = 100, target = 5, full = 20, partial = 15",
        "output": "240"
      },
      {
        "input": "flowers = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], newFlowers = 100, target = 4, full = 100, partial = 50",
        "output": "1050"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], newFlowers = 1000, target = 5, full = 10, partial = 1",
        "output": "100"
      },
      {
        "input": "flowers = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], newFlowers = 50, target = 5, full = 100, partial = 50",
        "output": "1000"
      },
      {
        "input": "flowers = [1,5,9,13,17,21,25,29,33,37], newFlowers = 150, target = 35, full = 20, partial = 3",
        "output": "249"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], newFlowers = 1000, target = 10, full = 20, partial = 10",
        "output": "270"
      },
      {
        "input": "flowers = [10,10,10,10,10,10,10,10,10,10], newFlowers = 1000, target = 5, full = 100, partial = 50",
        "output": "1000"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], newFlowers = 100, target = 10, full = 30, partial = 15",
        "output": "555"
      },
      {
        "input": "flowers = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000], newFlowers = 1000000, target = 100000, full = 100000, partial = 100000",
        "output": "8030300000"
      },
      {
        "input": "flowers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], newFlowers = 1000, target = 100, full = 50, partial = 25",
        "output": "3175"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,10], newFlowers = 10000000000, target = 1, full = 100, partial = 50",
        "output": "1000"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], newFlowers = 500, target = 20, full = 150, partial = 75",
        "output": "5775"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], newFlowers = 500, target = 15, full = 25, partial = 10",
        "output": "615"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], newFlowers = 50, target = 5, full = 10, partial = 3",
        "output": "102"
      },
      {
        "input": "flowers = [99990, 99991, 99992, 99993, 99994, 99995, 99996, 99997, 99998, 99999], newFlowers = 100000, target = 100000, full = 100000, partial = 100000",
        "output": "10000800000"
      },
      {
        "input": "flowers = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], newFlowers = 100, target = 11, full = 50, partial = 25",
        "output": "950"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], newFlowers = 100, target = 5, full = 50, partial = 20",
        "output": "530"
      },
      {
        "input": "flowers = [90, 90, 90, 90, 90, 90, 90, 90, 90, 90], newFlowers = 100, target = 95, full = 1000, partial = 500",
        "output": "56000"
      },
      {
        "input": "flowers = [90000, 80000, 70000, 60000, 50000], newFlowers = 300000, target = 100000, full = 1000, partial = 500",
        "output": "50003500"
      },
      {
        "input": "flowers = [1,1,1,1,1,1,1,1,1,1], newFlowers = 1, target = 1, full = 100, partial = 50",
        "output": "1000"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], newFlowers = 300, target = 15, full = 100, partial = 50",
        "output": "2600"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], newFlowers = 50, target = 10, full = 20, partial = 10",
        "output": "270"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], newFlowers = 10000000000, target = 2, full = 1, partial = 1",
        "output": "10"
      },
      {
        "input": "flowers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], newFlowers = 1000, target = 60, full = 50, partial = 25",
        "output": "1925"
      },
      {
        "input": "flowers = [1,1,1,1,1,1,1,1,1,1], newFlowers = 1000, target = 5, full = 100, partial = 10",
        "output": "1000"
      },
      {
        "input": "flowers = [10,20,30,40,50,60,70,80,90,100], newFlowers = 1000, target = 55, full = 50, partial = 10",
        "output": "990"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,10], newFlowers = 50, target = 7, full = 20, partial = 5",
        "output": "210"
      },
      {
        "input": "flowers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], newFlowers = 100, target = 10, full = 20, partial = 5",
        "output": "225"
      },
      {
        "input": "flowers = [100000,100000,100000,100000,100000,100000,100000,100000,100000,100000], newFlowers = 1000000, target = 100000, full = 100000, partial = 50000",
        "output": "1000000"
      },
      {
        "input": "flowers = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], newFlowers = 50, target = 10, full = 20, partial = 10",
        "output": "270"
      },
      {
        "input": "flowers = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], newFlowers = 500, target = 3, full = 20, partial = 10",
        "output": "200"
      },
      {
        "input": "flowers = [1,10,20,30,40,50,60,70,80,90], newFlowers = 500, target = 45, full = 50, partial = 10",
        "output": "890"
      },
      {
        "input": "flowers = [5, 5, 5, 5, 5], newFlowers = 25, target = 7, full = 50, partial = 5",
        "output": "250"
      },
      {
        "input": "flowers = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], newFlowers = 3000, target = 500, full = 50, partial = 25",
        "output": "12925"
      },
      {
        "input": "flowers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], newFlowers = 50, target = 10, full = 10, partial = 1",
        "output": "100"
      },
      {
        "input": "flowers = [50000, 25000, 12500, 6250, 3125, 1562, 781, 390, 195, 97], newFlowers = 100000, target = 10000, full = 1000, partial = 500",
        "output": "5008500"
      },
      {
        "input": "flowers = [5,5,5,5,5,5,5,5,5,5], newFlowers = 20, target = 6, full = 20, partial = 10",
        "output": "230"
      },
      {
        "input": "flowers = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], newFlowers = 5000, target = 500, full = 1000, partial = 100",
        "output": "58900"
      },
      {
        "input": "flowers = [10,20,30,40,50,60,70,80,90,100], newFlowers = 1000, target = 60, full = 50, partial = 10",
        "output": "1040"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], newFlowers = 1000, target = 5, full = 100, partial = 50",
        "output": "2100"
      },
      {
        "input": "flowers = [50, 30, 20, 10, 5], newFlowers = 150, target = 25, full = 10, partial = 5",
        "output": "160"
      },
      {
        "input": "flowers = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], newFlowers = 1000, target = 2, full = 50, partial = 25",
        "output": "4250"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], newFlowers = 30, target = 6, full = 10, partial = 3",
        "output": "105"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,10], newFlowers = 0, target = 5, full = 50, partial = 10",
        "output": "310"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], newFlowers = 1000, target = 5, full = 100, partial = 50",
        "output": "8400"
      },
      {
        "input": "flowers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], newFlowers = 100, target = 10, full = 20, partial = 10",
        "output": "270"
      },
      {
        "input": "flowers = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], newFlowers = 1000, target = 40, full = 50, partial = 20",
        "output": "1230"
      },
      {
        "input": "flowers = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20], newFlowers = 200, target = 25, full = 100, partial = 50",
        "output": "2100"
      },
      {
        "input": "flowers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], newFlowers = 500, target = 40, full = 20, partial = 10",
        "output": "570"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], newFlowers = 700, target = 20, full = 50, partial = 20",
        "output": "1580"
      },
      {
        "input": "flowers = [100, 200, 300, 400, 500], newFlowers = 1000, target = 350, full = 15, partial = 5",
        "output": "1805"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], newFlowers = 15, target = 5, full = 100, partial = 10",
        "output": "1000"
      },
      {
        "input": "flowers = [10,20,30,40,50,60,70,80,90,100], newFlowers = 150, target = 80, full = 150, partial = 75",
        "output": "4950"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], newFlowers = 30, target = 7, full = 10, partial = 5",
        "output": "120"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], newFlowers = 1, target = 1, full = 1000, partial = 500",
        "output": "10000"
      },
      {
        "input": "flowers = [1,10,20,30,40,50,60,70,80,90], newFlowers = 200, target = 55, full = 100, partial = 50",
        "output": "3600"
      },
      {
        "input": "flowers = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], newFlowers = 50, target = 10, full = 100, partial = 50",
        "output": "1350"
      },
      {
        "input": "flowers = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000], newFlowers = 1000000, target = 50000, full = 1000, partial = 500",
        "output": "25008500"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], newFlowers = 250, target = 5, full = 100, partial = 50",
        "output": "1100"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], newFlowers = 500, target = 15, full = 75, partial = 35",
        "output": "1915"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], newFlowers = 50, target = 8, full = 20, partial = 10",
        "output": "250"
      },
      {
        "input": "flowers = [90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0], newFlowers = 150000, target = 60000, full = 500, partial = 200",
        "output": "10002000"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], newFlowers = 100, target = 5, full = 100, partial = 50",
        "output": "1100"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,10], newFlowers = 50, target = 7, full = 100, partial = 50",
        "output": "1200"
      },
      {
        "input": "flowers = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], newFlowers = 100, target = 5, full = 50, partial = 25",
        "output": "1050"
      },
      {
        "input": "flowers = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], newFlowers = 45, target = 5, full = 15, partial = 10",
        "output": "175"
      },
      {
        "input": "flowers = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], newFlowers = 250, target = 30, full = 200, partial = 100",
        "output": "4700"
      },
      {
        "input": "flowers = [5,5,5,5,5,5,5,5,5,5], newFlowers = 100, target = 7, full = 20, partial = 5",
        "output": "210"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5], newFlowers = 1000000, target = 10, full = 100000, partial = 10000",
        "output": "500000"
      },
      {
        "input": "flowers = [2, 4, 6, 8, 10, 12, 14], newFlowers = 30, target = 15, full = 7, partial = 5",
        "output": "71"
      },
      {
        "input": "flowers = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991], newFlowers = 10000, target = 995, full = 100, partial = 50",
        "output": "50600"
      },
      {
        "input": "flowers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], newFlowers = 500, target = 75, full = 1000, partial = 100",
        "output": "16400"
      },
      {
        "input": "flowers = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], newFlowers = 5000, target = 750, full = 250, partial = 125",
        "output": "97125"
      },
      {
        "input": "flowers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], newFlowers = 200, target = 10, full = 50, partial = 25",
        "output": "925"
      },
      {
        "input": "flowers = [1,2,3,4,5,6,7,8,9,10], newFlowers = 50, target = 10, full = 10, partial = 1",
        "output": "100"
      },
      {
        "input": "flowers = [100000, 99999, 99998, 99997, 99996, 99995], newFlowers = 150000, target = 100000, full = 100000, partial = 100000",
        "output": "10000400000"
      },
      {
        "input": "flowers = [1, 5, 9, 13, 17, 21], newFlowers = 20, target = 15, full = 10, partial = 3",
        "output": "67"
      },
      {
        "input": "flowers = [50, 40, 30, 20, 10], newFlowers = 100, target = 35, full = 100, partial = 50",
        "output": "2100"
      },
      {
        "input": "flowers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], newFlowers = 100, target = 5, full = 5, partial = 2",
        "output": "53"
      }
    ]
  },
  {
    "id": 25,
    "difficulty": "Hard",
    "tags": [
      "Recursion",
      "Linked List"
    ],
    "problemDescription": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n\u00a0\nExample 1:\n\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\nExample 2:\n\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is n.\n1 <= k <= n <= 5000\n0 <= Node.val <= 1000\n\n\u00a0\nFollow-up: Can you solve the problem in O(1) extra memory space?\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [1,2], k = 2",
        "output": "[2, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6], k = 4",
        "output": "[4, 3, 2, 1, 5, 6]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7], k = 3",
        "output": "[3, 2, 1, 6, 5, 4, 7]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6]"
      },
      {
        "input": "head = [], k = 1",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9], k = 5",
        "output": "[5, 4, 3, 2, 1, 6, 7, 8, 9]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11], k = 4",
        "output": "[4, 3, 2, 1, 8, 7, 6, 5, 9, 10, 11]"
      },
      {
        "input": "head = [1,2,3,4,5], k = 2",
        "output": "[2, 1, 4, 3, 5]"
      },
      {
        "input": "head = [1,2,3,4,5,6], k = 2",
        "output": "[2, 1, 4, 3, 6, 5]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11], k = 2",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 11]"
      },
      {
        "input": "head = [1,2,3,4,5,6], k = 3",
        "output": "[3, 2, 1, 6, 5, 4]"
      },
      {
        "input": "head = [1,2,3,4,5], k = 3",
        "output": "[3, 2, 1, 4, 5]"
      },
      {
        "input": "head = [1,2], k = 1",
        "output": "[1, 2]"
      },
      {
        "input": "head = [1], k = 1",
        "output": "[1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8], k = 4",
        "output": "[4, 3, 2, 1, 8, 7, 6, 5]"
      },
      {
        "input": "head = [1,2,3], k = 1",
        "output": "[1, 2, 3]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9], k = 3",
        "output": "[3, 2, 1, 6, 5, 4, 9, 8, 7]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21], k = 6",
        "output": "[6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7, 18, 17, 16, 15, 14, 13, 19, 20, 21]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60], k = 13",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 53, 54, 55, 56, 57, 58, 59, 60]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], k = 4",
        "output": "[4, 3, 2, 1, 8, 7, 6, 5, 9, 10]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], k = 7",
        "output": "[7, 6, 5, 4, 3, 2, 1, 14, 13, 12, 11, 10, 9, 8]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 6",
        "output": "[6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7, 18, 17, 16, 15, 14, 13, 19, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 11",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 23, 24, 25]"
      },
      {
        "input": "head = [9,1,7,3,8,4,6,2,5,0], k = 3",
        "output": "[7, 1, 9, 4, 8, 3, 5, 2, 6, 0]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 12",
        "output": "[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 7",
        "output": "[7, 6, 5, 4, 3, 2, 1, 14, 13, 12, 11, 10, 9, 8, 21, 20, 19, 18, 17, 16, 15, 28, 27, 26, 25, 24, 23, 22, 29, 30]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12], k = 4",
        "output": "[4, 3, 2, 1, 8, 7, 6, 5, 12, 11, 10, 9]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 7",
        "output": "[7, 6, 5, 4, 3, 2, 1, 14, 13, 12, 11, 10, 9, 8, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12], k = 6",
        "output": "[6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 10",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21]"
      },
      {
        "input": "head = [1,2,3], k = 3",
        "output": "[3, 2, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22], k = 11",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], k = 50",
        "output": "[50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 3",
        "output": "[3, 2, 1, 6, 5, 4, 9, 8, 7, 12, 11, 10, 15, 14, 13, 18, 17, 16, 19, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27], k = 20",
        "output": "[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 21, 22, 23, 24, 25, 26, 27]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 13",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21], k = 10",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 21]"
      },
      {
        "input": "head = [1,2,3,4], k = 4",
        "output": "[4, 3, 2, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23], k = 16",
        "output": "[16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 17, 18, 19, 20, 21, 22, 23]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12], k = 5",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 11, 12]"
      },
      {
        "input": "head = [42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42], k = 6",
        "output": "[42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]"
      },
      {
        "input": "head = [5,1,9,7,4,6,2,3], k = 2",
        "output": "[1, 5, 7, 9, 6, 4, 3, 2]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], k = 11",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 34, 35, 36, 37, 38, 39, 40]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26], k = 19",
        "output": "[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 21, 22, 23, 24, 25, 26]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 5",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 15, 14, 13, 12, 11]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], k = 12",
        "output": "[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 49, 50]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1], k = 9",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13], k = 7",
        "output": "[7, 6, 5, 4, 3, 2, 1, 8, 9, 10, 11, 12, 13]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11], k = 3",
        "output": "[3, 2, 1, 6, 5, 4, 9, 8, 7, 10, 11]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], k = 5",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 11, 12, 13, 14]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13], k = 4",
        "output": "[4, 3, 2, 1, 8, 7, 6, 5, 12, 11, 10, 9, 13]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21], k = 14",
        "output": "[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 15, 16, 17, 18, 19, 20, 21]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 5",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 15, 14, 13, 12, 11, 20, 19, 18, 17, 16, 25, 24, 23, 22, 21]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11], k = 11",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 6",
        "output": "[6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7, 13, 14, 15, 16]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], k = 11",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 12, 13, 14, 15, 16, 17, 18]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 8",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962,961,960], k = 3",
        "output": "[998, 999, 1000, 995, 996, 997, 992, 993, 994, 989, 990, 991, 986, 987, 988, 983, 984, 985, 980, 981, 982, 977, 978, 979, 974, 975, 976, 971, 972, 973, 968, 969, 970, 965, 966, 967, 962, 963, 964, 961, 960]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75], k = 15",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800], k = 5",
        "output": "[500, 400, 300, 200, 100, 600, 700, 800]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], k = 1",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13], k = 5",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 11, 12, 13]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28], k = 21",
        "output": "[21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 22, 23, 24, 25, 26, 27, 28]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 18",
        "output": "[18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 6",
        "output": "[6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7, 13, 14, 15]"
      },
      {
        "input": "head = [7,8,9,10,11,12,13,14,15], k = 4",
        "output": "[10, 9, 8, 7, 14, 13, 12, 11, 15]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], k = 10",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15, 16, 17]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 7",
        "output": "[7, 6, 5, 4, 3, 2, 1, 14, 13, 12, 11, 10, 9, 8, 15, 16]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 8",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7], k = 1",
        "output": "[1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], k = 10",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 31]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29], k = 22",
        "output": "[22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 23, 24, 25, 26, 27, 28, 29]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 9",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 18, 17, 16, 15, 14, 13, 12, 11, 10, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13], k = 6",
        "output": "[6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7, 13]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 8",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9, 24, 23, 22, 21, 20, 19, 18, 17, 25]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36], k = 14",
        "output": "[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 29, 30, 31, 32, 33, 34, 35, 36]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 19",
        "output": "[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8], k = 2",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 9",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 18, 17, 16, 15, 14, 13, 12, 11, 10, 27, 26, 25, 24, 23, 22, 21, 20, 19, 28, 29, 30]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21], k = 7",
        "output": "[7, 6, 5, 4, 3, 2, 1, 14, 13, 12, 11, 10, 9, 8, 21, 20, 19, 18, 17, 16, 15]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 3",
        "output": "[3, 2, 1, 6, 5, 4, 9, 8, 7, 12, 11, 10, 15, 14, 13, 16]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], k = 13",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 27, 28, 29, 30, 31]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 9",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 11, 12, 13, 14, 15, 16]"
      },
      {
        "input": "head = [5,4,3,2,1,0,-1,-2,-3,-4,-5], k = 5",
        "output": "[1, 2, 3, 4, 5, -4, -3, -2, -1, 0, -5]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], k = 2",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 19]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], k = 6",
        "output": "[6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7, 13, 14, 15, 16, 17]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 15",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11], k = 7",
        "output": "[-1, 0, 1, 2, 3, 4, 5, -8, -7, -6, -5, -4, -3, -2, -9, -10, -11]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 5",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120,130], k = 3",
        "output": "[30, 20, 10, 60, 50, 40, 90, 80, 70, 120, 110, 100, 130]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], k = 10",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11], k = 5",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 11]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 1",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], k = 1",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], k = 9",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 18, 17, 16, 15, 14, 13, 12, 11, 10]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110], k = 5",
        "output": "[50, 40, 30, 20, 10, 100, 90, 80, 70, 60, 110]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], k = 7",
        "output": "[7, 6, 5, 4, 3, 2, 1, 14, 13, 12, 11, 10, 9, 8, 15, 16, 17]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], k = 9",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 18, 17, 16, 15, 14, 13, 12, 11, 10, 27, 26, 25, 24, 23, 22, 21, 20, 19, 36, 35, 34, 33, 32, 31, 30, 29, 28, 37, 38, 39, 40]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 13",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], k = 5",
        "output": "[5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 15, 14, 13, 12, 11, 20, 19, 18, 17, 16, 25, 24, 23, 22, 21, 30, 29, 28, 27, 26, 31]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 2",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 2",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962,961,960], k = 20",
        "output": "[981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 960]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], k = 12",
        "output": "[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 13, 14, 15, 16, 17, 18, 19]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22], k = 15",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 16, 17, 18, 19, 20, 21, 22]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 8",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24], k = 17",
        "output": "[17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 18, 19, 20, 21, 22, 23, 24]"
      },
      {
        "input": "head = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80], k = 15",
        "output": "[85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 84, 83, 82, 81, 80]"
      }
    ]
  },
  {
    "id": 2509,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Array",
      "Binary Tree"
    ],
    "problemDescription": "You are given an integer n. There is a complete binary tree with 2n - 1 nodes. The root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where:\n\nThe left node has the value 2 * val, and\nThe right node has the value 2 * val + 1.\n\nYou are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, solve the following problem:\n\nAdd an edge between the nodes with values ai and bi.\nFind the length of the cycle in the graph.\nRemove the added edge between nodes with values ai and bi.\n\nNote that:\n\nA cycle is a path that starts and ends at the same node, and each edge in the path is visited only once.\nThe length of a cycle is the number of edges visited in the cycle.\nThere could be multiple edges between two nodes in the tree after adding the edge of the query.\n\nReturn an array answer of length m where answer[i] is the answer to the ith query.\n\u00a0\nExample 1:\n\n\nInput: n = 3, queries = [[5,3],[4,7],[2,3]]\nOutput: [4,5,3]\nExplanation: The diagrams above show the tree of 23 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge.\n- After adding the edge between nodes 3 and 5, the graph contains a cycle of nodes [5,2,1,3]. Thus answer to the first query is 4. We delete the added edge and process the next query.\n- After adding the edge between nodes 4 and 7, the graph contains a cycle of nodes [4,2,1,3,7]. Thus answer to the second query is 5. We delete the added edge and process the next query.\n- After adding the edge between nodes 2 and 3, the graph contains a cycle of nodes [2,1,3]. Thus answer to the third query is 3. We delete the added edge.\n\nExample 2:\n\n\nInput: n = 2, queries = [[1,2]]\nOutput: [2]\nExplanation: The diagram above shows the tree of 22 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge.\n- After adding the edge between nodes 1 and 2, the graph contains a cycle of nodes [2,1]. Thus answer for the first query is 2. We delete the added edge.\n\n\u00a0\nConstraints:\n\n2 <= n <= 30\nm == queries.length\n1 <= m <= 105\nqueries[i].length == 2\n1 <= ai, bi <= 2n - 1\nai != bi\n\n",
    "starterCode": "class Solution:\n    def cycleLengthQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "n = 5, queries = [[31,15],[10,18],[9,20]]",
        "output": "[2, 6, 6]"
      },
      {
        "input": "n = 3, queries = [[5,3],[4,7],[2,3]]",
        "output": "[4, 5, 3]"
      },
      {
        "input": "n = 5, queries = [[15,7],[10,14],[3,12]]",
        "output": "[2, 7, 3]"
      },
      {
        "input": "n = 30, queries = [[1073741823,1],[536870912,2],[268435456,4]]",
        "output": "[30, 29, 27]"
      },
      {
        "input": "n = 4, queries = [[8,4],[7,3],[1,14]]",
        "output": "[2, 2, 4]"
      },
      {
        "input": "n = 4, queries = [[1,15],[14,2],[12,10],[6,3]]",
        "output": "[4, 5, 7, 2]"
      },
      {
        "input": "n = 2, queries = [[1,2]]",
        "output": "[2]"
      },
      {
        "input": "n = 5, queries = [[3,15],[16,7],[8,9]]",
        "output": "[3, 7, 3]"
      },
      {
        "input": "n = 6, queries = [[32,1],[16,15],[8,7],[4,3],[2,1]]",
        "output": "[6, 8, 6, 4, 2]"
      },
      {
        "input": "n = 4, queries = [[8,4],[6,10],[5,9]]",
        "output": "[2, 6, 4]"
      },
      {
        "input": "n = 19, queries = [[262144, 524287], [131072, 262143], [65536, 131071], [32768, 65535], [16384, 32767], [8192, 16383], [4096, 8191], [2048, 4095], [1024, 2047], [512, 1023], [256, 511], [128, 255], [64, 127], [32, 63], [16, 31], [8, 15], [4, 7], [2, 3]]",
        "output": "[37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3]"
      },
      {
        "input": "n = 10, queries = [[511,1],[256,2],[128,4],[64,8],[32,16],[16,32],[8,64],[4,128],[2,256],[1,511],[511,256],[256,128],[128,64],[64,32],[32,16],[16,8],[8,4],[4,2],[2,1],[511,510],[510,509],[509,508],[508,507],[507,506],[506,505]]",
        "output": "[9, 8, 6, 4, 2, 2, 4, 6, 8, 9, 17, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, 3, 7, 3, 5]"
      },
      {
        "input": "n = 18, queries = [[131071,1],[65536,2],[32768,4],[16384,8],[8192,16],[4096,32],[2048,64],[1024,128],[512,256],[256,512],[128,1024],[64,2048],[32,4096],[16,8192],[8,16384],[4,32768],[2,65536],[1,131071]]",
        "output": "[17, 16, 14, 12, 10, 8, 6, 4, 2, 2, 4, 6, 8, 10, 12, 14, 16, 17]"
      },
      {
        "input": "n = 20, queries = [[1048575,1],[524288,2],[262144,4],[131072,8],[65536,16],[32768,32],[16384,64],[8192,128],[4096,256],[2048,512],[1024,1024],[512,2048],[256,4096],[128,8192],[64,16384],[32,32768],[16,65536],[8,131072],[4,262144],[2,524288],[1,1048575]]",
        "output": "[20, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 20]"
      },
      {
        "input": "n = 15, queries = [[32767, 16384], [8192, 4096], [2048, 1024], [512, 256], [128, 64]]",
        "output": "[29, 2, 2, 2, 2]"
      },
      {
        "input": "n = 25, queries = [[33554432, 67108864], [16777216, 33554431], [8388608, 16777215], [4194304, 8388607]]",
        "output": "[2, 49, 47, 45]"
      },
      {
        "input": "n = 10, queries = [[1023,1],[512,2],[256,3],[128,4],[64,5],[32,6],[16,7],[8,8],[4,9],[2,10]]",
        "output": "[10, 9, 10, 6, 7, 8, 7, 1, 2, 3]"
      },
      {
        "input": "n = 22, queries = [[4194303, 2097152], [2097151, 1048576], [1048575, 524288], [524287, 262144], [262143, 131072], [131071, 65536], [65535, 32768], [32767, 16384], [16383, 8192]]",
        "output": "[43, 41, 39, 37, 35, 33, 31, 29, 27]"
      },
      {
        "input": "n = 25, queries = [[33554431,16777216],[16777216,8388608],[8388608,4194304],[4194304,2097152],[2097152,1048576],[1048576,524288],[524288,262144],[262144,131072],[131072,65536],[65536,32768],[32768,16384],[16384,8192],[8192,4096],[4096,2048],[2048,1024],[1024,512],[512,256],[256,128],[128,64],[64,32],[32,16],[16,8],[8,4],[4,2],[2,1]]",
        "output": "[49, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "n = 20, queries = [[1048575, 524288], [524287, 262144], [262143, 131072], [131071, 65536], [65535, 32768]]",
        "output": "[39, 37, 35, 33, 31]"
      },
      {
        "input": "n = 15, queries = [[16383,1],[8192,3],[4096,7],[2048,15],[1024,31]]",
        "output": "[14, 15, 15, 15, 15]"
      },
      {
        "input": "n = 12, queries = [[4095,1],[2047,2],[1023,4],[511,8],[255,16],[127,32],[63,64],[31,128],[15,256],[7,512],[3,1024],[1,2048],[4094,4095],[2046,2047],[1022,1023],[510,511],[254,255],[126,127],[62,63],[30,31],[14,15],[6,7],[2,3],[1,2],[4093,1],[2045,2],[1021,4],[509,8],[253,16],[125,32],[61,64],[30,128],[14,256],[6,512],[2,1024],[1,2048]]",
        "output": "[12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 12]"
      },
      {
        "input": "n = 15, queries = [[16384, 32767], [8192, 16383], [4096, 8191], [2048, 4095], [1024, 2047], [512, 1023]]",
        "output": "[29, 27, 25, 23, 21, 19]"
      },
      {
        "input": "n = 10, queries = [[511, 256],[1023, 512],[768, 384],[255, 128],[127, 64]]",
        "output": "[17, 19, 2, 15, 13]"
      },
      {
        "input": "n = 10, queries = [[1023,511],[511,255],[255,127],[127,63],[63,31],[31,15],[15,7],[7,3],[3,1]]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "n = 10, queries = [[512,1],[256,2],[128,4],[64,8],[32,16],[16,32],[8,64],[4,128],[2,256],[1,512]]",
        "output": "[10, 8, 6, 4, 2, 2, 4, 6, 8, 10]"
      },
      {
        "input": "n = 20, queries = [[1048576,1],[524288,2],[262144,4],[131072,8],[65536,16],[32768,32],[16384,64],[8192,128],[4096,256],[2048,512],[1024,1024],[512,2048],[256,4096],[128,8192],[64,16384],[32,32768],[16,65536],[8,131072],[4,262144],[2,524288]]",
        "output": "[21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "n = 12, queries = [[4095,2048],[2048,1024],[1024,512],[512,256],[256,128],[128,64],[64,32],[32,16],[16,8],[8,4],[4,2],[2,1],[4095,2047],[2047,2046],[2046,2045],[2045,2044],[2044,2043],[2043,2042],[2042,2041],[2041,2040],[2040,2039],[2039,2038],[2038,2037],[2037,2036],[2036,2035],[2035,2034],[2034,2033],[2033,2032],[2032,2031]]",
        "output": "[23, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, 3, 7, 3, 5, 3, 9, 3, 5, 3, 7, 3, 5, 3, 11]"
      },
      {
        "input": "n = 10, queries = [[512,256],[1024,513],[128,64],[2048,1025],[4096,2049]]",
        "output": "[2, 4, 2, 4, 4]"
      },
      {
        "input": "n = 15, queries = [[16383,1],[8191,2],[4095,4],[2047,8],[1023,16],[511,32],[255,64],[127,128],[63,256],[31,512],[15,1024],[7,2048],[3,4096],[1,8192],[16382,16383],[8190,8191],[4094,4095],[2046,2047],[1022,1023],[510,511],[254,255],[126,127],[62,63],[30,31],[14,15],[6,7],[2,3],[1,2]]",
        "output": "[14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2]"
      },
      {
        "input": "n = 18, queries = [[131072,65536],[262144,131073],[32768,16384],[524288,262145],[1048576,524289]]",
        "output": "[2, 4, 2, 4, 4]"
      },
      {
        "input": "n = 20, queries = [[1048575,1],[524288,2],[262144,4],[131072,8],[65536,16],[32768,32],[16384,64],[8192,128],[4096,256],[2048,512]]",
        "output": "[20, 19, 17, 15, 13, 11, 9, 7, 5, 3]"
      },
      {
        "input": "n = 17, queries = [[65535, 32768], [16384, 8192], [4096, 2048], [1024, 512], [256, 128], [64, 32], [16, 8], [4, 2], [2, 1], [65535, 1], [32768, 2], [16384, 4], [8192, 8], [4096, 16], [2048, 32], [1024, 64], [512, 128]]",
        "output": "[31, 2, 2, 2, 2, 2, 2, 2, 2, 16, 15, 13, 11, 9, 7, 5, 3]"
      },
      {
        "input": "n = 12, queries = [[4095,1],[2048,3],[1024,7],[512,15],[256,31],[128,63],[64,127],[32,255],[16,511],[8,1023],[4,2047],[2,4095]]",
        "output": "[12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]"
      },
      {
        "input": "n = 15, queries = [[16384,8192],[32768,16385],[4096,2048],[65536,32769],[131072,65537]]",
        "output": "[2, 4, 2, 4, 4]"
      },
      {
        "input": "n = 20, queries = [[1048575, 524288],[2097151, 1048576],[3145727, 1572864],[4194303, 2097152],[524287, 262144]]",
        "output": "[39, 41, 42, 43, 37]"
      },
      {
        "input": "n = 27, queries = [[134217727, 67108864], [67108863, 33554432], [33554431, 16777216], [16777215, 8388608], [8388607, 4194304], [4194303, 2097152], [2097151, 1048576], [1048575, 524288], [524287, 262144], [262143, 131072], [131071, 65536], [65535, 32768], [32767, 16384], [16383, 8192], [8191, 4096], [4095, 2048], [2047, 1024], [1023, 512], [511, 256], [255, 128], [127, 64], [63, 32], [31, 16], [15, 8], [7, 4], [3, 2], [1, 2]]",
        "output": "[53, 51, 49, 47, 45, 43, 41, 39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 2]"
      },
      {
        "input": "n = 25, queries = [[16777215,8388608],[4194304,2097152],[2097152,1048576],[1048576,524288],[524288,262144],[262144,131072],[131072,65536],[65536,32768],[32768,16384],[16384,8192]]",
        "output": "[47, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "n = 18, queries = [[131071, 65536], [32768, 16384], [8192, 4096], [2048, 1024], [512, 256], [128, 64], [32, 16], [8, 4], [2, 1], [131071, 1], [65536, 2], [32768, 4], [16384, 8]]",
        "output": "[33, 2, 2, 2, 2, 2, 2, 2, 2, 17, 16, 14, 12]"
      },
      {
        "input": "n = 25, queries = [[33554431, 16777216], [16777215, 8388608], [8388607, 4194304], [4194303, 2097152], [2097151, 1048576]]",
        "output": "[49, 47, 45, 43, 41]"
      },
      {
        "input": "n = 14, queries = [[8192,4096],[16384,8193],[2048,1024],[32768,16385],[65536,32769]]",
        "output": "[2, 4, 2, 4, 4]"
      },
      {
        "input": "n = 19, queries = [[262144,131072],[524288,262145],[65536,32768],[1048576,524289],[2097152,1048577]]",
        "output": "[2, 4, 2, 4, 4]"
      },
      {
        "input": "n = 10, queries = [[511, 256], [128, 64], [32, 16], [8, 4], [4, 2], [2, 1], [128, 1], [256, 32], [511, 64]]",
        "output": "[17, 2, 2, 2, 2, 2, 8, 4, 15]"
      },
      {
        "input": "n = 25, queries = [[33554431, 16777216], [8388608, 4194304], [2097152, 1048576], [524288, 262144], [131072, 65536]]",
        "output": "[49, 2, 2, 2, 2]"
      },
      {
        "input": "n = 20, queries = [[524288,262144],[1048576,524289],[131072,65536],[2097152,1048577],[4194304,2097153]]",
        "output": "[2, 4, 2, 4, 4]"
      },
      {
        "input": "n = 12, queries = [[2048,1024],[4096,2049],[512,256],[8192,4097],[16384,8193]]",
        "output": "[2, 4, 2, 4, 4]"
      },
      {
        "input": "n = 12, queries = [[4095, 2048],[8191, 4096],[12287, 6144],[16383, 8192],[2047, 1024]]",
        "output": "[23, 25, 26, 27, 21]"
      },
      {
        "input": "n = 15, queries = [[16383,1],[8192,2],[4096,4],[2048,8],[1024,16],[512,32],[256,64],[128,128]]",
        "output": "[14, 13, 11, 9, 7, 5, 3, 1]"
      },
      {
        "input": "n = 20, queries = [[524287, 262144], [131072, 65536], [32768, 16384], [8192, 4096], [2048, 1024], [512, 256], [128, 64], [32, 16], [8, 4]]",
        "output": "[37, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "n = 8, queries = [[127,1],[63,2],[31,4],[15,8],[7,16],[3,32],[1,64],[126,127],[62,63],[30,31],[14,15],[6,7],[2,3],[1,2],[125,127],[61,63],[29,31],[13,15],[5,7],[1,3],[124,127],[60,63],[28,31],[12,15],[4,7],[0,3],[123,127],[59,63],[27,31],[11,15],[3,7],[1,3]]",
        "output": "[7, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 3, 2, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 3, 7, 7, 7, 7, 2, 2]"
      },
      {
        "input": "n = 15, queries = [[16383,1],[8192,2],[4096,4],[2048,8],[1024,16],[512,32],[256,64],[128,128],[64,256],[32,512],[16,1024],[8,2048],[4,4096],[2,8192],[1,16383]]",
        "output": "[14, 13, 11, 9, 7, 5, 3, 1, 3, 5, 7, 9, 11, 13, 14]"
      },
      {
        "input": "n = 25, queries = [[16777216, 8388608], [8388608, 4194304], [4194304, 2097152], [2097152, 1048576], [1048576, 524288]]",
        "output": "[2, 2, 2, 2, 2]"
      },
      {
        "input": "n = 20, queries = [[1048575,1],[524288,2],[262144,4],[131072,8],[65536,16]]",
        "output": "[20, 19, 17, 15, 13]"
      },
      {
        "input": "n = 18, queries = [[262143, 131072], [131071, 65536], [65535, 32768], [32767, 16384], [16383, 8192], [8191, 4096], [4095, 2048], [2047, 1024], [1023, 512]]",
        "output": "[35, 33, 31, 29, 27, 25, 23, 21, 19]"
      },
      {
        "input": "n = 25, queries = [[33554432,16777216],[67108864,33554433],[8388608,4194304],[134217728,67108865]]",
        "output": "[2, 4, 2, 4]"
      },
      {
        "input": "n = 18, queries = [[131072, 262143], [65536, 131071], [32768, 65535], [16384, 32767], [8192, 16383], [4096, 8191], [2048, 4095], [1024, 2047]]",
        "output": "[35, 33, 31, 29, 27, 25, 23, 21]"
      },
      {
        "input": "n = 25, queries = [[33554431, 16777216],[16777215, 8388608],[8388607, 4194304],[4194303, 2097152],[2097151, 1048576]]",
        "output": "[49, 47, 45, 43, 41]"
      },
      {
        "input": "n = 18, queries = [[262143,1],[131072,3],[65536,7],[32768,15],[16384,31],[8192,63],[4096,127],[2048,255],[1024,511],[512,1023],[256,2047],[128,4095],[64,8191],[32,16383],[16,32767],[8,65535],[4,131071],[2,262143]]",
        "output": "[18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]"
      },
      {
        "input": "n = 28, queries = [[268435455,1],[134217728,2],[67108864,4],[33554432,8],[16777216,16],[8388608,32],[4194304,64],[2097152,128],[1048576,256],[524288,512],[262144,1024],[131072,2048],[65536,4096],[32768,8192],[16384,16384],[8192,32768],[4096,65536],[2048,131072],[1024,262144],[512,524288],[256,1048576],[128,2097152],[64,4194304],[32,8388608],[16,16777216],[8,33554432],[4,67108864],[2,134217728]]",
        "output": "[28, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]"
      },
      {
        "input": "n = 15, queries = [[16383, 16384], [8192, 12287], [4096, 6143], [2048, 8192], [1024, 4096]]",
        "output": "[28, 25, 23, 3, 3]"
      },
      {
        "input": "n = 22, queries = [[2097152, 4194303], [1048576, 2097151], [524288, 1048575], [262144, 524287], [131072, 262143], [65536, 131071], [32768, 65535], [16384, 32767]]",
        "output": "[43, 41, 39, 37, 35, 33, 31, 29]"
      },
      {
        "input": "n = 25, queries = [[33554431,1],[16777216,2],[8388608,4],[4194304,8],[2097152,16],[1048576,32],[524288,64],[262144,128],[131072,256],[65536,512],[32768,1024],[16384,2048],[8192,4096],[4096,8192],[2048,16384],[1024,32768],[512,65536],[256,131072],[128,262144],[64,524288],[32,1048576],[16,2097152],[8,4194304],[4,8388608],[2,16777216]]",
        "output": "[25, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]"
      },
      {
        "input": "n = 20, queries = [[524288, 1048575], [262144, 524287], [131072, 262143], [65536, 131071], [32768, 65535]]",
        "output": "[39, 37, 35, 33, 31]"
      },
      {
        "input": "n = 16, queries = [[65535, 32768], [32767, 16384], [16383, 8192], [8191, 4096], [4095, 2048], [2047, 1024], [1023, 512], [511, 256], [255, 128], [127, 64], [63, 32], [31, 16], [15, 8], [7, 4], [3, 2], [1, 2]]",
        "output": "[31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 2]"
      },
      {
        "input": "n = 15, queries = [[16383, 8192], [4096, 2048], [1024, 512], [256, 128], [64, 32], [16, 8], [4, 2], [2, 1]]",
        "output": "[27, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "n = 12, queries = [[2048, 4095], [1024, 2047], [512, 1023], [256, 511], [128, 255], [64, 127], [32, 63], [16, 31], [8, 15], [4, 7]]",
        "output": "[23, 21, 19, 17, 15, 13, 11, 9, 7, 5]"
      },
      {
        "input": "n = 10, queries = [[511, 256], [255, 128], [127, 64], [63, 32], [31, 16], [15, 8], [7, 4], [3, 2], [1, 2]]",
        "output": "[17, 15, 13, 11, 9, 7, 5, 3, 2]"
      },
      {
        "input": "n = 10, queries = [[512, 256], [256, 128], [128, 64], [64, 32], [32, 16], [16, 8], [8, 4], [4, 2], [2, 1]]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "n = 20, queries = [[524288, 1048575], [262144, 524287], [131072, 262143], [65536, 131071], [32768, 65535], [16384, 32767]]",
        "output": "[39, 37, 35, 33, 31, 29]"
      },
      {
        "input": "n = 15, queries = [[16383, 1],[32767, 16384],[49151, 8192],[65535, 4096],[8191, 2048]]",
        "output": "[14, 29, 27, 28, 24]"
      }
    ]
  },
  {
    "id": 2045,
    "difficulty": "Hard",
    "tags": [
      "Breadth-First Search",
      "Graph",
      "Shortest Path"
    ],
    "problemDescription": "A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.\nEach vertex has a traffic signal which changes its color from green to red and vice versa every\u00a0change minutes. All signals change at the same time. You can enter a vertex at any time, but can leave a vertex only when the signal is green. You cannot wait at a vertex if the signal is green.\nThe second minimum value is defined as the smallest value strictly larger than the minimum value.\n\nFor example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4.\n\nGiven n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n.\nNotes:\n\nYou can go through any vertex any number of times, including 1 and n.\nYou can assume that when the journey starts, all signals have just turned green.\n\n\u00a0\nExample 1:\n \u2003 \u2003 \u2003 \u2003\n\nInput: n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5\nOutput: 13\nExplanation:\nThe figure on the left shows the given graph.\nThe blue path in the figure on the right is the minimum time path.\nThe time taken is:\n- Start at 1, time elapsed=0\n- 1 -> 4: 3 minutes, time elapsed=3\n- 4 -> 5: 3 minutes, time elapsed=6\nHence the minimum time needed is 6 minutes.\n\nThe red path shows the path to get the second minimum time.\n- Start at 1, time elapsed=0\n- 1 -> 3: 3 minutes, time elapsed=3\n- 3 -> 4: 3 minutes, time elapsed=6\n- Wait at 4 for 4 minutes, time elapsed=10\n- 4 -> 5: 3 minutes, time elapsed=13\nHence the second minimum time is 13 minutes.      \n\nExample 2:\n\n\nInput: n = 2, edges = [[1,2]], time = 3, change = 2\nOutput: 11\nExplanation:\nThe minimum time path is 1 -> 2 with time = 3 minutes.\nThe second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 minutes.\n\u00a0\nConstraints:\n\n2 <= n <= 104\nn - 1 <= edges.length <= min(2 * 104, n * (n - 1) / 2)\nedges[i].length == 2\n1 <= ui, vi <= n\nui != vi\nThere are no duplicate edges.\nEach vertex can be reached directly or indirectly from every other vertex.\n1 <= time, change <= 103\n\n",
    "starterCode": "class Solution:\n    def secondMinimum(self, n: int, edges: List[List[int]], time: int, change: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 2, edges = [[1,2]], time = 3, change = 2",
        "output": "11"
      },
      {
        "input": "n = 3, edges = [[1,2],[2,3]], time = 2, change = 3",
        "output": "10"
      },
      {
        "input": "n = 3, edges = [[1,2],[2,3]], time = 5, change = 5",
        "output": "35"
      },
      {
        "input": "n = 6, edges = [[1,2],[1,3],[1,4],[2,5],[3,5],[4,5],[5,6]], time = 2, change = 4",
        "output": "18"
      },
      {
        "input": "n = 4, edges = [[1,2],[2,3],[3,4],[1,4]], time = 2, change = 3",
        "output": "8"
      },
      {
        "input": "n = 4, edges = [[1,2],[1,3],[3,4],[2,4]], time = 2, change = 3",
        "output": "10"
      },
      {
        "input": "n = 6, edges = [[1,2],[1,3],[2,4],[2,5],[3,5],[4,6],[5,6]], time = 4, change = 7",
        "output": "32"
      },
      {
        "input": "n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5",
        "output": "13"
      },
      {
        "input": "n = 4, edges = [[1,2],[2,3],[3,4]], time = 5, change = 7",
        "output": "33"
      },
      {
        "input": "n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[4,5],[5,6]], time = 4, change = 7",
        "output": "22"
      },
      {
        "input": "n = 4, edges = [[1,2],[2,3],[3,4],[4,1]], time = 2, change = 3",
        "output": "8"
      },
      {
        "input": "n = 14, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], time = 1, change = 2",
        "output": "29"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,9],[10,11],[12,13],[14,15]], time = 8, change = 11",
        "output": "38"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,12],[10,12],[11,12],[1,12]], time = 5, change = 7",
        "output": "19"
      },
      {
        "input": "n = 10, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10]], time = 2, change = 3",
        "output": "8"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,7],[6,8],[7,9],[8,10]], time = 3, change = 5",
        "output": "13"
      },
      {
        "input": "n = 9, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], time = 5, change = 4",
        "output": "29"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[6,12],[7,8],[9,10],[11,12]], time = 3, change = 4",
        "output": "14"
      },
      {
        "input": "n = 50, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39],[20,40],[20,41],[21,42],[21,43],[22,44],[22,45],[23,46],[23,47],[24,48],[24,49],[25,50]], time = 3, change = 5",
        "output": "33"
      },
      {
        "input": "n = 25, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,24],[13,25]], time = 5, change = 7",
        "output": "38"
      },
      {
        "input": "n = 7, edges = [[1,2],[1,3],[1,4],[1,5],[2,6],[2,7],[3,6],[3,7],[4,6],[4,7],[5,6],[5,7]], time = 5, change = 8",
        "output": "26"
      },
      {
        "input": "n = 15, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], time = 8, change = 12",
        "output": "184"
      },
      {
        "input": "n = 9, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9]], time = 4, change = 6",
        "output": "28"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,12],[10,12],[11,12]], time = 3, change = 5",
        "output": "26"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,10],[9,11],[12,14],[13,15]], time = 5, change = 8",
        "output": "26"
      },
      {
        "input": "n = 11, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11]], time = 9, change = 12",
        "output": "57"
      },
      {
        "input": "n = 11, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[1,5],[1,6],[1,7],[2,8],[2,9],[3,10],[3,11]], time = 6, change = 8",
        "output": "28"
      },
      {
        "input": "n = 9, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,8],[6,9],[7,9]], time = 7, change = 10",
        "output": "47"
      },
      {
        "input": "n = 10, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], time = 3, change = 5",
        "output": "53"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20]], time = 6, change = 9",
        "output": "42"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,13],[13,14],[14,15]], time = 5, change = 8",
        "output": "37"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,8],[6,7]], time = 4, change = 5",
        "output": "24"
      },
      {
        "input": "n = 7, edges = [[1,2],[1,3],[2,4],[2,5],[3,5],[4,6],[5,6],[6,7]], time = 3, change = 4",
        "output": "22"
      },
      {
        "input": "n = 8, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], time = 3, change = 5",
        "output": "43"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,5],[4,6],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], time = 4, change = 7",
        "output": "92"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15]], time = 7, change = 9",
        "output": "43"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,12],[10,11],[11,12],[5,7],[4,6]], time = 3, change = 7",
        "output": "20"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,9],[6,10],[7,10]], time = 7, change = 10",
        "output": "47"
      },
      {
        "input": "n = 14, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[6,12],[7,13],[8,14],[1,5],[1,7],[2,8],[2,10],[3,9],[3,11],[4,12],[4,14],[5,6],[7,8],[9,10],[11,12],[13,14]], time = 6, change = 13",
        "output": "18"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[7,8],[8,9],[9,10],[10,11],[11,12]], time = 3, change = 4",
        "output": "14"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,6],[7,8],[9,10]], time = 4, change = 5",
        "output": "14"
      },
      {
        "input": "n = 16, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,5],[3,7],[4,6],[4,7],[5,8],[5,9],[6,8],[6,10],[7,9],[7,10],[8,11],[8,12],[9,11],[9,12],[10,13],[10,14],[11,13],[11,15],[12,14],[12,15],[13,16],[14,16],[15,16]], time = 5, change = 10",
        "output": "50"
      },
      {
        "input": "n = 8, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8]], time = 4, change = 6",
        "output": "28"
      },
      {
        "input": "n = 100, edges = [[i,i+1] for i in range(1,100)], time = 10, change = 15",
        "output": "Error: Solution.secondMinimum() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]], time = 4, change = 6",
        "output": "124"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,5],[3,7],[4,6],[4,7],[5,8],[5,9],[6,8],[6,10],[7,9],[7,10],[8,11],[8,12],[9,11],[10,12]], time = 8, change = 12",
        "output": "64"
      },
      {
        "input": "n = 10, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], time = 2, change = 3",
        "output": "32"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[11,16],[12,17],[13,18],[14,19],[15,20]], time = 5, change = 8",
        "output": "42"
      },
      {
        "input": "n = 18, edges = [[1,2],[1,3],[2,4],[2,5],[3,5],[4,6],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18]], time = 5, change = 6",
        "output": "101"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,9],[6,10],[7,8],[9,10]], time = 2, change = 4",
        "output": "12"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[2,7],[3,8],[3,9],[3,10],[4,11],[4,12],[4,13],[5,14],[5,15],[6,16],[6,17],[7,18],[7,19],[8,20],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]], time = 4, change = 7",
        "output": "22"
      },
      {
        "input": "n = 11, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11],[2,3],[5,7],[6,8],[9,10]], time = 3, change = 5",
        "output": "16"
      },
      {
        "input": "n = 9, edges = [[1,2],[1,3],[1,4],[2,5],[3,5],[4,6],[5,7],[5,8],[6,9],[7,9],[8,9]], time = 5, change = 7",
        "output": "24"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[2,4],[2,5],[3,5],[4,6],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]], time = 3, change = 5",
        "output": "93"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,8],[6,8],[7,8]], time = 4, change = 6",
        "output": "28"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,8],[6,9],[7,9],[8,10],[9,10]], time = 7, change = 10",
        "output": "54"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,5],[3,7],[4,6],[4,7],[5,8],[6,8],[7,8]], time = 6, change = 5",
        "output": "46"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[7,12]], time = 2, change = 3",
        "output": "14"
      },
      {
        "input": "n = 6, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[4,6],[5,6]], time = 10, change = 12",
        "output": "34"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[1,10],[5,15],[9,19]], time = 4, change = 6",
        "output": "32"
      },
      {
        "input": "n = 16, edges = [[1,2],[1,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[8,9],[10,11],[12,13],[14,15],[16,15]], time = 3, change = 5",
        "output": "16"
      },
      {
        "input": "n = 12, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[1,12]], time = 2, change = 3",
        "output": "8"
      },
      {
        "input": "n = 10, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], time = 6, change = 8",
        "output": "86"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,8],[6,8],[7,8]], time = 6, change = 9",
        "output": "42"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]], time = 3, change = 6",
        "output": "123"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,10],[9,11],[12,14],[13,15]], time = 2, change = 5",
        "output": "12"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[6,12],[7,8],[9,10],[11,12]], time = 3, change = 5",
        "output": "16"
      },
      {
        "input": "n = 15, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], time = 4, change = 3",
        "output": "94"
      },
      {
        "input": "n = 9, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,6],[7,8],[8,9],[5,8],[6,7],[5,7],[6,8]], time = 4, change = 6",
        "output": "16"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,8],[6,9],[7,9],[8,10],[9,10]], time = 3, change = 4",
        "output": "22"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[2,4],[2,5],[3,5],[4,6],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]], time = 7, change = 9",
        "output": "97"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], time = 6, change = 8",
        "output": "28"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,12],[9,13],[10,14],[11,15]], time = 2, change = 3",
        "output": "10"
      },
      {
        "input": "n = 9, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,8],[6,9],[7,9],[8,9]], time = 6, change = 5",
        "output": "36"
      },
      {
        "input": "n = 12, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]], time = 3, change = 5",
        "output": "63"
      },
      {
        "input": "n = 7, edges = [[1,2],[1,3],[2,4],[2,5],[3,5],[4,6],[5,7],[6,7]], time = 5, change = 4",
        "output": "29"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,9],[10,11],[12,13],[14,15]], time = 5, change = 6",
        "output": "22"
      },
      {
        "input": "n = 50, edges = [[i,i+1] for i in range(1,50)] + [[1,50]], time = 5, change = 8",
        "output": "Error: Solution.secondMinimum() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 25, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[2,7],[3,8],[3,9],[3,10],[4,11],[4,12],[4,13],[5,14],[5,15],[6,16],[6,17],[7,18],[7,19],[8,20],[8,21],[8,22],[9,23],[9,24],[10,25],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],[24,25]], time = 3, change = 6",
        "output": "18"
      },
      {
        "input": "n = 10, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], time = 7, change = 13",
        "output": "137"
      },
      {
        "input": "n = 6, edges = [[1,2],[1,3],[2,4],[2,5],[3,5],[4,6],[5,6],[1,4],[1,5],[2,6],[3,4],[3,6]], time = 7, change = 10",
        "output": "27"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,8],[6,8],[7,8]], time = 3, change = 4",
        "output": "19"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,9],[10,11],[12,13],[14,15]], time = 3, change = 7",
        "output": "17"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,8],[6,9],[7,9],[8,10],[9,10]], time = 3, change = 5",
        "output": "26"
      },
      {
        "input": "n = 7, edges = [[1,2],[1,3],[1,4],[2,5],[3,5],[4,6],[5,7],[6,7]], time = 7, change = 5",
        "output": "47"
      },
      {
        "input": "n = 9, edges = [[1,2],[1,3],[2,4],[2,5],[3,5],[4,6],[5,7],[6,8],[7,9]], time = 6, change = 5",
        "output": "56"
      }
    ]
  },
  {
    "id": 2088,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "problemDescription": "A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). All cells outside the grid are considered barren.\nA pyramidal plot of land can be defined as a set of cells with the following criteria:\n\nThe number of cells in the set has to be greater than 1 and all cells must be fertile.\nThe apex of a pyramid is the topmost cell of the pyramid. The height of a pyramid is the number of rows it covers. Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r <= i <= r + h - 1 and c - (i - r) <= j <= c + (i - r).\n\nAn inverse pyramidal plot of land can be defined as a set of cells with similar criteria:\n\nThe number of cells in the set has to be greater than 1 and all cells must be fertile.\nThe apex of an inverse pyramid is the bottommost cell of the inverse pyramid. The height of an inverse pyramid is the number of rows it covers. Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r - h + 1 <= i <= r and c - (r - i) <= j <= c + (r - i).\n\nSome examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells.\n\nGiven a 0-indexed m x n binary matrix grid representing the farmland, return the total number of pyramidal and inverse pyramidal plots that can be found in grid.\n\u00a0\nExample 1:\n\n\nInput: grid = [[0,1,1,0],[1,1,1,1]]\nOutput: 2\nExplanation: The 2 possible pyramidal plots are shown in blue and red respectively.\nThere are no inverse pyramidal plots in this grid. \nHence total number of pyramidal and inverse pyramidal plots is 2 + 0 = 2.\n\nExample 2:\n\n\nInput: grid = [[1,1,1],[1,1,1]]\nOutput: 2\nExplanation: The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red. \nHence the total number of plots is 1 + 1 = 2.\n\nExample 3:\n\n\nInput: grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]\nOutput: 13\nExplanation: There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures.\nThere are 6 inverse pyramidal plots, 2 of which are shown in the last figure.\nThe total number of plots is 7 + 6 = 13.\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 1000\n1 <= m * n <= 105\ngrid[i][j] is either 0 or 1.\n\n",
    "starterCode": "class Solution:\n    def countPyramids(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[0,0,0],[0,1,0],[0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,1,1,0],[1,1,1,1]]",
        "output": "2"
      },
      {
        "input": "grid = [[1,1,0,1,1],[0,1,1,1,0],[1,1,1,1,1],[0,0,1,0,0],[0,0,0,0,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[0,0,0,0],[0,1,0,0],[0,1,1,0],[0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]",
        "output": "30"
      },
      {
        "input": "grid = [[1,1,0,1],[1,1,1,1],[0,1,1,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]",
        "output": "14"
      },
      {
        "input": "grid = [[0,0,0,0],[0,0,0,0],[0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1],[1,1,1,1],[1,1,1,1]]",
        "output": "8"
      },
      {
        "input": "grid = [[1,1,1],[1,1,1]]",
        "output": "2"
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]",
        "output": "13"
      },
      {
        "input": "grid = [[0,1,1,0,0,1,1,0],[0,1,0,0,0,0,0,1],[1,1,1,1,1,1,1,1],[0,1,0,1,0,1,0,1]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,1],[1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,1],[0,1,0],[1,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,1,1,1,1,1,0,0,0],[0,1,1,1,1,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "15"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0,0,0,1],[1,0,1,1,1,1,1,1,1,1,1,0,1],[1,0,1,0,0,0,0,0,0,0,1,0,1],[1,0,1,0,1,1,1,1,1,0,1,0,1],[1,0,1,0,1,0,0,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1],[1,1,1,1,1,1,1,1,1,1,1,1,1]]",
        "output": "5"
      },
      {
        "input": "grid = [[0,0,1,1,1,0,0],[0,1,1,1,1,1,0],[1,1,1,1,1,1,1],[0,1,1,1,1,1,0],[0,0,1,1,1,0,0]]",
        "output": "32"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,1,0,0,0,0,0,0,0,0,0],[0,0,1,0,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0,0,0,0,0,0,0],[1,0,1,0,1,0,1,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0,1,0,0,0,0,0],[0,0,1,0,1,0,1,0,1,0,1,0,0,0,0],[0,0,0,1,0,1,0,1,0,1,0,1,0,0,0],[0,0,0,0,1,0,1,0,1,0,1,0,1,0,0],[0,0,0,0,0,1,0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,1,0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,1,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,1,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,0,0,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,0,0,0,0,0,0,1,1],[1,1,1,1,1,1,1,1,1,1],[0,0,0,1,1,1,1,0,0,0],[0,0,1,1,1,1,1,1,0,0],[0,1,1,1,1,1,1,1,1,0],[0,1,0,1,1,1,1,0,1,0]]",
        "output": "54"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "120"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1],[1,0,0,0,0,0,1],[1,0,1,1,1,0,1],[1,0,1,1,1,0,1],[1,0,0,0,0,0,1],[1,1,1,1,1,1,1]]",
        "output": "2"
      },
      {
        "input": "grid = [[0,0,1,0,0],[0,1,1,1,0],[1,1,1,1,1],[0,1,1,1,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,1,0,0],[0,1,1,1,0],[1,1,1,1,1],[0,1,1,1,0],[0,0,1,0,0]]",
        "output": "24"
      },
      {
        "input": "grid = [[1,1,1,0,0,1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,1,1,0,0,0],[0,0,1,1,1,1,0,0],[0,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1]]",
        "output": "34"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,1,1,1,1,1,0,0],[0,1,1,1,1,1,1,1,0],[0,0,1,1,1,1,1,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,0,0]]",
        "output": "32"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0],[1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1],[1,0,0,0,1,0,0,0,1],[1,0,1,1,1,1,1,0,1],[1,0,1,0,1,0,1,0,1],[1,0,1,1,1,1,1,0,1],[1,0,0,0,1,0,0,0,1],[1,1,1,1,1,1,1,1,1]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,1,1,1,1,0],[0,1,1,1,1,0],[0,1,1,1,1,0],[0,0,0,0,0,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,0,1,0,0,0,1,0,0],[0,1,1,1,0,1,1,1,0],[1,1,1,1,1,1,1,1,1],[0,1,1,1,0,1,1,1,0],[0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,1,0,0],[0,1,1,1,0,1,1,1,0],[1,1,1,1,1,1,1,1,1]]",
        "output": "36"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,0],[0,1,0,0,0,0,0,0,1,0],[0,1,0,1,1,1,1,0,1,0],[0,1,0,1,0,0,1,0,1,0],[0,1,0,1,1,1,1,0,1,0],[0,1,0,0,0,0,0,0,1,0],[0,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1]]",
        "output": "24"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[0,0,0,0,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,1,1,1,1,1,0,0,0],[0,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "41"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,1,1,1,1,1,0,0,0],[0,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,1,1,0],[0,1,1,1,1,1,1,1,0,0],[0,0,1,1,1,1,1,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,0,0,1,0,0,0,0,0]]",
        "output": "88"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1]]",
        "output": "80"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,0],[0,1,0,1,0,1,0,1,0,0],[0,1,1,1,1,1,1,1,1,0],[0,0,1,0,1,0,1,0,0,0],[0,0,0,1,1,1,0,0,0,0]]",
        "output": "10"
      },
      {
        "input": "grid = [[1,0,1,0,1,0],[0,1,1,1,1,0],[1,1,1,1,1,1],[0,1,1,1,1,0],[1,0,1,0,1,0]]",
        "output": "16"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]",
        "output": "1140"
      },
      {
        "input": "grid = [[0,0,1,0,0,1,0,0,1,0],[0,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,1,1],[0,1,1,1,1,1,1,1,1,0],[0,0,1,1,1,1,1,1,0,0],[0,0,0,1,1,1,1,0,0,0]]",
        "output": "75"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0],[1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0],[1,0,1,0,1,0,1,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,1,0,1],[0,1,1,1,0],[1,1,1,1,1],[0,1,1,1,0],[1,0,1,0,1]]",
        "output": "12"
      },
      {
        "input": "grid = [[1,0,0,0,1],[0,1,0,1,0],[0,0,1,0,0],[0,1,0,1,0],[1,0,0,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0,1,0],[1,0,1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0,1,0],[1,0,1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0,1,0],[1,0,1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0,1,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,0],[0,1,0,1,0,1,0,0],[0,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,0,1,0,1],[1,1,1,1,1],[0,1,0,1,0],[1,1,1,1,1],[1,0,1,0,1],[1,1,1,1,1]]",
        "output": "8"
      },
      {
        "input": "grid = [[1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1],[0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],[0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1]]",
        "output": "50"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,1,1,1,0],[1,1,1,1,1],[0,1,1,1,0],[0,0,1,0,0],[0,0,0,0,0]]",
        "output": "10"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1]]",
        "output": "128"
      },
      {
        "input": "grid = [[1,0,1,0,1,1,1,1,1,1],[0,1,0,1,0,1,0,1,0,1],[1,1,1,1,1,1,1,1,1,1],[0,0,0,1,1,1,1,1,0,0],[0,0,0,0,1,1,0,0,0,0]]",
        "output": "19"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[0,0,1,1,1,1,1,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "18"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,0,1,0],[0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,1,0,0,0],[0,0,0,0,1,1,0,0,0,0],[0,0,0,0,1,1,0,0,0,0],[0,0,0,1,0,0,1,0,0,0],[0,0,1,0,0,0,0,1,0,0],[0,1,0,0,0,0,0,0,1,0],[1,0,0,0,0,0,0,0,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0],[0,0,1,1,1,1,1,0,0,0],[0,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,1,1,0]]",
        "output": "40"
      },
      {
        "input": "grid = [[1,1,1,0,1,1,1,1,1,1],[0,1,1,1,1,1,1,1,1,0],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1]]",
        "output": "14"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,1],[1,0,1,1,1,1,1,0,1,1],[1,0,1,0,0,0,0,1,0,1],[1,0,1,0,1,1,0,1,0,1],[1,0,1,0,1,1,0,1,0,1],[1,0,1,0,0,0,0,1,0,1],[1,0,1,1,1,1,1,0,1,1],[1,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,1,1,0,1,1,0,1],[1,1,1,1,1,1,1,1],[0,1,0,1,0,1,0,1],[1,1,1,1,1,1,1,1],[0,1,1,0,1,1,0,1]]",
        "output": "14"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1]]",
        "output": "100"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,1,1,1,0,0,0,0],[0,0,1,1,1,1,1,1,1,1,0,0,0],[0,1,1,1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,0],[0,1,1,1,1,1,1,1,1,1,1,0,0],[0,0,1,1,1,1,1,1,1,1,0,0,0],[0,0,0,1,1,1,1,1,1,0,0,0,0],[0,0,0,0,1,1,1,0,0,0,0,0,0]]",
        "output": "177"
      },
      {
        "input": "grid = [[1,1,1,0,0,0,1,1,1],[0,1,0,0,0,0,0,1,0],[1,1,1,1,1,1,1,1,1],[0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,0,1,0,1,0,1,0,1,1],[1,1,1,1,1,1,1,1,1,1],[1,0,1,0,1,0,1,0,1,1],[1,1,1,1,1,1,1,1,1,1],[1,0,1,0,1,0,1,0,1,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "24"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0,0,0],[0,0,1,1,1,1,1,0,0,0,0,0],[0,1,1,1,1,1,1,1,0,0,0,0],[0,1,1,1,1,1,1,1,1,0,0,0],[0,0,1,1,1,1,1,0,0,0,0,0],[0,0,0,1,1,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]]",
        "output": "53"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,1,1,0,0],[0,1,1,1,1,1,0],[1,1,1,1,1,1,1],[0,1,1,1,1,1,0],[0,0,1,1,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]",
        "output": "32"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,1],[1,0,1,1,1,1,1,1,0,1],[1,0,1,0,1,0,1,0,1,1],[1,0,1,1,1,1,1,1,0,1],[1,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "200"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,0,1,1,1,1],[1,1,1,1,1,1,1,1]]",
        "output": "54"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,1,0,0,0,1,0,0,0],[0,0,1,1,1,0,0,1,1,1,0],[0,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[0,1,1,1,1,1,1,1,1,1,1],[0,0,1,1,1,1,1,1,1,0,0],[0,0,0,1,1,1,1,1,0,0,0]]",
        "output": "112"
      }
    ]
  },
  {
    "id": 1467,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Combinatorics",
      "Probability and Statistics"
    ],
    "problemDescription": "Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i.\nAll the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).\nPlease note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully).\nReturn the probability that the two boxes have the same number of distinct balls. Answers within 10-5 of the actual value will be accepted as correct.\n\u00a0\nExample 1:\n\nInput: balls = [1,1]\nOutput: 1.00000\nExplanation: Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1\n\nExample 2:\n\nInput: balls = [2,1,1]\nOutput: 0.66667\nExplanation: We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667\n\nExample 3:\n\nInput: balls = [1,2,1,2]\nOutput: 0.60000\nExplanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6\n\n\u00a0\nConstraints:\n\n1 <= balls.length <= 8\n1 <= balls[i] <= 6\nsum(balls) is even.\n\n",
    "starterCode": "class Solution:\n    def getProbability(self, balls: List[int]) -> float:\n        ",
    "testCases": [
      {
        "input": "balls = [6,6]",
        "output": "1.0"
      },
      {
        "input": "balls = [4,4,4,4]",
        "output": "0.820979020979021"
      },
      {
        "input": "balls = [2,1,1]",
        "output": "0.6666666666666666"
      },
      {
        "input": "balls = [1,2,2,2,2,2,2]",
        "output": "0.8571428571428571"
      },
      {
        "input": "balls = [1,2,1,2]",
        "output": "0.6"
      },
      {
        "input": "balls = [2,2,2,2]",
        "output": "1.0"
      },
      {
        "input": "balls = [6,1]",
        "output": "0.0"
      },
      {
        "input": "balls = [6]",
        "output": "1.0"
      },
      {
        "input": "balls = [3,3]",
        "output": "1.0"
      },
      {
        "input": "balls = [1,2,3,4,5,6]",
        "output": "0.5375089306977852"
      },
      {
        "input": "balls = [2,2,2]",
        "output": "1.0"
      },
      {
        "input": "balls = [1,1,1,1,1,1,1,1]",
        "output": "1.0"
      },
      {
        "input": "balls = [2,1,1,1,1]",
        "output": "0.6"
      },
      {
        "input": "balls = [1,1]",
        "output": "1.0"
      },
      {
        "input": "balls = [3,2,1]",
        "output": "0.3"
      },
      {
        "input": "balls = [1,2,3]",
        "output": "0.3"
      },
      {
        "input": "balls = [6,6,6,6,6,6,6,6]",
        "output": "0.8557108876701283"
      },
      {
        "input": "balls = [1,1,1,1]",
        "output": "1.0"
      },
      {
        "input": "balls = [1,1,2,2,3,3]",
        "output": "0.38311688311688313"
      },
      {
        "input": "balls = [4,2]",
        "output": "0.6"
      },
      {
        "input": "balls = [5,5,1,1,1]",
        "output": "0.032467532467532464"
      },
      {
        "input": "balls = [4,3,2,1]",
        "output": "0.30952380952380953"
      },
      {
        "input": "balls = [5, 5, 1, 1]",
        "output": "0.5454545454545454"
      },
      {
        "input": "balls = [1,2,3,4]",
        "output": "0.30952380952380953"
      },
      {
        "input": "balls = [6, 2, 2, 2]",
        "output": "0.4329004329004329"
      },
      {
        "input": "balls = [6, 4, 2, 2, 2]",
        "output": "0.40792540792540793"
      },
      {
        "input": "balls = [2,2,2,1,1]",
        "output": "0.5714285714285714"
      },
      {
        "input": "balls = [5,1,1,1,1]",
        "output": "0.8571428571428571"
      },
      {
        "input": "balls = [4, 4, 1]",
        "output": "0.11428571428571428"
      },
      {
        "input": "balls = [2, 2, 2, 2, 2, 2]",
        "output": "1.0"
      },
      {
        "input": "balls = [6, 6]",
        "output": "1.0"
      },
      {
        "input": "balls = [6, 1, 1, 1]",
        "output": "0.0"
      },
      {
        "input": "balls = [3,2,1,1,1]",
        "output": "0.2571428571428571"
      },
      {
        "input": "balls = [3,3,3,1]",
        "output": "0.21428571428571427"
      },
      {
        "input": "balls = [3,2,2,1]",
        "output": "0.37142857142857144"
      },
      {
        "input": "balls = [1, 1, 1, 1, 1, 1]",
        "output": "1.0"
      },
      {
        "input": "balls = [1,1,1,1,1,1]",
        "output": "1.0"
      },
      {
        "input": "balls = [5,4,3,2,1]",
        "output": "0.5474941724941725"
      },
      {
        "input": "balls = [2,2,2,2,1]",
        "output": "0.8"
      },
      {
        "input": "balls = [6, 6, 6]",
        "output": "0.9777869189633895"
      },
      {
        "input": "balls = [1, 2, 3, 4]",
        "output": "0.30952380952380953"
      },
      {
        "input": "balls = [4, 2, 1]",
        "output": "0.5"
      },
      {
        "input": "balls = [1, 2, 2, 1, 1]",
        "output": "0.6"
      },
      {
        "input": "balls = [3,2,2,1,1,1]",
        "output": "0.30952380952380953"
      },
      {
        "input": "balls = [5,3,2]",
        "output": "0.5555555555555556"
      },
      {
        "input": "balls = [6,1,1]",
        "output": "0.5714285714285714"
      },
      {
        "input": "balls = [5, 3, 1]",
        "output": "0.21428571428571427"
      },
      {
        "input": "balls = [4,2,1,1]",
        "output": "0.34285714285714286"
      },
      {
        "input": "balls = [3,2,1,1]",
        "output": "0.7"
      },
      {
        "input": "balls = [5, 3, 3]",
        "output": "1.3531746031746033"
      },
      {
        "input": "balls = [6, 3, 3]",
        "output": "0.7251082251082251"
      },
      {
        "input": "balls = [5, 1, 1]",
        "output": "1.0"
      },
      {
        "input": "balls = [4,2,2]",
        "output": "0.5142857142857142"
      },
      {
        "input": "balls = [3, 3, 1, 1]",
        "output": "0.5714285714285714"
      },
      {
        "input": "balls = [3,3,3,3,3,3]",
        "output": "0.6334841628959276"
      },
      {
        "input": "balls = [4, 3, 2, 1]",
        "output": "0.30952380952380953"
      },
      {
        "input": "balls = [2,3,2,1]",
        "output": "0.37142857142857144"
      },
      {
        "input": "balls = [2, 2, 2, 2]",
        "output": "1.0"
      },
      {
        "input": "balls = [4,2,2,1]",
        "output": "0.5857142857142857"
      },
      {
        "input": "balls = [4,4,4,2]",
        "output": "0.5664335664335665"
      },
      {
        "input": "balls = [1,2,2,3,3]",
        "output": "0.6507936507936508"
      },
      {
        "input": "balls = [2,2,1,1,1,1]",
        "output": "0.5142857142857142"
      },
      {
        "input": "balls = [1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1.0"
      },
      {
        "input": "balls = [3, 2, 2]",
        "output": "1.1"
      },
      {
        "input": "balls = [6,2,1,1]",
        "output": "0.31746031746031744"
      },
      {
        "input": "balls = [5,5,5]",
        "output": "1.7657342657342658"
      },
      {
        "input": "balls = [4,3,1]",
        "output": "0.11428571428571428"
      },
      {
        "input": "balls = [5,1,1,1,1,1]",
        "output": "0.0"
      },
      {
        "input": "balls = [4,4,1,1]",
        "output": "0.5555555555555556"
      },
      {
        "input": "balls = [6, 2, 2]",
        "output": "0.47619047619047616"
      },
      {
        "input": "balls = [1, 3, 3, 1]",
        "output": "0.5714285714285714"
      },
      {
        "input": "balls = [5, 1, 1, 1]",
        "output": "0.0"
      },
      {
        "input": "balls = [3,3,1,1]",
        "output": "0.5714285714285714"
      },
      {
        "input": "balls = [3, 3, 3, 3]",
        "output": "0.7662337662337663"
      },
      {
        "input": "balls = [6,1,1,1,1,1,1,1]",
        "output": "0.0"
      },
      {
        "input": "balls = [3,3,3,3]",
        "output": "0.7662337662337663"
      },
      {
        "input": "balls = [6,2,1,1,1]",
        "output": "0.4166666666666667"
      },
      {
        "input": "balls = [4, 2]",
        "output": "0.6"
      },
      {
        "input": "balls = [5,1,1,1]",
        "output": "0.0"
      },
      {
        "input": "balls = [4, 2, 2]",
        "output": "0.5142857142857142"
      },
      {
        "input": "balls = [2, 2, 1, 1, 1, 1]",
        "output": "0.5142857142857142"
      },
      {
        "input": "balls = [4, 4, 4, 4]",
        "output": "0.820979020979021"
      },
      {
        "input": "balls = [1, 1, 2, 2, 3, 3]",
        "output": "0.38311688311688313"
      },
      {
        "input": "balls = [4,4,2,2]",
        "output": "0.5238095238095238"
      },
      {
        "input": "balls = [6, 1, 1]",
        "output": "0.5714285714285714"
      },
      {
        "input": "balls = [4,4,1]",
        "output": "0.11428571428571428"
      },
      {
        "input": "balls = [6, 6, 1, 1]",
        "output": "0.5384615384615384"
      },
      {
        "input": "balls = [4, 4, 2]",
        "output": "0.6190476190476191"
      },
      {
        "input": "balls = [6,2,2,2,2,2,2]",
        "output": "0.38009049773755654"
      },
      {
        "input": "balls = [4, 4, 3, 2, 1]",
        "output": "0.30186480186480186"
      },
      {
        "input": "balls = [3, 2, 1, 1, 1]",
        "output": "0.2571428571428571"
      },
      {
        "input": "balls = [4, 4, 4]",
        "output": "0.8961038961038961"
      },
      {
        "input": "balls = [6,1,1,1]",
        "output": "0.0"
      },
      {
        "input": "balls = [2,2,2,2,2,2]",
        "output": "1.0"
      },
      {
        "input": "balls = [6,1,1,1,1,1]",
        "output": "0.0"
      },
      {
        "input": "balls = [6,3,1,1,1,1]",
        "output": "0.6818181818181818"
      },
      {
        "input": "balls = [1, 2, 3, 2]",
        "output": "0.37142857142857144"
      },
      {
        "input": "balls = [5,2,2,1]",
        "output": "0.31746031746031744"
      },
      {
        "input": "balls = [3, 2, 1]",
        "output": "0.3"
      },
      {
        "input": "balls = [3,2,1,1,1,1]",
        "output": "0.6"
      },
      {
        "input": "balls = [2, 2, 2, 1, 1]",
        "output": "0.5714285714285714"
      },
      {
        "input": "balls = [3, 2, 2, 1]",
        "output": "0.37142857142857144"
      }
    ]
  },
  {
    "id": 1751,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "problemDescription": "You are given an array of events where events[i] = [startDayi, endDayi, valuei]. The ith event starts at startDayi and ends at endDayi, and if you attend this event, you will receive a value of valuei. You are also given an integer k which represents the maximum number of events you can attend.\nYou can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.\nReturn the maximum sum of values that you can receive by attending events.\n\u00a0\nExample 1:\n\n\nInput: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2\nOutput: 7\nExplanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.\nExample 2:\n\n\nInput: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2\nOutput: 10\nExplanation: Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do not have to attend k events.\nExample 3:\n\n\nInput: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3\nOutput: 9\nExplanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.\n\u00a0\nConstraints:\n\n1 <= k <= events.length\n1 <= k * events.length <= 106\n1 <= startDayi <= endDayi <= 109\n1 <= valuei <= 106\n\n",
    "starterCode": "class Solution:\n    def maxValue(self, events: List[List[int]], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "events = [[1,5,4],[11,15,1],[8,10,2],[2,11,6]], k = 3",
        "output": "7"
      },
      {
        "input": "events = [[2,8,6],[4,9,10],[6,8,3]], k = 2",
        "output": "10"
      },
      {
        "input": "events = [[1,5,3],[1,5,6],[6,10,5],[2,9,4]], k = 2",
        "output": "11"
      },
      {
        "input": "events = [[1,2,100],[2,3,200],[3,4,300],[4,5,400],[5,6,500]], k = 3",
        "output": "900"
      },
      {
        "input": "events = [[1,2,7],[2,3,10],[3,4,3],[1,5,5],[6,7,1]], k = 4",
        "output": "11"
      },
      {
        "input": "events = [[1,2,4],[3,5,1],[5,6,2],[6,7,3]], k = 3",
        "output": "8"
      },
      {
        "input": "events = [[1,5,3],[1,5,6],[6,10,5],[2,9,8]], k = 2",
        "output": "11"
      },
      {
        "input": "events = [[1,5,3],[1,5,6],[6,10,5],[2,7,8],[9,10,4]], k = 3",
        "output": "12"
      },
      {
        "input": "events = [[1,5,3],[1,5,6],[6,6,5],[2,7,9]], k = 3",
        "output": "11"
      },
      {
        "input": "events = [[2,8,6],[2,9,9],[1,6,1],[3,5,5],[1,5,3]], k = 2",
        "output": "9"
      },
      {
        "input": "events = [[1,2,100],[2,3,100],[3,4,100]], k = 1",
        "output": "100"
      },
      {
        "input": "events = [[1,5,3],[1,5,6],[1,5,5],[2,3,5],[2,3,5]], k = 1",
        "output": "6"
      },
      {
        "input": "events = [[1,2,4],[3,4,3],[2,3,1]], k = 2",
        "output": "7"
      },
      {
        "input": "events = [[1,2,3],[4,5,4],[1,5,5]], k = 2",
        "output": "7"
      },
      {
        "input": "events = [[1,2,4],[3,4,3],[2,3,10]], k = 2",
        "output": "10"
      },
      {
        "input": "events = [[1,3,5],[2,4,6],[3,5,7],[4,6,8]], k = 2",
        "output": "13"
      },
      {
        "input": "events = [[1,5,3],[1,5,6],[1,5,5]], k = 2",
        "output": "6"
      },
      {
        "input": "events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3",
        "output": "9"
      },
      {
        "input": "events = [[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,10,10]], k = 5",
        "output": "50"
      },
      {
        "input": "events = [[1,2,1],[1,3,2],[1,4,3],[1,5,4],[1,6,5],[1,7,6],[1,8,7],[1,9,8],[1,10,9],[2,11,10],[3,12,11],[4,13,12],[5,14,13],[6,15,14]], k = 5",
        "output": "18"
      },
      {
        "input": "events = [[1,3,10],[2,4,20],[3,5,30],[4,6,40],[5,7,50],[6,8,60],[7,9,70],[8,10,80],[9,11,90],[10,12,100],[11,13,110],[12,14,120]], k = 4",
        "output": "300"
      },
      {
        "input": "events = [[1,1000000000,1],[1,1000000000,2],[1,1000000000,3],[1,1000000000,4],[1,1000000000,5]], k = 5",
        "output": "5"
      },
      {
        "input": "events = [[1,2,10],[10,11,10],[20,21,10],[30,31,10],[40,41,10],[50,51,10],[60,61,10],[70,71,10],[80,81,10],[90,91,10]], k = 5",
        "output": "50"
      },
      {
        "input": "events = [[1,1000000000,1000000],[2,999999999,999999],[3,888888888,888888],[4,777777777,777777],[5,666666666,666666]], k = 3",
        "output": "1000000"
      },
      {
        "input": "events = [[1,10,100],[11,20,200],[21,30,300],[15,25,150],[26,35,250]], k = 4",
        "output": "600"
      },
      {
        "input": "events = [[1,2,100],[2,3,200],[3,4,300],[4,5,400],[5,6,500],[6,7,600],[7,8,700],[8,9,800],[9,10,900],[10,11,1000],[11,12,1100],[12,13,1200],[13,14,1300]], k = 7",
        "output": "4900"
      },
      {
        "input": "events = [[1,10,10],[2,9,8],[3,8,6],[4,7,4],[5,6,2]], k = 5",
        "output": "10"
      },
      {
        "input": "events = [[1,1,1000000],[2,2,999999],[3,3,999998],[4,4,999997],[5,5,999996],[6,6,999995],[7,7,999994],[8,8,999993],[9,9,999992],[10,10,999991]], k = 5",
        "output": "4999990"
      },
      {
        "input": "events = [[1,2,10],[3,4,20],[2,3,15],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,10,50],[10,11,55]], k = 4",
        "output": "160"
      },
      {
        "input": "events = [[1,1,1],[1,2,2],[1,3,3],[1,4,4],[1,5,5],[1,6,6],[1,7,7],[1,8,8],[1,9,9],[1,10,10]], k = 1",
        "output": "10"
      },
      {
        "input": "events = [[1,1,1000],[2,2,2000],[3,3,3000],[4,4,4000],[5,5,5000],[6,6,6000],[7,7,7000],[8,8,8000],[9,9,9000]], k = 5",
        "output": "35000"
      },
      {
        "input": "events = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[10,11,100],[11,12,110],[12,13,120],[13,14,130],[14,15,140]], k = 7",
        "output": "560"
      },
      {
        "input": "events = [[1,10,5],[2,9,6],[3,8,7],[4,7,8],[5,6,9],[11,20,10],[12,19,11],[13,18,12],[14,17,13],[15,16,14]], k = 4",
        "output": "23"
      },
      {
        "input": "events = [[1,3,1000],[2,5,1000],[3,7,1000],[4,8,1000],[5,10,1000],[6,11,1000],[7,12,1000],[8,13,1000],[9,14,1000],[10,15,1000]], k = 5",
        "output": "3000"
      },
      {
        "input": "events = [[1,2,1000000],[2,3,999999],[3,4,999998],[4,5,999997],[5,6,999996],[6,7,999995],[7,8,999994],[8,9,999993],[9,10,999992]], k = 5",
        "output": "4999980"
      },
      {
        "input": "events = [[1,10,100],[11,20,200],[21,30,300],[31,40,400],[41,50,500],[51,60,600]], k = 3",
        "output": "1500"
      },
      {
        "input": "events = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[10,11,100],[11,12,110]], k = 6",
        "output": "360"
      },
      {
        "input": "events = [[1,10,10],[2,9,20],[3,8,30],[4,7,40],[5,6,50],[1,10,60],[2,9,70],[3,8,80],[4,7,90],[5,6,100]], k = 5",
        "output": "100"
      },
      {
        "input": "events = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[10,11,100]], k = 5",
        "output": "300"
      },
      {
        "input": "events = [[1,1000000000,1000000],[2,999999999,900000],[3,999999998,800000],[4,999999997,700000],[5,999999996,600000],[6,999999995,500000],[7,999999994,400000],[8,999999993,300000],[9,999999992,200000],[10,999999991,100000]], k = 5",
        "output": "1000000"
      },
      {
        "input": "events = [[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10],[1,2,10]], k = 5",
        "output": "10"
      },
      {
        "input": "events = [[1,2,1],[1,3,2],[1,4,3],[1,5,4],[1,6,5],[1,7,6],[1,8,7],[1,9,8],[1,10,9]], k = 2",
        "output": "9"
      },
      {
        "input": "events = [[1,2,5],[3,5,10],[5,7,15],[7,9,20],[9,11,25],[11,13,30]], k = 4",
        "output": "65"
      },
      {
        "input": "events = [[1,3,50],[2,4,60],[3,5,70],[4,6,80],[5,7,90],[6,8,100],[7,9,110],[8,10,120],[9,11,130],[10,12,140]], k = 3",
        "output": "330"
      },
      {
        "input": "events = [[1,2,1],[3,4,2],[5,6,3],[7,8,4],[9,10,5],[11,12,6],[13,14,7],[15,16,8],[17,18,9],[19,20,10],[21,22,11],[23,24,12]], k = 6",
        "output": "57"
      },
      {
        "input": "events = [[1,10,5],[2,9,10],[3,8,15],[4,7,20],[5,6,25],[6,5,30],[7,4,35],[8,3,40],[9,2,45],[10,1,50]], k = 5",
        "output": "200"
      },
      {
        "input": "events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9],[10,10,10],[11,11,11],[12,12,12],[13,13,13]], k = 13",
        "output": "91"
      },
      {
        "input": "events = [[1,10,1],[2,10,2],[3,10,3],[4,10,4],[5,10,5],[6,10,6],[7,10,7],[8,10,8],[9,10,9],[1,20,10],[11,20,11],[21,30,12],[31,40,13],[41,50,14]], k = 5",
        "output": "59"
      },
      {
        "input": "events = [[1,2,100],[2,3,200],[3,4,300],[4,5,400],[5,6,500],[6,7,600],[7,8,700],[8,9,800],[9,10,900]], k = 4",
        "output": "2400"
      },
      {
        "input": "events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9],[10,10,10]], k = 5",
        "output": "40"
      },
      {
        "input": "events = [[1,2,100],[2,3,200],[3,4,300],[4,5,400],[5,6,500],[6,7,600],[7,8,700],[8,9,800],[9,10,900],[10,11,1000],[11,12,1100],[12,13,1200],[13,14,1300]], k = 6",
        "output": "4800"
      },
      {
        "input": "events = [[1,10,100],[2,5,200],[3,8,300],[6,12,400],[9,15,500]], k = 3",
        "output": "800"
      },
      {
        "input": "events = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10]], k = 10",
        "output": "30"
      },
      {
        "input": "events = [[1,10,1],[11,20,2],[21,30,3],[31,40,4],[41,50,5],[51,60,6],[61,70,7],[71,80,8],[81,90,9]], k = 9",
        "output": "45"
      },
      {
        "input": "events = [[1,1000000000,1000000],[2,999999999,2000000],[3,999999998,3000000],[4,999999997,4000000]], k = 2",
        "output": "4000000"
      },
      {
        "input": "events = [[1,2,4],[1,2,3],[1,2,2],[1,2,1],[3,4,5],[3,4,6],[5,6,7],[5,6,8]], k = 3",
        "output": "18"
      },
      {
        "input": "events = [[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,10,10]], k = 9",
        "output": "50"
      },
      {
        "input": "events = [[1,1000000000,1],[2,1000000000,2],[3,1000000000,3],[4,1000000000,4],[5,1000000000,5]], k = 3",
        "output": "5"
      },
      {
        "input": "events = [[1,2,1000000],[10,11,999999],[20,21,999998],[30,31,999997],[40,41,999996],[50,51,999995],[60,61,999994],[70,71,999993],[80,81,999992],[90,91,999991]], k = 10",
        "output": "9999955"
      },
      {
        "input": "events = [[1,2,1],[1,3,2],[1,4,3],[1,5,4],[1,6,5],[1,7,6],[1,8,7],[1,9,8],[1,10,9],[1,11,10],[1,12,11],[1,13,12],[1,14,13],[1,15,14]], k = 7",
        "output": "14"
      },
      {
        "input": "events = [[1,5,1],[1,5,2],[1,5,3],[1,5,4],[1,5,5],[1,5,6],[1,5,7],[1,5,8],[1,5,9],[1,5,10],[1,5,11],[1,5,12],[1,5,13],[1,5,14],[1,5,15]], k = 5",
        "output": "15"
      },
      {
        "input": "events = [[1,10,10],[11,20,20],[21,30,30],[31,40,40],[41,50,50],[51,60,60],[61,70,70],[71,80,80],[81,90,90],[91,100,100]], k = 10",
        "output": "550"
      },
      {
        "input": "events = [[1,3,100],[2,5,200],[3,6,300],[4,7,400],[5,8,500],[6,9,600]], k = 3",
        "output": "800"
      },
      {
        "input": "events = [[1,2,1],[3,4,2],[5,6,3],[7,8,4],[9,10,5],[11,12,6],[13,14,7],[15,16,8],[17,18,9],[19,20,10]], k = 5",
        "output": "40"
      },
      {
        "input": "events = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[10,11,100],[11,12,110],[12,13,120]], k = 10",
        "output": "420"
      },
      {
        "input": "events = [[1,2,1],[1,3,2],[1,4,3],[1,5,4],[1,6,5],[2,3,6],[2,4,7],[2,5,8],[2,6,9],[3,4,10],[3,5,11],[3,6,12],[4,5,13],[4,6,14],[5,6,15]], k = 3",
        "output": "26"
      },
      {
        "input": "events = [[1,2,1],[1,2,1],[1,2,1],[1,2,1],[1,2,1],[1,2,1],[1,2,1],[1,2,1],[1,2,1],[1,2,1]], k = 5",
        "output": "1"
      },
      {
        "input": "events = [[1,1,100],[1,1,200],[1,1,300],[1,1,400],[1,1,500],[1,1,600],[1,1,700],[1,1,800],[1,1,900],[1,1,1000]], k = 5",
        "output": "1000"
      },
      {
        "input": "events = [[1,5,5],[5,10,10],[10,15,15],[15,20,20],[20,25,25],[25,30,30],[30,35,35]], k = 3",
        "output": "75"
      },
      {
        "input": "events = [[1,1,1],[1,2,2],[1,3,3],[1,4,4],[1,5,5],[2,2,1],[2,3,2],[2,4,3],[2,5,4],[3,3,1],[3,4,2],[3,5,3],[4,4,1],[4,5,2],[5,5,1]], k = 3",
        "output": "5"
      },
      {
        "input": "events = [[5,10,15],[5,7,10],[7,12,20],[9,15,18],[10,17,12],[13,20,30],[14,20,25]], k = 3",
        "output": "50"
      },
      {
        "input": "events = [[1,10,1],[2,9,2],[3,8,3],[4,7,4],[5,6,5],[11,20,6],[12,19,7],[13,18,8],[14,17,9],[15,16,10]], k = 5",
        "output": "15"
      },
      {
        "input": "events = [[1,3,100],[2,5,200],[3,6,300],[4,7,400],[5,8,500],[6,9,600]], k = 4",
        "output": "800"
      },
      {
        "input": "events = [[1,1000000000,1000000],[1000000001,2000000000,2000000],[2000000001,3000000000,3000000]], k = 2",
        "output": "5000000"
      },
      {
        "input": "events = [[1,1,100],[2,2,200],[3,3,300],[4,4,400],[5,5,500],[6,6,600],[7,7,700],[8,8,800],[9,9,900],[10,10,1000]], k = 10",
        "output": "5500"
      },
      {
        "input": "events = [[1,5,5],[6,10,10],[11,15,15],[16,20,20],[21,25,25],[26,30,30],[31,35,35],[36,40,40],[41,45,45],[46,50,50]], k = 5",
        "output": "200"
      },
      {
        "input": "events = [[1,2,10],[2,3,20],[3,4,30],[4,5,40],[5,6,50],[6,7,60],[7,8,70],[8,9,80],[9,10,90],[10,11,100],[11,12,110],[12,13,120]], k = 6",
        "output": "420"
      },
      {
        "input": "events = [[1,1000000000,1],[1,1000000000,2],[1,1000000000,3],[1,1000000000,4],[1,1000000000,5]], k = 2",
        "output": "5"
      },
      {
        "input": "events = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9]], k = 5",
        "output": "25"
      },
      {
        "input": "events = [[1,5,5],[2,6,6],[3,7,7],[4,8,8],[5,9,9],[6,10,10],[7,11,11],[8,12,12],[9,13,13],[10,14,14]], k = 3",
        "output": "23"
      },
      {
        "input": "events = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10],[11,12,11],[12,13,12],[13,14,13],[14,15,14],[15,16,15]], k = 7",
        "output": "63"
      },
      {
        "input": "events = [[1,1000000000,1],[1000000000,1000000000,1000000]], k = 1",
        "output": "1000000"
      },
      {
        "input": "events = [[1,2,1],[1,2,2],[1,2,3],[2,3,4],[2,3,5],[2,3,6],[3,4,7],[3,4,8],[3,4,9],[4,5,10]], k = 3",
        "output": "16"
      },
      {
        "input": "events = [[1,10,5],[2,9,10],[3,8,15],[4,7,20],[5,6,25],[6,5,30]], k = 3",
        "output": "30"
      },
      {
        "input": "events = [[1,3,50],[2,5,20],[4,6,40],[6,9,60],[8,11,80],[10,12,30]], k = 3",
        "output": "170"
      },
      {
        "input": "events = [[1,2,1000000],[2,3,1000000],[3,4,1000000],[4,5,1000000],[5,6,1000000],[6,7,1000000]], k = 3",
        "output": "3000000"
      },
      {
        "input": "events = [[1,2,100],[3,4,200],[5,6,300],[7,8,400],[9,10,500],[11,12,600],[13,14,700],[15,16,800],[17,18,900]], k = 5",
        "output": "3500"
      },
      {
        "input": "events = [[1,3,10],[2,5,20],[3,7,30],[4,8,40],[5,9,50],[6,10,60],[7,11,70],[8,12,80],[9,13,90]], k = 4",
        "output": "140"
      },
      {
        "input": "events = [[1,10,100],[11,20,200],[21,30,300],[31,40,400],[41,50,500],[51,60,600],[61,70,700],[71,80,800],[81,90,900],[91,100,1000]], k = 5",
        "output": "4000"
      },
      {
        "input": "events = [[1,2,1],[1,3,2],[1,4,3],[1,5,4],[1,6,5],[1,7,6],[1,8,7],[1,9,8],[1,10,9],[1,11,10]], k = 5",
        "output": "10"
      },
      {
        "input": "events = [[1,2,1000],[2,3,2000],[3,4,3000],[4,5,4000],[5,6,5000],[6,7,6000],[7,8,7000],[8,9,8000],[9,10,9000]], k = 9",
        "output": "25000"
      },
      {
        "input": "events = [[1,10,1],[2,9,2],[3,8,3],[4,7,4],[5,6,5],[6,5,6],[7,4,7],[8,3,8],[9,2,9],[10,1,10]], k = 5",
        "output": "40"
      },
      {
        "input": "events = [[1,1,1],[1,2,2],[1,3,3],[1,4,4],[1,5,5],[1,6,6],[1,7,7],[1,8,8],[1,9,9],[1,10,10],[1,11,11],[1,12,12],[1,13,13],[1,14,14],[1,15,15]], k = 15",
        "output": "15"
      },
      {
        "input": "events = [[1,10,100],[11,20,200],[21,30,300],[31,40,400],[41,50,500],[51,60,600],[61,70,700],[71,80,800],[81,90,900],[91,100,1000]], k = 3",
        "output": "2700"
      },
      {
        "input": "events = [[1,20,100],[2,15,80],[3,10,60],[4,5,40],[5,6,20],[6,7,10],[7,8,5],[8,9,3],[9,10,2],[10,11,1],[11,12,2],[12,13,3],[13,14,5],[14,15,10],[15,16,20],[16,17,40],[17,18,60],[18,19,80],[19,20,100]], k = 10",
        "output": "247"
      },
      {
        "input": "events = [[1,10,10],[2,9,11],[3,8,12],[4,7,13],[5,6,14],[6,5,15],[7,4,16],[8,3,17],[9,2,18],[10,1,19]], k = 5",
        "output": "85"
      },
      {
        "input": "events = [[1,3,5],[2,5,8],[4,6,6],[6,8,3],[5,7,10],[7,9,4]], k = 4",
        "output": "15"
      },
      {
        "input": "events = [[1,2,100],[3,5,150],[6,8,200],[9,11,250],[12,14,300],[15,17,350]], k = 4",
        "output": "1100"
      },
      {
        "input": "events = [[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10]], k = 5",
        "output": "30"
      },
      {
        "input": "events = [[1,100,1000],[2,99,900],[3,98,800],[4,97,700],[5,96,600],[6,95,500],[7,94,400],[8,93,300],[9,92,200],[10,91,100]], k = 5",
        "output": "1000"
      },
      {
        "input": "events = [[1,100,1],[50,150,10],[100,200,50],[150,250,100],[200,300,200],[250,350,500],[300,400,1000],[350,450,2000],[400,500,5000]], k = 5",
        "output": "5550"
      },
      {
        "input": "events = [[1,2,5],[1,2,5],[1,2,5],[1,2,5],[1,2,5],[1,2,5],[1,2,5]], k = 4",
        "output": "5"
      },
      {
        "input": "events = [[1,50,500],[51,100,400],[101,150,300],[151,200,200],[201,250,100]], k = 3",
        "output": "1200"
      },
      {
        "input": "events = [[1,10,50],[11,20,100],[21,30,150],[31,40,200],[41,50,250]], k = 3",
        "output": "600"
      },
      {
        "input": "events = [[1,3,5],[2,4,6],[3,5,7],[4,6,8],[5,7,9],[6,8,10],[7,9,11],[8,10,12],[9,11,13]], k = 4",
        "output": "30"
      },
      {
        "input": "events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9],[10,10,10],[11,11,11],[12,12,12],[13,13,13],[14,14,14]], k = 7",
        "output": "77"
      },
      {
        "input": "events = [[1,2,50],[1,3,40],[1,4,30],[1,5,20],[1,6,10],[2,7,60],[3,8,70],[4,9,80],[5,10,90],[6,11,100]], k = 4",
        "output": "150"
      },
      {
        "input": "events = [[1,2,10],[1,2,20],[1,2,30],[1,2,40],[1,2,50],[1,2,60],[1,2,70],[1,2,80],[1,2,90],[1,2,100]], k = 3",
        "output": "100"
      }
    ]
  },
  {
    "id": 321,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Greedy",
      "Array",
      "Two Pointers",
      "Monotonic Stack"
    ],
    "problemDescription": "You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\nCreate the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\nReturn an array of the k digits representing the answer.\n\u00a0\nExample 1:\n\nInput: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\nOutput: [9,8,6,5,3]\n\nExample 2:\n\nInput: nums1 = [6,7], nums2 = [6,0,4], k = 5\nOutput: [6,7,6,0,4]\n\nExample 3:\n\nInput: nums1 = [3,9], nums2 = [8,9], k = 3\nOutput: [9,8,9]\n\n\u00a0\nConstraints:\n\nm == nums1.length\nn == nums2.length\n1 <= m, n <= 500\n0 <= nums1[i], nums2[i] <= 9\n1 <= k <= m + n\nnums1 and nums2 do not have leading zeros.\n\n",
    "starterCode": "class Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums1 = [5,5,5,5], nums2 = [5,5,5,5], k = 7",
        "output": "[5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0], k = 5",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5",
        "output": "[9, 8, 6, 5, 3]"
      },
      {
        "input": "nums1 = [9,8,7,6,5,4,3,2,1], nums2 = [1,2,3,4,5,6,7,8,9], k = 18",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1]"
      },
      {
        "input": "nums1 = [6,7], nums2 = [6,0,4], k = 5",
        "output": "[6, 7, 6, 0, 4]"
      },
      {
        "input": "nums1 = [1,6,5,4,3,2,1], nums2 = [9,8,7,6,5,4,3,2,1], k = 7",
        "output": "[9, 8, 7, 6, 6, 5, 5]"
      },
      {
        "input": "nums1 = [3,9], nums2 = [8,9], k = 3",
        "output": "[9, 8, 9]"
      },
      {
        "input": "nums1 = [1], nums2 = [1], k = 2",
        "output": "[1, 1]"
      },
      {
        "input": "nums1 = [0], nums2 = [0], k = 1",
        "output": "[0]"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [2,4,6,8,0], k = 5",
        "output": "[9, 4, 6, 8, 0]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1], k = 5",
        "output": "[5, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [7], nums2 = [9,8,2], k = 3",
        "output": "[9, 8, 7]"
      },
      {
        "input": "nums1 = [1,6,5,4,3,2,1], nums2 = [9,8,7,6,5,4,3,2,1], k = 10",
        "output": "[9, 8, 7, 6, 6, 5, 5, 4, 4, 3]"
      },
      {
        "input": "nums1 = [1,6,5,4,3], nums2 = [9,8,7,6,5], k = 5",
        "output": "[9, 8, 7, 6, 6]"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [5,5,5,5,5], k = 5",
        "output": "[5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [5,6], nums2 = [4,0,9], k = 4",
        "output": "[6, 4, 0, 9]"
      },
      {
        "input": "nums1 = [8,6,9], nums2 = [5,9,7,6,3,2,1], k = 5",
        "output": "[9, 9, 7, 6, 3]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9], nums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1], k = 10",
        "output": "[9, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [2,4,6,8,0], k = 9",
        "output": "[4, 6, 8, 1, 3, 5, 7, 9, 0]"
      },
      {
        "input": "nums1 = [1,3,5,7,9,2,4,6,8,0], nums2 = [0,2,4,6,8,1,3,5,7,9], k = 9",
        "output": "[9, 8, 8, 1, 3, 5, 7, 9, 0]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9], nums2 = [1,2,3,4,5,6,7,8,9], k = 10",
        "output": "[9, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums1 = [9,9,9,9,9,9,9,9,9,9], nums2 = [9,9,9,9,9,9,9,9,9,9], k = 10",
        "output": "[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "nums1 = [5, 6, 7, 8, 9], nums2 = [1, 2, 3, 4, 5], k = 10",
        "output": "[5, 6, 7, 8, 9, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [0,0,0,0,0], nums2 = [1,1,1,1,1], k = 5",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [0,0,0,0,0,0,0,0,0,0], nums2 = [0,0,0,0,0,0,0,0,0,0], k = 5",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0,0,0,0,0,0], k = 5",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "nums1 = [4,3,2,1], nums2 = [8,7,6,5], k = 7",
        "output": "[8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [6, 7, 6, 5, 4, 3, 2, 1], nums2 = [8, 7, 6, 5, 4, 3, 2, 1, 0], k = 8",
        "output": "[8, 7, 7, 6, 6, 5, 5, 4]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,0], nums2 = [9,8,7,6,5,4,3,2,1,0], k = 10",
        "output": "[9, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [1,1,1,1,1], nums2 = [1,1,1,1,1], k = 5",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [4,5,6,7,8,9], k = 6",
        "output": "[7, 8, 9, 1, 2, 3]"
      },
      {
        "input": "nums1 = [3,9,5,0,8], nums2 = [4,6,1,7,2], k = 8",
        "output": "[9, 6, 5, 1, 7, 2, 0, 8]"
      },
      {
        "input": "nums1 = [0,1,2,3,4,5], nums2 = [5,4,3,2,1,0], k = 6",
        "output": "[5, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [9,9,9,9,9], nums2 = [8,8,8,8,8], k = 8",
        "output": "[9, 9, 9, 9, 9, 8, 8, 8]"
      },
      {
        "input": "nums1 = [3,5,7,9], nums2 = [1,2,8,6], k = 5",
        "output": "[9, 1, 2, 8, 6]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1], k = 3",
        "output": "[5, 5, 4]"
      },
      {
        "input": "nums1 = [9,9,9,9], nums2 = [9,9,9,9], k = 7",
        "output": "[9, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9], nums2 = [9,8,7,6,5,4,3,2,1], k = 10",
        "output": "[9, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [9,9,9,9,9,9,9,9,9,9], k = 15",
        "output": "[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [0,2,4,6,8], k = 6",
        "output": "[9, 0, 2, 4, 6, 8]"
      },
      {
        "input": "nums1 = [5,5,5,5], nums2 = [6,6,6,6], k = 7",
        "output": "[6, 6, 6, 6, 5, 5, 5]"
      },
      {
        "input": "nums1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], nums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], k = 9",
        "output": "[9, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [9,8,7,6,5,4,3,2,1], nums2 = [9,8,7,6,5,4,3,2,1], k = 18",
        "output": "[9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 10",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [4,5,6,7,8,9,0], k = 9",
        "output": "[5, 6, 7, 8, 9, 1, 2, 3, 0]"
      },
      {
        "input": "nums1 = [0,0,0,0], nums2 = [0,0,0,0], k = 4",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "nums1 = [3,3,3,3,3,3,3,3,3,3], nums2 = [3,3,3,3,3,3,3,3,3,3], k = 10",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "nums1 = [9,8,7,6,5,4,3,2,1], nums2 = [1], k = 6",
        "output": "[9, 8, 7, 6, 5, 4]"
      },
      {
        "input": "nums1 = [9,8,7,6,5,4,3,2,1], nums2 = [1,2,3,4,5,6,7,8,9], k = 9",
        "output": "[9, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [2,2,2,2,2], nums2 = [2,2,2,2,2], k = 8",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "nums1 = [9, 8, 7, 6, 5, 4, 3, 2, 1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 15",
        "output": "[9, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,0], k = 7",
        "output": "[9, 1, 2, 3, 4, 5, 0]"
      },
      {
        "input": "nums1 = [9,8,7,6,5,4,3,2,1], nums2 = [1,2,3,4,5,6,7,8,9], k = 5",
        "output": "[9, 9, 8, 7, 6]"
      },
      {
        "input": "nums1 = [9,3,7,8], nums2 = [5,6,2,4,3], k = 6",
        "output": "[9, 8, 6, 2, 4, 3]"
      },
      {
        "input": "nums1 = [9,0,9,0,9], nums2 = [9,0,9,0,9,0,9], k = 7",
        "output": "[9, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [9, 8, 7, 6, 5], k = 5",
        "output": "[9, 8, 7, 6, 5]"
      },
      {
        "input": "nums1 = [9, 9, 9, 9, 9, 9, 9, 9, 9], nums2 = [9, 9, 9, 9, 9, 9, 9, 9, 9], k = 15",
        "output": "[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "nums1 = [9,5,3,1,7,8], nums2 = [2,6,4,0,9,5], k = 8",
        "output": "[9, 9, 5, 5, 3, 1, 7, 8]"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [5,5,5,5,5,5,5,5,5,5], k = 10",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [9,8,7,6,5,4,3,2,1,0], nums2 = [0,1,2,3,4,5,6,7,8,9], k = 15",
        "output": "[9, 8, 7, 6, 5, 6, 7, 8, 9, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9], nums2 = [2, 4, 6, 8, 0], k = 7",
        "output": "[8, 1, 3, 5, 7, 9, 0]"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [4,5,6,7,8,9,10,11,12], k = 6",
        "output": "[10, 11, 12, 1, 2, 3]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 8",
        "output": "[9, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums1 = [5, 5, 5, 5, 5, 5, 5], nums2 = [5, 5, 5, 5, 5, 5, 5], k = 12",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [9,8,7,6,5], nums2 = [9,8,7,6,5], k = 10",
        "output": "[9, 9, 8, 8, 7, 7, 6, 6, 5, 5]"
      },
      {
        "input": "nums1 = [5,4,3,2,1], nums2 = [6,7,8,9,10], k = 5",
        "output": "[10, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [2,4,6,8,0], k = 10",
        "output": "[2, 4, 6, 8, 1, 3, 5, 7, 9, 0]"
      },
      {
        "input": "nums1 = [8,9,0,1,2,3,4,5,6,7], nums2 = [7,6,5,4,3,2,1,0,9,8], k = 10",
        "output": "[9, 9, 8, 1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "nums1 = [3,5,7,9], nums2 = [1,2,4,6,8,0], k = 6",
        "output": "[9, 2, 4, 6, 8, 0]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9], nums2 = [9,8,7,6,5,4,3,2,1], k = 18",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1]"
      },
      {
        "input": "nums1 = [1,1,1,1,1], nums2 = [9,9,9,9,9], k = 7",
        "output": "[9, 9, 9, 9, 9, 1, 1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9], nums2 = [9,8,7,6,5,4,3,2,1], k = 15",
        "output": "[9, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [0,0,0,0,0], nums2 = [9,9,9,9,9], k = 7",
        "output": "[9, 9, 9, 9, 9, 0, 0]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9], nums2 = [9,8,7,6,5,4,3,2,1], k = 9",
        "output": "[9, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [9,9,9,9,9,9,9,9,9,9], nums2 = [8,8,8,8,8,8,8,8,8,8], k = 10",
        "output": "[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10], k = 8",
        "output": "[8, 9, 10, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [9,5,3,1,7], nums2 = [8,6,4,2,0], k = 10",
        "output": "[9, 8, 6, 5, 4, 3, 2, 1, 7, 0]"
      },
      {
        "input": "nums1 = [5,3,9,7,1], nums2 = [8,6,4,2,0], k = 7",
        "output": "[9, 8, 7, 6, 4, 2, 1]"
      },
      {
        "input": "nums1 = [8, 5, 2, 3, 9], nums2 = [6, 7, 4, 5, 1], k = 8",
        "output": "[8, 7, 5, 5, 2, 3, 9, 1]"
      },
      {
        "input": "nums1 = [9,7,5,3,1], nums2 = [8,6,4,2,0], k = 9",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [5,5,5,5,5], k = 9",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [3,3,3,3,3,3,3,3,3,3], nums2 = [5,5,5,5,5,5,5,5,5,5], k = 15",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3]"
      },
      {
        "input": "nums1 = [1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1], k = 5",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [9,7,5,3,1], nums2 = [1,3,5,7,9], k = 9",
        "output": "[9, 7, 5, 3, 5, 7, 9, 3, 1]"
      },
      {
        "input": "nums1 = [1,2,2,1,1], nums2 = [2,2,1,1,1], k = 5",
        "output": "[2, 2, 2, 2, 1]"
      },
      {
        "input": "nums1 = [9,8,7,6,5], nums2 = [5,4,3,2,1], k = 8",
        "output": "[9, 8, 7, 6, 5, 5, 4, 3]"
      },
      {
        "input": "nums1 = [3,5,7,7,8,2,1], nums2 = [6,5,3,5,6,9,8,7], k = 10",
        "output": "[9, 8, 7, 3, 5, 7, 7, 8, 2, 1]"
      },
      {
        "input": "nums1 = [9, 9, 9, 9, 9], nums2 = [1, 1, 1, 1, 1], k = 5",
        "output": "[9, 9, 9, 9, 9]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1], nums2 = [9, 9, 9, 9, 9, 9, 9], k = 10",
        "output": "[9, 9, 9, 9, 9, 9, 9, 1, 1, 1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9], nums2 = [9,8,7,6,5,4,3,2,1], k = 17",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 3, 4, 5, 6, 7, 8, 9, 2, 1]"
      },
      {
        "input": "nums1 = [9,2,5,6,3,1], nums2 = [8,6,7,4,5,9], k = 8",
        "output": "[9, 8, 9, 2, 5, 6, 3, 1]"
      },
      {
        "input": "nums1 = [5,3,9,1,2], nums2 = [8,4,7,6,0], k = 5",
        "output": "[9, 8, 7, 6, 2]"
      },
      {
        "input": "nums1 = [9,9,9,9,9], nums2 = [1,2,3,4,5], k = 9",
        "output": "[9, 9, 9, 9, 9, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [9,8,7,6,5,4,3,2,1], nums2 = [9,8,7,6,5,4,3,2,1], k = 5",
        "output": "[9, 9, 8, 8, 7]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1], nums2 = [9,9,9,9,9,9], k = 12",
        "output": "[9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9], nums2 = [9,8,7,6,5,4,3,2,1], k = 8",
        "output": "[9, 9, 8, 7, 6, 5, 4, 3]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11], nums2 = [2, 4, 6, 8, 10, 12], k = 11",
        "output": "[4, 6, 8, 10, 12, 1, 3, 5, 7, 9, 11]"
      },
      {
        "input": "nums1 = [9, 8, 7, 6, 5], nums2 = [4, 3, 2, 1, 0], k = 9",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [9,8,7,6,5], nums2 = [5,4,3,2,1], k = 5",
        "output": "[9, 8, 7, 6, 5]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [9, 8, 7], k = 8",
        "output": "[9, 8, 7, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [3,5,7,7,6,2,1], nums2 = [8,7,6,5,3,0,9,1], k = 9",
        "output": "[9, 3, 5, 7, 7, 6, 2, 1, 1]"
      },
      {
        "input": "nums1 = [5,6,7,8,9], nums2 = [1,2,3,4,5], k = 7",
        "output": "[8, 9, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [2,2,2,2,2,2,2,2,2,2], k = 9",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "nums1 = [3,4,5,1,6], nums2 = [7,8,2,9,0], k = 8",
        "output": "[8, 9, 3, 4, 5, 1, 6, 0]"
      },
      {
        "input": "nums1 = [9, 5, 3, 1, 7, 8], nums2 = [6, 4, 2, 0, 9, 8], k = 7",
        "output": "[9, 9, 8, 5, 3, 7, 8]"
      },
      {
        "input": "nums1 = [9, 8, 7], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9], k = 10",
        "output": "[9, 8, 7, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0], nums2 = [0, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 15",
        "output": "[9, 8, 7, 6, 5, 6, 7, 8, 9, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "nums1 = [0,0,0,0], nums2 = [1,1,1,1,1,1], k = 5",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [6,7,8,9,0], nums2 = [3,4,5,6,7,8,9], k = 10",
        "output": "[8, 9, 3, 4, 5, 6, 7, 8, 9, 0]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1], k = 8",
        "output": "[5, 4, 3, 4, 5, 3, 2, 1]"
      },
      {
        "input": "nums1 = [9, 8, 9, 8, 9], nums2 = [8, 9, 8, 9, 8], k = 9",
        "output": "[9, 9, 8, 9, 8, 9, 8, 9, 8]"
      },
      {
        "input": "nums1 = [5], nums2 = [5, 5, 5, 5, 5], k = 6",
        "output": "[5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5,5], nums2 = [5,5,5,5,5,5,5,5,5,5], k = 10",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [2,4,6,8,0], k = 8",
        "output": "[6, 8, 1, 3, 5, 7, 9, 0]"
      },
      {
        "input": "nums1 = [1], nums2 = [2,3,4,5,6,7,8,9], k = 6",
        "output": "[5, 6, 7, 8, 9, 1]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9], nums2 = [0, 2, 4, 6, 8], k = 10",
        "output": "[1, 3, 5, 7, 9, 0, 2, 4, 6, 8]"
      },
      {
        "input": "nums1 = [0, 0, 0, 0, 0], nums2 = [9, 9, 9, 9, 9], k = 5",
        "output": "[9, 9, 9, 9, 9]"
      },
      {
        "input": "nums1 = [9,8,7,6,5], nums2 = [9,8,7,6,5,4], k = 7",
        "output": "[9, 9, 8, 8, 7, 7, 6]"
      },
      {
        "input": "nums1 = [6,5,4,3,2,1], nums2 = [1,2,3,4,5,6], k = 6",
        "output": "[6, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [4, 4, 4, 4, 4], nums2 = [4, 4, 4, 4, 4], k = 9",
        "output": "[4, 4, 4, 4, 4, 4, 4, 4, 4]"
      }
    ]
  },
  {
    "id": 3068,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Bit Manipulation",
      "Tree",
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "problemDescription": "There exists an undirected tree with n nodes numbered 0 to n - 1. You are given a 0-indexed 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree. You are also given a positive integer k, and a 0-indexed array of non-negative integers nums of length n, where nums[i] represents the value of the node numbered i.\nAlice wants the sum of values of tree nodes to be maximum, for which Alice can perform the following operation any number of times (including zero) on the tree:\n\nChoose any edge [u, v] connecting the nodes u and v, and update their values as follows:\n\n\t\nnums[u] = nums[u] XOR k\nnums[v] = nums[v] XOR k\n\n\n\nReturn the maximum possible sum of the values Alice can achieve by performing the operation any number of times.\n\u00a0\nExample 1:\n\n\nInput: nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]\nOutput: 6\nExplanation: Alice can achieve the maximum sum of 6 using a single operation:\n- Choose the edge [0,2]. nums[0] and nums[2] become: 1 XOR 3 = 2, and the array nums becomes: [1,2,1] -> [2,2,2].\nThe total sum of values is 2 + 2 + 2 = 6.\nIt can be shown that 6 is the maximum achievable sum of values.\n\nExample 2:\n\n\nInput: nums = [2,3], k = 7, edges = [[0,1]]\nOutput: 9\nExplanation: Alice can achieve the maximum sum of 9 using a single operation:\n- Choose the edge [0,1]. nums[0] becomes: 2 XOR 7 = 5 and nums[1] become: 3 XOR 7 = 4, and the array nums becomes: [2,3] -> [5,4].\nThe total sum of values is 5 + 4 = 9.\nIt can be shown that 9 is the maximum achievable sum of values.\n\nExample 3:\n\n\nInput: nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]\nOutput: 42\nExplanation: The maximum achievable sum is 42 which can be achieved by Alice performing no operations.\n\n\u00a0\nConstraints:\n\n2 <= n == nums.length <= 2 * 104\n1 <= k <= 109\n0 <= nums[i] <= 109\nedges.length == n - 1\nedges[i].length == 2\n0 <= edges[i][0], edges[i][1] <= n - 1\nThe input is generated such that edges represent\u00a0a valid tree.\n\n",
    "starterCode": "class Solution:\n    def maximumValueSum(self, nums: List[int], k: int, edges: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [0,1,2,3,4], k = 5, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "26"
      },
      {
        "input": "nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]",
        "output": "42"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 10, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "51"
      },
      {
        "input": "nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]",
        "output": "6"
      },
      {
        "input": "nums = [5,9,14], k = 8, edges = [[0,1],[1,2]]",
        "output": "28"
      },
      {
        "input": "nums = [0,0,0,0], k = 1, edges = [[0,1],[1,2],[2,3]]",
        "output": "4"
      },
      {
        "input": "nums = [2,3], k = 7, edges = [[0,1]]",
        "output": "9"
      },
      {
        "input": "nums = [10,10,10,10], k = 1, edges = [[0,1],[1,2],[2,3]]",
        "output": "44"
      },
      {
        "input": "nums = [0,0,0], k = 5, edges = [[0,1],[1,2]]",
        "output": "10"
      },
      {
        "input": "nums = [5,9,14,10], k = 6, edges = [[0,1],[1,2],[1,3]]",
        "output": "46"
      },
      {
        "input": "nums = [5,9,4,8], k = 6, edges = [[0,1],[1,2],[2,3]]",
        "output": "38"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256], k = 255, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8]]",
        "output": "2297"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], k = 2, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "108"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], k = 3, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "2075"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], k = 50, edges = [[0,1],[0,2],[1,3],[1,4]]",
        "output": "1568"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 9, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
        "output": "306"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0], k = 1, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "8"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "10"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600], k = 123, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "2234"
      },
      {
        "input": "nums = [100000000, 90000000, 80000000, 70000000, 60000000, 50000000], k = 123456789, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "514688170"
      },
      {
        "input": "nums = [123456789, 987654321, 111222333, 444555666, 777888999], k = 987654321, edges = [[0,1],[0,2],[1,3],[2,4]]",
        "output": "4257254234"
      },
      {
        "input": "nums = [123456789,987654321,111111111,222222222,333333333], k = 987654321, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "4656069870"
      },
      {
        "input": "nums = [1000, 900, 800, 700, 600], k = 150, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "4268"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "30"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "592"
      },
      {
        "input": "nums = [123456789, 987654321, 112233445, 556677889, 998877665, 443322110], k = 987654321, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "5049931145"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70], k = 25, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "316"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60], k = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "228"
      },
      {
        "input": "nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991], k = 1000000007, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "9999999955"
      },
      {
        "input": "nums = [0, 1000000000, 500000000, 250000000, 125000000], k = 987654321, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "4554116228"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29]]",
        "output": "30"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35], k = 50, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "332"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000], k = 1234, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "15531"
      },
      {
        "input": "nums = [10,20,30,40,50,60], k = 13, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "228"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60], k = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]]",
        "output": "228"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 1000000000, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
        "output": "20000000000"
      },
      {
        "input": "nums = [10,21,32,43,54,65,76,87,98,109], k = 101, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "859"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 11, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "103"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], k = 15, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "168"
      },
      {
        "input": "nums = [20, 15, 10, 5, 0], k = 25, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "114"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], k = 123, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "1634"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 1024, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
        "output": "14456"
      },
      {
        "input": "nums = [10,20,30,40,50], k = 15, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "168"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30], k = 17, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "132"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 1, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "110"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80], k = 23, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "404"
      },
      {
        "input": "nums = [12, 13, 14, 15, 16, 17, 18, 19, 20], k = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "160"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], k = 11, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "193"
      },
      {
        "input": "nums = [123456789, 987654321, 234567890, 345678901, 456789012, 567890123, 678901234, 789012345], k = 890123456, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "6162095767"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45], k = 15, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "153"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15], k = 16, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "192"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800], k = 123, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "3804"
      },
      {
        "input": "nums = [9, 14, 3, 5, 8, 12], k = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]]",
        "output": "63"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 3, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
        "output": "89"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60], k = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]]",
        "output": "228"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000], k = 1, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7]]",
        "output": "8000000008"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14]]",
        "output": "15"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45, 54, 63], k = 23, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "288"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 11, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
        "output": "216"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000, 62500000, 31250000, 15625000, 7812500, 3906250, 1953125], k = 1000000000, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]]",
        "output": "9340892827"
      },
      {
        "input": "nums = [1000000000, 999999999, 999999998, 999999997, 999999996], k = 500000000, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "4999999990"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 1, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,7],[5,7],[6,7]]",
        "output": "8"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], k = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]]",
        "output": "293"
      },
      {
        "input": "nums = [8, 16, 32, 64, 128, 256], k = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "578"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40], k = 17, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "244"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000, 62500000], k = 123456789, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "1976228234"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], k = 1, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "49"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], k = 31, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "353"
      },
      {
        "input": "nums = [10, 21, 32, 43, 54, 65, 76, 87, 98, 109], k = 12, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "643"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 50, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "5636"
      },
      {
        "input": "nums = [123, 456, 789, 101, 202, 303, 404, 505, 606, 707], k = 111, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9]]",
        "output": "4400"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 1, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
        "output": "16"
      },
      {
        "input": "nums = [999, 888, 777, 666, 555, 444, 333, 222, 111, 0], k = 456, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "6387"
      },
      {
        "input": "nums = [12, 14, 16, 18, 20, 22, 24, 26, 28], k = 13, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "216"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11], k = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "64"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 30, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "614"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], k = 15, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9]]",
        "output": "109"
      },
      {
        "input": "nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995], k = 123456789, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "6115696553"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0], k = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "73"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], k = 1000000000, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "4000000015"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0], k = 1, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "49"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 1, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "10"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800], k = 255, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "4092"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], k = 255, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9]]",
        "output": "3063"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000], k = 123456789, edges = [[0,1],[1,2],[2,3]]",
        "output": "1875000000"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], k = 99, edges = [[0,1],[1,2],[2,3],[3,4],[0,2]]",
        "output": "1634"
      },
      {
        "input": "nums = [12345, 67890, 54321, 98765, 43210, 87654, 32109, 76543], k = 11111, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "510661"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 21, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
        "output": "434"
      },
      {
        "input": "nums = [1000000000, 999999999, 999999998, 999999997, 999999996], k = 999999995, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "4999999990"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], k = 255, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "4343"
      },
      {
        "input": "nums = [123456789, 987654321, 135792468, 246813579, 1112131415], k = 987654321, edges = [[0,1],[1,2],[2,3],[3,4]]",
        "output": "5774158170"
      }
    ]
  },
  {
    "id": 471,
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "problemDescription": "Given a string s, encode the string such that its encoded length is the shortest.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. k should be a positive integer.\nIf an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return any of them.\n\u00a0\nExample 1:\n\nInput: s = \"aaa\"\nOutput: \"aaa\"\nExplanation: There is no way to encode it such that it is shorter than the input string, so we do not encode it.\n\nExample 2:\n\nInput: s = \"aaaaa\"\nOutput: \"5[a]\"\nExplanation: \"5[a]\" is shorter than \"aaaaa\" by 1 character.\n\nExample 3:\n\nInput: s = \"aaaaaaaaaa\"\nOutput: \"10[a]\"\nExplanation: \"a9[a]\" or \"9[a]a\" are also valid solutions, both of them have the same length = 5, which is the same as \"10[a]\".\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 150\ns consists of only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def encode(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabc\"",
        "output": "abc7[dabc]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabc\"",
        "output": "7[abc]"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\"",
        "output": "21[xy]"
      },
      {
        "input": "s = \"abbbabbbcabbbabbbc\"",
        "output": "2[2[abbb]c]"
      },
      {
        "input": "s = \"aabcaabcd\"",
        "output": "2[aabc]d"
      },
      {
        "input": "s = \"abcdef\"",
        "output": "abcdef"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "44[z]"
      },
      {
        "input": "s = \"aaaaa\"",
        "output": "5[a]"
      },
      {
        "input": "s = \"ababababababababababababababababababababab\"",
        "output": "21[ab]"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "4[abc]"
      },
      {
        "input": "s = \"aabbccddeeefffggg\"",
        "output": "aabbccddeeefffggg"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\"",
        "output": "20[z]"
      },
      {
        "input": "s = \"aaa\"",
        "output": "aaa"
      },
      {
        "input": "s = \"aaaaaaaaaa\"",
        "output": "10[a]"
      },
      {
        "input": "s = \"abcdabcd\"",
        "output": "2[abcd]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "86[z]"
      },
      {
        "input": "s = \"abababababababab\"",
        "output": "8[ab]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabc\"",
        "output": "8[abc]"
      },
      {
        "input": "s = \"mississippi\"",
        "output": "mississippi"
      },
      {
        "input": "s = \"xyzxyzxyzxyz\"",
        "output": "4[xyz]"
      },
      {
        "input": "s = \"nabnabnabnabnabnabnabnabnabnabnabnabnabnabnabnabnabnabnabnabnabnabnabnabnabna\"",
        "output": "na25[bna]"
      },
      {
        "input": "s = \"abcdabcdabcdabcd\"",
        "output": "4[abcd]"
      },
      {
        "input": "s = \"aaaaabbbbbcccccdddddaaaaabbbbbcccccdddddaaaaabbbbbccccc\"",
        "output": "5[a]5[b]5[c]2[5[d]5[a]5[b]5[c]]"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiii\"",
        "output": "aaaabbbbccccddddeeeeffffgggghhhhiiii"
      },
      {
        "input": "s = \"ababababababababababababababababababababababababab\"",
        "output": "25[ab]"
      },
      {
        "input": "s = \"ababababababababcabababababab\"",
        "output": "8[ab]c6[ab]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "17[abc]"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "9[xyz]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "19[abc]"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "14[abcd]"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "9[abcd]"
      },
      {
        "input": "s = \"abababababababababab\"",
        "output": "10[ab]"
      },
      {
        "input": "s = \"abcdabceabcdabcdabcdabcdabcdabcd\"",
        "output": "abcdabce6[abcd]"
      },
      {
        "input": "s = \"aaaabbbbccccaaaabbbbcccc\"",
        "output": "2[aaaabbbbcccc]"
      },
      {
        "input": "s = \"bananaaabbbccccdddeeeeffff\"",
        "output": "bananaaabbbccccdddeeeeffff"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcd\"",
        "output": "7[abc]d"
      },
      {
        "input": "s = \"abcdefghabcdefghabcdefghabcdefghabcdefghabcdefgh\"",
        "output": "6[abcdefgh]"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "12[xyz]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\"",
        "output": "10[abc]"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "15[xyz]"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabbaabbaabbaabb\"",
        "output": "8[aabb]"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxyxyxy\"",
        "output": "13[xy]"
      },
      {
        "input": "s = \"abcdefabcdefabcdefabcdefabcdef\"",
        "output": "5[abcdef]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "15[abc]"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "19[xyz]"
      },
      {
        "input": "s = \"aabbccddeeefffggghhhiiiijjjjkkkkllllmmmmmnnnnnooooo\"",
        "output": "aabbccddeeefffggghhhiiiijjjjkkkkllll5[m]5[n]5[o]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "16[abc]"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefgabcdefgabcdefgabcdefg\"",
        "output": "6[abcdefg]"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "8[abcd]"
      },
      {
        "input": "s = \"abcabcabcabcabcabca\"",
        "output": "a6[bca]"
      },
      {
        "input": "s = \"ababababababababababababababababab\"",
        "output": "17[ab]"
      },
      {
        "input": "s = \"aaaaaaaaaaaabbbbbbbbbbbbccccccccccc\"",
        "output": "12[a]12[b]11[c]"
      },
      {
        "input": "s = \"ababababababcdababcdababcd\"",
        "output": "4[ab]3[ababcd]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcab\"",
        "output": "ab8[cab]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabc\"",
        "output": "9[abc]"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "15[abcd]"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabada\"",
        "output": "a7[bacabada]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcd\"",
        "output": "16[abc]d"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "22[abc]"
      },
      {
        "input": "s = \"abracadabraabracadabraabracadabra\"",
        "output": "3[abracadabra]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "2[abcdefghijklmnopqrstuvwxyz]"
      },
      {
        "input": "s = \"abcdabcdabcdeabcdabcdabcdabcdabcd\"",
        "output": "3[abcd]e5[abcd]"
      },
      {
        "input": "s = \"abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef\"",
        "output": "8[abcdef]"
      },
      {
        "input": "s = \"abcdefabcdefabcdefabcdefabcdefabcdef\"",
        "output": "6[abcdef]"
      },
      {
        "input": "s = \"ababababababababababababababababababababababababababababab\"",
        "output": "29[ab]"
      },
      {
        "input": "s = \"aaaaabbbbbccccccdddddeeeee\"",
        "output": "5[a]5[b]6[c]5[d]5[e]"
      },
      {
        "input": "s = \"ababababababababab\"",
        "output": "9[ab]"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbccccccccdddddddeeeeeeeeeffffffffggggggggg\"",
        "output": "a9[a]9[b]8[c]7[d]9[e]8[f]9[g]"
      },
      {
        "input": "s = \"abcdeabcdeabcdeabcde\"",
        "output": "4[abcde]"
      },
      {
        "input": "s = \"ababababababcabcabcabcabcabc\"",
        "output": "5[ab]6[abc]"
      },
      {
        "input": "s = \"abcabcabcabcabcabc\"",
        "output": "6[abc]"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\"",
        "output": "6[abcdefghij]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcd\"",
        "output": "9[abc]d"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\"",
        "output": "24[xy]"
      },
      {
        "input": "s = \"ababababababababababababababababababababababababababababababababab\"",
        "output": "33[ab]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcab\"",
        "output": "ab10[cab]"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcd\"",
        "output": "6[abcd]"
      },
      {
        "input": "s = \"bananaanananana\"",
        "output": "bananaa4[na]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "12[abc]"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxy\"",
        "output": "11[xy]"
      },
      {
        "input": "s = \"abcdababcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "abcdab8[abcd]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "12[abcd]"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbccccccccc\"",
        "output": "a9[a]b9[b]9[c]"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababababababcd\"",
        "output": "29[ab]cd"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "13[abc]"
      },
      {
        "input": "s = \"aaaaaaaaaabaaaaaaaaaabaaaaaaaaaab\"",
        "output": "3[a9[a]b]"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababababababababababc\"",
        "output": "33[ab]c"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\"",
        "output": "17[xy]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "18[abc]"
      }
    ]
  },
  {
    "id": 37,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Backtracking",
      "Matrix"
    ],
    "problemDescription": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\n\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\nThe '.' character indicates empty cells.\n\u00a0\nExample 1:\n\n\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation:\u00a0The input board is shown above and the only valid solution is shown below:\n\n\n\n\u00a0\nConstraints:\n\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or '.'.\nIt is guaranteed that the input board has only one solution.\n\n",
    "starterCode": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        ",
    "testCases": [
      {
        "input": "board",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "board = [[\"8\",\".\",\".\",\".\",\"4\",\".\",\"6\",\"3\",\".\"],[\"6\",\".\",\".\",\"8\",\".\",\"3\",\".\",\"2\",\".\"],[\".\",\"7\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\"2\",\".\",\"6\",\".\",\".\",\".\",\"7\",\"5\",\"9\"],[\".\",\"9\",\".\",\"6\",\".\",\"4\",\"3\",\"1\",\".\"],[\"7\",\"5\",\"3\",\".\",\".\",\".\",\"2\",\".\",\"4\"],[\".\",\"4\",\".\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\".\",\"3\",\".\",\"9\",\".\",\"8\",\".\",\".\",\"7\"],[\".\",\".\",\"7\",\".\",\"1\",\".\",\".\",\".\",\"8\"]]",
        "output": "None"
      },
      {
        "input": "board = [[\".\",\".\",\".\",\"4\",\"3\",\".\",\".\",\".\",\"1\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"2\",\".\"],[\".\",\".\",\"2\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"4\",\"1\",\"5\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"2\",\"5\",\".\",\"3\",\"4\",\"8\"],[\".\",\"3\",\"7\",\".\",\".\",\".\",\"5\",\".\",\".\"],[\".\",\"2\",\".\",\".\",\".\",\".\",\".\",\".\",\"4\"],[\"1\",\"4\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"2\"]]",
        "output": "None"
      },
      {
        "input": "board = [['.','.','9','7','4','8','.','.','.'],['7','.','.','.','.','.','.','.','.'],['.','2','.','1','.','9','.','.','.'],['.','.','7','.','.','.','2','4','.'],['.','6','4','.','1','.','5','9','.'],['.','9','8','.','.','.','3','.','.'],['.','.','.','8','.','3','.','2','.'],['.','.','.','.','.','.','.','.','6'],['.','','.','.','2','7','.','.','.']]",
        "output": "Error: invalid literal for int() with base 10: ''"
      },
      {
        "input": "9','7','4','8','.','.','.'],['7','.','.','.','.','.','.','.','.'],['.','2','.','1','.','9','.','.','.'],['.','.','7','.','.','.','2','4','.'],['.','6','4','.','1','.','5','9','.'],['.','9','8','.','.','.','3','.','.'],['.','.','.','8','.','3','.','2','.'],['.','.','.','.','.','.','.','.','6'],['.','.','.','2','7','5','9','.','.']]",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": ".','8','.','.','.','4','.'],['.','.','2','.','.','.','.','1','.'],['.','6','.','.','.','3','.','.','.'],['.','','.','.','.','.','.','.','8']]",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "board = [['.','2','.','1','.','4','.','.','.'],['.','.','4','.','.','.','6','3','.'],['5','.','.','.','.','.','.','9','.'],['2','.','.','.','.','9','.','.','.'],['.','.','1','3','.','.','2','.','.'],['.','.','.','5','.','.','.','.','7'],['.','1','.','.','.','.','.','2','.'],['.','2','.','.','.','.','9','.','.'],['.','.','.','8','.','1','.','.','.']]",
        "output": "None"
      },
      {
        "input": "board = [['.','2','3','.','.','.','.','.','.'],['8','.','.','.','.','.','.','.','.'],['4','.','.','.','.','.','.','.','.'],['.','.','.','9','.','5','.','.','.'],['.','.','.','1','.','.','3','.','.'],['.','.','.','3','.','6','.','.','.'],['.','.','.','4','.','.','2','.','.'],['.','.','.','8','.','.','.','.','5'],['.','.','.','7','.','.','.','.','3']]",
        "output": "None"
      },
      {
        "input": "board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "output": "None"
      },
      {
        "input": "board = [[\"8\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"3\",\"6\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"7\",\"9\",\".\",\".\",\"6\",\".\"],[\".\",\"2\",\".\",\"1\",\".\",\"9\",\".\",\".\",\".\"],[\".\",\".\",\"7\",\".\",\".\",\".\",\"2\",\".\",\".\"],[\".\",\".\",\".\",\"4\",\".\",\"3\",\".\",\"2\",\".\"],[\".\",\"5\",\".\",\".\",\"1\",\".\",\".\",\"7\",\".\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\"5\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\"7\",\".\",\"4\",\".\"]]",
        "output": "None"
      },
      {
        "input": "board = [[\".\",\".\",\"4\",\"6\",\"3\",\".\",\".\",\".\",\"1\"],[\"3\",\".\",\".\",\".\",\".\",\"5\",\"9\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\"3\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "output": "None"
      },
      {
        "input": "board = [['8','.','.','.','.','.','.','.','6'],['.','3','.','.','.','6','.','9','.'],['.','2','.','7','.','.','.','.','.'],['2','.','.','.','.','.','6','.','8'],['.','8','7','.','.','.','5','.','.'],['1','.','6','.','.','.','.','.','3'],['.','.','.','','.','.','2','8','.'],['.','4','.','5','.','.','.','7','.'],['7','.','.','.','.','.','.','.','4']]",
        "output": "Error: invalid literal for int() with base 10: ''"
      },
      {
        "input": "board = [['8','.','.','.','.','.','.','.','.'],['.','2','.','7','.','.','.','8','.'],['.','1','.','5','.','.','.','.','.'],['.','.",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "5','4','.','.'],['.','.",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "board = [['.','9','.','7','2','6','.','.','3'],['.','4','.','.','.','.','.','7','.'],['2','.','.','.','.','.','.','.','4'],['.','6','.','.','.','.','.','4','.'],['.','.','.','.','.','5','.','.','.'],['.','.','4','.','.','.','.','9','.'],['.','.','.','5','.','.','.','.','6'],['.','7','.','.','.','.','.','2','.'],['8','.','.','4','5','7','.','.','.']]",
        "output": "None"
      },
      {
        "input": "board = [['8','.','.','.','.','.','.','.','6'],['.','.','2','6','.','7','.','.','3'],['7','.','.','.','9','.','2','4','.'],['5','.','8','3','.','.','.','.','.'],['.','.','.','7','.','.','3','.','.'],['.','.','.','2','.','.','.','.','6'],['.','6','.','.','3','.','.','.','9'],['4','.','.','.','.','.','5','.','.'],['.','3','.','.','.','.','.','.','1']]",
        "output": "None"
      },
      {
        "input": "board = [[\"8\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\"3\",\"6\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"7\",\".\",\".\",\"9\",\".\",\"2\",\".\",\".\"],[\".\",\"5\",\".\",\".\",\".\",\"7\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"4\",\"5\",\"7\",\".\",\".\"],[\".\",\".\",\".\",\"1\",\".\",\".\",\".\",\"3\",\".\"],[\".\",\".\",\"1\",\".\",\".\",\".\",\".\",\"6\",\"8\"],[\".\",\".\",\"8\",\"5\",\".\",\".\",\".\",\"1\",\".\"],[\".\",\"9\",\".\",\".\",\".\",\".\",\"4\",\".\",\".\"]]",
        "output": "None"
      },
      {
        "input": "board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\"3\",\".\",\"8\",\"5\"],[\".\",\".\",\"1\",\".\",\"2\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"5\",\".\",\"7\",\".\",\".\",\".\"],[\".\",\".\",\"4\",\".\",\".\",\".\",\"1\",\".\",\".\"],[\".\",\"9\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\"5\",\".\",\".\",\".\",\".\",\".\",\".\",\"7\",\"3\"],[\"2\",\"4\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"3\",\"4\",\".\",\".\",\".\",\".\"]]",
        "output": "None"
      },
      {
        "input": "board = [['.','9','.','.','4','.','.','.','6'],['2','.','.','.','.','7','.','.','.'],['3','.','.','.','.','.','.','1','8'],['.','7','.','.','.','.','.','.','.'],['.','5','.','.','.','.','.','.','.'],['.','2','.','.','.','.','.','6','.'],['6','.','.','.','.','.','.','.','4'],['.','.','.','1','.','.','.','.','3'],['7','.','.','.','.','.','.','2','.']]",
        "output": "None"
      },
      {
        "input": "board = [['5','3','.','.','7','.','.','.','.'],['6','.','.','1','9','5','.','.','.'],['.','9','8','.','.','.','.','6','.'],['8','.','.','.','6','.','.','.','3'],['4','.','.','8','.','3','.','.','1'],['7','.','.','.','2','.','.','.','6'],['.','6','.','.','.','.','2','8','.'],['.','.','.','4','1','9','.','.','5'],['.','.','.','.','8','.','.','7','9']]",
        "output": "None"
      },
      {
        "input": ".",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "board = [[\"8\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "output": "None"
      },
      {
        "input": "board = [['.','.','.','.','.','.','.','.','6'],['8','.','.','.','.','.','.','.','.'],['4','.','3','.','.','1','.','.','.'],['7','.','.','.','2','.','.','.','.'],['.','.','.','.','.','.','.','.','.'],['.','.','.','.','9','.','.','.','.'],['.','4','.','.','.','.','.','.','1'],['.','.','9','.','.','.','.','.','.'],['5','.','.','.','.','.','.','.','.']]",
        "output": "None"
      },
      {
        "input": "board = [['8','.','.','.','.','.','.','.','6'],['.','.','.','8','6','.','.','.','.'],['4','.','3','.','.','7','.','.','1'],['.','.','.','.','.','.','3','.','.'],['.','2','.','.','7','.','.','3','.'],['.','.','.','.','.','.','.','.','.'],['.','.','.','3','4','.','.','8','.'],['.','3','.','.','.','3','.','.','.'],['5','.','.','.','.','.','.','.','2']]",
        "output": "Execution timed out"
      },
      {
        "input": "board = [[\".\",\".\",\".\",\"2\",\"6\",\".\",\"7\",\".\",\"1\"],[\"6\",\"8\",\".\",\".\",\"7\",\".\",\".\",\"9\",\".\"],[\"1\",\"9\",\".\",\".\",\".\",\"4\",\"5\",\".\",\"6\"],[\"8\",\".\",\".\",\".\",\".\",\".\",\".\",\"6\",\"3\"],[\"4\",\".\",\"8\",\".\",\"3\",\".\",\"1\",\".\",\"7\"],[\"7\",\".\",\".\",\".\",\".\",\".\",\".\",\"2\",\"8\"],[\"5\",\".\",\"1\",\"4\",\".\",\".\",\"2\",\".\",\"3\"],[\".\",\".\",\".\",\".\",\".\",\"2\",\".\",\".\",\"4\"],[\"3\",\".\",\"4\",\".\",\".\",\"1\",\".\",\".\",\".\"]]",
        "output": "None"
      },
      {
        "input": "board = [['.','2','3','.','.','7','.','.','.''],['6','.','.','1','9','5','.','.','.'],['.','9','8','.','.','.','.','6','.'],['8','.','.','.','6','.','.','.','3'],['4','.','.','8','.','3','.','.','1'],['7','.','.','.','2','.','.','.','6'],['.','6','.','.','.','.','2','8','.'],['.','.','.','4','1','9','.','.','5'],['.','.','.','.','8','.','.','7','9']]",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "board = [['.','.','9','7','4','8','.','.','.'],['7','.','.','.','.','.','.','.','.'],['.','2','.','1','.','9','.','.','.'],['.','.','7','.','.','.','2','4','.'],['.','6','4','.','1','.','5','9','.'],['.','9','8','.','.','.','3','.','.'],['.','.','.','8','.','3','.','2','.'],['.','.','.','.','.','.','.','.','6'],['.','.','.','2','7','5','9','.','.']]",
        "output": "None"
      },
      {
        "input": "board = [['.','8','.','.','.','.','.','9','.'],['.','5','.','.','.','8','.','.','.'],['.','.','4','.','.','.','6','.','.'],['9','.','.','.','.','5','.','.','.'],['.','4','.','2','.','.','7','.','.'],['.','.','.','8','.','.','.','.','3'],['.','.','3','.','.','.','.','.','8'],['.','.','.','7','.','.','.','5','.'],['.','.','.','.','.','.','.','7','.']]",
        "output": "None"
      },
      {
        "input": "board = [[\".\",\".\",\"9\",\"7\",\"4\",\"8\",\".\",\".\",\".\"],[\"7\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"2\",\".\",\"1\",\".\",\"9\",\".\",\".\",\".\"],[\".\",\".\",\"7\",\".\",\".\",\".\",\"2\",\"4\",\".\"],[\".\",\"6\",\"4\",\".\",\"1\",\".\",\"5\",\"9\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\"3\",\".\",\".\"],[\".\",\".\",\".\",\"8\",\".\",\"3\",\".\",\"2\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"6\"],[\".\",\".\",\".\",\"2\",\"7\",\"5\",\"9\",\".\",\".\"]]",
        "output": "None"
      },
      {
        "input": "board = [['.','.','.','2','.','.','.','6','3'],['3','.','.','.','.','5','4','.','1'],['.','.','1','.','.','3','9','8','.'],['.','.','.','.','.','.','.','9','.'],['.','.','.','5','3','8','.','.','.'],['.','3','.','.','.','.','.','.','.'],['.','2','6','3','.','.','5','.','.'],['5','.','3','7','.','.','.','.','8'],['4','7','.','.','.','1','.','.','.']]",
        "output": "None"
      },
      {
        "input": "board = [['.','.','.','6','.','.','.','.','3'],['6','.','.','.','.",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "board = [['.','.','.','7','.','.','3','.','1'],['3','.','.','9','.','.','.','2','8'],['.','.','4','.','.','.','6','.','.'],['.','3','.','.','.','1','.','.','6'],['.','4','.','.8','.','.','.7','.'],['5','.','.','.','.','.','.4','.'],['.','.','.','2','.','.','5','.','.'],['7','.','.','.','.','6','.','.','3'],['1','.','3','.','.','.','.','.','.']]",
        "output": "Error: invalid literal for int() with base 10: '.8'"
      },
      {
        "input": "board = [[\".\",\".\",\".\",\"2\",\"6\",\".\",\"7\",\".\",\"1\"],[\"6\",\"8\",\".\",\".\",\"7\",\".\",\".\",\"9\",\".\"],[\"1\",\"9\",\".\",\".\",\".\",\"4\",\"5\",\".\",\".\"],[\"8\",\".\",\".\",\".\",\"5\",\".\",\".\",\".\",\"7\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"1\",\".\",\".\",\".\",\"3\"],[\".\",\".\",\"1\",\".\",\".\",\"8\",\"3\",\".\",\"2\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\".\",\"5\",\".\"],[\"2\",\".\",\"4\",\"9\",\".\",\".\",\".\",\".\",\".\"]]",
        "output": "None"
      },
      {
        "input": ".','.','.','2','.','.','.'],['.','9','8','.','.','.','3','.','.'],['.','.",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "8','7','3','.','.','.'],['.','.','5','.','.','.','8','.','.'],['.','.','.','.','.",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "board = [['.','.",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "board = [[\".\",\".\",\"4\",\"6\",\"3\",\".\",\".\",\".\",\"1\"],[\"5\",\"9\",\".\",\".\",\".\",\".\",\".\",\"3\",\"8\"],[\"2\",\".\",\".\",\".\",\".\",\"4\",\".\",\".\",\"5\"],[\"3\",\".\",\".\",\".\",\".\",\".\",\".\",\"7\",\"4\"],[\".\",\"4\",\"9\",\".\",\".\",\".\",\"8\",\"1\",\".\",[\"6\",\".\",\".\",\"5\",\".\",\"1\",\".\",\".\",\"7\"]],[\".\",\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\".\"]],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"8\",\"6\"],[\".\",\".\",\".\",\".\",\".\",\"9\",\"5\",\".\",\".\"],[\".\",\"5\",\".\",\"1\",\".\",\"3\",\".\",\".\",\".\"]]",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "board = [['.','.','.','6','.','7','.','.','.'],['.','6','5','.','4','.','3','.','.'],['.','.','.','.','8','.','5','6','.'],['2','8','.','.','.','5','.','.','7'],['','.','.','.','.','.','.','.','.'],['9','.','.','3','.','.','.','8','5'],['.','5','1','.','7','.','.','.','.'],['','.','6','.','3','.','.','1','.'],['','.','.','2','.','4','.','.','.']]",
        "output": "Error: invalid literal for int() with base 10: ''"
      },
      {
        "input": "board = [[\".\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],[\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\",\"3\"],[\"7\",\"8\",\"9\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],[\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"1\"],[\"5\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\",\"3\",\"4\"],[\"8\",\"9\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"],[\"9\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"],[\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"8\",\"9\",\"1\",\"2\",\"3\",\"4\",\"5\"]]",
        "output": "None"
      },
      {
        "input": ".','.','7','.'],['.','.','7','.','.','.','5','.','.'],['.','.','.','4','5','7','.','.','.'],['.','.','.','1','.','.','.','.','9'],['.','.','2','.','.','4','.','.','.']]",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      },
      {
        "input": "board = [['.','.','.','.','.','.','1','.','.'],['2','.','.','.','.','.','.','.','.'],['','.','.','4','3','.','2','.','.'],['.','.','.','.','.','.','.','.','6'],['.','.','4','.','5','.','7','.','.'],['.','.','.','.','.','.','.','.','.'],['.','.','3','.','6','.','.','.','.'],['.','','.','.','.','.','.','9','.'],['','.','4','.','.','.','5','.','.']]",
        "output": "Error: invalid literal for int() with base 10: ''"
      },
      {
        "input": "9','7','4','8','.','.','.''],['7','.','.','.','.','.','.','.','.'],['.','.','3','.','.','.','1','.','.'],['.','.','6','.','.','.','.','.','.'],['9','.','.','3','.','.','5','.','.'],['.','.','.','.','.','.','3','.','.'],['.','.','2','.','.','.','.','.','6'],['.','.','.','.','.','.','.','.','3'],['.','.','.','8','.','3','.','.','.']]",
        "output": "Error: Solution.solveSudoku() missing 1 required positional argument: 'board'"
      }
    ]
  },
  {
    "id": 793,
    "difficulty": "Hard",
    "tags": [
      "Math",
      "Binary Search"
    ],
    "problemDescription": "Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.\n\nFor example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end.\n\nGiven an integer k, return the number of non-negative integers x have the property that f(x) = k.\n\u00a0\nExample 1:\n\nInput: k = 0\nOutput: 5\nExplanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.\n\nExample 2:\n\nInput: k = 5\nOutput: 0\nExplanation: There is no x such that x! ends in k = 5 zeroes.\n\nExample 3:\n\nInput: k = 3\nOutput: 5\n\n\u00a0\nConstraints:\n\n0 <= k <= 109\n\n",
    "starterCode": "class Solution:\n    def preimageSizeFZF(self, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "k = 100",
        "output": "5"
      },
      {
        "input": "k = 1",
        "output": "5"
      },
      {
        "input": "k = 10000",
        "output": "5"
      },
      {
        "input": "k = 1000000",
        "output": "5"
      },
      {
        "input": "k = 3",
        "output": "5"
      },
      {
        "input": "k = 0",
        "output": "5"
      },
      {
        "input": "k = 1000",
        "output": "5"
      },
      {
        "input": "k = 100000",
        "output": "5"
      },
      {
        "input": "k = 5",
        "output": "0"
      },
      {
        "input": "k = 25",
        "output": "5"
      },
      {
        "input": "k = 10",
        "output": "5"
      },
      {
        "input": "k = 48828125",
        "output": "5"
      },
      {
        "input": "k = 1192092",
        "output": "5"
      },
      {
        "input": "k = 9999",
        "output": "5"
      },
      {
        "input": "k = 50",
        "output": "5"
      },
      {
        "input": "k = 100000000",
        "output": "5"
      },
      {
        "input": "k = 2384185",
        "output": "5"
      },
      {
        "input": "k = 6",
        "output": "5"
      },
      {
        "input": "k = 1000045",
        "output": "5"
      },
      {
        "input": "k = 19073486",
        "output": "5"
      },
      {
        "input": "k = 13",
        "output": "5"
      },
      {
        "input": "k = 1000025",
        "output": "5"
      },
      {
        "input": "k = 625",
        "output": "5"
      },
      {
        "input": "k = 3125",
        "output": "5"
      },
      {
        "input": "k = 1000035",
        "output": "0"
      },
      {
        "input": "k = 5000",
        "output": "5"
      },
      {
        "input": "k = 78125",
        "output": "5"
      },
      {
        "input": "k = 1249",
        "output": "5"
      },
      {
        "input": "k = 10000000",
        "output": "5"
      },
      {
        "input": "k = 200000",
        "output": "5"
      },
      {
        "input": "k = 1250",
        "output": "5"
      },
      {
        "input": "k = 4768371",
        "output": "5"
      },
      {
        "input": "k = 50000001",
        "output": "5"
      },
      {
        "input": "k = 80000",
        "output": "5"
      },
      {
        "input": "k = 750000",
        "output": "5"
      },
      {
        "input": "k = 4096",
        "output": "5"
      },
      {
        "input": "k = 627",
        "output": "5"
      },
      {
        "input": "k = 1000050",
        "output": "5"
      },
      {
        "input": "k = 536870912",
        "output": "5"
      },
      {
        "input": "k = 2500000",
        "output": "5"
      },
      {
        "input": "k = 2048",
        "output": "5"
      },
      {
        "input": "k = 1000015",
        "output": "5"
      },
      {
        "input": "k = 152587890",
        "output": "5"
      },
      {
        "input": "k = 123456789",
        "output": "5"
      },
      {
        "input": "k = 1000001",
        "output": "5"
      },
      {
        "input": "k = 5000000",
        "output": "5"
      },
      {
        "input": "k = 31250",
        "output": "5"
      },
      {
        "input": "k = 1000000000",
        "output": "5"
      },
      {
        "input": "k = 20000",
        "output": "5"
      },
      {
        "input": "k = 1000005",
        "output": "5"
      },
      {
        "input": "k = 2",
        "output": "5"
      },
      {
        "input": "k = 1000020",
        "output": "5"
      },
      {
        "input": "k = 99999",
        "output": "5"
      },
      {
        "input": "k = 610351562",
        "output": "5"
      },
      {
        "input": "k = 2499999",
        "output": "5"
      },
      {
        "input": "k = 1000010",
        "output": "0"
      },
      {
        "input": "k = 9",
        "output": "5"
      },
      {
        "input": "k = 123456",
        "output": "5"
      },
      {
        "input": "k = 987654321",
        "output": "5"
      },
      {
        "input": "k = 258",
        "output": "5"
      },
      {
        "input": "k = 500000",
        "output": "5"
      },
      {
        "input": "k = 9765625",
        "output": "5"
      },
      {
        "input": "k = 32",
        "output": "5"
      },
      {
        "input": "k = 268435456",
        "output": "5"
      },
      {
        "input": "k = 101",
        "output": "5"
      },
      {
        "input": "k = 76293945",
        "output": "5"
      },
      {
        "input": "k = 99999999",
        "output": "5"
      },
      {
        "input": "k = 15625",
        "output": "5"
      },
      {
        "input": "k = 999999",
        "output": "5"
      },
      {
        "input": "k = 64",
        "output": "5"
      },
      {
        "input": "k = 390625",
        "output": "5"
      },
      {
        "input": "k = 38146972",
        "output": "5"
      },
      {
        "input": "k = 2147483647",
        "output": "5"
      },
      {
        "input": "k = 1953125",
        "output": "5"
      },
      {
        "input": "k = 31",
        "output": "5"
      },
      {
        "input": "k = 50000000",
        "output": "5"
      },
      {
        "input": "k = 1220703125",
        "output": "5"
      },
      {
        "input": "k = 250",
        "output": "5"
      },
      {
        "input": "k = 125",
        "output": "5"
      },
      {
        "input": "k = 16",
        "output": "5"
      },
      {
        "input": "k = 999999999",
        "output": "5"
      },
      {
        "input": "k = 256",
        "output": "5"
      },
      {
        "input": "k = 1001",
        "output": "5"
      },
      {
        "input": "k = 249",
        "output": "5"
      },
      {
        "input": "k = 9536743",
        "output": "5"
      },
      {
        "input": "k = 500000000",
        "output": "5"
      },
      {
        "input": "k = 1000030",
        "output": "5"
      },
      {
        "input": "k = 20",
        "output": "5"
      },
      {
        "input": "k = 1024",
        "output": "5"
      },
      {
        "input": "k = 39062",
        "output": "5"
      },
      {
        "input": "k = 244140625",
        "output": "5"
      },
      {
        "input": "k = 500",
        "output": "5"
      },
      {
        "input": "k = 1000040",
        "output": "5"
      },
      {
        "input": "k = 21",
        "output": "5"
      },
      {
        "input": "k = 800000000",
        "output": "5"
      },
      {
        "input": "k = 12345",
        "output": "5"
      },
      {
        "input": "k = 4",
        "output": "5"
      },
      {
        "input": "k = 129",
        "output": "0"
      },
      {
        "input": "k = 305175781",
        "output": "5"
      },
      {
        "input": "k = 8",
        "output": "5"
      },
      {
        "input": "k = 512",
        "output": "5"
      },
      {
        "input": "k = 11",
        "output": "0"
      },
      {
        "input": "k = 128",
        "output": "5"
      },
      {
        "input": "k = 50000",
        "output": "5"
      }
    ]
  },
  {
    "id": 2412,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Sorting"
    ],
    "problemDescription": "You are given a 0-indexed 2D integer array transactions, where transactions[i] = [costi, cashbacki].\nThe array describes transactions, where each transaction must be completed exactly once in some order. At any given moment, you have a certain amount of money. In order to complete transaction i, money >= costi must hold true. After performing a transaction, money becomes money - costi + cashbacki.\nReturn the minimum amount of money required before any transaction so that all of the transactions can be completed regardless of the order of the transactions.\n\u00a0\nExample 1:\n\nInput: transactions = [[2,1],[5,0],[4,2]]\nOutput: 10\nExplanation:\nStarting with money = 10, the transactions can be performed in any order.\nIt can be shown that starting with money < 10 will fail to complete all transactions in some order.\n\nExample 2:\n\nInput: transactions = [[3,0],[0,3]]\nOutput: 3\nExplanation:\n- If transactions are in the order [[3,0],[0,3]], the minimum money required to complete the transactions is 3.\n- If transactions are in the order [[0,3],[3,0]], the minimum money required to complete the transactions is 0.\nThus, starting with money = 3, the transactions can be performed in any order.\n\n\u00a0\nConstraints:\n\n1 <= transactions.length <= 105\ntransactions[i].length == 2\n0 <= costi, cashbacki <= 109\n\n",
    "starterCode": "class Solution:\n    def minimumMoney(self, transactions: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "transactions = [[1,2],[3,4],[5,6]]",
        "output": "5"
      },
      {
        "input": "transactions = [[1,0],[2,0],[3,0]]",
        "output": "6"
      },
      {
        "input": "transactions = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "4"
      },
      {
        "input": "transactions = [[0,0],[0,0],[0,0]]",
        "output": "0"
      },
      {
        "input": "transactions = [[7,3],[2,1],[4,4]]",
        "output": "9"
      },
      {
        "input": "transactions = [[2,1],[5,0],[4,2]]",
        "output": "10"
      },
      {
        "input": "transactions = [[0,0],[1,1],[2,2]]",
        "output": "2"
      },
      {
        "input": "transactions = [[10,5],[2,2],[8,3]]",
        "output": "15"
      },
      {
        "input": "transactions = [[1000000000,0],[0,1000000000]]",
        "output": "1000000000"
      },
      {
        "input": "transactions = [[10,5],[5,10],[20,10]]",
        "output": "25"
      },
      {
        "input": "transactions = [[100,0],[0,100],[50,50]]",
        "output": "150"
      },
      {
        "input": "transactions = [[10,5],[2,2],[1,1]]",
        "output": "10"
      },
      {
        "input": "transactions = [[3,0],[0,3]]",
        "output": "3"
      },
      {
        "input": "transactions = [[1000000000,500000000],[500000000,250000000]]",
        "output": "1250000000"
      },
      {
        "input": "transactions = [[1000000000,0],[0,1000000000],[500000000,500000000]]",
        "output": "1500000000"
      },
      {
        "input": "transactions = [[5,5],[5,5],[5,5]]",
        "output": "5"
      },
      {
        "input": "transactions = [[100,50],[50,100],[25,25]]",
        "output": "100"
      },
      {
        "input": "transactions = [[0,1],[0,2],[0,3]]",
        "output": "0"
      },
      {
        "input": "transactions = [[10,0],[0,10],[5,5]]",
        "output": "15"
      },
      {
        "input": "transactions = [[5,10],[3,6],[7,8]]",
        "output": "7"
      },
      {
        "input": "transactions = [[100,99],[99,98],[98,97],[97,96],[96,95],[95,94],[94,93],[93,92],[92,91],[91,90]]",
        "output": "109"
      },
      {
        "input": "transactions = [[100,50],[50,100],[25,75],[75,25]]",
        "output": "150"
      },
      {
        "input": "transactions = [[1,100],[1,99],[1,98],[1,97],[1,96]]",
        "output": "1"
      },
      {
        "input": "transactions = [[1000000000,500000000],[500000000,1000000000],[250000000,750000000],[750000000,250000000]]",
        "output": "1500000000"
      },
      {
        "input": "transactions = [[1000000000, 0], [0, 1000000000], [500000000, 500000000], [250000000, 250000000], [750000000, 750000000]]",
        "output": "1750000000"
      },
      {
        "input": "transactions = [[1,999999999],[2,999999998],[3,999999997],[4,999999996],[5,999999995]]",
        "output": "5"
      },
      {
        "input": "transactions = [[5,10],[10,5],[3,15],[15,3],[8,8]]",
        "output": "25"
      },
      {
        "input": "transactions = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1]]",
        "output": "46"
      },
      {
        "input": "transactions = [[1000000000,500000000],[500000000,250000000],[250000000,125000000],[125000000,62500000],[62500000,31250000]]",
        "output": "1468750000"
      },
      {
        "input": "transactions = [[5, 5], [5, 4], [5, 3], [5, 2], [5, 1], [5, 0], [4, 5], [3, 5], [2, 5], [1, 5]]",
        "output": "20"
      },
      {
        "input": "transactions = [[1,1000000000],[2,1000000000],[3,1000000000],[4,1000000000],[5,1000000000],[6,1000000000],[7,1000000000],[8,1000000000],[9,1000000000],[10,1000000000]]",
        "output": "10"
      },
      {
        "input": "transactions = [[1000000000,500000000],[500000000,250000000],[250000000,125000000],[125000000,62500000],[62500000,31250000],[31250000,15625000],[15625000,7812500],[7812500,3906250],[3906250,1953125],[1953125,976562],[976562,488281],[488281,244140],[244140,122070],[122070,61035],[61035,30517],[30517,15258],[15258,7629],[7629,3814],[3814,1907],[1907,953],[953,476],[476,238],[238,119],[119,59],[59,29],[29,14],[14,7],[7,3],[3,1]]",
        "output": "1499999999"
      },
      {
        "input": "transactions = [[10, 5], [20, 10], [30, 15], [40, 20], [50, 25], [60, 30]]",
        "output": "135"
      },
      {
        "input": "transactions = [[1, 1], [1, 2], [2, 1], [2, 2], [1, 3], [3, 1], [3, 3]]",
        "output": "6"
      },
      {
        "input": "transactions = [[1000000000,0],[0,1000000000],[500000000,500000000],[500000001,499999999]]",
        "output": "1500000002"
      },
      {
        "input": "transactions = [[10, 5], [9, 4], [8, 3], [7, 2], [6, 1], [5, 0], [4, 6], [3, 7], [2, 8], [1, 9]]",
        "output": "35"
      },
      {
        "input": "transactions = [[100,50],[200,150],[300,100],[400,50],[500,0]]",
        "output": "1300"
      },
      {
        "input": "transactions = [[10, 10], [20, 10], [30, 10], [40, 10], [50, 10], [60, 10], [70, 10], [80, 10], [90, 10], [100, 10]]",
        "output": "460"
      },
      {
        "input": "transactions = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0]]",
        "output": "45"
      },
      {
        "input": "transactions = [[5,0],[0,5],[5,5],[0,0],[10,10]]",
        "output": "15"
      },
      {
        "input": "transactions = [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [10, 0]]",
        "output": "55"
      },
      {
        "input": "transactions = [[10, 5], [20, 15], [30, 25], [40, 35], [50, 45]]",
        "output": "70"
      },
      {
        "input": "transactions = [[1,2],[2,1],[3,4],[4,3],[5,6],[6,5],[7,8],[8,7],[9,10],[10,9]]",
        "output": "14"
      },
      {
        "input": "transactions = [[100,90],[90,80],[80,70],[70,60],[60,50]]",
        "output": "140"
      },
      {
        "input": "transactions = [[9,8],[8,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0]]",
        "output": "17"
      },
      {
        "input": "transactions = [[1000,500],[1500,1000],[2000,1500],[2500,2000],[3000,2500]]",
        "output": "5000"
      },
      {
        "input": "transactions = [[1000000000,900000000],[500000000,400000000],[300000000,200000000],[100000000,90000000]]",
        "output": "1210000000"
      },
      {
        "input": "transactions = [[10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10]]",
        "output": "55"
      },
      {
        "input": "transactions = [[500, 500], [500, 500], [500, 500], [500, 500], [500, 500]]",
        "output": "500"
      },
      {
        "input": "transactions = [[10,1],[5,5],[15,10],[20,15],[25,20],[30,25],[35,30],[40,35],[45,40]]",
        "output": "84"
      },
      {
        "input": "transactions = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]",
        "output": "9"
      },
      {
        "input": "transactions = [[10,15],[15,20],[20,25],[25,30],[30,35],[35,40],[40,45],[45,50],[50,55]]",
        "output": "50"
      },
      {
        "input": "transactions = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [2, 1], [1, 2]]",
        "output": "4"
      },
      {
        "input": "transactions = [[10, 1], [20, 2], [30, 3], [40, 4], [50, 5], [60, 6], [70, 7], [80, 8], [90, 9], [100, 10]]",
        "output": "505"
      },
      {
        "input": "transactions = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]",
        "output": "5"
      },
      {
        "input": "transactions = [[5,2],[10,3],[15,5],[20,10]]",
        "output": "40"
      },
      {
        "input": "transactions = [[100, 0], [0, 100], [50, 50], [25, 25], [75, 75]]",
        "output": "175"
      },
      {
        "input": "transactions = [[1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [7, 70], [8, 80], [9, 90], [10, 100]]",
        "output": "10"
      },
      {
        "input": "transactions = [[10, 1], [9, 2], [8, 3], [7, 4], [6, 5], [5, 6], [4, 7], [3, 8], [2, 9], [1, 10]]",
        "output": "30"
      },
      {
        "input": "transactions = [[10,0],[20,10],[30,20],[40,30],[50,40],[60,50],[70,60],[80,70],[90,80]]",
        "output": "170"
      },
      {
        "input": "transactions = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]",
        "output": "19"
      },
      {
        "input": "transactions = [[100,1],[101,1],[102,1],[103,1],[104,1]]",
        "output": "506"
      },
      {
        "input": "transactions = [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]",
        "output": "6"
      },
      {
        "input": "transactions = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "10"
      },
      {
        "input": "transactions = [[9, 8], [7, 6], [5, 4], [3, 2], [1, 0]]",
        "output": "13"
      },
      {
        "input": "transactions = [[10, 15], [20, 10], [30, 5], [40, 0], [50, 25], [60, 30], [70, 20]]",
        "output": "210"
      },
      {
        "input": "transactions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "8"
      },
      {
        "input": "transactions = [[9,1],[8,2],[7,3],[6,4],[5,5],[4,6],[3,7],[2,8],[1,9]]",
        "output": "25"
      },
      {
        "input": "transactions = [[100,50],[200,150],[50,100],[300,200]]",
        "output": "400"
      },
      {
        "input": "transactions = [[100,50],[200,100],[300,150],[50,25]]",
        "output": "475"
      },
      {
        "input": "transactions = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]",
        "output": "0"
      },
      {
        "input": "transactions = [[50,0],[25,0],[0,50],[0,25],[75,0],[0,75]]",
        "output": "150"
      },
      {
        "input": "transactions = [[20, 10], [25, 15], [30, 20], [35, 25], [40, 30], [45, 35], [50, 40], [55, 45], [60, 50], [65, 55]]",
        "output": "155"
      },
      {
        "input": "transactions = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]]",
        "output": "6"
      },
      {
        "input": "transactions = [[1,100],[2,99],[3,98],[4,97],[5,96]]",
        "output": "5"
      },
      {
        "input": "transactions = [[9,8],[7,6],[5,4],[3,2],[1,0]]",
        "output": "13"
      },
      {
        "input": "transactions = [[100, 10], [90, 20], [80, 30], [70, 40], [60, 50], [50, 60], [40, 70], [30, 80], [20, 90], [10, 100]]",
        "output": "300"
      },
      {
        "input": "transactions = [[500,250],[250,125],[125,62],[62,31],[31,15],[15,7],[7,3],[3,1],[1,0]]",
        "output": "750"
      },
      {
        "input": "transactions = [[10, 100], [20, 90], [30, 80], [40, 70], [50, 60], [60, 50], [70, 40], [80, 30], [90, 20], [100, 10]]",
        "output": "300"
      },
      {
        "input": "transactions = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70], [80, 80], [90, 90], [100, 100], [1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [7, 70], [8, 80], [9, 90], [10, 100]]",
        "output": "100"
      },
      {
        "input": "transactions = [[5, 0], [5, 5], [5, 10], [5, 15], [5, 20], [5, 25], [5, 30], [5, 35], [5, 40], [5, 45]]",
        "output": "10"
      },
      {
        "input": "transactions = [[0,0],[1,1],[2,2],[3,3],[4,4]]",
        "output": "4"
      },
      {
        "input": "transactions = [[100,50],[50,100],[200,150],[150,200]]",
        "output": "250"
      },
      {
        "input": "transactions = [[10,5],[5,10],[15,20],[20,15],[25,30],[30,25]]",
        "output": "40"
      },
      {
        "input": "transactions = [[1, 2], [2, 1], [3, 4], [4, 3], [5, 5]]",
        "output": "7"
      },
      {
        "input": "transactions = [[1000000000, 0], [0, 1000000000], [500000000, 500000000]]",
        "output": "1500000000"
      },
      {
        "input": "transactions = [[1,0],[2,0],[3,0],[4,0],[5,0]]",
        "output": "15"
      },
      {
        "input": "transactions = [[100, 0], [50, 100], [25, 50], [10, 25], [5, 10], [1, 5]]",
        "output": "150"
      },
      {
        "input": "transactions = [[10, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1], [1, 0]]",
        "output": "19"
      },
      {
        "input": "transactions = [[5,10],[15,5],[25,20],[35,30],[45,40],[55,50],[65,60],[75,70],[85,80]]",
        "output": "125"
      },
      {
        "input": "transactions = [[10,5],[20,10],[30,15],[40,20],[50,25]]",
        "output": "100"
      },
      {
        "input": "transactions = [[5,10],[10,5],[0,0],[7,7],[3,3]]",
        "output": "12"
      },
      {
        "input": "transactions = [[1000,1000],[2000,1000],[3000,1000],[4000,1000],[5000,1000],[6000,1000],[7000,1000],[8000,1000],[9000,1000],[10000,1000]]",
        "output": "46000"
      },
      {
        "input": "transactions = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90],[100,100],[110,110],[120,120],[130,130],[140,140],[150,150]]",
        "output": "150"
      },
      {
        "input": "transactions = [[10, 1], [20, 2], [30, 3], [40, 4], [50, 5], [60, 6], [70, 7], [80, 8], [90, 9], [100, 10], [1, 100], [2, 90], [3, 80], [4, 70], [5, 60], [6, 50], [7, 40], [8, 30], [9, 20], [10, 10]]",
        "output": "505"
      },
      {
        "input": "transactions = [[1,0],[0,1],[1,1],[0,0],[1,0],[0,1]]",
        "output": "3"
      },
      {
        "input": "transactions = [[1000000000, 0], [0, 1000000000]]",
        "output": "1000000000"
      },
      {
        "input": "transactions = [[100000,50000],[50000,25000],[25000,12500],[12500,6250],[6250,3125],[3125,1562],[1562,781],[781,390],[390,195]]",
        "output": "149805"
      },
      {
        "input": "transactions = [[100,0],[90,10],[80,20],[70,30],[60,40],[50,50],[40,60],[30,70],[20,80],[10,90]]",
        "output": "350"
      },
      {
        "input": "transactions = [[500, 400], [400, 300], [300, 200], [200, 100]]",
        "output": "800"
      },
      {
        "input": "transactions = [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]]",
        "output": "0"
      },
      {
        "input": "transactions = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "7"
      },
      {
        "input": "transactions = [[0,100],[100,200],[200,300],[300,400],[400,500]]",
        "output": "400"
      },
      {
        "input": "transactions = [[10,0],[0,10],[5,5],[5,0],[0,5],[7,7],[3,3],[2,2],[1,1]]",
        "output": "22"
      },
      {
        "input": "transactions = [[10, 10], [9, 9], [8, 8], [7, 7], [6, 6], [5, 5], [4, 4], [3, 3], [2, 2], [1, 1]]",
        "output": "10"
      },
      {
        "input": "transactions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "8"
      },
      {
        "input": "transactions = [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "65"
      },
      {
        "input": "transactions = [[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9]]",
        "output": "54"
      },
      {
        "input": "transactions = [[10, 5], [15, 10], [20, 15], [25, 20], [30, 25], [35, 30], [40, 35], [45, 40], [50, 45], [55, 50]]",
        "output": "100"
      }
    ]
  },
  {
    "id": 2604,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "There are n hens and m grains on a line. You are given the initial positions of the hens and the grains in two integer arrays hens and grains of size n and m respectively.\nAny hen can eat a grain if they are on the same position. The time taken for this is negligible. One hen can also eat multiple grains.\nIn 1 second, a hen can move right or left by 1 unit. The hens can move simultaneously and independently of each other.\nReturn the minimum time to eat all grains if the hens act optimally.\n\u00a0\nExample 1:\n\nInput: hens = [3,6,7], grains = [2,4,7,9]\nOutput: 2\nExplanation: \nOne of the ways hens eat all grains in 2 seconds is described below:\n- The first hen eats the grain at position 2 in 1 second. \n- The second hen eats the grain at position 4 in 2 seconds. \n- The third hen eats the grains at positions 7 and 9 in 2 seconds. \nSo, the maximum time needed is 2.\nIt can be proven that the hens cannot eat all grains before 2 seconds.\nExample 2:\n\nInput: hens = [4,6,109,111,213,215], grains = [5,110,214]\nOutput: 1\nExplanation: \nOne of the ways hens eat all grains in 1 second is described below:\n- The first hen eats the grain at position 5 in 1 second. \n- The fourth hen eats the grain at position 110 in 1 second.\n- The sixth hen eats the grain at position 214 in 1 second. \n- The other hens do not move. \nSo, the maximum time needed is 1.\n\n\u00a0\nConstraints:\n\n1 <= hens.length, grains.length <= 2*104\n0 <= hens[i], grains[j] <= 109\n\n",
    "starterCode": "class Solution:\n    def minimumTime(self, hens: List[int], grains: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "hens = [0,1,2,3], grains = [0,1,2,3]",
        "output": "0"
      },
      {
        "input": "hens = [4,6,109,111,213,215], grains = [5,110,214]",
        "output": "1"
      },
      {
        "input": "hens = [1,1,1], grains = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "hens = [100,200], grains = [50,150,250,350]",
        "output": "150"
      },
      {
        "input": "hens = [10,20,30], grains = [5,15,25,35]",
        "output": "15"
      },
      {
        "input": "hens = [0,1,2,3,4], grains = [0,1,2,3,4]",
        "output": "0"
      },
      {
        "input": "hens = [10,20,30,40,50], grains = [5,15,25,35,45,55]",
        "output": "15"
      },
      {
        "input": "hens = [1,10,100], grains = [5,50,500,5000]",
        "output": "4900"
      },
      {
        "input": "hens = [0,0,0], grains = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "hens = [1,3,5,7,9], grains = [2,4,6,8,10,12,14,16]",
        "output": "7"
      },
      {
        "input": "hens = [1,2,3], grains = [0,5,6]",
        "output": "3"
      },
      {
        "input": "hens = [3,6,7], grains = [2,4,7,9]",
        "output": "2"
      },
      {
        "input": "hens = [1,1,1,1], grains = [2,3,4,5,6]",
        "output": "5"
      },
      {
        "input": "hens = [1000000000], grains = [1000000000]",
        "output": "0"
      },
      {
        "input": "hens = [100,200,300], grains = [50,150,250,350,450]",
        "output": "150"
      },
      {
        "input": "hens = [0,0,0,0], grains = [0,0,0,0]",
        "output": "0"
      },
      {
        "input": "hens = [1,3,5,7,9], grains = [2,4,6,8,10]",
        "output": "1"
      },
      {
        "input": "hens = [50,50,50], grains = [45,50,55]",
        "output": "5"
      },
      {
        "input": "hens = [1,1,1,1], grains = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "hens = [1,2,3,4,5], grains = [5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "hens = [0,100], grains = [50,51,52]",
        "output": "50"
      },
      {
        "input": "hens = [1,2,3], grains = [0,1,2,3,4]",
        "output": "1"
      },
      {
        "input": "hens = [10,20,30,40], grains = [5,15,25,35,45,55,65]",
        "output": "25"
      },
      {
        "input": "hens = [1,1,1], grains = [1,2,3,4,5]",
        "output": "4"
      },
      {
        "input": "hens = [1,2,3,4,5], grains = [10,20,30,40,50]",
        "output": "45"
      },
      {
        "input": "hens = [1, 10, 100, 1000, 10000, 100000, 1000000], grains = [2, 9, 99, 999, 9999, 99999, 999999, 9999999]",
        "output": "8999999"
      },
      {
        "input": "hens = [100, 200, 300, 400, 500], grains = [50, 150, 250, 350, 450, 550, 650, 750]",
        "output": "250"
      },
      {
        "input": "hens = [1, 10, 20, 30, 40], grains = [0, 5, 15, 25, 35, 45, 50]",
        "output": "10"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], grains = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "20"
      },
      {
        "input": "hens = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45], grains = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "4"
      },
      {
        "input": "hens = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], grains = [500000000, 750000000, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006, 1000000007]",
        "output": "400000000"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], grains = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "10"
      },
      {
        "input": "hens = [10000, 20000, 30000, 40000, 50000], grains = [9000, 19000, 29000, 39000, 49000, 59000, 69000, 79000, 89000]",
        "output": "39000"
      },
      {
        "input": "hens = [1000000000], grains = [0, 500000000, 1000000000, 1500000000, 2000000000]",
        "output": "3000000000"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5], grains = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "14"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], grains = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195]",
        "output": "95"
      },
      {
        "input": "hens = [10, 10, 10, 10, 10], grains = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "9"
      },
      {
        "input": "hens = [1, 1, 1, 1, 1], grains = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "9"
      },
      {
        "input": "hens = [1000000000, 500000000, 1500000000], grains = [100000000, 50000000, 150000000, 200000000, 250000000]",
        "output": "450000000"
      },
      {
        "input": "hens = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], grains = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]",
        "output": "61"
      },
      {
        "input": "hens = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], grains = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "9"
      },
      {
        "input": "hens = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], grains = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "19"
      },
      {
        "input": "hens = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], grains = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "1"
      },
      {
        "input": "hens = [1,10,20,30,40,50,60,70,80,90], grains = [2,11,21,31,41,51,61,71,81,91,101,111,121,131,141,151,161,171,181,191]",
        "output": "101"
      },
      {
        "input": "hens = [1, 10, 100, 1000, 10000], grains = [9999, 9990, 990, 90, 9]",
        "output": "10"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], grains = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140]",
        "output": "40"
      },
      {
        "input": "hens = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000], grains = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050, 1150, 1250, 1350, 1450, 1550, 1650, 1750, 1850, 1950, 2050, 2150, 2250, 2350, 2450, 2550, 2650, 2750, 2850, 2950]",
        "output": "950"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50], grains = [15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "45"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], grains = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "140"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], grains = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "90"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], grains = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]",
        "output": "1980"
      },
      {
        "input": "hens = [0, 1000000000], grains = [500000000, 1500000000, 2500000000, 3500000000]",
        "output": "2500000000"
      },
      {
        "input": "hens = [10,20,30,40,50], grains = [5,15,25,35,45,55,65,75,85,95]",
        "output": "45"
      },
      {
        "input": "hens = [1, 3, 5, 7, 9, 11, 13, 15], grains = [2, 4, 6, 8, 10, 12, 14, 16, 18]",
        "output": "3"
      },
      {
        "input": "hens = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], grains = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "21"
      },
      {
        "input": "hens = [1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500], grains = [500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500, 8000, 8500, 9000, 9500, 10000]",
        "output": "4500"
      },
      {
        "input": "hens = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105], grains = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]",
        "output": "5"
      },
      {
        "input": "hens = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], grains = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "11"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], grains = [0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]",
        "output": "19"
      },
      {
        "input": "hens = [1000000000, 500000000, 250000000], grains = [1000000000, 750000000, 500000000, 250000000, 0]",
        "output": "250000000"
      },
      {
        "input": "hens = [100, 300, 500, 700, 900, 1100, 1300, 1500, 1700, 1900], grains = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050, 1150, 1250, 1350, 1450, 1550, 1650, 1750, 1850, 1950, 2050, 2150, 2250, 2350, 2450, 2550, 2650, 2750, 2850, 2950]",
        "output": "1050"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50], grains = [5, 15, 25, 35, 45, 55, 65]",
        "output": "15"
      },
      {
        "input": "hens = [100, 200, 300, 400, 500], grains = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050]",
        "output": "550"
      },
      {
        "input": "hens = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950], grains = [25, 75, 125, 175, 225, 275, 325, 375, 425, 475, 525, 575, 625, 675, 725, 775, 825, 875, 925, 975]",
        "output": "75"
      },
      {
        "input": "hens = [1, 1, 1, 1, 1], grains = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "99"
      },
      {
        "input": "hens = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], grains = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 245, 255, 265, 275, 285, 295, 305]",
        "output": "105"
      },
      {
        "input": "hens = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], grains = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "9"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], grains = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]",
        "output": "29"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], grains = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]",
        "output": "15"
      },
      {
        "input": "hens = [1, 5, 10, 15, 20], grains = [2, 3, 6, 9, 11, 14, 17, 19, 22, 25]",
        "output": "5"
      },
      {
        "input": "hens = [500, 1000, 1500, 2000, 2500, 3000], grains = [0, 500, 1000, 1500, 2000, 2500, 3000, 3500]",
        "output": "500"
      },
      {
        "input": "hens = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77], grains = [2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82]",
        "output": "5"
      },
      {
        "input": "hens = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], grains = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "19"
      },
      {
        "input": "hens = [500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000], grains = [100, 300, 500, 700, 900, 1100, 1300, 1500, 1700, 1900, 2100, 2300, 2500, 2700, 2900, 3100, 3300, 3500, 3700, 3900, 4100, 4300, 4500, 4700, 4900, 5100, 5300, 5500]",
        "output": "600"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50], grains = [9, 19, 29, 39, 49, 59, 69, 79]",
        "output": "29"
      },
      {
        "input": "hens = [50, 150, 250, 350, 450], grains = [1, 99, 101, 199, 201, 299, 301, 399, 401, 499, 501, 599, 601]",
        "output": "151"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50], grains = [5, 15, 25, 35, 45, 55, 65, 75]",
        "output": "25"
      },
      {
        "input": "hens = [10,20,30,40,50,60,70,80,90,100], grains = [5,15,25,35,45,55,65,75,85,95,105,115]",
        "output": "15"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50], grains = [5, 15, 25, 35, 45, 55]",
        "output": "15"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], grains = [0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400]",
        "output": "380"
      },
      {
        "input": "hens = [1,100,200,300,400,500], grains = [2,50,150,250,350,450,550,650]",
        "output": "150"
      },
      {
        "input": "hens = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], grains = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050]",
        "output": "150"
      },
      {
        "input": "hens = [5, 25, 45, 65, 85], grains = [10, 30, 50, 70, 90, 100]",
        "output": "15"
      },
      {
        "input": "hens = [1,3,5,7,9,11,13,15,17,19], grains = [2,4,6,8,10,12,14,16,18,20]",
        "output": "1"
      },
      {
        "input": "hens = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], grains = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "3"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], grains = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145]",
        "output": "45"
      },
      {
        "input": "hens = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], grains = [2,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111]",
        "output": "11"
      },
      {
        "input": "hens = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950], grains = [25, 75, 125, 175, 225, 275, 325, 375, 425, 475, 525, 575, 625, 675, 725, 775, 825, 875, 925, 975, 1025]",
        "output": "125"
      },
      {
        "input": "hens = [1, 3, 5, 7, 9], grains = [0, 2, 4, 6, 8, 10, 12]",
        "output": "3"
      },
      {
        "input": "hens = [1,2,3,4,5,6,7,8,9,10], grains = [1,3,5,7,9,11,13,15,17,19]",
        "output": "9"
      },
      {
        "input": "hens = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], grains = [90, 190, 290, 390, 490, 590, 690, 790, 890, 990, 1090, 1190, 1290, 1390]",
        "output": "390"
      },
      {
        "input": "hens = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], grains = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "1"
      },
      {
        "input": "hens = [50, 100, 150, 200], grains = [25, 75, 125, 175, 225, 275, 325, 375, 425, 475, 525, 575]",
        "output": "375"
      },
      {
        "input": "hens = [1000, 2000, 3000, 4000], grains = [500, 1500, 2500, 3500, 4500, 5500, 6500, 7500]",
        "output": "3500"
      },
      {
        "input": "hens = [1000,2000,3000,4000,5000], grains = [500,1500,2500,3500,4500,5500,6500]",
        "output": "1500"
      },
      {
        "input": "hens = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], grains = [999, 1999, 2999, 3999, 4999, 5999, 6999, 7999, 8999, 9999, 10001, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000]",
        "output": "9000"
      },
      {
        "input": "hens = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], grains = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "4"
      },
      {
        "input": "hens = [1, 10, 100, 1000, 10000, 100000], grains = [0, 5, 50, 500, 5000, 50000, 500000, 1000000]",
        "output": "900000"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50], grains = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "45"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50, 60, 70], grains = [5, 15, 25, 35, 45, 55, 65, 75]",
        "output": "15"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], grains = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195]",
        "output": "45"
      },
      {
        "input": "hens = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], grains = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "19"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], grains = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "90"
      },
      {
        "input": "hens = [0, 1000000000], grains = [500000000, 1500000000]",
        "output": "500000000"
      },
      {
        "input": "hens = [500, 1000, 1500, 2000, 2500], grains = [400, 600, 800, 1200, 1400, 1600, 1800, 2100, 2400, 2600]",
        "output": "500"
      },
      {
        "input": "hens = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71], grains = [1, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "29"
      },
      {
        "input": "hens = [1, 5, 10, 15, 20], grains = [3, 6, 9, 12, 14, 18, 22, 25]",
        "output": "5"
      },
      {
        "input": "hens = [1000, 2000, 3000, 4000, 5000], grains = [900, 1900, 2900, 3900, 4900, 5900]",
        "output": "1100"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], grains = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "10"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], grains = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 245, 255, 265, 275, 285, 295]",
        "output": "145"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], grains = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "49"
      },
      {
        "input": "hens = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], grains = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "10"
      },
      {
        "input": "hens = [100,200,300,400,500,600,700,800,900,1000], grains = [50,150,250,350,450,550,650,750,850,950,1050,1150,1250,1350,1450]",
        "output": "450"
      },
      {
        "input": "hens = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90], grains = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195]",
        "output": "105"
      },
      {
        "input": "hens = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], grains = [1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 27, 29, 31, 33, 37, 39, 41, 43, 47, 49, 51, 53, 57, 59, 61, 63, 67, 69, 71, 73, 77, 79, 81, 83, 87, 89, 91, 93, 97, 99]",
        "output": "12"
      },
      {
        "input": "hens = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], grains = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125]",
        "output": "25"
      }
    ]
  },
  {
    "id": 834,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Graph",
      "Dynamic Programming"
    ],
    "problemDescription": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nReturn an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.\n\u00a0\nExample 1:\n\n\nInput: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\nOutput: [8,12,6,10,10,10]\nExplanation: The tree is shown above.\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.\nHence, answer[0] = 8, and so on.\n\nExample 2:\n\n\nInput: n = 1, edges = []\nOutput: [0]\n\nExample 3:\n\n\nInput: n = 2, edges = [[1,0]]\nOutput: [1,1]\n\n\u00a0\nConstraints:\n\n1 <= n <= 3 * 104\nedges.length == n - 1\nedges[i].length == 2\n0 <= ai, bi < n\nai != bi\nThe given input represents a valid tree.\n\n",
    "starterCode": "class Solution:\n    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "n = 10, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]]",
        "output": "[15, 19, 19, 19, 27, 27, 27, 27, 27, 27]"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
        "output": "[10, 11, 11, 16, 16, 16, 16]"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[1,3]]",
        "output": "[5, 3, 5, 5]"
      },
      {
        "input": "n = 4, edges = [[0,1],[0,2],[1,3]]",
        "output": "[4, 4, 6, 6]"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]]",
        "output": "[17, 11, 13, 13, 19, 19, 19, 19]"
      },
      {
        "input": "n = 2, edges = [[1,0]]",
        "output": "[1, 1]"
      },
      {
        "input": "n = 3, edges = [[0,1],[0,2]]",
        "output": "[2, 3, 3]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]",
        "output": "[8, 12, 6, 10, 10, 10]"
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[2,3],[2,4]]",
        "output": "[6, 9, 5, 8, 8]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]]",
        "output": "[19, 17, 23, 21, 23, 31, 31, 29, 29, 31]"
      },
      {
        "input": "n = 1, edges = []",
        "output": "[0]"
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[1,3],[1,4]]",
        "output": "[6, 5, 9, 8, 8]"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[2,3],[2,4],[2,5],[4,6]]",
        "output": "[11, 16, 8, 13, 11, 13, 16]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[0,10],[0,11]]",
        "output": "[11, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]]",
        "output": "[50, 46, 56, 56, 60, 60, 70, 70, 70, 74, 78, 78, 78, 78, 88, 88, 88, 88, 88, 88]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8],[3,9],[3,10],[4,11]]",
        "output": "[23, 21, 27, 27, 29, 31, 37, 37, 37, 37, 37, 39]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[2,8],[3,9],[3,10],[3,11],[4,12],[5,13],[5,14]]",
        "output": "[28, 31, 35, 35, 42, 40, 48, 48, 48, 48, 48, 48, 55, 53, 53]"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[1,7],[2,8],[2,9],[2,10],[3,11],[3,12],[3,13],[4,14],[4,15],[4,16],[5,17],[5,18],[6,19],[6,20],[7,21],[7,22],[8,23],[8,24],[9,25],[9,26],[10,27],[10,28],[11,29]]",
        "output": "[67, 77, 77, 87, 89, 101, 101, 101, 101, 101, 101, 113, 115, 115, 117, 117, 117, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 141]"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,24],[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]]",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 50, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[5,16],[5,17],[5,18],[6,19],[6,20],[6,21],[7,22],[7,23],[7,24],[8,25],[8,26],[8,27],[9,28],[9,29],[9,30],[10,31],[10,32],[10,33],[11,34],[11,35],[11,36],[12,37],[12,38],[12,39],[13,40],[13,41],[13,42],[14,43],[14,44],[14,45],[15,46],[15,47],[15,48],[16,49]]",
        "output": "[142, 146, 166, 166, 170, 186, 188, 208, 208, 208, 208, 208, 208, 212, 212, 212, 232, 234, 234, 236, 236, 236, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 260, 260, 260, 260, 260, 260, 260, 260, 260, 280]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8],[3,9],[3,10],[3,11],[4,12],[4,13],[4,14],[5,15],[5,16],[5,17],[6,18],[6,19],[6,20],[7,21],[7,22],[7,23],[8,24],[8,25],[8,26],[9,27],[9,28],[9,29]]",
        "output": "[80, 78, 84, 94, 100, 100, 106, 106, 106, 116, 122, 122, 128, 128, 128, 128, 128, 128, 134, 134, 134, 134, 134, 134, 134, 134, 134, 144, 144, 144]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19]]",
        "output": "[41, 47, 49, 55, 55, 61, 61, 63, 65, 73, 73, 73, 73, 79, 79, 79, 79, 81, 81, 83]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14]]",
        "output": "[30, 31, 37, 39, 40, 40, 48, 50, 52, 52, 53, 53, 53, 53, 61]"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24]]",
        "output": "[69, 62, 78, 73, 77, 81, 95, 97, 92, 92, 96, 100, 104, 104, 118, 118, 118, 120, 120, 115, 115, 115, 115, 119, 119]"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[1,7],[2,8],[2,9],[2,10],[2,11],[3,12],[3,13],[3,14],[3,15],[4,16],[4,17],[5,18],[5,19],[6,20],[6,21],[7,22],[7,23],[8,24],[8,25],[9,26],[9,27],[10,28],[10,29]]",
        "output": "[69, 73, 77, 89, 97, 97, 97, 97, 101, 101, 101, 105, 117, 117, 117, 117, 125, 125, 125, 125, 125, 125, 125, 125, 129, 129, 129, 129, 129, 129]"
      },
      {
        "input": "n = 22, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19],[12,20],[13,21]]",
        "output": "[62, 62, 64, 74, 74, 76, 78, 92, 92, 92, 92, 94, 94, 96, 98, 112, 112, 112, 112, 114, 114, 116]"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24]]",
        "output": "[57, 62, 62, 74, 81, 81, 81, 81, 81, 81, 97, 97, 97, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104]"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
        "output": "[105, 92, 81, 72, 65, 60, 57, 56, 57, 60, 65, 72, 81, 92, 105]"
      },
      {
        "input": "n = 18, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17]]",
        "output": "[46, 44, 50, 52, 54, 62, 62, 66, 66, 68, 70, 78, 78, 78, 78, 82, 82, 84]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]]",
        "output": "[34, 35, 35, 44, 44, 44, 44, 57, 57, 57, 57, 57, 57, 57, 57]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11]]",
        "output": "[26, 26, 28, 32, 34, 36, 36, 40, 44, 46, 46, 50]"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25],[12,26],[12,27],[13,28],[13,29]]",
        "output": "[83, 83, 99, 99, 99, 99, 123, 123, 123, 123, 123, 123, 123, 123, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151]"
      },
      {
        "input": "n = 35, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[5,16],[5,17],[5,18],[6,19],[6,20],[6,21],[7,22],[7,23],[7,24],[8,25],[8,26],[8,27],[9,28],[9,29],[9,30],[10,31],[10,32],[10,33],[11,34]]",
        "output": "[87, 96, 96, 106, 123, 123, 123, 123, 123, 123, 133, 137, 139, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 166, 166, 166, 170]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[4,9]]",
        "output": "[19, 17, 23, 23, 21, 31, 31, 31, 29, 29]"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]]",
        "output": "[74, 69, 81, 80, 80, 96, 100, 99, 99, 99, 99, 115, 119, 123, 123, 122, 122, 122, 122, 122, 122, 122, 122, 138, 138]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,5],[1,2],[1,3],[1,4],[5,6],[5,7],[5,8],[8,9],[8,10],[8,11]]",
        "output": "[23, 27, 37, 37, 37, 21, 31, 31, 25, 35, 35, 35]"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[5,17],[6,18],[6,19],[6,20],[7,21],[7,22],[8,23],[8,24]]",
        "output": "[57, 58, 66, 74, 77, 75, 75, 85, 85, 89, 97, 97, 97, 100, 100, 98, 98, 98, 98, 98, 98, 108, 108, 108, 108]"
      },
      {
        "input": "n = 27, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[10,20],[10,21],[11,22],[12,23],[12,24],[13,25],[14,26]]",
        "output": "[82, 81, 85, 94, 96, 100, 102, 115, 115, 119, 117, 123, 121, 125, 125, 140, 140, 140, 140, 144, 142, 142, 148, 146, 146, 150, 150]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[2,8],[3,9],[3,10],[3,11],[4,12],[4,13],[5,14],[5,15],[6,16],[6,17],[7,18],[7,19]]",
        "output": "[43, 49, 47, 55, 63, 63, 61, 61, 65, 73, 73, 73, 81, 81, 81, 81, 79, 79, 79, 79]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]]",
        "output": "[54, 50, 60, 56, 62, 74, 74, 70, 70, 78, 80, 92, 92, 92, 92, 88, 88, 88, 88, 96]"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]]",
        "output": "[94, 94, 96, 110, 110, 112, 114, 134, 134, 134, 134, 136, 136, 138, 140, 162, 162, 162, 162, 162, 162, 162, 162, 164, 164, 164, 164, 166, 166, 168]"
      }
    ]
  },
  {
    "id": 1761,
    "difficulty": "Hard",
    "tags": [
      "Graph"
    ],
    "problemDescription": "You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.\nA connected trio is a set of three nodes where there is an edge between every pair of them.\nThe degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.\nReturn the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.\n\u00a0\nExample 1:\n\n\nInput: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\nOutput: 3\nExplanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.\n\nExample 2:\n\n\nInput: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]\nOutput: 0\nExplanation: There are exactly three trios:\n1) [1,4,3] with degree 0.\n2) [2,5,6] with degree 2.\n3) [5,6,7] with degree 2.\n\n\u00a0\nConstraints:\n\n2 <= n <= 400\nedges[i].length == 2\n1 <= edges.length <= n * (n-1) / 2\n1 <= ui, vi <= n\nui != vi\nThere are no repeated edges.\n\n",
    "starterCode": "class Solution:\n    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 4, edges = [[1,2],[1,3],[2,3]]",
        "output": "0"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "3"
      },
      {
        "input": "n = 400, edges = [[1,2],[2,3],[3,1]]",
        "output": "0"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[2,3],[4,5],[4,6],[5,6],[7,8],[8,9],[9,7],[10,1]]",
        "output": "0"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[2,3],[4,5],[5,6],[6,4],[7,8]]",
        "output": "0"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[2,3],[4,5],[4,6],[5,6],[7,8]]",
        "output": "0"
      },
      {
        "input": "n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]",
        "output": "3"
      },
      {
        "input": "n = 3, edges = [[1,2],[2,3],[3,1]]",
        "output": "0"
      },
      {
        "input": "n = 5, edges = [[1,2],[2,3],[3,1],[1,4],[4,5],[5,1]]",
        "output": "2"
      },
      {
        "input": "n = 5, edges = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "-1"
      },
      {
        "input": "n = 8, edges = [[1,2],[2,3],[3,1],[4,5],[5,6],[6,4],[7,8]]",
        "output": "0"
      },
      {
        "input": "n = 5, edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[1,3],[2,4],[3,5]]",
        "output": "4"
      },
      {
        "input": "n = 4, edges = [[1,2],[2,3],[3,4]]",
        "output": "-1"
      },
      {
        "input": "n = 5, edges = [[1,2],[2,3],[3,4],[4,5],[5,1]]",
        "output": "-1"
      },
      {
        "input": "n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]",
        "output": "0"
      },
      {
        "input": "n = 5, edges = [[1,2],[2,3],[3,1],[3,4],[4,5]]",
        "output": "1"
      },
      {
        "input": "n = 3, edges = [[1,2],[2,3]]",
        "output": "-1"
      },
      {
        "input": "n = 4, edges = [[1,2],[2,3],[3,1],[1,4],[2,4],[3,4]]",
        "output": "3"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[2,3],[4,5],[4,6],[5,6],[6,7],[7,8],[5,7],[6,8],[4,7],[4,8]]",
        "output": "0"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[2,5],[3,4],[3,5],[3,6],[4,5],[4,6],[4,7],[5,6],[5,7],[5,8],[6,7],[6,8],[6,9],[7,8],[7,9],[7,10],[8,9],[8,10],[8,11],[9,10],[9,11],[9,12],[10,11],[10,12],[11,12],[1,10],[2,11],[3,12]]",
        "output": "9"
      },
      {
        "input": "n = 100, edges = [[1,2],[2,3],[3,1],[4,5],[5,6],[6,4],[7,8],[8,9],[9,7],[10,11],[11,12],[12,10],[13,14],[14,15],[15,13],[16,17],[17,18],[18,16],[19,20],[20,19],[1,100],[100,50],[50,25],[25,75],[75,50],[50,1],[2,50],[3,50],[4,50],[5,50],[6,50],[7,50],[8,50],[9,50],[10,50],[11,50],[12,50],[13,50],[14,50],[15,50],[16,50],[17,50],[18,50],[19,50],[21,50],[22,50],[23,50],[24,50],[25,50],[26,50],[27,50],[28,50],[29,50],[30,50],[31,50],[32,50],[33,50],[34,50],[35,50],[36,50],[37,50],[38,50],[39,50],[40,50],[41,50],[42,50],[43,50],[44,50],[45,50],[46,50],[47,50],[48,50],[49,50],[51,50],[52,50],[53,50],[54,50],[55,50],[56,50],[57,50],[58,50],[59,50],[60,50],[61,50],[62,50],[63,50],[64,50],[65,50],[66,50],[67,50],[68,50],[69,50],[70,50],[71,50],[72,50],[73,50],[74,50],[75,50],[76,50],[77,50],[78,50],[79,50],[80,50],[81,50],[82,50],[83,50],[84,50],[85,50],[86,50],[87,50],[88,50],[89,50],[90,50],[91,50],[92,50],[93,50],[94,50],[95,50],[96,50],[97,50],[98,50],[99,50],[100,99]]",
        "output": "3"
      },
      {
        "input": "n = 6, edges = [[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,6],[6,1],[2,5],[3,5]]",
        "output": "5"
      },
      {
        "input": "n = 30, edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[2,3],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6],[4,5],[4,6],[5,6],[7,8],[7,9],[7,10],[7,11],[7,12],[8,9],[8,10],[8,11],[8,12],[9,10],[9,11],[9,12],[10,11],[10,12],[11,12],[13,14],[13,15],[13,16],[13,17],[13,18],[14,15],[14,16],[14,17],[14,18],[15,16],[15,17],[15,18],[16,17],[16,18],[17,18],[19,20],[19,21],[19,22],[19,23],[19,24],[20,21],[20,22],[20,23],[20,24],[21,22],[21,23],[21,24],[22,23],[22,24],[23,24],[1,13],[2,14],[3,15],[4,16],[5,17],[6,18],[7,19],[8,20],[9,21],[10,22],[11,23],[12,24]]",
        "output": "12"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[1,10],[2,11],[3,12],[4,13],[5,14],[6,15],[7,16],[8,17],[9,18],[10,19],[11,20],[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[8,18],[9,19],[10,20]]",
        "output": "9"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,1]]",
        "output": "6"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[5,6],[5,7],[5,8],[6,7],[6,8],[7,8],[9,10]]",
        "output": "3"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[5,6],[5,7],[5,8],[6,7],[6,8],[7,8],[9,10],[9,11],[9,12],[10,11],[10,12],[11,12],[13,14],[13,15],[13,16],[14,15],[14,16],[15,16],[17,18],[17,19],[17,20],[18,19],[18,20],[19,20],[1,5],[2,6],[3,7],[4,8],[1,9],[2,10],[3,11],[4,12],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,16],[13,17],[14,18],[15,19],[16,20]]",
        "output": "6"
      },
      {
        "input": "n = 8, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,1],[1,3],[4,6],[2,7],[5,8]]",
        "output": "3"
      },
      {
        "input": "n = 30, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[5,6],[5,7],[5,8],[6,7],[6,8],[7,8],[9,10],[9,11],[9,12],[10,11],[10,12],[11,12],[13,14],[13,15],[13,16],[14,15],[14,16],[15,16],[17,18],[17,19],[17,20],[18,19],[18,20],[19,20],[21,22],[21,23],[21,24],[22,23],[22,24],[23,24],[25,26],[25,27],[25,28],[26,27],[26,28],[27,28],[29,30]]",
        "output": "3"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[1,5],[2,5],[3,5],[4,5],[5,6],[5,7],[5,8],[6,7],[6,8],[7,8]]",
        "output": "3"
      },
      {
        "input": "n = 30, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[5,6],[5,7],[5,8],[6,7],[6,8],[7,8],[9,10],[9,11],[9,12],[10,11],[10,12],[11,12],[13,14],[13,15],[13,16],[14,15],[14,16],[15,16],[17,18],[17,19],[17,20],[18,19],[18,20],[19,20],[21,22],[21,23],[21,24],[22,23],[22,24],[23,24],[25,26],[25,27],[25,28],[26,27],[26,28],[27,28],[29,30],[1,5],[2,6],[3,7],[4,8],[1,9],[2,10],[3,11],[4,12],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,16],[13,17],[14,18],[15,19],[16,20],[17,21],[18,22],[19,23],[20,24],[21,25],[22,26],[23,27],[24,28],[25,29],[26,30]]",
        "output": "7"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,1],[20,2]]",
        "output": "6"
      },
      {
        "input": "n = 35, edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,3],[2,4],[2,5],[2,6],[2,7],[3,4],[3,5],[3,6],[3,7],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7],[8,9],[8,10],[8,11],[8,12],[8,13],[8,14],[9,10],[9,11],[9,12],[9,13],[9,14],[10,11],[10,12],[10,13],[10,14],[11,12],[11,13],[11,14],[12,13],[12,14],[13,14],[15,16],[15,17],[15,18],[15,19],[15,20],[15,21],[16,17],[16,18],[16,19],[16,20],[16,21],[17,18],[17,19],[17,20],[17,21],[18,19],[18,20],[18,21],[19,20],[19,21],[20,21],[22,23],[22,24],[22,25],[22,26],[22,27],[22,28],[23,24],[23,25],[23,26],[23,27],[23,28],[24,25],[24,26],[24,27],[24,28],[25,26],[25,27],[25,28],[26,27],[26,28],[27,28],[29,30],[29,31],[29,32],[29,33],[29,34],[29,35],[30,31],[30,32],[30,33],[30,34],[30,35],[31,32],[31,33],[31,34],[31,35],[32,33],[32,34],[32,35],[33,34],[33,35],[34,35],[1,15],[2,16],[3,17],[4,18],[5,19],[6,20],[7,21],[8,22],[9,23],[10,24],[11,25],[12,26],[13,27],[14,28],[15,29],[16,30],[17,31],[18,32],[19,33],[20,34],[21,35]]",
        "output": "15"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,1],[2,5],[3,5],[4,7],[5,7],[6,9],[7,9],[8,11],[9,11],[10,13],[11,13],[12,14],[13,14]]",
        "output": "5"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[2,3],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7],[8,9],[8,10],[8,11],[9,10],[9,11],[10,11],[12,13],[12,14],[12,15],[13,14],[13,15],[14,15],[16,17],[16,18],[16,19],[17,18],[17,19],[18,19],[1,4],[2,5],[3,6],[4,7],[5,8],[6,9]]",
        "output": "3"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,1],[4,5],[5,6],[6,4],[7,8],[8,9],[9,7],[10,11],[11,12],[12,10],[13,14],[14,15],[15,13],[16,17],[17,18],[18,16],[19,20],[20,19],[1,4],[2,5],[3,6],[1,7],[2,8],[3,9],[4,10],[5,11],[6,12],[7,13],[8,14],[9,15],[10,16],[11,17],[12,18],[13,19],[14,20],[1,16],[2,17],[3,18],[4,19],[5,20]]",
        "output": "5"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,1]]",
        "output": "3"
      },
      {
        "input": "n = 5, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[1,5],[2,5],[3,5]]",
        "output": "5"
      },
      {
        "input": "n = 40, edges = [[1,2],[1,3],[2,3],[4,5],[4,6],[5,6],[7,8],[8,9],[9,7],[10,11],[11,12],[12,10],[13,14],[14,15],[15,13],[16,17],[17,18],[18,16],[19,20],[20,21],[21,19],[22,23],[23,24],[24,22],[25,26],[26,27],[27,25],[28,29],[29,30],[30,28],[31,32],[32,33],[33,31],[34,35],[35,36],[36,34],[37,38],[38,39],[39,37],[40,1]]",
        "output": "0"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[2,3],[2,4],[2,5],[2,6],[2,7],[3,4],[3,5],[3,6],[3,7],[3,8],[4,5],[4,6],[4,7],[4,8],[4,9],[5,6],[5,7],[5,8],[5,9],[5,10],[6,7],[6,8],[6,9],[6,10],[6,11],[7,8],[7,9],[7,10],[7,11],[7,12],[8,9],[8,10],[8,11],[8,12],[8,13],[9,10],[9,11],[9,12],[9,13],[9,14],[10,11],[10,12],[10,13],[10,14],[10,15],[11,12],[11,13],[11,14],[11,15],[11,16],[12,13],[12,14],[12,15],[12,16],[12,17],[13,14],[13,15],[13,16],[13,17],[13,18],[14,15],[14,16],[14,17],[14,18],[14,19],[15,16],[15,17],[15,18],[15,19],[15,20]]",
        "output": "12"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[5,6],[5,7],[5,8],[6,7],[6,8],[7,8],[9,10],[9,11],[9,12],[10,11],[10,12],[11,12],[13,14],[13,15],[13,16],[14,15],[14,16],[15,16],[17,18],[17,19],[17,20],[18,19],[18,20],[19,20]]",
        "output": "3"
      },
      {
        "input": "n = 8, edges = [[1,2],[2,3],[3,1],[4,5],[5,6],[6,4],[7,8],[1,4],[2,5],[3,6],[1,7],[2,8],[3,8]]",
        "output": "3"
      },
      {
        "input": "n = 20, edges = [[1,2],[2,3],[3,1],[4,5],[5,6],[6,4],[7,8],[8,9],[9,7],[10,11],[11,12],[12,10],[13,14],[14,15],[15,13],[16,17],[17,18],[18,16],[19,20],[20,1],[20,19]]",
        "output": "0"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[6,7],[6,8],[6,9],[7,8],[7,9],[8,9],[10,11],[10,12],[10,13],[11,12],[11,13],[12,13],[14,15]]",
        "output": "3"
      },
      {
        "input": "n = 9, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,1],[9,2],[1,4],[2,5],[3,6],[4,7],[5,8],[6,9],[7,1],[8,2],[9,3]]",
        "output": "12"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[2,5],[3,4],[3,5],[3,6],[4,5],[4,6],[4,7],[5,6],[5,7],[5,8],[6,7],[6,8],[6,9],[7,8],[7,9],[7,10],[8,9],[8,10],[9,10]]",
        "output": "6"
      },
      {
        "input": "n = 5, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[3,5],[4,5]]",
        "output": "4"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[2,5],[3,4],[3,5],[3,6],[4,5],[4,6],[4,7],[5,6],[5,7],[5,8],[6,7],[6,8],[6,9],[7,8],[7,9],[7,10],[8,9],[8,10],[8,11],[9,10],[9,11],[9,12],[10,11],[10,12],[10,13],[11,12],[11,13],[11,14],[12,13],[12,14],[12,15],[13,14],[13,15],[14,15]]",
        "output": "6"
      },
      {
        "input": "n = 25, edges = [[1,2],[2,3],[3,4],[4,5],[5,1],[6,7],[7,8],[8,9],[9,10],[10,6],[11,12],[12,13],[13,14],[14,15],[15,11],[16,17],[17,18],[18,19],[19,20],[20,16],[21,22],[22,23],[23,24],[24,25],[25,21],[1,6],[2,7],[3,8],[4,9],[5,10],[11,16],[12,17],[13,18],[14,19],[15,20],[21,2],[22,3],[23,4],[24,5],[25,1]]",
        "output": "-1"
      },
      {
        "input": "n = 25, edges = [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6],[3,7],[4,5],[4,6],[4,7],[4,8],[5,6],[5,7],[5,8],[5,9],[6,7],[6,8],[6,9],[6,10],[7,8],[7,9],[7,10],[7,11],[8,9],[8,10],[8,11],[8,12],[9,10],[9,11],[9,12],[9,13],[10,11],[10,12],[10,13],[10,14],[11,12],[11,13],[11,14],[11,15],[12,13],[12,14],[12,15],[12,16],[13,14],[13,15],[13,16],[13,17],[14,15],[14,16],[14,17],[14,18],[15,16],[15,17],[15,18],[15,19],[16,17],[16,18],[16,19],[16,20],[17,18],[17,19],[17,20],[17,21],[18,19],[18,20],[18,21],[18,22],[19,20],[19,21],[19,22],[19,23],[20,21],[20,22],[20,23],[20,24],[21,22],[21,23],[21,24],[21,25],[22,23],[22,24],[22,25],[23,24],[23,25],[24,25],[25,1]]",
        "output": "10"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[2,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,1],[10,2]]",
        "output": "4"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[5,6],[5,7],[6,7],[8,9],[8,10],[9,10],[11,12],[11,13],[12,13],[1,5],[3,6],[4,8],[7,11]]",
        "output": "1"
      },
      {
        "input": "n = 30, edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[2,3],[2,4],[2,5],[2,6],[2,7],[3,4],[3,5],[3,6],[3,7],[3,8],[4,5],[4,6],[4,7],[4,8],[4,9],[5,6],[5,7],[5,8],[5,9],[5,10],[6,7],[6,8],[6,9],[6,10],[6,11],[7,8],[7,9],[7,10],[7,11],[7,12],[8,9],[8,10],[8,11],[8,12],[8,13],[9,10],[9,11],[9,12],[9,13],[9,14],[10,11],[10,12],[10,13],[10,14],[10,15],[11,12],[11,13],[11,14],[11,15],[11,16],[12,13],[12,14],[12,15],[12,16],[12,17],[13,14],[13,15],[13,16],[13,17],[13,18],[14,15],[14,16],[14,17],[14,18],[14,19],[15,16],[15,17],[15,18],[15,19],[15,20],[16,17],[16,18],[16,19],[16,20],[16,21],[17,18],[17,19],[17,20],[17,21],[17,22],[18,19],[18,20],[18,21],[18,22],[18,23],[19,20],[19,21],[19,22],[19,23],[19,24],[20,21],[20,22],[20,23],[20,24],[20,25],[21,22],[21,23],[21,24],[21,25],[21,26],[22,23],[22,24],[22,25],[22,26],[22,27],[23,24],[23,25],[23,26],[23,27],[23,28],[24,25],[24,26],[24,27],[24,28],[24,29],[25,26],[25,27],[25,28],[25,29],[25,30],[26,27],[26,28],[26,29],[26,30],[27,28],[27,29],[27,30],[28,29],[28,30],[29,30],[30,1]]",
        "output": "13"
      },
      {
        "input": "n = 15, edges = [[1,2],[2,3],[3,1],[4,5],[5,6],[6,4],[7,8],[8,9],[9,7],[10,11],[11,12],[12,10],[13,14],[14,15],[15,13],[1,4],[2,5],[3,6],[1,7],[2,8],[3,9],[4,10],[5,11],[6,12],[7,13],[8,14],[9,15],[10,13],[11,14],[12,15]]",
        "output": "6"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[2,3],[2,4],[2,5],[3,4],[3,6],[4,5],[5,6],[6,7],[7,8],[8,4]]",
        "output": "4"
      },
      {
        "input": "n = 30, edges = [[1,2],[2,3],[3,1],[4,5],[5,6],[6,4],[7,8],[8,9],[9,7],[10,11],[11,12],[12,10],[13,14],[14,15],[15,13],[16,17],[17,18],[18,16],[19,20],[20,21],[21,19],[22,23],[23,24],[24,22],[25,26],[26,27],[27,25],[28,29],[29,30],[30,28]]",
        "output": "0"
      },
      {
        "input": "n = 8, edges = [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,6],[3,4],[3,7],[4,8],[5,6],[6,7],[7,8]]",
        "output": "6"
      },
      {
        "input": "n = 30, edges = [[1,2],[2,3],[3,1],[4,5],[5,6],[6,4],[7,8],[8,9],[9,7],[10,11],[11,12],[12,10],[13,14],[14,15],[15,13],[16,17],[17,18],[18,16],[19,20],[20,21],[21,19],[22,23],[23,24],[24,22],[25,26],[26,27],[27,25],[28,29],[29,30],[30,28],[1,13],[2,14],[3,15],[4,16],[5,17],[6,18],[7,19],[8,20],[9,21],[10,22],[11,23],[12,24],[1,25],[2,26],[3,27],[4,28],[5,29],[6,30]]",
        "output": "3"
      },
      {
        "input": "n = 30, edges = [[1,2],[2,3],[3,1],[4,5],[5,6],[6,4],[7,8],[8,9],[9,7],[10,11],[11,12],[12,10],[13,14],[14,15],[15,13],[16,17],[17,18],[18,16],[19,20],[20,1],[20,19],[21,22],[22,23],[23,21],[24,25],[25,26],[26,24],[27,28],[28,29],[29,27],[30,21],[30,25]]",
        "output": "0"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[5,6],[5,7],[5,8],[6,7],[6,8],[7,8],[9,10],[9,11],[9,12],[10,11],[10,12],[11,12],[1,5],[2,6],[3,7],[4,8],[1,9],[2,10],[3,11],[4,12]]",
        "output": "6"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5],[6,7],[6,8],[6,9],[7,8],[7,9],[8,9],[10,11],[10,12],[10,13],[11,12],[11,13],[12,13],[14,15],[14,16],[14,17],[15,16],[15,17],[16,17],[1,6],[2,7],[3,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15],[11,16],[12,17],[1,14],[2,15],[3,16],[4,17],[5,11],[6,12],[7,13],[8,14],[9,15],[10,16],[11,17]]",
        "output": "11"
      },
      {
        "input": "n = 15, edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,1]]",
        "output": "5"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[2,3],[2,4],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,1],[2,5],[3,5],[4,7],[5,7],[6,9],[7,9],[8,11],[9,11]]",
        "output": "5"
      },
      {
        "input": "n = 40, edges = [[1,2],[2,3],[1,3],[4,5],[5,6],[4,6],[7,8],[8,9],[7,9],[10,11],[11,12],[10,12],[13,14],[14,15],[13,15],[16,17],[17,18],[16,18],[19,20],[20,21],[19,21],[22,23],[23,24],[22,24],[25,26],[26,27],[25,27],[28,29],[29,30],[28,30],[31,32],[32,33],[31,33],[34,35],[35,36],[34,36],[37,38],[38,39],[37,39],[40,1],[2,4],[3,5],[6,8],[7,9],[10,12],[11,13],[14,16],[15,17],[18,20],[19,21],[22,24],[23,25],[26,28],[27,29],[30,32],[31,33],[34,36],[35,37],[38,40],[39,1]]",
        "output": "3"
      }
    ]
  },
  {
    "id": 85,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Array",
      "Dynamic Programming",
      "Matrix",
      "Monotonic Stack"
    ],
    "problemDescription": "Given a rows x cols\u00a0binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n\u00a0\nExample 1:\n\n\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.\n\nExample 2:\n\nInput: matrix = [[\"0\"]]\nOutput: 0\n\nExample 3:\n\nInput: matrix = [[\"1\"]]\nOutput: 1\n\n\u00a0\nConstraints:\n\nrows == matrix.length\ncols == matrix[i].length\n1 <= row, cols <= 200\nmatrix[i][j] is '0' or '1'.\n\n",
    "starterCode": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        ",
    "testCases": [
      {
        "input": "matrix = [[\"1\"]]",
        "output": "1"
      },
      {
        "input": "matrix = [[\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"1\"]]",
        "output": "1"
      },
      {
        "input": "matrix = [[\"1\",\"1\"],[\"1\",\"1\"]]",
        "output": "4"
      },
      {
        "input": "matrix = [[\"0\"]]",
        "output": "0"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\",\"1\"]]",
        "output": "10"
      },
      {
        "input": "matrix = [[\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\"]]",
        "output": "0"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
        "output": "6"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"]]",
        "output": "16"
      },
      {
        "input": "matrix = [[\"1\",\"0\"],[\"0\",\"1\"]]",
        "output": "1"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\"],[\"0\",\"0\",\"1\"],[\"1\",\"0\",\"1\"]]",
        "output": "3"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\"]]",
        "output": "9"
      },
      {
        "input": "matrix = [[\"0\",\"0\"],[\"0\",\"0\"]]",
        "output": "0"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\"]]",
        "output": "6"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\"]] ",
        "output": "1"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\"]] ",
        "output": "8"
      },
      {
        "input": "matrix = [[\"0\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"0\"]]",
        "output": "8"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]] ",
        "output": "5"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"1\"]]",
        "output": "1"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"]]",
        "output": "8"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "16"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "10"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "10"
      },
      {
        "input": "matrix = [[\"0\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"1\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"0\",\"0\",\"1\",\"1\",\"0\"],[\"0\",\"0\",\"1\",\"1\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "30"
      },
      {
        "input": "matrix = [[\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\"]]",
        "output": "1"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"0\"]]",
        "output": "6"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "25"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\"]]",
        "output": "4"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]] ",
        "output": "9"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "16"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "10"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\"]]",
        "output": "1"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]] ",
        "output": "5"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "6"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"0\",\"1\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "output": "12"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "12"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"]]",
        "output": "5"
      },
      {
        "input": "matrix = [[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"1\",\"0\",\"0\"],[\"0\",\"1\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"0\",\"1\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"0\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "10"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "12"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\"]]",
        "output": "6"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"]]",
        "output": "10"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"1\"]]",
        "output": "6"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"0\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"1\",\"0\"]]",
        "output": "12"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "20"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "5"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\"]]",
        "output": "9"
      },
      {
        "input": "matrix = [[\"0\",\"0\",\"0\",\"1\",\"0\"],[\"0\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"1\",\"0\"]] ",
        "output": "6"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]] ",
        "output": "7"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\"]]",
        "output": "6"
      },
      {
        "input": "matrix = [[\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
        "output": "10"
      },
      {
        "input": "matrix = [[\"0\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\"]]",
        "output": "8"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"1\",\"0\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\",\"1\",\"1\"]] ",
        "output": "21"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"1\",\"1\"]]",
        "output": "12"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\",\"0\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"1\"]]",
        "output": "8"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"0\",\"1\"],[\"0\",\"0\",\"0\",\"0\"],[\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\"]] ",
        "output": "4"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\"]]",
        "output": "1"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "output": "9"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "15"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"]]",
        "output": "8"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]]",
        "output": "6"
      },
      {
        "input": "matrix = [[\"0\",\"1\",\"1\",\"1\",\"0\",\"0\",\"1\"],[\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0\"]]",
        "output": "10"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]",
        "output": "16"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\",\"1\"]]",
        "output": "12"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"0\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\"],[\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"]]",
        "output": "1"
      },
      {
        "input": "matrix = [[\"1\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"1\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"]]",
        "output": "4"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"0\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"]] ",
        "output": "5"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\"]]",
        "output": "8"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"0\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"1\",\"1\",\"0\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"0\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      },
      {
        "input": "matrix = [[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"],[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]]\"",
        "output": "Error: Solution.maximalRectangle() missing 1 required positional argument: 'matrix'"
      }
    ]
  },
  {
    "id": 212,
    "difficulty": "Hard",
    "tags": [
      "Trie",
      "Array",
      "String",
      "Backtracking",
      "Matrix"
    ],
    "problemDescription": "Given an m x n board\u00a0of characters and a list of strings words, return all words on the board.\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n\u00a0\nExample 1:\n\n\nInput: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\nOutput: [\"eat\",\"oath\"]\n\nExample 2:\n\n\nInput: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\nOutput: []\n\n\u00a0\nConstraints:\n\nm == board.length\nn == board[i].length\n1 <= m, n <= 12\nboard[i][j] is a lowercase English letter.\n1 <= words.length <= 3 * 104\n1 <= words[i].length <= 10\nwords[i] consists of lowercase English letters.\nAll the strings of words are unique.\n\n",
    "starterCode": "class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "board = [['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['oath','pea','eat','rain']",
        "output": "['oath', 'eat']"
      },
      {
        "input": "board = [[\"a\",\"a\"]], words = [\"a\"]",
        "output": "['a']"
      },
      {
        "input": "board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]",
        "output": "['oath', 'eat']"
      },
      {
        "input": "abc\"],",
        "output": "Error: Solution.findWords() missing 2 required positional arguments: 'board' and 'words'"
      },
      {
        "input": "board = [[\"a\"],[\"a\"]], words = [\"a\"]",
        "output": "['a']"
      },
      {
        "input": "board = [['a','b'],['c','d']], words = ['abcb']",
        "output": "[]"
      },
      {
        "input": "board = [[\"a\",\"b\",\"c\"],[\"a\",\"e\",\"d\"],[\"a\",\"f\",\"g\"]], words = [\"abcdefg\",\"gfedcbaaa\",\"eaabcdgfa\",\"befadac\",\"gf",
        "output": "Error: Solution.findWords() missing 1 required positional argument: 'words'"
      },
      {
        "input": "board = [[\"a\",\"a\"]], words = [\"aaa\"]",
        "output": "[]"
      },
      {
        "input": "board = [[\"a\"]], words = [\"a\"]",
        "output": "['a']"
      },
      {
        "input": "board = [[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"],[\"g\",\"h\",\"i\"]], words = [\"abc\",\"cfi\",\"beh\",\"defi\",\"ghi\"]",
        "output": "['abc', 'beh', 'cfi', 'defi', 'ghi']"
      },
      {
        "input": "board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]",
        "output": "[]"
      },
      {
        "input": "board = [[\"a\",\"b\"],[\"c\",\"f\"]], words = [\"ab\",\"cf\",\"bf\",\"ca\"]",
        "output": "['ab', 'bf', 'ca', 'cf']"
      },
      {
        "input": "board = [[\"a\",\"b\",\"c\"],[\"a\",\"e\",\"d\"],[\"a\",\"f\",\"g\"]], words = [\"abcdefg\",\"gfedcba\",\"abcd\",\"dcba\"]",
        "output": "['abcd', 'abcdefg', 'dcba', 'gfedcba']"
      },
      {
        "input": "board = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]], words = [\"aaaaa\",\"aaaab\",\"aaaba\"]",
        "output": "['aaaaa']"
      },
      {
        "input": "board = [['a','b','c','d','e'],['f','g','h','i','j'],['k','l','m','n','o'],['p','q','r','s','t'],['u','v','w','x','y']], words = ['abcdefg','hijklmn','opqrstu','vwxyz','abgmvxz','abcdefghi','pqrstuvwy']",
        "output": "[]"
      },
      {
        "input": "board = [['a','b','c','e'],['s','f','c','s'],['a','d','e','e']], words = ['abcb', 'abcced', 'bcec']]",
        "output": "Error: Solution.findWords() missing 1 required positional argument: 'words'"
      },
      {
        "input": "board = [['a','a','a','a','a'],['a','a','a','a','a'],['a','a','a','a','a'],['a','a','a','a','a'],['a','a','a','a','a']], words = ['a','aa','aaa','aaaa','aaaaa','aaaaaa','aaaaaaaaaaaaaaaaaaaaaaaaa']",
        "output": "['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaa']"
      },
      {
        "input": "board = [['a','a','a','a'],['a','a','a','a'],['a','a','a','a'],['a','a','a','a']], words = ['aaaaaaaaaa', 'aaaaaaaaaab', 'aaaaaaaaaac', 'aaaaaaaaaad']",
        "output": "['aaaaaaaaaa']"
      },
      {
        "input": "board = [['a','b','c'],['a','b','c'],['a','b','c']], words = ['abc', 'bca', 'cab', 'cba', 'bac', 'acb', 'aabc', 'abca', 'bcab', 'cbac']",
        "output": "['abc', 'aabc', 'cba']"
      },
      {
        "input": "board = [['o','a','b','n'],['o','t','a','e'],['a','h','k','r'],['a','f','l','v']], words = ['oath','path','parent','enact']",
        "output": "['oath']"
      },
      {
        "input": "board = [['p','e','a','f'],['t','h','o','w'],['o','r','a','g'],['n','l','e','d']], words = ['pear', 'flow', 'tow', 'orange', 'lead']",
        "output": "[]"
      },
      {
        "input": "board = [['z','a','b','c'],['z','e','f','g'],['z','h','i','j'],['z','k','l','m']], words = ['zafe', 'zjih', 'zmkl', 'zabc', 'zefg', 'zihj', 'zkjg', 'zlif', 'zzzz']",
        "output": "['zabc', 'zzzz', 'zefg']"
      },
      {
        "input": "board = [['a','b','c'],['d','e','f'],['g','h','i']], words = ['abc','def','ghi','bfg','hce','dih']",
        "output": "['abc', 'def', 'ghi']"
      },
      {
        "input": "board = [['a','b','c','d','e'],['f','g','h','i','j'],['k','l','m','n','o'],['p','q','r','s','t'],['u','v','w','x','y']], words = ['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxy', 'ajgtw', 'bsmr']",
        "output": "['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxy']"
      },
      {
        "input": "board = [['a','b','c','d'],['e','f','g','h'],['i','j','k','l'],['m','n','o','p'],['q','r','s','t']], words = ['abcdefghijlkmnoprst','bcegikmnort','afgknprt']",
        "output": "[]"
      },
      {
        "input": "board = [['c','c','c','c'],['c','c','c','c'],['c','c','c','c'],['c','c','c','c']], words = ['cccc','cccccc','cccccccc']",
        "output": "['cccc', 'cccccc', 'cccccccc']"
      },
      {
        "input": "board = [['p','z','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['oath', 'pea', 'eat', 'rain', 'zeta', 'pani']",
        "output": "['eat']"
      },
      {
        "input": "board = [['x','y','x'],['y','x','y'],['x','y','x']], words = ['xyx', 'yxy', 'xyy', 'yxx']",
        "output": "['xyx', 'yxy']"
      },
      {
        "input": "board = [['a','b','c','d','e'],['f','g','h','i','j'],['k','l','m','n','o'],['p','q','r','s','t'],['u','v','w','x','y']], words = ['abcij', 'fghij', 'klmno', 'pqrs', 'uvwxy', 'pqmna']]",
        "output": "Error: Solution.findWords() missing 1 required positional argument: 'words'"
      },
      {
        "input": "board = [['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['oath', 'pea', 'eat', 'rain', 'oathk', 'vli', 'hek', 'tae', 'rat', 'iate', 'tier', 'neif', 'heat']",
        "output": "['oath', 'oathk', 'tae', 'eat']"
      },
      {
        "input": "board = [['z','y','x'],['w','v','u'],['t','s','r'],['q','p','o'],['n','m','l'],['k','j','i'],['h','g','f'],['e','d','c'],['b','a','a']], words = ['zyx', 'wvu', 'tsr', 'qpo', 'nml', 'kji', 'hgf', 'edc', 'baa', 'zyxwvutsrqponmlkjihgfedcba']",
        "output": "['zyx', 'wvu', 'tsr', 'qpo', 'nml', 'kji', 'hgf', 'edc', 'baa']"
      },
      {
        "input": "board = [['s','e','e','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['seen','seat','heat','pear','rate','feat']",
        "output": "['seen']"
      },
      {
        "input": "board = [['a','b','c','d','e'],['f','g','h','i','j'],['k','l','m','n','o'],['p','q','r','s','t'],['u','v','w','x','y']], words = ['cat','dog','bat','rat','mat']",
        "output": "[]"
      },
      {
        "input": "board = [['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['oath','pea','eat','rain','oate','hoaf']",
        "output": "['oath', 'oate', 'eat']"
      },
      {
        "input": "board = [['p','e','r','f'],['e','t','e','r'],['r','e','d','o'],['f','o','x','o']], words = ['perfect','robot','redo','fire','fore']",
        "output": "['redo']"
      },
      {
        "input": "board = [['s','e','e','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['seen', 'tear', 'heap', 'inter', 'neat', 'kite']",
        "output": "['seen', 'neat']"
      },
      {
        "input": "board = [['a','b','c','d'],['e','f','g','h'],['i','j','k','l'],['m','n','o','p']], words = ['abcf','bceg','cfil','ghjo','klon','mnop']",
        "output": "['mnop']"
      },
      {
        "input": "board = [['s','e','e','n'],['e','t','e','e'],['e','e','s','n'],['n','s','t','e']], words = ['seen', 'nees', 'tees', 'test', 'east']",
        "output": "['seen', 'nees', 'test']"
      },
      {
        "input": "board = [['a','b','c'],['d','e','f'],['g','h','i']], words = ['abc','bfg','chi','def','geh']",
        "output": "['abc', 'def']"
      },
      {
        "input": "board = [['a']], words = ['a']",
        "output": "['a']"
      },
      {
        "input": "board = [['x','y','x','y'],['y','x','y','x'],['x','y','x','y'],['y','x','y','x']], words = ['xyxy','yxyx','xyyx','yxyy','xxyx','yxx','xyx']",
        "output": "['xyx', 'xyxy', 'yxyx']"
      },
      {
        "input": "board = [['a','b','c','e'],['z','f','c','s'],['a','d','e','e']], words = ['abcced','see','abce']",
        "output": "['abce', 'abcced', 'see']"
      },
      {
        "input": "board = [['a','b','c'],['d','e','f'],['g','h','i'],['j','k','l'],['m','n','o']], words = ['abc','def','ghi','jkl','mno','adg','beh','cfi','amk','bnl','co']",
        "output": "['abc', 'adg', 'beh', 'cfi', 'def', 'ghi', 'jkl', 'mno']"
      },
      {
        "input": "board = [['o','a','b','n'],['o','t','a','e'],['a','h','k','r'],['a','f','l','v']], words = ['oath', 'pea', 'eat', 'rain', 'oathf', 'oat', 'ate']",
        "output": "['oat', 'oath', 'oathf', 'eat']"
      },
      {
        "input": "board = [['x','x','x','x'],['x','x','x','x'],['x','x','x','x'],['x','x','x','x']], words = ['xxxx','xxxy','xyxx','xxyx']",
        "output": "['xxxx']"
      },
      {
        "input": "board = [['a','b','c'],['a','e','d'],['a','f','g']], words = ['abcdefg', 'bed', 'fad', 'gfedcba']",
        "output": "['abcdefg', 'bed', 'gfedcba']"
      },
      {
        "input": "board = [['a','b','c','d'],['e','f','g','h'],['i','j','k','l'],['m','n','o','p']], words = ['abcdefgh', 'ponmlkjihgfedcba', 'abcd', 'efgh', 'ijkl', 'mnop', 'mnopijkl']",
        "output": "['abcd', 'efgh', 'ijkl', 'mnop']"
      },
      {
        "input": "board = [['a','b','c','d','e'],['f','g','h','i','j'],['k','l','m','n','o'],['p','q','r','s','t'],['u','v','w','x','y']], words = ['abcdefghij', 'klmnopqrstu', 'vwxyz', 'zutrqponmlk', 'ytxwvusrqponmlkjihgfedcba']",
        "output": "[]"
      },
      {
        "input": "board = [['a','z','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['zath','zeat','kait','lain']",
        "output": "[]"
      },
      {
        "input": "board = [['z','z','z','z'],['z','z','z','z'],['z','z','z','z'],['z','z','z','z']], words = ['zzz','zzzz','zzzzz']",
        "output": "['zzz', 'zzzz', 'zzzzz']"
      },
      {
        "input": "board = [['a','a','a','a'],['a','a','a','a'],['a','a','a','a'],['a','a','a','a']], words = ['aaaaaaaaaaaaa','aaaaaaaab']",
        "output": "['aaaaaaaaaaaaa']"
      },
      {
        "input": "board = [['a','a','a','a','a','a'],['a','a','a','a','a','a'],['a','a','a','a','a','a'],['a','a','a','a','a','a'],['a','a','a','a','a','a']], words = ['aaaaa','aaaaaa','aaaaaaaa']",
        "output": "['aaaaa', 'aaaaaa', 'aaaaaaaa']"
      },
      {
        "input": "board = [['x','y','z','w'],['v','u','t','s'],['r','q','p','o'],['n','m','l','k'],['j','i','h','g'],['f','e','d','c'],['b','a','9','8'],['7','6','5','4']], words = ['xyztuvw','vutsrqponmlkjihgfedcba','wvutsrqponmlkjihgfedcba','ponmlkjihgfedcba','lmkjihgfedcba','kjihgfedcba','jihgfedcba','ihgfedcba','hgfedcba','gfedcba','fedcba','edcba','dcba','cba','ba','a']",
        "output": "Error: list index out of range"
      },
      {
        "input": "board = [['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['oath', 'pea', 'eat', 'rain', 'kite', 'pear', 'lane']",
        "output": "['oath', 'eat']"
      },
      {
        "input": "board = [['a','b','c'],['a','e','d'],['a','f','g']], words = ['abcdefg', 'gfedcba', 'abcd', 'efg']",
        "output": "['abcd', 'abcdefg', 'efg', 'gfedcba']"
      },
      {
        "input": "board = [['a','b','c','e'],['s','f','c','s'],['a','d','e','e']], words = ['abcced','see','abcb']",
        "output": "['abcced', 'see']"
      },
      {
        "input": "board = [['x','y','z'],['x','y','z'],['x','y','z']], words = ['xyz','zyx','yy','zzz','xzy']",
        "output": "['xyz', 'yy', 'zzz', 'zyx']"
      },
      {
        "input": "board = [['a','b','c'],['d','e','f'],['g','h','i']], words = ['abc', 'bcd', 'cde', 'efg', 'fgh', 'ghi', 'adg', 'beh', 'cfi']",
        "output": "['abc', 'adg', 'beh', 'cfi', 'ghi']"
      },
      {
        "input": "board = [['a','b','c','d','e','f'],['g','h','i','j','k','l'],['m','n','o','p','q','r'],['s','t','u','v','w','x'],['y','z','a','b','c','d']], words = ['abcdefghij','mnopqrstuv','wxyzabcd']",
        "output": "[]"
      },
      {
        "input": "board = [['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['oath', 'oathk', 'oathkr', 'oathkrl', 'oathkrli', 'oathkrlii', 'oathkrliif']]",
        "output": "Error: Solution.findWords() missing 1 required positional argument: 'words'"
      },
      {
        "input": "board = [['a','a','a','a','a','a'],['a','a','a','a','a','a'],['a','a','a','a','a','a'],['a','a','a','a','a','a'],['a','a','a','a','a','a']], words = ['aaaaa','aaaaaa','aaaaaaaa','aaaaaaa']",
        "output": "['aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa']"
      },
      {
        "input": "board = [['z','z','z','z','z'],['z','z','z','z','z'],['z','z','z','z','z'],['z','z','z','z','z'],['z','z','z','z','z']], words = ['zzzzz','zzzzzz','zzzzzzz']",
        "output": "['zzzzz', 'zzzzzz', 'zzzzzzz']"
      },
      {
        "input": "board = [['a','b','c'],['d','e','f'],['g','h','i']], words = ['abc', 'def', 'ghi', 'bce', 'dfi', 'hcg', 'bdf', 'cei', 'adg']",
        "output": "['abc', 'adg', 'def', 'ghi']"
      },
      {
        "input": "board = [['x','y','z'],['w','v','u'],['t','s','r'],['q','p','o']], words = ['xyz', 'uvw', 'rst', 'qpo', 'xuw', 'ytv', 'zsr', 'wpo']",
        "output": "['xyz', 'uvw', 'rst', 'qpo']"
      },
      {
        "input": "board = [['a','a','a','a'],['a','a','a','a'],['a','a','a','a'],['a','a','a','a']], words = ['aaaaa', 'aaa', 'aa', 'a']",
        "output": "['a', 'aa', 'aaa', 'aaaaa']"
      },
      {
        "input": "board = [['w','o','r','l'],['o','n','k','n'],['r','l','d','t'],['d','t','a','e']], words = ['world','note','rate','tare']",
        "output": "['world']"
      },
      {
        "input": "board = [['x','y','x','y','x'],['y','x','y','x','y'],['x','y','x','y','x'],['y','x','y','x','y'],['x','y','x','y','x']], words = ['xyxyx','yxyxy','xyyxy']",
        "output": "['xyxyx', 'yxyxy']"
      },
      {
        "input": "board = [['a','a','a','a'],['a','a','a','a'],['a','a','a','a'],['a','a','a','a']], words = ['aaaaaaaaaa','aaaaaaaab','aaaaaaaac']",
        "output": "['aaaaaaaaaa']"
      },
      {
        "input": "board = [['c','a','t'],['a','t','c'],['t','c','a']], words = ['cat','act','tat','tac','att','tat','cta']",
        "output": "['cat', 'tat', 'tac', 'cta', 'act']"
      },
      {
        "input": "board = [['s','e','e','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['seen','seat','near','tree']",
        "output": "['seen']"
      },
      {
        "input": "board = [['a','a','a','a','a'],['a','a','a','a','a'],['a','a','a','a','a'],['a','a','a','a','a'],['a','a','a','a','a']], words = ['aaaaa', 'aaaaab', 'aaaaac', 'aaaaad']",
        "output": "['aaaaa']"
      },
      {
        "input": "board = [['p','e','a'],['a','o','t'],['t','h','t'],['a','i','p']], words = ['peacht','poth','tophat','peat']",
        "output": "['peat']"
      },
      {
        "input": "board = [['a','b','c'],['a','e','d'],['a','f','g']], words = ['abc','bce','cda','gfa']",
        "output": "['abc', 'gfa']"
      },
      {
        "input": "board = [['m','y','b','a','b','y'],['x','x','x','x','x','x'],['x','o','a','a','a','x'],['x','x','x','x','x','x'],['m','y','b','a','b','y']], words = ['baby','my','by','ma']",
        "output": "['my', 'baby', 'by']"
      },
      {
        "input": "board = [['a','a','a','a'],['a','a','a','a'],['a','a','a','a'],['a','a','a','a']], words = ['aaaa', 'aaa', 'aa', 'a', 'aaaaaaaaaaaaaaaa']",
        "output": "['a', 'aa', 'aaa', 'aaaa', 'aaaaaaaaaaaaaaaa']"
      },
      {
        "input": "board = [['a','b','c'],['b','c','d'],['c','d','e']], words = ['abc', 'bcd', 'cde', 'abcd', 'bcde', 'ab', 'cd', 'de']",
        "output": "['ab', 'abc', 'abcd', 'bcd', 'bcde', 'cd', 'cde', 'de']"
      },
      {
        "input": "board = [['x','y','z','w'],['x','y','z','w'],['x','y','z','w'],['x','y','z','w']], words = ['xyzz', 'xwyz', 'wxzy', 'zywx', 'zwxy', 'zyxw', 'yxwz', 'wyxz']",
        "output": "['xyzz']"
      },
      {
        "input": "board = [['z','z','z','z'],['z','z','z','z'],['z','z','z','z'],['z','z','z','z']], words = ['zzzzzzzzzz', 'zzzzzzzzzza', 'zzzzzzzzzzb', 'zzzzzzzzzzc']",
        "output": "['zzzzzzzzzz']"
      },
      {
        "input": "board = [['d','o','g'],['d','o','g'],['d','o','g']], words = ['dog', 'god', 'dogo', 'dogod', 'dogodu']",
        "output": "['dog', 'god']"
      },
      {
        "input": "board = [['p','q','r','s'],['t','u','v','w'],['x','y','z','a'],['b','c','d','e']], words = ['pqrs', 'tuvw', 'xyzab', 'pqru', 'rtxy', 'styz', 'uvwz']",
        "output": "['pqrs', 'tuvw']"
      },
      {
        "input": "board = [['a','a','a','a'],['a','a','a','a'],['a','a','a','a'],['a','a','a','a']], words = ['aaaaaaaaaaaaa','aaaabaaa','aaaaabaa']",
        "output": "['aaaaaaaaaaaaa']"
      },
      {
        "input": "board = [['h','o','l','a'],['o','n','k','n'],['r','l','d','t'],['d','t','a','e']], words = ['hola','note','rode','taen']",
        "output": "['hola']"
      },
      {
        "input": "board = [['x','y','z'],['u','v','w'],['p','q','r']], words = ['xyz', 'uvw', 'pqr', 'yzw', 'zwp', 'vyu']",
        "output": "['xyz', 'yzw', 'uvw', 'pqr']"
      },
      {
        "input": "board = [['a','b','c'],['d','e','f'],['g','h','i'],['j','k','l'],['m','n','o']], words = ['abc','def','ghi','jkl','mno','adgjm','behkn','cfilor','aeim','bfjn','cgko','ahko','bdil','cehn','aflo','bgkn','chim']",
        "output": "['abc', 'adgjm', 'behkn', 'def', 'ghi', 'jkl', 'mno']"
      },
      {
        "input": "board = [['m','a','r','t'],['a','t','e','n'],['r','e','t','a'],['t','a','n','e']], words = ['mart', 'rate', 'tane', 'tart', 'ten', 'mate', 'ment', 'taen', 'meta', 'atma']",
        "output": "['mart', 'mate', 'rate', 'tart', 'ten', 'tane', 'taen']"
      },
      {
        "input": "board = [['a','b','c'],['a','e','d'],['e','f','g']], words = ['abc','bce','fed','def']",
        "output": "['abc', 'def', 'fed']"
      },
      {
        "input": "board = [['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v'],['g','h','i','j']], words = ['oath','pea','eat','rain','ghij','gfedcba','nihao']",
        "output": "['oath', 'eat', 'ghij']"
      },
      {
        "input": "board = [['a','b','c'],['d','e','f'],['g','h','i']], words = ['abc', 'bfg', 'cfi', 'adh', 'beh', 'cei', 'aeg']",
        "output": "['abc', 'beh', 'cfi']"
      },
      {
        "input": "board = [['p','e','a'],['e','r','a'],['a','n','a'],['n','l','a']], words = ['pear','peal','pale','pan','lane','paler','panel','paren','pare','parel','parer']",
        "output": "[]"
      }
    ]
  },
  {
    "id": 2193,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Binary Indexed Tree",
      "Two Pointers",
      "String"
    ],
    "problemDescription": "You are given a string s consisting only of lowercase English letters.\nIn one move, you can select any two adjacent characters of s and swap them.\nReturn the minimum number of moves needed to make s a palindrome.\nNote that the input will be generated such that s can always be converted to a palindrome.\n\u00a0\nExample 1:\n\nInput: s = \"aabb\"\nOutput: 2\nExplanation:\nWe can obtain two palindromes from s, \"abba\" and \"baab\". \n- We can obtain \"abba\" from s in 2 moves: \"aabb\" -> \"abab\" -> \"abba\".\n- We can obtain \"baab\" from s in 2 moves: \"aabb\" -> \"abab\" -> \"baab\".\nThus, the minimum number of moves needed to make s a palindrome is 2.\n\nExample 2:\n\nInput: s = \"letelt\"\nOutput: 2\nExplanation:\nOne of the palindromes we can obtain from s in 2 moves is \"lettel\".\nOne of the ways we can obtain it is \"letelt\" -> \"letetl\" -> \"lettel\".\nOther palindromes such as \"tleelt\" can also be obtained in 2 moves.\nIt can be shown that it is not possible to obtain a palindrome in less than 2 moves.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 2000\ns consists only of lowercase English letters.\ns can be converted to a palindrome using a finite number of moves.\n\n",
    "starterCode": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"abcba\"",
        "output": "0"
      },
      {
        "input": "s = \"letelt\"",
        "output": "2"
      },
      {
        "input": "s = \"abcdcba\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdedcba\"",
        "output": "0"
      },
      {
        "input": "s = \"mamad\"",
        "output": "3"
      },
      {
        "input": "s = \"aabbc\"",
        "output": "4"
      },
      {
        "input": "s = \"aabb\"",
        "output": "2"
      },
      {
        "input": "s = \"racecar\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdefgfedcba\"",
        "output": "0"
      },
      {
        "input": "s = \"noon\"",
        "output": "0"
      },
      {
        "input": "s = \"deeee\"",
        "output": "2"
      },
      {
        "input": "s = \"nnnnn\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbcc\"",
        "output": "6"
      },
      {
        "input": "s = \"elvtoelvtoe\"",
        "output": "6"
      },
      {
        "input": "s = \"aabbab\"",
        "output": "3"
      },
      {
        "input": "s = \"asflkj\"",
        "output": "5"
      },
      {
        "input": "s = \"abca\"",
        "output": "1"
      },
      {
        "input": "s = \"abcdefghgfedcba\"",
        "output": "0"
      },
      {
        "input": "s = \"zzzyzzyzz\"",
        "output": "1"
      },
      {
        "input": "s = \"noonappa\"",
        "output": "8"
      },
      {
        "input": "s = \"abcdcbad\"",
        "output": "3"
      },
      {
        "input": "s = \"aabaaabbaaaaaabbbbaa\"",
        "output": "11"
      },
      {
        "input": "s = \"aabbaabbaabb\"",
        "output": "6"
      },
      {
        "input": "s = \"jlvaj\"",
        "output": "1"
      },
      {
        "input": "s = \"xyzyzyzyzyx\"",
        "output": "0"
      },
      {
        "input": "s = \"qpwoeirutoip\"",
        "output": "12"
      },
      {
        "input": "s = \"abbbacaba\"",
        "output": "3"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "6"
      },
      {
        "input": "s = \"noonnoon\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaaabbbb\"",
        "output": "10"
      },
      {
        "input": "s = \"mnopqponmlkjihgfedcbaaaabbbccc\"",
        "output": "161"
      },
      {
        "input": "s = \"aabbccddeeefffgggggffffeeeeddccbaaabb\"",
        "output": "37"
      },
      {
        "input": "s = \"lplllp\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbbbaaa\"",
        "output": "2"
      },
      {
        "input": "s = \"aaabbbcccdddcccbbaaa\"",
        "output": "5"
      },
      {
        "input": "s = \"mmnmm\"",
        "output": "0"
      },
      {
        "input": "s = \"mnvovnm\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeee\"",
        "output": "24"
      },
      {
        "input": "s = \"xyzzyx\"",
        "output": "0"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmmlkjhgfdsapoiuytrewq\"",
        "output": "9"
      },
      {
        "input": "s = \"aabbaabbaabbaabb\"",
        "output": "8"
      },
      {
        "input": "s = \"abcdddcb\"",
        "output": "4"
      },
      {
        "input": "s = \"abcdxyzzyxcba\"",
        "output": "3"
      },
      {
        "input": "s = \"aabbccddeeeeddcbaabbaa\"",
        "output": "22"
      },
      {
        "input": "s = \"aabbccddeeefffgggghhhggggfffeeeedddccbbaa\"",
        "output": "20"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffggggggg\"",
        "output": "204"
      },
      {
        "input": "s = \"ppqqrrssrqqpp\"",
        "output": "1"
      },
      {
        "input": "s = \"aaabbbb\"",
        "output": "6"
      },
      {
        "input": "s = \"abcdedcbaa\"",
        "output": "4"
      },
      {
        "input": "s = \"aabbccddeeffeecdccbbaa\"",
        "output": "7"
      },
      {
        "input": "s = \"aabbccddeeefffggggffffeeeeddccbaaabb\"",
        "output": "38"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdeedcba\"",
        "output": "0"
      },
      {
        "input": "s = \"abacabad\"",
        "output": "4"
      },
      {
        "input": "s = \"xyzyxzyxzyxzyx\"",
        "output": "2"
      },
      {
        "input": "s = \"aaabbbaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbabaa\"",
        "output": "1"
      },
      {
        "input": "s = \"abcbaabcba\"",
        "output": "0"
      },
      {
        "input": "s = \"zazbzazbzaz\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdeffedcba\"",
        "output": "0"
      },
      {
        "input": "s = \"abcbca\"",
        "output": "1"
      },
      {
        "input": "s = \"abcdefedcba\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccdd\"",
        "output": "12"
      },
      {
        "input": "s = \"level\"",
        "output": "0"
      },
      {
        "input": "s = \"abcabcba\"",
        "output": "1"
      },
      {
        "input": "s = \"aaaabbbb\"",
        "output": "8"
      },
      {
        "input": "s = \"madam\"",
        "output": "0"
      },
      {
        "input": "s = \"aabababaab\"",
        "output": "3"
      },
      {
        "input": "s = \"aabccbaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abacabadabacaba\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeeffffgggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwxxyyzz\"",
        "output": "1192"
      },
      {
        "input": "s = \"qwertewq\"",
        "output": "1"
      },
      {
        "input": "s = \"qwertytrewq\"",
        "output": "0"
      },
      {
        "input": "s = \"abcbad\"",
        "output": "3"
      },
      {
        "input": "s = \"abbaaccdaabb\"",
        "output": "5"
      },
      {
        "input": "s = \"aababbaaabbbbbaaaaa\"",
        "output": "8"
      },
      {
        "input": "s = \"aabaaa\"",
        "output": "1"
      },
      {
        "input": "s = \"aaabaaaabbaa\"",
        "output": "4"
      },
      {
        "input": "s = \"xyzyzyx\"",
        "output": "0"
      },
      {
        "input": "s = \"abccba\"",
        "output": "0"
      },
      {
        "input": "s = \"zxcvbnmlkjhgfdasqwertyuiopoiuytrewqasdfghjklmnbvcxz\"",
        "output": "1"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbbaaaaaaaaa\"",
        "output": "6"
      },
      {
        "input": "s = \"aabbccddeeeeddcbbbaa\"",
        "output": "10"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "650"
      },
      {
        "input": "s = \"aabbabba\"",
        "output": "2"
      },
      {
        "input": "s = \"mmnnllkkjjiihhggffeeddccbbaa\"",
        "output": "182"
      },
      {
        "input": "s = \"aaaaabbbaaaa\"",
        "output": "2"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "25"
      },
      {
        "input": "s = \"nnnmmmnnn\"",
        "output": "0"
      },
      {
        "input": "s = \"repaper\"",
        "output": "0"
      },
      {
        "input": "s = \"abacdfgdcaba\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeefffgggfhheeeddccbaa\"",
        "output": "22"
      },
      {
        "input": "s = \"abbaabba\"",
        "output": "0"
      },
      {
        "input": "s = \"zyxzyzyx\"",
        "output": "4"
      },
      {
        "input": "s = \"abcddcba\"",
        "output": "0"
      },
      {
        "input": "s = \"rotor\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghihgfedcba\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeeffggffeeddccbbaa\"",
        "output": "3"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcbaedcba\"",
        "output": "115"
      },
      {
        "input": "s = \"aabbccddeeeffffgggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxxyyyzzz\"",
        "output": "1311"
      },
      {
        "input": "s = \"levellol\"",
        "output": "6"
      },
      {
        "input": "s = \"mississippi\"",
        "output": "13"
      },
      {
        "input": "s = \"abcdeffgfedcba\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeedcbaa\"",
        "output": "6"
      }
    ]
  },
  {
    "id": 2736,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Binary Indexed Tree",
      "Segment Tree",
      "Array",
      "Binary Search",
      "Sorting",
      "Monotonic Stack"
    ],
    "problemDescription": "You are given two 0-indexed integer arrays nums1 and nums2, each of length n, and a 1-indexed 2D array queries where queries[i] = [xi, yi].\nFor the ith query, find the maximum value of nums1[j] + nums2[j] among all indices j (0 <= j < n), where nums1[j] >= xi and nums2[j] >= yi, or -1 if there is no j satisfying the constraints.\nReturn an array answer where answer[i] is the answer to the ith query.\n\u00a0\nExample 1:\n\nInput: nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]\nOutput: [6,10,7]\nExplanation: \nFor the 1st query xi = 4\u00a0and\u00a0yi = 1, we can select index\u00a0j = 0\u00a0since\u00a0nums1[j] >= 4\u00a0and\u00a0nums2[j] >= 1. The sum\u00a0nums1[j] + nums2[j]\u00a0is 6, and we can show that 6 is the maximum we can obtain.\n\nFor the 2nd query xi = 1\u00a0and\u00a0yi = 3, we can select index\u00a0j = 2\u00a0since\u00a0nums1[j] >= 1\u00a0and\u00a0nums2[j] >= 3. The sum\u00a0nums1[j] + nums2[j]\u00a0is 10, and we can show that 10 is the maximum we can obtain. \n\nFor the 3rd query xi = 2\u00a0and\u00a0yi = 5, we can select index\u00a0j = 3\u00a0since\u00a0nums1[j] >= 2\u00a0and\u00a0nums2[j] >= 5. The sum\u00a0nums1[j] + nums2[j]\u00a0is 7, and we can show that 7 is the maximum we can obtain.\n\nTherefore, we return\u00a0[6,10,7].\n\nExample 2:\n\nInput: nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]\nOutput: [9,9,9]\nExplanation: For this example, we can use index\u00a0j = 2\u00a0for all the queries since it satisfies the constraints for each query.\n\nExample 3:\n\nInput: nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]\nOutput: [-1]\nExplanation: There is one query in this example with xi = 3 and yi = 3. For every index, j, either nums1[j] < xi or nums2[j] < yi. Hence, there is no solution. \n\n\u00a0\nConstraints:\n\nnums1.length == nums2.length\u00a0\nn ==\u00a0nums1.length\u00a0\n1 <= n <= 105\n1 <= nums1[i], nums2[i] <= 109\u00a0\n1 <= queries.length <= 105\nqueries[i].length ==\u00a02\nxi\u00a0== queries[i][1]\nyi == queries[i][2]\n1 <= xi, yi <= 109\n\n",
    "starterCode": "class Solution:\n    def maximumSumQueries(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]",
        "output": "[6, 10, 7]"
      },
      {
        "input": "nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]",
        "output": "[-1]"
      },
      {
        "input": "nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]",
        "output": "[9, 9, 9]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9], nums2 = [9, 7, 5, 3, 1], queries = [[2, 8], [4, 6], [6, 4], [8, 2], [10, 0]]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [1000000000, 1000000000, 1000000000], nums2 = [1000000000, 1000000000, 1000000000], queries = [[1000000000, 1000000000], [999999999, 999999999]]",
        "output": "[2000000000, 2000000000]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1], queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]",
        "output": "[2, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [9, 18, 27, 36, 45], nums2 = [45, 36, 27, 18, 9], queries = [[15, 30], [18, 18], [21, 24], [24, 21], [30, 15]]",
        "output": "[54, 54, 54, 54, 54]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [10, 20, 30, 40, 50], queries = [[150, 15], [250, 25], [350, 35], [450, 45], [550, 55]]",
        "output": "[550, 550, 550, 550, -1]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [10, 20, 30, 40, 50], queries = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [15, 15], [25, 25], [35, 35], [45, 45], [55, 55]]",
        "output": "[100, 100, 100, 100, 100, 100, 100, 100, 100, -1]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]]",
        "output": "[20, 20, 20, 20, 20, 20, 20, 20, 20, 20]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], queries = [[150, 850], [250, 750], [350, 650], [450, 550], [550, 450], [650, 350], [750, 250], [850, 150], [950, 50], [1050, -50]]",
        "output": "[1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, -1]"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19], nums2 = [19,17,15,13,11,9,7,5,3,1], queries = [[2,18],[4,16],[6,14],[8,12],[10,10],[12,8],[14,6],[16,4],[18,2],[20,0]]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [100,90,80,70,60,50,40,30,20,10], queries = [[15,85],[25,75],[35,65],[45,55],[55,45],[65,35],[75,25],[85,15]]",
        "output": "[110, 110, 110, 110, 110, 110, 110, 110]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [50, 40, 30, 20, 10], queries = [[15, 35], [25, 25], [35, 15], [45, 5], [55, 55]]",
        "output": "[60, 60, 60, 60, -1]"
      },
      {
        "input": "nums1 = [500, 400, 300, 200, 100], nums2 = [100, 200, 300, 400, 500], queries = [[150, 350], [250, 250], [350, 150], [450, 50], [550, 500]]",
        "output": "[600, 600, 600, 600, -1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], queries = [[1,15],[2,14],[3,13],[4,12],[5,11],[6,10],[7,9],[8,8],[9,7],[10,6],[11,5],[12,4],[13,3],[14,2],[15,1]]",
        "output": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16]"
      },
      {
        "input": "nums1 = [1000000000,999999999,999999998,999999997,999999996], nums2 = [1,2,3,4,5], queries = [[999999999,1],[999999998,2],[999999997,3],[999999996,4],[999999995,5]]",
        "output": "[1000000001, 1000000001, 1000000001, 1000000001, 1000000001]"
      },
      {
        "input": "nums1 = [5,8,12,16,20], nums2 = [20,16,12,8,5], queries = [[10,10],[15,5],[5,20],[8,12]]",
        "output": "[24, 25, 25, 24]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], queries = [[1, 9], [2, 8], [3, 7], [4, 6], [5, 5], [6, 4], [7, 3], [8, 2], [9, 1], [10, 0]]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [19, 17, 15, 13, 11, 9, 7, 5, 3, 1], queries = [[2, 18], [18, 2], [10, 10], [5, 15], [15, 5]]",
        "output": "[-1, -1, -1, 20, 20]"
      },
      {
        "input": "nums1 = [9,8,7,6,5,4,3,2,1], nums2 = [1,2,3,4,5,6,7,8,9], queries = [[5,5],[4,6],[3,7],[2,8],[1,9],[10,0],[0,10]]",
        "output": "[10, 10, 10, 10, 10, -1, -1]"
      },
      {
        "input": "nums1 = [5, 5, 5, 5, 5], nums2 = [5, 5, 5, 5, 5], queries = [[5, 5], [6, 5], [5, 6], [4, 4]]",
        "output": "[10, -1, -1, 10]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,2,3,4,5,6,7,8,9,10], queries = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [1, 10, 100, 1000, 10000], nums2 = [10000, 1000, 100, 10, 1], queries = [[1, 10000], [10, 1000], [100, 100], [1000, 10], [10000, 1]]",
        "output": "[10001, 1010, 200, 1010, 10001]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], queries = [[5, 95], [15, 85], [25, 75], [35, 65], [45, 55], [55, 45], [65, 35], [75, 25], [85, 15], [95, 5], [105, 0]]",
        "output": "[110, 110, 110, 110, 110, 110, 110, 110, 110, 110, -1]"
      },
      {
        "input": "nums1 = [500000, 400000, 300000, 200000, 100000], nums2 = [1, 2, 3, 4, 5], queries = [[400000, 2], [500000, 5], [300000, 3], [100000, 1]]",
        "output": "[400002, -1, 300003, 500001]"
      },
      {
        "input": "nums1 = [10, 10, 10, 10, 10], nums2 = [10, 10, 10, 10, 10], queries = [[5, 5], [10, 10], [15, 15], [20, 20], [25, 25]]",
        "output": "[20, 20, -1, -1, -1]"
      },
      {
        "input": "nums1 = [1000000000,1000000000,1000000000], nums2 = [1000000000,1000000000,1000000000], queries = [[1000000000,1000000000],[500000000,500000000],[1000000000,999999999]]",
        "output": "[2000000000, 2000000000, 2000000000]"
      },
      {
        "input": "nums1 = [1000000000, 1000000000, 1000000000, 1000000000], nums2 = [1000000000, 1000000000, 1000000000, 1000000000], queries = [[1000000000, 1000000000], [1, 1]]",
        "output": "[2000000000, 2000000000]"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19], nums2 = [20,18,16,14,12,10,8,6,4,2], queries = [[1,20],[3,18],[5,16],[7,14],[9,12],[11,10],[13,8],[15,6],[17,4],[19,2]]",
        "output": "[21, 21, 21, 21, 21, 21, 21, 21, 21, 21]"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [5,5,5,5,5], queries = [[5,5],[5,4],[4,5],[4,4],[3,3]]",
        "output": "[10, 10, 10, 10, 10]"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [50,40,30,20,10], queries = [[15,35],[25,25],[35,15],[5,45],[45,5],[10,50],[50,10]]",
        "output": "[60, 60, 60, 60, 60, 60, 60]"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5,5], nums2 = [5,5,5,5,5,5,5,5,5,5], queries = [[5,5],[5,5],[5,5],[5,5],[5,5],[5,5],[5,5],[5,5],[5,5],[5,5]]",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "nums1 = [1000000000, 500000000, 250000000], nums2 = [250000000, 500000000, 1000000000], queries = [[500000000, 250000000], [250000000, 500000000], [750000000, 750000000]]",
        "output": "[1250000000, 1250000000, -1]"
      },
      {
        "input": "nums1 = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], nums2 = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5], queries = [[10, 90], [20, 80], [30, 70], [40, 60], [50, 50], [60, 40], [70, 30], [80, 20], [90, 10], [100, 0]]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], queries = [[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [6, 5], [7, 4], [8, 3], [9, 2], [10, 1]]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], nums2 = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5], queries = [[1, 48], [6, 43], [11, 38], [16, 33], [21, 28], [26, 23], [31, 18], [36, 13], [41, 8], [46, 3], [51, -2]]",
        "output": "[55, 55, 55, 55, 55, 55, 55, 55, 55, 55, -1]"
      },
      {
        "input": "nums1 = [5, 15, 25, 35, 45], nums2 = [45, 35, 25, 15, 5], queries = [[10, 40], [20, 30], [30, 20], [40, 10], [50, 0]]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [50, 40, 30, 20, 10], queries = [[10, 50], [30, 30], [25, 25], [45, 5], [55, 55]]",
        "output": "[60, 60, 60, 60, -1]"
      },
      {
        "input": "nums1 = [100,200,300,400,500,600,700,800,900,1000], nums2 = [1000,900,800,700,600,500,400,300,200,100], queries = [[500,500],[150,850],[950,50],[200,700],[400,600]]",
        "output": "[1100, 1100, 1100, 1100, 1100]"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [5,5,5,5,5], queries = [[5,5],[5,6],[6,5],[4,4],[6,6]]",
        "output": "[10, -1, -1, 10, -1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1], queries = [[1,10],[10,1],[5,5],[3,7],[7,3]]",
        "output": "[11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [1000000000, 999999999, 1, 2, 3], nums2 = [3, 4, 1000000000, 5, 6], queries = [[999999999, 2], [1, 3], [5, 4], [1000000000, 1000000000]]",
        "output": "[1000000003, 1000000003, 1000000003, -1]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [5, 15, 25, 35, 45], queries = [[10, 5], [25, 15], [30, 25], [45, 35], [55, 50]]",
        "output": "[95, 95, 95, 95, -1]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], nums2 = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], queries = [[2, 14], [4, 12], [6, 10], [8, 8], [10, 6], [12, 4], [14, 2], [16, 0]]",
        "output": "[16, 16, 16, 16, 16, 16, 16, -1]"
      },
      {
        "input": "nums1 = [1000000000,999999999,999999998,999999997,999999996], nums2 = [999999996,999999997,999999998,999999999,1000000000], queries = [[999999997,999999998],[999999998,999999999],[1000000000,1000000000],[999999995,999999995],[999999996,999999997]]",
        "output": "[1999999996, -1, -1, 1999999996, 1999999996]"
      },
      {
        "input": "nums1 = [1, 5, 7, 9, 11, 13], nums2 = [15, 13, 11, 9, 7, 5], queries = [[1, 15], [7, 9], [10, 10], [12, 12], [14, 14], [16, 16]]",
        "output": "[16, 18, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], queries = [[100, 1], [90, 2], [80, 3], [70, 4], [60, 5], [50, 6], [40, 7], [30, 8], [20, 9], [10, 10]]",
        "output": "[101, 92, 83, 74, 65, 56, 47, 38, 29, 20]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [500, 400, 300, 200, 100], queries = [[50, 450], [150, 350], [250, 250], [350, 150], [450, 50], [550, 0]]",
        "output": "[600, 600, 600, 600, 600, -1]"
      },
      {
        "input": "nums1 = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], nums2 = [30, 27, 24, 21, 18, 15, 12, 9, 6, 3], queries = [[3, 30], [6, 27], [9, 24], [12, 21], [15, 18], [18, 15], [21, 12], [24, 9], [27, 6], [30, 3]]",
        "output": "[33, 33, 33, 33, 33, 33, 33, 33, 33, 33]"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [100,90,80,70,60,50,40,30,20,10], queries = [[10,90],[20,80],[30,70],[40,60],[50,50],[60,40],[70,30],[80,20],[90,10],[100,0]]",
        "output": "[110, 110, 110, 110, 110, 110, 110, 110, 110, 110]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [50, 40, 30, 20, 10], queries = [[15, 35], [25, 25], [35, 15], [45, 5]]",
        "output": "[60, 60, 60, 60]"
      },
      {
        "input": "nums1 = [500,500,500,500,500,500,500,500,500,500], nums2 = [1,2,3,4,5,6,7,8,9,10], queries = [[500,1],[500,2],[500,3],[500,4],[500,5],[500,6],[500,7],[500,8],[500,9],[500,10]]",
        "output": "[510, 510, 510, 510, 510, 510, 510, 510, 510, 510]"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [50,40,30,20,10], queries = [[15,45],[25,25],[35,15],[5,50]]",
        "output": "[-1, 60, 60, 60]"
      },
      {
        "input": "nums1 = [5, 15, 25, 35, 45], nums2 = [45, 35, 25, 15, 5], queries = [[5, 45], [15, 35], [25, 25], [35, 15], [45, 5]]",
        "output": "[50, 50, 50, 50, 50]"
      },
      {
        "input": "nums1 = [10,9,8,7,6,5,4,3,2,1], nums2 = [1,2,3,4,5,6,7,8,9,10], queries = [[5,6],[6,5],[7,4],[8,3],[9,2],[10,1],[1,10]]",
        "output": "[11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], queries = [[5, 6], [6, 5], [4, 7], [7, 4], [3, 8], [8, 3], [2, 9], [9, 2], [1, 10], [10, 1]]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [500, 400, 300, 200, 100], nums2 = [100, 200, 300, 400, 500], queries = [[300, 200], [200, 300], [400, 100], [100, 400], [250, 250]]",
        "output": "[600, 600, 600, 600, 600]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], queries = [[5, 6], [6, 5], [7, 4], [4, 7], [8, 3], [3, 8], [9, 2], [2, 9], [10, 1], [1, 10]]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], queries = [[100, 1000], [200, 900], [300, 800], [400, 700], [500, 600], [600, 500], [700, 400], [800, 300], [900, 200], [1000, 100]]",
        "output": "[1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100]"
      },
      {
        "input": "nums1 = [1000, 2000, 3000, 4000, 5000], nums2 = [5000, 4000, 3000, 2000, 1000], queries = [[1500, 4500], [2500, 3500], [3500, 2500], [4500, 1500]]",
        "output": "[-1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], queries = [[10, 100], [20, 90], [30, 80], [40, 70], [50, 60], [60, 50], [70, 40], [80, 30], [90, 20], [100, 10]]",
        "output": "[110, 110, 110, 110, 110, 110, 110, 110, 110, 110]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], queries = [[5, 6], [6, 5], [1, 10], [10, 1], [3, 8], [8, 3], [2, 9], [9, 2]]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [5,3,8,6,2,7,4,9,1,10], nums2 = [10,1,9,2,8,3,7,4,6,5], queries = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[17, 17, 17, 17, 17, 17, 17, 17, -1, -1]"
      },
      {
        "input": "nums1 = [5, 8, 3, 9, 2], nums2 = [6, 4, 10, 1, 7], queries = [[3, 4], [6, 6], [2, 8], [9, 1], [7, 7], [5, 5]]",
        "output": "[13, -1, 13, 10, -1, 11]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], queries = [[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [6, 5], [7, 4], [8, 3], [9, 2], [10, 1], [11, 0], [0, 11]]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11, 11, 11, -1, -1]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [50, 40, 30, 20, 10], queries = [[15, 45], [25, 25], [35, 15], [45, 5], [55, 55]]",
        "output": "[-1, 60, 60, 60, -1]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [500, 400, 300, 200, 100], queries = [[150, 450], [250, 350], [350, 250], [450, 150], [550, 50]]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [10, 9, 8, 7, 6], queries = [[1, 11], [1, 10], [1, 9], [1, 8], [1, 7]]",
        "output": "[-1, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [50, 40, 30, 20, 10], queries = [[55, 5], [5, 55], [25, 25], [35, 15], [15, 35]]",
        "output": "[-1, -1, 60, 60, 60]"
      },
      {
        "input": "nums1 = [5, 5, 5, 5, 5], nums2 = [5, 5, 5, 5, 5], queries = [[5, 5], [6, 5], [5, 6], [4, 4], [6, 6]]",
        "output": "[10, -1, -1, 10, -1]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], queries = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]]",
        "output": "[2, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [19, 17, 15, 13, 11, 9, 7, 5, 3, 1], queries = [[10, 10], [20, 20], [1, 1], [19, 1], [1, 19]]",
        "output": "[-1, -1, 20, 20, 20]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1], queries = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[2, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [1, 10, 100, 1000, 10000], nums2 = [10000, 1000, 100, 10, 1], queries = [[5000, 5000], [500, 500], [50, 50], [5, 5], [1, 1]]",
        "output": "[-1, -1, 200, 1010, 10001]"
      },
      {
        "input": "nums1 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], queries = [[5, 5], [1, 10], [10, 1], [6, 4], [4, 6]]",
        "output": "[11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], queries = [[1, 1], [2, 2], [0, 0]]",
        "output": "[2, -1, 2]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], queries = [[10, 1], [20, 2], [30, 3], [40, 4], [50, 5], [60, 6], [70, 7], [80, 8], [90, 9], [100, 10]]",
        "output": "[110, 110, 110, 110, 110, 110, 110, 110, 110, 110]"
      }
    ]
  },
  {
    "id": 499,
    "difficulty": "Hard",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Array",
      "String",
      "Matrix",
      "Shortest Path",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "There is a ball in a maze with empty spaces (represented as 0) and walls (represented as 1). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a hole in this maze. The ball will drop into the hole if it rolls onto the hole.\nGiven the m x n maze, the ball's position ball and the hole's position hole, where ball = [ballrow, ballcol] and hole = [holerow, holecol], return a string instructions of all the instructions that the ball should follow to drop in the hole with the shortest distance possible. If there are multiple valid instructions, return the lexicographically minimum one. If the ball can't drop in the hole, return \"impossible\".\nIf there is a way for the ball to drop in the hole, the answer instructions should contain the characters 'u' (i.e., up), 'd' (i.e., down), 'l' (i.e., left), and 'r' (i.e., right).\nThe distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).\nYou may assume that the borders of the maze are all walls (see examples).\n\u00a0\nExample 1:\n\n\nInput: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [0,1]\nOutput: \"lul\"\nExplanation: There are two shortest ways for the ball to drop into the hole.\nThe first way is left -> up -> left, represented by \"lul\".\nThe second way is up -> left, represented by 'ul'.\nBoth ways have shortest distance 6, but the first way is lexicographically smaller because 'l' < 'u'. So the output is \"lul\".\n\nExample 2:\n\n\nInput: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [3,0]\nOutput: \"impossible\"\nExplanation: The ball cannot reach the hole.\n\nExample 3:\n\nInput: maze = [[0,0,0,0,0,0,0],[0,0,1,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,1]], ball = [0,4], hole = [3,5]\nOutput: \"dldr\"\n\n\u00a0\nConstraints:\n\nm == maze.length\nn == maze[i].length\n1 <= m, n <= 100\nmaze[i][j] is 0 or 1.\nball.length == 2\nhole.length == 2\n0 <= ballrow, holerow <= m\n0 <= ballcol, holecol <= n\nBoth the ball and the hole exist in an empty space, and they will not be in the same position initially.\nThe maze contains at least 2 empty spaces.\n\n",
    "starterCode": "class Solution:\n    def findShortestWay(self, maze: List[List[int]], ball: List[int], hole: List[int]) -> str:\n        ",
    "testCases": [
      {
        "input": "maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [0,1]",
        "output": "lul"
      },
      {
        "input": "maze = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], ball = [0,0], hole = [3,3]",
        "output": "dr"
      },
      {
        "input": "maze = [[0,0,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0]], ball = [0,4], hole = [1,3]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0],[0,0,1,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,1]], ball = [0,4], hole = [3,5]",
        "output": "dldr"
      },
      {
        "input": "maze = [[0,0,0,1,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[1,1,0,1,1,0],[0,0,0,0,0,0]], ball = [0,0], hole = [4,5]",
        "output": "drd"
      },
      {
        "input": "maze = [[0,0,0],[0,0,0],[0,0,0]], ball = [0,0], hole = [2,2]",
        "output": "dr"
      },
      {
        "input": "maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [3,0]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0],[0,1,0],[0,0,0]], ball = [0,0], hole = [2,2]",
        "output": "dr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0],[0,1,1,0,0,1,1,0],[0,0,0,0,1,0,0,0],[0,1,0,0,0,0,0,1],[0,1,0,1,1,1,0,1],[0,0,0,0,0,0,0,0]], ball = [5,0], hole = [0,7]",
        "output": "ur"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0]], ball = [0,2], hole = [7,7]",
        "output": "drdl"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,1,1,1,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,1,1,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0]], ball = [1,0], hole = [8,13]",
        "output": "dru"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,1,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,1,1,1],[0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0]], ball = [5,6], hole = [3,3]",
        "output": "dluru"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[1,1,1,0,1,1,1,0,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,0,1,1,1,1,1,0,1],[0,0,0,0,0,0,0,0,0,0],[1,0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0,1]], ball = [0,4], hole = [9,4]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,0,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,1,0,1,1,1,1],[0,0,0,1,0,0,0,0,0,0,0],[1,0,1,1,0,1,0,1,0,0,1],[0,0,0,0,0,0,0,0,0,0,0]], ball = [2,8], hole = [4,4]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0]], ball = [0,0], hole = [6,8]",
        "output": "dr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], ball = [5,5], hole = [4,4]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]], ball = [0,0], hole = [6,6]",
        "output": "dr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0],[0,1,0,1,0,1,0],[0,0,0,0,0,0,0],[1,0,1,0,1,0,1],[0,0,0,0,0,0,0],[0,1,0,1,0,1,0],[0,0,0,0,0,0,0]], ball = [1,1], hole = [5,5]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,1],[0,1,1,1,1,1,0],[0,1,0,0,0,1,0],[0,1,0,1,0,1,0],[0,1,0,1,0,1,0],[0,1,0,1,0,1,0],[0,0,0,1,0,0,0]], ball = [6,0], hole = [0,6]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,0,1,1,1,1,1,1,1,0],[0,0,1,0,0,0,0,0,1,0],[0,0,1,0,1,1,1,0,1,0],[0,0,1,0,1,0,1,0,1,0],[0,0,1,0,1,0,1,0,1,0],[0,0,1,0,1,0,1,0,1,0],[0,0,1,0,1,1,1,0,1,0],[0,0,1,0,0,0,0,0,1,0],[0,0,1,1,1,1,1,1,1,0]], ball = [5,5], hole = [1,1]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], ball = [0,2], hole = [9,8]",
        "output": "rdr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,0,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0]], ball = [0,0], hole = [6,9]",
        "output": "dr"
      },
      {
        "input": "maze = [[0,0,1,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0,0],[0,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,0],[0,0,1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,1,0,0],[0,0,1,0,0,0,0,0,0,0]], ball = [4,4], hole = [4,2]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,1,1,0,1,0,1,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0],[0,1,0,1,1,1,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0]], ball = [1,0], hole = [7,8]",
        "output": "drur"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0]], ball = [0,4], hole = [4,4]",
        "output": "ldr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,0],[0,1,0,0,0,0,0,0,0,1,0],[0,1,0,1,1,1,1,1,0,1,0],[0,1,0,0,0,0,0,0,0,1,0],[0,1,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0]], ball = [3,3], hole = [3,7]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,1,0,0,0],[0,1,0,0,0,0,0,1],[0,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0],[1,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0]], ball = [4,5], hole = [0,3]",
        "output": "lulur"
      },
      {
        "input": "maze = [[0,0,0,0,0,1,0,0,0,0],[0,1,0,1,0,1,0,1,0,0],[0,1,0,0,0,0,0,1,1,0],[0,1,1,1,1,1,0,0,0,0],[0,1,0,0,0,0,0,1,1,0],[0,1,0,1,1,1,0,1,0,0],[0,1,0,0,0,0,0,1,1,0],[0,1,1,1,1,1,0,1,0,0],[0,0,0,0,0,1,0,0,0,0]], ball = [4,4], hole = [2,6]",
        "output": "ru"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,0],[0,1,0,0,0,0,0,0,1,0],[0,1,0,1,1,1,1,0,1,0],[0,1,0,1,0,0,1,0,1,0],[0,1,0,1,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0,0]], ball = [0,8], hole = [6,1]",
        "output": "ldr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,1,1,1,1,0],[0,1,0,0,0,0,0,0,1,0],[0,1,0,1,1,1,1,0,1,0],[0,1,0,0,0,0,0,0,1,0],[0,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0]], ball = [0,5], hole = [9,5]",
        "output": "rdl"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,0],[0,1,0,0,0,0,0,0,0,0],[0,1,0,1,1,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0]], ball = [5,9], hole = [0,0]",
        "output": "ul"
      },
      {
        "input": "maze = [[0,0,0,0,0,1,0,0,0,0],[0,1,1,1,0,1,0,1,1,0],[0,0,0,0,0,1,0,0,0,0],[0,1,0,1,0,1,0,1,0,1],[0,1,0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0,0,0]], ball = [0,8], hole = [5,5]",
        "output": "ldl"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,0],[0,1,0,0,0,0,0,0,1,0],[0,1,0,1,1,1,1,0,1,0],[0,0,0,1,0,0,1,0,0,0],[0,1,1,1,0,1,1,1,1,0],[0,1,0,0,0,1,0,0,1,0],[0,1,1,1,0,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0]], ball = [0,8], hole = [8,1]",
        "output": "ldr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]], ball = [4,4], hole = [8,8]",
        "output": "dr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0,0],[0,1,0,1,0,1,0,1,0,0],[0,1,0,1,0,1,0,1,0,0],[0,0,0,1,0,1,0,0,0,0],[0,1,1,1,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0]], ball = [5,3], hole = [1,8]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,1,1,1,1,0],[0,1,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,1,1,1,0],[0,1,0,0,0,0,0,0,0,0],[0,0,0,1,0,1,1,1,1,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], ball = [1,0], hole = [7,9]",
        "output": "dru"
      },
      {
        "input": "maze = [[0,0,0,1,0,0,0,0,0],[0,1,0,1,0,1,0,1,0],[0,0,0,1,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0]], ball = [0,0], hole = [4,8]",
        "output": "dr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0],[1,1,1,0,1,1,1,0,1],[0,0,0,0,0,0,0,0,0],[1,1,1,0,1,1,1,0,1],[0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0]], ball = [0,4], hole = [8,4]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,1,0,0,0,0],[0,1,1,0,1,0,1,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0]], ball = [0,4], hole = [6,4]",
        "output": "ldr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0,0],[0,1,1,0,1,0,1,1,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0,1,0],[0,1,0,1,1,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]], ball = [5,5], hole = [0,0]",
        "output": "lu"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,1,0],[0,1,0,0,0,0,0,0,0,0,1,0],[0,1,0,1,1,1,1,1,1,0,1,0],[0,1,0,1,0,0,0,0,0,0,1,0],[0,1,0,1,0,1,1,1,0,1,1,0],[0,1,0,1,0,1,0,1,0,1,1,0],[0,1,0,1,0,1,0,1,0,1,1,0],[0,1,0,1,0,1,0,1,0,1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0]], ball = [8,5], hole = [0,5]",
        "output": "dlur"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,1,1,1,1,1,0],[0,0,0,0,0,0,0],[0,1,1,1,0,1,0],[0,0,0,0,0,0,0]], ball = [5,0], hole = [2,6]",
        "output": "ru"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0],[0,1,1,1,0,1,1,0],[0,1,0,0,0,0,0,0],[0,1,1,1,0,1,1,0],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1]], ball = [5,0], hole = [0,7]",
        "output": "ur"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0],[0,1,1,0,0,1,0,0],[0,0,0,0,0,0,0,0]], ball = [0,4], hole = [5,7]",
        "output": "rd"
      },
      {
        "input": "maze = [[0,0,0,0,1,0,0,0,0],[0,1,1,0,1,0,1,1,0],[0,0,0,0,0,0,0,0,0],[1,1,0,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0]], ball = [0,0], hole = [6,8]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,1,0,0,0,0],[0,1,0,1,0,0,0,1,0,1],[0,0,0,0,1,1,0,0,0,0],[0,1,0,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,1,0,0],[1,0,0,1,0,1,0,0,0,1],[0,0,0,0,0,0,0,0,0,0]], ball = [5,0], hole = [0,9]",
        "output": "rurdrur"
      },
      {
        "input": "maze = [[0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,0,1,0],[0,1,0,1,1,1,0,1,0],[0,1,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,0,1,0],[0,1,0,1,1,1,0,1,0],[0,1,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,0,0]], ball = [8,4], hole = [0,4]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], ball = [3,3], hole = [3,6]",
        "output": "r"
      },
      {
        "input": "maze = [[0,0,0,1,0,0,0,0],[0,1,0,1,0,1,0,0],[0,0,0,1,0,0,1,0],[0,1,0,0,0,1,0,1],[0,1,1,1,1,1,0,1],[0,0,0,0,0,0,0,0]], ball = [0,0], hole = [5,7]",
        "output": "dr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,1,0,0,1,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[0,1,0,0,1,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0]], ball = [4,4], hole = [4,4]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,1,0,0,0,0],[0,1,0,1,0,1,0,0],[0,0,0,0,0,0,1,0],[0,1,1,1,1,1,0,0],[0,0,0,0,0,0,0,0]], ball = [3,0], hole = [0,7]",
        "output": "dru"
      },
      {
        "input": "maze = [[0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0],[0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0],[0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0]], ball = [0,4], hole = [8,4]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0],[1,1,0,1,1,1,1,0,1],[0,0,0,0,0,0,0,0,0],[1,1,0,1,1,1,1,0,1],[0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1]], ball = [0,0], hole = [9,8]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,1],[0,1,0,1,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,1],[0,1,0,1,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0]], ball = [1,0], hole = [7,9]",
        "output": "dru"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,1,1,0,1,0,1,1,0,1],[0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0,1],[0,1,0,1,1,1,0,1,0,1],[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0,1],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0]], ball = [3,3], hole = [6,6]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,1,1,1,0,1,1,1,0],[0,1,0,0,0,0,0,1,0],[0,1,0,1,1,1,0,1,0],[0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0],[0,1,0,1,1,1,0,1,0],[0,1,0,0,0,0,0,1,0],[0,1,1,1,0,1,1,1,0]], ball = [0,0], hole = [8,8]",
        "output": "rd"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,1,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,0],[0,1,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0,0]], ball = [1,0], hole = [7,10]",
        "output": "dru"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,1,1,1,0,1,1,1,0],[0,0,0,0,0,0,0,0,0],[1,1,1,0,1,0,1,1,1],[0,0,0,0,0,0,0,0,0],[1,1,1,0,1,0,1,1,1],[0,0,0,0,0,0,0,0,0]], ball = [0,0], hole = [6,8]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,1,1,0,0,0,0,1,0],[0,1,0,0,0,1,0,1,0],[0,0,0,0,1,0,0,0,0],[0,1,1,1,0,1,1,1,0],[0,0,0,0,0,0,0,0,0],[0,1,1,0,0,0,0,1,0]], ball = [3,3], hole = [3,5]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0]], ball = [0,4], hole = [6,4]",
        "output": "d"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,1,0],[0,1,0,0,0,0,0,0,0,1,0],[0,1,0,1,1,1,1,1,0,1,0],[0,1,0,1,0,0,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0,0,0]], ball = [0,5], hole = [7,5]",
        "output": "ldr"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,1,1,1,1,0],[0,0,0,0,1,0,0,0,1,0],[0,0,0,0,1,0,0,0,1,0],[0,0,0,0,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0]], ball = [8,8], hole = [1,1]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,1,0,1,0,1],[0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,1,0,1,0,1],[0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,1,0,1,0,1],[0,0,0,0,0,0,0,0,0,0]], ball = [6,5], hole = [0,4]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,1,0],[0,1,0,0,0,0,0,0,1,0],[0,1,0,1,1,1,1,0,1,0],[0,1,0,1,0,0,1,0,1,0],[0,1,0,1,1,1,1,0,1,0],[0,1,0,0,0,0,0,0,1,0],[0,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0]], ball = [1,1], hole = [8,8]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0]], ball = [2,4], hole = [4,4]",
        "output": "impossible"
      },
      {
        "input": "maze = [[0,0,0,0,0,0,0,0,0],[0,1,1,1,0,1,1,1,0],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0]], ball = [2,4], hole = [4,4]",
        "output": "impossible"
      }
    ]
  },
  {
    "id": 1896,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise AND operator),'|' (bitwise OR operator),'(', and ')'.\n\nFor example, \"()1|1\" and \"(1)&()\" are not valid while \"1\", \"(((1))|(0))\", and \"1|(0&(1))\" are valid expressions.\n\nReturn the minimum cost to change the final value of the expression.\n\nFor example, if expression = \"1|1|(0&0)&1\", its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. We want to apply operations so that the new expression evaluates to 0.\n\nThe cost of changing the final value of an expression is the number of operations performed on the expression. The types of operations are described as follows:\n\nTurn a '1' into a '0'.\nTurn a '0' into a '1'.\nTurn a '&' into a '|'.\nTurn a '|' into a '&'.\n\nNote: '&' does not take precedence over '|' in the order of calculation. Evaluate parentheses first, then in left-to-right order.\n\u00a0\nExample 1:\n\nInput: expression = \"1&(0|1)\"\nOutput: 1\nExplanation: We can turn \"1&(0|1)\" into \"1&(0&1)\" by changing the '|' to a '&' using 1 operation.\nThe new expression evaluates to 0. \n\nExample 2:\n\nInput: expression = \"(0&0)&(0&0&0)\"\nOutput: 3\nExplanation: We can turn \"(0&0)&(0&0&0)\" into \"(0|1)|(0&0&0)\" using 3 operations.\nThe new expression evaluates to 1.\n\nExample 3:\n\nInput: expression = \"(0|(1|0&1))\"\nOutput: 1\nExplanation: We can turn \"(0|(1|0&1))\" into \"(0|(0|0&1))\" using 1 operation.\nThe new expression evaluates to 0.\n\u00a0\nConstraints:\n\n1 <= expression.length <= 105\nexpression\u00a0only contains\u00a0'1','0','&','|','(', and\u00a0')'\nAll parentheses\u00a0are properly matched.\nThere will be no empty parentheses (i.e:\u00a0\"()\"\u00a0is not a substring of\u00a0expression).\n\n",
    "starterCode": "class Solution:\n    def minOperationsToFlip(self, expression: str) -> int:\n        ",
    "testCases": [
      {
        "input": "expression = \"(1&(0|1&(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0&1&1)|(0|1)\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&1)|(0&0)\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&((0&0)|(1|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"1&(1&(1&(1&1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1|1)&(0|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"1&(0|1)\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&1)|(0&0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&1&1)|(1|1|1)\"",
        "output": "2"
      },
      {
        "input": "expression = \"1|1|0&1\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0&0)|((1&1)|(0&1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&((1&1)&(1&1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&0)|(1&1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0&0&0)|(0|0|0)\"",
        "output": "1"
      },
      {
        "input": "expression = \"0|1&(1|0)&1\"",
        "output": "1"
      },
      {
        "input": "expression = \"1|1|(0&0)&1\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|1)&1)|(0&0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&((0&1)|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0|(1|0&1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0|((0|0)|(0|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&0)|(1&1)\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0&0)&(0&0&0)\"",
        "output": "3"
      },
      {
        "input": "expression = \"(0|(0|(0|(0|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1|0)&(0|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|0|0)&(1&1)\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&0)|(1|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&(1&(1&(1&1))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&1&1)|(0|0|0)\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|(0&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0&1)|((1|0)&(0|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"0|(0|(0|(0|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&(0|(1&0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(1|0))&(0|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0&(((0|1)&(1|0))|((1&0)|(0|1))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&(((1|0)|(0&1))&(1&1)))|((1|0)|(0|1)))&(1|0)\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&(1|0))&(0&(1|0))&(0&(1|0)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(0|((1&0)|(0|1)&((1|0)&(1|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&((1|0)|(0|1)))&((0&0)|(1&(1&(1&1)))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0|1)&(1|(0|1&0))&(1|(0&(1|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&((0|1)&(0|1)))|((0&(1|0))&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|0)|(1|1))&((0|0)|(1|1))&((0|0)|(1|1))&((0|0)|(1|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1|0)|(0&1))&((0|1)|(0&1))&((1|0)|(0&1))&((0|1)|(0&1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&0)&(0&0)&(1|1)&((0|0)|(1|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&0)|(0|1)&((1|0)&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1|0)&(1&0)|(0|1)&(1|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1|0)|(0&1)&(0|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|(((1|0)&(0|1)))&(((0&1)|(1&1))&(1|0)))|(0|1)\"",
        "output": "2"
      },
      {
        "input": "expression = \"((0&(1|0)&(1|0))|(0&(0|1)&(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|1)&(0|1))&((1&0)|(1&0))&((0|1)&(0|1))&((1&0)|(1&0)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((1|1)|(0|0))&(1&(1&(1&1))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&0)|((0&1)|(1|((1&0)|(0|1)))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0&(1|0))&(1&((0&1)|(1|0))))|((1&0)|(0&((1&0)|(0&1)))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1|0)&(0|1))&((1|0)&(0|1)))|(1&(0|((1&1)|(0&0))))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((0|1)&(1|0))|((1&(0|1))|(0&1)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(0|((1&0)|(0|1)&((1|0)|(0|1)&(1|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|1)|(1&0))&((0&1)|(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&0)|(1&0)|(0|1)&(0|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|(((1|0)&(1|0))|((0&1)|(0&1))))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(1&(0|((1&1)|(0|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&(((0|1)&(0|1))&((1|0)|(0|1)&(1|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&((0&1)|(1|0)))|((1&((0&1)|(1|0)))&(1&(0&(1|0)))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&0)|(0|1)&((1|0)|(0|1)&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|(0&(1|0))|(0&1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0|((1&1)|(0&0)))&(1&(0|((1&1)|(0&0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|(((0&(1|0))|(1&0))&((1|0)&(0|1))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1|0)&(0|1))|((0&1)|(1|0))|((1|0)&(0|1))|((0&1)|(1|0)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((1&0)|(0&1))&((0&(1|0))|(1&((0&1)|(1|0)))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1&0)|(0|1))&((1|0)|(0&1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&0)|(1&1))&(1|0)\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1|1)|(0&0))&((1&1)|(0|0))|(1|0))\"",
        "output": "2"
      },
      {
        "input": "expression = \"((1|((0&0)|(1&1)))&(1|0))|((0|1)&(1&1))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((1|0)&1)|(0&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&1)|(1&(0|1)))&((1&0)|(1|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&((0|1)&(0|1))&(0|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0|1)|(1|0)&(0|1)&(0|1))&((0|1)|(0|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&((0&1)|(0&(1|0))&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|((1|0)&(0|1)))|(((0&1)|(1&1))&(1|0))\"",
        "output": "2"
      },
      {
        "input": "expression = \"((0&((1|0)&(0|1)))|((0&(1|0))&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|1)&(0|1))&((1|0)|(0|1)&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&(((0&0)|(1|1))&(1&((0&0)|(1|1)))))|((1&(0|((1&1)|(0&0))))&(1|0))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((1&1)&(0|0))|(1|0)&((1&0)|(0|1))&(1|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1|(0&(1&0)))&(0|(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|1))|(0&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|1)|(0&1))&(1|(0&0)&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|((0|1)&(0&1))|(1&0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&0)|(1&(0|1))|(0&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0|(1&0))&(((1|0)&(0|1))|((0&1)|(1|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&(((0|1)|(1&0))&(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1&(0|1))&((1&0)|(0&1)))|((0&(1|0))&(1&((0&1)|(1|0)))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0|1)|((1&(0|1))&(0|1)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"((0&1)|(0&1)|(0&1)|(0&1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0|(1&0)|(0|1)&(1|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|((1|0)&(1|0))))&((1&(0|((1|0)&(1|0))))&((1&(0|((1|0)&(1|0))))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|((0&0)|(1&(0|1))))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(0|((1&((0|1)|(1|0)))&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0|((1&0)|(0|1)))&(((1|0)&(0|1))|((0&1)|(1|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&((0|0)|(1&0))&(0&(1|0))&(0|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1|1)|(0|0))&(1&0))|(0|1)\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&(0|((0|0)&(0|0))))|((1|0)&(1&1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|1))&(1|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|((1|0)|(0|1))&(0&1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&1)|(0&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0|((1&0)|(0|1)&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|((0&(1|0))&(1&(0|1&0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&(1|1))|((1&0)|(0&1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&(((1|0)|(0&1))&(1&1)))|((0|1)&(1&1))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((0|1)&(0|1))&((1|0)&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|1)&(1|0))&((1&0)|(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&((0&1)|(1|0)))&((1|0)|(0&(1|0))))|((1&(0|((1&1)|(0&0))))&(1|0))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((0&0)|(1&(0|1)))&((1|0)|(0&((0&1)|(1|0)))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|1)&(1|0))|((1&0)|(0&1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&((1|0)|(0|1))&(0&(1|0))&(0|1)&((0|0)&(1|1)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"((1&(1&(1&0)))|((0|1)|(0&1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1|0)&(0|1)|(0&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0|((1|0)&(0|1))&(1|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|((1&0)|(0&1))))&((0&(1|0))|(1&(0|1))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|1))&(1&(0|1))&(1&(0|1))&(1&(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|((0&(1|0))|(1&(0|1))))\"",
        "output": "2"
      },
      {
        "input": "expression = \"((1|((0&(1&0))|(0|1)))&(0&((0&(1|0))|(1&(0|1)))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0&((1&0)|(1|(0&1&0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|((0&0)&(0|0))|(0|(1&1)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((1|1)&(0&0))|(1&0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|1)&(0|1))&(1|0)&(1|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0|0)&(0|0)&(1|1)|(0|0)&(0|0))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(0&(((1|0)|(0&1))&(1&1)))|((1|0)|(0|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&(0|1))|(0&(0|1))|(0&(0|1))|(0&(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&0)|(0|1)&(1|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&1)|(1&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(1&1))|((0|0)|(0&0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1|(0&0)&(1|0))|(0&(0|1)&(0|1))&(0&(0|1)&(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1&0)|(0&1))&((1&(0|1))|(0&1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0|((1&(0|1))|(0&(1|0))))&(1&((0&1)|(1|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|0)&(0|0))&((0|0)|(0|0)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(1&((1&((0&0)|(1|1)))|((1|(0|1))&(0&0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&((1|0)|(0|1)))|((1&(0|1))&(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0&(1|0))|(1&0))&((1|0)&(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1&(0|1))|(0&(1|0)))|((1&(0|1))&(0|1)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"((0&(0&0))|((1|1)&(1|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|1))|(0&(0|1)&(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&((0|1)|(0|1))&(0&((1|0)|(1|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1&(0|1))|(0&1))&(1&((0|1)|(0&(1|0)))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1|0)&(0|1))|(0&(1|0))&(1&(0|1&0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|1))|(1&0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&(((0|1)&(0|1))&((1|0)&(1|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&(0|1&(0|1&(1|0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1|0)|(0&1))&((1|0)|(0&1))&((1|0)|(0&1))&((1|0)|(0&1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((((0|0)|(1&1))&((0|1)&(1|0)))|((0&1)|(1|0)))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(1|((0&0)|(1&0))&(0&(1|0))&(0|1)&((1|0)|(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|1)&(1|0))&(0|1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1|0)|(0&1))&((1&0)|(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|(((0|1)&(1|0))|(0&(1|0))))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(1|(((1|0)&(0|1))|(1&(0&1))))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((1&0)|(1|0))&((1&1)|(0|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0|1)|((0&1)&(1|0))&(1&(0|((1&1)|(0&0)))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|(((0&0)&(0|0))|((1|1)|(1&1))))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(0&(((1|0)|(0|1))&(0|1))&(1|0))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0|0)|(1&1))&(((1|0)&(0|1))|(1&1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|1))|((0&1)|((1|0)&(0|1))))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((1&1)&(0|0))|((0|0)|(1&1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((1|0)|(1|0))&((0&1)|(0&1))&((0&1)|(0&1))&((1|0)|(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|1))&((0|1)|(1&0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|1))&((0|1)&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1&((0|1)&(0|1))|(1&0)&(0&1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(1|((0&(1|0))|((0|1)&(1&0))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((1&(0|1))|((0|1)|(1&(0|1&0))))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(((1&(0&(1|0)))|((0&(1|0))|(0&1)))&((0&1)|(1&(0&1))))\"",
        "output": "2"
      },
      {
        "input": "expression = \"(1&(1|(0&0)&(1|0))|(0&(0|1)&(0|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(0|((((1|0)&(0|1))|((1&0)|(0|1)))|((1&(0&0))|(0|1))))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0&0)|(1|1))&((0|1)|(1|0))&((1&0)|(0|1))&((0&0)|(1|1)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&(0|1))|((1|0)&1))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0|1)&(1|0))|(0&(1|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"(((0&1)|(1&0))|((1&1)&(0|0)))\"",
        "output": "1"
      },
      {
        "input": "expression = \"((0&(1|0))|((0&1)|(1&1)))&(1|0)\"",
        "output": "1"
      }
    ]
  },
  {
    "id": 2763,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Ordered Set"
    ],
    "problemDescription": "The imbalance number of a 0-indexed integer array arr of length n is defined as the number of indices in sarr = sorted(arr) such that:\n\n0 <= i < n - 1, and\nsarr[i+1] - sarr[i] > 1\n\nHere, sorted(arr) is the function that returns the sorted version of arr.\nGiven a 0-indexed integer array nums, return the sum of imbalance numbers of all its subarrays.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nExample 1:\n\nInput: nums = [2,3,1,4]\nOutput: 3\nExplanation: There are 3 subarrays with non-zero imbalance numbers:\n- Subarray [3, 1] with an imbalance number of 1.\n- Subarray [3, 1, 4] with an imbalance number of 1.\n- Subarray [1, 4] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3. \n\nExample 2:\n\nInput: nums = [1,3,3,3,5]\nOutput: 8\nExplanation: There are 7 subarrays with non-zero imbalance numbers:\n- Subarray [1, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3, 5] with an imbalance number of 2. \n- Subarray [3, 3, 3, 5] with an imbalance number of 1. \n- Subarray [3, 3, 5] with an imbalance number of 1.\n- Subarray [3, 5] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8. \n\u00a0\nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= nums.length\n\n",
    "starterCode": "class Solution:\n    def sumImbalanceNumbers(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [10,1,2,3,4]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [2,3,1,4]",
        "output": "3"
      },
      {
        "input": "nums = [10,1,2,3,4,5,6,7,8,9]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "nums = [1,3,3,3,5]",
        "output": "8"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6]",
        "output": "36"
      },
      {
        "input": "nums = [2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15]",
        "output": "105"
      },
      {
        "input": "nums = [5,1,9,3,7,2,8,4,6,10]",
        "output": "73"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10, 11, 12, 13, 14, 15]",
        "output": "166"
      },
      {
        "input": "nums = [3,3,3,3,3,2,2,2,2,1,1,1,1,4,4,4,4,5,5,5,5]",
        "output": "64"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,5,4,3,2,1,6,7,8,9,10]",
        "output": "46"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [1, 5, 2, 6, 3, 7, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "84"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "0"
      },
      {
        "input": "nums = [5, 1, 9, 3, 7, 2, 8, 4, 6, 10, 15, 11, 14, 12, 13]",
        "output": "204"
      },
      {
        "input": "nums = [500, 501, 499, 502, 498, 503, 497, 504, 496, 505, 495, 506, 494, 507, 493, 508, 492, 509, 491, 510]",
        "output": "171"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [5,3,8,6,2,7,4,1,9,10]",
        "output": "69"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6]",
        "output": "262"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "72"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10, 1, 3, 5, 7, 9, 2, 4, 6, 8, 10]",
        "output": "262"
      },
      {
        "input": "nums = [3, 1, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3]",
        "output": "6"
      },
      {
        "input": "nums = [5,3,2,4,1,6,7,8,9,10,11,12]",
        "output": "47"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "0"
      },
      {
        "input": "nums = [5, 1, 3, 2, 4, 6, 7, 8, 9, 10]",
        "output": "31"
      },
      {
        "input": "nums = [10,1,9,2,8,3,7,4,6,5,15,11,14,12,13]",
        "output": "118"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15]",
        "output": "13"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]",
        "output": "30"
      },
      {
        "input": "nums = [2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15,18,17,20,19]",
        "output": "171"
      },
      {
        "input": "nums = [1,2,1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10]",
        "output": "8"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "0"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 1, 9]",
        "output": "54"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "560"
      },
      {
        "input": "nums = [50,1,51,2,52,3,53,4,54,5,55,6,56,7,57,8,58,9,59,10,60,11,61,12,62,13,63,14,64,15]",
        "output": "435"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15]",
        "output": "68"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91,90]",
        "output": "0"
      },
      {
        "input": "nums = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,15,25,30,5,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "1330"
      },
      {
        "input": "nums = [100,1,99,2,98,3,97,4,96,5,95,6,94,7,93,8,92,9,91,10]",
        "output": "190"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5]",
        "output": "80"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2]",
        "output": "6"
      },
      {
        "input": "nums = [100,1,2,101,3,102,4,103,5,104,6,105,7,106,8,107,9,108,10,109]",
        "output": "189"
      },
      {
        "input": "nums = [100, 1, 99, 2, 98, 3, 97, 4, 96, 5, 95, 6, 94, 7, 93]",
        "output": "105"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "36"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24]",
        "output": "265"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "0"
      },
      {
        "input": "nums = [7, 3, 5, 9, 1, 4, 6, 8, 2, 10]",
        "output": "91"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "36"
      },
      {
        "input": "nums = [3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1]",
        "output": "7"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "15"
      },
      {
        "input": "nums = [3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,19,24,23,22,27,26,25,29,28]",
        "output": "461"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "0"
      },
      {
        "input": "nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96, 6, 95, 7, 94, 8, 93, 9, 92]",
        "output": "153"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "72"
      },
      {
        "input": "nums = [2,1,3,2,1,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1]",
        "output": "36"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14]",
        "output": "85"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,2,1,3,2,1,4,3,2,1,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "36"
      },
      {
        "input": "nums = [1,2,1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11]",
        "output": "9"
      },
      {
        "input": "nums = [29,27,25,23,21,19,17,15,13,11,9,7,5,3,1]",
        "output": "560"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,20]",
        "output": "154"
      },
      {
        "input": "nums = [1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1]",
        "output": "10"
      },
      {
        "input": "nums = [1, 3, 2, 6, 5, 4, 10, 9, 8, 15, 14, 13, 12, 11]",
        "output": "102"
      },
      {
        "input": "nums = [1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "nums = [20,18,16,14,12,10,8,6,4,2,19,17,15,13,11,9,7,5,3,1]",
        "output": "846"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "36"
      },
      {
        "input": "nums = [5, 1, 3, 2, 4, 6, 7, 8, 10, 9]",
        "output": "39"
      },
      {
        "input": "nums = [1,100,2,99,3,98,4,97,5,96,6,95,7,94,8,93,9,92,10,91,11,90,12,89,13,88]",
        "output": "325"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]",
        "output": "0"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10]",
        "output": "36"
      },
      {
        "input": "nums = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]",
        "output": "18"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "0"
      },
      {
        "input": "nums = [5, 1, 4, 2, 8, 6, 3, 7, 9]",
        "output": "49"
      },
      {
        "input": "nums = [1, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8]",
        "output": "7"
      },
      {
        "input": "nums = [1,5,2,6,3,7,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "134"
      },
      {
        "input": "nums = [7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "0"
      },
      {
        "input": "nums = [2,3,1,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,21,20,23,22,25,24,27,26,29,28]",
        "output": "391"
      },
      {
        "input": "nums = [100,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "50"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [10, 1, 20, 2, 30, 3, 40, 4, 50, 5, 60, 6, 70, 7, 80, 8, 90, 9]",
        "output": "560"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "560"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 3, 3, 3, 3, 3]",
        "output": "250"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "0"
      },
      {
        "input": "nums = [1,3,2]",
        "output": "1"
      },
      {
        "input": "nums = [1, 3, 3, 3, 5]",
        "output": "8"
      },
      {
        "input": "nums = [500,500,500,500,500,500,500,500,500,500]",
        "output": "0"
      },
      {
        "input": "nums = [1,5,3,4,2]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50]",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 3, 5, 6, 8, 9, 10]",
        "output": "30"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 4, 5]",
        "output": "0"
      },
      {
        "input": "nums = [1000, 999, 998, 997, 996]",
        "output": "0"
      },
      {
        "input": "nums = [3,1,2]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "nums = [3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [3, 1, 2, 4, 5]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [10, 1, 2, 9, 3, 8, 4, 7, 5, 6]",
        "output": "35"
      },
      {
        "input": "nums = [7,9,5,8,2,6,3,4,1]",
        "output": "46"
      },
      {
        "input": "nums = [100,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "0"
      },
      {
        "input": "nums = [1]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5]",
        "output": "0"
      },
      {
        "input": "nums = [10,9,8,7,6]",
        "output": "0"
      },
      {
        "input": "nums = [3,2,1,4,5,6,7,8,9,10]",
        "output": "14"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4]",
        "output": "0"
      },
      {
        "input": "nums = [2]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "20"
      },
      {
        "input": "nums = [7,9,7,8,7]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,2,3,4]",
        "output": "0"
      },
      {
        "input": "nums = [10,1,2,9,3,8,4,7,5,6]",
        "output": "35"
      },
      {
        "input": "nums = [5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [2,1]",
        "output": "0"
      },
      {
        "input": "nums = [7]",
        "output": "0"
      },
      {
        "input": "nums = [3, 2, 1, 2, 3]",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 1, 4]",
        "output": "3"
      },
      {
        "input": "nums = [1,1000]",
        "output": "1"
      },
      {
        "input": "nums = [3, 1, 2, 4, 3]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,5]",
        "output": "0"
      },
      {
        "input": "nums = [2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [3,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [999,1000]",
        "output": "0"
      },
      {
        "input": "nums = [7, 9, 5, 8, 6]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5]",
        "output": "0"
      },
      {
        "input": "nums = [3,2,1,4,5]",
        "output": "4"
      },
      {
        "input": "nums = [7, 9, 5, 8, 6, 4]",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3]",
        "output": "0"
      },
      {
        "input": "nums = [4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [7,9,9,7,10,8]",
        "output": "11"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "0"
      },
      {
        "input": "nums = [1,2]",
        "output": "0"
      },
      {
        "input": "nums = [1000,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5]",
        "output": "0"
      },
      {
        "input": "nums = [1,4,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [1, 2, 3]",
        "output": "0"
      },
      {
        "input": "nums = [2,1,3]",
        "output": "1"
      },
      {
        "input": "nums = [5,4,3,2,1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [3, 5, 7, 9, 11]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 5]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,1,2]",
        "output": "0"
      },
      {
        "input": "nums = [6,5,4,3,2,1,1,2,3,4]",
        "output": "0"
      },
      {
        "input": "nums = [1,5,2,4,3]",
        "output": "6"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [7,8,9,1,2,3,4,5,6]",
        "output": "17"
      },
      {
        "input": "nums = [1, 2]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 5, 6, 8, 9]",
        "output": "22"
      },
      {
        "input": "nums = [3,3,2,2,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [3, 3, 2, 2, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4]",
        "output": "0"
      }
    ]
  },
  {
    "id": 1397,
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming",
      "String Matching"
    ],
    "problemDescription": "Given the strings s1 and s2 of size n and the string evil, return the number of good strings.\nA good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. Since the answer can be a huge number, return this modulo 109 + 7.\n\u00a0\nExample 1:\n\nInput: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"\nOutput: 51 \nExplanation: There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\".\u00a0\n\nExample 2:\n\nInput: n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"\nOutput: 0 \nExplanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string.\n\nExample 3:\n\nInput: n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"\nOutput: 2\n\n\u00a0\nConstraints:\n\ns1.length == n\ns2.length == n\ns1 <= s2\n1 <= n <= 500\n1 <= evil.length <= 50\nAll strings consist of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def findGoodStrings(self, n: int, s1: str, s2: str, evil: str) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 5, s1 = \"apple\", s2 = \"zebra\", evil = \"app\"",
        "output": "11220078"
      },
      {
        "input": "n = 5, s1 = \"a\", s2 = \"zzzzz\", evil = \"z\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 5, s1 = \"apple\", s2 = \"appla\", evil = \"appl\"",
        "output": "0"
      },
      {
        "input": "n = 3, s1 = \"aaa\", s2 = \"zzz\", evil = \"abc\"",
        "output": "17575"
      },
      {
        "input": "n = 5, s1 = \"aaaaa\", s2 = \"zzzzz\", evil = \"abc\"",
        "output": "11879348"
      },
      {
        "input": "n = 10, s1 = \"abcdefghij\", s2 = \"abcdefghij\", evil = \"ghij\"",
        "output": "0"
      },
      {
        "input": "n = 5, s1 = \"apple\", s2 = \"zebra\", evil = \"dog\"",
        "output": "11219789"
      },
      {
        "input": "n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"",
        "output": "2"
      },
      {
        "input": "n = 3, s1 = \"abc\", s2 = \"xyz\", evil = \"def\"",
        "output": "16169"
      },
      {
        "input": "n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"",
        "output": "0"
      },
      {
        "input": "n = 3, s1 = \"aaa\", s2 = \"zzz\", evil = \"xyz\"",
        "output": "17575"
      },
      {
        "input": "n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"",
        "output": "51"
      },
      {
        "input": "n = 3, s1 = \"abc\", s2 = \"xyz\", evil = \"de\"",
        "output": "16120"
      },
      {
        "input": "n = 100, s1 = \"a\"*100, s2 = \"z\"*100, evil = \"xyz\"",
        "output": "Error: Solution.findGoodStrings() missing 2 required positional arguments: 's1' and 's2'"
      },
      {
        "input": "n = 30, s1 = \"aaaaaaaaaaaaaaaaaaaaaaa\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"zzz\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 50, s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"ab\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 10, s1 = \"aaaaaaaaaa\", s2 = \"zzzzzzzzzz\", evil = \"mnop\"",
        "output": "932258852"
      },
      {
        "input": "n = 20, s1 = \"aaaaaaaaaa\", s2 = \"zzzzzzzzzz\", evil = \"mnop\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 10, s1 = \"abcdefghij\", s2 = \"zzzzzzzzzz\", evil = \"mnop\"",
        "output": "67339166"
      },
      {
        "input": "n = 45, s1 = \"abcdefghijklmnopqrstuvwxyzabcde\", s2 = \"zyxwvutsrqponmlkjihgfedcbaedcba\", evil = \"abcde\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 25, s1 = \"a\"*25, s2 = \"z\"*25, evil = \"qrstuv\"",
        "output": "Error: Solution.findGoodStrings() missing 2 required positional arguments: 's1' and 's2'"
      },
      {
        "input": "n = 25, s1 = \"abcdefghijklmnopqrstuvwxyz\", s2 = \"abcdefghijklmnopqrstuvwxyz\", evil = \"abcde\"",
        "output": "0"
      },
      {
        "input": "n = 45, s1 = \"abcdefghijklmnopqrstuvwxyzabcdefghij\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"mnopqr\"",
        "output": "720631236"
      },
      {
        "input": "n = 6, s1 = \"aaaaaa\", s2 = \"zzzzzz\", evil = \"ab\"",
        "output": "306634951"
      },
      {
        "input": "n = 30, s1 = \"abcdefghijklmnopqrstuvwxyzabcde\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"mnopqr\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 20, s1 = \"aaabaaabaaabaaabaa\", s2 = \"zzzzzzzzzzzzzzzzzzzz\", evil = \"aaa\"",
        "output": "357553640"
      },
      {
        "input": "n = 35, s1 = \"applepieapplepieapplepieapplepie\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"apple\"",
        "output": "695022504"
      },
      {
        "input": "n = 15, s1 = \"aaaaaabbbbb\", s2 = \"zzzzzzzzzzz\", evil = \"abcde\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 50, s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"abcde\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 25, s1 = \"abcdeabcdeabcdeabcde\", s2 = \"edcbaedcbaedcbaedcba\", evil = \"abc\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 500, s1 = \"a\"*500, s2 = \"z\"*500, evil = \"abcdef\"",
        "output": "Error: Solution.findGoodStrings() missing 2 required positional arguments: 's1' and 's2'"
      },
      {
        "input": "n = 7, s1 = \"aaaaaaa\", s2 = \"zzzzzzz\", evil = \"abc\"",
        "output": "29525318"
      },
      {
        "input": "n = 20, s1 = \"abcdabcdabcdabcdabcd\", s2 = \"zzzzzzzzzzzzzzzzzzzz\", evil = \"zabcd\"",
        "output": "426896930"
      },
      {
        "input": "n = 15, s1 = \"abcdefghijklm\", s2 = \"nopqrstuvwxyz\", evil = \"uvw\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 10, s1 = \"abcdefghij\", s2 = \"abcdefghiz\", evil = \"ghi\"",
        "output": "0"
      },
      {
        "input": "n = 50, s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"zzz\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 50, s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"xyzxyzxyzxyzxyz\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 50, s1 = \"a\"*50, s2 = \"z\"*50, evil = \"abcdefghijkl\"",
        "output": "Error: Solution.findGoodStrings() missing 2 required positional arguments: 's1' and 's2'"
      },
      {
        "input": "n = 15, s1 = \"abcdefghijklnmop\", s2 = \"abcdefghijklnmopqrstuvwxyz\", evil = \"mnop\"",
        "output": "1"
      },
      {
        "input": "n = 30, s1 = \"abcdefghijklmnopqrstuvwxyzabcde\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"vwxyz\"",
        "output": "858527385"
      },
      {
        "input": "n = 40, s1 = \"aaaabaaaabaaaabaaaab\", s2 = \"zzzzzzzzzzzzzzzzzzzz\", evil = \"aaaa\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 30, s1 = \"zzzzzzzzzzzzzzzzzzzz\", s2 = \"zzzzzzzzzzzzzzzzzzzz\", evil = \"abc\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 50, s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"ab\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 40, s1 = \"abcdabcdabcdabcdabcdabcdabcdabcdabcd\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"xyz\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 50, s1 = \"leetcodeleetcodeleetcodeleetcodeleetcode\", s2 = \"leetgoesleetgoesleetgoesleetgoesleetgoes\", evil = \"leet\"",
        "output": "0"
      },
      {
        "input": "n = 40, s1 = \"aaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxxxyyyzzz\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"mnopqr\"",
        "output": "438601268"
      },
      {
        "input": "n = 10, s1 = \"abcdefghij\", s2 = \"zjklmnopqr\", evil = \"mnop\"",
        "output": "922212598"
      },
      {
        "input": "n = 40, s1 = \"abcdefghijabcdefghijabcdefghijabcdefghij\", s2 = \"zjklmnopqrzjklmnopqrzjklmnopqrzjklmnopqr\", evil = \"mnopqr\"",
        "output": "54391096"
      },
      {
        "input": "n = 15, s1 = \"aaaabbbbcccc\", s2 = \"zzzzzzzzzzzzzz\", evil = \"xyz\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 40, s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"xyz\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 5, s1 = \"aaaaa\", s2 = \"zzzzz\", evil = \"b\"",
        "output": "9765625"
      },
      {
        "input": "n = 20, s1 = \"aaaaeaaaagaaaa\", s2 = \"zzzzkzzzzzzzzz\", evil = \"kzz\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "n = 50, s1 = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", s2 = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", evil = \"zzzz\"",
        "output": "Error: string index out of range"
      }
    ]
  },
  {
    "id": 2842,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Hash Table",
      "Math",
      "String",
      "Combinatorics"
    ],
    "problemDescription": "You are given a string s and an integer k.\nA k-subsequence is a subsequence of s, having length k, and all its characters are unique, i.e., every character occurs once.\nLet f(c) denote the number of times the character c occurs in s.\nThe beauty of a k-subsequence is the sum of f(c) for every character c in the k-subsequence.\nFor example, consider s = \"abbbdd\" and k = 2:\n\nf('a') = 1, f('b') = 3, f('d') = 2\nSome k-subsequences of s are:\n\t\n\"abbbdd\" -> \"ab\" having a beauty of f('a') + f('b') = 4\n\"abbbdd\" -> \"ad\" having a beauty of f('a') + f('d') = 3\n\"abbbdd\" -> \"bd\" having a beauty of f('b') + f('d') = 5\n\n\n\nReturn an integer denoting the number of k-subsequences whose beauty is the maximum among all k-subsequences. Since the answer may be too large, return it modulo 109 + 7.\nA subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.\nNotes\n\nf(c) is the number of times a character c occurs in s, not a k-subsequence.\nTwo k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.\n\n\u00a0\nExample 1:\n\nInput: s = \"bcca\", k = 2\nOutput: 4\nExplanation: From s we have f('a') = 1, f('b') = 1, and f('c') = 2.\nThe k-subsequences of s are: \nbcca having a beauty of f('b') + f('c') = 3 \nbcca having a beauty of f('b') + f('c') = 3 \nbcca having a beauty of f('b') + f('a') = 2 \nbcca having a beauty of f('c') + f('a') = 3\nbcca having a beauty of f('c') + f('a') = 3 \nThere are 4 k-subsequences that have the maximum beauty, 3. \nHence, the answer is 4. \n\nExample 2:\n\nInput: s = \"abbcd\", k = 4\nOutput: 2\nExplanation: From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1. \nThe k-subsequences of s are: \nabbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5\nabbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5 \nThere are 2 k-subsequences that have the maximum beauty, 5. \nHence, the answer is 2. \n\n\u00a0\nConstraints:\n\n1 <= s.length <= 2 * 105\n1 <= k <= s.length\ns consists only of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def countKSubsequencesWithMaxBeauty(self, s: str, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"aabbcc\", k = 3",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"mississippi\", k = 3",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abbcd\", k = 4",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 5",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcde\", k = 3",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\", k = 1",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijj\", k = 5",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcd\", k = 3",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbccddeeff\", k = 3",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aaaaaaaabbbbcccc\", k = 3",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 26",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdefg\", k = 7",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbcccddd\", k = 2",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 26",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"leetcode\", k = 2",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"bcca\", k = 2",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuv\", k = 10",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdefg\", k = 3",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 5",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"zzzz\", k = 1",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdefghij\", k = 5",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"a\", k = 1",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcd\", k = 4",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 26",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 10",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbcc\", k = 2",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefg\", k = 7",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdeabcdeabcdeabcdeabcdeabcde\", k = 5",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"nnnnooooooppppppqqqqqqqrrrrrrrrssssssssstttttttttuuuuuuuuuuuuuuuvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\", k = 5",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"mississippi\", k = 4",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 15",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzaaabbbbccc\", k = 4",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 13",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 20",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbbcccddddeeeeffffgggg\", k = 2",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzaaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 26",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuuvwxyzaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 10",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\", k = 3",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz\", k = 20",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"abracadabra\", k = 3",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"xylophone\", k = 5",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 25",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 15",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 1",
        "output": "Error: pow expected 2 arguments, got 3"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 1",
        "output": "Error: pow expected 2 arguments, got 3"
      }
    ]
  },
  {
    "id": 1478,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Math",
      "Dynamic Programming",
      "Sorting"
    ],
    "problemDescription": "Given the array houses where houses[i] is the location of the ith house along a street and an integer k, allocate k mailboxes in the street.\nReturn the minimum total distance between each house and its nearest mailbox.\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\u00a0\nExample 1:\n\n\nInput: houses = [1,4,8,10,20], k = 3\nOutput: 5\nExplanation: Allocate mailboxes in position 3, 9 and 20.\nMinimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 \n\nExample 2:\n\n\nInput: houses = [2,3,5,12,18], k = 2\nOutput: 9\nExplanation: Allocate mailboxes in position 3 and 14.\nMinimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.\n\n\u00a0\nConstraints:\n\n1 <= k <= houses.length <= 100\n1 <= houses[i] <= 104\nAll the integers of houses are unique.\n\n",
    "starterCode": "class Solution:\n    def minDistance(self, houses: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "houses = [10,5,17,1,18,2,12,9], k = 3",
        "output": "8"
      },
      {
        "input": "houses = [5,10,15,20,25], k = 2",
        "output": "15"
      },
      {
        "input": "houses = [3,6,14,10], k = 4",
        "output": "0"
      },
      {
        "input": "houses = [3,6,14,16,25,28,30], k = 2",
        "output": "26"
      },
      {
        "input": "houses = [1,4,8,10,20], k = 3",
        "output": "5"
      },
      {
        "input": "houses = [1,10000], k = 1",
        "output": "9999"
      },
      {
        "input": "houses = [1,2,3,4,5], k = 1",
        "output": "6"
      },
      {
        "input": "houses = [2,3,5,12,18], k = 2",
        "output": "9"
      },
      {
        "input": "houses = [7,4,6,1], k = 1",
        "output": "8"
      },
      {
        "input": "houses = [5,7,10,11,12,16], k = 3",
        "output": "4"
      },
      {
        "input": "houses = [5,10,15,20,25,30], k = 2",
        "output": "20"
      },
      {
        "input": "houses = [8,5,2,9,6], k = 2",
        "output": "5"
      },
      {
        "input": "houses = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "5"
      },
      {
        "input": "houses = [10,20,30,40,50], k = 5",
        "output": "0"
      },
      {
        "input": "houses = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], k = 5",
        "output": "200"
      },
      {
        "input": "houses = [1, 6, 9, 12, 17, 23, 30], k = 4",
        "output": "12"
      },
      {
        "input": "houses = [2, 5, 7, 12, 16, 22, 26, 30, 35], k = 3",
        "output": "24"
      },
      {
        "input": "houses = [1,3,6,8,12,15,18,22], k = 4",
        "output": "10"
      },
      {
        "input": "houses = [5,15,25,35,45,55,65,75,85,95,105,115,125], k = 6",
        "output": "70"
      },
      {
        "input": "houses = [2,6,10,15,20,25,30,35,40,45,50], k = 5",
        "output": "28"
      },
      {
        "input": "houses = [2,5,8,11,14,17,20,23,26,29], k = 4",
        "output": "18"
      },
      {
        "input": "houses = [2,5,8,11,14,17,20,23,26,29,32,35,38,41,44,47,50], k = 5",
        "output": "42"
      },
      {
        "input": "houses = [1,3,6,8,12,15,18,22,25,28,30,33,36,39,42,45,48], k = 6",
        "output": "32"
      },
      {
        "input": "houses = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], k = 10",
        "output": "100"
      },
      {
        "input": "houses = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], k = 7",
        "output": "465"
      },
      {
        "input": "houses = [1,5,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300], k = 15",
        "output": "159"
      },
      {
        "input": "houses = [1,3,6,10,15,21,28,36,45,55,66,78,91,105,120,136,153,171,190,210,231,253,276,300,325,351,378,406,435,465,496,528,561,595,630,666,703,741,780,820,861,903,946,990], k = 15",
        "output": "633"
      },
      {
        "input": "houses = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 5",
        "output": "10"
      },
      {
        "input": "houses = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 20",
        "output": "0"
      },
      {
        "input": "houses = [1,100,200,300,400,500,600,700,800,900,1000], k = 5",
        "output": "599"
      },
      {
        "input": "houses = [1,10,100,1000,10000], k = 2",
        "output": "1089"
      },
      {
        "input": "houses = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288], k = 5",
        "output": "65025"
      },
      {
        "input": "houses = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 1",
        "output": "100"
      },
      {
        "input": "houses = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], k = 2",
        "output": "111098889"
      },
      {
        "input": "houses = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10",
        "output": "10"
      },
      {
        "input": "houses = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 5",
        "output": "20"
      },
      {
        "input": "houses = [1,2,4,8,16,32,64,128,256,512], k = 3",
        "output": "225"
      },
      {
        "input": "houses = [1, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 3",
        "output": "999"
      },
      {
        "input": "houses = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 5",
        "output": "100"
      },
      {
        "input": "houses = [1, 7, 13, 19, 25, 31, 37, 43, 49, 55, 61, 67, 73, 79, 85, 91, 97, 103, 109, 115, 121, 127, 133, 139, 145, 151, 157, 163, 169, 175], k = 15",
        "output": "90"
      },
      {
        "input": "houses = [1, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 7",
        "output": "89"
      },
      {
        "input": "houses = [10,25,62,155,387,967,2417,6042,15105,37762,94405,236012], k = 6",
        "output": "3674"
      },
      {
        "input": "houses = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], k = 2",
        "output": "60"
      },
      {
        "input": "houses = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768], k = 4",
        "output": "8001"
      },
      {
        "input": "houses = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90], k = 15",
        "output": "45"
      },
      {
        "input": "houses = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], k = 10",
        "output": "50"
      },
      {
        "input": "houses = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90], k = 10",
        "output": "60"
      },
      {
        "input": "houses = [10,25,40,55,70,85,100,115,130,145,160,175,190,200], k = 8",
        "output": "85"
      },
      {
        "input": "houses = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946], k = 8",
        "output": "701"
      },
      {
        "input": "houses = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,101], k = 16",
        "output": "40"
      },
      {
        "input": "houses = [1,3,6,9,12,15,18,21,24,27], k = 3",
        "output": "23"
      },
      {
        "input": "houses = [1,2,6,24,120,720,5040,40320,362880,3628800,39916800,479001600,6227020800,87178291200], k = 8",
        "output": "5871"
      },
      {
        "input": "houses = [1,3,5,7,9,11,13,15,17,19], k = 5",
        "output": "10"
      },
      {
        "input": "houses = [2, 8, 14, 20, 26, 32, 38, 44, 50, 56], k = 5",
        "output": "30"
      },
      {
        "input": "houses = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961], k = 12",
        "output": "539"
      },
      {
        "input": "houses = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205], k = 5",
        "output": "220"
      },
      {
        "input": "houses = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], k = 10",
        "output": "109"
      },
      {
        "input": "houses = [2,4,6,8,10,12,14,16,18,20], k = 5",
        "output": "10"
      },
      {
        "input": "houses = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150], k = 10",
        "output": "100"
      },
      {
        "input": "houses = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 10",
        "output": "100"
      },
      {
        "input": "houses = [10,20,30,40,50,60,70,80,90,100], k = 5",
        "output": "50"
      },
      {
        "input": "houses = [1,3,5,7,9,11,13,15,17,19,21,23,25], k = 5",
        "output": "16"
      },
      {
        "input": "houses = [2,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], k = 11",
        "output": "48"
      },
      {
        "input": "houses = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], k = 10",
        "output": "50"
      },
      {
        "input": "houses = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80], k = 8",
        "output": "40"
      },
      {
        "input": "houses = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], k = 3",
        "output": "36"
      },
      {
        "input": "houses = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50], k = 10",
        "output": "30"
      },
      {
        "input": "houses = [5,15,25,35,45,55,65,75,85,95,105,115,125,135,145,155,165,175,185,195,205,215,225], k = 13",
        "output": "100"
      },
      {
        "input": "houses = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576], k = 10",
        "output": "3969"
      },
      {
        "input": "houses = [5,15,45,135,405,1215,3645,10935,32805,98415], k = 5",
        "output": "1690"
      },
      {
        "input": "houses = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,101], k = 8",
        "output": "80"
      },
      {
        "input": "houses = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190], k = 5",
        "output": "199"
      },
      {
        "input": "houses = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 5",
        "output": "50"
      },
      {
        "input": "houses = [7,14,21,28,35,42,49,56,63,70], k = 5",
        "output": "35"
      },
      {
        "input": "houses = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], k = 6",
        "output": "90"
      },
      {
        "input": "houses = [1,5,10,20,35,55,80,110,145,185,230], k = 3",
        "output": "189"
      },
      {
        "input": "houses = [1,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], k = 7",
        "output": "139"
      },
      {
        "input": "houses = [10,20,30,40,50,60,70,80,90,100], k = 3",
        "output": "80"
      },
      {
        "input": "houses = [1,5,10,15,20,25,30,35,40,45,50], k = 4",
        "output": "34"
      },
      {
        "input": "houses = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 5",
        "output": "10"
      },
      {
        "input": "houses = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49], k = 15",
        "output": "20"
      },
      {
        "input": "houses = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], k = 5",
        "output": "100"
      },
      {
        "input": "houses = [1,4,9,16,25,36,49,64,81,100], k = 2",
        "output": "131"
      },
      {
        "input": "houses = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], k = 7",
        "output": "80"
      },
      {
        "input": "houses = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70], k = 6",
        "output": "44"
      },
      {
        "input": "houses = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5",
        "output": "5"
      },
      {
        "input": "houses = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45], k = 7",
        "output": "24"
      },
      {
        "input": "houses = [1,2,3,5,8,13,21,34,55,89,144,233,377,610,987], k = 6",
        "output": "154"
      },
      {
        "input": "houses = [1, 3, 6, 8, 14, 15, 20, 25], k = 4",
        "output": "10"
      },
      {
        "input": "houses = [10,20,30,40,50,60,70,80,90,100,110,120,130], k = 7",
        "output": "60"
      },
      {
        "input": "houses = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 4",
        "output": "24"
      },
      {
        "input": "houses = [1,3,6,10,15,21,28,36,45], k = 4",
        "output": "24"
      },
      {
        "input": "houses = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384], k = 7",
        "output": "465"
      },
      {
        "input": "houses = [2,8,24,64,160,416,1040,2608,6528,16384,40960,102400], k = 8",
        "output": "214"
      },
      {
        "input": "houses = [2,8,15,20,26,32,40,45,50], k = 4",
        "output": "27"
      },
      {
        "input": "houses = [7, 12, 17, 22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77], k = 3",
        "output": "90"
      },
      {
        "input": "houses = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 7",
        "output": "8"
      },
      {
        "input": "houses = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500], k = 20",
        "output": "300"
      },
      {
        "input": "houses = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195], k = 8",
        "output": "120"
      },
      {
        "input": "houses = [5,15,25,35,45,55,65,75,85,95,105,115,125,135,145,155,165,175,185,195], k = 7",
        "output": "130"
      },
      {
        "input": "houses = [1, 2, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], k = 4",
        "output": "1697"
      },
      {
        "input": "houses = [1,3,6,10,15,21,28,36,45,55], k = 4",
        "output": "33"
      },
      {
        "input": "houses = [3, 7, 11, 15, 19, 23, 27, 31], k = 3",
        "output": "20"
      },
      {
        "input": "houses = [2,5,9,14,20,27,35,44,54,65,77,90], k = 6",
        "output": "39"
      },
      {
        "input": "houses = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100], k = 25",
        "output": "50"
      },
      {
        "input": "houses = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 6",
        "output": "9"
      },
      {
        "input": "houses = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], k = 10",
        "output": "20"
      },
      {
        "input": "houses = [1,5,9,14,20,25,30,35,40], k = 4",
        "output": "23"
      }
    ]
  },
  {
    "id": 1547,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "problemDescription": "Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:\n\nGiven an integer array cuts where cuts[i] denotes a position you should perform a cut at.\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\nReturn the minimum total cost of the cuts.\n\u00a0\nExample 1:\n\n\nInput: n = 7, cuts = [1,3,4,5]\nOutput: 16\nExplanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\n\nThe first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\nRearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).\nExample 2:\n\nInput: n = 9, cuts = [5,6,1,4,2]\nOutput: 22\nExplanation: If you try the given cuts ordering the cost will be 25.\nThere are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.\n\n\u00a0\nConstraints:\n\n2 <= n <= 106\n1 <= cuts.length <= min(n - 1, 100)\n1 <= cuts[i] <= n - 1\nAll the integers in cuts array are distinct.\n\n",
    "starterCode": "class Solution:\n    def minCost(self, n: int, cuts: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 15, cuts = [3,5,10]",
        "output": "30"
      },
      {
        "input": "n = 100, cuts = [50,25,75,10,90,60,30,40,80]",
        "output": "330"
      },
      {
        "input": "n = 15, cuts = [1,5,9,13]",
        "output": "35"
      },
      {
        "input": "n = 7, cuts = [1,3,4,5]",
        "output": "16"
      },
      {
        "input": "n = 10, cuts = [2,4,7]",
        "output": "20"
      },
      {
        "input": "n = 8, cuts = [1,3,5,7]",
        "output": "19"
      },
      {
        "input": "n = 8, cuts = [1,3,6]",
        "output": "16"
      },
      {
        "input": "n = 6, cuts = [3,1,5]",
        "output": "12"
      },
      {
        "input": "n = 6, cuts = [1,2,3,4,5]",
        "output": "16"
      },
      {
        "input": "n = 15, cuts = [3,5,12,10]",
        "output": "35"
      },
      {
        "input": "n = 12, cuts = [1,3,5,7,9]",
        "output": "31"
      },
      {
        "input": "n = 12, cuts = [2,3,10,11]",
        "output": "26"
      },
      {
        "input": "n = 12, cuts = [1,5,8,10]",
        "output": "28"
      },
      {
        "input": "n = 10, cuts = [1,2,3,4,5]",
        "output": "22"
      },
      {
        "input": "n = 5, cuts = [1,4]",
        "output": "9"
      },
      {
        "input": "n = 15, cuts = [2,7,10,13]",
        "output": "35"
      },
      {
        "input": "n = 8, cuts = [2,5]",
        "output": "13"
      },
      {
        "input": "n = 9, cuts = [5,6,1,4,2]",
        "output": "22"
      },
      {
        "input": "n = 12, cuts = [1,2,3,4,5,6,7,8,9,10,11]",
        "output": "44"
      },
      {
        "input": "n = 8, cuts = [2,3,5,6]",
        "output": "19"
      },
      {
        "input": "n = 20, cuts = [3,8,10,12,15]",
        "output": "51"
      },
      {
        "input": "n = 20, cuts = [3,6,9,12,15]",
        "output": "52"
      },
      {
        "input": "n = 8, cuts = [3,5]",
        "output": "13"
      },
      {
        "input": "n = 50, cuts = [5,10,15,20,25,30,35,40,45]",
        "output": "170"
      },
      {
        "input": "n = 400, cuts = [120, 240, 60, 180, 300, 360, 90, 210, 330, 390]",
        "output": "1360"
      },
      {
        "input": "n = 150, cuts = [20,40,60,80,100,120,140]",
        "output": "450"
      },
      {
        "input": "n = 512, cuts = [64,128,192,256,320,384,448]",
        "output": "1536"
      },
      {
        "input": "n = 300, cuts = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290]",
        "output": "1480"
      },
      {
        "input": "n = 1024, cuts = [128,256,384,512,640,768,896]",
        "output": "3072"
      },
      {
        "input": "n = 200, cuts = [10, 30, 50, 70, 90, 110, 130, 150, 170, 190]",
        "output": "700"
      },
      {
        "input": "n = 500, cuts = [100, 150, 200, 250, 300, 350, 400, 450]",
        "output": "1600"
      },
      {
        "input": "n = 10000, cuts = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000]",
        "output": "34000"
      },
      {
        "input": "n = 900, cuts = [100, 200, 300, 400, 500, 600, 700, 800, 450, 350, 250, 150, 50]",
        "output": "3400"
      },
      {
        "input": "n = 300, cuts = [50, 100, 150, 200, 250, 125, 175, 225, 275, 75, 25, 200, 250, 150, 100, 300, 50]",
        "output": "1250"
      },
      {
        "input": "n = 30, cuts = [29,1,28,14,22,19,3,7,11,25,26,9,21,15,6,23,17,2,18,5,24,20,12,16,8,10,4,27,13]",
        "output": "148"
      },
      {
        "input": "n = 750, cuts = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580, 600, 620, 640, 660, 680, 700, 720, 740]",
        "output": "3980"
      },
      {
        "input": "n = 600, cuts = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 580]",
        "output": "2250"
      },
      {
        "input": "n = 35, cuts = [3,7,11,15,19,23,27,31]",
        "output": "112"
      },
      {
        "input": "n = 20, cuts = [2,5,8,11,14,17]",
        "output": "57"
      },
      {
        "input": "n = 150, cuts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140]",
        "output": "590"
      },
      {
        "input": "n = 750, cuts = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 125, 275, 425, 575, 325, 475, 625, 225, 375, 525, 675]",
        "output": "3550"
      },
      {
        "input": "n = 900, cuts = [90, 180, 270, 360, 450, 540, 630, 720, 810, 900, 45, 135, 225, 315, 405, 495, 585, 675, 765, 855, 945]",
        "output": "4275"
      },
      {
        "input": "n = 729, cuts = [27,54,81,108,135,162,189,216,243,270,297,324,351,378,405,432,459,486,513,540,567,594,621,648,675,702]",
        "output": "3510"
      },
      {
        "input": "n = 120, cuts = [10,20,30,40,50,60,70,80,90,100,110]",
        "output": "440"
      },
      {
        "input": "n = 1500, cuts = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1450]",
        "output": "7400"
      },
      {
        "input": "n = 25, cuts = [5,15,20,10]",
        "output": "60"
      },
      {
        "input": "n = 500, cuts = [10, 25, 45, 70, 100, 150, 200, 250, 300, 350, 400]",
        "output": "1720"
      },
      {
        "input": "n = 1000, cuts = [100, 200, 300, 400, 500, 600, 700, 800, 900]",
        "output": "3400"
      },
      {
        "input": "n = 2500, cuts = [200,400,600,800,1000,1200,1400,1600,1800,2000,2200,2400]",
        "output": "9400"
      },
      {
        "input": "n = 999, cuts = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99]",
        "output": "1565"
      },
      {
        "input": "n = 50, cuts = [5, 10, 15, 20, 25, 30, 35, 40, 45]",
        "output": "170"
      },
      {
        "input": "n = 750, cuts = [50,100,150,200,250,300,350,400,450,500,550,600,650,700]",
        "output": "2950"
      },
      {
        "input": "n = 200, cuts = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190]",
        "output": "880"
      },
      {
        "input": "n = 1000, cuts = [10, 50, 90, 150, 250, 350, 450, 550, 650, 750, 850, 950]",
        "output": "3640"
      },
      {
        "input": "n = 700, cuts = [140, 280, 420, 560, 70, 210, 350, 490, 630, 175, 315, 455, 595]",
        "output": "2660"
      },
      {
        "input": "n = 10000, cuts = [1000,2000,3000,4000,5000,6000,7000,8000,9000]",
        "output": "34000"
      },
      {
        "input": "n = 250, cuts = [25,50,75,100,125,150,175,200,225]",
        "output": "850"
      },
      {
        "input": "n = 500, cuts = [100, 200, 300, 400, 150, 250, 350, 450, 50, 450]",
        "output": "1750"
      },
      {
        "input": "n = 1000, cuts = [100,200,300,400,500,600,700,800,900]",
        "output": "3400"
      },
      {
        "input": "n = 70, cuts = [7, 14, 21, 28, 35, 42, 49, 56, 63]",
        "output": "238"
      },
      {
        "input": "n = 100, cuts = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "182"
      },
      {
        "input": "n = 40, cuts = [10,20,30]",
        "output": "80"
      },
      {
        "input": "n = 600, cuts = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380, 400, 420, 440, 460, 480, 500, 520, 540, 560, 580]",
        "output": "2960"
      },
      {
        "input": "n = 600, cuts = [30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330, 360, 390, 420, 450, 480, 510, 540, 570]",
        "output": "2640"
      },
      {
        "input": "n = 400, cuts = [50, 100, 150, 200, 250, 300, 350]",
        "output": "1200"
      },
      {
        "input": "n = 2000, cuts = [100,500,800,1500,1900,1600,1200,700,300,1100,1700,1800,600,900,400,200]",
        "output": "8100"
      },
      {
        "input": "n = 500, cuts = [100, 200, 300, 400, 150, 250, 350]",
        "output": "1500"
      },
      {
        "input": "n = 99, cuts = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97]",
        "output": "566"
      },
      {
        "input": "n = 800, cuts = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750]",
        "output": "3200"
      },
      {
        "input": "n = 800, cuts = [160, 320, 480, 640, 80, 240, 400, 560, 720, 110, 270, 430, 590, 750, 90, 250, 410, 570, 730]",
        "output": "3270"
      },
      {
        "input": "n = 5000, cuts = [2000,1000,3000,4000,500,1500,2500,3500,4500,1250,1750,2250,2750,3250,3750,4250,4750,625,750,1125,1375,1625,1875,2125,2375,2625,2875,3125,3375,3625,3875,4125,4375,4625,4875]",
        "output": "25750"
      },
      {
        "input": "n = 1200, cuts = [120, 240, 360, 480, 600, 720, 840, 960, 1080, 1200, 60, 180, 300, 420, 540, 660, 780, 900, 1020, 1140, 30, 90, 150, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1050, 1110, 1170]",
        "output": "6510"
      },
      {
        "input": "n = 15, cuts = [1,4,7,10,13]",
        "output": "39"
      },
      {
        "input": "n = 3000, cuts = [100,300,500,700,900,1100,1300,1500,1700,1900,2100,2300,2500,2700,2900]",
        "output": "12000"
      },
      {
        "input": "n = 50, cuts = [2,25,49,23,37,17,33,9,41,35]",
        "output": "170"
      },
      {
        "input": "n = 300, cuts = [25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275]",
        "output": "1100"
      },
      {
        "input": "n = 900, cuts = [150,300,450,600,750,100,200,500,800,90,180,270,360,450,540,630,720,810,900]",
        "output": "3820"
      },
      {
        "input": "n = 1200, cuts = [200, 400, 600, 800, 1000, 120, 320, 520, 720, 920]",
        "output": "4200"
      },
      {
        "input": "n = 500, cuts = [25,50,75,100,125,150,175,200,225,250,275,300,325,350,375,400,425,450,475]",
        "output": "2200"
      },
      {
        "input": "n = 256, cuts = [8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128,136,144,152,160,168,176,184,192,200,208,216,224,232,240,248]",
        "output": "1280"
      },
      {
        "input": "n = 600, cuts = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500,510,520,530,540,550,560,570,580,590]",
        "output": "3560"
      },
      {
        "input": "n = 1024, cuts = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]",
        "output": "3063"
      },
      {
        "input": "n = 200, cuts = [15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195]",
        "output": "770"
      },
      {
        "input": "n = 2000, cuts = [100, 300, 500, 700, 900, 1100, 1300, 1500, 1700, 1900, 200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800]",
        "output": "8800"
      },
      {
        "input": "n = 800, cuts = [50, 100, 150, 200, 250, 300, 350, 400, 450, 550, 600, 650, 700, 750, 800]",
        "output": "3200"
      },
      {
        "input": "n = 1500, cuts = [250,500,750,1000,1250,1300,1400,1450,1350,1200]",
        "output": "4750"
      },
      {
        "input": "n = 99, cuts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98]",
        "output": "664"
      },
      {
        "input": "n = 50, cuts = [3,10,20,30,40]",
        "output": "130"
      },
      {
        "input": "n = 150, cuts = [15, 30, 45, 60, 75, 90, 105, 120, 135, 105, 45, 15, 90, 75, 135, 60, 120]",
        "output": "630"
      },
      {
        "input": "n = 55, cuts = [11,22,33,44,5]",
        "output": "143"
      },
      {
        "input": "n = 60, cuts = [5,10,15,20,25,30,35,40,45,50,55,59]",
        "output": "225"
      },
      {
        "input": "n = 300, cuts = [30, 60, 90, 120, 150, 180, 210, 240, 270]",
        "output": "1020"
      },
      {
        "input": "n = 1000, cuts = [200, 400, 600, 800, 300, 700, 100, 900, 500]",
        "output": "3400"
      },
      {
        "input": "n = 1200, cuts = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100]",
        "output": "4400"
      },
      {
        "input": "n = 20, cuts = [3,6,9,12,15,18]",
        "output": "57"
      },
      {
        "input": "n = 30, cuts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]",
        "output": "148"
      },
      {
        "input": "n = 1000, cuts = [200, 400, 600, 800, 100, 300, 500, 700, 900]",
        "output": "3400"
      }
    ]
  },
  {
    "id": 1028,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "String",
      "Binary Tree"
    ],
    "problemDescription": "We run a\u00a0preorder\u00a0depth-first search (DFS) on the root of a binary tree.\nAt each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.\u00a0 If the depth of a node is D, the depth of its immediate child is D + 1.\u00a0 The depth of the root node is 0.\nIf a node has only one child, that child is guaranteed to be the left child.\nGiven the output traversal of this traversal, recover the tree and return its root.\n\u00a0\nExample 1:\n\n\nInput: traversal = \"1-2--3--4-5--6--7\"\nOutput: [1,2,5,3,4,6,7]\n\nExample 2:\n\n\nInput: traversal = \"1-2--3---4-5--6---7\"\nOutput: [1,2,5,3,null,6,null,4,null,7]\n\nExample 3:\n\n\nInput: traversal = \"1-401--349---90--88\"\nOutput: [1,401,null,349,88,90]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the original tree is in the range [1, 1000].\n1 <= Node.val <= 109\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def recoverFromPreorder(self, traversal: str) -> Optional[TreeNode]:\n        ",
    "testCases": [
      {
        "input": "traversal = \"1\"",
        "output": "[1]"
      },
      {
        "input": "traversal = \"1-2--3--4---5\"",
        "output": "[1, 2, None, 3, 4, None, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3---5----6\"",
        "output": "[1, 2, None, 3, None, 5, None, 6]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7-8-9-10\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3-4--5-6--7-8--9\"",
        "output": "[1, 2, 4, 3, None, 5]"
      },
      {
        "input": "traversal = \"1-2-3----4-----5\"",
        "output": "[1, 2, 3]"
      },
      {
        "input": "traversal = \"1-2-3--4--5\"",
        "output": "[1, 2, 3, None, None, 4, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2---3----4-----5\"",
        "output": "[1, 2]"
      },
      {
        "input": "traversal = \"1-2-3-4-5\"",
        "output": "[1, 2, 3]"
      },
      {
        "input": "traversal = \"1-2-3\"",
        "output": "[1, 2, 3]"
      },
      {
        "input": "traversal = \"1-2\"",
        "output": "[1, 2]"
      },
      {
        "input": "traversal = \"1-2--3---4-5--6---7\"",
        "output": "[1, 2, 5, 3, None, 6, None, 4, None, 7]"
      },
      {
        "input": "traversal = \"1-2--3\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4----5\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7-8-9\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3-4-5\"",
        "output": "[1, 2, 4, 3]"
      },
      {
        "input": "traversal = \"1-2-3--4-5--6-7\"",
        "output": "[1, 2, 3, None, None, 4]"
      },
      {
        "input": "traversal = \"1-401--349---90--88\"",
        "output": "[1, 401, None, 349, 88, 90]"
      },
      {
        "input": "traversal = \"1-2--3-4--5\"",
        "output": "[1, 2, 4, 3, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7-8--9-10--11\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-----6------7-------8\"",
        "output": "[1, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7--8--9--10\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8-9-10-11-12-13-14-15-16-17-18-19\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3----4-----5------6-------7--------8---------9----------10-----------11------------12-------------13\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3---4----5------6---------7----------8-9-10-11-12-13\"",
        "output": "[1, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4-5-6--7--8--9--10--11--12-13\"",
        "output": "[1, 2, 5, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3-4----5-6------7--8---9\"",
        "output": "[1, 2, 4, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8--9--10--11--12--13--14\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3---4----5--6--7---8----9-10--11--12-13\"",
        "output": "[1, 2, None, 3, 6, 4, None, None, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3----4----5--6--7-8-9-10-11-12-13--14----15\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3----4------5--------6\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-----6------7-------8--------9---------10----------11-----------12------------13-------------14\"",
        "output": "[1, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14]"
      },
      {
        "input": "traversal = \"1-2--3-4--5---6------7\"",
        "output": "[1, 2, 4, 3, None, 5, None, None, None, 6]"
      },
      {
        "input": "traversal = \"1-2--3----4-----5------6-------7--------8---------9----------10-----------11------------12\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7-8--9--10--11--12--13--14--15--16--17--18--19--20--21--22--23--24--25--26--27--28--29--30--31--32--33--34--35--36--37--38--39--40--41--42--43--44--45--46--47--48--49--50\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4----5-----6----7---8-9\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4---5----6-----7\"",
        "output": "[1, 2, None, 3, 4, None, None, 5, None, 6, None, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13--14--15\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2-3-4-5-6-7-8-9\"",
        "output": "[1, 2, 3]"
      },
      {
        "input": "traversal = \"1-2--3---4-5--6--7---8-9-10-11-12\"",
        "output": "[1, 2, 5, 3, None, 6, 7, 4, None, None, None, 8]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-6--7---8----9-10--11--12-13-14\"",
        "output": "[1, 2, 6, 3, None, 7, None, 4, None, 8, None, 5, None, 9]"
      },
      {
        "input": "traversal = \"1-2--3--4----5------6--------7\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3----4-----5------6-------7--------8---------9----------10-----------11\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7--8--9--10--11--12--13--14--15--16\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3----4----5--6--7-8-9-10-11-12-13--14----15--16-17\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13--14--15--16--17--18--19--20--21\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9-10-11-12-13-14\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4----5-6------7---8-9--10----11\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7--8--9--10--11-12--13--14--15--16--17--18--19--20\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7--8-9\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-6--7---8----9-10--11--12\"",
        "output": "[1, 2, 6, 3, None, 7, None, 4, None, 8, None, 5, None, 9]"
      },
      {
        "input": "traversal = \"1-2--3--4----5-6--7---8--9-10----11--12\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-6--7---8-9\"",
        "output": "[1, 2, 6, 3, None, 7, None, 4, None, 8, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7-8--9--10-11-12--13--14-15-16--17-18--19-20-21-22-23-24\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5--6-7---8-9--10-11--12-13--14\"",
        "output": "[1, 2, 7, 3, 6, None, None, 4, None, None, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4----5------6---------7----------8-9\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7-8--9--10-11-12--13--14-15-16--17-18--19-20-21-22-23-24-25-26-27-28-29-30-31-32-33-34\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3----4----5---6--7\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7-8--9--10--11--12--13--14--15--16\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5----6-----7------8-------9\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3-4--5--6-7-8-9-10-11-12-13-14-15-16-17-18\"",
        "output": "[1, 2, 4, 3, None, 5, 6]"
      },
      {
        "input": "traversal = \"1-2--3--4--5---6---7---8---9\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5------6--------7-8--9---10----11\"",
        "output": "[1, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7-8--9--10-11--12--13--14--15\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7--8-9-10--11--12-13--14--15--16--17--18--19\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7-8--9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"10-20--30---40----50-60--70---80----90\"",
        "output": "[10, 20, 60, 30, None, 70, None, 40, None, 80, None, 50, None, 90]"
      },
      {
        "input": "traversal = \"1-2--3----4----5------6--------7--------8------9----10--11-12--13\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3-4--5--6-7-8--9-10-11-12-13-14-15\"",
        "output": "[1, 2, 4, 3, None, 5, 6]"
      },
      {
        "input": "traversal = \"1-2--3--4-5-6--7-8\"",
        "output": "[1, 2, 5, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4----5------6---------7----------8-9-10-11-12-13-14-15-16-17-18-19-20\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3-4--5--6-7---8----9\"",
        "output": "[1, 2, 4, 3, None, 5, 6]"
      },
      {
        "input": "traversal = \"1-2--3--4----5------6---------7----------8-9-10-11-12\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4----5-6----7-8--9\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-6--7---8----9-10--11\"",
        "output": "[1, 2, 6, 3, None, 7, None, 4, None, 8, None, 5, None, 9]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8--9-10--11--12\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7-8--9--10-11-12--13--14-15-16--17-18--19-20\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13--14--15--16--17--18--19--20\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6-7-8--9-10--11--12-13--14\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7-8--9--10\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3----4-5-6--7----8-9----10--11----12\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8-9--10--11--12\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5------6---------7\"",
        "output": "[1, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6----7------8\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"10-20--30---40----50-60--70-80\"",
        "output": "[10, 20, 60, 30, None, 70, None, 40, None, None, None, 50]"
      },
      {
        "input": "traversal = \"1-2--3---4----5--6-7---8-9--10-11--12-13--14-15--16-17--18--19--20--21--22\"",
        "output": "[1, 2, 7, 3, 6, None, None, 4, None, None, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7--8-9--10-11--12-13\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8--9-10--11--12-13--14-15--16-17--18\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7--8--9\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5------6-7--8---9\"",
        "output": "[1, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4-5-6-7-8-9-10-11-12\"",
        "output": "[1, 2, 5, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-----6------7-------8--------9---------10----------11-----------12------------13\"",
        "output": "[1, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13]"
      },
      {
        "input": "traversal = \"1-2--3----4-----5------6-------7--------8\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7--8--9--10--11--12\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7--8--9--10--11--12--13--14--15--16--17--18--19--20--21--22--23\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7-8--9--10-11-12--13--14-15-16--17-18--19-20-21-22-23-24-25-26-27-28-29-30\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3-4--5---6----7--8--9--10--11--12\"",
        "output": "[1, 2, 4, 3, None, 5, 8, None, None, 6, None, None, None, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5---6----7\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3----4-----5------6-------7--------8---------9\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3----4----5--6--7-8-9-10-11-12-13--14----15--16-17--18----19--20-21\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8-9-10-11-12\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4---5----6-----7------8\"",
        "output": "[1, 2, None, 3, 4, None, None, 5, None, 6, None, 7, None, 8]"
      },
      {
        "input": "traversal = \"1-2--3---4-5--6----7-8\"",
        "output": "[1, 2, 5, 3, None, 6, None, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5-6--7-8--9-10\"",
        "output": "[1, 2, 5, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-----6--7---8----9-10--11--12--13\"",
        "output": "[1, 2, 10, 3, 7, 11, 12, 4, None, 8, None, None, None, None, None, 5, None, 9, None, 6]"
      },
      {
        "input": "traversal = \"1-2--3--4---5-6--7---8----9-10--11\"",
        "output": "[1, 2, 6, 3, 4, 7, None, None, None, 5, None, 8, None, None, None, 9]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8--9-10--11--12--13--14\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3----4-----5------6-------7--------8---------9----------10\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-----6------7-------8--------9---------10\"",
        "output": "[1, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-6--7---8-9--10-11--12-13--14-15--16-17--18--19--20\"",
        "output": "[1, 2, 6, 3, None, 7, None, 4, None, 8, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6-7--8-9--10\"",
        "output": "[1, 2, 5, 3, 4, 6]"
      },
      {
        "input": "traversal = \"1-2--3----4----5--6--7-8-9-10-11-12-13--14----15--16-17--18----19--20-21--22----23\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3-4--5--6-7-8--9---10\"",
        "output": "[1, 2, 4, 3, None, 5, 6]"
      },
      {
        "input": "traversal = \"1-2--3----4----5--6--7-8-9-10-11-12-13--14----15--16-17--18----19\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-6--7---8----9-10\"",
        "output": "[1, 2, 6, 3, None, 7, None, 4, None, 8, None, 5, None, 9]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8--9-10--11--12-13--14-15--16-17--18--19--20--21\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-----6------7-------8--------9\"",
        "output": "[1, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13--14--15--16--17--18--19--20--21--22\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7--8-9-10-11-12-13-14\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3-4--5---6----7-8--9----10-11\"",
        "output": "[1, 2, 4, 3, None, 5, None, None, None, 6, None, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4----5-----6------7-------8\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6-7--8--9-10-11--12--13\"",
        "output": "[1, 2, 5, 3, 4, 6]"
      },
      {
        "input": "traversal = \"1-2--3--4----5------6---------7----------8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5------6-------7\"",
        "output": "[1, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3---4----5\"",
        "output": "[1, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3-4--5-6--7-8-9-10-11\"",
        "output": "[1, 2, 4, 3, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13-14--15\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-----6------7-------8--------9---------10----------11\"",
        "output": "[1, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11]"
      },
      {
        "input": "traversal = \"1-2--3----4----5--6--7-8-9-10-11-12-13--14----15--16-17--18----19--20\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-----6------7-------8--------9---------10----------11-----------12------------13-------------14--------------15\"",
        "output": "[1, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None, 15]"
      },
      {
        "input": "traversal = \"1-2--3--4-5-6--7-8--9--10-11\"",
        "output": "[1, 2, 5, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5--6--7----8-9----10\"",
        "output": "[1, 2, None, 3, 6, 4, None, None, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7--8-9--10--11\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-6--7---8-9--10\"",
        "output": "[1, 2, 6, 3, None, 7, None, 4, None, 8, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3----4----5--6--7-8-9-10-11-12-13\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4-5-6--7-8-9-10--11\"",
        "output": "[1, 2, 5, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3----4----5------6--------7--------8------9----10--11\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6---7----8-9-10-11-12-13\"",
        "output": "[1, 2, 5, 3, 4, 6, None, None, None, None, None, 7, None, 8]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12-13--14--15\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-6--7---8-9--10-11--12-13--14\"",
        "output": "[1, 2, 6, 3, None, 7, None, 4, None, 8, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3---4----5--6--7---8----9\"",
        "output": "[1, 2, None, 3, 6, 4, None, None, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8--9-10--11--12--13--14--15--16\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-6--7---8----9-10--11--12-13-14-15\"",
        "output": "[1, 2, 6, 3, None, 7, None, 4, None, 8, None, 5, None, 9]"
      },
      {
        "input": "traversal = \"1-2--3--4----5------6-7--8----9\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5------6-7\"",
        "output": "[1, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-----6------7-------8--------9---------10----------11-----------12\"",
        "output": "[1, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8--9-10--11--12-13--14-15--16-17--18--19--20--21--22--23\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4-5-6--7----8----9\"",
        "output": "[1, 2, 5, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7--8--9--10--11--12--13--14--15--16--17--18--19\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13--14--15--16--17--18--19--20--21--22--23\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4----5----6--7\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8--9-10\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3----4----5----6----7----8----9\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7-8----9----10\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3-4--5-6--7-8--9-10-11-12-13-14-15-16\"",
        "output": "[1, 2, 4, 3, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-----6------7\"",
        "output": "[1, 2, None, 3, None, 4, None, 5, None, 6, None, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5----6--7----8\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13--14--15--16--17\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3-4--5--6--7--8-9--10--11--12--13--14--15--16--17--18--19--20--21\"",
        "output": "[1, 2, 4, 3, None, 5, 6]"
      },
      {
        "input": "traversal = \"1-2--3--4----5------6----7---8-9----10--11\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5-6--7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4----5----6------7------8----9\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7--8-9--10-11-12-13-14\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13--14-15\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13--14--15--16--17--18--19--20--21--22--23--24--25\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9-10-11-12-13-14-15-16\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5------6---------7----------8\"",
        "output": "[1, 2, None, 3, None, 4, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3---4----5--6---7----8\"",
        "output": "[1, 2, None, 3, 6, 4, None, 7, None, 5, None, 8]"
      },
      {
        "input": "traversal = \"1-2--3--4---5----6-7--8-9-10-11-12\"",
        "output": "[1, 2, 7, 3, 4, 8, None, None, None, 5, None, None, None, 6]"
      },
      {
        "input": "traversal = \"1-2--3--4----5------6---------7----------8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5-6--7---8----9\"",
        "output": "[1, 2, 5, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3----4-----5------6\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7--8-9--10-11-12-13-14-15-16-17\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3----4------5--------6----------7\"",
        "output": "[1, 2, None, 3]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8-9-10-11\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4----5------6---------7----------8-9-10-11-12-13-14\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3---4----5-6--7---8\"",
        "output": "[1, 2, 6, 3, None, 7, None, 4, None, 8, None, 5]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13--14--15--16--17--18\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3-4--5--6--7--8-9--10-11-12-13-14-15-16-17-18-19-20\"",
        "output": "[1, 2, 4, 3, None, 5, 6]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7-8--9--10--11--12--13--14--15--16--17--18--19\"",
        "output": "[1, 2, None, 3, 4]"
      },
      {
        "input": "traversal = \"1-2--3--4-5--6--7-8--9-10--11--12-13--14-15--16-17--18--19\"",
        "output": "[1, 2, 5, 3, 4, 6, 7]"
      },
      {
        "input": "traversal = \"1-2--3--4--5--6--7--8--9--10--11--12--13--14--15--16--17--18--19--20--21--22--23--24\"",
        "output": "[1, 2, None, 3, 4]"
      }
    ]
  },
  {
    "id": 1579,
    "difficulty": "Hard",
    "tags": [
      "Union Find",
      "Graph"
    ],
    "problemDescription": "Alice and Bob have an undirected graph of n nodes and three types of edges:\n\nType 1: Can be traversed by Alice only.\nType 2: Can be traversed by Bob only.\nType 3: Can be traversed by both Alice and Bob.\n\nGiven an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.\nReturn the maximum number of edges you can remove, or return -1 if Alice and Bob cannot fully traverse the graph.\n\u00a0\nExample 1:\n\n\nInput: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]\nOutput: 2\nExplanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.\n\nExample 2:\n\n\nInput: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]\nOutput: 0\nExplanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.\n\nExample 3:\n\n\nInput: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]\nOutput: -1\nExplanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.\n\u00a0\n\u00a0\nConstraints:\n\n1 <= n <= 105\n1 <= edges.length <= min(105, 3 * n * (n - 1) / 2)\nedges[i].length == 3\n1 <= typei <= 3\n1 <= ui < vi <= n\nAll tuples (typei, ui, vi) are distinct.\n\n",
    "starterCode": "class Solution:\n    def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 5, edges = [[1,1,2],[2,2,3],[3,3,4],[3,4,5],[1,2,3],[2,3,4]]",
        "output": "-1"
      },
      {
        "input": "n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]",
        "output": "2"
      },
      {
        "input": "n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]",
        "output": "0"
      },
      {
        "input": "n = 5, edges = [[3,1,2],[3,2,3],[3,4,5],[1,1,3],[1,1,4],[2,3,5]]",
        "output": "1"
      },
      {
        "input": "n = 3, edges = [[1,1,2],[2,1,2],[3,2,3]]",
        "output": "0"
      },
      {
        "input": "n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]",
        "output": "-1"
      },
      {
        "input": "n = 6, edges = [[1,1,2],[1,2,3],[2,3,4],[2,4,5],[3,5,6]]",
        "output": "-1"
      },
      {
        "input": "n = 3, edges = [[3,1,2],[1,1,3],[2,2,3]]",
        "output": "0"
      },
      {
        "input": "n = 8, edges = [[3,1,2],[3,2,3],[3,3,4],[1,1,5],[1,5,6],[1,6,7],[2,4,5],[2,5,8],[3,7,8],[1,2,8],[2,3,7]]",
        "output": "-1"
      },
      {
        "input": "n = 20, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[3,12,13],[3,13,14],[3,14,15],[3,15,16],[3,16,17],[3,17,18],[3,18,19],[3,19,20],[1,1,20],[2,2,19],[1,3,18],[2,4,17],[1,5,16],[2,6,15],[1,7,14],[2,8,13],[1,9,12],[2,10,11]]",
        "output": "10"
      },
      {
        "input": "n = 7, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[1,5,6],[1,6,7],[2,5,7],[1,1,4],[2,1,2]]",
        "output": "-1"
      },
      {
        "input": "n = 15, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[3,12,13],[3,13,14],[3,14,15],[1,1,15],[2,2,14],[1,3,13],[2,4,12],[1,5,11],[2,6,10],[1,7,9],[2,8,9]]",
        "output": "8"
      },
      {
        "input": "n = 15, edges = [[3,1,2],[1,2,3],[2,3,4],[1,4,5],[2,5,6],[1,6,7],[2,7,8],[3,8,1],[3,1,3],[3,2,4],[3,4,6],[3,5,7],[1,9,10],[2,10,11],[3,11,12],[1,12,13],[2,13,14],[3,14,15],[1,15,1]]",
        "output": "-1"
      },
      {
        "input": "n = 12, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[1,1,12],[2,1,12],[1,2,3],[2,3,2],[1,4,5],[2,5,4],[1,6,7],[2,7,6],[1,8,9],[2,9,8]]",
        "output": "10"
      },
      {
        "input": "n = 6, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,4,5],[2,3,4],[2,5,6],[3,1,4]]",
        "output": "-1"
      },
      {
        "input": "n = 6, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[1,1,6],[2,1,6]]",
        "output": "2"
      },
      {
        "input": "n = 20, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[3,12,13],[3,13,14],[3,14,15],[3,15,16],[3,16,17],[3,17,18],[3,18,19],[3,19,20],[1,1,6],[2,6,12],[1,5,7],[2,5,8],[1,3,9],[3,2,10],[1,4,11],[2,7,13],[3,8,14],[1,9,15],[2,10,14],[1,11,16],[2,12,17],[1,13,18],[2,14,19],[1,15,20],[2,16,18],[3,17,19]]",
        "output": "18"
      },
      {
        "input": "n = 8, edges = [[3,1,2],[1,1,3],[2,2,3],[3,3,4],[1,3,4],[2,3,4],[3,4,5],[1,4,5],[2,4,5],[3,5,6],[1,5,6],[2,5,6],[3,6,7],[1,6,7],[2,6,7],[3,7,8],[1,7,8],[2,7,8],[1,1,8],[2,1,8]]",
        "output": "12"
      },
      {
        "input": "n = 7, edges = [[1,1,2],[1,2,3],[1,3,4],[2,4,5],[2,5,6],[2,6,7],[3,1,7],[3,2,6],[3,3,5],[3,4,8]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 8, edges = [[3,1,2],[3,2,3],[3,3,4],[1,1,4],[2,4,5],[1,5,6],[2,6,7],[1,7,8],[2,1,8],[1,2,5],[2,3,6],[1,4,7],[2,5,8]]",
        "output": "2"
      },
      {
        "input": "n = 8, edges = [[1,1,2],[2,2,3],[1,3,4],[2,4,5],[1,5,6],[2,6,7],[1,7,8],[2,8,1],[3,1,5],[3,2,6],[3,3,7],[3,4,8]]",
        "output": "-1"
      },
      {
        "input": "n = 15, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[3,12,13],[3,13,14],[3,14,15],[1,1,8],[1,8,15],[2,2,9],[2,9,14]]",
        "output": "4"
      },
      {
        "input": "n = 6, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[1,1,2],[1,3,4],[1,5,6],[2,2,3],[2,4,5]]",
        "output": "5"
      },
      {
        "input": "n = 9, edges = [[3,1,2],[3,2,3],[3,3,4],[1,4,5],[1,5,6],[2,6,7],[2,7,8],[1,8,9],[2,1,2],[2,1,3],[1,1,9]]",
        "output": "-1"
      },
      {
        "input": "n = 7, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[1,1,6],[1,6,7],[2,2,4],[2,4,6],[2,5,7],[1,2,5],[2,1,3],[3,1,7]]",
        "output": "5"
      },
      {
        "input": "n = 10, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[1,1,2],[1,3,4],[1,5,6],[1,7,8],[1,9,10],[2,2,3],[2,4,5],[2,6,7],[2,8,9]]",
        "output": "9"
      },
      {
        "input": "n = 20, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[3,12,13],[3,13,14],[3,14,15],[3,15,16],[3,16,17],[3,17,18],[3,18,19],[3,19,20],[1,1,20],[2,20,1],[1,2,3],[2,3,2],[1,4,5],[2,5,4],[1,6,7],[2,7,6],[1,8,9],[2,9,8],[1,10,11],[2,11,10],[1,12,13],[2,13,12],[1,14,15],[2,15,14],[1,16,17],[2,17,16],[1,18,19],[2,19,18]]",
        "output": "20"
      },
      {
        "input": "n = 9, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[1,1,7],[1,7,8],[1,8,9],[2,2,5],[2,5,8],[2,3,6],[3,1,6],[1,2,8],[2,3,7]]",
        "output": "-1"
      },
      {
        "input": "n = 9, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[1,1,4],[1,4,7],[1,7,9],[2,2,5],[2,5,8]]",
        "output": "5"
      },
      {
        "input": "n = 12, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[1,1,6],[1,6,11],[2,2,7],[2,7,12]]",
        "output": "4"
      },
      {
        "input": "n = 6, edges = [[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[2,1,2],[2,2,3],[2,3,4],[2,4,5],[2,5,6],[3,1,3],[3,2,4],[3,3,5],[3,4,6]]",
        "output": "8"
      },
      {
        "input": "n = 12, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[1,6,7],[1,7,8],[1,8,9],[1,9,10],[1,10,11],[1,11,12],[2,1,2],[2,2,3],[2,3,4],[2,4,5],[2,5,6],[2,6,7],[2,7,8],[2,8,9],[2,9,10],[2,10,11],[2,11,12]]",
        "output": "22"
      },
      {
        "input": "n = 10, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[1,1,7],[1,7,8],[1,8,9],[1,9,10],[2,1,10],[2,2,5],[2,3,6],[2,4,7]]",
        "output": "-1"
      },
      {
        "input": "n = 10, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[1,7,8],[1,8,9],[2,9,10],[1,1,10],[2,1,5],[1,2,3]]",
        "output": "-1"
      },
      {
        "input": "n = 11, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[1,6,7],[1,7,8],[1,8,9],[1,9,10],[1,10,11],[2,1,2],[2,2,3],[2,3,4],[2,4,5],[2,5,6],[2,6,7],[2,7,8],[2,8,9],[2,9,10],[2,10,11]]",
        "output": "20"
      },
      {
        "input": "n = 10, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[1,1,3],[2,3,5],[1,5,7],[2,7,9],[1,2,4],[2,4,6],[1,6,8],[2,8,10]]",
        "output": "8"
      },
      {
        "input": "n = 7, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[1,1,2],[1,3,4],[1,5,6],[2,2,3],[2,4,5],[2,6,7],[1,1,7],[2,2,7]]",
        "output": "8"
      },
      {
        "input": "n = 6, edges = [[3,1,2],[3,2,3],[1,1,4],[1,4,5],[2,2,4],[2,4,6],[3,3,5],[3,5,6],[1,1,6],[2,1,2]]",
        "output": "4"
      },
      {
        "input": "n = 10, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[1,1,4],[1,4,7],[1,7,10],[2,2,5],[2,5,8],[2,8,10]]",
        "output": "6"
      },
      {
        "input": "n = 11, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[1,1,11],[2,2,10],[1,3,9],[2,4,8],[1,5,7],[2,6,6],[1,7,5],[2,8,4],[1,9,3],[2,10,2],[1,11,1]]",
        "output": "11"
      },
      {
        "input": "n = 10, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[1,6,7],[1,7,8],[1,8,9],[1,9,10],[2,1,2],[2,2,3],[2,3,4],[2,4,5],[2,5,6],[2,6,7],[2,7,8],[2,8,9],[2,9,10]]",
        "output": "18"
      },
      {
        "input": "n = 7, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[1,1,6],[2,6,7],[1,5,7],[3,2,7]]",
        "output": "1"
      },
      {
        "input": "n = 8, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[1,1,5],[1,5,6],[1,6,7],[1,7,8],[2,2,4],[2,4,6],[2,6,8]]",
        "output": "-1"
      },
      {
        "input": "n = 6, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[2,1,2],[2,2,3],[2,3,4],[2,4,5],[2,5,6]]",
        "output": "10"
      },
      {
        "input": "n = 6, edges = [[3,1,2],[3,2,3],[3,3,4],[1,1,5],[1,2,6],[2,4,5],[2,5,6],[1,3,5],[2,2,4]]",
        "output": "2"
      },
      {
        "input": "n = 10, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,1,3],[1,3,5],[2,5,6],[2,6,7],[2,7,8],[2,8,9],[2,9,10],[2,5,7],[2,7,9]]",
        "output": "-1"
      },
      {
        "input": "n = 9, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[1,1,9],[2,2,8],[1,3,7],[2,4,6],[1,5,5],[2,1,3],[1,2,4],[2,3,6],[1,4,7],[2,5,8],[1,6,9]]",
        "output": "11"
      },
      {
        "input": "n = 10, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[1,1,2],[2,2,3],[1,3,4],[2,4,5],[1,5,6],[2,6,7],[1,7,8],[2,8,9],[1,9,10],[1,1,10]]",
        "output": "10"
      },
      {
        "input": "n = 7, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[1,1,4],[2,2,5],[1,2,3],[2,3,4],[1,3,6],[2,4,7],[1,5,6],[2,5,7],[1,6,7]]",
        "output": "9"
      },
      {
        "input": "n = 10, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[1,1,5],[2,5,10]]",
        "output": "2"
      },
      {
        "input": "n = 12, edges = [[3,1,2],[3,2,3],[3,3,4],[1,1,5],[1,5,6],[1,6,7],[2,4,5],[2,5,8],[3,7,8],[1,2,8],[2,3,7],[1,9,10],[2,10,11],[3,11,12],[1,1,12],[2,1,11]]",
        "output": "-1"
      },
      {
        "input": "n = 10, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4],[3,4,5],[1,5,6],[2,6,7],[1,7,8],[2,8,9],[1,9,10],[2,10,1],[3,1,10]]",
        "output": "-1"
      },
      {
        "input": "n = 8, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[1,1,6],[2,6,7],[1,5,7],[2,5,8],[1,3,8],[3,1,5]]",
        "output": "-1"
      },
      {
        "input": "n = 12, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[1,1,6],[2,6,12],[1,5,7],[2,5,8],[1,3,9],[3,2,10]]",
        "output": "6"
      },
      {
        "input": "n = 15, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[3,12,13],[3,13,14],[3,14,15],[1,1,6],[2,6,12],[1,5,7],[2,5,8],[1,3,9],[3,2,10],[1,4,11],[2,7,13],[3,8,14],[1,9,15],[2,10,14]]",
        "output": "11"
      },
      {
        "input": "n = 7, edges = [[1,1,2],[1,2,3],[1,3,4],[2,4,5],[2,5,6],[2,6,7],[3,1,7]]",
        "output": "-1"
      },
      {
        "input": "n = 7, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[1,6,7],[2,1,2],[2,2,3],[2,3,4],[2,4,5],[2,5,6],[2,6,7]]",
        "output": "12"
      },
      {
        "input": "n = 9, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[1,6,7],[1,7,8],[1,8,9],[2,1,2],[2,2,3],[2,3,4],[2,4,5],[2,5,6],[2,6,7],[2,7,8],[2,8,9]]",
        "output": "16"
      },
      {
        "input": "n = 9, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[1,1,2],[1,3,4],[1,5,6],[1,7,8],[2,2,3],[2,4,5],[2,6,7],[2,8,9],[1,1,9],[2,2,9]]",
        "output": "10"
      },
      {
        "input": "n = 8, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[1,6,7],[1,7,8],[2,5,7],[2,6,8],[1,1,3],[2,1,4]]",
        "output": "2"
      },
      {
        "input": "n = 7, edges = [[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[1,6,7],[2,1,2],[2,2,3],[2,3,4],[2,4,5],[2,5,6],[2,6,7],[3,1,4],[3,2,5],[3,3,6],[3,4,7]]",
        "output": "8"
      },
      {
        "input": "n = 8, edges = [[3,1,2],[1,2,3],[2,3,4],[1,4,5],[2,5,6],[1,6,7],[2,7,8],[3,8,1],[3,1,3],[3,2,4],[3,4,6],[3,5,7]]",
        "output": "4"
      },
      {
        "input": "n = 8, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[1,6,7],[1,7,8],[2,1,2],[2,2,3],[2,3,4],[2,4,5],[2,5,6],[2,6,7],[2,7,8]]",
        "output": "14"
      },
      {
        "input": "n = 15, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[3,12,13],[3,13,14],[3,14,15],[1,1,5],[2,5,9],[1,9,13],[2,13,15],[1,2,3],[2,4,6],[1,6,7],[2,8,10],[1,10,11],[2,12,14]]",
        "output": "10"
      },
      {
        "input": "n = 12, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[3,6,7],[3,7,8],[3,8,9],[3,9,10],[3,10,11],[3,11,12],[1,1,3],[2,3,5],[1,5,7],[2,7,9],[1,9,11],[2,1,2],[1,2,4],[2,4,6],[1,6,8],[2,8,10],[1,10,12]]",
        "output": "11"
      },
      {
        "input": "n = 6, edges = [[3,1,2],[3,2,3],[3,3,4],[3,4,5],[3,5,6],[1,1,3],[2,2,4],[1,1,2],[2,3,4],[1,2,5],[2,4,6]]",
        "output": "6"
      }
    ]
  },
  {
    "id": 902,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Math",
      "String",
      "Binary Search",
      "Dynamic Programming"
    ],
    "problemDescription": "Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.\nReturn the number of positive integers that can be generated that are less than or equal to a given integer n.\n\u00a0\nExample 1:\n\nInput: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\nOutput: 20\nExplanation: \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n\nExample 2:\n\nInput: digits = [\"1\",\"4\",\"9\"], n = 1000000000\nOutput: 29523\nExplanation: \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.\n\nExample 3:\n\nInput: digits = [\"7\"], n = 8\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= digits.length <= 9\ndigits[i].length == 1\ndigits[i] is a digit from\u00a0'1'\u00a0to '9'.\nAll the values in\u00a0digits are unique.\ndigits is sorted in\u00a0non-decreasing order.\n1 <= n <= 109\n\n",
    "starterCode": "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "digits = [\"1\",\"4\",\"9\"], n = 1000000000",
        "output": "29523"
      },
      {
        "input": "digits = [\"7\"], n = 8",
        "output": "1"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\"], n = 123",
        "output": "18"
      },
      {
        "input": "digits = [\"2\",\"3\",\"5\"], n = 250",
        "output": "18"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"], n = 999",
        "output": "819"
      },
      {
        "input": "digits = [\"3\",\"4\",\"5\"], n = 1000",
        "output": "39"
      },
      {
        "input": "digits = [\"1\",\"3\",\"5\",\"7\"], n = 100",
        "output": "20"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\"], n = 123456789",
        "output": "14214"
      },
      {
        "input": "digits = [\"1\", \"3\", \"5\", \"7\"], n = 100000000",
        "output": "87380"
      },
      {
        "input": "digits = [\"2\", \"4\", \"6\", \"8\"], n = 5000",
        "output": "212"
      },
      {
        "input": "digits = [\"2\", \"4\"], n = 100",
        "output": "6"
      },
      {
        "input": "digits = [\"2\", \"4\", \"6\", \"8\"], n = 468246824",
        "output": "198406"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], n = 1000000000",
        "output": "435848049"
      },
      {
        "input": "digits = [\"1\", \"3\", \"5\", \"7\", \"9\"], n = 99999",
        "output": "3905"
      },
      {
        "input": "digits = [\"1\",\"5\",\"9\"], n = 99999",
        "output": "363"
      },
      {
        "input": "digits = [\"2\",\"3\",\"6\",\"7\",\"8\"], n = 123456789",
        "output": "488280"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\"], n = 1000",
        "output": "84"
      },
      {
        "input": "digits = [\"5\", \"9\"], n = 555555555",
        "output": "511"
      },
      {
        "input": "digits = [\"2\",\"5\",\"9\"], n = 10000",
        "output": "120"
      },
      {
        "input": "digits = [\"2\", \"4\", \"8\"], n = 888888888",
        "output": "29523"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], n = 999999999",
        "output": "435848049"
      },
      {
        "input": "digits = [\"3\", \"6\", \"9\"], n = 333699",
        "output": "381"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\"], n = 10000",
        "output": "120"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\",\"4\"], n = 5000",
        "output": "340"
      },
      {
        "input": "digits = [\"2\", \"4\", \"6\", \"8\"], n = 1000000",
        "output": "5460"
      },
      {
        "input": "digits = [\"1\",\"3\",\"5\",\"7\",\"9\"], n = 555555555",
        "output": "1464843"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\", \"5\"], n = 9999",
        "output": "780"
      },
      {
        "input": "digits = [\"4\",\"5\",\"6\"], n = 456",
        "output": "18"
      },
      {
        "input": "digits = [\"1\", \"3\", \"5\", \"7\", \"9\"], n = 500000000",
        "output": "1269530"
      },
      {
        "input": "digits = [\"1\", \"2\", \"5\"], n = 100000",
        "output": "363"
      },
      {
        "input": "digits = [\"1\", \"2\"], n = 212121212",
        "output": "852"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\"], n = 111111111",
        "output": "9841"
      },
      {
        "input": "digits = [\"2\", \"3\", \"7\", \"8\"], n = 5000",
        "output": "212"
      },
      {
        "input": "digits = [\"2\",\"6\",\"9\"], n = 123456789",
        "output": "9840"
      },
      {
        "input": "digits = [\"1\", \"3\", \"7\", \"9\"], n = 123456789",
        "output": "103764"
      },
      {
        "input": "digits = [\"2\",\"6\",\"8\"], n = 100000",
        "output": "363"
      },
      {
        "input": "digits = [\"2\", \"5\", \"8\"], n = 500",
        "output": "21"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\", \"5\"], n = 5000",
        "output": "655"
      },
      {
        "input": "digits = [\"8\", \"9\"], n = 999999999",
        "output": "1022"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\",\"4\"], n = 43210",
        "output": "1252"
      },
      {
        "input": "digits = [\"1\", \"9\"], n = 999999999",
        "output": "1022"
      },
      {
        "input": "digits = [\"2\", \"6\", \"8\"], n = 4500",
        "output": "66"
      },
      {
        "input": "digits = [\"1\", \"3\", \"5\"], n = 555555555",
        "output": "29523"
      },
      {
        "input": "digits = [\"1\",\"4\",\"7\",\"9\"], n = 123456789",
        "output": "103764"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], n = 123456789",
        "output": "54481005"
      },
      {
        "input": "digits = [\"5\"], n = 1000000000",
        "output": "9"
      },
      {
        "input": "digits = [\"1\", \"9\"], n = 1000000000",
        "output": "1022"
      },
      {
        "input": "digits = [\"1\", \"6\", \"8\"], n = 5678",
        "output": "66"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"], n = 123456789",
        "output": "54481005"
      },
      {
        "input": "digits = [\"1\",\"3\",\"5\",\"7\",\"9\"], n = 99999",
        "output": "3905"
      },
      {
        "input": "digits = [\"2\",\"4\",\"6\",\"8\"], n = 888888888",
        "output": "349524"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\", \"5\"], n = 100000",
        "output": "3905"
      },
      {
        "input": "digits = [\"1\",\"2\",\"4\",\"8\"], n = 1024",
        "output": "84"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\"], n = 987654321",
        "output": "349524"
      },
      {
        "input": "digits = [\"1\",\"5\",\"7\",\"9\"], n = 1579",
        "output": "112"
      },
      {
        "input": "digits = [\"2\",\"6\",\"8\"], n = 2688",
        "output": "57"
      },
      {
        "input": "digits = [\"1\", \"3\", \"5\", \"7\"], n = 777777777",
        "output": "349524"
      },
      {
        "input": "digits = [\"9\"], n = 999999999",
        "output": "9"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"], n = 111111111",
        "output": "48427561"
      },
      {
        "input": "digits = [\"1\"], n = 1000000000",
        "output": "9"
      },
      {
        "input": "digits = [\"1\",\"3\",\"5\",\"7\",\"9\"], n = 563827194",
        "output": "1503905"
      },
      {
        "input": "digits = [\"2\", \"6\", \"9\"], n = 1000000",
        "output": "1092"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\"], n = 1111",
        "output": "40"
      },
      {
        "input": "digits = [\"1\",\"6\",\"8\"], n = 1000000000",
        "output": "29523"
      },
      {
        "input": "digits = [\"5\", \"7\", \"9\"], n = 100000",
        "output": "363"
      },
      {
        "input": "digits = [\"4\", \"8\"], n = 888",
        "output": "14"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\"], n = 333",
        "output": "39"
      },
      {
        "input": "digits = [\"1\",\"2\",\"5\"], n = 1111",
        "output": "40"
      },
      {
        "input": "digits = [\"1\",\"2\"], n = 1024",
        "output": "14"
      },
      {
        "input": "digits = [\"5\",\"8\"], n = 5885",
        "output": "21"
      },
      {
        "input": "digits = [\"6\", \"7\", \"8\"], n = 99999",
        "output": "363"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\"], n = 9999",
        "output": "340"
      },
      {
        "input": "digits = [\"3\", \"5\", \"7\", \"9\"], n = 1000000",
        "output": "5460"
      },
      {
        "input": "digits = [\"2\",\"3\",\"5\",\"7\"], n = 777777777",
        "output": "349524"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\", \"5\"], n = 12345",
        "output": "975"
      },
      {
        "input": "digits = [\"1\",\"7\",\"9\"], n = 979797",
        "output": "1001"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"], n = 654321",
        "output": "54121"
      },
      {
        "input": "digits = [\"1\", \"3\", \"5\", \"7\", \"9\"], n = 987654321",
        "output": "2363280"
      },
      {
        "input": "digits = [\"1\",\"2\",\"5\"], n = 1000000000",
        "output": "29523"
      },
      {
        "input": "digits = [\"1\", \"4\", \"9\"], n = 100000000",
        "output": "9840"
      },
      {
        "input": "digits = [\"1\",\"5\",\"9\"], n = 1000000000",
        "output": "29523"
      },
      {
        "input": "digits = [\"3\",\"9\"], n = 393939",
        "output": "84"
      },
      {
        "input": "digits = [\"1\", \"2\"], n = 1024",
        "output": "14"
      },
      {
        "input": "digits = [\"1\",\"5\",\"9\"], n = 999999999",
        "output": "29523"
      },
      {
        "input": "digits = [\"1\",\"3\",\"5\",\"7\"], n = 777777777",
        "output": "349524"
      },
      {
        "input": "digits = [\"1\", \"3\", \"5\", \"7\", \"9\"], n = 123456789",
        "output": "566405"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\",\"4\",\"5\"], n = 50000",
        "output": "3280"
      },
      {
        "input": "digits = [\"1\", \"3\", \"5\", \"7\", \"9\"], n = 20000",
        "output": "1405"
      },
      {
        "input": "digits = [\"1\", \"3\", \"7\"], n = 77777777",
        "output": "9840"
      },
      {
        "input": "digits = [\"5\",\"7\",\"9\"], n = 888888888",
        "output": "22962"
      },
      {
        "input": "digits = [\"1\",\"2\",\"4\",\"8\"], n = 999999999",
        "output": "349524"
      },
      {
        "input": "digits = [\"3\",\"7\",\"8\"], n = 378378378",
        "output": "13626"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"], n = 999999999",
        "output": "435848049"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"], n = 987654321",
        "output": "429794605"
      },
      {
        "input": "digits = [\"3\", \"7\", \"9\"], n = 999999999",
        "output": "29523"
      },
      {
        "input": "digits = [\"1\", \"2\", \"3\"], n = 321",
        "output": "34"
      },
      {
        "input": "digits = [\"3\",\"7\",\"8\"], n = 1234",
        "output": "39"
      },
      {
        "input": "digits = [\"1\", \"5\", \"9\"], n = 987654321",
        "output": "27336"
      },
      {
        "input": "digits = [\"1\",\"3\",\"5\",\"7\",\"9\"], n = 999999999",
        "output": "2441405"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"], n = 987654321",
        "output": "429794605"
      },
      {
        "input": "digits = [\"2\",\"3\",\"7\",\"8\"], n = 8732",
        "output": "313"
      },
      {
        "input": "digits = [\"2\",\"4\",\"6\",\"8\"], n = 100000000",
        "output": "87380"
      },
      {
        "input": "digits = [\"1\"], n = 1000000",
        "output": "6"
      },
      {
        "input": "digits = [\"3\", \"5\", \"7\"], n = 100000000",
        "output": "9840"
      },
      {
        "input": "digits = [\"2\", \"6\", \"7\"], n = 10000",
        "output": "120"
      },
      {
        "input": "digits = [\"1\", \"3\", \"7\", \"9\"], n = 50000",
        "output": "852"
      },
      {
        "input": "digits = [\"1\",\"2\",\"3\",\"4\",\"5\"], n = 222222222",
        "output": "976562"
      },
      {
        "input": "digits = [\"1\",\"9\"], n = 500000000",
        "output": "766"
      },
      {
        "input": "digits = [\"1\",\"3\",\"5\"], n = 999999999",
        "output": "29523"
      },
      {
        "input": "digits = [\"1\", \"5\", \"7\", \"8\"], n = 100000",
        "output": "1364"
      },
      {
        "input": "digits = [\"1\",\"9\"], n = 1000000000",
        "output": "1022"
      },
      {
        "input": "digits = [\"5\",\"6\",\"7\"], n = 777777777",
        "output": "29523"
      },
      {
        "input": "digits = [\"3\", \"5\", \"7\"], n = 357357",
        "output": "504"
      }
    ]
  },
  {
    "id": 52,
    "difficulty": "Hard",
    "tags": [
      "Backtracking"
    ],
    "problemDescription": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return the number of distinct solutions to the\u00a0n-queens puzzle.\n\u00a0\nExample 1:\n\n\nInput: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.\n\nExample 2:\n\nInput: n = 1\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= n <= 9\n\n",
    "starterCode": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 8",
        "output": "92"
      },
      {
        "input": "n = 3",
        "output": "0"
      },
      {
        "input": "n = 4",
        "output": "2"
      },
      {
        "input": "n = 9",
        "output": "352"
      },
      {
        "input": "n = 6",
        "output": "4"
      },
      {
        "input": "n = 2",
        "output": "0"
      },
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 7",
        "output": "40"
      },
      {
        "input": "n = 5",
        "output": "10"
      }
    ]
  },
  {
    "id": 3022,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Bit Manipulation",
      "Array"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums and an integer k.\nIn one operation, you can pick any index i of nums such that 0 <= i < nums.length - 1 and replace nums[i] and nums[i + 1] with a single occurrence of nums[i] & nums[i + 1], where & represents the bitwise AND operator.\nReturn the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\n\u00a0\nExample 1:\n\nInput: nums = [3,5,3,2,7], k = 2\nOutput: 3\nExplanation: Let's do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [1,3,2,7].\n2. Replace nums[2] and nums[3] with (nums[2] & nums[3]) so that nums becomes equal to [1,3,2].\nThe bitwise-or of the final array is 3.\nIt can be shown that 3 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\nExample 2:\n\nInput: nums = [7,3,15,14,2,8], k = 4\nOutput: 2\nExplanation: Let's do the following operations:\n1. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [3,15,14,2,8]. \n2. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [3,14,2,8].\n3. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [2,2,8].\n4. Replace nums[1] and nums[2] with (nums[1] & nums[2]) so that nums becomes equal to [2,0].\nThe bitwise-or of the final array is 2.\nIt can be shown that 2 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\n\nExample 3:\n\nInput: nums = [10,7,10,3,9,14,9,4], k = 1\nOutput: 15\nExplanation: Without applying any operations, the bitwise-or of nums is 15.\nIt can be shown that 15 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] < 230\n0 <= k < nums.length\n\n",
    "starterCode": "class Solution:\n    def minOrAfterOperations(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [30,20,10,0], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [5,5,5,5,5,5], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [0,0,0,0,0], k = 0",
        "output": "0"
      },
      {
        "input": "nums = [1,0,1,0,1], k = 2",
        "output": "1"
      },
      {
        "input": "nums = [31,31,31,31,31], k = 3",
        "output": "31"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [0,0,0,0,0], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [30,29,28,27,26], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "7"
      },
      {
        "input": "nums = [8,8,8,8,8], k = 2",
        "output": "8"
      },
      {
        "input": "nums = [29,29,29,29,29], k = 4",
        "output": "29"
      },
      {
        "input": "nums = [25,15,5,1,0], k = 3",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,7,9,11], k = 3",
        "output": "1"
      },
      {
        "input": "nums = [30,29,28,27,26,25], k = 5",
        "output": "24"
      },
      {
        "input": "nums = [10,7,10,3,9,14,9,4], k = 1",
        "output": "15"
      },
      {
        "input": "nums = [1,2,4,8,16], k = 2",
        "output": "1"
      },
      {
        "input": "nums = [8,12,4,6,10], k = 2",
        "output": "12"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 9",
        "output": "1"
      },
      {
        "input": "nums = [7,3,15,14,2,8], k = 4",
        "output": "2"
      },
      {
        "input": "nums = [31,15,7,3,1], k = 4",
        "output": "1"
      },
      {
        "input": "nums = [16,16,16,16,16], k = 0",
        "output": "16"
      },
      {
        "input": "nums = [31,31,31,31,31], k = 4",
        "output": "31"
      },
      {
        "input": "nums = [3,5,3,2,7], k = 2",
        "output": "3"
      },
      {
        "input": "nums = [1,1,1,1,1], k = 4",
        "output": "1"
      },
      {
        "input": "nums = [31,15,7,3,1], k = 3",
        "output": "3"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7], k = 6",
        "output": "7"
      },
      {
        "input": "nums = [255, 127, 63, 31, 15, 7, 3, 1], k = 3",
        "output": "31"
      },
      {
        "input": "nums = [31, 31, 31, 31, 31, 31, 31, 31, 31, 31], k = 9",
        "output": "31"
      },
      {
        "input": "nums = [15, 7, 7, 7, 7, 7, 7, 7, 7, 7], k = 4",
        "output": "7"
      },
      {
        "input": "nums = [16, 8, 4, 2, 1, 32, 16, 8, 4, 2, 1], k = 7",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023], k = 9",
        "output": "1"
      },
      {
        "input": "nums = [30, 21, 45, 12, 8, 16, 32, 64, 128, 256], k = 7",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 10",
        "output": "7"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], k = 5",
        "output": "31"
      },
      {
        "input": "nums = [255, 254, 253, 252, 251, 250, 249, 248, 247, 246], k = 5",
        "output": "254"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], k = 10",
        "output": "3"
      },
      {
        "input": "nums = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023], k = 5",
        "output": "31"
      },
      {
        "input": "nums = [128, 64, 32, 16, 8, 4, 2, 1, 0], k = 7",
        "output": "0"
      },
      {
        "input": "nums = [18, 5, 12, 9, 3, 14, 7, 11, 6, 4, 10, 8, 2, 13, 1], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575], k = 19",
        "output": "1"
      },
      {
        "input": "nums = [1048575, 524287, 262143, 131071, 65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], k = 19",
        "output": "1"
      },
      {
        "input": "nums = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], k = 25",
        "output": "15"
      },
      {
        "input": "nums = [31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31], k = 18",
        "output": "31"
      },
      {
        "input": "nums = [31, 14, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 28",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 4",
        "output": "62"
      },
      {
        "input": "nums = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1], k = 5",
        "output": "15"
      },
      {
        "input": "nums = [31, 14, 7, 3, 1, 0, 0, 0, 0, 0], k = 10",
        "output": "0"
      },
      {
        "input": "nums = [512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 19",
        "output": "0"
      },
      {
        "input": "nums = [2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607, 4194303], k = 9",
        "output": "4194303"
      },
      {
        "input": "nums = [1048575, 524287, 262143, 131071, 65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 25",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 25",
        "output": "1"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8], k = 8",
        "output": "7"
      },
      {
        "input": "nums = [1048575, 524287, 262143, 131071, 65535, 32767, 16383, 8191, 4095, 2047], k = 9",
        "output": "2047"
      },
      {
        "input": "nums = [10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120], k = 9",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 9",
        "output": "1"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], k = 29",
        "output": "3"
      },
      {
        "input": "nums = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], k = 9",
        "output": "1"
      },
      {
        "input": "nums = [31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 29",
        "output": "0"
      },
      {
        "input": "nums = [1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023], k = 9",
        "output": "1023"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 15",
        "output": "15"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 19",
        "output": "1"
      },
      {
        "input": "nums = [2147483647, 2147483647, 2147483647, 2147483647, 2147483647], k = 100000",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 20",
        "output": "3"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], k = 25",
        "output": "7"
      },
      {
        "input": "nums = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255], k = 9",
        "output": "255"
      },
      {
        "input": "nums = [255, 127, 63, 31, 15, 7, 3, 1, 0, 255, 128], k = 10",
        "output": "0"
      },
      {
        "input": "nums = [30, 15, 7, 3, 1, 15, 7, 3, 1, 15, 7, 3, 1, 15, 7, 3, 1, 15, 7, 3], k = 15",
        "output": "3"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21], k = 5",
        "output": "28"
      },
      {
        "input": "nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21], k = 5",
        "output": "15"
      },
      {
        "input": "nums = [1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009], k = 13",
        "output": "1008"
      },
      {
        "input": "nums = [29, 21, 13, 5, 1], k = 3",
        "output": "5"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 29",
        "output": "1"
      },
      {
        "input": "nums = [29, 31, 28, 27, 26, 25, 24, 23, 22, 21], k = 8",
        "output": "20"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], k = 5",
        "output": "4088"
      },
      {
        "input": "nums = [29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 29",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], k = 13",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113], k = 15",
        "output": "63"
      },
      {
        "input": "nums = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 9",
        "output": "0"
      },
      {
        "input": "nums = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0], k = 9",
        "output": "1"
      },
      {
        "input": "nums = [4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0, 0, 0, 0], k = 13",
        "output": "0"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 5, 3, 1], k = 6",
        "output": "0"
      },
      {
        "input": "nums = [255, 127, 63, 31, 15, 7, 3, 1, 255, 127, 63], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 10",
        "output": "0"
      },
      {
        "input": "nums = [1048575, 524287, 262143, 131071, 65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], k = 15",
        "output": "31"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 7",
        "output": "5"
      },
      {
        "input": "nums = [30, 14, 7, 3, 1, 0, 15, 8, 4, 2], k = 6",
        "output": "2"
      },
      {
        "input": "nums = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095], k = 11",
        "output": "1"
      },
      {
        "input": "nums = [255, 128, 64, 32, 16, 8, 4, 2, 1], k = 7",
        "output": "0"
      },
      {
        "input": "nums = [255, 128, 64, 32, 16, 8, 4, 2, 1, 255, 128, 64, 32, 16, 8, 4, 2, 1], k = 17",
        "output": "0"
      },
      {
        "input": "nums = [2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607, 4194303], k = 3",
        "output": "268435455"
      },
      {
        "input": "nums = [31, 62, 124, 248, 496, 992, 1984, 3968, 7936, 15872], k = 8",
        "output": "24"
      },
      {
        "input": "nums = [30, 28, 24, 16, 8, 4, 2, 1], k = 6",
        "output": "0"
      },
      {
        "input": "nums = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], k = 8",
        "output": "3"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 14",
        "output": "0"
      },
      {
        "input": "nums = [128, 64, 32, 16, 8, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0], k = 14",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], k = 5",
        "output": "31"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 7",
        "output": "5"
      },
      {
        "input": "nums = [29, 21, 14, 7, 3, 1, 0], k = 6",
        "output": "0"
      },
      {
        "input": "nums = [255, 127, 63, 31, 15, 7, 3, 1, 255, 127, 63, 31, 15, 7, 3, 1, 255, 127, 63, 31], k = 18",
        "output": "1"
      },
      {
        "input": "nums = [1048575, 524287, 262143, 131071, 65535, 32767, 16383, 8191, 4095, 2047], k = 8",
        "output": "4095"
      },
      {
        "input": "nums = [29, 17, 3, 15, 8, 12, 7], k = 3",
        "output": "15"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000, 62500000, 31250000, 15625000, 7812500, 3906250, 1953125], k = 5",
        "output": "16777215"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576], k = 19",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 4",
        "output": "1"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], k = 9",
        "output": "3"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 25",
        "output": "3"
      },
      {
        "input": "nums = [17, 34, 68, 136, 272, 544, 1088, 2176, 4352, 8704], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607, 4194303, 2097151, 1048575, 524287, 262143, 131071, 65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], k = 25",
        "output": "63"
      }
    ]
  },
  {
    "id": 2659,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Binary Indexed Tree",
      "Segment Tree",
      "Array",
      "Binary Search",
      "Ordered Set",
      "Sorting"
    ],
    "problemDescription": "You are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty:\n\nIf the first element has the smallest value, remove it\nOtherwise, put the first element at the end of the array.\n\nReturn an integer denoting the number of operations it takes to make nums empty.\n\u00a0\nExample 1:\n\nInput: nums = [3,4,-1]\nOutput: 5\n\n\n\n\nOperation\nArray\n\n\n\n\n1\n[4, -1, 3]\n\n\n2\n[-1, 3, 4]\n\n\n3\n[3, 4]\n\n\n4\n[4]\n\n\n5\n[]\n\n\n\nExample 2:\n\nInput: nums = [1,2,4,3]\nOutput: 5\n\n\n\n\nOperation\nArray\n\n\n\n\n1\n[2, 4, 3]\n\n\n2\n[4, 3]\n\n\n3\n[3, 4]\n\n\n4\n[4]\n\n\n5\n[]\n\n\n\nExample 3:\n\nInput: nums = [1,2,3]\nOutput: 3\n\n\n\n\nOperation\nArray\n\n\n\n\n1\n[2, 3]\n\n\n2\n[3]\n\n\n3\n[]\n\n\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-109\u00a0<= nums[i] <= 109\nAll values in nums are distinct.\n\n",
    "starterCode": "class Solution:\n    def countOperationsToEmptyArray(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10]",
        "output": "55"
      },
      {
        "input": "nums = [-3,-1,-2,-4]",
        "output": "8"
      },
      {
        "input": "nums = [10, 20, -10, 0]",
        "output": "6"
      },
      {
        "input": "nums = [0,10,-10,5,-5]",
        "output": "9"
      },
      {
        "input": "nums = [-3,-1,0,2,4]",
        "output": "5"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "55"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [1, 3, 2]",
        "output": "4"
      },
      {
        "input": "nums = [7,6,5,4,3,2,1]",
        "output": "28"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5]",
        "output": "15"
      },
      {
        "input": "nums = [1000000000,-1000000000,500000000,-500000000]",
        "output": "7"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "5"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "10"
      },
      {
        "input": "nums = [-3,-2,-1]",
        "output": "3"
      },
      {
        "input": "nums = [0,1,-1,2,-2,3,-3]",
        "output": "22"
      },
      {
        "input": "nums = [0,1,-1,2,-2]",
        "output": "12"
      },
      {
        "input": "nums = [5, 1, 3, 2, 4]",
        "output": "9"
      },
      {
        "input": "nums = [1,3,2]",
        "output": "4"
      },
      {
        "input": "nums = [1000000000, -1000000000, 500000000, -500000000]",
        "output": "7"
      },
      {
        "input": "nums = [-10,-20,-30,-40,-50,-60,-70,-80,-90,-100]",
        "output": "55"
      },
      {
        "input": "nums = [-3,-1,0,2,5]",
        "output": "5"
      },
      {
        "input": "nums = [5,1,2,4,3]",
        "output": "8"
      },
      {
        "input": "nums = [100,200,300,400,500]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,4,3]",
        "output": "5"
      },
      {
        "input": "nums = [5,2,6,1,4]",
        "output": "11"
      },
      {
        "input": "nums = [1,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [3,4,-1]",
        "output": "5"
      },
      {
        "input": "nums = [-100,-200,-300,-400,-500]",
        "output": "15"
      },
      {
        "input": "nums = [5,3,1,2,4]",
        "output": "9"
      },
      {
        "input": "nums = [-5, -1, -3, -2, -4]",
        "output": "9"
      },
      {
        "input": "nums = [50,40,30,20,10]",
        "output": "15"
      },
      {
        "input": "nums = [100, 50, 25, 125, 200]",
        "output": "12"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "20"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 5, 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16]",
        "output": "57"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 50, 150, 250, 350, 450, 650, 750, 850, 950, 550]",
        "output": "120"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "10"
      },
      {
        "input": "nums = [0, 2, 1, 4, 3, 6, 5, 8, 7, 9]",
        "output": "30"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 0, -10, -20, -30, -40]",
        "output": "55"
      },
      {
        "input": "nums = [1, -10, 10, -20, 20, -30, 30, -40, 40, -50, 50]",
        "output": "51"
      },
      {
        "input": "nums = [5, 1, 9, 3, 7, 2, 8, 6, 4, 0]",
        "output": "35"
      },
      {
        "input": "nums = [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "31"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "210"
      },
      {
        "input": "nums = [-1, 0, 1, -2, 2, -3, 3, -4, 4, -5, 5]",
        "output": "45"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "45"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]",
        "output": "50"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "15"
      },
      {
        "input": "nums = [1, 1000000000, 2, 999999999, 3, 999999998, 4, 999999997]",
        "output": "14"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 1, 2, 3, 4, 5]",
        "output": "15"
      },
      {
        "input": "nums = [10, 20, 5, 15, 25, 30]",
        "output": "14"
      },
      {
        "input": "nums = [-1, 1, -2, 2, -3, 3, -4, 4]",
        "output": "26"
      },
      {
        "input": "nums = [-5, -10, -15, -20, -25, -30, -35, -40, -45, -50]",
        "output": "55"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 1]",
        "output": "26"
      },
      {
        "input": "nums = [-100, -200, -300, -50, -25, -125, -62, -31, -156, -78, -39]",
        "output": "48"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "465"
      },
      {
        "input": "nums = [10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 1]",
        "output": "19"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0]",
        "output": "41"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15, -16, 17, -18, 19, -20]",
        "output": "165"
      },
      {
        "input": "nums = [8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 3, 6, 12, 24, 48, 96]",
        "output": "132"
      },
      {
        "input": "nums = [-1, -10, -100, -1000, -10000, -100000, -1000000, -10000000, -100000000, -1000000000]",
        "output": "55"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 8, 6, 4, 2, 0, 11, 13, 15, 17, 19, 12, 14, 16, 18, 20]",
        "output": "115"
      },
      {
        "input": "nums = [1, 11, 2, 12, 3, 13, 4, 14, 5, 15]",
        "output": "15"
      },
      {
        "input": "nums = [10, 5, 20, 15, 30, 25, 40, 35, 50, 45, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "45"
      },
      {
        "input": "nums = [10, 2, 4, 6, 8, 1, 3, 5, 7, 9]",
        "output": "35"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 1]",
        "output": "19"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]",
        "output": "55"
      },
      {
        "input": "nums = [20, 1, 19, 2, 18, 3, 17, 4, 16, 5, 15, 6, 14, 7, 13, 8, 12, 9, 11, 10]",
        "output": "75"
      },
      {
        "input": "nums = [10, 1, 20, 2, 30, 3, 40, 4, 50, 5]",
        "output": "15"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]",
        "output": "30"
      },
      {
        "input": "nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]",
        "output": "55"
      },
      {
        "input": "nums = [-10, 100, -20, 200, -30, 300, -40, 400, -50, 500]",
        "output": "40"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]",
        "output": "55"
      },
      {
        "input": "nums = [5, 3, 1, 4, 2, 6, 8, 7]",
        "output": "19"
      },
      {
        "input": "nums = [-9, -7, -5, -3, -1, 1, 3, 5, 7, 9]",
        "output": "10"
      },
      {
        "input": "nums = [1000000000, -1000000000, 500000000, -500000000, 250000000, -250000000]",
        "output": "12"
      },
      {
        "input": "nums = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991]",
        "output": "55"
      },
      {
        "input": "nums = [5, 3, 1, 4, 2]",
        "output": "9"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "55"
      },
      {
        "input": "nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "22"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "30"
      },
      {
        "input": "nums = [5, 1, 9, 3, 7, 2, 8, 6, 4, 10]",
        "output": "30"
      },
      {
        "input": "nums = [10, 5, 20, 15, 30, 25, 40, 35, 50, 45]",
        "output": "35"
      },
      {
        "input": "nums = [-50, -40, -30, -20, -10, 0, 10, 20, 30, 40]",
        "output": "10"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "55"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]",
        "output": "165"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]",
        "output": "10"
      },
      {
        "input": "nums = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10]",
        "output": "10"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
        "output": "25"
      },
      {
        "input": "nums = [9, 1, 8, 2, 7, 3, 6, 4, 5]",
        "output": "19"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1]",
        "output": "30"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "144"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]",
        "output": "22"
      },
      {
        "input": "nums = [7, 10, 4, 3, 20, 15]",
        "output": "16"
      },
      {
        "input": "nums = [100, 50, 25, 125, 62, 31, 156, 78, 39]",
        "output": "18"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]",
        "output": "20"
      },
      {
        "input": "nums = [-1000000000, -999999999, -1000000001, -999999998, -1000000002]",
        "output": "12"
      },
      {
        "input": "nums = [10, 20, 15, 30, 25, 40, 35, 50, 45, 60, 55, 70, 65, 80, 75, 90, 85, 100, 95, 110]",
        "output": "110"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 101, 201, 301, 401, 501, 601, 701, 801, 901, 1001]",
        "output": "110"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "41"
      },
      {
        "input": "nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995]",
        "output": "21"
      },
      {
        "input": "nums = [-100, -1000, -10000, -100000, -1000000, -10000000, -100000000, -1000000000, -10000000000, 1]",
        "output": "54"
      },
      {
        "input": "nums = [3, 1, 2, 5, 4, 6, 8, 7, 9]",
        "output": "23"
      },
      {
        "input": "nums = [1000000000, 999999999, 1000000001, 999999998, 1000000002]",
        "output": "12"
      },
      {
        "input": "nums = [1000000000, -1000000000, 500000000, -500000000, 250000000]",
        "output": "8"
      },
      {
        "input": "nums = [1, -1000000000, 2, -999999999, 3, -999999998, 4, -999999997]",
        "output": "12"
      },
      {
        "input": "nums = [100, 50, 25, 12, 6, 3, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]",
        "output": "98"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9]",
        "output": "190"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "20"
      },
      {
        "input": "nums = [100, 1, 200, 2, 300, 3, 400, 4, 500, 5]",
        "output": "15"
      },
      {
        "input": "nums = [1000000000, 100000000, 10000000, 1000000, 100000, 10000, 1000, 100, 10, 1]",
        "output": "55"
      },
      {
        "input": "nums = [1, 10, 2, 20, 3, 30, 4, 40, 5, 50, 6, 60, 7, 70, 8, 80, 9, 90]",
        "output": "27"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "output": "55"
      },
      {
        "input": "nums = [-1, 0, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]",
        "output": "165"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5]",
        "output": "45"
      },
      {
        "input": "nums = [1000000000, -1000000000, 500000000, -500000000, 1, -1]",
        "output": "12"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "10"
      },
      {
        "input": "nums = [-1, 1000000000, 1, -1000000000, 2, -999999999, 3, -999999998, 4, -999999997]",
        "output": "17"
      },
      {
        "input": "nums = [5, 1, 9, 3, 7, 2, 8, 4, 6]",
        "output": "25"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "120"
      },
      {
        "input": "nums = [-1, 0, 1, -2, 2, -3, 3, -4, 4, -5]",
        "output": "40"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, 10]",
        "output": "54"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]",
        "output": "55"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "15"
      },
      {
        "input": "nums = [1000000000, 500000000, -500000000, -1000000000]",
        "output": "10"
      },
      {
        "input": "nums = [999999999, -999999999, 999999998, -999999998, 999999997, -999999997]",
        "output": "12"
      },
      {
        "input": "nums = [5, 1, 4, 2, 3]",
        "output": "8"
      },
      {
        "input": "nums = [-3, -2, -1, 0, 1, 2, 3]",
        "output": "7"
      },
      {
        "input": "nums = [5,2,3,1,4]",
        "output": "10"
      },
      {
        "input": "nums = [5, 2, 6, 1, 3, 4]",
        "output": "13"
      },
      {
        "input": "nums = [1000000000, -1000000000, 0]",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 4, 3]",
        "output": "5"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0]",
        "output": "55"
      },
      {
        "input": "nums = [1000000000, -1000000000, 500000000, -500000000, 0]",
        "output": "8"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50]",
        "output": "5"
      },
      {
        "input": "nums = [-1, -2, -3, -4]",
        "output": "10"
      },
      {
        "input": "nums = [1, 3, 5, 2, 4, 6]",
        "output": "12"
      },
      {
        "input": "nums = [1000000000, -1000000000, 500000000, 0, 250000000]",
        "output": "8"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4]",
        "output": "9"
      },
      {
        "input": "nums = [-10,100,50,20,-20]",
        "output": "12"
      },
      {
        "input": "nums = [-10,10,0,5,3]",
        "output": "8"
      },
      {
        "input": "nums = [1,-1,2,-2,3,-3]",
        "output": "18"
      },
      {
        "input": "nums = [100, -100, 50, -50, 25, -25]",
        "output": "12"
      },
      {
        "input": "nums = [1, 1000000000, -1000000000]",
        "output": "5"
      },
      {
        "input": "nums = [10, 20, 30, 5, 15, 25]",
        "output": "15"
      },
      {
        "input": "nums = [19,17,15,13,11,9,7,5,3,1]",
        "output": "55"
      },
      {
        "input": "nums = [5, 1, 2, 3, 4]",
        "output": "6"
      },
      {
        "input": "nums = [-3,-2,-1,0,1,2,3]",
        "output": "7"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9]",
        "output": "10"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10]",
        "output": "15"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2]",
        "output": "13"
      },
      {
        "input": "nums = [5,1,4,2,3]",
        "output": "8"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5]",
        "output": "12"
      },
      {
        "input": "nums = [5]",
        "output": "1"
      },
      {
        "input": "nums = [5, 2, 4, 1, 3]",
        "output": "12"
      },
      {
        "input": "nums = [1000000000,-1000000000,500000000]",
        "output": "4"
      },
      {
        "input": "nums = [-10, -20, -30, -5, -15, -25]",
        "output": "12"
      },
      {
        "input": "nums = [0, 1, -1, 2, -2]",
        "output": "12"
      },
      {
        "input": "nums = [-5, 1, 2, 0, 3]",
        "output": "8"
      },
      {
        "input": "nums = [10, 5, 3, 8, 2]",
        "output": "13"
      },
      {
        "input": "nums = [-10,100,5,2,0]",
        "output": "11"
      },
      {
        "input": "nums = [-10, 100, 0, 5]",
        "output": "5"
      },
      {
        "input": "nums = [1000000000, -1000000000]",
        "output": "3"
      },
      {
        "input": "nums = [-3, -1, -2]",
        "output": "4"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30]",
        "output": "18"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "10"
      },
      {
        "input": "nums = [7, 3, 5, 2, 4, 6, 1]",
        "output": "22"
      },
      {
        "input": "nums = [5, 3, 8, 1, 4]",
        "output": "11"
      },
      {
        "input": "nums = [-5, 1, 2, 0]",
        "output": "6"
      },
      {
        "input": "nums = [1000000000, 999999999, 999999998, 999999997]",
        "output": "10"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "15"
      },
      {
        "input": "nums = [5, 3, 1, 2, 4]",
        "output": "9"
      },
      {
        "input": "nums = [-5, 10, 0, 7, -3]",
        "output": "9"
      },
      {
        "input": "nums = [-3,-1,-4,-2]",
        "output": "8"
      },
      {
        "input": "nums = [10, -10, 0]",
        "output": "4"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]",
        "output": "10"
      },
      {
        "input": "nums = [0]",
        "output": "1"
      },
      {
        "input": "nums = [0, 1, -1, 2, -2, 3, -3, 4, -4, 5, -5]",
        "output": "51"
      },
      {
        "input": "nums = [3, 4, -1]",
        "output": "5"
      },
      {
        "input": "nums = [-10, 100, 0, 5, 3]",
        "output": "8"
      },
      {
        "input": "nums = [-5, 1, 2, 0, -1]",
        "output": "10"
      },
      {
        "input": "nums = [-5, -3, -1, -2, -4]",
        "output": "9"
      },
      {
        "input": "nums = [10, -5, 3, 8, 2]",
        "output": "9"
      },
      {
        "input": "nums = [0,-1,1]",
        "output": "5"
      },
      {
        "input": "nums = [5,3,2,1,4]",
        "output": "13"
      },
      {
        "input": "nums = [-5, -3, -1, -4, -2]",
        "output": "9"
      },
      {
        "input": "nums = [0, -1, 1, -2, 2]",
        "output": "12"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1]",
        "output": "28"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "10"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1, 0, -1, -2]",
        "output": "55"
      },
      {
        "input": "nums = [1000000000, -1000000000, 500000000]",
        "output": "4"
      },
      {
        "input": "nums = [-5, -1, -4, -2, -3]",
        "output": "8"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50]",
        "output": "15"
      },
      {
        "input": "nums = [1, 2, 3]",
        "output": "3"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "55"
      },
      {
        "input": "nums = [-5, -3, -1, 2, 4]",
        "output": "5"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3]",
        "output": "18"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "10"
      },
      {
        "input": "nums = [7, 3, 5, 1, 9, 2, 4, 6, 8]",
        "output": "25"
      },
      {
        "input": "nums = [-10,-20,-30,-40,-50]",
        "output": "15"
      },
      {
        "input": "nums = [-5, -3, -1, 1, 3, 5]",
        "output": "6"
      },
      {
        "input": "nums = [5, 1, 9, 3, 7]",
        "output": "9"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1]",
        "output": "45"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1]",
        "output": "15"
      },
      {
        "input": "nums = [42]",
        "output": "1"
      },
      {
        "input": "nums = [-5, -3, -2, -4, -1]",
        "output": "8"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]",
        "output": "35"
      },
      {
        "input": "nums = [0, 1, -1, 2, -2, 3, -3]",
        "output": "22"
      },
      {
        "input": "nums = [7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7]",
        "output": "120"
      },
      {
        "input": "nums = [-5,3,-2,1,4]",
        "output": "7"
      },
      {
        "input": "nums = [1, 2]",
        "output": "2"
      },
      {
        "input": "nums = [7, 5, 6, 3, 4, 1, 2]",
        "output": "16"
      },
      {
        "input": "nums = [1,3,5,7,9,2,4,6,8,10]",
        "output": "30"
      },
      {
        "input": "nums = [-10, 100, 0, 5, -5]",
        "output": "9"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1]",
        "output": "15"
      }
    ]
  },
  {
    "id": 2386,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an integer array nums and a positive integer k. You can choose any subsequence of the array and sum all of its elements together.\nWe define the K-Sum of the array as the kth largest subsequence sum that can be obtained (not necessarily distinct).\nReturn the K-Sum of the array.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nNote that the empty subsequence is considered to have a sum of 0.\n\u00a0\nExample 1:\n\nInput: nums = [2,4,-2], k = 5\nOutput: 2\nExplanation: All the possible subsequence sums that we can obtain are the following sorted in decreasing order:\n- 6, 4, 4, 2, 2, 0, 0, -2.\nThe 5-Sum of the array is 2.\n\nExample 2:\n\nInput: nums = [1,-2,3,4,-10,12], k = 16\nOutput: 10\nExplanation: The 16-Sum of the array is 10.\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= n <= 105\n-109 <= nums[i] <= 109\n1 <= k <= min(2000, 2n)\n\n",
    "starterCode": "class Solution:\n    def kSum(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [10,20,30,40,50], k = 10",
        "output": "100"
      },
      {
        "input": "nums = [1000000000,-1000000000,500000000,-500000000], k = 7",
        "output": "0"
      },
      {
        "input": "nums = [1000000000,-1000000000,1000000000], k = 3",
        "output": "1000000000"
      },
      {
        "input": "nums = [1,2,3], k = 1",
        "output": "6"
      },
      {
        "input": "nums = [5,8,3,1], k = 8",
        "output": "9"
      },
      {
        "input": "nums = [0,0,0,0], k = 10",
        "output": "0"
      },
      {
        "input": "nums = [0,0,0,0], k = 1",
        "output": "0"
      },
      {
        "input": "nums = [-1,-2,-3], k = 4",
        "output": "-3"
      },
      {
        "input": "nums = [-1,-2,-3,-4], k = 4",
        "output": "-3"
      },
      {
        "input": "nums = [5,10,-3,7,2,-8], k = 3",
        "output": "21"
      },
      {
        "input": "nums = [1,2,3], k = 2",
        "output": "5"
      },
      {
        "input": "nums = [2,4,-2], k = 5",
        "output": "2"
      },
      {
        "input": "nums = [1,-2,3,4,-10,12], k = 16",
        "output": "10"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 1000",
        "output": "80"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1000",
        "output": "27"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 512",
        "output": "27"
      },
      {
        "input": "nums = [10,-10,20,-20,30,-30,40,-40,50,-50], k = 500",
        "output": "0"
      },
      {
        "input": "nums = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000], k = 20",
        "output": "6000000000"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15], k = 100",
        "output": "-14"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1000",
        "output": "17"
      },
      {
        "input": "nums = [5, 7, -3, 9, -6, 2, 8, -4], k = 20",
        "output": "21"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000], k = 20",
        "output": "8000000000"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 1024",
        "output": "0"
      },
      {
        "input": "nums = [-1,2,-3,4,-5,6,-7,8], k = 20",
        "output": "12"
      },
      {
        "input": "nums = [100, 200, 300, -100, -200, -300, 400, 500, -400, -500], k = 50",
        "output": "900"
      },
      {
        "input": "nums = [100, 200, -150, 250, -300, 400, -50, -500, 600, 700, -1000, 800, 900], k = 1000",
        "output": "2150"
      },
      {
        "input": "nums = [0, 1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6], k = 25",
        "output": "17"
      },
      {
        "input": "nums = [5,-3,7,1,-2,4], k = 15",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 200",
        "output": "193"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15, -16, 17, -18, 19, -20], k = 750",
        "output": "76"
      },
      {
        "input": "nums = [5, -5, 15, -15, 25, -25, 35, -35, 45, -45], k = 100",
        "output": "60"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30, 40, -40, 50, -50], k = 100",
        "output": "70"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5], k = 100",
        "output": "7"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000, 62500000, 31250000, 15625000, 7812500, 3906250, 1953125, 976562, 488281, 244140, 122070, 61035, 30517, 15258, 7629, 3814, 1907, 953, 476, 238, 119, 59, 29, 14, 7, 3, 1, 0, -1, -3, -7, -14, -29, -59, -119, -238, -476, -953, -1907, -3814, -7629, -15258, -30517, -61035, -122070, -244140, -488281, -976562, -1953125, -3906250, -7812500, -15625000, -31250000, -62500000, -125000000, -250000000, -500000000, -1000000000], k = 5000",
        "output": "1999999861"
      },
      {
        "input": "nums = [1, 3, -2, 5, -4, 2, 6], k = 10",
        "output": "13"
      },
      {
        "input": "nums = [1000000000, -500000000, 2000000000, -3000000000, 4000000000], k = 5",
        "output": "5000000000"
      },
      {
        "input": "nums = [5, -3, 7, 9, -2, 10], k = 15",
        "output": "19"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000], k = 1000",
        "output": "2000000000"
      },
      {
        "input": "nums = [1000000000, -999999999, 999999998, -999999997, 999999996, -999999995, 999999994, -999999993, 999999992, -999999991], k = 200",
        "output": "1000000004"
      },
      {
        "input": "nums = [5, -3, 2, 1, -2, 4, -1, 3, -5, 6], k = 150",
        "output": "11"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000, 62500000, 31250000, 15625000, 7812500, 3906250, 1953125], k = 50",
        "output": "1902343750"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 500",
        "output": "280"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 500",
        "output": "5"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -55, -60, -65, -70, -75, -80, -85, -90, -95, -100], k = 1500",
        "output": "975"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 512",
        "output": "280"
      },
      {
        "input": "nums = [-10, 20, -30, 40, -50, 60, -70, 80, -90, 100, -110, 120, -130, 140, -150, 160, -170, 180, -190, 200], k = 1000",
        "output": "840"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 1000",
        "output": "93"
      },
      {
        "input": "nums = [-1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000], k = 1000",
        "output": "-8000000000"
      },
      {
        "input": "nums = [10, 20, 30, -10, -20, -30, 40, 50, 60, -40, -50, -60], k = 150",
        "output": "120"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 2000",
        "output": "31"
      },
      {
        "input": "nums = [100, 200, 300, -100, -200, -300, 400, 500, 600, -400, -500, -600, 700, 800, 900], k = 500",
        "output": "3300"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100], k = 256",
        "output": "-210"
      },
      {
        "input": "nums = [5, 3, -1, 4, -6, 2, -2, 3], k = 10",
        "output": "13"
      },
      {
        "input": "nums = [100, -100, 200, -200, 300, -300, 400, -400, 500, -500, 600, -600, 700, -700, 800, -800, 900, -900, 1000, -1000], k = 2000",
        "output": "3800"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000], k = 30",
        "output": "1000000000"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 1024",
        "output": "17"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 2000",
        "output": "6"
      },
      {
        "input": "nums = [1000000, -500000, 2000000, -1000000, 3000000, -1500000], k = 20",
        "output": "2500000"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 100",
        "output": "40"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], k = 500",
        "output": "172"
      },
      {
        "input": "nums = [5, -1, 3, -4, 2, -6, 7, -8, 9, -10], k = 128",
        "output": "10"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 50",
        "output": "-11"
      },
      {
        "input": "nums = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000, 7000000000, 8000000000, 9000000000], k = 512",
        "output": "0"
      },
      {
        "input": "nums = [-1000000000, -2000000000, -3000000000, -4000000000, -5000000000], k = 5",
        "output": "-3000000000"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1], k = 20",
        "output": "6"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 500",
        "output": "188"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 500",
        "output": "17"
      },
      {
        "input": "nums = [10, -5, 3, -2, 1, -1, 0], k = 15",
        "output": "11"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, -100, -200, -300, -400, -500], k = 300",
        "output": "4400"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 5",
        "output": "-3"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 1500",
        "output": "181"
      },
      {
        "input": "nums = [-1000000000, -2000000000, -3000000000, -4000000000, -5000000000, -6000000000, -7000000000, -8000000000, -9000000000, -10000000000], k = 20",
        "output": "-8000000000"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5], k = 20",
        "output": "-9"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 100",
        "output": "400"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5], k = 7",
        "output": "-4"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, -1, -2, -4, -8, -16, -32, -64, -128, -256, -512, -1024, -2048, -4096, -8192, -16384, -32768, -65536, -131072, -262144, -524288, -1048576, -2097152, -4194304, -8388608, -16777216, -33554432, -67108864, -134217728, -268435456, -536870912, -1073741824], k = 2000",
        "output": "2147483585"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1024",
        "output": "0"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9], k = 1000",
        "output": "33"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], k = 2000",
        "output": "343"
      },
      {
        "input": "nums = [999999999, -999999999, 999999998, -999999998, 999999997, -999999997, 999999996, -999999996, 999999995, -999999995], k = 500",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 2000",
        "output": "179"
      },
      {
        "input": "nums = [-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 1000",
        "output": "33"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], k = 1024",
        "output": "351"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 200",
        "output": "8"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,-100,-200,-300,-400,-500,-600,-700,-800,-900,-1000], k = 1000",
        "output": "4100"
      },
      {
        "input": "nums = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000, 7000000000, 8000000000, 9000000000, 10000000000], k = 20",
        "output": "47000000000"
      },
      {
        "input": "nums = [5, -3, 2, 7, -8, 10, -2, 3, 4, -1], k = 15",
        "output": "26"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 2000",
        "output": "16"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 1024",
        "output": "-55"
      },
      {
        "input": "nums = [1000000000, 1000000000, -1000000000, -1000000000, 500000000, -500000000], k = 2000",
        "output": "Error: index out of range"
      },
      {
        "input": "nums = [500000000, 250000000, 125000000, 62500000, 31250000, 15625000, 7812500, 3906250, 1953125, 976562, 488281, 244140, 122070, 61035, 30517, 15258, 7629, 3814, 1907, 953, 476, 238, 119, 59, 29, 14, 7, 3, 1], k = 1000",
        "output": "999998131"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 1000",
        "output": "17"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 15",
        "output": "-7"
      },
      {
        "input": "nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16, -17, 18, -19, 20], k = 500",
        "output": "88"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], k = 1024",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 1000",
        "output": "184"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, -100, -200, -300, -400, -500, -600, -700, -800, -900, -1000], k = 1500",
        "output": "3900"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100], k = 750",
        "output": "420"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 1500",
        "output": "32"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10], k = 500",
        "output": "43"
      },
      {
        "input": "nums = [100, 200, 300, -100, -200, -300, 400, 500, -400, -500, 600, 700, -600, -700, 800, 900, -800, -900, 1000, -1000], k = 1000",
        "output": "4100"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 15",
        "output": "7"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50], k = 5",
        "output": "-30"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 100",
        "output": "28"
      },
      {
        "input": "nums = [1000000000,-500000000,500000000,-250000000,250000000,-125000000,125000000], k = 100",
        "output": "0"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], k = 1200",
        "output": "167"
      }
    ]
  },
  {
    "id": 2454,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Array",
      "Binary Search",
      "Sorting",
      "Monotonic Stack",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.\nThe second greater integer of nums[i] is nums[j] such that:\n\nj > i\nnums[j] > nums[i]\nThere exists exactly one index k such that nums[k] > nums[i] and i < k < j.\n\nIf there is no such nums[j], the second greater integer is considered to be -1.\n\nFor example, in the array [1, 2, 4, 3], the second greater integer of 1 is 4, 2 is 3,\u00a0and that of 3 and 4 is -1.\n\nReturn an integer array answer, where answer[i] is the second greater integer of nums[i].\n\u00a0\nExample 1:\n\nInput: nums = [2,4,0,9,6]\nOutput: [9,6,6,-1,-1]\nExplanation:\n0th index: 4 is the first integer greater than 2, and 9 is the second integer greater than 2, to the right of 2.\n1st index: 9 is the first, and 6 is the second integer greater than 4, to the right of 4.\n2nd index: 9 is the first, and 6 is the second integer greater than 0, to the right of 0.\n3rd index: There is no integer greater than 9 to its right, so the second greater integer is considered to be -1.\n4th index: There is no integer greater than 6 to its right, so the second greater integer is considered to be -1.\nThus, we return [9,6,6,-1,-1].\n\nExample 2:\n\nInput: nums = [3,3]\nOutput: [-1,-1]\nExplanation:\nWe return [-1,-1] since neither integer has any integer greater than it.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def secondGreaterElement(self, nums: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [1,3,2,4,3,5,4,6,5,7]",
        "output": "[2, 5, 3, 6, 4, 7, 5, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,5]",
        "output": "[2, 5, 5, -1, -1]"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1000000000,0,1000000000,0,1000000000]",
        "output": "[-1, 1000000000, -1, -1, -1]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,5,3,6,7,8,5]",
        "output": "[2, 5, 5, 6, 7, 7, 8, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [1,5,2,4,3]",
        "output": "[2, -1, 3, -1, -1]"
      },
      {
        "input": "nums = [7,1,5,2,6,3,4,8,9]",
        "output": "[9, 2, 8, 3, 9, 8, 9, -1, -1]"
      },
      {
        "input": "nums = [1,5,2,6,3,7,4,8]",
        "output": "[2, 7, 3, 8, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [3,3]",
        "output": "[-1, -1]"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9]",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,0]",
        "output": "[2, 5, 5, 6, 7, 8, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [0,0,0,0,0]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "[3, 4, 5, -1, -1]"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1]",
        "output": "[1, -1, 1, -1, 1, -1, 1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,4,3]",
        "output": "[4, 3, -1, -1]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [5,6,3,2,7,8]",
        "output": "[7, 8, 8, 8, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10]",
        "output": "[2, 5, 5, 6, 7, 8, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [2,4,0,9,6]",
        "output": "[9, 6, 6, -1, -1]"
      },
      {
        "input": "nums = [5,4,3,2,1,0]",
        "output": "[-1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,2]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [5,3,1,2,4]",
        "output": "[-1, -1, 4, -1, -1]"
      },
      {
        "input": "nums = [10,10,10,10,10]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 9, -1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1]"
      },
      {
        "input": "nums = [2, 1, 5, 6, 2, 3, 1, 4, 2, 3]",
        "output": "[6, 6, -1, -1, 4, -1, 2, -1, -1, -1]"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6,11,14,12,13,15,0]",
        "output": "[2, 14, 3, 14, 4, 14, 5, 14, 11, 14, 12, -1, 15, -1, -1, -1]"
      },
      {
        "input": "nums = [3,2,1,0,4,5,6,7,8,9]",
        "output": "[5, 5, 5, 5, 6, 7, 8, 9, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, -1, -1, -1]"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 5, 2, 6, 3, 7, 4, 8, 5, 9, 6, 10, 7, 11, 8, 12, 9, 13, 10, 14]",
        "output": "[2, 7, 3, 8, 4, 9, 5, 10, 6, 11, 7, 12, 8, 13, 9, 14, 10, -1, -1, -1]"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1,3,9,3,7,5,1,8,2,8,4,8,6,2,6,4,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1]",
        "output": "[5, 5, 9, 9, 6, -1, 5, 7, 7, 9, 7, -1, 8, -1, 4, 8, 4, 9, 6, 7, 4, 7, 7, 7, 7, 9, 9, 9, 8, -1, 8, 8, 8, 9, 9, 7, 7, -1, 8, 9, 7, -1, 5, 8, 8, 2, 9, 4, 9, 6, 9, 7, 4, 7, 7, 7, 7, 9, 9, 9, 8, -1, 8, 8, 8, -1, -1, 7, 7, -1, -1, -1]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10,11,12,13,14,15,1]",
        "output": "[2, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1]"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 9, -1, 2, 3, 4, 5, 6, 7, 8, 9, 9, -1, 2, 3, 4, 5, 6, 7, 8, 9, 9, -1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]",
        "output": "[-1, 2, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0,9,8,7,6,5,4,3,2,1]",
        "output": "[-1, -1, 8, 8, 8, 8, 8, 8, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10]",
        "output": "[2, 5, 3, 6, 4, 7, 5, 8, 6, 9, 7, 10, 8, -1, -1, -1]"
      },
      {
        "input": "nums = [5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1]",
        "output": "[-1, 5, -1, 5, -1, 5, -1, 5, -1, 5, -1, 5, -1, 5, -1, 5, -1, 5, -1, 5, -1, 5, -1, 5, -1, 5, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,5,3,9,2,8,7,10,6,11]",
        "output": "[3, 8, 8, 11, 7, 11, 11, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,21,20]",
        "output": "[2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16, 16, 18, 18, 20, 20, -1, -1]"
      },
      {
        "input": "nums = [10,20,10,30,20,40,30,50,40,60]",
        "output": "[30, 40, 20, 50, 30, 60, 40, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 9, -1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,0,1]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,5,3,4,2,7,6,8]",
        "output": "[3, 6, 7, 6, 6, -1, -1, -1]"
      },
      {
        "input": "nums = [3,4,2,3,5,1,6,0,7,8,9]",
        "output": "[5, 6, 5, 6, 7, 7, 8, 8, 9, -1, -1]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5]",
        "output": "[2, 2, 3, 3, 4, 4, 5, 5, -1, -1]"
      },
      {
        "input": "nums = [5,2,6,1,3,4,7,8,0,9]",
        "output": "[7, 3, 8, 4, 7, 8, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "[2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, -1, -1]"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6,11,12,13,14,15]",
        "output": "[2, 12, 3, 12, 4, 12, 5, 12, 11, 12, 13, 14, 15, -1, -1]"
      },
      {
        "input": "nums = [2,1,3,4,2,3,4,1,5,6]",
        "output": "[4, 4, 4, 6, 4, 5, 6, 6, -1, -1]"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 3, 4, 5, 6, 5, 4, 5, 6, 7, 8]",
        "output": "[3, 3, 4, 4, 3, 4, 4, 6, 5, 4, 5, 6, 6, 8, 7, 6, 7, 8, -1, -1]"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9,7,9,3,2,3,8,4,6]",
        "output": "[5, 5, 9, 9, 6, -1, 5, 7, 7, 9, 7, -1, 8, -1, 4, 8, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2]",
        "output": "[2, -1, 2, -1, 2, -1, 2, -1, -1, -1]"
      },
      {
        "input": "nums = [1,5,3,7,10,8,6,9,2,4]",
        "output": "[3, 10, 10, 8, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0,0,1,2,3,4,5,6,7,8,9,0]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 9, -1, 2, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0,11,12,13,14,15]",
        "output": "[12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 14, 15, -1, -1]"
      },
      {
        "input": "nums = [0,9,1,8,2,7,3,6,4,5]",
        "output": "[1, -1, 2, -1, 3, -1, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,5,4,8,7,11,10,9,13,12,6,14,15,16,17,18,19,20]",
        "output": "[2, 4, 4, 7, 7, 10, 10, 12, 12, 12, 15, 15, 15, 16, 17, 18, 19, 20, -1, -1]"
      },
      {
        "input": "nums = [1,5,3,2,4,7,6,8]",
        "output": "[3, 6, 7, 7, 6, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0,0,9,8,7,6,5,4,3,2,1]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 9, -1, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [5,4,3,2,1,0,9,8,7,6]",
        "output": "[8, 8, 8, 8, 8, 8, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1, -1]"
      },
      {
        "input": "nums = [2,2,1,1,3,3,4,4,5,5]",
        "output": "[3, 3, 3, 3, 4, 4, 5, 5, -1, -1]"
      },
      {
        "input": "nums = [0,1,1,2,2,3,3,4,4,5]",
        "output": "[1, 2, 2, 3, 3, 4, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0,9,8,7,6,5,4,3,2,1,0]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 9, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,6,5,4,9,8,7,10]",
        "output": "[2, 5, 5, 8, 8, 8, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [8,1,5,2,6,3,7,4,9,0]",
        "output": "[-1, 2, 7, 3, 9, 4, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,0]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 9, -1, 8, -1, -1, 9, 8, 7, 6, 5, 4, 3, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1]",
        "output": "[3, 3, -1, 3, 3, -1, 3, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0]",
        "output": "[3, 4, 5, 6, 7, 8, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,7,6,5,9,8,10]",
        "output": "[2, 7, 7, 6, 8, 8, 8, -1, -1, -1]"
      },
      {
        "input": "nums = [8,7,6,5,4,3,2,1,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [8,1,5,2,6,3,7,4,8,5,9,6,10,7,11,8,12]",
        "output": "[10, 2, 7, 3, 8, 4, 9, 5, 10, 6, 11, 7, 12, 8, -1, -1, -1]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[-1, -1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [1,2,2,2,3,2,2,2,4,2,2,2,2,5,2,2,2,2,2,6]",
        "output": "[2, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1]"
      },
      {
        "input": "nums = [0, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9]",
        "output": "[1, 3, 3, 5, 5, 7, 7, 9, 9, -1, -1]"
      },
      {
        "input": "nums = [2,1,2,1,2,1,2,1,2,1]",
        "output": "[-1, 2, -1, 2, -1, 2, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,5,4,6,7,8,9,10,11,12,13,14,15]",
        "output": "[2, 4, 4, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1]"
      },
      {
        "input": "nums = [5,1,4,3,2,7,8,6,9,10]",
        "output": "[8, 3, 8, 8, 8, 9, 10, 10, -1, -1]"
      },
      {
        "input": "nums = [3,5,4,7,6,8,10,9,11,12,13,14,15,16,17]",
        "output": "[4, 6, 6, 10, 10, 9, 12, 12, 13, 14, 15, 16, 17, -1, -1]"
      },
      {
        "input": "nums = [1,5,3,2,4,8,6,7,9,0]",
        "output": "[3, 6, 8, 8, 6, -1, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,2,1,4,5,4,3,2,1]",
        "output": "[3, 4, 5, 5, 5, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6]",
        "output": "[2, -1, 3, -1, 4, -1, 5, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8,6,4,2]",
        "output": "[5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [3,1,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,21,20]",
        "output": "[4, 5, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16, 16, 18, 18, 20, 20, -1, -1]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [9,0,9,0,9,0,9,0,9,0]",
        "output": "[-1, 9, -1, 9, -1, 9, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [5,3,8,6,2,7,4,9,1]",
        "output": "[6, 6, -1, 9, 4, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [8,1,5,3,7,10,2,6,9,4]",
        "output": "[9, 3, 10, 10, 9, -1, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, -1, -1, 3, 4, 5, -1, -1]"
      },
      {
        "input": "nums = [2,1,5,6,0,3,4,9,8,7]",
        "output": "[6, 6, 9, 8, 4, 9, 8, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 6, 7, 8, 10, 9]",
        "output": "[2, 4, 4, 7, 7, 8, 10, 9, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, 10, -1, 3, 4, 5, 6, 7, 8, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,91,82,73,64,55,46,37,28,19,10]",
        "output": "[30, 40, 50, 60, 70, 80, 90, 100, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,90,80,70,60,50,40,30,20,10,0]",
        "output": "[30, 40, 50, 60, 70, 80, 90, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [2,1,5,6,2,3,1,8]",
        "output": "[6, 6, 8, -1, 8, -1, -1, -1]"
      },
      {
        "input": "nums = [10,1,2,3,4,5,6,7,8,9,1]",
        "output": "[-1, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,31,32,33,34,35]",
        "output": "[32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 34, 35, -1, -1]"
      },
      {
        "input": "nums = [3,5,2,6,1,7,4,8,0,9]",
        "output": "[6, 7, 7, 8, 4, 9, 9, -1, -1, -1]"
      },
      {
        "input": "nums = [5,1,4,1,3,1,2,1,1,1,6,1,1,1,1,1,1,1,1,1]",
        "output": "[-1, 3, -1, 2, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "[-1, 10, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,2,1,3,4,4,3,5,6,6,5,7,8,8,7,9]",
        "output": "[2, 4, 4, 4, 4, 6, 6, 6, 6, 8, 8, 8, 8, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1]"
      },
      {
        "input": "nums = [1,2,1,3,2,4,3,5,4,6]",
        "output": "[3, 4, 2, 5, 3, 6, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "[2, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, -1, -1, -1]"
      },
      {
        "input": "nums = [0,10,2,9,4,8,6,7,5,3,1]",
        "output": "[2, -1, 4, -1, 6, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0,0,0,9,8,7,6,5,4,3,2,1,0]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 9, -1, 8, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [100,200,101,201,102,202,103,203,104,204]",
        "output": "[101, 202, 102, 203, 103, 204, 104, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10]",
        "output": "[2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [5,3,2,4,6,1,7,8,9,10,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[7, 6, 6, 7, 8, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, -1, -1]"
      },
      {
        "input": "nums = [50, 24, 54, 32, 54, 68, 27, 89, 10, 70, 29, 33, 63, 96, 99, 78, 76, 65, 84, 88]",
        "output": "[54, 32, 89, 68, 89, 70, 70, 99, 29, 99, 63, 96, 99, -1, -1, 88, 88, 88, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,3,2,1,2,3,4]",
        "output": "[3, 4, 4, -1, -1, 4, 3, 4, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1]",
        "output": "[-1, 3, 2, -1, 3, 2, -1, 3, 2, -1, 3, 2, -1, 3, 2, -1, -1, 2, -1, -1, -1]"
      },
      {
        "input": "nums = [1,5,2,10,11,9,3,4,6,7,8]",
        "output": "[2, 11, 11, -1, -1, -1, 6, 7, 8, -1, -1]"
      },
      {
        "input": "nums = [0,11,7,12,13,14,6,15,16,17,8,18,19,9,10,5,20,21,22,1]",
        "output": "[7, 13, 13, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 20, 21, 21, 22, -1, -1, -1]"
      },
      {
        "input": "nums = [1,10,8,7,6,5,4,3,2,1]",
        "output": "[8, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [10,20,30,25,40,35,50]",
        "output": "[30, 25, 35, 35, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 2, 4, 3]",
        "output": "[4, 3, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,2,1]",
        "output": "[3, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1000000000,999999999,999999998,999999997,999999996,999999995]",
        "output": "[-1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,10,11,1,2,10,11,1]",
        "output": "[11, 11, -1, 10, 11, -1, -1, -1]"
      },
      {
        "input": "nums = [5, 3, 4, 2, 1]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 100, 80, 60, 40, 20]",
        "output": "[80, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [3,2,1]",
        "output": "[-1, -1, -1]"
      },
      {
        "input": "nums = [1,5,2,5,4,7,3,6]",
        "output": "[2, 6, 4, 6, 6, -1, -1, -1]"
      },
      {
        "input": "nums = [5,1,4,3,6,7,8]",
        "output": "[7, 3, 7, 7, 8, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,10,9]",
        "output": "[3, 4, 5, 6, 7, 8, 10, 9, -1, -1]"
      },
      {
        "input": "nums = [100,50,25,12,6,3,1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 10, 11, 12, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[11, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 10, 3, 4, 18, 5, 6]",
        "output": "[3, -1, 18, 5, -1, -1, -1]"
      },
      {
        "input": "nums = [5,1,4,2,3]",
        "output": "[-1, 2, -1, -1, -1]"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [1]",
        "output": "[-1]"
      },
      {
        "input": "nums = [10,9,8,7,6,5]",
        "output": "[-1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [8, 2, 4, 6, 7, 5, 3, 9, 1]",
        "output": "[-1, 6, 7, 9, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,5,2,6,3,7,4]",
        "output": "[2, 7, 3, -1, 4, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7]",
        "output": "[2, 5, 5, 6, 7, -1, -1]"
      },
      {
        "input": "nums = [1, 5, 2, 6, 3, 7, 4, 8]",
        "output": "[2, 7, 3, 8, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5]",
        "output": "[2, 3, 4, 5, -1, -1]"
      },
      {
        "input": "nums = [1,5,2,4,3,6,7,8,9,10]",
        "output": "[2, 7, 3, 7, 7, 8, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [1,2,0,3,0,4,0,5,0,6]",
        "output": "[3, 4, 4, 5, 5, 6, 6, -1, -1, -1]"
      },
      {
        "input": "nums = [5,8,1,2,10,6,9,7,3,4]",
        "output": "[10, 9, 10, 6, -1, 7, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [2,1]",
        "output": "[-1, -1]"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [100,100,100]",
        "output": "[-1, -1, -1]"
      },
      {
        "input": "nums = [1000000000,999999999,999999998,999999997,999999996]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,6,5]",
        "output": "[2, 6, 6, 5, -1, -1]"
      },
      {
        "input": "nums = [1000000000,999999999,888888888,777777777,666666666]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [7,6,5,4,3,2,1,0]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [8,1,2,4,6,7,1,5]",
        "output": "[-1, 4, 6, 7, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,4,3,5,6,7,8,9,10]",
        "output": "[4, 3, 6, 6, 7, 8, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0]",
        "output": "[1, -1, 1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3]",
        "output": "[3, 3, -1, 3, 3, -1, 3, -1, -1]"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0]",
        "output": "[-1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5]",
        "output": "[3, 4, 5, -1, -1]"
      },
      {
        "input": "nums = [10,1,1,6,1,4,1,2,1,1,1,9,1,4,1,1,1,1,1,1]",
        "output": "[-1, 4, 4, -1, 2, -1, 9, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [5, 3, 1, 2, 4]",
        "output": "[-1, -1, 4, -1, -1]"
      },
      {
        "input": "nums = [1,5,2,6,3,7,4,8,5,9,6,10,7,11,8,12,9,13,10,14]",
        "output": "[2, 7, 3, 8, 4, 9, 5, 10, 6, 11, 7, 12, 8, 13, 9, 14, 10, -1, -1, -1]"
      },
      {
        "input": "nums = [8, 5, 12, 9, 16, 15]",
        "output": "[9, 9, 15, 15, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,5,7,6,8,9,10]",
        "output": "[2, 5, 5, 7, 6, 9, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [3, 3]",
        "output": "[-1, -1]"
      },
      {
        "input": "nums = [5,8,4,5,3,5,10,15]",
        "output": "[10, 15, 5, 15, 10, 15, -1, -1]"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7]",
        "output": "[-1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [8,1,5,2,6,3,7,4]",
        "output": "[-1, 2, 7, 3, -1, 4, -1, -1]"
      },
      {
        "input": "nums = [7,1,5,2,6,4,3]",
        "output": "[-1, 2, -1, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [10, 20, 10, 30, 20, 40]",
        "output": "[30, 40, 20, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3]",
        "output": "[3, -1, -1]"
      },
      {
        "input": "nums = [1,5,2,6,3,7,4,8,5,9,6]",
        "output": "[2, 7, 3, 8, 4, 9, 5, -1, 6, -1, -1]"
      },
      {
        "input": "nums = [10,3,11,1,15,9]",
        "output": "[15, 15, -1, 9, -1, -1]"
      },
      {
        "input": "nums = [1,10,8,9,10,11,5,3,12,0]",
        "output": "[8, 12, 10, 11, 12, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5]",
        "output": "[2, 5, 5, -1, -1]"
      },
      {
        "input": "nums = [10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1000000000,999999999,999999998,999999997,999999996,999999995,999999994,999999993,999999992,999999991]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,10,8,7,6,5,4,3,2,1,0]",
        "output": "[8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,5,2,6,3,7,4,8,5,9]",
        "output": "[2, 7, 3, 8, 4, 9, 5, -1, -1, -1]"
      },
      {
        "input": "nums = [0,1,2,3,4,5]",
        "output": "[2, 3, 4, 5, -1, -1]"
      },
      {
        "input": "nums = [5,6,7,8,9,10]",
        "output": "[7, 8, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, -1, -1]"
      },
      {
        "input": "nums = [0,1,2,0,3,0,4]",
        "output": "[2, 3, 4, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2]",
        "output": "[-1, -1]"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2]",
        "output": "[3, 3, -1, -1, 3, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5, 3, 6, 4, 7, 8]",
        "output": "[2, 5, 5, 6, 7, 4, 8, 8, -1, -1]"
      },
      {
        "input": "nums = [10,4,3,5,7,2,8,6,1]",
        "output": "[-1, 7, 7, 8, -1, 6, -1, -1, -1]"
      },
      {
        "input": "nums = [10,5,1,6,2,7,3,8,4,9]",
        "output": "[-1, 7, 2, 8, 3, 9, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [10, 5, 15, 2, 18]",
        "output": "[18, 18, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,0,3,0,4,0,5,0]",
        "output": "[3, 4, 4, 5, 5, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,5,2,3,4,6,7,8,9,10]",
        "output": "[2, 7, 4, 6, 7, 8, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,2,1,4,5]",
        "output": "[3, 4, 5, 5, 5, -1, -1]"
      },
      {
        "input": "nums = [5,2,6,4,7]",
        "output": "[7, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,3,5,6,4,3,2,1,2,3,4]",
        "output": "[2, 5, 3, 6, 6, -1, -1, -1, -1, 4, 3, 4, -1, -1]"
      },
      {
        "input": "nums = [1,3,2,4,5,3,2,1]",
        "output": "[2, 5, 5, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [5, 1, 2, 3, 4, 0]",
        "output": "[-1, 3, 4, -1, -1, -1]"
      },
      {
        "input": "nums = [0, 1, 0, 1, 0, 1, 0, 1]",
        "output": "[1, -1, 1, -1, 1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,0,3,0,4,0,5]",
        "output": "[3, 4, 4, 5, 5, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,0]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, -1, -1, -1]"
      },
      {
        "input": "nums = [10,20,15,30,25,40,35,50,45,60]",
        "output": "[15, 25, 25, 35, 35, 45, 45, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 2, 0, 4, 3, 5, 6, 7, 8, 9]",
        "output": "[4, 3, 3, 6, 6, 7, 8, 9, -1, -1]"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,0,5,0]",
        "output": "[3, 3, 4, 4, 5, 5, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,11]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10, -1, -1]"
      },
      {
        "input": "nums = [8,1,5,2,7]",
        "output": "[-1, 2, -1, -1, -1]"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1]",
        "output": "[2, -1, 2, -1, -1, -1, -1]"
      },
      {
        "input": "nums = [2, 4, 0, 9, 6]",
        "output": "[9, 6, 6, -1, -1]"
      }
    ]
  },
  {
    "id": 123,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve. You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\u00a0\nExample 1:\n\nInput: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\nExample 2:\n\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n\nExample 3:\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\n\u00a0\nConstraints:\n\n1 <= prices.length <= 105\n0 <= prices[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "prices = [1,5,1,5,1,5,1,5]",
        "output": "8"
      },
      {
        "input": "prices = [2,1,4,5,2,9,7]",
        "output": "11"
      },
      {
        "input": "prices = [10,22,5,75,65,80]",
        "output": "87"
      },
      {
        "input": "prices = [10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "prices = [3,2,6,5,0,3]",
        "output": "7"
      },
      {
        "input": "prices = [1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "prices = [1,4,2,8,2,6,7,8,2,4,5,2,1]",
        "output": "13"
      },
      {
        "input": "prices = [7,6,4,3,1]",
        "output": "0"
      },
      {
        "input": "prices = [1,3,2,8,4,9]",
        "output": "12"
      },
      {
        "input": "prices = [3,3,5,0,0,3,1,4]",
        "output": "6"
      },
      {
        "input": "prices = [1,2]",
        "output": "1"
      },
      {
        "input": "prices = [1,2,3,4,5]",
        "output": "4"
      },
      {
        "input": "prices = [3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "prices = [1,2,4,2,5,7,2,4,9,0]",
        "output": "13"
      },
      {
        "input": "prices = [3, 3, 5, 0, 0, 3, 1, 4, 1, 2, 3, 4]",
        "output": "7"
      },
      {
        "input": "prices = [1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5]",
        "output": "10"
      },
      {
        "input": "prices = [10, 22, 5, 75, 65, 80, 120, 130, 110, 140, 150, 160]",
        "output": "175"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "13"
      },
      {
        "input": "prices = [8,6,4,3,3,2,3,5,7,0,1,2,3,4,5,0,1,2,3,4,5]",
        "output": "10"
      },
      {
        "input": "prices = [7, 6, 4, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "9"
      },
      {
        "input": "prices = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]",
        "output": "6"
      },
      {
        "input": "prices = [1,3,5,4,3,6,7,8,2,3,4,5,6,7,8,9,10,11,12,13]",
        "output": "18"
      },
      {
        "input": "prices = [100,90,80,70,60,50,40,30,20,10,0,10,20,30,40,50,60,70,80,90,100]",
        "output": "100"
      },
      {
        "input": "prices = [10,1,9,1,8,1,7,1,6,1,5,1,4,1,3,1,2,1]",
        "output": "15"
      },
      {
        "input": "prices = [5,11,3,50,60,90,30,80,100,50,80,120]",
        "output": "177"
      },
      {
        "input": "prices = [1,2,3,4,5,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "14"
      },
      {
        "input": "prices = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "19"
      },
      {
        "input": "prices = [31,41,48,54,37,76,56,99,1,180]",
        "output": "247"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "24"
      },
      {
        "input": "prices = [3, 3, 5, 0, 0, 3, 1, 4, 2, 10]",
        "output": "12"
      },
      {
        "input": "prices = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "prices = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "18"
      },
      {
        "input": "prices = [7,1,5,3,6,4,2,8,10,4]",
        "output": "13"
      },
      {
        "input": "prices = [3,3,5,0,0,3,1,4,5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "18"
      },
      {
        "input": "prices = [1,100,2,98,3,96,4,94,5,92,6,90,7,88,8,86,9,84,10,82]",
        "output": "195"
      },
      {
        "input": "prices = [10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1]",
        "output": "18"
      },
      {
        "input": "prices = [10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "prices = [2,1,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "2"
      },
      {
        "input": "prices = [3,3,5,0,0,3,1,4,6,8,2,5]",
        "output": "11"
      },
      {
        "input": "prices = [100,180,260,40,310,535,695]",
        "output": "815"
      },
      {
        "input": "prices = [90, 80, 70, 60, 50, 40, 30, 20, 10, 0]",
        "output": "0"
      },
      {
        "input": "prices = [8,6,4,3,3,5,6,7,8,7,6,5,4,3,2,1,0]",
        "output": "5"
      },
      {
        "input": "prices = [5, 2, 10, 1, 3, 12, 6, 9, 1, 15]",
        "output": "25"
      },
      {
        "input": "prices = [7, 1, 5, 3, 6, 4, 2, 8, 10, 5, 6, 7, 3, 10, 4, 5, 6, 1, 10]",
        "output": "18"
      },
      {
        "input": "prices = [5, 2, 4, 0, 0, 3, 5, 7, 8, 2, 8]",
        "output": "14"
      },
      {
        "input": "prices = [1, 4, 3, 0, 5, 8, 3, 1, 5, 6, 4, 10, 2, 5, 12, 8, 9, 1, 10]",
        "output": "21"
      },
      {
        "input": "prices = [3, 3, 5, 0, 0, 3, 1, 4, 10, 8, 6, 2, 9, 5, 7, 1, 10]",
        "output": "19"
      },
      {
        "input": "prices = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10, 3, 5, 7, 9, 11]",
        "output": "17"
      },
      {
        "input": "prices = [100,180,260,310,40,535,695]",
        "output": "865"
      },
      {
        "input": "prices = [1, 2, 4, 2, 5, 7, 2, 4, 9, 0, 9, 1, 2, 1, 3, 5, 7]",
        "output": "17"
      },
      {
        "input": "prices = [3,2,6,5,0,3,1,4,6,8,2,5,7,8,1]",
        "output": "14"
      },
      {
        "input": "prices = [3,3,5,0,0,3,1,4,10,12,15,14,13,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "17"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "13"
      },
      {
        "input": "prices = [1,2,3,4,5,4,3,2,1,10,9,8,7,6,5,14,13,12,11,10,9,8,7,6,5,14]",
        "output": "22"
      },
      {
        "input": "prices = [8, 12, 15, 7, 3, 18, 20, 15]",
        "output": "24"
      },
      {
        "input": "prices = [100,180,260,310,40,535,695,10,5,11,3,8,10,5,11,3,8,10,5,11]",
        "output": "865"
      },
      {
        "input": "prices = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "0"
      },
      {
        "input": "prices = [5, 2, 3, 0, 3, 2, 5, 4, 1, 6, 7, 8, 1, 10]",
        "output": "17"
      },
      {
        "input": "prices = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "prices = [5,0,3,12,6,9,21,18,13,8,12,3,20,15,18]",
        "output": "38"
      },
      {
        "input": "prices = [90, 80, 70, 60, 50, 40, 30]",
        "output": "0"
      },
      {
        "input": "prices = [10, 7, 5, 8, 11, 9, 1, 15]",
        "output": "20"
      },
      {
        "input": "prices = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "11"
      },
      {
        "input": "prices = [1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10]",
        "output": "18"
      },
      {
        "input": "prices = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "0"
      },
      {
        "input": "prices = [100, 180, 260, 310, 40, 535, 695, 10, 20, 30, 100, 150]",
        "output": "865"
      },
      {
        "input": "prices = [12,14,17,10,14,13,12,15]",
        "output": "10"
      },
      {
        "input": "prices = [3,1,4,8,7,2,5,1,3,5,2,9]",
        "output": "15"
      },
      {
        "input": "prices = [1, 2, 3, 2, 1, 4, 5, 4, 6, 7, 8, 9, 10, 8, 12, 15]",
        "output": "16"
      },
      {
        "input": "prices = [100, 30, 15, 10, 8, 25, 80]",
        "output": "72"
      },
      {
        "input": "prices = [1,2,3,4,5,4,3,2,1,10,9,8,7,6,5,14,13,12,11,10]",
        "output": "18"
      },
      {
        "input": "prices = [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100]",
        "output": "0"
      },
      {
        "input": "prices = [3,3,5,0,0,3,1,4,2,5,7,3]",
        "output": "9"
      },
      {
        "input": "prices = [1,3,1,5,1,7,1,9,1,11,1,13,1,15,1,17,1,19,1,21,1,23,1,25,1,27]",
        "output": "50"
      },
      {
        "input": "prices = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "prices = [3,2,6,5,0,3,1,4,7,8,10,11,12,10,13,14,15,16,17,18,19]",
        "output": "23"
      },
      {
        "input": "prices = [30, 50, 10, 60, 40, 90, 55]",
        "output": "100"
      },
      {
        "input": "prices = [8,6,4,3,3,5,8,6,4,3,3,5,8,6,4,3,3,5,8,6,4,3,3,5]",
        "output": "10"
      },
      {
        "input": "prices = [5,1,7,8,3,6,1,2,9,10,4,5,11,12,6,7,13,14,8,9]",
        "output": "20"
      },
      {
        "input": "prices = [10,20,30,40,50,60,70,80,90,100,5,10,15,20,25,30,35,40,45,50]",
        "output": "135"
      },
      {
        "input": "prices = [1,2,3,1,4,5,2,7,8,1,9,10,1,11,12,1,13,14]",
        "output": "24"
      },
      {
        "input": "prices = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "38"
      },
      {
        "input": "prices = [10, 22, 5, 75, 65, 80, 10, 90, 50, 20, 120, 15, 8, 90]",
        "output": "197"
      },
      {
        "input": "prices = [7,6,5,8,3,8,2,6,5,7,3,8,5,6,8,9,1,2,4,5,6]",
        "output": "12"
      },
      {
        "input": "prices = [1,2,3,4,5,0,1,2,3,4,5,0,1,2,3,4,5]",
        "output": "10"
      },
      {
        "input": "prices = [1, 7, 4, 3, 8, 8, 6, 4, 10, 9, 3]",
        "output": "13"
      },
      {
        "input": "prices = [90,80,70,60,50,40,30,20,10]",
        "output": "0"
      },
      {
        "input": "prices = [10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "prices = [7,1,5,3,6,4,1,2,5,1,3,7]",
        "output": "11"
      },
      {
        "input": "prices = [10, 22, 5, 75, 65, 80]",
        "output": "87"
      },
      {
        "input": "prices = [3,8,4,0,5,6,2,9,8,1,10]",
        "output": "18"
      },
      {
        "input": "prices = [1,3,2,8,4,9,3,5,7,1,4,6,8,10,12,14,16,18,20,22]",
        "output": "29"
      },
      {
        "input": "prices = [1,2,4,2,5,7,2,4,9,0,9]",
        "output": "17"
      },
      {
        "input": "prices = [31, 41, 48, 54, 37, 44, 66, 59, 56, 78, 100]",
        "output": "86"
      },
      {
        "input": "prices = [3, 2, 6, 5, 0, 3, 10, 15, 20, 5, 25, 30, 5, 35, 40]",
        "output": "65"
      },
      {
        "input": "prices = [3, 3, 5, 0, 0, 3, 1, 4, 2, 5, 1, 4, 7, 1, 10]",
        "output": "16"
      },
      {
        "input": "prices = [5,3,10,1,7,8,2,9,4]",
        "output": "15"
      },
      {
        "input": "prices = [100, 30, 15, 10, 8, 25, 80, 50, 150, 40, 60, 70, 90, 120, 130, 50, 20, 100, 140, 150]",
        "output": "272"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 0, 100, 101, 102, 103]",
        "output": "107"
      },
      {
        "input": "prices = [3, 2, 6, 5, 0, 3, 1, 4, 7, 8, 10, 9, 11, 12, 8, 10, 5, 7, 3, 4, 2, 1, 5, 6, 8, 9, 10, 1]",
        "output": "21"
      },
      {
        "input": "prices = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "2"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "9"
      },
      {
        "input": "prices = [100,90,80,70,60,50,40,30,20,10,110,120,130,140,150,160,170,180,190,200]",
        "output": "190"
      },
      {
        "input": "prices = [8,6,4,3,3,2,3,5,8,3,8,2,6]",
        "output": "11"
      },
      {
        "input": "prices = [50,10,5,3,8,20,30,25,20,15,10,5,10,15,20,25,30,35,40,45]",
        "output": "67"
      },
      {
        "input": "prices = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "14"
      },
      {
        "input": "prices = [7,1,5,3,6,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "21"
      },
      {
        "input": "prices = [1,2,3,10,1,2,3,10,1,2,3,10,1,2,3,10,1,2,3,10]",
        "output": "18"
      },
      {
        "input": "prices = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "19"
      },
      {
        "input": "prices = [7,1,5,3,6,4,8,2,9,10,15,20,2,18,25]",
        "output": "42"
      },
      {
        "input": "prices = [1, 2, 4, 2, 5, 7, 2, 4, 9, 0]",
        "output": "13"
      },
      {
        "input": "prices = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "prices = [10,20,10,20,10,20,10,20,10,20]",
        "output": "20"
      },
      {
        "input": "prices = [80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "0"
      },
      {
        "input": "prices = [100, 180, 260, 40, 310, 535, 695]",
        "output": "815"
      },
      {
        "input": "prices = [5,3,10,1,4,9,2,8,0,7,3,6,1,5,2,4]",
        "output": "15"
      }
    ]
  },
  {
    "id": 2416,
    "difficulty": "Hard",
    "tags": [
      "Trie",
      "Array",
      "String",
      "Counting"
    ],
    "problemDescription": "You are given an array words of size n consisting of non-empty strings.\nWe define the score of a string term as the number of strings words[i] such that term is a prefix of words[i].\n\nFor example, if words = [\"a\", \"ab\", \"abc\", \"cab\"], then the score of \"ab\" is 2, since \"ab\" is a prefix of both \"ab\" and \"abc\".\n\nReturn an array answer of size n where answer[i] is the sum of scores of every non-empty prefix of words[i].\nNote that a string is considered as a prefix of itself.\n\u00a0\nExample 1:\n\nInput: words = [\"abc\",\"ab\",\"bc\",\"b\"]\nOutput: [5,4,3,2]\nExplanation: The answer for each string is the following:\n- \"abc\" has 3 prefixes: \"a\", \"ab\", and \"abc\".\n- There are 2 strings with the prefix \"a\", 2 strings with the prefix \"ab\", and 1 string with the prefix \"abc\".\nThe total is answer[0] = 2 + 2 + 1 = 5.\n- \"ab\" has 2 prefixes: \"a\" and \"ab\".\n- There are 2 strings with the prefix \"a\", and 2 strings with the prefix \"ab\".\nThe total is answer[1] = 2 + 2 = 4.\n- \"bc\" has 2 prefixes: \"b\" and \"bc\".\n- There are 2 strings with the prefix \"b\", and 1 string with the prefix \"bc\".\nThe total is answer[2] = 2 + 1 = 3.\n- \"b\" has 1 prefix: \"b\".\n- There are 2 strings with the prefix \"b\".\nThe total is answer[3] = 2.\n\nExample 2:\n\nInput: words = [\"abcd\"]\nOutput: [4]\nExplanation:\n\"abcd\" has 4 prefixes: \"a\", \"ab\", \"abc\", and \"abcd\".\nEach prefix has a score of one, so the total is answer[0] = 1 + 1 + 1 + 1 = 4.\n\n\u00a0\nConstraints:\n\n1 <= words.length <= 1000\n1 <= words[i].length <= 1000\nwords[i] consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def sumPrefixScores(self, words: List[str]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "words = [\"hello\",\"hell\",\"he\",\"h\"]",
        "output": "[12, 11, 7, 4]"
      },
      {
        "input": "words = [\"abc\",\"ab\",\"bc\",\"b\"]",
        "output": "[5, 4, 3, 2]"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\"]",
        "output": "[1, 1, 1, 1]"
      },
      {
        "input": "words = [\"aa\",\"aaa\",\"aaaa\",\"aaaaa\"]",
        "output": "[8, 11, 13, 14]"
      },
      {
        "input": "words = [\"a\",\"ab\",\"abc\",\"abcd\"]",
        "output": "[4, 7, 9, 10]"
      },
      {
        "input": "words = [\"abcde\",\"abcd\",\"abc\",\"ab\",\"a\"]",
        "output": "[15, 14, 12, 9, 5]"
      },
      {
        "input": "words = [\"b\",\"bb\",\"bbb\",\"bbbb\"]",
        "output": "[4, 7, 9, 10]"
      },
      {
        "input": "words = [\"xyz\",\"xy\",\"x\"]",
        "output": "[6, 5, 3]"
      },
      {
        "input": "words = [\"abcd\"]",
        "output": "[4]"
      },
      {
        "input": "words = [\"xyz\",\"xy\",\"x\",\"xyzabc\"]",
        "output": "[9, 7, 4, 12]"
      },
      {
        "input": "words = [\"aa\",\"ab\",\"ac\",\"ba\",\"bb\",\"bc\",\"ca\",\"cb\",\"cc\"]",
        "output": "[4, 4, 4, 4, 4, 4, 4, 4, 4]"
      },
      {
        "input": "words = [\"aaaa\",\"aa\",\"a\"]",
        "output": "[7, 5, 3]"
      },
      {
        "input": "words = [\"dynamic\",\"dyn\",\"dynam\",\"dynamicp\",\"dynamicpr\",\"dynamicpro\",\"dynamicprogra\",\"dynamicprogram\",\"dynamicprogramming\"]",
        "output": "[57, 27, 43, 63, 68, 72, 81, 83, 87]"
      },
      {
        "input": "words = [\"optimization\",\"optimize\",\"opt\",\"opti\",\"optim\",\"optimi\"]",
        "output": "[37, 33, 18, 23, 27, 30]"
      },
      {
        "input": "words = [\"xylophone\", \"xylo\", \"xylophon\", \"xy\", \"xyl\", \"xylophonist\", \"xylophoneplayer\", \"xylophoneplayerperformance\"]",
        "output": "[52, 29, 49, 16, 23, 52, 64, 75]"
      },
      {
        "input": "words = [\"xylophone\",\"xylography\",\"xylo\",\"xylophoneography\",\"xyl\",\"xylonate\"]",
        "output": "[33, 29, 23, 40, 18, 27]"
      },
      {
        "input": "words = [\"aabbcc\", \"aabbc\", \"aabb\", \"aa\", \"a\", \"aabbbccc\", \"aabbbbcccc\", \"aabbbbccccd\"]",
        "output": "[30, 29, 27, 15, 8, 33, 40, 41]"
      },
      {
        "input": "words = [\"aaaa\", \"aaab\", \"aaac\", \"aabb\", \"aabc\", \"abaa\", \"abab\", \"abac\", \"abba\", \"abbb\", \"abbc\", \"abca\", \"abcb\", \"abcc\", \"acaa\", \"acab\", \"acac\", \"acba\", \"acbb\", \"acbc\", \"acca\", \"accc\"]",
        "output": "[31, 31, 31, 30, 30, 35, 35, 35, 35, 35, 35, 35, 35, 35, 34, 34, 34, 34, 34, 34, 33, 33]"
      },
      {
        "input": "words = [\"abacax\", \"abaca\", \"bacax\", \"abac\", \"ab\"]",
        "output": "[17, 16, 5, 14, 8]"
      },
      {
        "input": "words = [\"apple\",\"app\",\"application\",\"applesauce\",\"appetizer\"]",
        "output": "[20, 15, 25, 25, 21]"
      },
      {
        "input": "words = [\"pneumonoultramicroscopicsilicovolcanoconiosis\", \"pneumo\", \"pneumonoultra\", \"pneumonoultramicro\", \"pneumonoultramicroscopicsilico\", \"pneumonoultramicroscopicsilicovolcano\", \"pneumo\"]",
        "output": "[155, 42, 77, 97, 133, 147, 42]"
      },
      {
        "input": "words = [\"programming\",\"program\",\"pro\",\"prog\",\"progr\"]",
        "output": "[30, 26, 15, 19, 22]"
      },
      {
        "input": "words = [\"algorithm\",\"algo\",\"al\",\"alex\",\"ale\",\"all\"]",
        "output": "[21, 16, 12, 15, 14, 13]"
      },
      {
        "input": "words = [\"abcdabcd\",\"abcabc\",\"ababab\",\"aaaaaa\",\"bbbbbb\",\"cccccc\",\"dddddd\"]",
        "output": "[14, 12, 11, 9, 6, 6, 6]"
      },
      {
        "input": "words = [\"algorithm\",\"algo\",\"alg\",\"algor\",\"algorith\",\"algori\"]",
        "output": "[35, 23, 18, 27, 34, 30]"
      },
      {
        "input": "words = [\"aabbcc\",\"aabbc\",\"aabb\",\"aab\",\"aa\",\"a\",\"aabbbcc\",\"aabbb\",\"aabbbb\"]",
        "output": "[33, 32, 30, 24, 17, 9, 35, 33, 34]"
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaa\",\"aaaaaaaa\",\"aaaaaaaaa\"]",
        "output": "[9, 17, 24, 30, 35, 39, 42, 44, 45]"
      },
      {
        "input": "words = [\"prefix\",\"pre\",\"prefer\",\"preference\",\"presentation\",\"president\",\"presidency\"]",
        "output": "[26, 21, 28, 32, 32, 33, 34]"
      },
      {
        "input": "words = [\"hello\",\"hell\",\"he\",\"h\",\"hero\",\"helium\",\"helper\"]",
        "output": "[20, 19, 13, 7, 15, 20, 20]"
      },
      {
        "input": "words = [\"unique\",\"un\",\"uni\",\"unic\",\"uniqu\",\"uniquee\",\"uniqueee\",\"uniqueeee\"]",
        "output": "[37, 16, 23, 24, 33, 40, 42, 43]"
      },
      {
        "input": "words = [\"prefix\",\"pre\",\"pref\",\"prefi\",\"prefin\",\"prefixation\",\"prefixes\",\"prefixing\",\"prefixes\",\"preference\",\"prefer\"]",
        "output": "[55, 33, 43, 50, 51, 60, 59, 58, 59, 51, 47]"
      },
      {
        "input": "words = [\"apple\",\"app\",\"ap\",\"application\",\"appetite\"]",
        "output": "[17, 14, 10, 23, 19]"
      },
      {
        "input": "words = [\"aabbcc\",\"aab\",\"abc\",\"aac\",\"acc\",\"aaa\",\"bbb\",\"ccc\",\"aabbc\",\"aabbbc\",\"aabbbcc\",\"aabbbccc\"]",
        "output": "[32, 24, 12, 19, 12, 19, 3, 3, 31, 35, 37, 38]"
      },
      {
        "input": "words = [\"complex\",\"com\",\"compl\",\"complexity\",\"composite\"]",
        "output": "[26, 15, 22, 29, 24]"
      },
      {
        "input": "words = [\"cat\",\"cater\",\"caterpillar\",\"catering\",\"caterer\",\"caterers\",\"catered\",\"catering\"]",
        "output": "[24, 38, 44, 44, 43, 44, 42, 44]"
      },
      {
        "input": "words = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\"]",
        "output": "[10, 19, 27, 34, 40, 45, 49, 52, 54, 55]"
      },
      {
        "input": "words = [\"optimization\",\"opt\",\"opti\",\"optim\",\"optimiz\",\"optimise\",\"optimized\"]",
        "output": "[44, 21, 27, 32, 39, 38, 41]"
      },
      {
        "input": "words = [\"data\",\"dat\",\"database\",\"datascience\",\"datastructure\"]",
        "output": "[19, 15, 23, 27, 29]"
      },
      {
        "input": "words = [\"car\",\"cat\",\"catch\",\"cart\",\"card\",\"carpet\"]",
        "output": "[16, 14, 16, 17, 17, 19]"
      },
      {
        "input": "words = [\"banana\",\"band\",\"ball\",\"bat\",\"basketball\"]",
        "output": "[15, 13, 12, 11, 18]"
      },
      {
        "input": "words = [\"programming\",\"program\",\"pro\",\"pr\",\"p\",\"prefix\",\"pre\",\"preprocessing\"]",
        "output": "[30, 26, 18, 15, 8, 21, 18, 28]"
      },
      {
        "input": "words = [\"longword\",\"longworder\",\"longworderer\",\"longwordererest\",\"longwordereresterest\"]",
        "output": "[40, 48, 54, 60, 65]"
      },
      {
        "input": "words = [\"algorithm\",\"algo\",\"al\",\"alex\",\"algorithmic\",\"algorithms\"]",
        "output": "[35, 20, 12, 14, 37, 36]"
      },
      {
        "input": "words = [\"aaa\", \"aab\", \"aac\", \"aba\", \"abb\", \"abc\", \"aca\", \"acb\", \"acc\", \"baa\", \"bab\", \"bac\", \"bba\", \"bbb\", \"bbc\", \"bca\", \"bcb\", \"bcc\", \"caa\", \"cab\", \"cac\", \"cba\", \"cbb\", \"cbc\", \"cca\", \"ccb\", \"ccc\"]",
        "output": "[13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]"
      },
      {
        "input": "words = [\"backtracking\",\"back\",\"backt\",\"backtr\",\"backtra\",\"backtrac\",\"backtrack\",\"backtracki\",\"backtrackin\",\"backtrackin\",\"backtrackinga\",\"backtrackingal\",\"backtrackingalg\",\"backtrackingalgo\"]",
        "output": "[131, 56, 69, 81, 92, 102, 111, 119, 126, 126, 135, 138, 140, 141]"
      },
      {
        "input": "words = [\"prefix\",\"pre\",\"pres\",\"presum\",\"pressure\"]",
        "output": "[18, 15, 18, 20, 22]"
      },
      {
        "input": "words = [\"interview\",\"inter\",\"inte\",\"interw\",\"interv\",\"intervi\",\"interviewe\"]",
        "output": "[45, 34, 28, 35, 38, 41, 46]"
      },
      {
        "input": "words = [\"zebra\", \"zoo\", \"zookeeper\", \"zoozoo\", \"ze\", \"zee\", \"z\"]",
        "output": "[13, 13, 19, 16, 10, 11, 7]"
      },
      {
        "input": "words = [\"repeated\",\"repeat\",\"rep\",\"re\",\"r\",\"peated\",\"eat\",\"e\",\"t\",\"ted\",\"tedious\",\"tediousness\"]",
        "output": "[20, 18, 12, 9, 5, 6, 4, 2, 4, 10, 18, 22]"
      },
      {
        "input": "words = [\"banana\",\"ban\",\"bananas\",\"band\",\"bandana\",\"bandwidth\"]",
        "output": "[24, 18, 25, 21, 24, 26]"
      },
      {
        "input": "words = [\"repeated\",\"repeats\",\"repeat\",\"repeating\",\"repeatedly\",\"repeatability\"]",
        "output": "[40, 37, 36, 39, 42, 43]"
      },
      {
        "input": "words = [\"algorithm\",\"al\",\"algo\",\"all\",\"algorithms\",\"application\",\"app\"]",
        "output": "[28, 12, 18, 13, 29, 19, 11]"
      },
      {
        "input": "words = [\"flower\",\"flow\",\"flight\",\"flour\",\"flourish\",\"flourishingly\"]",
        "output": "[21, 19, 16, 23, 29, 34]"
      },
      {
        "input": "words = [\"banana\", \"ban\", \"band\", \"bandana\", \"bandanna\", \"banda\"]",
        "output": "[21, 18, 22, 28, 29, 25]"
      },
      {
        "input": "words = [\"hello\",\"hell\",\"he\",\"h\",\"helicopter\",\"helium\",\"help\",\"hero\",\"her\",\"hemoglobin\"]",
        "output": "[27, 26, 19, 10, 32, 28, 25, 22, 21, 27]"
      },
      {
        "input": "words = [\"unique\",\"uniques\",\"unicorn\",\"unicycle\",\"universality\"]",
        "output": "[21, 22, 20, 21, 24]"
      },
      {
        "input": "words = [\"optimization\",\"optimizer\",\"optimize\",\"optimal\",\"optimism\",\"optimist\",\"optimistic\",\"optimum\",\"opt\",\"optional\"]",
        "output": "[61, 59, 58, 49, 57, 58, 60, 49, 30, 43]"
      },
      {
        "input": "words = [\"complex\",\"complicated\",\"complicate\",\"complexity\",\"complexion\",\"complexing\",\"complexified\",\"complexify\",\"complexifies\",\"complexing\"]",
        "output": "[66, 61, 60, 75, 75, 77, 81, 77, 81, 77]"
      },
      {
        "input": "words = [\"abracadabra\",\"abra\",\"bracadabra\",\"bracada\",\"braca\",\"bracad\",\"bracadab\",\"bracadabr\",\"bracadabra\",\"bracadabram\",\"bracadabramm\"]",
        "output": "[15, 8, 75, 60, 45, 53, 66, 71, 75, 77, 78]"
      },
      {
        "input": "words = [\"hello\",\"hell\",\"help\",\"hero\",\"her\",\"hers\",\"he\",\"hem\",\"hemoglobin\"]",
        "output": "[24, 23, 22, 22, 21, 22, 18, 20, 27]"
      },
      {
        "input": "words = [\"trie\",\"tr\",\"tree\",\"tries\",\"trigger\",\"trig\"]",
        "output": "[18, 12, 14, 19, 21, 18]"
      },
      {
        "input": "words = [\"aabbcc\",\"aabbc\",\"aabb\",\"aab\",\"aa\",\"a\"]",
        "output": "[21, 20, 18, 15, 11, 6]"
      },
      {
        "input": "words = [\"abcdefghijklmnopqrstuvwxyz\", \"abcde\", \"abcdef\", \"abcdefghij\", \"a\"]",
        "output": "[48, 21, 24, 32, 5]"
      },
      {
        "input": "words = [\"algorithm\",\"algo\",\"algor\",\"algorit\",\"algorith\",\"algorithme\",\"algori\",\"algorithmically\"]",
        "output": "[57, 32, 39, 50, 54, 58, 45, 63]"
      },
      {
        "input": "words = [\"banana\",\"ban\",\"band\",\"bandana\",\"bandwidth\"]",
        "output": "[18, 15, 18, 21, 23]"
      },
      {
        "input": "words = [\"algorithm\", \"algebra\", \"alien\", \"alliance\", \"alibi\", \"allocate\", \"allot\", \"allow\", \"allude\", \"allure\", \"alloy\", \"ally\"]",
        "output": "[32, 30, 28, 37, 28, 40, 37, 37, 36, 36, 37, 33]"
      },
      {
        "input": "words = [\"prefix\",\"pre\",\"pref\",\"prefer\",\"preference\",\"preferred\",\"preferring\"]",
        "output": "[29, 21, 27, 35, 39, 39, 40]"
      },
      {
        "input": "words = [\"data\",\"database\",\"datastructure\",\"datamining\",\"dataviz\",\"datascience\",\"datamodel\"]",
        "output": "[28, 32, 38, 35, 31, 36, 34]"
      },
      {
        "input": "words = [\"programming\",\"program\",\"pro\",\"progress\",\"profound\",\"process\",\"progressive\"]",
        "output": "[37, 33, 21, 35, 26, 25, 38]"
      },
      {
        "input": "words = [\"programming\", \"program\", \"pro\", \"programminglanguage\", \"prolog\", \"protocol\"]",
        "output": "[38, 30, 18, 46, 21, 23]"
      },
      {
        "input": "words = [\"abacaxi\",\"abacax\",\"abac\",\"aba\",\"ab\",\"a\",\"abc\",\"abcd\",\"abcde\"]",
        "output": "[29, 28, 24, 21, 17, 9, 20, 22, 23]"
      },
      {
        "input": "words = [\"zebra\",\"ze\",\"zoo\",\"zookeeper\",\"zest\",\"zippy\",\"zeta\",\"zone\"]",
        "output": "[15, 12, 13, 19, 14, 12, 14, 13]"
      },
      {
        "input": "words = [\"complexity\",\"comp\",\"compl\",\"comple\",\"complex\",\"complexe\",\"complexit\"]",
        "output": "[48, 28, 34, 39, 43, 44, 47]"
      },
      {
        "input": "words = [\"algorithm\", \"algebra\", \"al\", \"algorithmically\", \"algo\"]",
        "output": "[27, 18, 10, 33, 17]"
      },
      {
        "input": "words = [\"unique\",\"un\",\"uni\",\"unic\",\"uniqu\",\"uniqueness\",\"uniquely\",\"uniques\"]",
        "output": "[37, 16, 23, 24, 33, 41, 39, 38]"
      },
      {
        "input": "words = [\"datastructure\",\"data\",\"datas\",\"datast\",\"datastr\",\"datastru\",\"datastruc\"]",
        "output": "[52, 28, 34, 39, 43, 46, 48]"
      },
      {
        "input": "words = [\"prefix\",\"prefixes\",\"pref\",\"prefer\",\"prefixing\"]",
        "output": "[26, 28, 20, 22, 29]"
      },
      {
        "input": "words = [\"apple\",\"app\",\"ap\",\"a\",\"application\"]",
        "output": "[15, 12, 9, 5, 21]"
      },
      {
        "input": "words = [\"banana\", \"bandana\", \"band\", \"bandwidth\", \"bandage\"]",
        "output": "[18, 23, 19, 24, 23]"
      },
      {
        "input": "words = [\"abacaxi\",\"abac\",\"aba\",\"ab\",\"a\",\"abacax\",\"abacaxs\",\"abacaxus\"]",
        "output": "[35, 26, 21, 15, 8, 34, 35, 36]"
      },
      {
        "input": "words = [\"interview\",\"inter\",\"interac\",\"interactive\",\"interact\",\"interactivity\"]",
        "output": "[34, 30, 38, 46, 41, 48]"
      },
      {
        "input": "words = [\"prefix\", \"prefixing\", \"prefixation\", \"prefixer\", \"pref\", \"pre\", \"p\"]",
        "output": "[32, 35, 37, 34, 24, 19, 7]"
      },
      {
        "input": "words = [\"zebra\",\"zebr\",\"zeb\",\"ze\",\"z\",\"zebraa\",\"zebrab\",\"zebrac\",\"zebrad\"]",
        "output": "[35, 30, 24, 17, 9, 36, 36, 36, 36]"
      },
      {
        "input": "words = [\"cat\",\"cater\",\"category\",\"categories\",\"caterpillar\",\"catering\",\"catered\",\"caterer\",\"caterers\",\"catering\"]",
        "output": "[30, 46, 46, 48, 52, 52, 50, 51, 52, 52]"
      },
      {
        "input": "words = [\"abacaxi\",\"abacax\",\"abac\",\"aba\",\"ab\",\"a\",\"bacaxi\",\"bacax\",\"bac\",\"ba\",\"b\"]",
        "output": "[23, 22, 18, 15, 11, 6, 17, 16, 12, 9, 5]"
      },
      {
        "input": "words = [\"abacax\", \"abaca\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]",
        "output": "[21, 20, 14, 18, 21, 23, 24]"
      },
      {
        "input": "words = [\"xylophone\",\"xylo\",\"xylophon\",\"xylophone\",\"xylophones\",\"xylophonist\",\"xylophonists\",\"xylophonistic\",\"xylophonistically\",\"xylophonists\",\"xylophonist\"]",
        "output": "[87, 44, 84, 87, 88, 102, 104, 106, 110, 104, 102]"
      },
      {
        "input": "words = [\"algorithm\",\"algo\",\"al\",\"alex\",\"alert\"]",
        "output": "[19, 14, 10, 13, 14]"
      },
      {
        "input": "words = [\"banana\",\"ban\",\"band\",\"bandana\",\"bandwidth\",\"bandage\"]",
        "output": "[21, 18, 22, 26, 27, 26]"
      },
      {
        "input": "words = [\"test\",\"testing\",\"tested\",\"testify\",\"testimony\",\"testimonial\",\"testament\",\"testamentary\",\"testator\",\"testatrix\"]",
        "output": "[40, 46, 42, 46, 51, 53, 52, 55, 48, 49]"
      },
      {
        "input": "words = [\"banana\",\"band\",\"bandana\",\"bandanna\",\"bandage\",\"bandaid\"]",
        "output": "[21, 23, 30, 31, 29, 29]"
      },
      {
        "input": "words = [\"abcd\",\"abc\",\"ab\",\"a\",\"zyx\",\"zy\",\"z\",\"mnop\",\"mno\",\"mn\",\"m\"]",
        "output": "[10, 9, 7, 4, 6, 5, 3, 10, 9, 7, 4]"
      },
      {
        "input": "words = [\"optimization\", \"optimizer\", \"optimize\", \"optimal\", \"optimism\", \"optimist\", \"optimum\", \"option\", \"optional\", \"opt\", \"optic\", \"optics\"]",
        "output": "[67, 65, 64, 56, 62, 62, 56, 51, 53, 36, 49, 50]"
      },
      {
        "input": "words = [\"banana\", \"ban\", \"band\", \"bandana\", \"bandanna\", \"banda\", \"bandanaaa\"]",
        "output": "[24, 21, 26, 35, 35, 30, 37]"
      },
      {
        "input": "words = [\"supercalifragilisticexpialidocious\",\"super\",\"supercal\",\"supercalifrag\",\"supercalifragilistic\",\"supercalifragilisticex\",\"supercalifragilisticexp\",\"supercalifragilisticexpia\",\"supercalifragilisticexpiali\",\"supercalifragilisticexpialidoc\",\"supercalifragilisticexpialidociou\",\"supercalifragilisticexpialidociousness\"]",
        "output": "[274, 60, 93, 143, 206, 222, 229, 241, 251, 263, 272, 278]"
      },
      {
        "input": "words = [\"interspecies\",\"inter\",\"interstellar\",\"interact\",\"interaction\",\"interference\",\"internet\",\"interim\"]",
        "output": "[48, 40, 48, 46, 49, 47, 43, 42]"
      }
    ]
  },
  {
    "id": 2713,
    "difficulty": "Hard",
    "tags": [
      "Memoization",
      "Array",
      "Hash Table",
      "Binary Search",
      "Dynamic Programming",
      "Matrix",
      "Ordered Set",
      "Sorting"
    ],
    "problemDescription": "Given a 1-indexed\u00a0m x n integer matrix mat, you can select any cell in the matrix as your starting cell.\nFrom the starting cell, you can move to any other cell in the same row or column, but only if the value of the destination cell is strictly greater than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves.\nYour task is to find the maximum number of cells that you can visit in the matrix by starting from some cell.\nReturn an integer denoting the maximum number of cells that can be visited.\n\u00a0\nExample 1:\n\n\nInput: mat = [[3,1],[3,4]]\nOutput: 2\nExplanation: The image shows how we can visit 2 cells starting from row 1, column 2. It can be shown that we cannot visit more than 2 cells no matter where we start from, so the answer is 2. \n\nExample 2:\n\n\nInput: mat = [[1,1],[1,1]]\nOutput: 1\nExplanation: Since the cells must be strictly increasing, we can only visit one cell in this example. \n\nExample 3:\n\n\nInput: mat = [[3,1,6],[-9,5,7]]\nOutput: 4\nExplanation: The image above shows how we can visit 4 cells starting from row 2, column 1. It can be shown that we cannot visit more than 4 cells no matter where we start from, so the answer is 4. \n\n\u00a0\nConstraints:\n\nm == mat.length\u00a0\nn == mat[i].length\u00a0\n1 <= m, n <= 105\n1 <= m * n <= 105\n-105\u00a0<= mat[i][j] <= 105\n\n",
    "starterCode": "class Solution:\n    def maxIncreasingCells(self, mat: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "mat = [[10,20,30],[15,25,35],[20,30,40]]",
        "output": "5"
      },
      {
        "input": "mat = [[1]]",
        "output": "1"
      },
      {
        "input": "mat = [[-100000,100000],[-100000,100000]]",
        "output": "2"
      },
      {
        "input": "mat = [[1,1,1,1],[1,1,1,1],[1,1,1,1]]",
        "output": "1"
      },
      {
        "input": "mat = [[10,9,8,7,6],[5,4,3,2,1],[6,7,8,9,10]]",
        "output": "10"
      },
      {
        "input": "mat = [[3,1],[3,4]]",
        "output": "2"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
        "output": "6"
      },
      {
        "input": "mat = [[1,2,3,4,5],[5,4,3,2,1],[1,3,5,7,9]]",
        "output": "6"
      },
      {
        "input": "mat = [[9,8,7],[6,5,4],[3,2,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[10,9,8,7],[6,5,4,3],[2,1,0,-1]]",
        "output": "6"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "5"
      },
      {
        "input": "mat = [[-1,-2,-3],[-2,-3,-4],[-3,-4,-5]]",
        "output": "5"
      },
      {
        "input": "mat = [[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,2,3,4],[2,3,4,5],[3,4,5,6]]",
        "output": "6"
      },
      {
        "input": "mat = [[1,1],[1,1]]",
        "output": "1"
      },
      {
        "input": "mat = [[1,3,5],[2,4,6],[3,5,7]]",
        "output": "5"
      },
      {
        "input": "mat = [[10,9,8],[7,6,5],[4,3,2],[1,1,1]]",
        "output": "6"
      },
      {
        "input": "mat = [[3,1,6],[-9,5,7]]",
        "output": "4"
      },
      {
        "input": "mat = [[1,2,3],[3,4,5],[5,6,7],[7,8,9]]",
        "output": "6"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29],[29,27,25,23,21,19,17,15,13,11,9,7,5,3,1],[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]]",
        "output": "21"
      },
      {
        "input": "mat = [[-1,-2,-3,-4,-5],[-6,-7,-8,-9,-10],[-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20]]",
        "output": "8"
      },
      {
        "input": "mat = [[1,10,3,4,5],[10,1,8,7,6],[3,8,1,14,15],[18,7,14,1,16]]",
        "output": "10"
      },
      {
        "input": "mat = [[10, 20, 30], [30, 20, 10], [10, 20, 30], [30, 20, 10], [10, 20, 30]]",
        "output": "3"
      },
      {
        "input": "mat = [[-5, -4, -3, -2, -1], [-4, -3, -2, -1, 0], [-3, -2, -1, 0, 1], [-2, -1, 0, 1, 2], [-1, 0, 1, 2, 3]]",
        "output": "9"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5, 6, 7, 8], [8, 7, 6, 5, 4, 3, 2, 1], [9, 10, 11, 12, 13, 14, 15, 16], [16, 15, 14, 13, 12, 11, 10, 9]]",
        "output": "16"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17,19],[19,17,15,13,11,9,7,5,3,1]]",
        "output": "12"
      },
      {
        "input": "mat = [[1,3,5,7,9,11,13,15,17,19],[2,4,6,8,10,12,14,16,18,20],[19,18,17,16,15,14,13,12,11,10],[20,19,18,17,16,15,14,13,12,11]]",
        "output": "14"
      },
      {
        "input": "mat = [[-5,-4,-3,-2,-1],[0,1,2,3,4],[5,6,7,8,9]]",
        "output": "7"
      },
      {
        "input": "mat = [[-1,-2,-3,-4],[-4,-3,-2,-1],[-5,-6,-7,-8],[-8,-7,-6,-5]]",
        "output": "8"
      },
      {
        "input": "mat = [[5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5]]",
        "output": "1"
      },
      {
        "input": "mat = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]",
        "output": "1"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40]]",
        "output": "13"
      },
      {
        "input": "mat = [[100, 200, 300], [150, 250, 350], [200, 300, 400]]",
        "output": "5"
      },
      {
        "input": "mat = [[100, 99, 98, 97, 96], [95, 94, 93, 92, 91], [90, 89, 88, 87, 86], [85, 84, 83, 82, 81], [80, 79, 78, 77, 76]]",
        "output": "9"
      },
      {
        "input": "mat = [[100,200,300],[150,250,350],[200,300,400]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,10,1,10,1,10],[10,1,10,1,10,1],[1,10,1,10,1,10],[10,1,10,1,10,1],[1,10,1,10,1,10]]",
        "output": "2"
      },
      {
        "input": "mat = [[1,2,1,2,1],[2,1,2,1,2],[1,2,1,2,1],[2,1,2,1,2],[1,2,1,2,1]]",
        "output": "2"
      },
      {
        "input": "mat = [[-10, -9, -8, -7], [-6, -5, -4, -3], [-2, -1, 0, 1], [2, 3, 4, 5]]",
        "output": "7"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]]",
        "output": "12"
      },
      {
        "input": "mat = [[1,1,1,1],[1,2,3,1],[1,3,1,1],[1,1,1,1]]",
        "output": "3"
      },
      {
        "input": "mat = [[-1,0,1,2],[3,4,5,6],[7,8,9,10],[11,12,13,14]]",
        "output": "7"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9]]",
        "output": "9"
      },
      {
        "input": "mat = [[5,3,1,4],[6,2,8,7],[9,11,13,12],[10,15,14,16]]",
        "output": "12"
      },
      {
        "input": "mat = [[1,10,3,11,5],[12,6,7,8,9],[13,14,15,16,17],[18,19,20,21,22]]",
        "output": "12"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]",
        "output": "7"
      },
      {
        "input": "mat = [[10,10,10,10],[10,10,10,10],[10,10,10,10],[10,10,10,10]]",
        "output": "1"
      },
      {
        "input": "mat = [[5, 3, 8, 2, 9], [1, 6, 4, 7, 3], [9, 1, 8, 2, 5], [2, 7, 3, 8, 4], [8, 2, 9, 4, 1]]",
        "output": "7"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5], [4, 3, 2, 1, 0], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 1, 1, 1, 1]]",
        "output": "8"
      },
      {
        "input": "mat = [[1,2,3,4,5],[1,3,5,7,9],[2,4,6,8,10],[10,8,6,4,2],[9,7,5,3,1]]",
        "output": "7"
      },
      {
        "input": "mat = [[-10,-20,-30],[-20,-30,-40],[-30,-40,-50]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,3,2,4,5],[6,5,4,3,2],[7,8,9,10,11],[12,13,14,15,16]]",
        "output": "11"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1], [1, 3, 5, 7, 9, 11], [11, 9, 7, 5, 3, 1], [2, 4, 6, 8, 10, 12]]",
        "output": "9"
      },
      {
        "input": "mat = [[5,5,5,5,5],[5,1,5,1,5],[5,1,10,1,5],[5,1,5,1,5],[5,5,5,5,5]]",
        "output": "3"
      },
      {
        "input": "mat = [[1, 3, 2, 4, 5], [6, 8, 7, 9, 10], [11, 13, 12, 15, 14], [19, 18, 17, 20, 21], [22, 23, 24, 25, 26]]",
        "output": "12"
      },
      {
        "input": "mat = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7]]",
        "output": "7"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5], [5, 4, 3, 2, 1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,1,1,1,1],[1,2,2,2,1],[1,2,3,2,1],[1,2,2,2,1],[1,1,1,1,1]]",
        "output": "3"
      },
      {
        "input": "mat = [[5,5,5,5,5],[5,1,2,3,5],[5,4,5,5,5],[5,5,5,5,5],[5,5,5,5,5]]",
        "output": "4"
      },
      {
        "input": "mat = [[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]",
        "output": "10"
      },
      {
        "input": "mat = [[3,1,4,1,5],[9,2,6,5,3],[5,8,9,7,9],[3,2,3,8,4]]",
        "output": "7"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3]]",
        "output": "3"
      },
      {
        "input": "mat = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,100]]",
        "output": "2"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]]",
        "output": "17"
      },
      {
        "input": "mat = [[1, 1, 1, 1], [1, 2, 2, 1], [1, 2, 3, 1], [1, 1, 1, 1]]",
        "output": "3"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[6,5,4,3,2,1],[1,3,5,7,9,11],[12,10,8,6,4,2]]",
        "output": "8"
      },
      {
        "input": "mat = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]",
        "output": "3"
      },
      {
        "input": "mat = [[-1,-2,-3,-4],[-5,-6,-7,-8],[-9,-10,-11,-12],[-13,-14,-15,-16]]",
        "output": "7"
      },
      {
        "input": "mat = [[3,1,4,1,5,9],[2,6,5,3,5,9],[5,8,9,7,9,3],[2,8,0,3,1,4]]",
        "output": "9"
      },
      {
        "input": "mat = [[10,15,20],[25,30,35],[40,45,50],[55,60,65],[70,75,80]]",
        "output": "7"
      },
      {
        "input": "mat = [[1,100,2,99,3,98,4,97,5,96],[6,95,7,94,8,93,9,92,10,91]]",
        "output": "12"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10,11],[3,4,5,6,7,8,9,10,11,12]]",
        "output": "12"
      },
      {
        "input": "mat = [[1, 100, 1], [100, 1, 100], [1, 100, 1]]",
        "output": "2"
      },
      {
        "input": "mat = [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [3, 5, 7, 9, 11], [4, 6, 8, 10, 12], [5, 7, 9, 11, 13]]",
        "output": "9"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,2,4,6,8,10]]",
        "output": "10"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17,19],[19,17,15,13,11,9,7,5,3,1],[2,4,6,8,10,12,14,16,18,20],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "14"
      },
      {
        "input": "mat = [[5,2,3,4,1],[1,2,6,7,8],[3,4,5,6,9],[9,8,7,6,5]]",
        "output": "8"
      },
      {
        "input": "mat = [[-10, -20, -30], [-30, -20, -10], [-10, -30, -20]]",
        "output": "3"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,2,4,6,8,10],[10,8,6,4,2,9,7,5,3,1]]",
        "output": "10"
      },
      {
        "input": "mat = [[-10,-20,-30,-40],[-40,-30,-20,-10],[-50,-60,-70,-80],[-80,-70,-60,-50]]",
        "output": "8"
      },
      {
        "input": "mat = [[1, 5, 3, 6, 2], [9, 8, 7, 10, 11], [4, 13, 12, 15, 14], [19, 18, 17, 20, 21]]",
        "output": "12"
      },
      {
        "input": "mat = [[-1, -2, -3, -4], [-5, -6, -7, -8], [-9, -10, -11, -12], [-13, -14, -15, -16]]",
        "output": "7"
      },
      {
        "input": "mat = [[1, 1, 1, 1, 1], [1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1,2,3,4,5],[5,4,3,2,1],[1,3,5,7,9],[9,7,5,3,1]]",
        "output": "6"
      },
      {
        "input": "mat = [[5, 3, 1, 2], [4, 6, 2, 3], [7, 5, 3, 4], [8, 6, 4, 5]]",
        "output": "7"
      },
      {
        "input": "mat = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]",
        "output": "5"
      },
      {
        "input": "mat = [[10, 20, 30, 40], [15, 25, 35, 45], [20, 30, 40, 50], [25, 35, 45, 55]]",
        "output": "7"
      },
      {
        "input": "mat = [[5,5,5,5],[5,5,5,5],[5,5,5,5]]",
        "output": "1"
      },
      {
        "input": "mat = [[1,2,3,4,5],[5,4,3,2,1],[1,3,5,7,9],[9,7,5,3,1],[2,4,6,8,10]]",
        "output": "7"
      },
      {
        "input": "mat = [[1,2,3,4,5],[10,9,8,7,6],[11,12,13,14,15],[20,19,18,17,16]]",
        "output": "20"
      },
      {
        "input": "mat = [[1,2,3],[2,3,4],[3,4,5],[4,5,6]]",
        "output": "6"
      },
      {
        "input": "mat = [[-10, -20, -30, -40], [-35, -25, -15, -5], [-50, -45, -40, -35], [-60, -55, -50, -45]]",
        "output": "8"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[20,19,18,17,16,15,14,13,12,11],[30,29,28,27,26,25,24,23,22,21]]",
        "output": "21"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]]",
        "output": "8"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5], [10, 9, 8, 7, 6], [11, 12, 13, 14, 15], [20, 19, 18, 17, 16], [21, 22, 23, 24, 25]]",
        "output": "25"
      },
      {
        "input": "mat = [[1,2,3,4,5],[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1]]",
        "output": "5"
      },
      {
        "input": "mat = [[1, 1000, 2, 999], [3, 998, 4, 997], [5, 996, 6, 995], [7, 994, 8, 993]]",
        "output": "10"
      },
      {
        "input": "mat = [[5,3,9,1],[1,7,6,8],[2,9,5,1],[8,5,4,6]]",
        "output": "6"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5], [10, 9, 8, 7, 6], [11, 12, 13, 14, 15], [20, 19, 18, 17, 16], [21, 22, 23, 24, 25], [26, 27, 28, 29, 30]]",
        "output": "26"
      },
      {
        "input": "mat = [[9,8,7,6,5,4,3,2,1,0],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]]",
        "output": "11"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17,19],[19,17,15,13,11,9,7,5,3,1],[2,4,6,8,10,12,14,16,18,20]]",
        "output": "14"
      },
      {
        "input": "mat = [[1, 2, 3, 4], [4, 3, 2, 1], [1, 2, 3, 4], [4, 3, 2, 1]]",
        "output": "4"
      },
      {
        "input": "mat = [[1, 2, 1, 2, 1], [2, 1, 2, 1, 2], [1, 2, 1, 2, 1], [2, 1, 2, 1, 2], [1, 2, 1, 2, 1]]",
        "output": "2"
      },
      {
        "input": "mat = [[-1,-2,-3],[-3,-2,-1],[1,0,-1],[-2,-3,-4]]",
        "output": "5"
      },
      {
        "input": "mat = [[100,-100,200,-200,300],[-300,300,-400,400,-500],[500,-500,600,-600,700]]",
        "output": "7"
      },
      {
        "input": "mat = [[100,-100,200,-200,300],[-100,200,-200,300,-300],[200,-200,300,-300,400],[0,0,0,0,0]]",
        "output": "8"
      }
    ]
  },
  {
    "id": 1250,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Math",
      "Number Theory"
    ],
    "problemDescription": "Given an array nums of\u00a0positive integers. Your task is to select some subset of nums, multiply each element by an integer and add all these numbers.\u00a0The array is said to be\u00a0good\u00a0if you can obtain a sum of\u00a01\u00a0from the array by any possible subset and multiplicand.\nReturn\u00a0True\u00a0if the array is good\u00a0otherwise\u00a0return\u00a0False.\n\u00a0\nExample 1:\n\nInput: nums = [12,5,7,23]\nOutput: true\nExplanation: Pick numbers 5 and 7.\n5*3 + 7*(-2) = 1\n\nExample 2:\n\nInput: nums = [29,6,10]\nOutput: true\nExplanation: Pick numbers 29, 6 and 10.\n29*1 + 6*(-3) + 10*(-1) = 1\n\nExample 3:\n\nInput: nums = [3,6]\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9\n\n",
    "starterCode": "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "nums = [7,13,19]",
        "output": "True"
      },
      {
        "input": "nums = [100,200,300,400]",
        "output": "False"
      },
      {
        "input": "nums = [7,13,19,29]",
        "output": "True"
      },
      {
        "input": "nums = [29,6,10]",
        "output": "True"
      },
      {
        "input": "nums = [7,14,21,35]",
        "output": "False"
      },
      {
        "input": "nums = [2,4,6,8,10]",
        "output": "False"
      },
      {
        "input": "nums = [7,14,21,28]",
        "output": "False"
      },
      {
        "input": "nums = [2,3,5]",
        "output": "True"
      },
      {
        "input": "nums = [1]",
        "output": "True"
      },
      {
        "input": "nums = [1000000000]",
        "output": "False"
      },
      {
        "input": "nums = [11,22,33,44]",
        "output": "False"
      },
      {
        "input": "nums = [3,6]",
        "output": "False"
      },
      {
        "input": "nums = [12,5,7,23]",
        "output": "True"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000]",
        "output": "False"
      },
      {
        "input": "nums = [100,200,300]",
        "output": "False"
      },
      {
        "input": "nums = [5,5,5,5]",
        "output": "False"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "True"
      },
      {
        "input": "nums = [3,5,7,11,13]",
        "output": "True"
      },
      {
        "input": "nums = [17,19,23,29]",
        "output": "True"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20]",
        "output": "False"
      },
      {
        "input": "nums = [8,12,16,20]",
        "output": "False"
      },
      {
        "input": "nums = [7,14,21,28,35]",
        "output": "False"
      },
      {
        "input": "nums = [5,10,15]",
        "output": "False"
      },
      {
        "input": "nums = [5,10,15,20,25]",
        "output": "False"
      },
      {
        "input": "nums = [11,22,33,44,55]",
        "output": "False"
      },
      {
        "input": "nums = [1,2,3]",
        "output": "True"
      },
      {
        "input": "nums = [11,13,17,19]",
        "output": "True"
      },
      {
        "input": "nums = [5]",
        "output": "False"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1]",
        "output": "True"
      },
      {
        "input": "nums = [123456789, 987654321, 246813579, 864204864]",
        "output": "False"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]",
        "output": "False"
      },
      {
        "input": "nums = [97,101,103,107,109,113,127,131,137,139]",
        "output": "True"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]",
        "output": "False"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "False"
      },
      {
        "input": "nums = [41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157]",
        "output": "True"
      },
      {
        "input": "nums = [13195,26390,39585,52780,65975,79170,92365,105560,118755,131950]",
        "output": "False"
      },
      {
        "input": "nums = [13, 17, 19, 23, 29]",
        "output": "True"
      },
      {
        "input": "nums = [1000000007, 1000000009, 1000000021, 1000000033, 1000000037, 1000000087, 1000000093]",
        "output": "True"
      },
      {
        "input": "nums = [101, 103, 107, 109, 113, 127, 131, 137, 139]",
        "output": "True"
      },
      {
        "input": "nums = [111111111, 222222222, 333333333, 444444444]",
        "output": "False"
      },
      {
        "input": "nums = [4, 9, 25, 49, 121, 169, 289, 361]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]",
        "output": "True"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "False"
      },
      {
        "input": "nums = [9973, 9967, 9959, 9949, 9941, 9931, 9929, 9923, 9919, 9907]",
        "output": "True"
      },
      {
        "input": "nums = [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42]",
        "output": "False"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "False"
      },
      {
        "input": "nums = [13,17,19,23,29]",
        "output": "True"
      },
      {
        "input": "nums = [131, 137, 139, 149, 151, 157, 163, 167, 173, 179]",
        "output": "True"
      },
      {
        "input": "nums = [8, 14, 21, 35, 56]",
        "output": "True"
      },
      {
        "input": "nums = [999999999, 888888888, 777777777, 666666666, 555555555, 444444444, 333333333, 222222222, 111111111]",
        "output": "False"
      },
      {
        "input": "nums = [17, 23, 19, 5, 3, 2]",
        "output": "True"
      },
      {
        "input": "nums = [1000000000] * 100000",
        "output": "Error: Solution.isGoodArray() missing 1 required positional argument: 'nums'"
      },
      {
        "input": "nums = [7, 21, 35, 56, 112, 140]",
        "output": "False"
      },
      {
        "input": "nums = [15,30,45,60,75,90,105,120,135,150]",
        "output": "False"
      },
      {
        "input": "nums = [13,17,19,23,29,31]",
        "output": "True"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]",
        "output": "True"
      },
      {
        "input": "nums = [8, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72]",
        "output": "False"
      },
      {
        "input": "nums = [1000000007, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]",
        "output": "True"
      },
      {
        "input": "nums = [123456789, 987654321, 111111111, 222222222, 333333333]",
        "output": "False"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]",
        "output": "False"
      },
      {
        "input": "nums = [41,43,47,53,59,61,67,71,73,79]",
        "output": "True"
      },
      {
        "input": "nums = [1000000007,1000000009,1000000011]",
        "output": "True"
      },
      {
        "input": "nums = [101,103,107,109,113]",
        "output": "True"
      },
      {
        "input": "nums = [42, 105, 210, 35]",
        "output": "False"
      },
      {
        "input": "nums = [1000000007, 1000000009, 1000000021]",
        "output": "True"
      },
      {
        "input": "nums = [49, 77, 91, 119, 133, 161, 187, 203, 221, 247, 259, 287, 301, 329, 343, 371, 399, 413, 437, 469, 497, 511, 539, 553, 581]",
        "output": "True"
      },
      {
        "input": "nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]",
        "output": "False"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "True"
      },
      {
        "input": "nums = [3,5,8,11,19]",
        "output": "True"
      },
      {
        "input": "nums = [555, 1110, 1665, 2220, 2775]",
        "output": "False"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384]",
        "output": "True"
      },
      {
        "input": "nums = [999999999, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]",
        "output": "True"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000, 62500000]",
        "output": "False"
      },
      {
        "input": "nums = [15, 21, 35, 525, 630]",
        "output": "True"
      },
      {
        "input": "nums = [30, 60, 90, 120, 150, 180, 210, 240, 270, 300]",
        "output": "False"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
        "output": "True"
      },
      {
        "input": "nums = [2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98]",
        "output": "False"
      },
      {
        "input": "nums = [17, 23, 41, 59]",
        "output": "True"
      },
      {
        "input": "nums = [1000000000, 999999999, 1, 2]",
        "output": "True"
      },
      {
        "input": "nums = [8, 12, 18, 24, 30, 36, 42, 48, 54]",
        "output": "False"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105]",
        "output": "False"
      },
      {
        "input": "nums = [7, 11, 13, 17, 19, 23, 29]",
        "output": "True"
      },
      {
        "input": "nums = [1000000001, 1000000003, 1000000007, 1000000009]",
        "output": "True"
      },
      {
        "input": "nums = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70]",
        "output": "False"
      },
      {
        "input": "nums = [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
        "output": "True"
      },
      {
        "input": "nums = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000, 7000000000, 8000000000, 9000000000, 10000000000]",
        "output": "False"
      },
      {
        "input": "nums = [1] * 100000",
        "output": "Error: Solution.isGoodArray() missing 1 required positional argument: 'nums'"
      },
      {
        "input": "nums = [3,5,7,11,13,17,19,23,29,31]",
        "output": "True"
      },
      {
        "input": "nums = [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "True"
      },
      {
        "input": "nums = [11, 22, 33, 44, 55, 66, 77, 88, 99, 110]",
        "output": "False"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145]",
        "output": "False"
      },
      {
        "input": "nums = [123, 456, 789, 101, 137]",
        "output": "True"
      },
      {
        "input": "nums = [2,4,8,16,32,64,128,256,512,1024]",
        "output": "False"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "False"
      },
      {
        "input": "nums = [31, 37, 41, 43, 47, 53, 59, 61, 67, 71]",
        "output": "True"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45]",
        "output": "False"
      },
      {
        "input": "nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]",
        "output": "True"
      },
      {
        "input": "nums = [13, 17, 19, 23, 29, 31]",
        "output": "True"
      },
      {
        "input": "nums = [41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]",
        "output": "True"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "output": "True"
      },
      {
        "input": "nums = [35, 105, 175, 245, 315]",
        "output": "False"
      },
      {
        "input": "nums = [97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149]",
        "output": "True"
      },
      {
        "input": "nums = [19, 38, 57, 76, 95, 114, 133, 152]",
        "output": "False"
      },
      {
        "input": "nums = [1000000000,1000000001,1000000002,1000000003,1000000004,1000000005]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288]",
        "output": "True"
      },
      {
        "input": "nums = [17, 29, 41, 53, 67, 83]",
        "output": "True"
      },
      {
        "input": "nums = [3, 9, 27, 81, 243]",
        "output": "False"
      },
      {
        "input": "nums = [60, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 720, 780, 840, 900, 960, 1020, 1080, 1140, 1200]",
        "output": "False"
      },
      {
        "input": "nums = [1000000001, 1000000002, 1000000003, 1000000004]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "True"
      },
      {
        "input": "nums = [101, 201, 301, 401, 501, 601, 701, 801, 901, 1001]",
        "output": "True"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98]",
        "output": "False"
      },
      {
        "input": "nums = [31, 37, 41, 43, 47, 53, 59]",
        "output": "True"
      },
      {
        "input": "nums = [123456789, 987654321, 234567891, 345678912]",
        "output": "False"
      },
      {
        "input": "nums = [37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127]",
        "output": "True"
      },
      {
        "input": "nums = [111111111, 222222222, 333333333, 444444444, 555555555]",
        "output": "False"
      },
      {
        "input": "nums = [3, 9, 27, 81, 243, 729, 2187, 6561]",
        "output": "False"
      },
      {
        "input": "nums = [500000000, 500000001, 500000002, 500000003, 500000004, 500000005, 500000006, 500000007, 500000008, 500000009]",
        "output": "True"
      },
      {
        "input": "nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "True"
      },
      {
        "input": "nums = [1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020]",
        "output": "True"
      },
      {
        "input": "nums = [41, 43, 47, 53, 59, 61]",
        "output": "True"
      },
      {
        "input": "nums = [101, 202, 303, 404, 505]",
        "output": "False"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "True"
      },
      {
        "input": "nums = [89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191]",
        "output": "True"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125]",
        "output": "False"
      },
      {
        "input": "nums = [1000000007, 2, 3, 5, 7]",
        "output": "True"
      },
      {
        "input": "nums = [13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
        "output": "True"
      },
      {
        "input": "nums = [333333333, 666666667, 333333333, 666666667, 333333333, 666666667, 333333333, 666666667, 333333333, 666666667]",
        "output": "True"
      },
      {
        "input": "nums = [1000000000] * 5",
        "output": "Error: Solution.isGoodArray() missing 1 required positional argument: 'nums'"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29]",
        "output": "True"
      },
      {
        "input": "nums = [97,1,101,1,103,1,107,1,109,1]",
        "output": "True"
      },
      {
        "input": "nums = [5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59]",
        "output": "True"
      },
      {
        "input": "nums = [71, 113, 151, 199, 239, 283, 317, 359, 401, 443]",
        "output": "True"
      },
      {
        "input": "nums = [1000000007,1000000009,1000000021,1000000033]",
        "output": "True"
      },
      {
        "input": "nums = [17, 31, 41, 43, 59, 61]",
        "output": "True"
      },
      {
        "input": "nums = [101, 103, 107, 109, 113]",
        "output": "True"
      },
      {
        "input": "nums = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000]",
        "output": "False"
      },
      {
        "input": "nums = [15, 21, 25, 35, 45]",
        "output": "True"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104]",
        "output": "True"
      },
      {
        "input": "nums = [3, 5, 7, 11, 13, 17]",
        "output": "True"
      }
    ]
  },
  {
    "id": 2136,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Sorting"
    ],
    "problemDescription": "You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:\n\nplantTime[i] is the number of full days it takes you to plant the ith seed. Every day, you can work on planting exactly one seed. You do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked plantTime[i] days on planting it in total.\ngrowTime[i] is the number of full days it takes the ith seed to grow after being completely planted. After the last day of its growth, the flower blooms and stays bloomed forever.\n\nFrom the beginning of day 0, you can plant the seeds in any order.\nReturn the earliest possible day where all seeds are blooming.\n\u00a0\nExample 1:\n\n\nInput: plantTime = [1,4,3], growTime = [2,3,1]\nOutput: 9\nExplanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0th seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1st seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2nd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.\n\nExample 2:\n\n\nInput: plantTime = [1,2,3,2], growTime = [2,1,2,1]\nOutput: 9\nExplanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0th seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1st seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2nd seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3rd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.\n\nExample 3:\n\nInput: plantTime = [1], growTime = [1]\nOutput: 2\nExplanation: On day 0, plant the 0th seed. The seed grows for 1 full day and blooms on day 2.\nThus, on day 2, all the seeds are blooming.\n\n\u00a0\nConstraints:\n\nn == plantTime.length == growTime.length\n1 <= n <= 105\n1 <= plantTime[i], growTime[i] <= 104\n\n",
    "starterCode": "class Solution:\n    def earliestFullBloom(self, plantTime: List[int], growTime: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "plantTime = [1], growTime = [1]",
        "output": "2"
      },
      {
        "input": "plantTime = [2,2,2], growTime = [3,3,3]",
        "output": "9"
      },
      {
        "input": "plantTime = [2,2,2], growTime = [3,2,1]",
        "output": "7"
      },
      {
        "input": "plantTime = [10000,10000], growTime = [10000,10000]",
        "output": "30000"
      },
      {
        "input": "plantTime = [1,1,1,1,1], growTime = [5,4,3,2,1]",
        "output": "6"
      },
      {
        "input": "plantTime = [3,2,1], growTime = [10,20,30]",
        "output": "31"
      },
      {
        "input": "plantTime = [1,1,1,1,1,1,1,1,1,1], growTime = [1,1,1,1,1,1,1,1,1,1]",
        "output": "11"
      },
      {
        "input": "plantTime = [1,3,5,7], growTime = [7,5,3,1]",
        "output": "17"
      },
      {
        "input": "plantTime = [10,20,30], growTime = [1,2,3]",
        "output": "61"
      },
      {
        "input": "plantTime = [5,5,5], growTime = [5,5,5]",
        "output": "20"
      },
      {
        "input": "plantTime = [5,4,3,2,1], growTime = [1,2,3,4,5]",
        "output": "16"
      },
      {
        "input": "plantTime = [3,2,1], growTime = [2,1,3]",
        "output": "7"
      },
      {
        "input": "plantTime = [2,3,4], growTime = [3,2,1]",
        "output": "10"
      },
      {
        "input": "plantTime = [10000, 10000], growTime = [1, 1]",
        "output": "20001"
      },
      {
        "input": "plantTime = [1,4,3], growTime = [2,3,1]",
        "output": "9"
      },
      {
        "input": "plantTime = [100,200,300], growTime = [100,200,300]",
        "output": "700"
      },
      {
        "input": "plantTime = [2,2,2,2], growTime = [4,3,2,1]",
        "output": "9"
      },
      {
        "input": "plantTime = [1,2,3,2], growTime = [2,1,2,1]",
        "output": "9"
      },
      {
        "input": "plantTime = [1,1,1,1], growTime = [1,1,1,1]",
        "output": "5"
      },
      {
        "input": "plantTime = [10,5,7], growTime = [4,6,8]",
        "output": "26"
      },
      {
        "input": "plantTime = [5,2,4], growTime = [3,1,2]",
        "output": "12"
      },
      {
        "input": "plantTime = [3,3,3], growTime = [3,3,3]",
        "output": "12"
      },
      {
        "input": "plantTime = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], growTime = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "105"
      },
      {
        "input": "plantTime = [5,10,15,20], growTime = [20,15,10,5]",
        "output": "55"
      },
      {
        "input": "plantTime = [5, 10, 15, 20], growTime = [20, 15, 10, 5]",
        "output": "55"
      },
      {
        "input": "plantTime = [1,3,5,7,9,11,13,15,17,19], growTime = [19,17,15,13,11,9,7,5,3,1]",
        "output": "101"
      },
      {
        "input": "plantTime = [100,200,300,400], growTime = [1000,500,700,200]",
        "output": "1200"
      },
      {
        "input": "plantTime = [500,500,500,500,500], growTime = [500,500,500,500,500]",
        "output": "3000"
      },
      {
        "input": "plantTime = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], growTime = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "1501"
      },
      {
        "input": "plantTime = [1000,2000,3000,4000,5000], growTime = [1,2,3,4,5]",
        "output": "15001"
      },
      {
        "input": "plantTime = [10,10,10,10,10,10,10,10,10,10], growTime = [1,2,3,4,5,6,7,8,9,10]",
        "output": "101"
      },
      {
        "input": "plantTime = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], growTime = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "21"
      },
      {
        "input": "plantTime = [10,20,30,40,50], growTime = [50,40,30,20,10]",
        "output": "160"
      },
      {
        "input": "plantTime = [1,2,3,4,5,6,7,8,9,10], growTime = [1,2,3,4,5,6,7,8,9,10]",
        "output": "56"
      },
      {
        "input": "plantTime = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], growTime = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6]",
        "output": "556"
      },
      {
        "input": "plantTime = [100,200,300,400,500], growTime = [500,400,300,200,100]",
        "output": "1600"
      },
      {
        "input": "plantTime = [10,20,30,40,50], growTime = [5,10,15,20,25]",
        "output": "155"
      },
      {
        "input": "plantTime = [5,10,4,6,8], growTime = [10,2,7,4,5]",
        "output": "35"
      },
      {
        "input": "plantTime = [3,3,3,3,3,3,3,3,3,3], growTime = [5,5,5,5,5,5,5,5,5,5]",
        "output": "35"
      },
      {
        "input": "plantTime = [7,8,9,10,11,12,13,14,15,16], growTime = [16,15,14,13,12,11,10,9,8,7]",
        "output": "122"
      },
      {
        "input": "plantTime = [5,4,1,3,2], growTime = [8,7,6,5,4]",
        "output": "19"
      },
      {
        "input": "plantTime = [5, 3, 8, 6], growTime = [10, 7, 2, 4]",
        "output": "24"
      },
      {
        "input": "plantTime = [1, 3, 5, 7, 9], growTime = [9, 7, 5, 3, 1]",
        "output": "26"
      },
      {
        "input": "plantTime = [5, 4, 3, 2, 1], growTime = [10, 20, 30, 40, 50]",
        "output": "51"
      },
      {
        "input": "plantTime = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60], growTime = [60, 55, 50, 45, 40, 35, 30, 25, 20, 15]",
        "output": "390"
      },
      {
        "input": "plantTime = [10,20,30,40,50,60,70,80,90,100], growTime = [1,1,1,1,1,1,1,1,1,1]",
        "output": "551"
      },
      {
        "input": "plantTime = [7,5,9,3,6,4,8], growTime = [2,8,1,5,4,7,3]",
        "output": "43"
      },
      {
        "input": "plantTime = [100,200,150,300], growTime = [50,100,200,150]",
        "output": "800"
      },
      {
        "input": "plantTime = [5,3,8,6], growTime = [10,7,2,4]",
        "output": "24"
      },
      {
        "input": "plantTime = [10,5,7,3,8], growTime = [15,12,6,4,9]",
        "output": "37"
      },
      {
        "input": "plantTime = [7,6,5,4,3,2,1], growTime = [1,2,3,4,5,6,7]",
        "output": "29"
      },
      {
        "input": "plantTime = [10, 5, 15, 20], growTime = [1, 1, 1, 1]",
        "output": "51"
      },
      {
        "input": "plantTime = [5,10,3,1,4], growTime = [10,5,7,8,2]",
        "output": "25"
      },
      {
        "input": "plantTime = [5,1,8,3,2], growTime = [10,6,2,4,5]",
        "output": "21"
      },
      {
        "input": "plantTime = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], growTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "61"
      },
      {
        "input": "plantTime = [10,20,30,40,50,60,70,80,90,100], growTime = [100,90,80,70,60,50,40,30,20,10]",
        "output": "560"
      },
      {
        "input": "plantTime = [500, 400, 300, 200, 100], growTime = [5, 4, 3, 2, 1]",
        "output": "1501"
      },
      {
        "input": "plantTime = [10,10,10,10,10,10,10,10,10,10,10,10], growTime = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "121"
      },
      {
        "input": "plantTime = [100, 50, 75, 25], growTime = [50, 100, 75, 25]",
        "output": "275"
      },
      {
        "input": "plantTime = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], growTime = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "5510"
      },
      {
        "input": "plantTime = [1,1,1,1,1], growTime = [1000,1000,1000,1000,1000]",
        "output": "1005"
      },
      {
        "input": "plantTime = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], growTime = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]",
        "output": "31"
      },
      {
        "input": "plantTime = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], growTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "16"
      },
      {
        "input": "plantTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], growTime = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "211"
      },
      {
        "input": "plantTime = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], growTime = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "110"
      },
      {
        "input": "plantTime = [1,2,3,4,5,6,7,8,9,10], growTime = [10,9,8,7,6,5,4,3,2,1]",
        "output": "56"
      },
      {
        "input": "plantTime = [100, 200, 300, 400, 500], growTime = [1000, 2000, 3000, 4000, 5000]",
        "output": "5500"
      },
      {
        "input": "plantTime = [1000,2000,3000,4000,5000], growTime = [5000,4000,3000,2000,1000]",
        "output": "16000"
      },
      {
        "input": "plantTime = [3,3,3,3,3,3,3,3,3,3], growTime = [1,2,3,4,5,6,7,8,9,10]",
        "output": "31"
      },
      {
        "input": "plantTime = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], growTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "56"
      },
      {
        "input": "plantTime = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], growTime = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "105"
      },
      {
        "input": "plantTime = [3,1,4,1,5,9,2,6,5,3,5], growTime = [9,7,3,8,5,3,8,2,9,4,6]",
        "output": "46"
      },
      {
        "input": "plantTime = [4,4,4,4,4,4,4,4], growTime = [1,2,3,4,5,6,7,8]",
        "output": "33"
      },
      {
        "input": "plantTime = [1,3,5,7,9], growTime = [9,7,5,3,1]",
        "output": "26"
      },
      {
        "input": "plantTime = [10,10,10,10,10], growTime = [20,20,20,20,20]",
        "output": "70"
      },
      {
        "input": "plantTime = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], growTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "11"
      },
      {
        "input": "plantTime = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], growTime = [10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000]",
        "output": "10001"
      },
      {
        "input": "plantTime = [1,2,3,4,5,6,7,8,9,10], growTime = [10,20,30,40,50,60,70,80,90,100]",
        "output": "110"
      },
      {
        "input": "plantTime = [1, 1, 1, 1, 1], growTime = [10000, 9999, 9998, 9997, 9996]",
        "output": "10001"
      },
      {
        "input": "plantTime = [1,1,1,1,1,1,1,1,1,1], growTime = [10,20,30,40,50,60,70,80,90,100]",
        "output": "101"
      },
      {
        "input": "plantTime = [1,1,1,1,1,1,1,1,1,1], growTime = [10,9,8,7,6,5,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "plantTime = [1, 10, 100, 1000, 10000], growTime = [10000, 1000, 100, 10, 1]",
        "output": "11112"
      },
      {
        "input": "plantTime = [100, 200, 300, 400, 500], growTime = [1, 2, 3, 4, 5]",
        "output": "1501"
      },
      {
        "input": "plantTime = [7, 14, 21, 28, 35], growTime = [10, 20, 30, 40, 50]",
        "output": "118"
      },
      {
        "input": "plantTime = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], growTime = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "110"
      },
      {
        "input": "plantTime = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], growTime = [9, 7, 3, 8, 5, 3, 0, 9, 4, 6, 8]",
        "output": "45"
      },
      {
        "input": "plantTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], growTime = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "121"
      },
      {
        "input": "plantTime = [100,200,150,300], growTime = [500,400,300,200]",
        "output": "950"
      },
      {
        "input": "plantTime = [4,4,4,4,4], growTime = [9,8,7,6,5]",
        "output": "25"
      },
      {
        "input": "plantTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], growTime = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "56"
      },
      {
        "input": "plantTime = [1,3,5,7,9,11,13,15,17,19], growTime = [2,4,6,8,10,12,14,16,18,20]",
        "output": "103"
      },
      {
        "input": "plantTime = [3,5,7,9,11,13,15], growTime = [2,4,6,8,10,12,14]",
        "output": "65"
      },
      {
        "input": "plantTime = [100,200,300,400,500], growTime = [1,1,1,1,1]",
        "output": "1501"
      },
      {
        "input": "plantTime = [4,3,2,1,5,6,7,8,9,10], growTime = [10,9,8,7,6,5,4,3,2,1]",
        "output": "56"
      },
      {
        "input": "plantTime = [2,2,2,2,2,2,2,2,2,2], growTime = [1,1,1,1,1,1,1,1,1,1]",
        "output": "21"
      },
      {
        "input": "plantTime = [50,40,30,20,10], growTime = [1,2,3,4,5]",
        "output": "151"
      },
      {
        "input": "plantTime = [10,10,10,10,10,10,10,10,10,10], growTime = [10,9,8,7,6,5,4,3,2,1]",
        "output": "101"
      },
      {
        "input": "plantTime = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], growTime = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "551"
      },
      {
        "input": "plantTime = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], growTime = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "560"
      },
      {
        "input": "plantTime = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], growTime = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "16"
      },
      {
        "input": "plantTime = [7, 6, 5, 4, 3, 2, 1], growTime = [1, 2, 3, 4, 5, 6, 7]",
        "output": "29"
      },
      {
        "input": "plantTime = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], growTime = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "46"
      }
    ]
  },
  {
    "id": 987,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Hash Table",
      "Binary Tree",
      "Sorting"
    ],
    "problemDescription": "Given the root of a binary tree, calculate the vertical order traversal of the binary tree.\nFor each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).\nThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\nReturn the vertical order traversal of the binary tree.\n\u00a0\nExample 1:\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\nExplanation:\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.\nExample 2:\n\n\nInput: root = [1,2,3,4,5,6,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.\n\nExample 3:\n\n\nInput: root = [1,2,3,4,6,5,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 1000].\n0 <= Node.val <= 1000\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "[[4], [2], [1, 5, 6], [3], [7]]"
      },
      {
        "input": "root = [1,3,2,5,3,null,9,6,7]",
        "output": "[[6], [5], [3, 7], [1, 3], [2], [9]]"
      },
      {
        "input": "root = [0,2,1,3,null,null,null,4,5,null,7,6,null,10,8,11,9]",
        "output": "[[4, 10, 11], [3, 6, 7], [2, 5, 8, 9], [0], [1]]"
      },
      {
        "input": "root = [1,2,3,4,6,5,7]",
        "output": "[[4], [2], [1, 5, 6], [3], [7]]"
      },
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "[[9], [3, 15], [20], [7]]"
      },
      {
        "input": "root = [1,3,2,5,3,null,9,2,null,4,8,6,null,10,7]",
        "output": "[[10], [2], [5, 7], [3, 4], [1, 3], [2, 6, 8], [9]]"
      },
      {
        "input": "root = [0,2,1,3,null,null,null,4,5]",
        "output": "[[4], [3], [2, 5], [0], [1]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,null,null,null,8,9,10,11,12,13,14,15]",
        "output": "[[4], [2, 14], [1, 5, 6, 10], [3, 8, 15], [7, 11, 12], [9], [13]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,null,null,9,null,null,10,null,null,11,null,null,12,null,null,13,null,null,14,null,null,15]",
        "output": "[[4, 11], [2, 8, 9], [1, 5, 6], [3], [7], [10, 13], [12, 14]]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37,2,4,6,8,12,14,16,18,22,24,26,28,32,34,36,38]",
        "output": "[[2], [3], [5, 4, 6, 12, 22], [10, 7, 13, 23], [20, 15, 25, 8, 14, 16, 24, 26, 32], [30, 17, 27, 33], [35, 18, 28, 34, 36], [37], [38]]"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,3,5,null,null,null,null,10]",
        "output": "[[0, 10], [2, 3], [6, 4, 7], [8, 5], [9]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,null,10,null,null,null,11,null,null,null,null,12,null,null,13,null,null,14,null,null,15]",
        "output": "[[11], [8], [4], [2, 9, 10, 13], [1, 5, 6, 12, 14], [3], [7]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,7,1,null,null,8]",
        "output": "[[1], [2], [3], [5, 4], [6, 8], [7]]"
      },
      {
        "input": "root = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "[[7], [3], [1, 8, 9, 11], [0, 4, 5], [2, 10, 12, 13], [6], [14]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "[[32], [16], [8, 33, 34, 36, 40], [4, 17, 18, 20, 24], [2, 9, 10, 12, 35, 37, 38], [1, 5, 6, 19, 21, 22, 25, 26, 28], [3, 11, 13, 14, 39], [7, 23, 27, 29, 30], [15], [31]]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,6,4,8,11,17]",
        "output": "[[1], [3], [5, 4, 6], [10, 7], [15, 8, 11], [18], [17]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,null,null,null,10,11,12,13,null,null,14,15,null,16,17]",
        "output": "[[17], [12], [8], [4, 13], [2, 9], [1, 5, 6, 14], [3, 10], [7, 15], [11], [16]]"
      },
      {
        "input": "root = [0,null,1,null,2,null,3,null,4,null,5,null,6]",
        "output": "[[0], [1], [2], [3], [4], [5], [6]]"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,null,null,null,null,null,null,null,21]",
        "output": "[[2], [1, 4], [3, 6], [5, 8], [7, 10], [9, 12], [11, 14], [13, 16], [15, 18], [17, 20], [19]]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,9]",
        "output": "[[1], [3], [5, 6], [10, 7], [15, 9], [18]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,null,null,null,null,null,null,null,null,null,21]",
        "output": "[[16], [8], [4, 17, 18, 20], [2, 9, 10, 12], [1, 5, 6, 19], [3, 11, 13, 14], [7, 21], [15]]"
      },
      {
        "input": "root = [3,1,4,2,null,null,null,null,5]",
        "output": "[[2], [1, 5], [3], [4]]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,8,16,20,14,19]",
        "output": "[[14], [1], [3, 19], [5, 6], [10, 7], [15, 8, 16], [18], [20]]"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,3,5]",
        "output": "[[0], [2, 3], [6, 4, 7], [8, 5], [9]]"
      },
      {
        "input": "root = [5,2,7,1,4,6,9,0,3,8,null,null,null,null,null,10,11]",
        "output": "[[10], [0], [1, 11], [2, 3, 8], [5, 4, 6], [7], [9]]"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15]",
        "output": "[[1], [2], [4, 3, 5, 9], [8, 6, 10], [12, 7, 11, 13], [14], [15]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,null,null,null,null,null,14,null,15,16]",
        "output": "[[8], [4], [2, 9, 10, 12], [1, 5, 6, 14, 15, 16], [3, 11, 13], [7]]"
      },
      {
        "input": "root = [3,1,4,0,2,2,null,-1]",
        "output": "[[-1], [0], [1], [3, 2, 2], [4]]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,32,37,2,4,6,8,12,14,16,18,22,24,26,28,31,33,36,38]",
        "output": "[[2], [3], [5, 4, 6, 12, 22], [10, 7, 13, 23], [20, 15, 25, 8, 14, 16, 24, 26, 31], [30, 17, 27, 32], [35, 18, 28, 33, 36], [37], [38]]"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,12,null,13,null,null,16]",
        "output": "[[9, 12], [3, 15, 16], [20, 13], [7]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,10,11,12,13,null,null,null,null,14,15,null,null,null,null,16,17,18,19,20,21,22,23,24,25]",
        "output": "[[18], [4, 14], [2, 8, 10, 19, 20], [1, 5, 6, 15], [3, 9, 11, 12, 21, 22], [7, 16], [13, 23, 24], [17], [25]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,9,10,11,null,null,null,12,null,null,null,null,null,13,14,15]",
        "output": "[[15], [4, 12, 13], [2, 8, 9, 11], [1, 5, 6, 14], [3, 10], [7]]"
      },
      {
        "input": "root = [0,2,1,3,null,null,null,4,5,null,7,6,null,10,8,null,11,9]",
        "output": "[[9], [4, 10], [3, 6, 7], [2, 5, 8, 11], [0], [1]]"
      },
      {
        "input": "root = [1,2,3,4,null,null,7,8,9,null,11,null,null,14,15]",
        "output": "[[8], [4, 14], [2, 9], [1, 15], [3], [7], [11]]"
      },
      {
        "input": "root = [3,1,4,0,2,2,null]",
        "output": "[[0], [1], [3, 2, 2], [4]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]",
        "output": "[[16], [8], [4, 17, 18, 20, 24], [2, 9, 10, 12], [1, 5, 6, 19, 21, 22, 25, 26, 28], [3, 11, 13, 14], [7, 23, 27, 29, 30], [15], [31]]"
      },
      {
        "input": "root = [10,5,15,3,7,12,18,1,4,6,8,11,13,17,19]",
        "output": "[[1], [3], [5, 4, 6, 11], [10, 7, 12], [15, 8, 13, 17], [18], [19]]"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11]",
        "output": "[[11], [10], [9], [8], [7], [6], [5], [4], [3], [2], [1]]"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,6,7,null,null,8,9,10,11,12,13,null,null,14,15,null,null,16,17]",
        "output": "[[16], [12], [8, 17], [2, 6, 13, 14], [1, 4, 9, 10], [3, 7, 15], [5, 11]]"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,null,6,null,7]",
        "output": "[[2], [1, 4, 7], [3, 6], [5]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,null,null,9,10,11,12,null,null,null,null,13,14,15,null,null,null,null,16,17]",
        "output": "[[4], [2, 8, 9], [1, 5, 6, 13, 15], [3, 10, 11, 16, 17], [7, 14], [12]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,7,1,null,null,8,9,10]",
        "output": "[[1], [2], [3], [5, 4], [6, 8, 9], [7], [10]]"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6,8,11,14,null,12,17,19]",
        "output": "[[17], [1], [3, 19], [5, 6, 11], [10, 7, 13], [15, 8, 14], [18], [12]]"
      },
      {
        "input": "root = [2,1,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "[[1], [2, 4], [3, 6], [5, 8], [7], [9]]"
      },
      {
        "input": "root = [1,2,3,null,4,5,6,null,7,null,null,8,9,null,null,10,11]",
        "output": "[[2], [1, 4, 5, 10], [3, 7, 8], [6, 11], [9]]"
      },
      {
        "input": "root = [1,null,3,2,4,null,null,5,6]",
        "output": "[[1, 2], [3, 5], [4], [6]]"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,6,7,8,9,null,null,10,11,null,null,12,13,null,null,null,null,14,15]",
        "output": "[[2, 6], [1, 4, 10], [3, 7, 8, 14], [5, 11, 12], [9, 15], [13]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[[16], [8], [4, 17, 18, 20, 24], [2, 9, 10, 12], [1, 5, 6, 19, 21, 22, 25, 26, 28], [3, 11, 13, 14], [7, 23, 27, 29, 30], [15]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[[16], [8], [4, 17, 18, 20], [2, 9, 10, 12], [1, 5, 6, 19], [3, 11, 13, 14], [7], [15]]"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,null,null,null,null,null,8,9]",
        "output": "[[6], [4], [2, 7], [1, 5], [3]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[[8], [4], [2, 9, 10, 12], [1, 5, 6], [3, 11, 13, 14], [7], [15]]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6]",
        "output": "[[1], [3], [5, 6], [10, 7], [15], [18]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,10,11,12,13,null,null,14,15,16,17,18,19,20]",
        "output": "[[4, 16], [2, 8, 10], [1, 5, 6, 14, 17, 18, 20], [3, 9, 11, 12], [7, 15, 19], [13]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "[[16], [8], [4, 17, 18, 20, 24], [2, 9, 10, 12], [1, 5, 6, 19, 21, 22, 25], [3, 11, 13, 14], [7, 23], [15]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "[[32], [16], [8, 33, 34, 36, 40, 48], [4, 17, 18, 20, 24], [2, 9, 10, 12, 35, 37, 38, 41, 42, 44, 49, 50], [1, 5, 6, 19, 21, 22, 25, 26, 28], [3, 11, 13, 14, 39, 43, 45, 46], [7, 23, 27, 29, 30], [15, 47], [31]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,16,17,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[[8], [4, 16], [2, 9, 10, 12], [1, 5, 6, 17], [3, 11, 13, 14], [7], [15]]"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,6,null,null,7,null,null,8,null,null,9,null,null,10,null,null,11,null,null,12,null,null,13,null,null,14,null,null,15]",
        "output": "[[4, 7], [2, 6, 8], [1], [3], [5]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,16,17,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "[[8], [4, 16], [2, 9, 10, 12], [1, 5, 6, 17], [3, 11, 13, 14], [7], [15]]"
      },
      {
        "input": "root = [5,2,6,1,3,null,null,null,4,8,7,null,null,null,null,null,null,null,9]",
        "output": "[[1], [2, 4, 8], [5, 3], [6, 7]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,8,1,null,null,null,null,9,7,10]",
        "output": "[[7], [1], [2, 10], [3], [5, 4], [6], [8], [9]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,null,8,9,10,11]",
        "output": "[[4], [2, 8], [1, 5, 6], [3, 9, 10], [7], [11]]"
      },
      {
        "input": "root = [3,1,4,0,2,2,null,null,null,null,null,5]",
        "output": "[[0], [1, 5], [3, 2, 2], [4]]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "[[1], [2], [3], [4], [5], [6], [7]]"
      },
      {
        "input": "root = [3,1,4,0,2,2,null,5,null,null,3,null,null,null,6]",
        "output": "[[5], [0, 6], [1], [3, 2, 2], [4, 3]]"
      },
      {
        "input": "root = [5,1,4,null,null,3,6]",
        "output": "[[1], [5, 3], [4], [6]]"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,7,null,null,8,9,null,10,11,null,null,12,null,null,13]",
        "output": "[[10], [7, 13], [4, 11], [2], [1, 5, 12], [3, 8, 9], [6]]"
      },
      {
        "input": "root = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[[15], [7], [3, 16, 17, 19], [1, 8, 9, 11], [0, 4, 5, 18, 20], [2, 10, 12, 13], [6], [14]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,7,1,null,null,8,9,10,11,12,13,14,15,16,17]",
        "output": "[[11], [1], [2, 12], [3], [5, 4, 13, 15], [6, 8, 9], [7, 14, 16, 17], [10]]"
      },
      {
        "input": "root = [1,2,null,4,5,6,7,null,8,null,9,10,11,null,null,null,null,null,12,13,null,null,null,null,14,15]",
        "output": "[[6], [4, 9, 10], [2, 7, 12, 13, 15], [1, 5, 11, 14], [8]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,null,1,null,null,null,7,8]",
        "output": "[[7], [1], [2, 8], [3], [5, 4], [6]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,10,null,null,11,null,12,null,13]",
        "output": "[[12], [8], [4, 13], [2, 9], [1, 5, 6], [3, 10, 11], [7]]"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6]",
        "output": "[[1], [3], [5, 6], [10, 7, 13], [15], [18]]"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "[[2], [1, 4], [3, 6], [5, 8], [7], [9]]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,9,14]",
        "output": "[[1], [3], [5, 6], [10, 7], [15, 9, 14], [18]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]",
        "output": "[[32], [16], [8], [4, 17, 18, 20, 24], [2, 9, 10, 12], [1, 5, 6, 19, 21, 22, 25, 26, 28], [3, 11, 13, 14], [7, 23, 27, 29, 30], [15], [31]]"
      },
      {
        "input": "root = [3,1,4,null,2,null,5,null,null,6,7,8,9]",
        "output": "[[1], [3, 2, 8], [4, 6], [5, 9], [7]]"
      },
      {
        "input": "root = [314,6,8,3,5,7,9,2,4,null,null,6,8,10,12,null,null,null,null,null,7]",
        "output": "[[2], [3], [6, 4, 6], [314, 5, 7, 7], [8, 8, 10], [9], [12]]"
      },
      {
        "input": "root = [8,3,10,1,6,null,14,null,null,4,7,13,null]",
        "output": "[[1], [3, 4], [8, 6], [10, 7, 13], [14]]"
      },
      {
        "input": "root = [1,2,3,null,null,null,4,null,5,null,null,null,null,null,6,null,null,null,null,null,7]",
        "output": "[[2], [1], [3], [4], [5]]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,null,9,null,10,null,11,null,12,null,13,null,14]",
        "output": "[[14], [4, 11, 12], [2, 8, 9], [1, 5, 6, 13], [3, 10], [7]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,null,null,9,null,null,10,null,null,11,null,null,12,null,null,13]",
        "output": "[[4, 11], [2, 8, 9], [1, 5, 6], [3], [7], [10, 13], [12]]"
      },
      {
        "input": "root = [5,2,6,1,3,null,null,0,null,null,null,null,7,8,9]",
        "output": "[[0, 8], [1, 7], [2, 9], [5, 3], [6]]"
      },
      {
        "input": "root = [5,3,6,2,4,null,7,1,null,null,8,9,null,null,10,null,null,11]",
        "output": "[[1], [2, 10], [3], [5, 4, 11], [6, 8, 9], [7]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,16,17,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,18]",
        "output": "[[8], [4, 16], [2, 9, 10, 12], [1, 5, 6, 17], [3, 11, 13, 14], [7], [15]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,null,null,null,null,null,14]",
        "output": "[[8], [4], [2, 9, 10, 12], [1, 5, 6, 14], [3, 11, 13], [7]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,null,null,null,null,null,14,15]",
        "output": "[[8], [4, 15], [2, 9, 10, 12], [1, 5, 6, 14], [3, 11, 13], [7]]"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,4,6,8,11,13,18,25]",
        "output": "[[1], [3], [5, 4, 6, 11], [10, 7, 12], [15, 8, 13, 18], [20], [25]]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,10,null,null,11,null,null,12,null,null,13,null,null,14,null,null,15]",
        "output": "[[8], [4, 12], [2, 9, 15], [1, 5, 6, 13], [3, 10, 11], [7, 14]]"
      }
    ]
  },
  {
    "id": 2247,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Graph",
      "Dynamic Programming",
      "Bitmask"
    ],
    "problemDescription": "A series of highways connect n cities numbered from 0 to n - 1. You are given a 2D integer array highways where highways[i] = [city1i, city2i, tolli] indicates that there is a highway that connects city1i and city2i, allowing a car to go from city1i to city2i and vice versa for a cost of tolli.\nYou are also given an integer k. You are going on a trip that crosses exactly k highways. You may start at any city, but you may only visit each city at most once during your trip.\nReturn the maximum cost of your trip. If there is no trip that meets the requirements, return -1.\n\u00a0\nExample 1:\n\n\nInput: n = 5, highways = [[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]], k = 3\nOutput: 17\nExplanation:\nOne possible trip is to go from 0 -> 1 -> 4 -> 3. The cost of this trip is 4 + 11 + 2 = 17.\nAnother possible trip is to go from 4 -> 1 -> 2 -> 3. The cost of this trip is 11 + 3 + 3 = 17.\nIt can be proven that 17 is the maximum possible cost of any valid trip.\n\nNote that the trip 4 -> 1 -> 0 -> 1 is not allowed because you visit the city 1 twice.\n\nExample 2:\n\n\nInput: n = 4, highways = [[0,1,3],[2,3,2]], k = 2\nOutput: -1\nExplanation: There are no valid trips of length 2, so return -1.\n\n\u00a0\nConstraints:\n\n2 <= n <= 15\n1 <= highways.length <= 50\nhighways[i].length == 3\n0 <= city1i, city2i <= n - 1\ncity1i != city2i\n0 <= tolli <= 100\n1 <= k <= 50\nThere are no duplicate highways.\n\n",
    "starterCode": "class Solution:\n    def maximumCost(self, n: int, highways: List[List[int]], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 6, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,0,60]], k = 5",
        "output": "200"
      },
      {
        "input": "n = 3, highways = [[0,1,2],[1,2,3]], k = 2",
        "output": "5"
      },
      {
        "input": "n = 4, highways = [[0,1,3],[2,3,2]], k = 2",
        "output": "-1"
      },
      {
        "input": "n = 4, highways = [[0,1,1],[1,2,1],[2,3,1],[3,0,1]], k = 3",
        "output": "3"
      },
      {
        "input": "n = 6, highways = [[0,1,10],[1,2,5],[2,3,8],[3,4,6],[4,5,7],[5,0,9]], k = 4",
        "output": "32"
      },
      {
        "input": "n = 3, highways = [[0,1,5],[1,2,4],[0,2,3]], k = 2",
        "output": "9"
      },
      {
        "input": "n = 5, highways = [[0,1,4],[2,1,3],[1,4,11],[3,2,3],[3,4,2]], k = 3",
        "output": "17"
      },
      {
        "input": "n = 15, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,0,15]], k = 14",
        "output": "119"
      },
      {
        "input": "n = 7, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,0,70]], k = 6",
        "output": "270"
      },
      {
        "input": "n = 12, highways = [[0,1,1],[0,2,2],[0,3,3],[1,4,4],[1,5,5],[2,6,6],[2,7,7],[3,8,8],[3,9,9],[4,10,10],[5,11,11],[6,7,12],[8,9,13],[10,11,14]], k = 7",
        "output": "56"
      },
      {
        "input": "n = 7, highways = [[0,1,1],[0,2,2],[1,3,3],[1,4,4],[2,5,5],[2,6,6],[3,4,7],[3,5,8],[4,6,9]], k = 3",
        "output": "24"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[0,2,20],[0,3,30],[1,4,40],[2,5,50],[3,6,60],[4,7,70],[5,8,80],[6,9,90],[7,8,100],[8,9,110]], k = 5",
        "output": "430"
      },
      {
        "input": "n = 8, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,0,8],[0,4,9],[1,5,10],[2,6,11],[3,7,12]], k = 7",
        "output": "59"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,0,100],[0,2,15],[1,3,25],[2,4,35],[3,5,45],[4,6,55],[5,7,65],[6,8,75],[7,9,85],[8,0,95],[9,1,5]], k = 7",
        "output": "520"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[0,2,20],[1,2,30],[1,3,40],[2,3,50],[3,4,60],[4,5,70],[5,6,80],[6,7,90],[7,8,100],[8,9,110],[0,9,120]], k = 5",
        "output": "500"
      },
      {
        "input": "n = 9, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,0,9],[0,3,10],[1,4,11],[2,5,12],[3,6,13],[4,7,14],[5,8,15],[6,0,16],[7,1,17],[8,2,18]], k = 8",
        "output": "104"
      },
      {
        "input": "n = 8, highways = [[0,1,20],[0,2,30],[0,3,40],[1,2,50],[1,3,60],[2,3,70],[2,4,80],[2,5,90],[3,4,100],[3,5,110],[4,5,120],[4,6,130],[4,7,140],[5,6,150],[5,7,160],[6,7,170]], k = 6",
        "output": "710"
      },
      {
        "input": "n = 7, highways = [[0,1,3],[0,2,4],[1,2,5],[1,3,6],[2,4,7],[3,4,8],[3,5,9],[4,5,10],[4,6,11],[5,6,12]], k = 4",
        "output": "39"
      },
      {
        "input": "n = 12, highways = [[0,1,5],[0,2,8],[1,2,10],[1,3,15],[2,3,20],[3,4,25],[4,5,30],[5,6,35],[6,7,40],[7,8,45],[8,9,50],[9,10,55],[10,11,60],[11,0,65]], k = 7",
        "output": "350"
      },
      {
        "input": "n = 14, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110],[11,12,120],[12,13,130],[13,0,140]], k = 9",
        "output": "900"
      },
      {
        "input": "n = 8, highways = [[0,1,5],[0,2,10],[1,3,15],[1,4,20],[2,5,25],[3,6,30],[4,7,35],[5,6,40],[6,7,45]], k = 6",
        "output": "180"
      },
      {
        "input": "n = 12, highways = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,10,50],[10,11,55],[11,0,60]], k = 7",
        "output": "315"
      },
      {
        "input": "n = 9, highways = [[0,1,30],[0,2,20],[1,2,10],[1,3,40],[2,3,50],[2,4,60],[3,4,70],[3,5,80],[4,5,90],[4,6,100],[5,6,110],[5,7,120],[6,7,130],[6,8,140],[7,8,150]], k = 7",
        "output": "690"
      },
      {
        "input": "n = 15, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,0,15],[0,2,16],[1,3,17],[2,4,18],[3,5,19],[4,6,20],[5,7,21],[6,8,22],[7,9,23],[8,10,24],[9,11,25],[10,12,26],[11,13,27],[12,14,28],[13,0,29],[14,1,30]], k = 13",
        "output": "311"
      },
      {
        "input": "n = 8, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,0,80],[0,4,5],[1,5,15],[2,6,25],[3,7,35]], k = 6",
        "output": "330"
      },
      {
        "input": "n = 6, highways = [[0,1,5],[0,2,6],[0,3,7],[0,4,8],[0,5,9],[1,2,10],[1,3,11],[1,4,12],[1,5,13],[2,3,14],[2,4,15],[2,5,16],[3,4,17],[3,5,18],[4,5,19]], k = 5",
        "output": "69"
      },
      {
        "input": "n = 11, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,0,110],[0,6,120],[1,7,130],[2,8,140],[3,9,150],[4,10,160],[5,0,170],[6,1,180],[7,2,190],[8,3,200],[9,4,210],[10,5,220]], k = 10",
        "output": "1750"
      },
      {
        "input": "n = 6, highways = [[0,1,20],[1,2,30],[2,3,40],[3,4,50],[4,5,60],[5,0,70],[0,2,10],[1,3,15],[2,4,25],[3,5,35],[4,0,45],[5,1,55]], k = 5",
        "output": "260"
      },
      {
        "input": "n = 7, highways = [[0,1,1],[0,2,2],[1,3,3],[1,4,4],[2,5,5],[2,6,6],[3,4,7],[3,5,8],[4,6,9],[5,6,10],[0,6,11],[1,5,12],[2,4,13],[0,3,14],[1,2,15],[0,4,16],[1,6,17],[2,3,18]], k = 4",
        "output": "64"
      },
      {
        "input": "n = 10, highways = [[0,1,1],[0,2,2],[1,2,3],[1,3,4],[2,3,5],[1,4,6],[2,4,7],[3,4,8],[3,5,9],[4,5,10],[3,6,11],[4,6,12],[5,6,13],[4,7,14],[5,7,15],[6,7,16],[5,8,17],[6,8,18],[7,8,19],[6,9,20],[7,9,21],[8,9,22]], k = 6",
        "output": "99"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[0,9,5],[1,3,25],[2,4,35],[3,5,45],[4,6,55],[5,7,65],[6,8,75],[7,9,85]], k = 7",
        "output": "450"
      },
      {
        "input": "n = 11, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[0,10,11],[0,5,5],[1,6,6],[2,7,7],[3,8,8],[4,9,9]], k = 6",
        "output": "51"
      },
      {
        "input": "n = 12, highways = [[0,1,1],[0,2,2],[0,3,3],[1,4,4],[1,5,5],[2,6,6],[2,7,7],[3,8,8],[3,9,9],[4,10,10],[5,11,11],[6,8,12],[7,9,13],[8,10,14],[9,11,15],[10,11,16]], k = 10",
        "output": "97"
      },
      {
        "input": "n = 14, highways = [[0,1,1],[0,2,2],[1,2,3],[1,3,4],[2,3,5],[1,4,6],[2,4,7],[3,4,8],[3,5,9],[4,5,10],[3,6,11],[4,6,12],[5,6,13],[4,7,14],[5,7,15],[6,7,16],[5,8,17],[6,8,18],[7,8,19],[6,9,20],[7,9,21],[8,9,22],[6,10,23],[7,10,24],[8,10,25],[9,10,26],[7,11,27],[8,11,28],[9,11,29],[10,11,30],[8,12,31],[9,12,32],[10,12,33],[11,12,34],[9,13,35],[10,13,36],[11,13,37],[12,13,38]], k = 8",
        "output": "227"
      },
      {
        "input": "n = 10, highways = [[0,1,20],[0,2,10],[1,2,5],[1,3,15],[2,3,4],[2,4,8],[3,4,6],[3,5,7],[4,5,9],[4,6,2],[5,6,1],[5,7,12],[6,7,3],[6,8,6],[7,8,7],[7,9,14],[8,9,11]], k = 6",
        "output": "79"
      },
      {
        "input": "n = 12, highways = [[0,1,5],[0,2,8],[0,3,10],[1,2,3],[1,3,7],[1,4,9],[2,3,6],[2,4,12],[2,5,15],[3,4,4],[3,5,11],[3,6,14],[4,5,10],[4,6,8],[4,7,13],[5,6,6],[5,7,11],[5,8,9],[6,7,3],[6,8,12],[6,9,15],[7,8,10],[7,9,7],[8,9,5],[8,10,14],[8,11,18],[9,10,9],[9,11,6],[10,11,12]], k = 7",
        "output": "96"
      },
      {
        "input": "n = 11, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[0,10,11],[0,5,12],[1,6,13],[2,7,14],[3,8,15],[4,9,16]], k = 10",
        "output": "109"
      },
      {
        "input": "n = 8, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,0,8],[0,3,9],[1,4,10],[2,5,11],[3,6,12],[4,7,13],[5,0,14],[6,1,15],[7,2,16]], k = 6",
        "output": "79"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,0,100],[0,2,5],[1,3,15],[2,4,25],[3,5,35],[4,6,45],[5,7,55],[6,8,65],[7,9,75],[8,0,85],[9,1,95]], k = 5",
        "output": "430"
      },
      {
        "input": "n = 9, highways = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,0,45],[0,3,50],[1,4,55],[2,5,60]], k = 8",
        "output": "335"
      },
      {
        "input": "n = 8, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,0,8],[0,2,9],[1,3,10],[2,4,11],[3,5,12],[4,6,13],[5,7,14],[6,0,15],[7,1,16]], k = 7",
        "output": "85"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[0,2,15],[1,2,20],[1,3,25],[2,3,30],[3,4,5],[4,5,12],[4,6,18],[5,6,22],[5,7,30],[6,7,35],[7,8,40],[8,9,45],[9,0,50]], k = 5",
        "output": "192"
      },
      {
        "input": "n = 10, highways = [[0,1,1],[0,2,2],[1,2,3],[1,3,4],[2,3,5],[3,4,6],[4,5,7],[5,6,8],[6,7,9],[7,8,10],[8,9,11],[9,0,12]], k = 8",
        "output": "68"
      },
      {
        "input": "n = 6, highways = [[0,1,20],[1,2,30],[2,3,40],[3,4,50],[4,5,60],[5,0,70],[0,3,25],[1,4,35],[2,5,45],[3,0,55],[4,1,65],[5,2,75]], k = 5",
        "output": "315"
      },
      {
        "input": "n = 12, highways = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,10,50],[10,11,55],[11,0,60],[0,6,5],[1,7,10],[2,8,15],[3,9,20],[4,10,25],[5,11,30],[6,0,35],[7,1,40],[8,2,45],[9,3,50],[10,4,55],[11,5,60]], k = 10",
        "output": "455"
      },
      {
        "input": "n = 13, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,0,13],[0,7,14],[1,8,15],[2,9,16],[3,10,17],[4,11,18],[5,12,19],[6,0,20]], k = 12",
        "output": "159"
      },
      {
        "input": "n = 7, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,0,70],[0,3,80],[1,4,90],[2,5,100],[3,6,110],[4,0,120],[5,1,130],[6,2,140]], k = 4",
        "output": "480"
      },
      {
        "input": "n = 12, highways = [[0,1,1],[0,2,2],[0,3,3],[1,4,4],[1,5,5],[2,6,6],[2,7,7],[3,8,8],[3,9,9],[4,10,10],[5,11,11],[6,11,12],[7,10,13],[8,9,14],[9,10,15],[10,11,16]], k = 9",
        "output": "91"
      },
      {
        "input": "n = 14, highways = [[0,1,5],[0,2,10],[1,3,15],[2,4,20],[3,5,25],[4,6,30],[5,7,35],[6,8,40],[7,9,45],[8,10,50],[9,11,55],[10,12,60],[11,13,65],[12,0,70],[13,1,75]], k = 8",
        "output": "425"
      },
      {
        "input": "n = 8, highways = [[0,1,5],[1,2,15],[2,3,10],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,0,40],[0,3,50],[1,4,55],[2,5,60],[3,6,65],[4,7,70],[5,0,75],[6,1,80],[7,2,85]], k = 5",
        "output": "355"
      },
      {
        "input": "n = 7, highways = [[0,1,7],[0,2,6],[1,3,5],[2,4,8],[3,5,9],[4,6,10],[5,6,11],[0,6,3],[1,4,4],[2,5,2]], k = 6",
        "output": "51"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[0,2,15],[0,3,20],[1,2,5],[1,3,12],[2,3,10],[2,4,15],[3,4,7],[3,5,10],[4,5,5],[4,6,8],[5,6,10],[5,7,12],[6,7,6],[6,8,9],[7,8,10],[7,9,15],[8,9,12]], k = 5",
        "output": "72"
      },
      {
        "input": "n = 6, highways = [[0,1,2],[0,2,3],[1,3,5],[2,3,8],[3,4,7],[4,5,6],[0,4,10],[1,5,9],[2,5,11],[0,5,12],[1,4,13],[2,4,14]], k = 5",
        "output": "56"
      },
      {
        "input": "n = 12, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,0,12],[0,2,3],[1,3,4],[2,4,5],[3,5,6],[4,6,7],[5,7,8],[6,8,9],[7,9,10],[8,10,11],[9,11,12]], k = 11",
        "output": "87"
      },
      {
        "input": "n = 10, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,0,10],[0,5,15],[1,6,20],[2,7,25],[3,8,30],[4,9,35],[5,0,40],[6,1,45],[7,2,50],[8,3,55],[9,4,60]], k = 9",
        "output": "278"
      },
      {
        "input": "n = 15, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110],[11,12,120],[12,13,130],[13,14,140],[14,0,150]], k = 12",
        "output": "1140"
      },
      {
        "input": "n = 10, highways = [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[7,8,5],[8,9,5],[9,0,5]], k = 9",
        "output": "45"
      },
      {
        "input": "n = 9, highways = [[0,1,5],[0,2,10],[0,3,15],[1,2,20],[1,3,25],[2,3,30],[3,4,35],[4,5,40],[5,6,45],[6,7,50],[7,8,55],[8,0,60],[0,8,65],[1,4,70],[2,5,75],[3,6,80],[4,7,85],[5,8,90],[6,0,95],[7,1,100],[8,2,105]], k = 6",
        "output": "490"
      },
      {
        "input": "n = 10, highways = [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[7,8,5],[8,9,5],[9,0,5],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[4,6,10],[5,7,10],[6,8,10],[7,9,10],[8,0,10],[9,1,10]], k = 8",
        "output": "75"
      },
      {
        "input": "n = 6, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,0,6],[0,3,7],[1,4,8],[2,5,9]], k = 4",
        "output": "26"
      },
      {
        "input": "n = 7, highways = [[0,1,1],[0,2,2],[0,3,3],[1,2,4],[1,3,5],[1,4,6],[2,3,7],[2,4,8],[2,5,9],[3,4,10],[3,5,11],[3,6,12],[4,5,13],[4,6,14],[5,6,15]], k = 4",
        "output": "48"
      },
      {
        "input": "n = 8, highways = [[0,1,20],[0,2,30],[0,3,25],[1,2,15],[1,3,22],[1,4,35],[2,3,10],[2,4,18],[2,5,25],[3,4,5],[3,5,12],[3,6,17],[4,5,10],[4,6,15],[4,7,20],[5,6,8],[5,7,16],[6,7,9]], k = 4",
        "output": "112"
      },
      {
        "input": "n = 9, highways = [[0,1,10],[0,2,20],[1,2,30],[1,3,40],[1,4,50],[2,3,60],[2,5,70],[3,4,80],[3,5,90],[4,6,100],[5,6,110],[5,7,120],[6,7,130],[6,8,140],[7,8,150]], k = 8",
        "output": "730"
      },
      {
        "input": "n = 15, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,0,15],[0,14,20],[1,13,25],[2,12,30],[3,11,35],[4,10,40],[5,9,45],[6,8,50]], k = 13",
        "output": "293"
      },
      {
        "input": "n = 15, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,0,15]], k = 10",
        "output": "105"
      },
      {
        "input": "n = 12, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,0,12],[0,6,13],[1,7,14],[2,8,15],[3,9,16],[4,10,17],[5,11,18]], k = 9",
        "output": "112"
      },
      {
        "input": "n = 8, highways = [[0,1,10],[0,2,20],[1,3,30],[1,4,40],[2,5,50],[2,6,60],[3,7,70],[4,5,80],[5,6,90],[6,7,100]], k = 6",
        "output": "400"
      },
      {
        "input": "n = 10, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[0,9,100],[0,5,5],[1,6,6],[2,7,7],[3,8,8],[4,9,9]], k = 9",
        "output": "540"
      },
      {
        "input": "n = 8, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,0,8],[0,3,9],[1,4,10],[2,5,11],[3,6,12],[4,7,13],[5,0,14],[6,1,15],[7,2,16]], k = 7",
        "output": "91"
      },
      {
        "input": "n = 15, highways = [[0,1,10],[0,2,20],[1,3,30],[2,4,40],[3,5,50],[4,6,60],[5,7,70],[6,8,80],[7,9,90],[8,10,100],[9,11,110],[10,12,120],[11,13,130],[12,14,140],[13,0,150]], k = 10",
        "output": "950"
      },
      {
        "input": "n = 9, highways = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,0,9],[0,2,10],[1,3,11],[2,4,12],[3,5,13],[4,6,14],[5,7,15],[6,8,16],[7,0,17],[8,1,18]], k = 8",
        "output": "116"
      },
      {
        "input": "n = 9, highways = [[0,1,10],[0,2,20],[0,3,30],[1,2,15],[1,3,25],[1,4,35],[2,3,20],[2,4,30],[2,5,40],[3,4,25],[3,5,35],[3,6,45],[4,5,30],[4,6,40],[4,7,50],[5,6,35],[5,7,45],[5,8,55],[6,7,40],[6,8,50],[7,8,55]], k = 6",
        "output": "285"
      },
      {
        "input": "n = 7, highways = [[0,1,10],[0,2,5],[1,2,3],[1,3,15],[2,3,4],[2,4,8],[3,4,6],[3,5,7],[4,5,9],[4,6,2],[5,6,1]], k = 4",
        "output": "41"
      },
      {
        "input": "n = 14, highways = [[0,1,20],[0,2,10],[0,3,30],[1,4,15],[1,5,25],[2,6,35],[2,7,45],[3,8,55],[3,9,65],[4,10,75],[5,11,85],[6,12,95],[7,13,105],[8,9,115],[9,10,125],[10,11,135],[11,12,145],[12,13,155],[13,8,165],[0,13,5],[1,12,15],[2,11,25],[3,10,35],[4,9,45],[5,8,55],[6,7,65]], k = 11",
        "output": "1030"
      },
      {
        "input": "n = 14, highways = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110],[11,12,120],[12,13,130],[13,0,140]], k = 13",
        "output": "1040"
      }
    ]
  },
  {
    "id": 568,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "problemDescription": "LeetCode wants to give one of its best employees the option to travel among n cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\nRules and restrictions:\n\nYou can only travel among n cities, represented by indexes from 0 to n - 1. Initially, you are in the city indexed 0 on Monday.\nThe cities are connected by flights. The flights are represented as an n x n matrix (not necessarily symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] == 0; Otherwise, flights[i][j] == 1. Also, flights[i][i] == 0 for all i.\nYou totally have k weeks (each week has seven days) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we do not consider the impact of flight time.\nFor each city, you can only have restricted vacation days in different weeks, given an n x k matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take a vacation in the city i in the week j.\nYou could stay in a city beyond the number of vacation days, but you should work on the extra days, which will not be counted as vacation days.\nIf you fly from city A to city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.\nWe do not consider the impact of flight hours on the calculation of vacation days.\n\nGiven the two matrices flights and days, return the maximum vacation days you could take during k weeks.\n\u00a0\nExample 1:\n\nInput: flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]\nOutput: 12\nExplanation:\nOne of the best strategies is:\n1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day.\n(Although you start at city 0, we could also fly to and start at other cities since it is Monday.)\n2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.\n3rd week : stay at city 2, and play 3 days and work 4 days.\nAns = 6 + 3 + 3 = 12.\n\nExample 2:\n\nInput: flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]\nOutput: 3\nExplanation:\nSince there are no flights that enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. \nFor each week, you only have one day to play and six days to work.\nSo the maximum number of vacation days is 3.\nAns = 1 + 1 + 1 = 3.\n\nExample 3:\n\nInput: flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]\nOutput: 21\nExplanation:\nOne of the best strategies is:\n1st week : stay at city 0, and play 7 days.\n2nd week : fly from city 0 to city 1 on Monday, and play 7 days.\n3rd week : fly from city 1 to city 2 on Monday, and play 7 days.\nAns = 7 + 7 + 7 = 21\n\n\u00a0\nConstraints:\n\nn == flights.length\nn == flights[i].length\nn == days.length\nk == days[i].length\n1 <= n, k <= 100\nflights[i][j] is either 0 or 1.\n0 <= days[i][j] <= 7\n\n",
    "starterCode": "class Solution:\n    def maxVacationDays(self, flights: List[List[int]], days: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]",
        "output": "12"
      },
      {
        "input": "flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]",
        "output": "3"
      },
      {
        "input": "flights = [[1,1,0,0],[1,0,0,1],[0,1,1,0],[0,0,1,1]], days = [[7,0,0,0],[0,7,0,0],[0,0,7,0],[0,0,0,7]]",
        "output": "21"
      },
      {
        "input": "flights = [[0,0,0,1],[1,0,0,0],[0,1,0,0],[1,0,1,0]], days = [[1,3,1,3],[3,0,1,3],[0,0,3,3],[3,1,3,0]]",
        "output": "12"
      },
      {
        "input": "flights = [[0,1],[1,0]], days = [[3,3,3],[1,1,1]]",
        "output": "9"
      },
      {
        "input": "flights = [[0,1,0],[0,0,0],[0,1,0]], days = [[0,0,7],[2,7,2],[7,2,7]]",
        "output": "11"
      },
      {
        "input": "flights = [[1,1,0,0],[0,0,0,1],[1,0,1,0],[0,0,0,0]], days = [[7,0,0,3],[0,7,2,0],[7,0,3,0],[0,0,3,4]]",
        "output": "21"
      },
      {
        "input": "flights = [[0,0,0],[0,0,1],[0,1,0]], days = [[7,0,0],[0,0,7],[0,7,0]]",
        "output": "7"
      },
      {
        "input": "flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]",
        "output": "21"
      },
      {
        "input": "flights = [[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0]], days = [[7,0,0,2,0,0,2],[2,0,0,3,0,0,0],[0,0,7,0,0,2,0],[0,0,0,0,0,0,4],[0,0,0,2,0,0,6],[0,0,0,2,0,0,2],[0,0,0,3,0,0,0]]",
        "output": "23"
      },
      {
        "input": "flights = [[0,1,0,0,1],[1,0,1,0,0],[0,1,0,1,0],[0,0,1,0,1],[1,0,0,1,0]], days = [[1,2,3,4,5],[5,4,3,2,1],[2,3,4,5,6],[6,5,4,3,2],[3,4,5,6,7]]",
        "output": "26"
      },
      {
        "input": "flights = [[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1],[1,0,0,0,0,0]], days = [[0,4,4,3,4,4],[2,1,4,0,3,3],[4,2,3,2,3,3],[3,1,2,1,4,4],[4,4,2,4,1,3],[3,0,4,4,2,0]]",
        "output": "19"
      },
      {
        "input": "flights = [[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1],[0,0,0,0,0],[0,0,0,0,0]], days = [[1,2,1,2,1],[2,3,2,3,2],[1,1,1,1,1],[3,3,3,3,3],[2,2,2,2,2]]",
        "output": "12"
      },
      {
        "input": "flights = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], days = [[1,2,3,4,5],[5,4,3,2,1],[2,3,4,5,6],[6,5,4,3,2],[3,4,5,6,7]]",
        "output": "15"
      },
      {
        "input": "flights = [[0,1,0,0,0],[0,0,0,0,1],[0,0,0,1,0],[1,0,1,0,0],[1,1,0,0,0]], days = [[1,2,1,3,3],[3,1,2,2,1],[1,3,2,2,3],[2,2,2,1,2],[1,1,3,2,2]]",
        "output": "13"
      },
      {
        "input": "flights = [[0,1,0,0,0],[0,0,0,1,0],[0,0,0,0,1],[0,0,1,0,0],[1,0,0,0,0]], days = [[1,0,1,0,0],[0,0,0,0,1],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0]]",
        "output": "3"
      },
      {
        "input": "flights = [[0,1,1,0,0],[0,0,0,1,1],[0,0,0,1,1],[1,1,0,0,0],[1,1,0,0,0]], days = [[1,2,3,4,5],[5,4,3,2,1],[1,1,1,1,1],[0,0,0,0,0],[7,7,7,7,7]]",
        "output": "33"
      },
      {
        "input": "flights = [[0,0,1,0,0],[0,0,1,0,0],[0,0,0,1,1],[0,0,0,0,0],[0,0,0,0,0]], days = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9]]",
        "output": "33"
      },
      {
        "input": "flights = [[0,1,1,0,0],[1,0,0,1,0],[1,0,0,0,1],[0,1,0,0,0],[0,0,1,0,0]], days = [[1,2,0,1,0],[0,1,1,0,0],[2,0,1,1,1],[1,0,0,1,0],[0,0,0,0,1]]",
        "output": "7"
      },
      {
        "input": "flights = [[0,1,0,0,1],[1,0,1,1,0],[0,1,0,1,1],[0,1,1,0,1],[1,0,1,1,0]], days = [[0,2,5,8,0],[7,0,3,2,5],[1,2,3,4,5],[6,7,8,9,10],[1,2,3,4,5]]",
        "output": "41"
      },
      {
        "input": "flights = [[0,1,1,1,0],[1,0,1,0,1],[1,1,0,0,0],[1,0,0,0,0],[0,1,0,0,0]], days = [[6,0,0,0,7],[0,6,0,0,7],[0,0,6,0,7],[0,0,0,6,7],[0,0,0,0,7]]",
        "output": "25"
      },
      {
        "input": "flights = [[0,0,1,0,0],[1,0,0,1,0],[0,1,0,0,1],[0,1,1,0,0],[0,0,1,1,0]], days = [[5,5,5,5,5],[3,3,3,3,3],[6,6,6,6,6],[2,2,2,2,2],[4,4,4,4,4]]",
        "output": "30"
      },
      {
        "input": "flights = [[0,1,0,0,0,0,0],[1,0,1,0,0,0,0],[0,1,0,1,0,0,0],[0,0,1,0,1,0,0],[0,0,0,1,0,1,0],[0,0,0,0,1,0,1],[0,0,0,0,0,1,0]], days = [[1,2,3,0,1,0,0],[0,1,0,0,0,0,1],[1,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]",
        "output": "8"
      },
      {
        "input": "flights = [[0,1,1,1,1],[1,0,1,1,1],[1,1,0,1,1],[1,1,1,0,1],[1,1,1,1,0]], days = [[3,3,3,3,3],[3,3,3,3,3],[3,3,3,3,3],[3,3,3,3,3],[3,3,3,3,3]]",
        "output": "15"
      },
      {
        "input": "flights = [[0,1,0,0],[1,0,1,0],[0,1,0,1],[0,0,1,0]], days = [[1,1,0,1],[0,1,0,0],[0,0,1,1],[1,0,1,0]]",
        "output": "4"
      },
      {
        "input": "flights = [[0,1,1],[1,0,1],[1,1,0],[0,0,0]], days = [[3,3,3],[3,3,3],[3,3,3],[3,3,3]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "flights = [[0,1,1,0],[1,0,1,1],[0,1,0,1],[0,1,1,0]], days = [[7,3,2,5],[1,6,0,3],[0,1,7,4],[4,1,2,0]]",
        "output": "24"
      },
      {
        "input": "flights = [[0,1,0,1],[1,0,1,0],[0,1,0,1],[1,0,1,0]], days = [[3,2,4,1],[1,4,2,3],[2,1,3,4],[4,3,1,2]]",
        "output": "14"
      },
      {
        "input": "flights = [[0,1,0,0],[1,0,1,0],[0,1,0,1],[0,0,1,0]], days = [[1,1,1,1],[2,2,2,2],[3,3,3,3],[4,4,4,4]]",
        "output": "13"
      },
      {
        "input": "flights = [[0,1,0,0],[1,0,1,0],[0,1,0,1],[0,0,1,0]], days = [[3,0,1,5],[0,7,0,2],[1,0,3,0],[5,2,0,7]]",
        "output": "20"
      },
      {
        "input": "flights = [[0,1,1,0],[1,0,1,1],[1,1,0,0],[0,1,1,0]], days = [[3,5,1,6],[2,3,4,1],[5,3,2,4],[4,6,5,2]]",
        "output": "20"
      },
      {
        "input": "flights = [[0,1,1,0,1],[1,0,1,0,0],[1,1,0,1,0],[0,0,1,0,1],[1,0,0,1,0]], days = [[1,2,3,4,5],[5,4,3,2,1],[2,3,4,5,6],[6,5,4,3,2],[3,4,5,6,7]]",
        "output": "26"
      },
      {
        "input": "flights = [[0,1,1,0,0],[1,0,1,1,0],[1,1,0,1,0],[0,1,1,0,1],[0,0,0,1,0]], days = [[3,3,2,4,6],[3,2,0,4,6],[5,2,2,6,5],[3,3,5,2,3],[3,3,4,4,3]]",
        "output": "25"
      },
      {
        "input": "flights = [[0,1,0,0,0,1],[1,0,1,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[1,0,0,0,1,0]], days = [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]]",
        "output": "6"
      },
      {
        "input": "flights = [[0,1,0,0,0],[0,0,1,1,0],[0,1,0,0,1],[0,1,0,0,0],[0,0,1,0,0]], days = [[0,0,1,3,1],[0,1,0,0,2],[1,0,0,0,0],[3,0,0,0,0],[1,2,0,0,0]]",
        "output": "6"
      },
      {
        "input": "flights = [[0,1,1,0,0],[1,0,0,1,1],[1,0,0,1,1],[0,1,1,0,0],[0,1,1,0,0]], days = [[1,2,3,4,5],[5,4,3,2,1],[1,2,2,2,1],[2,1,2,1,2],[5,4,3,2,1]]",
        "output": "21"
      },
      {
        "input": "flights = [[0,1,0,1],[1,0,1,0],[0,1,0,0],[1,0,0,0]], days = [[3,4,5,2],[4,5,6,3],[5,6,7,4],[2,3,4,5]]",
        "output": "21"
      },
      {
        "input": "flights = [[0,1,0,1,0,1],[1,0,1,1,1,1],[0,1,0,1,0,1],[1,1,1,0,1,1],[0,1,0,1,0,1],[1,1,1,1,1,0]], days = [[0,1,0,0,0,0],[1,0,1,1,1,1],[0,1,0,1,0,1],[1,1,1,0,1,1],[0,1,0,1,0,1],[1,1,1,1,1,0]]",
        "output": "6"
      },
      {
        "input": "flights = [[0,1,1,0],[1,0,0,1],[1,0,0,1],[0,1,1,0]], days = [[7,0,0,7],[0,7,7,0],[0,7,7,0],[7,0,0,7]]",
        "output": "28"
      },
      {
        "input": "flights = [[0,1,0,0,0,0],[1,0,1,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[0,0,0,0,1,0]], days = [[3,0,0,2,1,0],[0,0,2,0,1,1],[1,2,0,0,2,0],[0,0,0,0,1,0],[0,1,0,1,0,2],[1,0,1,0,1,0]]",
        "output": "9"
      },
      {
        "input": "flights = [[0,1,0,0,0],[1,0,1,0,0],[0,1,0,1,0],[0,0,1,0,1],[0,0,0,1,0]], days = [[7,0,0,0,0],[0,7,0,0,0],[0,0,7,0,0],[0,0,0,7,0],[0,0,0,0,7]]",
        "output": "35"
      },
      {
        "input": "flights = [[0,0,0,0,0],[1,0,1,0,0],[0,0,0,1,0],[0,1,0,0,1],[0,0,1,1,0]], days = [[0,7,0,0,0],[0,0,0,5,1],[0,3,0,7,0],[1,0,0,0,2],[0,0,0,4,0]]",
        "output": "7"
      },
      {
        "input": "flights = [[0,1,1,0],[1,0,0,1],[0,1,0,1],[1,1,1,0]], days = [[7,3,2,5],[2,5,3,7],[1,1,1,1],[4,5,4,6]]",
        "output": "23"
      },
      {
        "input": "flights = [[0,1,1,0,0],[1,0,0,1,1],[1,0,0,1,0],[0,1,1,0,1],[0,1,0,1,0]], days = [[2,1,2,3,3],[3,1,3,2,1],[1,2,1,2,3],[2,3,2,1,2],[3,2,3,2,1]]",
        "output": "15"
      },
      {
        "input": "flights = [[0,1,0,0],[1,0,1,1],[0,1,0,0],[0,1,0,0]], days = [[0,0,1,7],[7,0,0,1],[2,2,0,0],[1,0,0,0]]",
        "output": "16"
      },
      {
        "input": "flights = [[0,1,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,1],[1,0,0,0,0,0,0]], days = [[7,6,5,4,3,2,1],[1,7,6,5,4,3,2],[2,1,7,6,5,4,3],[3,2,1,7,6,5,4],[4,3,2,1,7,6,5],[5,4,3,2,1,7,6],[6,5,4,3,2,1,7]]",
        "output": "49"
      },
      {
        "input": "flights = [[0,0,1,1,0,0],[1,0,0,1,1,0],[0,1,0,0,0,1],[1,1,0,0,0,1],[0,1,0,0,0,0],[0,0,1,1,0,0]], days = [[1,7,2,1,2,1],[2,1,3,2,3,2],[3,2,1,3,1,3],[1,3,2,1,3,2],[2,1,3,2,1,3],[1,2,1,3,2,1]]",
        "output": "19"
      },
      {
        "input": "flights = [[0,0,0,1],[0,0,1,0],[0,0,0,0],[1,0,0,0]], days = [[1,1,1,1],[2,2,2,2],[3,3,3,3],[4,4,4,4]]",
        "output": "16"
      },
      {
        "input": "flights = [[0,1,1,1,1,1,1,1],[1,0,1,1,1,1,1,1],[1,1,0,1,1,1,1,1],[1,1,1,0,1,1,1,1],[1,1,1,1,0,1,1,1],[1,1,1,1,1,0,1,1],[1,1,1,1,1,1,0,1],[1,1,1,1,1,1,1,0]], days = [[1,2,3,4,5,6,7,8],[2,3,4,5,6,7,8,1],[3,4,5,6,7,8,1,2],[4,5,6,7,8,1,2,3],[5,6,7,8,1,2,3,4],[6,7,8,1,2,3,4,5],[7,8,1,2,3,4,5,6],[8,1,2,3,4,5,6,7]]",
        "output": "64"
      },
      {
        "input": "flights = [[0,0,0,0],[1,0,1,1],[0,1,0,1],[0,1,1,0]], days = [[4,4,2,4],[3,3,3,1],[4,4,4,4],[1,2,1,2]]",
        "output": "14"
      },
      {
        "input": "flights = [[0,1,0,0,0,0],[1,0,1,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[0,0,0,0,1,0]], days = [[1,0,1,0,0,0],[0,0,0,0,0,1],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]",
        "output": "4"
      },
      {
        "input": "flights = [[0,1,1,1,0],[1,0,1,0,1],[1,1,0,1,0],[1,0,1,0,0],[0,1,0,0,0]], days = [[5,3,0,1,0],[0,1,0,0,0],[3,0,0,0,1],[1,0,0,0,0],[0,0,1,1,0]]",
        "output": "10"
      },
      {
        "input": "flights = [[0,1,0,0,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1],[0,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0]], days = [[7,0,0,0,0,0],[0,0,0,0,0,7],[0,0,0,0,7,0],[0,0,0,7,0,0],[0,0,7,0,0,0],[0,7,0,0,0,0]]",
        "output": "42"
      },
      {
        "input": "flights = [[0,1,1,0],[1,0,0,1],[1,1,0,0],[0,1,1,0]], days = [[5,2,6,4],[1,6,5,3],[7,1,2,6],[0,3,1,5]]",
        "output": "25"
      },
      {
        "input": "flights = [[0,1,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,1],[1,0,0,0,0,0,0]], days = [[1,3,2,5,6,3,1],[2,3,4,1,5,3,1],[3,1,2,3,4,1,0],[1,3,2,3,1,1,1],[3,4,2,1,3,1,1],[3,4,2,3,1,1,1],[1,3,2,3,1,1,1]]",
        "output": "21"
      },
      {
        "input": "flights = [[0,1,0,1],[1,0,1,0],[0,1,0,1],[1,0,1,0]], days = [[1,2,1,2],[2,1,2,1],[1,2,1,2],[2,1,2,1]]",
        "output": "8"
      },
      {
        "input": "flights = [[0,0,0,0,0],[1,0,1,0,1],[0,0,0,0,0],[0,1,1,0,0],[0,0,0,1,0]], days = [[1,2,1,1,1],[1,1,1,2,1],[1,1,1,1,2],[2,1,1,1,1],[1,2,1,1,1]]",
        "output": "6"
      },
      {
        "input": "flights = [[0,1,1,1,0,0],[1,0,1,0,1,0],[1,1,0,0,0,1],[1,0,0,0,1,0],[0,1,0,1,0,1],[0,0,1,0,1,0]], days = [[2,3,4,5,6,7],[7,6,5,4,3,2],[2,2,2,2,2,2],[3,3,3,3,3,3],[4,4,4,4,4,4],[5,5,5,5,5,5]]",
        "output": "36"
      },
      {
        "input": "flights = [[0,1,1,1,1,1],[1,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0]], days = [[7,7,7,7,7,7],[1,1,1,1,1,1],[2,2,2,2,2,2],[3,3,3,3,3,3],[4,4,4,4,4,4],[5,5,5,5,5,5]]",
        "output": "42"
      },
      {
        "input": "flights = [[0,0,0,0,1],[0,0,1,0,0],[0,1,0,0,0],[0,0,0,0,0],[1,0,0,0,0]], days = [[3,0,5,0,9],[7,8,2,1,3],[1,1,1,1,1],[0,0,0,0,0],[9,0,0,0,0]]",
        "output": "23"
      },
      {
        "input": "flights = [[0,1,0,1],[1,0,1,0],[0,1,0,1],[1,0,1,0]], days = [[2,3,4,5],[5,4,3,2],[1,1,1,1],[7,7,7,7]]",
        "output": "28"
      },
      {
        "input": "flights = [[0,0,0,0,0,0,1],[0,0,1,0,0,0,0],[0,1,0,0,0,0,0],[0,0,0,0,1,0,0],[0,0,0,1,0,0,0],[0,0,0,0,0,0,1],[1,0,0,0,0,1,0]], days = [[4,4,4,4,4,4,4],[3,3,3,3,3,3,3],[4,4,4,4,4,4,4],[3,3,3,3,3,3,3],[2,2,2,2,2,2,2],[4,4,4,4,4,4,4],[2,2,2,2,2,2,2]]",
        "output": "28"
      },
      {
        "input": "flights = [[0,0,0,0,0,0,0],[1,0,0,0,0,0,0],[0,1,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,1,0]], days = [[1,1,1,1,1,1,1],[1,2,2,2,2,2,2],[2,2,3,3,3,3,3],[3,3,3,4,4,4,4],[4,4,4,4,5,5,5],[5,5,5,5,5,6,6],[6,6,6,6,6,6,7]]",
        "output": "7"
      },
      {
        "input": "flights = [[0,1,0,0,0,0],[1,0,1,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[0,0,0,0,1,0]], days = [[0,8,0,0,0,0],[0,0,5,0,0,0],[0,0,0,3,0,0],[0,0,0,0,6,0],[0,0,0,0,0,4],[0,0,0,0,0,0]]",
        "output": "26"
      },
      {
        "input": "flights = [[0,1,1,0,0],[0,0,0,1,1],[1,0,0,0,1],[0,1,0,0,1],[0,0,1,1,0]], days = [[1,4,2,7,3],[7,4,7,4,7],[4,2,5,2,3],[2,2,4,3,2],[5,4,7,1,2]]",
        "output": "30"
      },
      {
        "input": "flights = [[0,1,0,1],[1,0,1,0],[0,1,0,1],[1,0,1,0]], days = [[1,2,3,4],[4,3,2,1],[2,1,4,3],[3,4,1,2]]",
        "output": "14"
      },
      {
        "input": "flights = [[0,1,1,1,1],[1,0,1,1,1],[1,1,0,1,1],[1,1,1,0,1],[1,1,1,1,0]], days = [[3,0,3,3,3],[0,3,0,3,0],[3,0,3,0,3],[3,3,0,3,3],[3,0,3,3,0]]",
        "output": "15"
      },
      {
        "input": "flights = [[0,1,0,0,0,0],[1,0,1,0,0,0],[0,1,0,1,0,0],[0,0,1,0,1,0],[0,0,0,1,0,1],[0,0,0,0,1,0]], days = [[3,0,1,0,0,0],[0,0,0,0,0,1],[1,1,1,1,1,0],[0,0,1,1,1,1],[0,0,0,1,1,1],[1,0,0,0,1,0]]",
        "output": "7"
      },
      {
        "input": "flights = [[0,1,1,0,0,0],[1,0,0,1,1,0],[1,0,0,0,0,1],[0,1,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0]], days = [[7,3,0,2,8,2],[0,6,6,5,0,5],[0,0,5,0,7,4],[4,0,4,0,6,1],[1,3,0,7,0,7],[5,1,1,3,3,0]]",
        "output": "37"
      },
      {
        "input": "flights = [[0,0,0,0],[1,0,0,0],[0,1,0,0],[0,0,1,0]], days = [[7,6,5,4],[4,3,2,1],[1,2,3,4],[5,6,7,8]]",
        "output": "22"
      },
      {
        "input": "flights = [[0,1,1,0,0],[1,0,1,1,0],[1,1,0,1,0],[0,1,1,0,1],[0,0,0,1,0]], days = [[7,0,0,0,0],[0,0,0,7,0],[0,0,0,0,7],[0,7,0,0,0],[0,0,7,0,0]]",
        "output": "21"
      }
    ]
  },
  {
    "id": 411,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Array",
      "String",
      "Backtracking"
    ],
    "problemDescription": "A string can be abbreviated by replacing any number of non-adjacent substrings with their lengths. For example, a string such as \"substitution\" could be abbreviated as (but not limited to):\n\n\"s10n\" (\"s ubstitutio n\")\n\"sub4u4\" (\"sub stit u tion\")\n\"12\" (\"substitution\")\n\"su3i1u2on\" (\"su bst i t u ti on\")\n\"substitution\" (no substrings replaced)\n\nNote that \"s55n\" (\"s ubsti tutio n\") is not a valid abbreviation of \"substitution\" because the replaced substrings are adjacent.\nThe length of an abbreviation is the number of letters that were not replaced plus the number of substrings that were replaced. For example, the abbreviation \"s10n\" has a length of 3 (2 letters + 1 substring) and \"su3i1u2on\" has a length of 9 (6 letters + 3 substrings).\nGiven a target string target and an array of strings dictionary, return an abbreviation of target with the shortest possible length such that it is not an abbreviation of any string in dictionary. If there are multiple shortest abbreviations, return any of them.\n\u00a0\nExample 1:\n\nInput: target = \"apple\", dictionary = [\"blade\"]\nOutput: \"a4\"\nExplanation: The shortest abbreviation of \"apple\" is \"5\", but this is also an abbreviation of \"blade\".\nThe next shortest abbreviations are \"a4\" and \"4e\". \"4e\" is an abbreviation of blade while \"a4\" is not.\nHence, return \"a4\".\n\nExample 2:\n\nInput: target = \"apple\", dictionary = [\"blade\",\"plain\",\"amber\"]\nOutput: \"1p3\"\nExplanation: \"5\" is an abbreviation of both \"apple\" but also every word in the dictionary.\n\"a4\" is an abbreviation of \"apple\" but also \"amber\".\n\"4e\" is an abbreviation of \"apple\" but also \"blade\".\n\"1p3\", \"2p2\", and \"3l1\" are the next shortest abbreviations of \"apple\".\nSince none of them are abbreviations of words in the dictionary, returning any of them is correct.\n\n\u00a0\nConstraints:\n\nm == target.length\nn == dictionary.length\n1 <= m <= 21\n0 <= n <= 1000\n1 <= dictionary[i].length <= 100\nlog2(n) + m <= 21 if n > 0\ntarget and dictionary[i] consist of lowercase English letters.\ndictionary does not contain target.\n\n",
    "starterCode": "class Solution:\n    def minAbbreviation(self, target: str, dictionary: List[str]) -> str:\n        ",
    "testCases": [
      {
        "input": "target = \"internationalization\", dictionary = [\"international\", \"intermittent\", \"interact\"]",
        "output": "20"
      },
      {
        "input": "target = \"apple\", dictionary = [\"blade\", \"plain\", \"amber\"]",
        "output": "3l1"
      },
      {
        "input": "target = \"cat\", dictionary = [\"dog\", \"dot\"]",
        "output": "c2"
      },
      {
        "input": "target = \"internationalization\", dictionary = [\"international\", \"interstate\", \"interpersonal\"]",
        "output": "20"
      },
      {
        "input": "target = \"internationalization\", dictionary = [\"inter\", \"national\", \"ization\"]",
        "output": "20"
      },
      {
        "input": "target = \"a\", dictionary = [\"b\"]",
        "output": "a"
      },
      {
        "input": "target = \"apple\", dictionary = [\"blade\"]",
        "output": "a4"
      },
      {
        "input": "target = \"test\", dictionary = [\"tent\", \"sett\", \"text\"]",
        "output": "2s1"
      },
      {
        "input": "target = \"abcd\", dictionary = [\"abcde\", \"abfde\", \"abgde\"]",
        "output": "4"
      },
      {
        "input": "target = \"a\", dictionary = []",
        "output": "1"
      },
      {
        "input": "target = \"a\", dictionary = [\"b\", \"c\", \"d\"]",
        "output": "a"
      },
      {
        "input": "target = \"congratulations\", dictionary = [\"congratulate\", \"congregate\", \"congruity\", \"congruity\", \"congruity\"]",
        "output": "15"
      },
      {
        "input": "target = \"pneumonoultramicroscopicsilicovolcanoconiosis\", dictionary = [\"pneumo\", \"ultra\", \"microscopic\", \"silico\", \"volcano\", \"coniosis\", \"supercalifragilisticexpialidocious\"]",
        "output": "45"
      },
      {
        "input": "target = \"quantification\", dictionary = [\"quantific\", \"quantificat\", \"quantificatio\", \"quantificati\", \"quantificati\", \"quantificati\", \"quantificati\", \"quantificati\", \"quantificati\", \"quantificati\"]",
        "output": "14"
      },
      {
        "input": "target = \"unbelievable\", dictionary = [\"unbeleviable\", \"unelevable\", \"unbelieveable\", \"unbelivable\", \"unbelievablee\"]",
        "output": "7v4"
      },
      {
        "input": "target = \"optimization\", dictionary = [\"optimal\", \"optimizer\", \"optimization\", \"optimize\", \"optimism\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"antidisestablishmentarianism\", dictionary = [\"antisemitism\", \"establishment\", \"disestablishment\", \"disestablishmentarianism\", \"antidisestablishmentarian\"]",
        "output": "28"
      },
      {
        "input": "target = \"universality\", dictionary = [\"universal\", \"universals\", \"universality\", \"universal\", \"universals\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"characterization\", dictionary = [\"character\", \"characteristic\", \"charisma\", \"charitable\"]",
        "output": "16"
      },
      {
        "input": "target = \"environmental\", dictionary = [\"environment\", \"environments\", \"environmentalist\", \"environmentalists\", \"environmentally\"]",
        "output": "13"
      },
      {
        "input": "target = \"incomprehensibilities\", dictionary = [\"incomprehensible\", \"incomprehension\", \"incomprehensibly\", \"incomprehensiveness\"]",
        "output": "21"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyz\", dictionary = [\"abcdefghijklmnopqrstuvwxy\", \"abcdefghijklmnopqrstuvwx\", \"abcdefghijklmnopqrstuv\", \"abcdefghijklmnopqrstu\", \"abcdefghijklmnopqrst\", \"abcdefghijklmnopqr\", \"abcdefghijklmnopq\", \"abcdefghijklmnop\", \"abcdefghijklmno\", \"abcdefghijk\", \"abcdefghij\", \"abcdefghi\", \"abcdefgh\", \"abcdefg\", \"abcdef\", \"abcde\", \"abcd\", \"abc\", \"ab\", \"a\"]",
        "output": "26"
      },
      {
        "input": "target = \"acknowledgment\", dictionary = [\"acknowledge\", \"acknowledges\", \"acknowledged\", \"acknowledging\", \"acknowledgments\", \"acknowledgment\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"methodology\", dictionary = [\"method\", \"methodical\", \"methodically\", \"methodologies\", \"methodological\", \"methodologist\"]",
        "output": "11"
      },
      {
        "input": "target = \"abcdefghij\", dictionary = [\"abcdefghi\", \"abcdefgh\", \"abcdefg\", \"abcdef\", \"abcde\", \"abcd\", \"abc\", \"ab\", \"a\", \"bcdefghij\", \"cdefghij\", \"defghij\", \"efghij\", \"fghij\", \"ghij\", \"hij\", \"ij\", \"j\"]",
        "output": "10"
      },
      {
        "input": "target = \"optimization\", dictionary = [\"optimizationg\", \"optimizat\", \"optimiza\", \"optimiz\", \"optimize\", \"optimi\", \"optim\", \"opti\", \"opt\", \"op\", \"o\", \"optimizationnn\"]",
        "output": "12"
      },
      {
        "input": "target = \"unfortunately\", dictionary = [\"unsurprisingly\", \"unofficially\", \"unaccountably\", \"underrepresented\"]",
        "output": "10e2"
      },
      {
        "input": "target = \"explanation\", dictionary = [\"explain\", \"explains\", \"explanation\", \"explaining\", \"explained\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"congratulations\", dictionary = [\"congratulate\", \"congratulatory\", \"congratulating\", \"congratulate\", \"congratulations\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"congratulations\", dictionary = [\"congratulate\", \"congratulates\", \"congratulations\", \"congratulating\", \"congratulated\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"honorificabilitudinitatibus\", dictionary = [\"honorificabilitudinitatib\", \"honorificabilitudinitati\", \"honorificabilitudinit\", \"honorificabilitudini\"]",
        "output": "27"
      },
      {
        "input": "target = \"rehabilitation\", dictionary = [\"rehabilitate\", \"rehabilitating\", \"rehabilitation\", \"rehabilitated\", \"rehabilitations\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"inextricably\", dictionary = [\"inextricably\", \"inextricably\", \"inextricably\", \"inextricably\", \"inextricably\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"microprocessors\", dictionary = [\"microscopic\", \"microphones\", \"microorganisms\"]",
        "output": "15"
      },
      {
        "input": "target = \"superconductivity\", dictionary = [\"superconduct\", \"superconducting\", \"superconductivity\", \"superconductive\", \"superconductor\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"supercalifragilisticexpialidocious\", dictionary = [\"supercalifragilistic\", \"supercalifragilisticexp\", \"superfragilisticexpialidocious\"]",
        "output": "34"
      },
      {
        "input": "target = \"antidisestablishmentarianism\", dictionary = [\"antidisestablishmentarianisms\", \"antidisestablishmentarian\", \"antidisestablishmentaria\", \"antidisestablishmentari\", \"antidisestablishmentar\"]",
        "output": "28"
      },
      {
        "input": "target = \"onomatopoeia\", dictionary = [\"onomatopoetic\", \"onomatopoeic\", \"onomatopoet\", \"onomatopoeias\", \"onomatopoe\"]",
        "output": "11a"
      },
      {
        "input": "target = \"unbelievable\", dictionary = [\"incredible\", \"unbeliever\", \"unbelief\", \"believable\", \"unbelieveable\"]",
        "output": "12"
      },
      {
        "input": "target = \"communication\", dictionary = [\"communicate\", \"communicator\", \"communicative\", \"communications\", \"communicates\"]",
        "output": "12n"
      },
      {
        "input": "target = \"metropolitan\", dictionary = [\"metropolitan\", \"metropolitanization\", \"metropolitanity\", \"metropolitanities\", \"metropolitanize\", \"metropolitanized\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"electroencephalography\", dictionary = [\"electro\", \"encephalogram\", \"graphy\", \"electronic\"]",
        "output": "22"
      },
      {
        "input": "target = \"optimization\", dictionary = [\"optimism\", \"optimizer\", \"optimally\", \"optimization\", \"optimization\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"supercalifragilisticexpialidocious\", dictionary = [\"supercalifragilistic\", \"califragilisticexpialidocious\", \"superfragilistic\", \"califragilistic\", \"fragilisticexpialidocious\"]",
        "output": "34"
      },
      {
        "input": "target = \"universality\", dictionary = [\"universe\", \"universals\", \"universally\", \"universal\", \"universes\"]",
        "output": "12"
      },
      {
        "input": "target = \"optimization\", dictionary = [\"optimist\", \"optimal\", \"optimize\", \"optimizer\", \"optimization\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"mississippi\", dictionary = [\"missisipie\", \"mississippi\", \"miss\", \"missis\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"floccinaucinihilipilification\", dictionary = [\"floccinaucinihilipilific\", \"floccinaucinihil\", \"floccinauc\", \"floccina\", \"flocc\"]",
        "output": "29"
      },
      {
        "input": "target = \"characterization\", dictionary = [\"character\", \"characterize\", \"characterization\", \"characterizations\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"characterization\", dictionary = [\"characterize\", \"characterized\", \"characterizing\", \"characterization\", \"characterizations\", \"charact\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"congratulations\", dictionary = [\"congratulate\", \"congratulated\", \"congratulates\", \"congratulating\", \"congratulations\", \"congratulatory\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"mississippi\", dictionary = [\"missisippi\", \"mississipi\", \"missisippi\", \"mississipi\", \"mississipp\", \"missisippi\", \"mississipi\", \"mississipp\", \"mississippii\", \"mississippii\", \"mississippiii\", \"mississippiiii\", \"mississippiiiii\", \"mississippiiiiii\", \"mississippiiiiiii\", \"mississippiiiiiiii\", \"mississippiiiiiiiii\", \"mississippiiiiiiiiii\", \"mississippiiiiiiiiiii\", \"mississippiiiiiiiiiiii\"]",
        "output": "11"
      },
      {
        "input": "target = \"environmentally\", dictionary = [\"environment\", \"environmental\", \"environmentally\", \"environmentalist\", \"environmentalists\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"algorithm\", dictionary = [\"algorith\", \"algorithmm\", \"algorithem\", \"algorit\", \"algori\", \"algor\", \"algo\", \"alg\", \"al\", \"a\", \"algorithmically\"]",
        "output": "9"
      },
      {
        "input": "target = \"antidisestablishmentarianism\", dictionary = [\"antidisestablishmentarian\", \"disestablishmentarianism\", \"antidisestablishment\", \"disestablishmentarian\"]",
        "output": "28"
      },
      {
        "input": "target = \"acknowledgments\", dictionary = [\"acknowledge\", \"acknowledges\", \"acknowledged\", \"acknowledging\", \"acknowledgments\", \"acknowledgment\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"counterdemonstration\", dictionary = [\"counter\", \"demonstration\", \"counterdemonstrate\", \"counterdemonstrations\", \"counterdemonstrat\", \"counterdemonstrator\"]",
        "output": "20"
      },
      {
        "input": "target = \"electroencephalograph\", dictionary = [\"electrocardiogram\", \"electromyography\", \"electrochemical\", \"electroconductive\"]",
        "output": "21"
      },
      {
        "input": "target = \"administrative\", dictionary = [\"administrators\", \"administrative\", \"administrates\", \"administrating\", \"administrative\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"unpredictability\", dictionary = [\"unpredictable\", \"unpredictably\", \"unpredictability\", \"unpredictable\", \"unpredictability\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyz\", dictionary = [\"abcdefghijklmnopqrstuvwx\", \"abcdefghijklmnopqrstuvwyz\", \"abcdefgh\", \"mnopqrstuvwxyz\"]",
        "output": "26"
      },
      {
        "input": "target = \"xxyyzz\", dictionary = [\"xxxyyy\", \"xxyyy\", \"xxzyy\", \"xyyzz\", \"xxyyz\", \"xyzzz\", \"xxzzz\", \"xyzzy\"]",
        "output": "5z"
      },
      {
        "input": "target = \"universality\", dictionary = [\"universal\", \"universe\", \"universalize\", \"universally\", \"universals\"]",
        "output": "11y"
      },
      {
        "input": "target = \"pneumonoultramicroscopicsilicovolcanoconiosis\", dictionary = [\"pneumonoultramicroscopicsilicovolcanoconioses\", \"pneumonoultramicroscopicsilicovolcanoconiosis\", \"pneumonoultramicroscopicsilicovolcanoconiosing\", \"pneumonoultramicroscopicsilicovolcanoconiosed\"]",
        "output": "Execution timed out"
      },
      {
        "input": "target = \"algorithm\", dictionary = [\"algebra\", \"algorithmic\", \"alge\", \"rithm\", \"algo\", \"rith\", \"logarithm\", \"algor\", \"rithmo\", \"algorith\"]",
        "output": "a8"
      },
      {
        "input": "target = \"appropriateness\", dictionary = [\"appropriate\", \"appropriately\", \"appropriateness\", \"appropriating\", \"appropriation\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"thyroparathyroidectomized\", dictionary = [\"thyroparathyroidectomizes\", \"thyroparathyroidectomize\", \"thyroparathyroidectomy\", \"thyroparathyroidectom\", \"thyroparathyroidect\"]",
        "output": "Execution timed out"
      },
      {
        "input": "target = \"pseudopseudohypoparathyroidism\", dictionary = [\"pseudopseudohypoparathyroidisms\", \"pseudopseudohypoparathyroidism\", \"pseudopseudohypoparathyroidis\", \"pseudopseudohypoparathyroidi\", \"pseudopseudohypoparathyroid\"]",
        "output": "Execution timed out"
      },
      {
        "input": "target = \"floccinaucinihilipilification\", dictionary = [\"floccinaucinihilipilifications\", \"floccinaucinihilipilific\", \"floccinaucinihilipilifics\", \"floccinaucinihilipilificated\"]",
        "output": "29"
      },
      {
        "input": "target = \"development\", dictionary = [\"develop\", \"developed\", \"developing\", \"developmental\", \"developments\", \"developer\"]",
        "output": "11"
      },
      {
        "input": "target = \"supercalifragilisticexpialidocious\", dictionary = [\"supercalifragile\", \"superduper\", \"supercaliber\", \"supercal\"]",
        "output": "34"
      },
      {
        "input": "target = \"responsibility\", dictionary = [\"responsible\", \"responsibilities\", \"responsibility\", \"responsible\", \"responsibilities\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"xerophthalmia\", dictionary = [\"xerophthalmic\", \"xerophthymia\", \"xerophthalmal\", \"xerophthalmic\", \"xerophthalmia\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"supercalifragilisticexpialidocious\", dictionary = [\"super\", \"cali\", \"fragilistic\", \"expialidocious\", \"supercalifragilisticexpialido\"]",
        "output": "34"
      },
      {
        "input": "target = \"unbelievable\", dictionary = [\"unbelievably\", \"unbeliever\", \"unbelieving\", \"unbelievable\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"floccinaucinihilipilification\", dictionary = [\"floccinaucinihilipilificat\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\", \"floccinaucinihilipilificati\"]",
        "output": "29"
      },
      {
        "input": "target = \"pneumonoultramicroscopicsilicovolcanoconiosis\", dictionary = [\"pneumonoultramicroscopic\", \"silicovolcanoconiosis\", \"ultramicroscopic\", \"pneumonoconiosis\"]",
        "output": "45"
      },
      {
        "input": "target = \"characterization\", dictionary = [\"characterize\", \"characterizes\", \"characterization\", \"characterized\", \"characterizing\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"honorificabilitudinitatibus\", dictionary = [\"honorificabilitudinitatibus\", \"honorificabilitudinitati\", \"honorificabilitudinitatibus\", \"honorificabilitudinitate\"]",
        "output": "Execution timed out"
      },
      {
        "input": "target = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", dictionary = [\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyz\", \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzz\", \"aabbcde\", \"mnopqr\", \"stuvwx\", \"yz\"]",
        "output": "52"
      },
      {
        "input": "target = \"imperfections\", dictionary = [\"imperfection\", \"imperfections\", \"imperfect\", \"imperfectionist\", \"imperfectionism\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"electroencephalographically\", dictionary = [\"electroencephalograph\", \"electroencephalographs\", \"electroencephalographing\", \"electroencephalography\"]",
        "output": "27"
      },
      {
        "input": "target = \"floccinaucinihilipilification\", dictionary = [\"floccinaucinihilipilifications\", \"floccinaucinihilipilific\", \"floccinaucinihilipilic\", \"floccinaucinihilipi\"]",
        "output": "29"
      },
      {
        "input": "target = \"individual\", dictionary = [\"individuality\", \"individuals\", \"individualism\", \"individualist\", \"individualistic\"]",
        "output": "10"
      },
      {
        "input": "target = \"floccinaucinihilipilification\", dictionary = [\"floccinaucinihilipilify\", \"floccinaucinihilipilified\", \"floccinaucinihilipilifies\", \"floccinaucinihilipilifying\"]",
        "output": "29"
      },
      {
        "input": "target = \"specialization\", dictionary = [\"special\", \"specialize\", \"specializing\", \"specialized\", \"specialization\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"microprocessor\", dictionary = [\"micro\", \"processor\", \"microchip\", \"microwave\"]",
        "output": "14"
      },
      {
        "input": "target = \"pneumonoultramicroscopicsilicovolcanoconiosis\", dictionary = [\"pneumonoultramicroscopicsilicovolcanoconiosis\", \"pneumonoultramicroscopicsilicovolcano\", \"pneumonoultramicroscopicsilico\", \"pneumonoultramicroscopic\", \"pneumonoultra\"]",
        "output": "Execution timed out"
      },
      {
        "input": "target = \"pneumonoultramicroscopicsilicovolcanoconiosis\", dictionary = [\"pneumonoultramicroscopicsilicovolcanoconiosi\", \"pneumonoultramicroscopicsilicovolcanoconio\", \"pneumonoultramicroscopicsilicovolcanoconi\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\", \"pneumonoultramicroscopicsilicovolcanocon\"]",
        "output": "45"
      },
      {
        "input": "target = \"thyroparathyroidectomize\", dictionary = [\"thyroparathyroidectomy\", \"thyroparathyroidectomying\", \"thyroparathyroidectomized\", \"thyroparathyroidectomizes\"]",
        "output": "24"
      },
      {
        "input": "target = \"floccinaucinihilipilification\", dictionary = [\"floccinaucinihilipilifications\", \"floccinaucinihilipilific\", \"floccinaucinihilipili\", \"floccinaucinihilipi\", \"floccinaucinihilip\"]",
        "output": "29"
      },
      {
        "input": "target = \"hippopotomonstrosesquippedaliophobia\", dictionary = [\"hippopotomonstrosesquippedaliophobias\", \"hippopotomonstrosesquippedaliophobia\", \"hippopotomonstrosesquippedaliophob\", \"hippopotomonstrosesquippedaliopho\", \"hippopotomonstrosesquippedalioph\"]",
        "output": "Execution timed out"
      },
      {
        "input": "target = \"unquestionableness\", dictionary = [\"question\", \"unquestionable\", \"unquestionably\", \"unquestionablenes\"]",
        "output": "18"
      },
      {
        "input": "target = \"acknowledgment\", dictionary = [\"acknowledge\", \"acknowledged\", \"acknowledges\", \"acknowledging\"]",
        "output": "14"
      },
      {
        "input": "target = \"supercalifragilisticexpialidocious\", dictionary = [\"supercalifragilistic\", \"califragilistic\", \"expialidocious\", \"supercal\"]",
        "output": "34"
      },
      {
        "input": "target = \"environment\", dictionary = [\"envoy\", \"enterprise\", \"envelope\", \"evaluate\"]",
        "output": "11"
      },
      {
        "input": "target = \"programming\", dictionary = [\"program\", \"programs\", \"programmatic\", \"programmer\", \"programmed\", \"programmers\"]",
        "output": "10g"
      },
      {
        "input": "target = \"encyclopedia\", dictionary = [\"encyclopedia\", \"encyclo\", \"pedia\", \"ency\", \"clo\", \"pedia\", \"encyclop\", \"encyclop\", \"encyclo\", \"encycl\", \"ency\", \"enc\", \"ency\", \"ency\", \"ency\", \"enc\", \"encyc\", \"ency\", \"enc\", \"ency\", \"enc\", \"encyc\", \"encyc\", \"encyc\", \"encyc\"]",
        "output": "Error: min() iterable argument is empty"
      },
      {
        "input": "target = \"supercalifragilisticexpialidocious\", dictionary = [\"super\", \"califragilistic\", \"expialidocious\", \"supercal\", \"fragilistic\", \"expi\", \"alidocious\", \"supercali\", \"fragil\", \"expiali\", \"docious\"]",
        "output": "34"
      },
      {
        "input": "target = \"unbelievable\", dictionary = [\"unbeliev\", \"believable\", \"unbelievable\", \"unbelieve\", \"unbelievabl\", \"unbelieva\", \"unbelievab\", \"unbelieva\", \"unbeliev\", \"unbelie\", \"unbelie\", \"unbeli\", \"unbel\", \"unbe\", \"unb\", \"un\", \"u\", \"n\", \"b\", \"e\", \"l\", \"i\", \"v\", \"a\", \"b\", \"l\", \"e\"]",
        "output": "Error: min() iterable argument is empty"
      }
    ]
  },
  {
    "id": 768,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Greedy",
      "Array",
      "Sorting",
      "Monotonic Stack"
    ],
    "problemDescription": "You are given an integer array arr.\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\nReturn the largest number of chunks we can make to sort the array.\n\u00a0\nExample 1:\n\nInput: arr = [5,4,3,2,1]\nOutput: 1\nExplanation:\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.\n\nExample 2:\n\nInput: arr = [2,1,3,4,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 2000\n0 <= arr[i] <= 108\n\n",
    "starterCode": "class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "arr = [4,3,2,1,0]",
        "output": "1"
      },
      {
        "input": "arr = [3,2,1,0,4,5,6,7,8,9]",
        "output": "7"
      },
      {
        "input": "arr = [5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "arr = [9,8,7,6,5,4,3,2,1,0]",
        "output": "1"
      },
      {
        "input": "arr = [3,2,1,4,5]",
        "output": "3"
      },
      {
        "input": "arr = [4,3,2,1,0,9,8,7,6,5]",
        "output": "2"
      },
      {
        "input": "arr = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "arr = [4,2,2,1,3]",
        "output": "1"
      },
      {
        "input": "arr = [0,1,2,3,4]",
        "output": "5"
      },
      {
        "input": "arr = [1,2,0,3,4,5]",
        "output": "4"
      },
      {
        "input": "arr = [1,0,2,3,4]",
        "output": "4"
      },
      {
        "input": "arr = [2,1,3,4,4]",
        "output": "4"
      },
      {
        "input": "arr = [0,2,1,2,1]",
        "output": "2"
      },
      {
        "input": "arr = [1,1,1,1,1]",
        "output": "5"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "arr = [1,0,2,0,3]",
        "output": "2"
      },
      {
        "input": "arr = [1,1,0,0,1]",
        "output": "2"
      },
      {
        "input": "arr = [0,0,1,1,2,2,3,3]",
        "output": "8"
      },
      {
        "input": "arr = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16]",
        "output": "9"
      },
      {
        "input": "arr = [10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1]",
        "output": "1"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "2"
      },
      {
        "input": "arr = [1,3,2,4,6,5,7,9,8,11,10,13,12,15,14,17,16,19,18,20]",
        "output": "12"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "20"
      },
      {
        "input": "arr = [2,2,2,1,1,1,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7]",
        "output": "16"
      },
      {
        "input": "arr = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "30"
      },
      {
        "input": "arr = [100,90,80,70,60,50,40,30,20,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "arr = [5,4,3,2,1,10,9,8,7,6,15,14,13,12,11,20,19,18,17,16]",
        "output": "4"
      },
      {
        "input": "arr = [5,5,5,4,4,4,3,3,3,2,2,2,1,1,1]",
        "output": "1"
      },
      {
        "input": "arr = [19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "1"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "25"
      },
      {
        "input": "arr = [10,20,30,40,50,60,70,80,90,100,1,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "arr = [5,6,1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "15"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "21"
      },
      {
        "input": "arr = [10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7]",
        "output": "1"
      },
      {
        "input": "arr = [10,20,30,40,50,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29]",
        "output": "1"
      },
      {
        "input": "arr = [5,4,3,2,1,6,7,8,9,10,1,2,3,4,5]",
        "output": "1"
      },
      {
        "input": "arr = [3,2,1,6,5,4,9,8,7,12,11,10]",
        "output": "4"
      },
      {
        "input": "arr = [25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "arr = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "arr = [1,3,2,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,0]",
        "output": "1"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "30"
      },
      {
        "input": "arr = [9,8,7,6,5,4,3,2,1,0,10,11,12,13,14,15]",
        "output": "7"
      },
      {
        "input": "arr = [1,3,2,4,5,7,6,9,8,10]",
        "output": "7"
      },
      {
        "input": "arr = [3,2,1,4,5,6,0]",
        "output": "1"
      },
      {
        "input": "arr = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "arr = [1,3,2,5,4,7,6,9,8,10,12,11,14,13,16,15,18,17,20,19]",
        "output": "11"
      },
      {
        "input": "arr = [1,5,3,4,2,6,8,7,9,10,0,11]",
        "output": "2"
      },
      {
        "input": "arr = [10,1,20,2,30,3,40,4,50,5,60,6,70,7,80,8,90,9,100,10]",
        "output": "1"
      },
      {
        "input": "arr = [1,5,1,5,1,5,1,5,1,5,2,6,2,6,2,6,2,6,2,6,3,7,3,7,3,7,3,7,3,7]",
        "output": "3"
      },
      {
        "input": "arr = [5,4,3,2,1,0,9,8,7,6,5,4,3,2,1,0,9,8,7,6,5,4,3,2,1,0,9,8,7,6,5,4,3,2,1,0]",
        "output": "1"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,19,18,17,16,15,14,13,12,11,10]",
        "output": "11"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,19,2,4,6,8,10,12,14,16,18,20]",
        "output": "3"
      },
      {
        "input": "arr = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "arr = [1,2,0,3,4,5,6]",
        "output": "5"
      },
      {
        "input": "arr = [5,9,3,8,7,2,4,10,1,6]",
        "output": "1"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "12"
      },
      {
        "input": "arr = [1,2,3,0,4,5,6,7,8,9]",
        "output": "7"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0]",
        "output": "1"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "30"
      },
      {
        "input": "arr = [2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "arr = [1,3,2,4,5,7,6,8,10,9]",
        "output": "7"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "16"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3]",
        "output": "30"
      },
      {
        "input": "arr = [1,10,2,9,3,8,4,7,5,6]",
        "output": "2"
      },
      {
        "input": "arr = [5,3,2,4,1,6,7]",
        "output": "3"
      },
      {
        "input": "arr = [3,1,2,4,6,5,7]",
        "output": "4"
      },
      {
        "input": "arr = [1,2,0,3,4,5,6,7,8,9]",
        "output": "8"
      },
      {
        "input": "arr = [1,0,2,3,4,5,6,7,8,9]",
        "output": "9"
      },
      {
        "input": "arr = [4,5,6,0,1,2,3]",
        "output": "1"
      },
      {
        "input": "arr = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "3"
      },
      {
        "input": "arr = [1,3,5,7,9,2,4,6,8,10,12,14,16,18,20,11,13,15,17,19]",
        "output": "4"
      },
      {
        "input": "arr = [9,7,5,3,1,2,4,6,8,10]",
        "output": "2"
      },
      {
        "input": "arr = [2,1,1,1,3,4,4,4]",
        "output": "5"
      },
      {
        "input": "arr = [20,10,30,20,40,30,50,40,60,50,70,60,80,70,90,80,100,90,110,100]",
        "output": "10"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "arr = [1,2,3,4,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,6,7,8,9]",
        "output": "7"
      },
      {
        "input": "arr = [1,2,3,1,2,3,1,2,3,1]",
        "output": "2"
      },
      {
        "input": "arr = [0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9]",
        "output": "40"
      },
      {
        "input": "arr = [5,4,3,2,1,6,7,8,9,10,1,2,3,4,5,10,9,8,7,6]",
        "output": "1"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]",
        "output": "2"
      },
      {
        "input": "arr = [1,2,3,4,0,5]",
        "output": "2"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "100"
      },
      {
        "input": "arr = [1,5,3,4,2,6,8,7,9,10]",
        "output": "6"
      },
      {
        "input": "arr = [5,0,3,4,1,2]",
        "output": "1"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "15"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1,0]",
        "output": "1"
      },
      {
        "input": "arr = [1,0,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "arr = [2,3,1,4,5,3,7,6,8,9,10,8,12,11,14,13,16,15,18,17,20,19,22,21,24,23,26,25,28,27,30,29,32,31,34,33,36,35,38,37,40,39,42,41,44,43,46,45,48,47,50,49,52,51,54,53,56,55,58,57,60,59,62,61,64,63,66,65,68,67,70,69,72,71,74,73,76,75,78,77,80,79,82,81,84,83,86,85,88,87,90,89,92,91,94,93,96,95,98,97,100,99]",
        "output": "50"
      },
      {
        "input": "arr = [7,5,2,3,1,4,6,8]",
        "output": "2"
      },
      {
        "input": "arr = [3,2,1,6,5,4,9,8,7,10]",
        "output": "4"
      },
      {
        "input": "arr = [2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15]",
        "output": "8"
      },
      {
        "input": "arr = [1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,0,0,0]",
        "output": "1"
      },
      {
        "input": "arr = [5,2,6,3,7,4,8,1,9,0,11,12,13,14,15,16,17,18,19,20]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "3"
      },
      {
        "input": "arr = [5,5,4,4,3,3,2,2,1,1,0,0,1,1,2,2,3,3,4,4,5,5]",
        "output": "3"
      },
      {
        "input": "arr = [1,3,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "19"
      },
      {
        "input": "arr = [1,5,2,6,3,7,4,8,9,10,11,12,13,14,15]",
        "output": "10"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,20,19,18,17,16,15,14,13,12,11,21,22,23,24,25,26,27,28,29,30]",
        "output": "21"
      },
      {
        "input": "arr = [2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "2"
      },
      {
        "input": "arr = [5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "21"
      },
      {
        "input": "arr = [1,2,3,4,3,2,1,4,5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "15"
      },
      {
        "input": "arr = [4,1,2,3,5,6,7,8,9,0]",
        "output": "1"
      },
      {
        "input": "arr = [2,3,1,5,4,8,7,10,9,6]",
        "output": "3"
      },
      {
        "input": "arr = [1,2,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "2"
      },
      {
        "input": "arr = [0,2,1,4,3,6,5,8,7,10,9]",
        "output": "6"
      },
      {
        "input": "arr = [5,4,4,3,3,3,2,2,2,1,1,1,0,0,0,9,8,8,7,7,7,6,6,6,5,5,5,4,4,4]",
        "output": "1"
      },
      {
        "input": "arr = [3,2,1,4,6,5,9,8,7,10]",
        "output": "5"
      },
      {
        "input": "arr = [1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "15"
      },
      {
        "input": "arr = [3,2,1,4,5,6,7,8,9,10]",
        "output": "8"
      },
      {
        "input": "arr = [9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7]",
        "output": "1"
      },
      {
        "input": "arr = [1,0,2,3,5,4,6,7,8,9]",
        "output": "8"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1]",
        "output": "2"
      },
      {
        "input": "arr = [5,1,4,2,3,8,6,10,7,9]",
        "output": "2"
      },
      {
        "input": "arr = [1,3,2,2,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "17"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,19,21,23,25,2,4,6,8,10,12,14,16,18,20,22,24]",
        "output": "2"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "3"
      },
      {
        "input": "arr = [1,1,1,2,2,2,3,3,3,0]",
        "output": "1"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "12"
      },
      {
        "input": "arr = [1,10,2,9,3,8,4,7,5,6,11,20,12,19,13,18,14,17,15,16]",
        "output": "4"
      },
      {
        "input": "arr = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,0,0]",
        "output": "1"
      },
      {
        "input": "arr = [4,3,2,1,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "12"
      },
      {
        "input": "arr = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,20]",
        "output": "11"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "20"
      },
      {
        "input": "arr = [1,3,2,4,5,6,7,8,9,10,2,4,3,5,6,7,8,9,10,11]",
        "output": "4"
      },
      {
        "input": "arr = [9,8,7,6,5,4,3,2,1,0,11,10,9,8,7,6]",
        "output": "1"
      },
      {
        "input": "arr = [1,0,3,2,5,4,7,6,9,8]",
        "output": "5"
      },
      {
        "input": "arr = [1,1,2,2,3,3,4,4,5,5]",
        "output": "10"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
        "output": "1"
      },
      {
        "input": "arr = [1,5,3,4,2,6,8,7,9,10,11,15,13,14,12,16,18,17,19,20]",
        "output": "12"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "arr = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "20"
      },
      {
        "input": "arr = [1,2,3,4,5,0,6]",
        "output": "2"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "arr = [4,3,2,1,5,6,7,8,9,10]",
        "output": "7"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "3"
      },
      {
        "input": "arr = [2,2,2,2,2,2,2,2,2,2]",
        "output": "10"
      },
      {
        "input": "arr = [9,7,5,3,1,8,6,4,2,10]",
        "output": "2"
      },
      {
        "input": "arr = [5,3,2,4,1,6,8,7,9,11,10,13,15,14,16,17]",
        "output": "9"
      },
      {
        "input": "arr = [1,3,2,4,7,6,5,8,9,0]",
        "output": "1"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "arr = [8,7,6,5,4,3,2,1,0,16,15,14,13,12,11,10,9]",
        "output": "2"
      },
      {
        "input": "arr = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9]",
        "output": "27"
      },
      {
        "input": "arr = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]",
        "output": "3"
      },
      {
        "input": "arr = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5]",
        "output": "15"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "arr = [9,8,7,6,5,4,3,2,1,0,11,12,13,14,15,16,17,18,19,20]",
        "output": "11"
      },
      {
        "input": "arr = [1,2,3,4,0,5,6,7,8,9]",
        "output": "6"
      }
    ]
  },
  {
    "id": 774,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "problemDescription": "You are given an integer array stations that represents the positions of the gas stations on the x-axis. You are also given an integer k.\nYou should add k new gas stations. You can add the stations anywhere on the x-axis, and not necessarily on an integer position.\nLet penalty() be the maximum distance between adjacent gas stations after adding the k new stations.\nReturn the smallest possible value of penalty(). Answers within 10-6 of the actual answer will be accepted.\n\u00a0\nExample 1:\nInput: stations = [1,2,3,4,5,6,7,8,9,10], k = 9\nOutput: 0.50000\nExample 2:\nInput: stations = [23,24,36,39,46,56,57,65,84,98], k = 1\nOutput: 14.00000\n\n\u00a0\nConstraints:\n\n10 <= stations.length <= 2000\n0 <= stations[i] <= 108\nstations is sorted in a strictly increasing order.\n1 <= k <= 106\n\n",
    "starterCode": "class Solution:\n    def minmaxGasDist(self, stations: List[int], k: int) -> float:\n        ",
    "testCases": [
      {
        "input": "stations = [23,24,36,39,46,56,57,65,84,98], k = 1",
        "output": "13.999999737279722"
      },
      {
        "input": "stations = [1,5,9,14,20,25,30,35,40], k = 5",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1,2,3,4,5,6,7,8,9,10], k = 9",
        "output": "0.4999996860988176"
      },
      {
        "input": "stations = [10,20,30,40,50], k = 2",
        "output": "9.999999406318238"
      },
      {
        "input": "stations = [1,100000000], k = 1000000",
        "output": "99.99989885045579"
      },
      {
        "input": "stations = [5,10,15,20,25,30], k = 3",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [5,15,25,35,45,55], k = 3",
        "output": "9.999999406318238"
      },
      {
        "input": "stations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 20",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 50000000, 100000000], k = 500000",
        "output": "199.99919942392808"
      },
      {
        "input": "stations = [10, 50, 90, 130, 170, 210, 250, 290, 330, 370, 410, 450, 490, 530, 570, 610, 650, 690, 730, 770, 810, 850, 890, 930, 970, 1000], k = 50",
        "output": "13.333333015452808"
      },
      {
        "input": "stations = [1, 10000000], k = 500000",
        "output": "19.999957601157803"
      },
      {
        "input": "stations = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 10",
        "output": "1.9999994549380062"
      },
      {
        "input": "stations = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], k = 50",
        "output": "292.5714284174319"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300], k = 100",
        "output": "2.4999998515795596"
      },
      {
        "input": "stations = [5, 25, 50, 75, 100], k = 10",
        "output": "8.33333331229369"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 20",
        "output": "3.3333328985918342"
      },
      {
        "input": "stations = [1, 10, 25, 40, 55, 70, 85, 100, 115, 130, 145, 160, 175, 190, 200], k = 20",
        "output": "7.499999554738679"
      },
      {
        "input": "stations = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], k = 50",
        "output": "0.9999993721976352"
      },
      {
        "input": "stations = [1, 2, 5, 10, 15, 25, 50, 100], k = 10",
        "output": "7.142856617292637"
      },
      {
        "input": "stations = [1, 100000000], k = 100000",
        "output": "999.9899894808095"
      },
      {
        "input": "stations = [1, 23, 36, 39, 46, 56, 57, 65, 84, 98], k = 5",
        "output": "9.999999406318238"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 30",
        "output": "3.3333328985918342"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 25",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90], k = 25",
        "output": "3.3333328985918342"
      },
      {
        "input": "stations = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300], k = 100",
        "output": "2.6666661767649202"
      },
      {
        "input": "stations = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], k = 20",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 5, 10, 25, 50, 100, 200, 500, 1000, 5000, 10000], k = 20",
        "output": "444.4444442697204"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 50",
        "output": "2.4999998515795596"
      },
      {
        "input": "stations = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], k = 15",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 10",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000], k = 100",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], k = 100",
        "output": "0.6666660112841782"
      },
      {
        "input": "stations = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625], k = 150",
        "output": "3.8333332952333876"
      },
      {
        "input": "stations = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000], k = 1000",
        "output": "99778.27050988708"
      },
      {
        "input": "stations = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000], k = 100",
        "output": "978260.8695651619"
      },
      {
        "input": "stations = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 30",
        "output": "0.4999996860988176"
      },
      {
        "input": "stations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], k = 50",
        "output": "0.4999996860988176"
      },
      {
        "input": "stations = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205], k = 50",
        "output": "3.3333328985918342"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250], k = 50",
        "output": "3.3333328985918342"
      },
      {
        "input": "stations = [1, 100000000], k = 999999",
        "output": "99.9999983264388"
      },
      {
        "input": "stations = [1,10,20,30,40,50,60,70,80,90,100], k = 10",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 15",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 50",
        "output": "1.6666660940245492"
      },
      {
        "input": "stations = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], k = 50",
        "output": "0.33333265037072124"
      },
      {
        "input": "stations = [1, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400], k = 500",
        "output": "0.7692307235629414"
      },
      {
        "input": "stations = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300], k = 200",
        "output": "1.249999570518412"
      },
      {
        "input": "stations = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], k = 20",
        "output": "38.833332638432694"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 20",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [5, 25, 50, 75, 100, 125, 150, 175, 200], k = 10",
        "output": "12.499999968440534"
      },
      {
        "input": "stations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 30",
        "output": "0.4999996860988176"
      },
      {
        "input": "stations = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], k = 100",
        "output": "4.923076346585731"
      },
      {
        "input": "stations = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575], k = 150",
        "output": "6721.641025109193"
      },
      {
        "input": "stations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 30",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 150, 200, 250, 300, 350, 400, 450, 500], k = 150",
        "output": "3.1249996368387656"
      },
      {
        "input": "stations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 100",
        "output": "0.9090904029562807"
      },
      {
        "input": "stations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 15",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 30",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 2, 5, 10, 20, 30, 50, 60, 70, 80, 100], k = 20",
        "output": "3.9999996204187482"
      },
      {
        "input": "stations = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], k = 50",
        "output": "3.3333328985918342"
      },
      {
        "input": "stations = [5, 20, 35, 50, 65, 80, 95], k = 15",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 5, 10, 20, 30, 50, 70, 90, 100], k = 20",
        "output": "3.9999996204187482"
      },
      {
        "input": "stations = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400], k = 100",
        "output": "3.3333328985918342"
      },
      {
        "input": "stations = [1, 10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100], k = 12",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 1000",
        "output": "0.990098669717554"
      },
      {
        "input": "stations = [1, 100000000], k = 1000",
        "output": "99900.09890046282"
      },
      {
        "input": "stations = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49], k = 50",
        "output": "0.6666660112841782"
      },
      {
        "input": "stations = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1596, 1653, 1711, 1770, 1830, 1891, 1953, 2016], k = 50",
        "output": "25.499999622979885"
      },
      {
        "input": "stations = [5,15,25,35,45,55,65,75,85,95], k = 15",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300], k = 100",
        "output": "2.4999998515795596"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500], k = 25",
        "output": "14.285713945128009"
      },
      {
        "input": "stations = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], k = 20",
        "output": "2.4999998515795596"
      },
      {
        "input": "stations = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576], k = 200",
        "output": "5090.1747570719635"
      },
      {
        "input": "stations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 500",
        "output": "1.9607838908086705"
      },
      {
        "input": "stations = [10, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], k = 500",
        "output": "19.607842460800384"
      },
      {
        "input": "stations = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195], k = 100",
        "output": "1.6666660940245492"
      },
      {
        "input": "stations = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], k = 50",
        "output": "0.4999996860988176"
      },
      {
        "input": "stations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10",
        "output": "0.9999993721976352"
      },
      {
        "input": "stations = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], k = 30",
        "output": "17.799999341150397"
      },
      {
        "input": "stations = [1, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000], k = 50",
        "output": "16.66666662458738"
      },
      {
        "input": "stations = [1, 10, 50, 100, 200, 500, 1000, 2000, 5000, 10000], k = 500",
        "output": "19.86754938343438"
      },
      {
        "input": "stations = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195], k = 25",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], k = 1000",
        "output": "997782.7050995813"
      },
      {
        "input": "stations = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], k = 15",
        "output": "1.9999994549380062"
      },
      {
        "input": "stations = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000], k = 100000",
        "output": "999.9777780933528"
      },
      {
        "input": "stations = [1, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 5",
        "output": "99.99999974752427"
      },
      {
        "input": "stations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300], k = 250",
        "output": "1.111110492502121"
      },
      {
        "input": "stations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200], k = 100",
        "output": "1.7857139766874752"
      },
      {
        "input": "stations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500], k = 50",
        "output": "9.090909003361958"
      },
      {
        "input": "stations = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], k = 10",
        "output": "4.999999703159119"
      },
      {
        "input": "stations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 1000",
        "output": "0.990098669717554"
      },
      {
        "input": "stations = [1, 10000000, 20000000, 30000000, 40000000, 50000000, 60000000, 70000000, 80000000, 90000000, 100000000], k = 1000000",
        "output": "99.99899930335232"
      },
      {
        "input": "stations = [1, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 320, 340, 360, 380], k = 200",
        "output": "1.8181815164552972"
      },
      {
        "input": "stations = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 10",
        "output": "0.9999993721976352"
      },
      {
        "input": "stations = [5, 10, 20, 35, 55, 80, 110, 145, 185, 230, 280, 335, 400, 470, 550, 640, 740, 850, 970, 1100], k = 50",
        "output": "18.333332718611928"
      }
    ]
  },
  {
    "id": 3013,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed array of integers nums of length n, and two positive integers k and dist.\nThe cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.\nYou need to divide nums into k disjoint contiguous subarrays, such that the difference between the starting index of the second subarray and the starting index of the kth subarray should be less than or equal to dist. In other words, if you divide nums into the subarrays nums[0..(i1 - 1)], nums[i1..(i2 - 1)], ..., nums[ik-1..(n - 1)], then ik-1 - i1 <= dist.\nReturn the minimum possible sum of the cost of these subarrays.\n\u00a0\nExample 1:\n\nInput: nums = [1,3,2,6,4,2], k = 3, dist = 3\nOutput: 5\nExplanation: The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because ik-1 - i1 is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.\n\nExample 2:\n\nInput: nums = [10,1,2,2,2,1], k = 4, dist = 3\nOutput: 15\nExplanation: The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because ik-1 - i1 is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.\nThe division [10], [1], [2,2,2], and [1] is not valid, because the difference between ik-1 and i1 is 5 - 1 = 4, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.\n\nExample 3:\n\nInput: nums = [10,8,18,9], k = 3, dist = 1\nOutput: 36\nExplanation: The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because ik-1 - i1 is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.\nThe division [10], [8,18], and [9] is not valid, because the difference between ik-1 and i1 is 3 - 1 = 2, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.\n\n\u00a0\nConstraints:\n\n3 <= n <= 105\n1 <= nums[i] <= 109\n3 <= k <= n\nk - 2 <= dist <= n - 2\n\n",
    "starterCode": "class Solution:\n    def minimumCost(self, nums: List[int], k: int, dist: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [7,8,9,10,5,6], k = 3, dist = 4",
        "output": "18"
      },
      {
        "input": "nums = [5,4,3,2,1], k = 2, dist = 2",
        "output": "6"
      },
      {
        "input": "nums = [1,3,2,6,4,2], k = 3, dist = 3",
        "output": "5"
      },
      {
        "input": "nums = [10,8,18,9], k = 3, dist = 1",
        "output": "36"
      },
      {
        "input": "nums = [5,1,4,3,2], k = 3, dist = 2",
        "output": "9"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 4, dist = 4",
        "output": "15"
      },
      {
        "input": "nums = [7,8,9,10,11,12], k = 3, dist = 4",
        "output": "24"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5, dist = 4",
        "output": "15"
      },
      {
        "input": "nums = [10,1,2,2,2,1], k = 4, dist = 3",
        "output": "15"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1,6,9,3,9,9,3,7,5,1,0], k = 15, dist = 20",
        "output": "45"
      },
      {
        "input": "nums = [5, 1, 4, 2, 8, 7, 3, 6, 9, 10], k = 4, dist = 5",
        "output": "11"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 5, dist = 4",
        "output": "50"
      },
      {
        "input": "nums = [100, 200, 10, 20, 30, 40, 50, 5, 15, 25, 35, 45], k = 5, dist = 6",
        "output": "150"
      },
      {
        "input": "nums = [3, 2, 1, 6, 5, 4, 9, 8, 7, 12, 11, 10, 15, 14, 13, 18, 17, 16, 21, 20, 19, 24, 23, 22, 27, 26, 25], k = 15, dist = 10",
        "output": "Error: pop index out of range"
      },
      {
        "input": "nums = [100, 101, 102, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88], k = 7, dist = 9",
        "output": "643"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 5, dist = 4",
        "output": "5"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5, dist = 5",
        "output": "5"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6], k = 3, dist = 5",
        "output": "6"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 1, 2, 3, 4, 5], k = 3, dist = 9",
        "output": "103"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k = 8, dist = 8",
        "output": "36"
      },
      {
        "input": "nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80], k = 10, dist = 10",
        "output": "855"
      },
      {
        "input": "nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 1, 2, 3, 4, 5], k = 6, dist = 9",
        "output": "1000000015"
      },
      {
        "input": "nums = [31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], k = 7, dist = 6",
        "output": "259"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 10, dist = 10",
        "output": "65"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 15, dist = 15",
        "output": "120"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 8, dist = 6",
        "output": "36"
      },
      {
        "input": "nums = [5, 1, 9, 3, 7, 2, 8, 6, 4, 10, 11, 12], k = 5, dist = 6",
        "output": "17"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 7, dist = 7",
        "output": "28"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 10, dist = 10",
        "output": "65"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 8, dist = 6",
        "output": "360"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 5, dist = 3",
        "output": "19"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 100], k = 10, dist = 15",
        "output": "145"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 1, 9, 10], k = 4, dist = 5",
        "output": "12"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], k = 15, dist = 10",
        "output": "Error: pop index out of range"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120], k = 4, dist = 3",
        "output": "100"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 10, dist = 15",
        "output": "550"
      },
      {
        "input": "nums = [1, 9, 2, 8, 3, 7, 4, 6, 5, 10, 11, 12, 13, 14, 15], k = 7, dist = 8",
        "output": "28"
      },
      {
        "input": "nums = [1, 3, 2, 6, 4, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], k = 6, dist = 5",
        "output": "17"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 10, dist = 12",
        "output": "550"
      },
      {
        "input": "nums = [5,3,8,1,4,9,2,6,7], k = 4, dist = 5",
        "output": "11"
      },
      {
        "input": "nums = [1, 1000000000, 2, 1000000000, 3, 1000000000, 4, 1000000000, 5], k = 5, dist = 4",
        "output": "1000000010"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23], k = 6, dist = 7",
        "output": "36"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 1, 2, 3, 4, 5], k = 6, dist = 9",
        "output": "115"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10, dist = 10",
        "output": "55"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 10, dist = 5",
        "output": "Error: pop index out of range"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 7, dist = 10",
        "output": "280"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9], k = 5, dist = 5",
        "output": "11"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10, dist = 10",
        "output": "55"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 6, dist = 7",
        "output": "2100"
      },
      {
        "input": "nums = [1, 9, 2, 8, 3, 7, 4, 6, 5, 10], k = 5, dist = 4",
        "output": "17"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5, dist = 10",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 8, dist = 7",
        "output": "36"
      },
      {
        "input": "nums = [1,3,5,2,8,7,4,6,9,10], k = 4, dist = 5",
        "output": "10"
      },
      {
        "input": "nums = [1000000000,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10, dist = 10",
        "output": "1000000045"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 20, dist = 10",
        "output": "Error: pop index out of range"
      },
      {
        "input": "nums = [100, 200, 150, 10, 50, 300, 400, 250, 350, 100, 500], k = 6, dist = 8",
        "output": "610"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16], k = 8, dist = 7",
        "output": "38"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10, dist = 10",
        "output": "10"
      },
      {
        "input": "nums = [1000000000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10, dist = 10",
        "output": "1000000045"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 15, dist = 15",
        "output": "15"
      },
      {
        "input": "nums = [1,100,2,99,3,98,4,97,5,96,6,95,7,94,8,93,9,92,10,91], k = 5, dist = 10",
        "output": "15"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 5, dist = 5",
        "output": "25"
      },
      {
        "input": "nums = [100,200,10,20,30,40,50,60,70,80,90], k = 6, dist = 6",
        "output": "250"
      },
      {
        "input": "nums = [15, 3, 8, 7, 5, 2, 9, 1, 10, 4, 6, 11, 13, 12], k = 5, dist = 5",
        "output": "27"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 20, dist = 20",
        "output": "100"
      },
      {
        "input": "nums = [3,1,2,1,3,1,2,3,1,2,3,1,2,3,1,2], k = 7, dist = 6",
        "output": "13"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6], k = 10, dist = 10",
        "output": "35"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20], k = 6, dist = 5",
        "output": "24"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5], k = 5, dist = 7",
        "output": "15"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], k = 8, dist = 10",
        "output": "72"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 7, dist = 7",
        "output": "121"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 10, dist = 9",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5, dist = 5",
        "output": "11"
      },
      {
        "input": "nums = [5, 1, 9, 2, 8, 3, 7, 4, 6, 10, 11, 12, 13, 14, 15], k = 7, dist = 8",
        "output": "28"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75], k = 6, dist = 7",
        "output": "105"
      },
      {
        "input": "nums = [3, 1, 2, 1, 3, 2, 1, 3, 2, 1], k = 4, dist = 4",
        "output": "7"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 10, dist = 10",
        "output": "550"
      },
      {
        "input": "nums = [100, 1, 50, 2, 99, 3, 49, 4, 98, 5], k = 5, dist = 5",
        "output": "155"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], k = 5, dist = 3",
        "output": "19"
      },
      {
        "input": "nums = [5, 1, 3, 8, 12, 7, 9, 2, 6, 4], k = 4, dist = 5",
        "output": "16"
      },
      {
        "input": "nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3], k = 5, dist = 5",
        "output": "7"
      },
      {
        "input": "nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 10, dist = 10",
        "output": "70"
      },
      {
        "input": "nums = [9, 3, 7, 2, 8, 6, 5, 1, 4, 10], k = 4, dist = 5",
        "output": "16"
      },
      {
        "input": "nums = [10, 20, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 6, dist = 5",
        "output": "25"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 7, dist = 10",
        "output": "49"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 10, dist = 15",
        "output": "55"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 5, dist = 5",
        "output": "15"
      },
      {
        "input": "nums = [15, 20, 25, 10, 30, 35, 5, 40, 45, 4, 50], k = 6, dist = 7",
        "output": "89"
      },
      {
        "input": "nums = [200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10], k = 10, dist = 10",
        "output": "650"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10, dist = 20",
        "output": "34"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 15, dist = 15",
        "output": "135"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1], k = 5, dist = 15",
        "output": "16"
      },
      {
        "input": "nums = [5, 8, 3, 9, 2, 7, 4, 6, 1, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 7, dist = 15",
        "output": "21"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], k = 6, dist = 7",
        "output": "210"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3], k = 7, dist = 10",
        "output": "19"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], k = 5, dist = 3",
        "output": "200"
      },
      {
        "input": "nums = [9, 3, 1, 5, 2, 8, 6, 7, 4, 10], k = 5, dist = 5",
        "output": "20"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], k = 5, dist = 12",
        "output": "30"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 15, dist = 25",
        "output": "76"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 5, dist = 5",
        "output": "25"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 6, dist = 8",
        "output": "30"
      },
      {
        "input": "nums = [5, 1, 4, 2, 3, 6, 8, 7, 9, 10], k = 4, dist = 6",
        "output": "11"
      },
      {
        "input": "nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 5, dist = 8",
        "output": "101"
      },
      {
        "input": "nums = [5,3,8,12,4,6,7,10,2,9], k = 4, dist = 6",
        "output": "17"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], k = 9, dist = 10",
        "output": "25"
      },
      {
        "input": "nums = [200, 100, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000], k = 5, dist = 10",
        "output": "1500"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5, dist = 4",
        "output": "15"
      },
      {
        "input": "nums = [1000000000, 1, 1000000000, 1, 1000000000], k = 3, dist = 3",
        "output": "1000000002"
      },
      {
        "input": "nums = [7,2,5,10,8], k = 2, dist = 2",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [5,1,4,2,8,7,3], k = 4, dist = 5",
        "output": "11"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 6, dist = 7",
        "output": "21"
      },
      {
        "input": "nums = [7,8,9,10,5,6,2,3,4,1], k = 5, dist = 5",
        "output": "17"
      },
      {
        "input": "nums = [5,4,3,2,1], k = 3, dist = 4",
        "output": "8"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 3, dist = 5",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5, dist = 5",
        "output": "15"
      },
      {
        "input": "nums = [5, 3, 8, 1, 4, 7, 9, 2], k = 4, dist = 4",
        "output": "12"
      },
      {
        "input": "nums = [5,1,3,7,9,2,6,8,4], k = 4, dist = 5",
        "output": "11"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 4, dist = 2",
        "output": "20"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 5, dist = 5",
        "output": "19"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 3, dist = 7",
        "output": "6"
      },
      {
        "input": "nums = [5,1,4,2,3,6,7,8,9], k = 4, dist = 5",
        "output": "11"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 3, dist = 2",
        "output": "15"
      },
      {
        "input": "nums = [1,9,2,8,3,7,4,6,5,10], k = 4, dist = 5",
        "output": "10"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9], k = 6, dist = 5",
        "output": "16"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], k = 10, dist = 5",
        "output": "Error: pop index out of range"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 3, dist = 4",
        "output": "12"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 3, dist = 6",
        "output": "12"
      },
      {
        "input": "nums = [50,40,30,20,10,1,2,3,4,5], k = 4, dist = 5",
        "output": "56"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5, dist = 5",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 6, dist = 10",
        "output": "21"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 3, dist = 7",
        "output": "3"
      },
      {
        "input": "nums = [5,2,3,1,4,6,7,8,9], k = 5, dist = 4",
        "output": "15"
      },
      {
        "input": "nums = [100,200,300,400,500], k = 3, dist = 2",
        "output": "600"
      },
      {
        "input": "nums = [7,3,5,10,6,9], k = 4, dist = 5",
        "output": "21"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1], k = 4, dist = 3",
        "output": "18"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3], k = 5, dist = 5",
        "output": "15"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 6, dist = 7",
        "output": "210"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 3, dist = 5",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 3, dist = 2",
        "output": "3"
      },
      {
        "input": "nums = [5,1,3,2,4], k = 2, dist = 2",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5], k = 5, dist = 5",
        "output": "11"
      },
      {
        "input": "nums = [7,9,3,1,5,6,2], k = 5, dist = 5",
        "output": "18"
      },
      {
        "input": "nums = [5,4,3,2,1,6,7,8,9], k = 3, dist = 4",
        "output": "8"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], k = 5, dist = 4",
        "output": "19"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3], k = 5, dist = 5",
        "output": "15"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 4, dist = 6",
        "output": "100"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000], k = 3, dist = 4",
        "output": "111"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], k = 6, dist = 5",
        "output": "2100"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1], k = 3, dist = 2",
        "output": "3"
      },
      {
        "input": "nums = [7,6,5,4,3,2,1], k = 3, dist = 4",
        "output": "10"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3], k = 3, dist = 5",
        "output": "9"
      },
      {
        "input": "nums = [5, 1, 4, 3, 2], k = 3, dist = 2",
        "output": "9"
      },
      {
        "input": "nums = [10, 8, 18, 9], k = 3, dist = 1",
        "output": "36"
      },
      {
        "input": "nums = [7,8,9,10,2,1,3,4,5,6], k = 4, dist = 4",
        "output": "13"
      },
      {
        "input": "nums = [5,1,4,2,8,3,7,6], k = 4, dist = 4",
        "output": "11"
      },
      {
        "input": "nums = [5,1,4,3,2,6,7], k = 3, dist = 4",
        "output": "8"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3], k = 3, dist = 7",
        "output": "9"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], k = 5, dist = 6",
        "output": "1500"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900], k = 4, dist = 7",
        "output": "1000"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5, dist = 6",
        "output": "15"
      },
      {
        "input": "nums = [7,8,9,10,2,1,3,4,5,6], k = 4, dist = 5",
        "output": "13"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 5, dist = 10",
        "output": "15"
      },
      {
        "input": "nums = [1, 3, 2, 6, 4, 2], k = 3, dist = 3",
        "output": "5"
      },
      {
        "input": "nums = [3,1,5,2,4,6,8,7], k = 3, dist = 4",
        "output": "6"
      },
      {
        "input": "nums = [7, 8, 9, 10, 11, 12], k = 4, dist = 5",
        "output": "34"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5, dist = 10",
        "output": "5"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3], k = 3, dist = 4",
        "output": "9"
      },
      {
        "input": "nums = [1,100,2,99,3,98,4,97,5,96], k = 5, dist = 5",
        "output": "107"
      },
      {
        "input": "nums = [7,6,5,4,3,2,1,2,3,4,5,6,7], k = 5, dist = 5",
        "output": "15"
      },
      {
        "input": "nums = [7, 1, 5, 3, 6, 4, 8, 2], k = 5, dist = 5",
        "output": "20"
      },
      {
        "input": "nums = [9,7,5,3,1,2,4,6,8,10], k = 5, dist = 5",
        "output": "19"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 5, dist = 4",
        "output": "25"
      },
      {
        "input": "nums = [5,4,3,2,1], k = 3, dist = 2",
        "output": "8"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], k = 3, dist = 7",
        "output": "600"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 4, dist = 6",
        "output": "10"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900], k = 4, dist = 4",
        "output": "1000"
      },
      {
        "input": "nums = [5,1,3,8,6,7,4,2], k = 4, dist = 4",
        "output": "15"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 5, dist = 6",
        "output": "150"
      },
      {
        "input": "nums = [7,8,9,1,2,3,4,5,6], k = 5, dist = 5",
        "output": "17"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], k = 3, dist = 8",
        "output": "600"
      },
      {
        "input": "nums = [7,8,9,10,2,1], k = 4, dist = 4",
        "output": "18"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000], k = 3, dist = 2",
        "output": "3000000000"
      },
      {
        "input": "nums = [5, 1, 4, 2, 3], k = 3, dist = 4",
        "output": "8"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9], k = 4, dist = 4",
        "output": "9"
      },
      {
        "input": "nums = [5,1,3,7,9,2,6,4,8], k = 4, dist = 5",
        "output": "11"
      },
      {
        "input": "nums = [9,3,7,6,2,5,8,4], k = 5, dist = 4",
        "output": "25"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 4, dist = 4",
        "output": "10"
      },
      {
        "input": "nums = [5,1,3,7,9,2,6,8,4,10], k = 5, dist = 4",
        "output": "18"
      },
      {
        "input": "nums = [10, 1, 2, 2, 2, 1], k = 4, dist = 3",
        "output": "15"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 5, dist = 5",
        "output": "25"
      },
      {
        "input": "nums = [3,2,1,4,5,6,7,8,9,10], k = 4, dist = 5",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 4, dist = 5",
        "output": "10"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600], k = 3, dist = 2",
        "output": "600"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63], k = 4, dist = 6",
        "output": "70"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 4, dist = 5",
        "output": "15"
      },
      {
        "input": "nums = [5,1,4,2,3], k = 3, dist = 4",
        "output": "8"
      },
      {
        "input": "nums = [5,1,4,2,8,3], k = 4, dist = 4",
        "output": "11"
      },
      {
        "input": "nums = [5,1,4,2,8,3], k = 3, dist = 4",
        "output": "8"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9], k = 3, dist = 6",
        "output": "6"
      },
      {
        "input": "nums = [7,6,5,4,3,2,1,1,2,3,4,5,6,7], k = 7, dist = 6",
        "output": "19"
      }
    ]
  },
  {
    "id": 224,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Recursion",
      "Math",
      "String"
    ],
    "problemDescription": "Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n\u00a0\nExample 1:\n\nInput: s = \"1 + 1\"\nOutput: 2\n\nExample 2:\n\nInput: s = \" 2-1 + 2 \"\nOutput: 3\n\nExample 3:\n\nInput: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 3 * 105\ns consists of digits, '+', '-', '(', ')', and ' '.\ns represents a valid expression.\n'+' is not used as a unary operation (i.e., \"+1\" and \"+(2 + 3)\" is invalid).\n'-' could be used as a unary operation (i.e., \"-1\" and \"-(2 + 3)\" is valid).\nThere will be no two consecutive operators in the input.\nEvery number and running calculation will fit in a signed 32-bit integer.\n\n",
    "starterCode": "class Solution:\n    def calculate(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"30 - (5 + (10 - 15) + 20)\"",
        "output": "10"
      },
      {
        "input": "s = \"2147483647\"",
        "output": "2147483647"
      },
      {
        "input": "s = \"-2147483647\"",
        "output": "-2147483647"
      },
      {
        "input": "s = \"- (3 + (2 - 1))\"",
        "output": "-4"
      },
      {
        "input": "s = \"1 + (2 + 3) + (4 + (5 + 6))\"",
        "output": "21"
      },
      {
        "input": "s = \"5 - (3 - (1 + 2))\"",
        "output": "5"
      },
      {
        "input": "s = \"(1-2+(3-(4-5)))\"",
        "output": "3"
      },
      {
        "input": "s = \" 2-1 + 2 \"",
        "output": "3"
      },
      {
        "input": "s = \"(1+(4+5+2)-3)+(6+8)\"",
        "output": "23"
      },
      {
        "input": "s = \"- (3 + (2 - 1) )\"",
        "output": "-4"
      },
      {
        "input": "s = \"100 * 2 + 12\"",
        "output": "114"
      },
      {
        "input": "s = \"(1+(2+(3+(4+(5+(6+(7+(8+(9+(10)))))))))\"",
        "output": "55"
      },
      {
        "input": "s = \"((100 - 50) + (25 - 10))\"",
        "output": "65"
      },
      {
        "input": "s = \"10 + 2 * 6\"",
        "output": "18"
      },
      {
        "input": "s = \"10 + 20 - 5\"",
        "output": "25"
      },
      {
        "input": "s = \"- (5 - (- (1 + 1)))\"",
        "output": "-7"
      },
      {
        "input": "s = \"-1 + (2 - (-3 + 4))\"",
        "output": "0"
      },
      {
        "input": "s = \"10 + (2 - 6)\"",
        "output": "6"
      },
      {
        "input": "s = \"-1 + (3-5)\"",
        "output": "-3"
      },
      {
        "input": "s = \"10 - (-5 + 3)\"",
        "output": "12"
      },
      {
        "input": "s = \"(123 + (456 - 789))\"",
        "output": "-210"
      },
      {
        "input": "s = \"(10 - (5 + 3))\"",
        "output": "2"
      },
      {
        "input": "s = \"(1 + (2 + (3 + (4 + 5))))\"",
        "output": "15"
      },
      {
        "input": "s = \"10 - (2 - (3 - 4))\"",
        "output": "7"
      },
      {
        "input": "s = \"100 * ( 2 + 12 )\"",
        "output": "114"
      },
      {
        "input": "s = \"10 + (2 - 3)\"",
        "output": "9"
      },
      {
        "input": "s = \"(5 + 15) - (10 + 20)\"",
        "output": "-10"
      },
      {
        "input": "s = \"(123 + 456) - 789\"",
        "output": "-210"
      },
      {
        "input": "s = \"1 - (2 - (3 - (4 - (5 - (6 - (7 - (8 - 9)))))))\"",
        "output": "5"
      },
      {
        "input": "s = \"- (5 + 10 + (15 - 20))\"",
        "output": "-10"
      },
      {
        "input": "s = \"1 - (-1)\"",
        "output": "2"
      },
      {
        "input": "s = \"((1 + 3) + (5 + 7))\"",
        "output": "16"
      },
      {
        "input": "s = \"1 + 1\"",
        "output": "2"
      },
      {
        "input": "s = \"(1 + ((2 + 3) * (4 / 2)))\"",
        "output": "12"
      },
      {
        "input": "s = \"(100 - (50 + (25 - (12 + (6 - (3 + (1 - 1)))))))\"",
        "output": "40"
      },
      {
        "input": "s = \"100 / ((5 + (5 - (5 + (5 - 5)))) * 2)\"",
        "output": "103"
      },
      {
        "input": "s = \"10 - (5 - (3 - (2 - (1 - 0))))\"",
        "output": "7"
      },
      {
        "input": "s = \"-1 + (2 - (3 + (4 - (5 + (6 - (7 + (8 - 9)))))))\"",
        "output": "-1"
      },
      {
        "input": "s = \"5 + (8 * 3 + 9 + (3 * 5))\"",
        "output": "33"
      },
      {
        "input": "s = \"((10 + 20) * (30 / 5)) - (40 + (50 - 60))\"",
        "output": "35"
      },
      {
        "input": "s = \"(1 + 2) * (3 + 4) * (5 + 6) * (7 + 8)\"",
        "output": "36"
      },
      {
        "input": "s = \"1 + (2 + (3 + (4 + (5 + (6 + (7 + (8 + (9 + 10))))))))\"",
        "output": "55"
      },
      {
        "input": "s = \"100 - (50 + ((25 * 2) - (10 + 5)))\"",
        "output": "38"
      },
      {
        "input": "s = \"(3 + (2 * 2) - (1 + 3) + (4 - (5 + 6)))\"",
        "output": "-4"
      },
      {
        "input": "s = \"(1 - (2 - (3 - (4 - (5 - (6 - (7 - 8)))))))\"",
        "output": "-4"
      },
      {
        "input": "s = \"(1 + (2 - (3 + (4 - (5 + 6)))))\"",
        "output": "7"
      },
      {
        "input": "s = \"(((((1 + 2) + 3) + 4) + 5) + 6)\"",
        "output": "21"
      },
      {
        "input": "s = \"10 + 20 * (30 + 40 / 5) + 5 * (6 + 7 * (8 + 9))\"",
        "output": "140"
      },
      {
        "input": "s = \"(10 + 20) - (30 - 40) + (50 * 60) / (70 - 80)\"",
        "output": "140"
      },
      {
        "input": "s = \"123 + (456 - 789) * (10 - 5)\"",
        "output": "-215"
      },
      {
        "input": "s = \"3 * (5 + 2 * (2 + 3)) + 4 * (2 + (3 - 1))\"",
        "output": "23"
      },
      {
        "input": "s = \"((5 - 3) * (6 + 2) - (4 + 1) * (3 - 8)) + 10\"",
        "output": "-6"
      },
      {
        "input": "s = \"((1 + 2) * (3 + (4 * (5 + 6))))\"",
        "output": "21"
      },
      {
        "input": "s = \"( 10 - ( 20 - ( 30 - ( 40 - ( 50 - 60 ) ) ) ) )\"",
        "output": "-30"
      },
      {
        "input": "s = \"(1 + (2 + (3 + (4 + (5 + 6)))))\"",
        "output": "21"
      },
      {
        "input": "s = \"((1 + 2) * (3 - 4) + (5 * 6) - 7)\"",
        "output": "6"
      },
      {
        "input": "s = \"1 + (2 * (2 + 2) - (3 - 4) * (3 + (2 - 1)))\"",
        "output": "4"
      },
      {
        "input": "s = \"(9 + (8 + (7 + (6 + (5 + (4 + (3 + (2 + 1))))))))\"",
        "output": "45"
      },
      {
        "input": "s = \"10 - (20 + (30 - (40 + (50 - 60))))\"",
        "output": "-10"
      },
      {
        "input": "s = \"(9 - (8 + 7 - (6 + 5 - 4))) * (3 + (2 - (1 + 0 - (-1))))\"",
        "output": "-2"
      },
      {
        "input": "s = \"100 - (25 + 3 * (4 + 5))\"",
        "output": "63"
      },
      {
        "input": "s = \"100 - (50 + (25 - (10 + (5 - (2 + (1 - (0 + 1)))))))\"",
        "output": "38"
      },
      {
        "input": "s = \"(1 + (2 + (3 + (4 + (5 + (6 + (7 + (8 + 9))))))))\"",
        "output": "45"
      },
      {
        "input": "s = \"100 + ((-200 + (300 - (400 + (500 - (600 + (700 - (800 + (900 - 1000))))))))\"",
        "output": "-200"
      },
      {
        "input": "s = \"(100 - (50 - (25 - (10 - (5 - 1)))))\"",
        "output": "69"
      },
      {
        "input": "s = \"5 + 3 * (10 - 2) / 4 - 1\"",
        "output": "11"
      },
      {
        "input": "s = \"1 + 2 * (3 + (4 * (5 + (6 * (7 + 8)))))\"",
        "output": "36"
      },
      {
        "input": "s = \"(9 + (8 - (7 + (6 - (5 + (4 - (3 + (2 - 1))))))))\"",
        "output": "9"
      },
      {
        "input": "s = \"( 1 + 2 ) * ( 3 + 4 ) - ( 5 + 6 ) * ( 7 + 8 )\"",
        "output": "14"
      },
      {
        "input": "s = \"(100 - 50) + ((25 * 2) - (10 + 5))\"",
        "output": "62"
      },
      {
        "input": "s = \"10 - (20 - (30 - (40 - 50)))\"",
        "output": "30"
      },
      {
        "input": "s = \"5 + ((1 + (2 * 2) + (3 * (4 + 5))) * 6)\"",
        "output": "28"
      },
      {
        "input": "s = \"(((((1 + 2) * 3) + 4) - 5) * 6) - 7\"",
        "output": "-8"
      },
      {
        "input": "s = \"((2 + 3) * (5 - 1) + 7)\"",
        "output": "16"
      },
      {
        "input": "s = \"((10 + 2) - (5 + 3) * (2 - 8)) + 4\"",
        "output": "2"
      },
      {
        "input": "s = \"((1 + (2 + (3 + (4 + (5 + (6 + (7 + (8 + (9 + 0)))))))))\"",
        "output": "45"
      },
      {
        "input": "s = \"(((10 - 2) * 3) / 2) + (((4 + 5) * 6) / 3)\"",
        "output": "21"
      },
      {
        "input": "s = \"(1 - (2 + (3 - (4 + (5 - (6 + (7 - (8 + 9))))))))\"",
        "output": "9"
      },
      {
        "input": "s = \"(1 + (2 * (2 + 3) - 4) + 5)\"",
        "output": "9"
      },
      {
        "input": "s = \"((1 + 2) * (3 + 4) - 5) * 2\"",
        "output": "3"
      },
      {
        "input": "s = \"((10 + 20) - (30 + 40)) + (50 + (60 - (70 + (80 - (90 + (100 - (110 + (120 - 130))))))))\"",
        "output": "10"
      },
      {
        "input": "s = \"((1 + 2) * (3 + 4)) - ((5 + 6) * (7 + 8))\"",
        "output": "-16"
      },
      {
        "input": "s = \"(2 + 6 * (25 - (3 + 3) * 2 ) ) + 5\"",
        "output": "34"
      },
      {
        "input": "s = \"(1 + (4 + (5 + (2 - 3)) - 3)) + (6 + 8)\"",
        "output": "20"
      },
      {
        "input": "s = \"((22 + (2 * (3 + 5))) - (7 + 3))\"",
        "output": "22"
      },
      {
        "input": "s = \"(1 + (2 - 3) * (4 + 5) - 6)\"",
        "output": "-15"
      },
      {
        "input": "s = \"(1 + (2 - (3 + (4 - (5 + (6 - (7 + (8 - 9))))))))\"",
        "output": "1"
      },
      {
        "input": "s = \"(1 + 2) * (3 + 4) - (5 + 6) * (7 + 8) + (9 * 10)\"",
        "output": "33"
      },
      {
        "input": "s = \"1 - (2 + (3 - (4 - (5 - 6))))\"",
        "output": "1"
      },
      {
        "input": "s = \"(1 + (2 + (3 + (4 + (5 + (6 + (7 + 8)))))))\"",
        "output": "36"
      },
      {
        "input": "s = \"(1 + 2) + (3 + 4) + (5 + 6) + (7 + 8) + (9 + 10)\"",
        "output": "55"
      },
      {
        "input": "s = \"30 - (10 + 20) + (5 * (2 + 3))\"",
        "output": "10"
      },
      {
        "input": "s = \"(123 - (45 + (67 - (89 + 10))) + 21)\"",
        "output": "131"
      },
      {
        "input": "s = \"- ( - ( - ( - ( - 1 ) ) ) )\"",
        "output": "-1"
      },
      {
        "input": "s = \"- (3 + (4 - 5))\"",
        "output": "-2"
      },
      {
        "input": "s = \"(((((1 + 2) * 3) - 4) + 5) * (6 - (7 + 8)))\"",
        "output": "-2"
      },
      {
        "input": "s = \"3 * (2 + (1 - 5) * (3 + 7)) - 2\"",
        "output": "-11"
      },
      {
        "input": "s = \"( ( 1 + 2 ) * ( 3 + 4 ) ) - ( ( 5 + 6 ) * ( 7 + 8 ) )\"",
        "output": "-16"
      },
      {
        "input": "s = \"(3 * (4 - (5 + 2)) / (1 - 2))\"",
        "output": "-1"
      },
      {
        "input": "s = \"((((-1 + 2) - 3) + 4) - 5)\"",
        "output": "-3"
      },
      {
        "input": "s = \"(12 - (4 + 3) * (2 - 1)) + 7\"",
        "output": "13"
      },
      {
        "input": "s = \"( 123 + ( 456 - ( 789 + ( 12 - 34 ) ) ) )\"",
        "output": "-188"
      },
      {
        "input": "s = \"10 + 20 * (30 - 20 / 2) + 5\"",
        "output": "43"
      },
      {
        "input": "s = \"((2 + 3) * (4 + 5) - 6) + 7 * (8 - 9)\"",
        "output": "14"
      },
      {
        "input": "s = \"(1 + (2 * (2 + 3)) - (4 * (5 - 6))) + (7 * (8 - (9 + 1)))\"",
        "output": "10"
      },
      {
        "input": "s = \"(((1 + 2) * 3) + ((4 + 5) * 6) + ((7 + 8) * 9))\"",
        "output": "45"
      },
      {
        "input": "s = \"(10 + 20) - (30 + 40) + (50 - 60)\"",
        "output": "-50"
      },
      {
        "input": "s = \"(5 + (10 + (15 + (20 + (25 + (30 + (35 + (40 + (45 + 50)))))))))\"",
        "output": "275"
      },
      {
        "input": "s = \"10 - 2 * (6 / (3 + 1))\"",
        "output": "-2"
      },
      {
        "input": "s = \"(10 + 2) * 6 - (3 + (4 - 5))\"",
        "output": "16"
      },
      {
        "input": "s = \"100 + ( 50 - ( 25 * ( 4 + 1 ) ) ) + ( 10 - ( 2 * 3 ) )\"",
        "output": "125"
      },
      {
        "input": "s = \"((2 + 3) * (4 + 5)) - (6 * (7 + 8))\"",
        "output": "-7"
      },
      {
        "input": "s = \"100 - ((99 - (98 - (97 - (96 - (95 - (94 - (93 - (92 - (91 - 90)))))))))\"",
        "output": "5"
      },
      {
        "input": "s = \"((3 + 5) - (2 * (8 / 4)) + 1)\"",
        "output": "-5"
      },
      {
        "input": "s = \"(123 - (456 + 789) + (101 - 202))\"",
        "output": "-1223"
      },
      {
        "input": "s = \"100 - ( 3 * ( 2 + 4 ) ) + 5\"",
        "output": "96"
      },
      {
        "input": "s = \"-1 + (-2 + (-3 * (-4 - (-5))))\"",
        "output": "-7"
      },
      {
        "input": "s = \"- ( 2 + 3 ) + ( 4 - 5 )\"",
        "output": "-6"
      },
      {
        "input": "s = \"(100 - (50 + (25 - (10 + (5 - 2)))))\"",
        "output": "38"
      },
      {
        "input": "s = \"(10 + 2 * 6) / ((5 - 3) * 2)\"",
        "output": "18"
      },
      {
        "input": "s = \"10 + (2 * (6 / 3))\"",
        "output": "21"
      },
      {
        "input": "s = \"5 * (3 + (2 * (2 + (1 + (0 - (-1))))))\"",
        "output": "14"
      },
      {
        "input": "s = \"1 - (2 + 3) * (4 - 5) + (6 / 3)\"",
        "output": "4"
      },
      {
        "input": "s = \"1 - (2 + (3 * (4 + (5 * (6 + (7 * (8 + (9 * (10 + 11)))))))))\"",
        "output": "-64"
      },
      {
        "input": "s = \"(100 - 50) - ((25 * 2) - (10 + 5))\"",
        "output": "38"
      },
      {
        "input": "s = \"1 + (2 + (3 + (4 + (5 + 6))))\"",
        "output": "21"
      },
      {
        "input": "s = \"((22 + (2 * 3)) * (4 + 3))\"",
        "output": "34"
      },
      {
        "input": "s = \"(10 + 20) - ((30 + 40) - (50 + (60 - (70 + (80 - (90 + (100 - 110)))))))\"",
        "output": "0"
      },
      {
        "input": "s = \"(8 - (4 + (1 - 3) + (2 - (5 + 7))))\"",
        "output": "16"
      },
      {
        "input": "s = \"100 - (25 * (2 + 3))\"",
        "output": "70"
      },
      {
        "input": "s = \"-((1 + 2) + (3 + 4)) + ((5 + 6) + (7 + 8))\"",
        "output": "16"
      },
      {
        "input": "s = \"(100 + 200 + (300 + (400 + (500 + (600 + (700 + (800 + 900)))))))\"",
        "output": "4500"
      },
      {
        "input": "s = \"10 - (9 - (8 - (7 - (6 - (5 - (4 - (3 - (2 - 1))))))))\"",
        "output": "5"
      },
      {
        "input": "s = \"100 + (200 * (300 + 400) - 500)\"",
        "output": "500"
      },
      {
        "input": "s = \"1 - (-2 - (-3 - (-4)))\"",
        "output": "4"
      },
      {
        "input": "s = \"10 + 20 - 30 + (40 - 50)\"",
        "output": "-10"
      },
      {
        "input": "s = \"((1 + 2) * (3 - 4)) + (5 + 6)\"",
        "output": "13"
      },
      {
        "input": "s = \"12 - (4 * (2 + 3)) + 15\"",
        "output": "18"
      },
      {
        "input": "s = \"3 + 5 / 2\"",
        "output": "10"
      },
      {
        "input": "s = \"1 + (2 * (2 + 2) - (3 - 4) * 3)\"",
        "output": "5"
      },
      {
        "input": "s = \"(5 + 3) * (7 - (2 + 3))\"",
        "output": "10"
      },
      {
        "input": "s = \"10 + 2 * (6 / (3 + 1)) - (8 - 4) * (2 + 1)\"",
        "output": "15"
      },
      {
        "input": "s = \"2 * ((3 + 4) * (5 - 6) + 7) - 8\"",
        "output": "7"
      },
      {
        "input": "s = \"(1 + (2 * (2 + (3 * (4 + (5 * (6 + 7)))))))\"",
        "output": "30"
      },
      {
        "input": "s = \"123 + (456 - (789 + (101 - 202) ) )\"",
        "output": "-109"
      },
      {
        "input": "s = \"3 + (2 * (2 + (2 * (2 + (2 * 2)))))\"",
        "output": "15"
      },
      {
        "input": "s = \"-1 + (-2 + (-3 + (-4 + (-5))))\"",
        "output": "-15"
      },
      {
        "input": "s = \"(((1 + 2) * (3 + 4)) - 5) * (6 + 7)\"",
        "output": "-8"
      },
      {
        "input": "s = \"(3 + (2 * (2 + 1)))\"",
        "output": "8"
      },
      {
        "input": "s = \"20 * ((1 + 2) * (3 + 4) - (5 * 6)) / 10\"",
        "output": "29"
      },
      {
        "input": "s = \"((100 - (50 + (25 - (10 + (5 - (2 + (1 - 0))))))) + (10 - 5))\"",
        "output": "42"
      },
      {
        "input": "s = \"(5 - 3) * (10 - (4 + 2) * (3 - 1))\"",
        "output": "-4"
      },
      {
        "input": "s = \"(1 + 2) * 3 - 4 * (5 + 6)\"",
        "output": "-9"
      },
      {
        "input": "s = \"(1 - (2 + (3 - (4 + (5 - 6)))))\"",
        "output": "-1"
      },
      {
        "input": "s = \"(1 - (2 - (3 - (4 - (5 - (6 - (7 - (8 - 9)))))))\"",
        "output": "5"
      },
      {
        "input": "s = \"(3 - 4) * (5 - (6 - (7 - (8 - (9 - 10)))))\"",
        "output": "2"
      },
      {
        "input": "s = \"(10 + ((20 + 30) - (40 + (50 - (60 + (70 - 80))))))\"",
        "output": "20"
      },
      {
        "input": "s = \"(((1 + 2) * (3 + 4)) - (5 + 6)) * (7 - (8 + 9))\"",
        "output": "-11"
      },
      {
        "input": "s = \"(1 + (2 * (3 + (4 * (5 + (6 * (7 + (8 * (9 + 10))))))))\"",
        "output": "55"
      },
      {
        "input": "s = \"1 + (2 - (3 + (4 - (5 + (6 - (7 + (8 - 9)))))))\"",
        "output": "1"
      },
      {
        "input": "s = \"(3 * (5 - (2 + 1)) + 4) - (6 * (8 - (7 + 1)))\"",
        "output": "3"
      },
      {
        "input": "s = \"((1 + 2) * (3 + 4) - (5 + 6)) * (7 + 8) - (9 + 10)\"",
        "output": "-5"
      },
      {
        "input": "s = \"(1 + 2) * (3 - 4) * (5 + 6) * (7 - 8)\"",
        "output": "-10"
      },
      {
        "input": "s = \"1 + 2 - 3 * (4 - 5) / (6 - 7) + 8\"",
        "output": "10"
      },
      {
        "input": "s = \"(1 + (2 * 3)) - (4 + (5 * 6))\"",
        "output": "-9"
      },
      {
        "input": "s = \"(((3 + 2) * (4 + 5)) - (6 + (7 * 8) - 9)) + 10\"",
        "output": "12"
      },
      {
        "input": "s = \"(100 - (50 + 25 - (10 * 2 + 5)) + 15)\"",
        "output": "57"
      },
      {
        "input": "s = \"1000 + (2000 - (3000 - (4000 - (5000 - (6000 - (7000 - 8000))))))\"",
        "output": "6000"
      },
      {
        "input": "s = \"( ( ( 1 + 2 ) * 3 ) - ( 4 + 5 ) )\"",
        "output": "-3"
      },
      {
        "input": "s = \"(1 + (2 * (3 + (4 * (5 + 6))))) - (7 + (8 * (9 + 10)))\"",
        "output": "-13"
      },
      {
        "input": "s = \"((1 + 2) * (3 + 4) - (5 * 6))\"",
        "output": "-1"
      },
      {
        "input": "s = \"(10 - 5) + (3 * 2) + (8 / 4)\"",
        "output": "22"
      },
      {
        "input": "s = \"3 + 5 * ( 2 - 8 )\"",
        "output": "2"
      },
      {
        "input": "s = \"(3 - (5 - (7 - (9 - (11 - (13 - (15 - 17))))))\"",
        "output": "-8"
      }
    ]
  },
  {
    "id": 2106,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Prefix Sum",
      "Sliding Window"
    ],
    "problemDescription": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.\nYou are also given an integer startPos and an integer k. Initially, you are at the position startPos. From any position, you can either walk to the left or right. It takes one step to move one unit on the x-axis, and you can walk at most k steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.\nReturn the maximum total number of fruits you can harvest.\n\u00a0\nExample 1:\n\n\nInput: fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4\nOutput: 9\nExplanation: \nThe optimal way is to:\n- Move right to position 6 and harvest 3 fruits\n- Move right to position 8 and harvest 6 fruits\nYou moved 3 steps and harvested 3 + 6 = 9 fruits in total.\n\nExample 2:\n\n\nInput: fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4\nOutput: 14\nExplanation: \nYou can move at most k = 4 steps, so you cannot reach position 0 nor 10.\nThe optimal way is to:\n- Harvest the 7 fruits at the starting position 5\n- Move left to position 4 and harvest 1 fruit\n- Move right to position 6 and harvest 2 fruits\n- Move right to position 7 and harvest 4 fruits\nYou moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total.\n\nExample 3:\n\n\nInput: fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2\nOutput: 0\nExplanation:\nYou can move at most k = 2 steps and cannot reach any position with fruits.\n\n\u00a0\nConstraints:\n\n1 <= fruits.length <= 105\nfruits[i].length == 2\n0 <= startPos, positioni <= 2 * 105\npositioni-1 < positioni for any i > 0\u00a0(0-indexed)\n1 <= amounti <= 104\n0 <= k <= 2 * 105\n\n",
    "starterCode": "class Solution:\n    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4",
        "output": "14"
      },
      {
        "input": "fruits = [[1,100],[50,100],[100,100]], startPos = 75, k = 25",
        "output": "100"
      },
      {
        "input": "fruits = [[100000,10000]], startPos = 90000, k = 20000",
        "output": "10000"
      },
      {
        "input": "fruits = [[0,1],[2,1],[4,1],[6,1],[8,1],[10,1]], startPos = 5, k = 5",
        "output": "3"
      },
      {
        "input": "fruits = [[1,100],[2,100],[3,100],[4,100],[5,100],[6,100],[7,100],[8,100],[9,100],[10,100]], startPos = 5, k = 10",
        "output": "800"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5]], startPos = 1, k = 5",
        "output": "15"
      },
      {
        "input": "fruits = [[1,10],[2,10],[3,10]], startPos = 1, k = 5",
        "output": "30"
      },
      {
        "input": "fruits = [[1,2],[3,4],[5,6]], startPos = 4, k = 3",
        "output": "10"
      },
      {
        "input": "fruits = [[1,5],[2,3],[4,8],[6,7],[8,2]], startPos = 5, k = 5",
        "output": "18"
      },
      {
        "input": "fruits = [[1,10000],[20000,10000]], startPos = 10000, k = 10000",
        "output": "10000"
      },
      {
        "input": "fruits = [[10,5],[20,5],[30,5],[40,5],[50,5]], startPos = 30, k = 15",
        "output": "10"
      },
      {
        "input": "fruits = [[10000,10000],[20000,10000],[30000,10000]], startPos = 20000, k = 10000",
        "output": "20000"
      },
      {
        "input": "fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2",
        "output": "0"
      },
      {
        "input": "fruits = [[1,2],[3,4],[7,8],[10,10]], startPos = 5, k = 5",
        "output": "18"
      },
      {
        "input": "fruits = [[1,2],[3,4],[5,6],[7,8]], startPos = 4, k = 5",
        "output": "18"
      },
      {
        "input": "fruits = [[10,10],[20,20],[30,30]], startPos = 15, k = 10",
        "output": "20"
      },
      {
        "input": "fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4",
        "output": "9"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]], startPos = 8, k = 6",
        "output": "77"
      },
      {
        "input": "fruits = [[1, 1], [3, 2], [5, 3], [7, 4], [9, 5], [11, 6], [13, 7], [15, 8], [17, 9], [19, 10]], startPos = 10, k = 9",
        "output": "40"
      },
      {
        "input": "fruits = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9]], startPos = 45, k = 30",
        "output": "18"
      },
      {
        "input": "fruits = [[1,1],[3,2],[5,3],[7,4],[9,5],[11,6],[13,7],[15,8],[17,9]], startPos = 8, k = 12",
        "output": "39"
      },
      {
        "input": "fruits = [[5,20],[10,15],[15,10],[20,5],[25,10]], startPos = 12, k = 10",
        "output": "35"
      },
      {
        "input": "fruits = [[1,5],[4,10],[6,15],[10,20],[15,25],[20,30]], startPos = 10, k = 15",
        "output": "75"
      },
      {
        "input": "fruits = [[1,1000],[10,1000],[20,1000],[30,1000],[40,1000]], startPos = 25, k = 20",
        "output": "2000"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12]], startPos = 6, k = 10",
        "output": "72"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], startPos = 1, k = 10",
        "output": "55"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], startPos = 5, k = 5",
        "output": "45"
      },
      {
        "input": "fruits = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9]], startPos = 50, k = 30",
        "output": "26"
      },
      {
        "input": "fruits = [[2, 5], [5, 5], [7, 5], [10, 5], [15, 5], [20, 5], [25, 5], [30, 5]], startPos = 15, k = 15",
        "output": "25"
      },
      {
        "input": "fruits = [[1,50],[2,50],[3,50],[4,50],[5,50],[6,50],[7,50],[8,50],[9,50],[10,50]], startPos = 5, k = 10",
        "output": "400"
      },
      {
        "input": "fruits = [[5,15],[10,20],[15,25],[20,30],[25,35],[30,40]], startPos = 18, k = 12",
        "output": "105"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], startPos = 5, k = 4",
        "output": "35"
      },
      {
        "input": "fruits = [[1, 5], [3, 10], [6, 15], [8, 20], [10, 25]], startPos = 5, k = 7",
        "output": "60"
      },
      {
        "input": "fruits = [[5,100],[10,200],[15,300],[20,400],[25,500],[30,600],[35,700],[40,800],[45,900]], startPos = 20, k = 20",
        "output": "3000"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], startPos = 5, k = 9",
        "output": "52"
      },
      {
        "input": "fruits = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]], startPos = 5, k = 12",
        "output": "35"
      },
      {
        "input": "fruits = [[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15]], startPos = 7, k = 10",
        "output": "55"
      },
      {
        "input": "fruits = [[2, 8], [5, 10], [7, 3], [11, 15], [15, 7]], startPos = 8, k = 10",
        "output": "28"
      },
      {
        "input": "fruits = [[5,2],[10,4],[15,6],[20,8],[25,10],[30,12],[35,14]], startPos = 18, k = 25",
        "output": "50"
      },
      {
        "input": "fruits = [[1,100],[10,100],[20,100],[30,100],[40,100],[50,100]], startPos = 25, k = 20",
        "output": "200"
      },
      {
        "input": "fruits = [[1,100],[100,200],[200,300],[300,400],[400,500]], startPos = 250, k = 200",
        "output": "900"
      },
      {
        "input": "fruits = [[1,1],[3,2],[5,3],[7,4],[9,5],[11,6],[13,7],[15,8],[17,9],[19,10]], startPos = 10, k = 10",
        "output": "40"
      },
      {
        "input": "fruits = [[1,5],[10,5],[20,5],[30,5],[40,5],[50,5],[60,5],[70,5],[80,5],[90,5],[100,5]], startPos = 50, k = 40",
        "output": "25"
      },
      {
        "input": "fruits = [[1,1000],[2,1000],[3,1000],[4,1000],[5,1000],[6,1000],[7,1000],[8,1000],[9,1000],[10,1000]], startPos = 5, k = 9",
        "output": "8000"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13]], startPos = 7, k = 6",
        "output": "70"
      },
      {
        "input": "fruits = [[1,2000],[2,2000],[3,2000],[4,2000],[5,2000],[6,2000],[7,2000],[8,2000],[9,2000],[10,2000]], startPos = 5, k = 10",
        "output": "16000"
      },
      {
        "input": "fruits = [[2,3],[4,6],[6,9],[8,12],[10,15]], startPos = 6, k = 8",
        "output": "42"
      },
      {
        "input": "fruits = [[5,100],[10,200],[15,300],[20,400],[25,500]], startPos = 12, k = 22",
        "output": "1400"
      },
      {
        "input": "fruits = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], startPos = 5, k = 9",
        "output": "49"
      },
      {
        "input": "fruits = [[2,9],[5,8],[12,7],[18,6],[25,5],[32,4],[39,3],[46,2],[53,1]], startPos = 25, k = 20",
        "output": "26"
      },
      {
        "input": "fruits = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]], startPos = 10, k = 15",
        "output": "98"
      },
      {
        "input": "fruits = [[1, 10], [4, 20], [6, 30], [9, 40], [12, 50], [15, 60], [18, 70], [21, 80], [24, 90]], startPos = 12, k = 18",
        "output": "390"
      },
      {
        "input": "fruits = [[5, 3], [10, 5], [15, 8], [20, 12], [25, 15], [30, 20]], startPos = 18, k = 12",
        "output": "47"
      },
      {
        "input": "fruits = [[2,5],[4,3],[5,10],[7,2],[8,6],[10,1]], startPos = 6, k = 7",
        "output": "21"
      },
      {
        "input": "fruits = [[5,1],[7,2],[9,3],[11,4],[13,5]], startPos = 10, k = 6",
        "output": "12"
      },
      {
        "input": "fruits = [[1,50],[2,60],[3,70],[4,80],[5,90],[6,100],[7,110],[8,120],[9,130],[10,140]], startPos = 5, k = 15",
        "output": "950"
      },
      {
        "input": "fruits = [[1,10],[5,20],[10,30],[15,40],[20,50]], startPos = 15, k = 18",
        "output": "120"
      },
      {
        "input": "fruits = [[5,2],[10,3],[15,4],[20,5],[25,6],[30,7],[35,8],[40,9]], startPos = 22, k = 12",
        "output": "18"
      },
      {
        "input": "fruits = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[13,1],[14,1],[15,1]], startPos = 8, k = 12",
        "output": "10"
      },
      {
        "input": "fruits = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[13,1],[14,1],[15,1]], startPos = 8, k = 7",
        "output": "8"
      },
      {
        "input": "fruits = [[1,1000],[5,1000],[10,1000],[15,1000],[20,1000],[25,1000],[30,1000],[35,1000],[40,1000]], startPos = 20, k = 25",
        "output": "5000"
      },
      {
        "input": "fruits = [[1, 100], [5, 200], [10, 300], [15, 400], [20, 500]], startPos = 10, k = 18",
        "output": "1200"
      },
      {
        "input": "fruits = [[1, 5], [3, 5], [5, 5], [7, 5], [9, 5], [11, 5], [13, 5], [15, 5], [17, 5], [19, 5]], startPos = 10, k = 9",
        "output": "25"
      },
      {
        "input": "fruits = [[2,8],[6,3],[8,6],[12,4],[14,2],[18,10],[20,7]], startPos = 10, k = 12",
        "output": "23"
      },
      {
        "input": "fruits = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10],[110,11],[120,12],[130,13],[140,14],[150,15]], startPos = 80, k = 30",
        "output": "38"
      },
      {
        "input": "fruits = [[1, 10], [3, 20], [5, 30], [7, 40], [9, 50], [11, 60], [13, 70], [15, 80], [17, 90]], startPos = 8, k = 14",
        "output": "390"
      },
      {
        "input": "fruits = [[0,100],[10,100],[20,100],[30,100],[40,100]], startPos = 20, k = 10",
        "output": "200"
      },
      {
        "input": "fruits = [[5,10],[15,10],[25,10],[35,10],[45,10],[55,10],[65,10]], startPos = 15, k = 35",
        "output": "40"
      },
      {
        "input": "fruits = [[1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [7, 70], [8, 80], [9, 90], [10, 100]], startPos = 5, k = 10",
        "output": "520"
      },
      {
        "input": "fruits = [[1, 2], [4, 3], [7, 4], [10, 5], [13, 6], [16, 7], [19, 8], [22, 9], [25, 10]], startPos = 10, k = 10",
        "output": "26"
      },
      {
        "input": "fruits = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], startPos = 5, k = 9",
        "output": "52"
      },
      {
        "input": "fruits = [[1,1000],[2000,1000],[3000,1000],[4000,1000],[5000,1000]], startPos = 2500, k = 2000",
        "output": "2000"
      },
      {
        "input": "fruits = [[5,5],[15,5],[25,5],[35,5],[45,5],[55,5],[65,5]], startPos = 30, k = 25",
        "output": "15"
      },
      {
        "input": "fruits = [[5, 10], [10, 20], [15, 30], [20, 40], [25, 50], [30, 60], [35, 70], [40, 80]], startPos = 25, k = 15",
        "output": "260"
      },
      {
        "input": "fruits = [[2,8],[6,3],[8,6],[12,7],[16,5]], startPos = 5, k = 8",
        "output": "16"
      },
      {
        "input": "fruits = [[1,10000],[2,10000],[3,10000],[4,10000],[5,10000]], startPos = 3, k = 100000",
        "output": "50000"
      },
      {
        "input": "fruits = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90],[100,100]], startPos = 50, k = 50",
        "output": "450"
      },
      {
        "input": "fruits = [[1,3],[4,7],[6,2],[8,8],[10,5]], startPos = 5, k = 7",
        "output": "22"
      },
      {
        "input": "fruits = [[10,5],[20,10],[30,15],[40,20],[50,25],[60,30],[70,35],[80,40],[90,45],[100,50]], startPos = 55, k = 30",
        "output": "105"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], startPos = 3, k = 15",
        "output": "55"
      },
      {
        "input": "fruits = [[10,100],[20,200],[30,300],[40,400],[50,500],[60,600],[70,700],[80,800],[90,900],[100,1000]], startPos = 50, k = 40",
        "output": "3500"
      },
      {
        "input": "fruits = [[10,1],[20,1],[30,1],[40,1],[50,1],[60,1],[70,1],[80,1],[90,1],[100,1]], startPos = 55, k = 45",
        "output": "5"
      },
      {
        "input": "fruits = [[5,1],[10,2],[15,3],[20,4],[25,5],[30,6],[35,7]], startPos = 20, k = 20",
        "output": "22"
      },
      {
        "input": "fruits = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90],[100,100]], startPos = 55, k = 45",
        "output": "400"
      },
      {
        "input": "fruits = [[2,5],[5,10],[10,8],[15,7],[20,6]], startPos = 12, k = 15",
        "output": "25"
      },
      {
        "input": "fruits = [[5,5],[15,5],[25,5],[35,5],[45,5],[55,5]], startPos = 30, k = 18",
        "output": "10"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]], startPos = 8, k = 10",
        "output": "99"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20]], startPos = 10, k = 15",
        "output": "182"
      },
      {
        "input": "fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9],[12,5],[15,6],[18,7]], startPos = 5, k = 10",
        "output": "33"
      },
      {
        "input": "fruits = [[1,1],[3,1],[5,1],[7,1],[9,1],[11,1],[13,1],[15,1],[17,1],[19,1]], startPos = 10, k = 9",
        "output": "5"
      },
      {
        "input": "fruits = [[1, 5], [3, 10], [5, 15], [7, 20], [9, 25], [11, 30], [13, 35], [15, 40], [17, 45], [19, 50]], startPos = 10, k = 15",
        "output": "245"
      },
      {
        "input": "fruits = [[1,1000],[2000,2000],[3000,3000],[4000,4000],[5000,5000]], startPos = 2500, k = 2500",
        "output": "12000"
      },
      {
        "input": "fruits = [[5,1],[10,2],[15,3],[20,4],[25,5],[30,6],[35,7],[40,8]], startPos = 22, k = 15",
        "output": "18"
      },
      {
        "input": "fruits = [[2,1],[5,3],[8,5],[11,2],[14,6]], startPos = 7, k = 9",
        "output": "13"
      },
      {
        "input": "fruits = [[10,5],[15,10],[20,15],[25,20],[30,25],[35,30]], startPos = 20, k = 25",
        "output": "100"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], startPos = 5, k = 15",
        "output": "45"
      },
      {
        "input": "fruits = [[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5],[10,5]], startPos = 5, k = 4",
        "output": "25"
      },
      {
        "input": "fruits = [[1,100],[10,100],[20,100],[30,100],[40,100]], startPos = 25, k = 20",
        "output": "200"
      },
      {
        "input": "fruits = [[1,1],[3,2],[5,3],[7,4],[9,5],[11,6],[13,7],[15,8],[17,9],[19,10]], startPos = 10, k = 8",
        "output": "30"
      },
      {
        "input": "fruits = [[10, 5], [20, 5], [30, 5], [40, 5], [50, 5], [60, 5], [70, 5], [80, 5]], startPos = 40, k = 25",
        "output": "15"
      },
      {
        "input": "fruits = [[2, 8], [6, 3], [8, 6], [10, 9], [12, 4], [14, 2], [16, 5]], startPos = 5, k = 8",
        "output": "22"
      },
      {
        "input": "fruits = [[0, 2], [2, 4], [4, 6], [6, 8], [8, 10], [10, 12], [12, 14]], startPos = 6, k = 6",
        "output": "44"
      },
      {
        "input": "fruits = [[1, 5], [10, 10], [20, 15], [30, 20], [40, 25], [50, 30]], startPos = 25, k = 20",
        "output": "45"
      },
      {
        "input": "fruits = [[5,5],[15,15],[25,25],[35,35],[45,45]], startPos = 25, k = 20",
        "output": "105"
      },
      {
        "input": "fruits = [[0,100],[10,100],[20,100],[30,100],[40,100],[50,100]], startPos = 25, k = 40",
        "output": "400"
      },
      {
        "input": "fruits = [[10,5000],[20,5000],[30,5000],[40,5000],[50,5000],[60,5000],[70,5000]], startPos = 35, k = 29",
        "output": "15000"
      },
      {
        "input": "fruits = [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11]], startPos = 5, k = 12",
        "output": "35"
      },
      {
        "input": "fruits = [[1,1000],[5,2000],[10,3000],[20,4000],[30,5000]], startPos = 15, k = 18",
        "output": "9000"
      },
      {
        "input": "fruits = [[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12]], startPos = 4, k = 10",
        "output": "68"
      },
      {
        "input": "fruits = [[1,1000],[10,2000],[20,3000],[30,4000],[40,5000],[50,6000]], startPos = 25, k = 25",
        "output": "15000"
      },
      {
        "input": "fruits = [[100,10],[200,20],[300,30],[400,40],[500,50],[600,60],[700,70],[800,80],[900,90]], startPos = 500, k = 300",
        "output": "260"
      },
      {
        "input": "fruits = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20]], startPos = 10, k = 10",
        "output": "165"
      },
      {
        "input": "fruits = [[1, 100], [2, 200], [3, 300], [4, 400], [5, 500], [6, 600]], startPos = 3, k = 10",
        "output": "2100"
      },
      {
        "input": "fruits = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10]], startPos = 55, k = 40",
        "output": "30"
      }
    ]
  },
  {
    "id": 527,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Trie",
      "Array",
      "String",
      "Sorting"
    ],
    "problemDescription": "Given an array of distinct strings words, return the minimal possible abbreviations for every word.\nThe following are the rules for a string abbreviation:\n\nThe initial abbreviation for each word is: the first character, then the number of characters in between, followed by the last character.\nIf more than one word shares the same abbreviation, then perform the following operation:\n\t\nIncrease the prefix (characters in the first part) of each of their abbreviations by 1.\n\t\t\nFor example, say you start with the words [\"abcdef\",\"abndef\"] both initially abbreviated as \"a4f\". Then, a sequence of operations would be [\"a4f\",\"a4f\"] -> [\"ab3f\",\"ab3f\"] -> [\"abc2f\",\"abn2f\"].\n\n\nThis operation is repeated until every abbreviation is unique.\n\n\nAt the end, if an abbreviation did not make a word shorter, then keep it as the original word.\n\n\u00a0\nExample 1:\nInput: words = [\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]\nOutput: [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\nExample 2:\nInput: words = [\"aa\",\"aaa\"]\nOutput: [\"aa\",\"aaa\"]\n\n\u00a0\nConstraints:\n\n1 <= words.length <= 400\n2 <= words[i].length <= 400\nwords[i] consists of lowercase English letters.\nAll the strings of words are unique.\n\n",
    "starterCode": "class Solution:\n    def wordsAbbreviation(self, words: List[str]) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "words = [\"aa\",\"aaa\"]",
        "output": "['aa', 'aaa']"
      },
      {
        "input": "words = [\"test\",\"testing\",\"tester\",\"testify\",\"testament\"]",
        "output": "['t2t', 't5g', 't4r', 't5y', 't7t']"
      },
      {
        "input": "words = [\"aabbcc\",\"aabbc\",\"aab\",\"abc\",\"abcd\",\"abcde\",\"abcdef\"]",
        "output": "['a4c', 'a3c', 'aab', 'abc', 'a2d', 'a3e', 'a4f']"
      },
      {
        "input": "words = [\"hello\",\"hellp\",\"heaven\",\"heavy\"]",
        "output": "['h3o', 'h3p', 'h4n', 'h3y']"
      },
      {
        "input": "words = [\"abcdef\",\"abacdf\",\"abacde\",\"abacdd\",\"abaced\"]",
        "output": "['abc2f', 'aba2f', 'a4e', 'abacdd', 'abaced']"
      },
      {
        "input": "words = [\"hello\",\"hallo\",\"hellp\",\"heaven\"]",
        "output": "['he2o', 'ha2o', 'h3p', 'h4n']"
      },
      {
        "input": "words = [\"hello\",\"hallo\",\"hell\",\"he\"]",
        "output": "['he2o', 'ha2o', 'h2l', 'he']"
      },
      {
        "input": "words = [\"abc\",\"abcd\",\"abcde\",\"abcdef\"]",
        "output": "['abc', 'a2d', 'a3e', 'a4f']"
      },
      {
        "input": "words = [\"apple\",\"apples\",\"banana\",\"bananas\",\"bandana\",\"bandanas\",\"bandanna\"]",
        "output": "['a3e', 'a4s', 'b4a', 'b5s', 'b5a', 'b6s', 'b6a']"
      },
      {
        "input": "words = [\"apple\",\"apply\",\"angle\",\"ample\",\"appet\"]",
        "output": "['ap2e', 'a3y', 'an2e', 'am2e', 'a3t']"
      },
      {
        "input": "words = [\"aaabbb\",\"aabbb\",\"aabb\",\"aab\",\"aa\"]",
        "output": "['a4b', 'a3b', 'a2b', 'aab', 'aa']"
      },
      {
        "input": "words = [\"banana\",\"bandana\",\"banner\",\"bandage\",\"banjo\"]",
        "output": "['b4a', 'b5a', 'b4r', 'b5e', 'b3o']"
      },
      {
        "input": "words = [\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]",
        "output": "['l2e', 'god', 'internal', 'me', 'i6t', 'interval', 'inte4n', 'f2e', 'intr4n']"
      },
      {
        "input": "words = [\"a\",\"ab\",\"abc\",\"abcd\"]",
        "output": "['a', 'ab', 'abc', 'a2d']"
      },
      {
        "input": "words = [\"aabbcc\",\"aabbc\",\"aab\",\"aa\"]",
        "output": "['a4c', 'a3c', 'aab', 'aa']"
      },
      {
        "input": "words = [\"aabbcc\",\"aabbc\",\"aabb\",\"aab\",\"aa\"]",
        "output": "['a4c', 'a3c', 'a2b', 'aab', 'aa']"
      },
      {
        "input": "words = [\"unique\",\"uniques\",\"unicorn\",\"united\",\"unity\"]",
        "output": "['u4e', 'u5s', 'u5n', 'u4d', 'u3y']"
      },
      {
        "input": "words = [\"abc\",\"abcd\",\"abcde\"]",
        "output": "['abc', 'a2d', 'a3e']"
      },
      {
        "input": "words = [\"abcd\",\"abcde\",\"abcdef\",\"abcdeg\"]",
        "output": "['a2d', 'a3e', 'a4f', 'a4g']"
      },
      {
        "input": "words = [\"abcd\",\"abdd\",\"acdd\",\"aedd\",\"aegd\"]",
        "output": "['abcd', 'abdd', 'acdd', 'aedd', 'aegd']"
      },
      {
        "input": "words = [\"apple\",\"apply\",\"ape\",\"apricot\",\"application\"]",
        "output": "['a3e', 'a3y', 'ape', 'a5t', 'a9n']"
      },
      {
        "input": "words = [\"prefix\",\"preprocessor\",\"presentation\",\"preference\",\"prefer\",\"prelude\"]",
        "output": "['p4x', 'p10r', 'p10n', 'p8e', 'p4r', 'p5e']"
      },
      {
        "input": "words = [\"implementation\",\"implement\",\"implementations\",\"implementable\",\"implementing\",\"implemented\"]",
        "output": "['i12n', 'i7t', 'i13s', 'i11e', 'i10g', 'i9d']"
      },
      {
        "input": "words = [\"technology\",\"technique\",\"technical\",\"technician\",\"technological\",\"technological\",\"technological\",\"technological\",\"technological\",\"technological\"]",
        "output": "['t8y', 't7e', 't7l', 't8n', 'technological', 'technological', 'technological', 'technological', 'technological', 'technological']"
      },
      {
        "input": "words = [\"abbreviation\",\"abbreviate\",\"abbreviated\",\"abbreviates\",\"abbreviating\"]",
        "output": "['a10n', 'a8e', 'a9d', 'a9s', 'a10g']"
      },
      {
        "input": "words = [\"algorithm\",\"algorithmic\",\"algebra\",\"algebraic\",\"alibi\",\"alibi\",\"align\",\"alignment\"]",
        "output": "['a7m', 'a9c', 'a5a', 'a7c', 'alibi', 'alibi', 'a3n', 'a7t']"
      },
      {
        "input": "words = [\"example\",\"examine\",\"exhibit\",\"exactly\",\"exhibition\",\"exempt\",\"exemplify\",\"exhaust\"]",
        "output": "['example', 'examine', 'exhi2t', 'e5y', 'e8n', 'e4t', 'e7y', 'exha2t']"
      },
      {
        "input": "words = [\"algorithm\",\"algebra\",\"alien\",\"alignment\",\"alteration\",\"altitude\",\"alpine\",\"altitude\",\"altitude\",\"allegory\"]",
        "output": "['a7m', 'a5a', 'a3n', 'a7t', 'a8n', 'altitude', 'a4e', 'altitude', 'altitude', 'a6y']"
      },
      {
        "input": "words = [\"visualization\",\"visualize\",\"visual\",\"visually\",\"visualizer\",\"visualizing\"]",
        "output": "['v11n', 'v7e', 'v4l', 'v6y', 'v8r', 'v9g']"
      },
      {
        "input": "words = [\"algorithm\",\"algebra\",\"altitude\",\"alignment\",\"album\",\"alcohol\",\"alabama\",\"alaska\"]",
        "output": "['a7m', 'alg3a', 'a6e', 'a7t', 'a3m', 'a5l', 'ala3a', 'a4a']"
      },
      {
        "input": "words = [\"supercalifragilisticexpialidocious\",\"supercalifragilisticexpialidociouss\",\"supercalifragilisticexpialidociousss\",\"supercalifragilisticexpialidocioussss\",\"supercalifragilisticexpialidociousssss\"]",
        "output": "['s32s', 's33s', 's34s', 's35s', 's36s']"
      },
      {
        "input": "words = [\"photography\",\"photograph\",\"photographing\",\"photographer\",\"photographic\",\"photogenic\",\"photograph\",\"photochemical\"]",
        "output": "['p9y', 'photograph', 'p11g', 'p10r', 'p10c', 'p8c', 'photograph', 'p11l']"
      },
      {
        "input": "words = [\"banana\",\"bandana\",\"bananna\",\"bandanna\",\"bananastand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\",\"bandstand\"]",
        "output": "['b4a', 'band2a', 'bana2a', 'b6a', 'b9d', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand', 'bandstand']"
      },
      {
        "input": "words = [\"xylophone\",\"xenon\",\"xenophobe\",\"xerox\",\"xerxes\",\"xylem\",\"xylography\",\"xylophoneist\"]",
        "output": "['xy6e', 'x3n', 'xe6e', 'x3x', 'x4s', 'x3m', 'x8y', 'x10t']"
      },
      {
        "input": "words = [\"reproductive\",\"reproduction\",\"reproduce\",\"reproductive\",\"reproductive\",\"reproductive\",\"reproductive\",\"reproductive\",\"reproductive\",\"reproductive\"]",
        "output": "['reproductive', 'r10n', 'r7e', 'reproductive', 'reproductive', 'reproductive', 'reproductive', 'reproductive', 'reproductive', 'reproductive']"
      },
      {
        "input": "words = [\"aabbcc\",\"aabbc\",\"aabc\",\"aab\",\"abc\",\"ab\",\"a\",\"bbcc\",\"bcc\",\"bc\",\"b\",\"cc\",\"c\"]",
        "output": "['a4c', 'a3c', 'a2c', 'aab', 'abc', 'ab', 'a', 'b2c', 'bcc', 'bc', 'b', 'cc', 'c']"
      },
      {
        "input": "words = [\"elephant\",\"elephantine\",\"elephantiasis\",\"elephantomaniac\",\"elephantine\",\"elephants\"]",
        "output": "['e6t', 'elephantine', 'e11s', 'e13c', 'elephantine', 'e7s']"
      },
      {
        "input": "words = [\"microscopically\",\"microscopical\",\"microscopic\",\"microscopicallyy\",\"microscopicallyyy\"]",
        "output": "['m13y', 'm11l', 'm9c', 'm14y', 'm15y']"
      },
      {
        "input": "words = [\"interdisciplinary\",\"interim\",\"interior\",\"interiority\",\"interiorise\",\"interiorize\",\"interject\",\"interjection\"]",
        "output": "['i15y', 'i5m', 'i6r', 'i9y', 'interiorise', 'interiorize', 'i7t', 'i10n']"
      },
      {
        "input": "words = [\"repetition\",\"repetitive\",\"repetitious\",\"repetend\",\"repetitiveness\"]",
        "output": "['r8n', 'r8e', 'r9s', 'r6d', 'r12s']"
      },
      {
        "input": "words = [\"algorithm\",\"algorithms\",\"algebra\",\"algorithmically\",\"algorithmist\"]",
        "output": "['a7m', 'a8s', 'a5a', 'a13y', 'a10t']"
      },
      {
        "input": "words = [\"algorithm\",\"algorithms\",\"alligator\",\"algorithmic\",\"algebra\",\"alabama\",\"alaskan\",\"albatross\",\"alchemist\",\"alchemy\",\"alert\",\"alfalfa\",\"algebraic\",\"algorithmically\",\"algorithmically\",\"alibi\",\"alien\",\"alight\",\"align\",\"alignment\",\"alkaline\",\"alkaloid\",\"alkali\",\"allay\",\"allied\",\"alliteration\",\"allocate\",\"allot\",\"allow\",\"allowance\",\"alloy\",\"allude\",\"allure\",\"ally\",\"almanac\",\"almighty\",\"almond\",\"aloe\",\"aloft\",\"alone\",\"along\",\"alongside\",\"aloof\",\"aloud\",\"alphabet\",\"alphabetical\",\"alphabetize\",\"already\",\"alright\",\"also\",\"altar\",\"alter\",\"alteration\",\"alternative\",\"although\",\"altimeter\",\"altitude\",\"alto\",\"altruism\",\"altruist\",\"altruistic\",\"aluminum\",\"always\",\"amass\",\"amateur\",\"amateurish\",\"amatory\",\"amaze\",\"amazed\",\"amazement\",\"amazing\",\"amazingly\",\"ambassador\",\"ambassadorial\",\"amber\",\"ambiguity\",\"ambiguous\",\"ambition\",\"ambitious\",\"ambitiously\",\"ambivalence\",\"ambivalent\",\"ambrose\",\"ambush\",\"ambushment\",\"ambulatory\",\"ambulate\",\"ambulation\",\"ambulance\",\"ambulate\",\"ambulatory\",\"ambulatory\",\"ambulatory\",\"ambulatory\"]",
        "output": "['a7m', 'a8s', 'all5r', 'a9c', 'alg3a', 'ala3a', 'a5n', 'al6s', 'alc5t', 'alc3y', 'alert', 'alf3a', 'a7c', 'algorithmically', 'algorithmically', 'a3i', 'alien', 'a4t', 'align', 'ali5t', 'alk4e', 'a6d', 'a4i', 'allay', 'all2d', 'a10n', 'all4e', 'allot', 'a3w', 'all5e', 'alloy', 'allude', 'allure', 'a2y', 'a5c', 'a6y', 'alm2d', 'a2e', 'aloft', 'al2e', 'a3g', 'alo5e', 'a3f', 'a3d', 'alp4t', 'a10l', 'alp7e', 'alr3y', 'a5t', 'also', 'altar', 'alter', 'al7n', 'alt7e', 'a6h', 'alt5r', 'alt4e', 'alto', 'alt4m', 'alt4t', 'a8c', 'alu4m', 'a4s', 'a3s', 'a5r', 'a8h', 'am4y', 'am2e', 'am3d', 'am6t', 'a5g', 'ama5y', 'a8r', 'a11l', 'am2r', 'amb5y', 'ambig3s', 'a6n', 'ambit3s', 'a9y', 'am8e', 'ambi5t', 'a5e', 'a4h', 'ambu5t', 'ambulatory', 'ambulate', 'am7n', 'am6e', 'ambulate', 'ambulatory', 'ambulatory', 'ambulatory', 'ambulatory']"
      },
      {
        "input": "words = [\"caterpillar\",\"category\",\"cater\",\"catapult\",\"caterwaul\",\"catalog\"]",
        "output": "['c9r', 'c6y', 'c3r', 'c6t', 'c7l', 'c5g']"
      },
      {
        "input": "words = [\"configuration\",\"conflict\",\"congratulations\",\"congruity\",\"congruence\",\"congratulate\",\"congregate\",\"congruity\"]",
        "output": "['c11n', 'c6t', 'c13s', 'congruity', 'congru3e', 'c10e', 'congre3e', 'congruity']"
      },
      {
        "input": "words = [\"characterization\",\"character\",\"charisma\",\"charm\",\"charter\",\"chase\",\"chase\",\"chat\",\"cheap\",\"cheat\"]",
        "output": "['c14n', 'c7r', 'c6a', 'c3m', 'c5r', 'chase', 'chase', 'c2t', 'c3p', 'c3t']"
      },
      {
        "input": "words = [\"algorithm\",\"algorithmic\",\"algorithmically\",\"algorithmics\",\"algorithmical\",\"algorithmization\",\"algorithmize\",\"algorithmizer\",\"algorithmizers\",\"algorithmizerx\"]",
        "output": "['a7m', 'a9c', 'a13y', 'a10s', 'a11l', 'a14n', 'a10e', 'a11r', 'a12s', 'a12x']"
      },
      {
        "input": "words = [\"ambiguity\",\"ambiguities\",\"ambiguous\",\"ambiguously\",\"ambiguify\"]",
        "output": "['ambiguity', 'a9s', 'a7s', 'a9y', 'ambiguify']"
      },
      {
        "input": "words = [\"xylophone\",\"xylophonist\",\"xylophones\",\"xylophonic\",\"xylophone\",\"xylophoneist\"]",
        "output": "['xylophone', 'x9t', 'x8s', 'x8c', 'xylophone', 'x10t']"
      },
      {
        "input": "words = [\"optimization\",\"optimizer\",\"optimize\",\"optimal\",\"optimally\",\"optimum\"]",
        "output": "['o10n', 'o7r', 'o6e', 'o5l', 'o7y', 'o5m']"
      },
      {
        "input": "words = [\"unpredictable\",\"unpredictably\",\"unpredicted\",\"unpredict\",\"unpredictive\",\"unpredictability\",\"unpredicting\"]",
        "output": "['u11e', 'u11y', 'u9d', 'u7t', 'u10e', 'u14y', 'u10g']"
      },
      {
        "input": "words = [\"development\",\"developer\",\"deviation\",\"device\",\"device\",\"devise\",\"devising\",\"devote\",\"devotion\",\"devour\"]",
        "output": "['d9t', 'd7r', 'd7n', 'device', 'device', 'devise', 'd6g', 'devote', 'd6n', 'd4r']"
      },
      {
        "input": "words = [\"photosynthesis\",\"photosynthesisers\",\"photosynthesizing\",\"photosynthetic\",\"photosynthesisism\"]",
        "output": "['p12s', 'p15s', 'p15g', 'p12c', 'p15m']"
      },
      {
        "input": "words = [\"abcdefgh\",\"abefghij\",\"abxyzuvw\",\"abcdexyz\",\"abcdeghj\"]",
        "output": "['a6h', 'abe4j', 'a6w', 'a6z', 'abc4j']"
      },
      {
        "input": "words = [\"environment\",\"envelop\",\"envelope\",\"envious\",\"evening\",\"event\",\"eventual\",\"every\",\"everyday\",\"evidence\"]",
        "output": "['e9t', 'e5p', 'en5e', 'e5s', 'e5g', 'e3t', 'e6l', 'e3y', 'e6y', 'ev5e']"
      },
      {
        "input": "words = [\"university\",\"universe\",\"unique\",\"unit\",\"unity\",\"unity\",\"unitary\",\"unified\",\"uniform\",\"unify\"]",
        "output": "['u8y', 'u6e', 'u4e', 'u2t', 'unity', 'unity', 'u5y', 'u5d', 'u5m', 'unify']"
      },
      {
        "input": "words = [\"recombination\",\"recombinant\",\"recombinase\",\"recombine\",\"recombinational\",\"recombinase\",\"recombination\"]",
        "output": "['recombination', 'r9t', 'recombinase', 'r7e', 'r13l', 'recombinase', 'recombination']"
      },
      {
        "input": "words = [\"qwertyuiop\",\"qazwsxedcrfvtgbyhnujmiklop\",\"qwertyuiopasdfghjklzxcvbnm\",\"qwertyuiopasdfghjklzxcvbn\",\"qwertyuiopasdfghjklzxcvb\",\"qwertyuiopasdfghjklzxcv\",\"qwertyuiopasdfghjklzxc\",\"qwertyuiopasdfghjklzx\",\"qwertyuiopasdfghjklz\",\"qwertyuiopasdfghjkl\"]",
        "output": "['q8p', 'q24p', 'q24m', 'q23n', 'q22b', 'q21v', 'q20c', 'q19x', 'q18z', 'q17l']"
      },
      {
        "input": "words = [\"metabolism\",\"metabolisms\",\"metabolic\",\"metabolize\",\"metabolized\",\"metabolizing\",\"metabolizes\",\"metabolism\"]",
        "output": "['metabolism', 'metabolisms', 'm7c', 'm8e', 'm9d', 'm10g', 'metabolizes', 'metabolism']"
      },
      {
        "input": "words = [\"repetition\",\"repetitive\",\"repetitions\",\"repetitively\",\"repertoire\",\"repeat\"]",
        "output": "['r8n', 'repet4e', 'r9s', 'r10y', 'reper4e', 'r4t']"
      },
      {
        "input": "words = [\"prefix\",\"prepend\",\"presume\",\"prelude\",\"prevent\",\"preach\",\"pressure\"]",
        "output": "['p4x', 'p5d', 'pres2e', 'prel2e', 'p5t', 'p4h', 'p6e']"
      },
      {
        "input": "words = [\"algorithm\",\"algebra\",\"analysis\",\"alibi\",\"aloe\",\"alpaca\"]",
        "output": "['a7m', 'a5a', 'a6s', 'a3i', 'a2e', 'a4a']"
      },
      {
        "input": "words = [\"descriptive\",\"description\",\"descriptors\",\"describe\",\"described\",\"describing\"]",
        "output": "['d9e', 'd9n', 'd9s', 'd6e', 'd7d', 'd8g']"
      },
      {
        "input": "words = [\"congratulations\",\"congratulate\",\"congratulated\",\"congratulating\",\"congratulatory\"]",
        "output": "['c13s', 'c10e', 'c11d', 'c12g', 'c12y']"
      },
      {
        "input": "words = [\"incomprehensibilities\",\"incomprehensibility\",\"incomprehensible\",\"incomprehensibleness\",\"incomprehensibles\"]",
        "output": "['i19s', 'i17y', 'i14e', 'i18s', 'i15s']"
      },
      {
        "input": "words = [\"transport\",\"transformation\",\"transform\",\"transient\",\"transition\",\"transit\",\"transplant\",\"transpose\",\"transport\",\"transpose\"]",
        "output": "['transport', 't12n', 't7m', 'transi2t', 't8n', 't5t', 't8t', 'transpose', 'transport', 'transpose']"
      },
      {
        "input": "words = [\"sequence\",\"sequential\",\"sequencer\",\"sequences\",\"sequencing\"]",
        "output": "['s6e', 's8l', 's7r', 's7s', 's8g']"
      },
      {
        "input": "words = [\"abcdefghijklmnopqrstuvwxyz\",\"abcdefghijklmnopqrstuvwxyz\",\"abcdefghijklmnopqrstuvwxyz\",\"abcdefghijklmnopqrstuvwxyz\",\"abcdefghijklmnopqrstuvwxyz\",\"abcdefghijklmnopqrstuvwxyz\",\"abcdefghijklmnopqrstuvwxyz\",\"abcdefghijklmnopqrstuvwxyz\"]",
        "output": "['abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz']"
      },
      {
        "input": "words = [\"unbelievable\",\"unbelievably\",\"unbelieving\",\"unbelievable\",\"unbelievably\",\"unbelievingly\"]",
        "output": "['unbelievable', 'unbelievably', 'u9g', 'unbelievable', 'unbelievably', 'u11y']"
      },
      {
        "input": "words = [\"encyclopedia\",\"encyclopedias\",\"encyclopedia\",\"encyclopedic\",\"encyclopedically\",\"encyclopedia\",\"encyclopedia\",\"encyclopedia\"]",
        "output": "['encyclopedia', 'e11s', 'encyclopedia', 'e10c', 'e14y', 'encyclopedia', 'encyclopedia', 'encyclopedia']"
      },
      {
        "input": "words = [\"supercalifragilisticexpialidocious\",\"supercalifragilisticexpialidociously\",\"supercalifragilisticexpialidociousness\",\"supercalifragilisticexpialidocioussness\",\"supercalifragilisticexpialidociousness\"]",
        "output": "['s32s', 's34y', 'supercalifragilisticexpialidociousness', 's37s', 'supercalifragilisticexpialidociousness']"
      },
      {
        "input": "words = [\"abcdefghij\",\"abcdefghijk\",\"abcdefghijkl\",\"abcdefghijklm\",\"abcdefghijklmn\",\"abcdefghijklmnop\",\"abcdefghijklmnopq\",\"abcdefghijklmnopqr\",\"abcdefghijklmnopqrs\",\"abcdefghijklmnopqrst\"]",
        "output": "['a8j', 'a9k', 'a10l', 'a11m', 'a12n', 'a14p', 'a15q', 'a16r', 'a17s', 'a18t']"
      },
      {
        "input": "words = [\"longword\",\"longwording\",\"longworded\",\"longworder\",\"longworden\"]",
        "output": "['l6d', 'l9g', 'l8d', 'l8r', 'l8n']"
      },
      {
        "input": "words = [\"algorithm\",\"algorithms\",\"algebra\",\"algorithmically\",\"alibi\",\"altruism\"]",
        "output": "['a7m', 'a8s', 'a5a', 'a13y', 'a3i', 'a6m']"
      },
      {
        "input": "words = [\"responsibility\",\"responsible\",\"responsibilities\",\"responsibility\",\"respond\",\"response\"]",
        "output": "['responsibility', 'r9e', 'r14s', 'responsibility', 'r5d', 'r6e']"
      },
      {
        "input": "words = [\"parallel\",\"paralleled\",\"parentheses\",\"parent\",\"partisan\",\"partake\"]",
        "output": "['p6l', 'p8d', 'p9s', 'p4t', 'p6n', 'p5e']"
      },
      {
        "input": "words = [\"communication\",\"commune\",\"communal\",\"comment\",\"commerce\",\"commodity\",\"commit\",\"committee\",\"common\",\"communist\"]",
        "output": "['c11n', 'c5e', 'c6l', 'c5t', 'c6e', 'c7y', 'c4t', 'c7e', 'c4n', 'c7t']"
      },
      {
        "input": "words = [\"abacaxi\",\"banana\",\"abacax\",\"bacana\",\"abacaxix\",\"bacaxa\",\"bacaxi\",\"bacanaa\",\"bacanab\",\"bacanac\"]",
        "output": "['a5i', 'ban2a', 'a4x', 'bacana', 'a6x', 'bacaxa', 'b4i', 'b5a', 'b5b', 'b5c']"
      },
      {
        "input": "words = [\"communication\",\"communicate\",\"communicator\",\"communications\",\"communicative\",\"communicatory\"]",
        "output": "['c11n', 'c9e', 'c10r', 'c12s', 'c11e', 'c11y']"
      },
      {
        "input": "words = [\"antidisestablishmentarianism\",\"antidisestablishmentarianisms\",\"antidisestablishmentarianist\",\"antidisestablishmentarianists\",\"antidisestablishmentarianize\"]",
        "output": "['a26m', 'antidisestablishmentarianisms', 'a26t', 'antidisestablishmentarianists', 'a26e']"
      },
      {
        "input": "words = [\"abracadabra\",\"abrakadabre\",\"abracadabba\",\"abracadabro\",\"abracadabri\"]",
        "output": "['abracadabra', 'a9e', 'abracadabba', 'a9o', 'a9i']"
      },
      {
        "input": "words = [\"abcdexyz\",\"abcdefxy\",\"abcdezyx\",\"abcdefyz\",\"abcdexyx\",\"abcdefxz\",\"abcdefzy\",\"abcdefyx\"]",
        "output": "['abcdexyz', 'abcdefxy', 'abcdezyx', 'abcdefyz', 'abcdexyx', 'abcdefxz', 'abcdefzy', 'abcdefyx']"
      },
      {
        "input": "words = [\"abbreviation\",\"abbreviate\",\"abbreviated\",\"abbreviating\",\"abbreviation\",\"abbreviations\",\"abbreviates\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\",\"abbreviations\"]",
        "output": "['abbreviation', 'a8e', 'a9d', 'a10g', 'abbreviation', 'abbreviations', 'a9s', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations', 'abbreviations']"
      },
      {
        "input": "words = [\"computer\",\"computing\",\"compute\",\"computation\",\"computational\",\"computerize\"]",
        "output": "['c6r', 'c7g', 'c5e', 'c9n', 'c11l', 'c9e']"
      },
      {
        "input": "words = [\"dictionary\",\"diction\",\"diet\",\"died\",\"dialogue\",\"dial\",\"dietary\",\"dioxide\"]",
        "output": "['d8y', 'd5n', 'd2t', 'd2d', 'd6e', 'd2l', 'd5y', 'd5e']"
      },
      {
        "input": "words = [\"hello\",\"hallo\",\"hullo\",\"hella\",\"hollo\",\"heilo\"]",
        "output": "['hello', 'ha2o', 'hu2o', 'h3a', 'ho2o', 'heilo']"
      },
      {
        "input": "words = [\"abbreviation\",\"abbreviate\",\"abacus\",\"abdomen\",\"abdominal\",\"abduct\",\"abduction\",\"aberration\"]",
        "output": "['a10n', 'a8e', 'a4s', 'a5n', 'a7l', 'a4t', 'a7n', 'a8n']"
      },
      {
        "input": "words = [\"environment\",\"enormous\",\"enthusiasm\",\"enterprise\",\"entertainment\",\"entitle\",\"entrance\",\"entranceway\"]",
        "output": "['e9t', 'e6s', 'e8m', 'e8e', 'e11t', 'e5e', 'e6e', 'e9y']"
      },
      {
        "input": "words = [\"development\",\"developments\",\"developer\",\"develop\",\"developing\"]",
        "output": "['d9t', 'd10s', 'd7r', 'd5p', 'd8g']"
      },
      {
        "input": "words = [\"distinct\",\"distingu\",\"distinguisher\",\"distinguishing\",\"distinguished\"]",
        "output": "['d6t', 'd6u', 'd11r', 'd12g', 'd11d']"
      },
      {
        "input": "words = [\"abbreviation\",\"abbreviate\",\"abridge\",\"abrupt\",\"absent\",\"absolute\",\"absorb\",\"abstract\",\"absurd\",\"abundant\"]",
        "output": "['a10n', 'a8e', 'a5e', 'abr2t', 'abs2t', 'a6e', 'a4b', 'abs4t', 'a4d', 'abu4t']"
      },
      {
        "input": "words = [\"distinct\",\"distinguish\",\"distance\",\"distant\",\"dismantle\",\"disorder\",\"disaster\",\"disagree\"]",
        "output": "['d6t', 'd9h', 'dist3e', 'd5t', 'd7e', 'diso3r', 'disa3r', 'disa3e']"
      },
      {
        "input": "words = [\"university\",\"universe\",\"uniform\",\"unique\",\"unit\",\"unity\",\"unite\",\"universal\"]",
        "output": "['u8y', 'u6e', 'u5m', 'u4e', 'u2t', 'u3y', 'u3e', 'u7l']"
      },
      {
        "input": "words = [\"quantum\",\"quantitative\",\"quantization\",\"quantified\",\"quantifiable\",\"quantify\",\"quantifies\",\"quantifying\"]",
        "output": "['q5m', 'quantit4e', 'q10n', 'q8d', 'quantif4e', 'q6y', 'q8s', 'q9g']"
      },
      {
        "input": "words = [\"same\",\"sames\",\"samese\",\"samesea\",\"sameseas\",\"sameseasi\",\"sameseasiy\",\"sameseasiys\",\"sameseasiyst\",\"sameseasiyste\",\"sameseasiystes\",\"sameseasiystess\",\"sameseasiystesss\",\"sameseasiystesssa\",\"sameseasiystesssan\",\"sameseasiystesssanc\"]",
        "output": "['s2e', 's3s', 's4e', 's5a', 's6s', 's7i', 's8y', 's9s', 's10t', 's11e', 's12s', 's13s', 's14s', 's15a', 's16n', 's17c']"
      },
      {
        "input": "words = [\"abracadabra\",\"abracadabrat\",\"abracadabrator\",\"abracadabratory\",\"abracadabras\"]",
        "output": "['a9a', 'a10t', 'a12r', 'a13y', 'a10s']"
      },
      {
        "input": "words = [\"complex\",\"complexity\",\"complexer\",\"complexify\",\"complexed\"]",
        "output": "['c5x', 'complexity', 'c7r', 'complexify', 'c7d']"
      },
      {
        "input": "words = [\"unbelievable\",\"unbelievably\",\"unbeliever\",\"unbelievers\",\"unbelief\"]",
        "output": "['u10e', 'u10y', 'u8r', 'u9s', 'u6f']"
      },
      {
        "input": "words = [\"short\",\"shorthand\",\"shot\",\"shore\",\"show\",\"shoreline\",\"shower\"]",
        "output": "['s3t', 's7d', 's2t', 's3e', 's2w', 's7e', 's4r']"
      },
      {
        "input": "words = [\"establishment\",\"establish\",\"estABLishment\",\"estimated\",\"establisher\"]",
        "output": "Error: list index out of range"
      },
      {
        "input": "words = [\"unbelievable\",\"unbelievably\",\"unbeliever\",\"unbelievable\",\"unbelieving\"]",
        "output": "['unbelievable', 'u10y', 'u8r', 'unbelievable', 'u9g']"
      }
    ]
  },
  {
    "id": 282,
    "difficulty": "Hard",
    "tags": [
      "Math",
      "String",
      "Backtracking"
    ],
    "problemDescription": "Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.\nNote that operands in the returned expressions should not contain leading zeros.\n\u00a0\nExample 1:\n\nInput: num = \"123\", target = 6\nOutput: [\"1*2*3\",\"1+2+3\"]\nExplanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.\n\nExample 2:\n\nInput: num = \"232\", target = 8\nOutput: [\"2*3+2\",\"2+3*2\"]\nExplanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.\n\nExample 3:\n\nInput: num = \"3456237490\", target = 9191\nOutput: []\nExplanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.\n\n\u00a0\nConstraints:\n\n1 <= num.length <= 10\nnum consists of only digits.\n-231 <= target <= 231 - 1\n\n",
    "starterCode": "class Solution:\n    def addOperators(self, num: str, target: int) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "num = \"232\", target = 8",
        "output": "['2+3*2', '2*3+2']"
      },
      {
        "input": "num = \"123\", target = 6",
        "output": "['1+2+3', '1*2*3']"
      },
      {
        "input": "num = \"00\", target = 0",
        "output": "['0+0', '0-0', '0*0']"
      },
      {
        "input": "num = \"105\", target = 5",
        "output": "['1*0+5', '10-5']"
      },
      {
        "input": "num = \"3\", target = 3",
        "output": "['3']"
      },
      {
        "input": "num = \"34\", target = 14",
        "output": "[]"
      },
      {
        "input": "num = \"3456237490\", target = 9191",
        "output": "[]"
      },
      {
        "input": "num = \"12\", target = 3",
        "output": "['1+2']"
      },
      {
        "input": "num = \"0105\", target = 5",
        "output": "['0+1*0+5', '0-1*0+5', '0*1+0+5', '0*1-0+5', '0*1*0+5', '0+10-5', '0*10+5']"
      },
      {
        "input": "num = \"123456789\", target = 100",
        "output": "['1+2+3+4+5+6+7+8*9', '1+2+3-4+5+6+78+9', '1+2+3-4*5+6*7+8*9', '1+2+3*4-5-6+7+89', '1+2+3-45+67+8*9', '1+2-3*4+5*6+7+8*9', '1+2-3*4-5+6*7+8*9', '1+2*3+4+5+67+8+9', '1+2*3+4*5-6+7+8*9', '1+2*3-4-5+6+7+89', '1+2+34-5+67-8+9', '1+2+34*5+6-7-8*9', '1+2*34-56+78+9', '1-2+3*4+5+67+8+9', '1-2+3*4*5+6*7+8-9', '1-2+3*4*5-6+7*8-9', '1-2+3+45+6+7*8-9', '1-2-3+4*5+67+8+9', '1-2-3+45+6*7+8+9', '1-2-3+45-6+7*8+9', '1-2-3+45-6-7+8*9', '1-2*3+4*5+6+7+8*9', '1-2*3-4+5*6+7+8*9', '1-2*3-4-5+6*7+8*9', '1-2-34+56+7+8*9', '1*2+3+4*5+6+78-9', '1*2+3-4+5*6+78-9', '1*2+3*4+5-6+78+9', '1*2+3+45+67-8-9', '1*2-3+4-5+6+7+89', '1*2-3+4*5-6+78+9', '1*2*3+4+5+6+7+8*9', '1*2*3-4+5+6+78+9', '1*2*3-4*5+6*7+8*9', '1*2*3*4+5+6+7*8+9', '1*2*3*4+5+6-7+8*9', '1*2*3*4-5-6+78+9', '1*2*3-45+67+8*9', '1*2+34+5+6*7+8+9', '1*2+34+5-6+7*8+9', '1*2+34+5-6-7+8*9', '1*2+34+56+7-8+9', '1*2*34+56-7-8-9', '1+23-4+5+6+78-9', '1+23-4-5+6+7+8*9', '1+23-4+56+7+8+9', '1+23*4+5-6+7-8+9', '1+23*4-5+6+7+8-9', '1-23+4*5+6+7+89', '1-23-4+5*6+7+89', '1-23-4-5+6*7+89', '1*23+4+5+67-8+9', '1*23-4+5-6-7+89', '1+234-56-7-8*9', '1*234+5-67-8*9', '12+3+4+5-6-7+89', '12+3-4+5+67+8+9', '12+3*4+5+6+7*8+9', '12+3*4+5+6-7+8*9', '12+3*4-5-6+78+9', '12+3*45+6*7-89', '12-3+4*5+6+7*8+9', '12-3+4*5+6-7+8*9', '12-3-4+5-6+7+89', '12-3-4+5*6+7*8+9', '12-3-4+5*6-7+8*9', '12*3-4+5-6+78-9', '12*3-4-5-6+7+8*9', '12*3-4*5+67+8+9', '12+34+5*6+7+8+9', '12+34-5+6*7+8+9', '12+34-5-6+7*8+9', '12+34-5-6-7+8*9', '123+4-5+67-89', '123+4*5-6*7+8-9', '123-4-5-6-7+8-9', '123+45-67+8-9', '123-45-67+89']"
      },
      {
        "input": "num = \"10000\", target = 1",
        "output": "['1+0+0+0+0', '1+0+0+0-0', '1+0+0+0*0', '1+0+0-0+0', '1+0+0-0-0', '1+0+0-0*0', '1+0+0*0+0', '1+0+0*0-0', '1+0+0*0*0', '1+0-0+0+0', '1+0-0+0-0', '1+0-0+0*0', '1+0-0-0+0', '1+0-0-0-0', '1+0-0-0*0', '1+0-0*0+0', '1+0-0*0-0', '1+0-0*0*0', '1+0*0+0+0', '1+0*0+0-0', '1+0*0+0*0', '1+0*0-0+0', '1+0*0-0-0', '1+0*0-0*0', '1+0*0*0+0', '1+0*0*0-0', '1+0*0*0*0', '1-0+0+0+0', '1-0+0+0-0', '1-0+0+0*0', '1-0+0-0+0', '1-0+0-0-0', '1-0+0-0*0', '1-0+0*0+0', '1-0+0*0-0', '1-0+0*0*0', '1-0-0+0+0', '1-0-0+0-0', '1-0-0+0*0', '1-0-0-0+0', '1-0-0-0-0', '1-0-0-0*0', '1-0-0*0+0', '1-0-0*0-0', '1-0-0*0*0', '1-0*0+0+0', '1-0*0+0-0', '1-0*0+0*0', '1-0*0-0+0', '1-0*0-0-0', '1-0*0-0*0', '1-0*0*0+0', '1-0*0*0-0', '1-0*0*0*0']"
      },
      {
        "input": "num = \"9999999999\", target = 1000000000",
        "output": "[]"
      },
      {
        "input": "num = \"123456789\", target = 4321",
        "output": "[]"
      },
      {
        "input": "num = \"5050505050\", target = 5",
        "output": "Execution timed out"
      },
      {
        "input": "num = \"456\", target = 456",
        "output": "['456']"
      },
      {
        "input": "num = \"12345\", target = 30",
        "output": "['1+2*3*4+5']"
      },
      {
        "input": "num = \"1000000\", target = 1",
        "output": "['1+0+0+0+0+0+0', '1+0+0+0+0+0-0', '1+0+0+0+0+0*0', '1+0+0+0+0-0+0', '1+0+0+0+0-0-0', '1+0+0+0+0-0*0', '1+0+0+0+0*0+0', '1+0+0+0+0*0-0', '1+0+0+0+0*0*0', '1+0+0+0-0+0+0', '1+0+0+0-0+0-0', '1+0+0+0-0+0*0', '1+0+0+0-0-0+0', '1+0+0+0-0-0-0', '1+0+0+0-0-0*0', '1+0+0+0-0*0+0', '1+0+0+0-0*0-0', '1+0+0+0-0*0*0', '1+0+0+0*0+0+0', '1+0+0+0*0+0-0', '1+0+0+0*0+0*0', '1+0+0+0*0-0+0', '1+0+0+0*0-0-0', '1+0+0+0*0-0*0', '1+0+0+0*0*0+0', '1+0+0+0*0*0-0', '1+0+0+0*0*0*0', '1+0+0-0+0+0+0', '1+0+0-0+0+0-0', '1+0+0-0+0+0*0', '1+0+0-0+0-0+0', '1+0+0-0+0-0-0', '1+0+0-0+0-0*0', '1+0+0-0+0*0+0', '1+0+0-0+0*0-0', '1+0+0-0+0*0*0', '1+0+0-0-0+0+0', '1+0+0-0-0+0-0', '1+0+0-0-0+0*0', '1+0+0-0-0-0+0', '1+0+0-0-0-0-0', '1+0+0-0-0-0*0', '1+0+0-0-0*0+0', '1+0+0-0-0*0-0', '1+0+0-0-0*0*0', '1+0+0-0*0+0+0', '1+0+0-0*0+0-0', '1+0+0-0*0+0*0', '1+0+0-0*0-0+0', '1+0+0-0*0-0-0', '1+0+0-0*0-0*0', '1+0+0-0*0*0+0', '1+0+0-0*0*0-0', '1+0+0-0*0*0*0', '1+0+0*0+0+0+0', '1+0+0*0+0+0-0', '1+0+0*0+0+0*0', '1+0+0*0+0-0+0', '1+0+0*0+0-0-0', '1+0+0*0+0-0*0', '1+0+0*0+0*0+0', '1+0+0*0+0*0-0', '1+0+0*0+0*0*0', '1+0+0*0-0+0+0', '1+0+0*0-0+0-0', '1+0+0*0-0+0*0', '1+0+0*0-0-0+0', '1+0+0*0-0-0-0', '1+0+0*0-0-0*0', '1+0+0*0-0*0+0', '1+0+0*0-0*0-0', '1+0+0*0-0*0*0', '1+0+0*0*0+0+0', '1+0+0*0*0+0-0', '1+0+0*0*0+0*0', '1+0+0*0*0-0+0', '1+0+0*0*0-0-0', '1+0+0*0*0-0*0', '1+0+0*0*0*0+0', '1+0+0*0*0*0-0', '1+0+0*0*0*0*0', '1+0-0+0+0+0+0', '1+0-0+0+0+0-0', '1+0-0+0+0+0*0', '1+0-0+0+0-0+0', '1+0-0+0+0-0-0', '1+0-0+0+0-0*0', '1+0-0+0+0*0+0', '1+0-0+0+0*0-0', '1+0-0+0+0*0*0', '1+0-0+0-0+0+0', '1+0-0+0-0+0-0', '1+0-0+0-0+0*0', '1+0-0+0-0-0+0', '1+0-0+0-0-0-0', '1+0-0+0-0-0*0', '1+0-0+0-0*0+0', '1+0-0+0-0*0-0', '1+0-0+0-0*0*0', '1+0-0+0*0+0+0', '1+0-0+0*0+0-0', '1+0-0+0*0+0*0', '1+0-0+0*0-0+0', '1+0-0+0*0-0-0', '1+0-0+0*0-0*0', '1+0-0+0*0*0+0', '1+0-0+0*0*0-0', '1+0-0+0*0*0*0', '1+0-0-0+0+0+0', '1+0-0-0+0+0-0', '1+0-0-0+0+0*0', '1+0-0-0+0-0+0', '1+0-0-0+0-0-0', '1+0-0-0+0-0*0', '1+0-0-0+0*0+0', '1+0-0-0+0*0-0', '1+0-0-0+0*0*0', '1+0-0-0-0+0+0', '1+0-0-0-0+0-0', '1+0-0-0-0+0*0', '1+0-0-0-0-0+0', '1+0-0-0-0-0-0', '1+0-0-0-0-0*0', '1+0-0-0-0*0+0', '1+0-0-0-0*0-0', '1+0-0-0-0*0*0', '1+0-0-0*0+0+0', '1+0-0-0*0+0-0', '1+0-0-0*0+0*0', '1+0-0-0*0-0+0', '1+0-0-0*0-0-0', '1+0-0-0*0-0*0', '1+0-0-0*0*0+0', '1+0-0-0*0*0-0', '1+0-0-0*0*0*0', '1+0-0*0+0+0+0', '1+0-0*0+0+0-0', '1+0-0*0+0+0*0', '1+0-0*0+0-0+0', '1+0-0*0+0-0-0', '1+0-0*0+0-0*0', '1+0-0*0+0*0+0', '1+0-0*0+0*0-0', '1+0-0*0+0*0*0', '1+0-0*0-0+0+0', '1+0-0*0-0+0-0', '1+0-0*0-0+0*0', '1+0-0*0-0-0+0', '1+0-0*0-0-0-0', '1+0-0*0-0-0*0', '1+0-0*0-0*0+0', '1+0-0*0-0*0-0', '1+0-0*0-0*0*0', '1+0-0*0*0+0+0', '1+0-0*0*0+0-0', '1+0-0*0*0+0*0', '1+0-0*0*0-0+0', '1+0-0*0*0-0-0', '1+0-0*0*0-0*0', '1+0-0*0*0*0+0', '1+0-0*0*0*0-0', '1+0-0*0*0*0*0', '1+0*0+0+0+0+0', '1+0*0+0+0+0-0', '1+0*0+0+0+0*0', '1+0*0+0+0-0+0', '1+0*0+0+0-0-0', '1+0*0+0+0-0*0', '1+0*0+0+0*0+0', '1+0*0+0+0*0-0', '1+0*0+0+0*0*0', '1+0*0+0-0+0+0', '1+0*0+0-0+0-0', '1+0*0+0-0+0*0', '1+0*0+0-0-0+0', '1+0*0+0-0-0-0', '1+0*0+0-0-0*0', '1+0*0+0-0*0+0', '1+0*0+0-0*0-0', '1+0*0+0-0*0*0', '1+0*0+0*0+0+0', '1+0*0+0*0+0-0', '1+0*0+0*0+0*0', '1+0*0+0*0-0+0', '1+0*0+0*0-0-0', '1+0*0+0*0-0*0', '1+0*0+0*0*0+0', '1+0*0+0*0*0-0', '1+0*0+0*0*0*0', '1+0*0-0+0+0+0', '1+0*0-0+0+0-0', '1+0*0-0+0+0*0', '1+0*0-0+0-0+0', '1+0*0-0+0-0-0', '1+0*0-0+0-0*0', '1+0*0-0+0*0+0', '1+0*0-0+0*0-0', '1+0*0-0+0*0*0', '1+0*0-0-0+0+0', '1+0*0-0-0+0-0', '1+0*0-0-0+0*0', '1+0*0-0-0-0+0', '1+0*0-0-0-0-0', '1+0*0-0-0-0*0', '1+0*0-0-0*0+0', '1+0*0-0-0*0-0', '1+0*0-0-0*0*0', '1+0*0-0*0+0+0', '1+0*0-0*0+0-0', '1+0*0-0*0+0*0', '1+0*0-0*0-0+0', '1+0*0-0*0-0-0', '1+0*0-0*0-0*0', '1+0*0-0*0*0+0', '1+0*0-0*0*0-0', '1+0*0-0*0*0*0', '1+0*0*0+0+0+0', '1+0*0*0+0+0-0', '1+0*0*0+0+0*0', '1+0*0*0+0-0+0', '1+0*0*0+0-0-0', '1+0*0*0+0-0*0', '1+0*0*0+0*0+0', '1+0*0*0+0*0-0', '1+0*0*0+0*0*0', '1+0*0*0-0+0+0', '1+0*0*0-0+0-0', '1+0*0*0-0+0*0', '1+0*0*0-0-0+0', '1+0*0*0-0-0-0', '1+0*0*0-0-0*0', '1+0*0*0-0*0+0', '1+0*0*0-0*0-0', '1+0*0*0-0*0*0', '1+0*0*0*0+0+0', '1+0*0*0*0+0-0', '1+0*0*0*0+0*0', '1+0*0*0*0-0+0', '1+0*0*0*0-0-0', '1+0*0*0*0-0*0', '1+0*0*0*0*0+0', '1+0*0*0*0*0-0', '1+0*0*0*0*0*0', '1-0+0+0+0+0+0', '1-0+0+0+0+0-0', '1-0+0+0+0+0*0', '1-0+0+0+0-0+0', '1-0+0+0+0-0-0', '1-0+0+0+0-0*0', '1-0+0+0+0*0+0', '1-0+0+0+0*0-0', '1-0+0+0+0*0*0', '1-0+0+0-0+0+0', '1-0+0+0-0+0-0', '1-0+0+0-0+0*0', '1-0+0+0-0-0+0', '1-0+0+0-0-0-0', '1-0+0+0-0-0*0', '1-0+0+0-0*0+0', '1-0+0+0-0*0-0', '1-0+0+0-0*0*0', '1-0+0+0*0+0+0', '1-0+0+0*0+0-0', '1-0+0+0*0+0*0', '1-0+0+0*0-0+0', '1-0+0+0*0-0-0', '1-0+0+0*0-0*0', '1-0+0+0*0*0+0', '1-0+0+0*0*0-0', '1-0+0+0*0*0*0', '1-0+0-0+0+0+0', '1-0+0-0+0+0-0', '1-0+0-0+0+0*0', '1-0+0-0+0-0+0', '1-0+0-0+0-0-0', '1-0+0-0+0-0*0', '1-0+0-0+0*0+0', '1-0+0-0+0*0-0', '1-0+0-0+0*0*0', '1-0+0-0-0+0+0', '1-0+0-0-0+0-0', '1-0+0-0-0+0*0', '1-0+0-0-0-0+0', '1-0+0-0-0-0-0', '1-0+0-0-0-0*0', '1-0+0-0-0*0+0', '1-0+0-0-0*0-0', '1-0+0-0-0*0*0', '1-0+0-0*0+0+0', '1-0+0-0*0+0-0', '1-0+0-0*0+0*0', '1-0+0-0*0-0+0', '1-0+0-0*0-0-0', '1-0+0-0*0-0*0', '1-0+0-0*0*0+0', '1-0+0-0*0*0-0', '1-0+0-0*0*0*0', '1-0+0*0+0+0+0', '1-0+0*0+0+0-0', '1-0+0*0+0+0*0', '1-0+0*0+0-0+0', '1-0+0*0+0-0-0', '1-0+0*0+0-0*0', '1-0+0*0+0*0+0', '1-0+0*0+0*0-0', '1-0+0*0+0*0*0', '1-0+0*0-0+0+0', '1-0+0*0-0+0-0', '1-0+0*0-0+0*0', '1-0+0*0-0-0+0', '1-0+0*0-0-0-0', '1-0+0*0-0-0*0', '1-0+0*0-0*0+0', '1-0+0*0-0*0-0', '1-0+0*0-0*0*0', '1-0+0*0*0+0+0', '1-0+0*0*0+0-0', '1-0+0*0*0+0*0', '1-0+0*0*0-0+0', '1-0+0*0*0-0-0', '1-0+0*0*0-0*0', '1-0+0*0*0*0+0', '1-0+0*0*0*0-0', '1-0+0*0*0*0*0', '1-0-0+0+0+0+0', '1-0-0+0+0+0-0', '1-0-0+0+0+0*0', '1-0-0+0+0-0+0', '1-0-0+0+0-0-0', '1-0-0+0+0-0*0', '1-0-0+0+0*0+0', '1-0-0+0+0*0-0', '1-0-0+0+0*0*0', '1-0-0+0-0+0+0', '1-0-0+0-0+0-0', '1-0-0+0-0+0*0', '1-0-0+0-0-0+0', '1-0-0+0-0-0-0', '1-0-0+0-0-0*0', '1-0-0+0-0*0+0', '1-0-0+0-0*0-0', '1-0-0+0-0*0*0', '1-0-0+0*0+0+0', '1-0-0+0*0+0-0', '1-0-0+0*0+0*0', '1-0-0+0*0-0+0', '1-0-0+0*0-0-0', '1-0-0+0*0-0*0', '1-0-0+0*0*0+0', '1-0-0+0*0*0-0', '1-0-0+0*0*0*0', '1-0-0-0+0+0+0', '1-0-0-0+0+0-0', '1-0-0-0+0+0*0', '1-0-0-0+0-0+0', '1-0-0-0+0-0-0', '1-0-0-0+0-0*0', '1-0-0-0+0*0+0', '1-0-0-0+0*0-0', '1-0-0-0+0*0*0', '1-0-0-0-0+0+0', '1-0-0-0-0+0-0', '1-0-0-0-0+0*0', '1-0-0-0-0-0+0', '1-0-0-0-0-0-0', '1-0-0-0-0-0*0', '1-0-0-0-0*0+0', '1-0-0-0-0*0-0', '1-0-0-0-0*0*0', '1-0-0-0*0+0+0', '1-0-0-0*0+0-0', '1-0-0-0*0+0*0', '1-0-0-0*0-0+0', '1-0-0-0*0-0-0', '1-0-0-0*0-0*0', '1-0-0-0*0*0+0', '1-0-0-0*0*0-0', '1-0-0-0*0*0*0', '1-0-0*0+0+0+0', '1-0-0*0+0+0-0', '1-0-0*0+0+0*0', '1-0-0*0+0-0+0', '1-0-0*0+0-0-0', '1-0-0*0+0-0*0', '1-0-0*0+0*0+0', '1-0-0*0+0*0-0', '1-0-0*0+0*0*0', '1-0-0*0-0+0+0', '1-0-0*0-0+0-0', '1-0-0*0-0+0*0', '1-0-0*0-0-0+0', '1-0-0*0-0-0-0', '1-0-0*0-0-0*0', '1-0-0*0-0*0+0', '1-0-0*0-0*0-0', '1-0-0*0-0*0*0', '1-0-0*0*0+0+0', '1-0-0*0*0+0-0', '1-0-0*0*0+0*0', '1-0-0*0*0-0+0', '1-0-0*0*0-0-0', '1-0-0*0*0-0*0', '1-0-0*0*0*0+0', '1-0-0*0*0*0-0', '1-0-0*0*0*0*0', '1-0*0+0+0+0+0', '1-0*0+0+0+0-0', '1-0*0+0+0+0*0', '1-0*0+0+0-0+0', '1-0*0+0+0-0-0', '1-0*0+0+0-0*0', '1-0*0+0+0*0+0', '1-0*0+0+0*0-0', '1-0*0+0+0*0*0', '1-0*0+0-0+0+0', '1-0*0+0-0+0-0', '1-0*0+0-0+0*0', '1-0*0+0-0-0+0', '1-0*0+0-0-0-0', '1-0*0+0-0-0*0', '1-0*0+0-0*0+0', '1-0*0+0-0*0-0', '1-0*0+0-0*0*0', '1-0*0+0*0+0+0', '1-0*0+0*0+0-0', '1-0*0+0*0+0*0', '1-0*0+0*0-0+0', '1-0*0+0*0-0-0', '1-0*0+0*0-0*0', '1-0*0+0*0*0+0', '1-0*0+0*0*0-0', '1-0*0+0*0*0*0', '1-0*0-0+0+0+0', '1-0*0-0+0+0-0', '1-0*0-0+0+0*0', '1-0*0-0+0-0+0', '1-0*0-0+0-0-0', '1-0*0-0+0-0*0', '1-0*0-0+0*0+0', '1-0*0-0+0*0-0', '1-0*0-0+0*0*0', '1-0*0-0-0+0+0', '1-0*0-0-0+0-0', '1-0*0-0-0+0*0', '1-0*0-0-0-0+0', '1-0*0-0-0-0-0', '1-0*0-0-0-0*0', '1-0*0-0-0*0+0', '1-0*0-0-0*0-0', '1-0*0-0-0*0*0', '1-0*0-0*0+0+0', '1-0*0-0*0+0-0', '1-0*0-0*0+0*0', '1-0*0-0*0-0+0', '1-0*0-0*0-0-0', '1-0*0-0*0-0*0', '1-0*0-0*0*0+0', '1-0*0-0*0*0-0', '1-0*0-0*0*0*0', '1-0*0*0+0+0+0', '1-0*0*0+0+0-0', '1-0*0*0+0+0*0', '1-0*0*0+0-0+0', '1-0*0*0+0-0-0', '1-0*0*0+0-0*0', '1-0*0*0+0*0+0', '1-0*0*0+0*0-0', '1-0*0*0+0*0*0', '1-0*0*0-0+0+0', '1-0*0*0-0+0-0', '1-0*0*0-0+0*0', '1-0*0*0-0-0+0', '1-0*0*0-0-0-0', '1-0*0*0-0-0*0', '1-0*0*0-0*0+0', '1-0*0*0-0*0-0', '1-0*0*0-0*0*0', '1-0*0*0*0+0+0', '1-0*0*0*0+0-0', '1-0*0*0*0+0*0', '1-0*0*0*0-0+0', '1-0*0*0*0-0-0', '1-0*0*0*0-0*0', '1-0*0*0*0*0+0', '1-0*0*0*0*0-0', '1-0*0*0*0*0*0']"
      },
      {
        "input": "num = \"999\", target = 27",
        "output": "['9+9+9']"
      },
      {
        "input": "num = \"1000\", target = 0",
        "output": "['1*0+0+0', '1*0+0-0', '1*0+0*0', '1*0-0+0', '1*0-0-0', '1*0-0*0', '1*0*0+0', '1*0*0-0', '1*0*0*0', '10*0+0', '10*0-0', '10*0*0', '100*0']"
      },
      {
        "input": "num = \"12345\", target = 15",
        "output": "['1+2+3+4+5', '1-2*3+4*5', '1*2*3+4+5', '1+23-4-5']"
      },
      {
        "input": "num = \"55555\", target = 100",
        "output": "['5*5*5-5*5']"
      },
      {
        "input": "num = \"123456789\", target = 0",
        "output": "['1+2+3+4-5+67-8*9', '1+2+3-4*5+6+7-8+9', '1+2+3*4*5+6-78+9', '1+2-3*4+5-6-7+8+9', '1+2-3*4-5+6+7-8+9', '1+2-3*4+56-7*8+9', '1+2-3*4-56+7*8+9', '1+2-3*4-56-7+8*9', '1+2*3+4+5-6+7-8-9', '1+2*3-4-5-6+7-8+9', '1+2*3*4+5+6*7-8*9', '1+2*3*4+5-6-7-8-9', '1+2-34-56+78+9', '1-2+3+4-5*6+7+8+9', '1-2+3+4*5+67-89', '1-2+3-4*5-6+7+8+9', '1-2+3*4+5-6+7-8-9', '1-2+3*4*5+6+7-8*9', '1-2+3*4*5+6-7*8-9', '1-2+3*4*5-6*7-8-9', '1-2+3+45+6*7-89', '1-2+3-45+6*7-8+9', '1-2-3+4+5+67-8*9', '1-2-3+4-5-67+8*9', '1-2-3+4*5-6+7-8-9', '1-2-3*4-5-6+7+8+9', '1-2-3*4-56+78-9', '1-2-3+45+6-7*8+9', '1-2-3+45-6*7-8+9', '1-2*3+4+5+6+7-8-9', '1-2*3-4+5-6-7+8+9', '1-2*3-4-5+6+7-8+9', '1-2*3-4*5+6*7-8-9', '1-2*3-4+56-7*8+9', '1-2*3-4-56+7*8+9', '1-2*3-4-56-7+8*9', '1-2*3*4+5-6+7+8+9', '1-2*3*4-56+7+8*9', '1-2*3-45+67-8-9', '1-2-34+5+6+7+8+9', '1-2-34+5-6*7+8*9', '1-2-34-5*6+7*8+9', '1-2-34-5*6-7+8*9', '1*2+3+4+5-6-7+8-9', '1*2+3+4-5+6+7-8-9', '1*2+3+4*5-6*7+8+9', '1*2+3+4+56+7-8*9', '1*2+3+4+56-7*8-9', '1*2+3+4-56+7*8-9', '1*2+3-4-5-6-7+8+9', '1*2+3+45-67+8+9', '1*2-3+4-5-6+7-8+9', '1*2-3-4+5+6-7-8+9', '1*2-3-4+5-6+7+8-9', '1*2-3*4+5-67+8*9', '1*2*3+4-5+67-8*9', '1*2*3-4*5+6+7-8+9', '1*2*3*4-5*6+7+8-9', '1*2+34+5+6-7*8+9', '1*2+34+5-6*7-8+9', '1*2+34-5*6-7-8+9', '1*2-34+56-7-8-9', '1*2*34+5+6-7-8*9', '1*2*34-5+6-78+9', '1+23-4+5-6*7+8+9', '1+23-4-5*6-7+8+9', '1+23-4*5+6+7-8-9', '1+23-4*5*6+7+89', '1+23*4-5-6+7-89', '1-23+4*5-6+7-8+9', '1-23-4-56-7+89', '1-23*4*5+6*78-9', '1*23+4-5+67-89', '1*23+4*5-6*7+8-9', '1*23-4-5-6-7+8-9', '1*23+45-67+8-9', '1*23-45-67+89', '12+3+4-5-6-7+8-9', '12+3-4+5-6+7-8-9', '12+3-4*5-67+8*9', '12+3*4-5*6+7+8-9', '12+3-45+6+7+8+9', '12+3-45-6*7+8*9', '12-3+4+5+6-7-8-9', '12-3+4+56-78+9', '12-3-4-5+6-7-8+9', '12-3-4-5-6+7+8-9', '12-3*4+5+67-8*9', '12-3*4-5-67+8*9', '12*3+4-5*6+7-8-9', '12*3+4+56-7-89', '12*3-4*5-6+7-8-9', '12*3-4-56+7+8+9', '12*3*4-5-67-8*9', '12*3+45+6-78-9', '12+34-5+6-7*8+9', '12+34-5-6*7-8+9', '12+34-56-7+8+9', '12-34+5*6-7+8-9', '123-4-5-6*7-8*9']"
      },
      {
        "input": "num = \"2324\", target = 20",
        "output": "[]"
      },
      {
        "input": "num = \"1000000000\", target = 1",
        "output": "Execution timed out"
      },
      {
        "input": "num = \"9999999999\", target = 9999999999",
        "output": "['9999999999']"
      },
      {
        "input": "num = \"2020\", target = 4",
        "output": "['2+0+2+0', '2+0+2-0', '2-0+2+0', '2-0+2-0']"
      },
      {
        "input": "num = \"2147483647\", target = 2147483647",
        "output": "['2147483647']"
      },
      {
        "input": "num = \"5050\", target = 5000",
        "output": "[]"
      },
      {
        "input": "num = \"999999999\", target = 81",
        "output": "['9+9+9+9+9+9+9+9+9', '999-9-9-9-9*99', '999-9-9-9-99*9', '999-9-9-9*99-9', '999-9-9-99*9-9', '999-9-9*99-9-9', '999-9-99*9-9-9', '999-9*99-9-9-9', '999-99*9-9-9-9']"
      },
      {
        "input": "num = \"1230\", target = 3",
        "output": "['1+2+3*0', '1+2-3*0']"
      },
      {
        "input": "num = \"0123\", target = 6",
        "output": "['0+1+2+3', '0+1*2*3', '0*1+2*3']"
      },
      {
        "input": "num = \"2323\", target = 8",
        "output": "[]"
      },
      {
        "input": "num = \"54321\", target = 13",
        "output": "['5+4+3+2-1', '5*4-3*2-1']"
      },
      {
        "input": "num = \"1111111111\", target = 100",
        "output": "['1+1+1*111-1-1-11', '1+1+1*111-1-11-1', '1+1+1*111-11-1-1', '1+1-1+1*111-1-11', '1+1-1+1*111-11-1', '1+1-1-1+1*111-11', '1+1-1-1-1*11+111', '1+1-1-1*1-11+111', '1+1-1-1*1+111-11', '1+1-1-1-11+1*111', '1+1-1-1-11*1+111', '1+1-1-1-11+111*1', '1+1-1-1*11-1+111', '1+1-1-1*11+111-1', '1+1-1-1+111-1*11', '1+1-1-1+111*1-11', '1+1-1-1+111-11*1', '1+1-1*1-1-11+111', '1+1-1*1-1+111-11', '1+1-1*1-11-1+111', '1+1-1*1-11+111-1', '1+1-1*1+111-1-11', '1+1-1*1+111-11-1', '1+1-1-11+1*111-1', '1+1-1-11-1+1*111', '1+1-1-11-1*1+111', '1+1-1-11-1+111*1', '1+1-1-11*1-1+111', '1+1-1-11*1+111-1', '1+1-1-11+111-1*1', '1+1-1-11+111*1-1', '1+1-1*11-1-1+111', '1+1-1*11-1+111-1', '1+1-1*11+111-1-1', '1+1-1+111-1-1*11', '1+1-1+111-1*1-11', '1+1-1+111-1-11*1', '1+1-1+111-1*11-1', '1+1-1+111*1-1-11', '1+1-1+111*1-11-1', '1+1-1+111-11-1*1', '1+1-1+111-11*1-1', '1+1*1-1-1-11+111', '1+1*1-1-1+111-11', '1+1*1-1-11-1+111', '1+1*1-1-11+111-1', '1+1*1-1+111-1-11', '1+1*1-1+111-11-1', '1+1*1*1*111-1-11', '1+1*1*1*111-11-1', '1+1*1-11-1-1+111', '1+1*1-11-1+111-1', '1+1*1-11+111-1-1', '1+1*1+111-1-1-11', '1+1*1+111-1-11-1', '1+1*1+111-11-1-1', '1+1*1*111-1-1*11', '1+1*1*111-1*1-11', '1+1*1*111-1-11*1', '1+1*1*111-1*11-1', '1+1*1*111*1-1-11', '1+1*1*111*1-11-1', '1+1*1*111-11-1*1', '1+1*1*111-11*1-1', '1+1-11+1*111-1-1', '1+1-11-1+1*111-1', '1+1-11-1-1+1*111', '1+1-11-1-1*1+111', '1+1-11-1-1+111*1', '1+1-11-1*1-1+111', '1+1-11-1*1+111-1', '1+1-11-1+111-1*1', '1+1-11-1+111*1-1', '1+1-11*1-1-1+111', '1+1-11*1-1+111-1', '1+1-11*1+111-1-1', '1+1-11+111-1-1*1', '1+1-11+111-1*1-1', '1+1-11+111*1-1-1', '1+1*11*11-11-11', '1+1+111-1-1-1*11', '1+1+111-1-1*1-11', '1+1+111-1-1-11*1', '1+1+111-1-1*11-1', '1+1+111-1*1-1-11', '1+1+111-1*1-11-1', '1+1+111-1-11-1*1', '1+1+111-1-11*1-1', '1+1+111-1*11-1-1', '1+1+111*1-1-1-11', '1+1+111*1-1-11-1', '1+1+111*1-11-1-1', '1+1+111-11-1-1*1', '1+1+111-11-1*1-1', '1+1+111-11*1-1-1', '1+1*111+1-1-1-11', '1+1*111+1-1-11-1', '1+1*111+1-11-1-1', '1+1*111-1+1-1-11', '1+1*111-1+1-11-1', '1+1*111-1-1+1-11', '1+1*111-1-1*1*11', '1+1*111-1-1-11+1', '1+1*111-1-1*11*1', '1+1*111-1*1-1*11', '1+1*111-1*1*1-11', '1+1*111-1*1-11*1', '1+1*111-1*1*11-1', '1+1*111-1-11+1-1', '1+1*111-1-11-1+1', '1+1*111-1-11*1*1', '1+1*111-1*11-1*1', '1+1*111-1*11*1-1', '1+1*111*1-1-1*11', '1+1*111*1-1*1-11', '1+1*111*1-1-11*1', '1+1*111*1-1*11-1', '1+1*111*1*1-1-11', '1+1*111*1*1-11-1', '1+1*111*1-11-1*1', '1+1*111*1-11*1-1', '1+1*111-11+1-1-1', '1+1*111-11-1+1-1', '1+1*111-11-1-1+1', '1+1*111-11-1*1*1', '1+1*111-11*1-1*1', '1+1*111-11*1*1-1', '1-1+1+1*111-1-11', '1-1+1+1*111-11-1', '1-1+1-1+1*111-11', '1-1+1-1-1*11+111', '1-1+1-1*1-11+111', '1-1+1-1*1+111-11', '1-1+1-1-11+1*111', '1-1+1-1-11*1+111', '1-1+1-1-11+111*1', '1-1+1-1*11-1+111', '1-1+1-1*11+111-1', '1-1+1-1+111-1*11', '1-1+1-1+111*1-11', '1-1+1-1+111-11*1', '1-1+1*1-1-11+111', '1-1+1*1-1+111-11', '1-1+1*1*1*111-11', '1-1+1*1-11-1+111', '1-1+1*1-11+111-1', '1-1+1*1+111-1-11', '1-1+1*1+111-11-1', '1-1+1*1*111-1*11', '1-1+1*1*111*1-11', '1-1+1*1*111-11*1', '1-1+1-11+1*111-1', '1-1+1-11-1+1*111', '1-1+1-11-1*1+111', '1-1+1-11-1+111*1', '1-1+1-11*1-1+111', '1-1+1-11*1+111-1', '1-1+1-11+111-1*1', '1-1+1-11+111*1-1', '1-1+1+111-1-1*11', '1-1+1+111-1*1-11', '1-1+1+111-1-11*1', '1-1+1+111-1*11-1', '1-1+1+111*1-1-11', '1-1+1+111*1-11-1', '1-1+1+111-11-1*1', '1-1+1+111-11*1-1', '1-1+1*111+1-1-11', '1-1+1*111+1-11-1', '1-1+1*111-1+1-11', '1-1+1*111-1*1*11', '1-1+1*111-1-11+1', '1-1+1*111-1*11*1', '1-1+1*111*1-1*11', '1-1+1*111*1*1-11', '1-1+1*111*1-11*1', '1-1+1*111-11+1-1', '1-1+1*111-11-1+1', '1-1+1*111-11*1*1', '1-1-1+1+1*111-11', '1-1-1+1-1*11+111', '1-1-1+1*1-11+111', '1-1-1+1*1+111-11', '1-1-1+1-11+1*111', '1-1-1+1-11*1+111', '1-1-1+1-11+111*1', '1-1-1+1+111-1*11', '1-1-1+1+111*1-11', '1-1-1+1+111-11*1', '1-1-1+1*111+1-11', '1-1-1+1*111-11+1', '1-1-1-1*11+1+111', '1-1-1-1*11+111+1', '1-1-1*1+1-11+111', '1-1-1*1+1+111-11', '1-1-1*1*1*11+111', '1-1-1*1-11+1+111', '1-1-1*1-11+111+1', '1-1-1*1*11+1*111', '1-1-1*1*11*1+111', '1-1-1*1*11+111*1', '1-1-1*1+111+1-11', '1-1-1*1+111-11+1', '1-1-1-11+1+1*111', '1-1-1-11+1*1+111', '1-1-1-11+1+111*1', '1-1-1-11+1*111+1', '1-1-1-11*1+1+111', '1-1-1-11*1+111+1', '1-1-1-11+111+1*1', '1-1-1-11+111*1+1', '1-1-1*11+1-1+111', '1-1-1*11+1*1*111', '1-1-1*11+1+111-1', '1-1-1*11+1*111*1', '1-1-1*11-1+1+111', '1-1-1*11-1+111+1', '1-1-1*11*1+1*111', '1-1-1*11*1*1+111', '1-1-1*11*1+111*1', '1-1-1*11+111+1-1', '1-1-1*11+111-1+1', '1-1-1*11+111*1*1', '1-1-1+111+1-1*11', '1-1-1+111+1*1-11', '1-1-1+111+1-11*1', '1-1-1+111-1*11+1', '1-1-1+111*1+1-11', '1-1-1+111*1-11+1', '1-1-1+111-11+1*1', '1-1-1+111-11*1+1', '1-1*1+1-1-11+111', '1-1*1+1-1+111-11', '1-1*1+1*1*111-11', '1-1*1+1-11-1+111', '1-1*1+1-11+111-1', '1-1*1+1+111-1-11', '1-1*1+1+111-11-1', '1-1*1+1*111-1*11', '1-1*1+1*111*1-11', '1-1*1+1*111-11*1', '1-1*1-1+1-11+111', '1-1*1-1+1+111-11', '1-1*1-1*1*11+111', '1-1*1-1-11+1+111', '1-1*1-1-11+111+1', '1-1*1-1*11+1*111', '1-1*1-1*11*1+111', '1-1*1-1*11+111*1', '1-1*1-1+111+1-11', '1-1*1-1+111-11+1', '1-1*1*1+1*111-11', '1-1*1*1-1*11+111', '1-1*1*1*1-11+111', '1-1*1*1*1+111-11', '1-1*1*1-11+1*111', '1-1*1*1-11*1+111', '1-1*1*1-11+111*1', '1-1*1*1*11-1+111', '1-1*1*1*11+111-1', '1-1*1*1+111-1*11', '1-1*1*1+111*1-11', '1-1*1*1+111-11*1', '1-1*1-11+1-1+111', '1-1*1-11+1*1*111', '1-1*1-11+1+111-1', '1-1*1-11+1*111*1', '1-1*1-11-1+1+111', '1-1*1-11-1+111+1', '1-1*1-11*1+1*111', '1-1*1-11*1*1+111', '1-1*1-11*1+111*1', '1-1*1-11+111+1-1', '1-1*1-11+111-1+1', '1-1*1-11+111*1*1', '1-1*1*11+1*111-1', '1-1*1*11-1+1*111', '1-1*1*11-1*1+111', '1-1*1*11-1+111*1', '1-1*1*11*1-1+111', '1-1*1*11*1+111-1', '1-1*1*11+111-1*1', '1-1*1*11+111*1-1', '1-1*1+111+1-1-11', '1-1*1+111+1-11-1', '1-1*1+111-1+1-11', '1-1*1+111-1*1*11', '1-1*1+111-1-11+1', '1-1*1+111-1*11*1', '1-1*1+111*1-1*11', '1-1*1+111*1*1-11', '1-1*1+111*1-11*1', '1-1*1+111-11+1-1', '1-1*1+111-11-1+1', '1-1*1+111-11*1*1', '1-1-11+1+1*111-1', '1-1-11+1-1+1*111', '1-1-11+1-1*1+111', '1-1-11+1-1+111*1', '1-1-11+1*1-1+111', '1-1-11+1*1*1*111', '1-1-11+1*1+111-1', '1-1-11+1*1*111*1', '1-1-11+1+111-1*1', '1-1-11+1+111*1-1', '1-1-11+1*111+1-1', '1-1-11+1*111-1+1', '1-1-11+1*111*1*1', '1-1-11-1+1+1*111', '1-1-11-1+1*1+111', '1-1-11-1+1+111*1', '1-1-11-1+1*111+1', '1-1-11-1*1+1+111', '1-1-11-1*1+111+1', '1-1-11-1+111+1*1', '1-1-11-1+111*1+1', '1-1-11*1+1-1+111', '1-1-11*1+1*1*111', '1-1-11*1+1+111-1', '1-1-11*1+1*111*1', '1-1-11*1-1+1+111', '1-1-11*1-1+111+1', '1-1-11*1*1+1*111', '1-1-11*1*1*1+111', '1-1-11*1*1+111*1', '1-1-11*1+111+1-1', '1-1-11*1+111-1+1', '1-1-11*1+111*1*1', '1-1-11+111+1-1*1', '1-1-11+111+1*1-1', '1-1-11+111-1+1*1', '1-1-11+111-1*1+1', '1-1-11+111*1+1-1', '1-1-11+111*1-1+1', '1-1-11+111*1*1*1', '1-1*11+1-1-1+111', '1-1*11+1-1+111-1', '1-1*11+1*1*111-1', '1-1*11+1+111-1-1', '1-1*11+1*111-1*1', '1-1*11+1*111*1-1', '1-1*11-1+1-1+111', '1-1*11-1+1*1*111', '1-1*11-1+1+111-1', '1-1*11-1+1*111*1', '1-1*11-1-1+1+111', '1-1*11-1-1+111+1', '1-1*11-1*1+1*111', '1-1*11-1*1*1+111', '1-1*11-1*1+111*1', '1-1*11-1+111+1-1', '1-1*11-1+111-1+1', '1-1*11-1+111*1*1', '1-1*11*1+1*111-1', '1-1*11*1-1+1*111', '1-1*11*1-1*1+111', '1-1*11*1-1+111*1', '1-1*11*1*1-1+111', '1-1*11*1*1+111-1', '1-1*11*1+111-1*1', '1-1*11*1+111*1-1', '1-1*11+11*11-11', '1-1*11-11+11*11', '1-1*11+111+1-1-1', '1-1*11+111-1+1-1', '1-1*11+111-1-1+1', '1-1*11+111-1*1*1', '1-1*11+111*1-1*1', '1-1*11+111*1*1-1', '1-1+111+1-1-1*11', '1-1+111+1-1*1-11', '1-1+111+1-1-11*1', '1-1+111+1-1*11-1', '1-1+111+1*1-1-11', '1-1+111+1*1-11-1', '1-1+111+1-11-1*1', '1-1+111+1-11*1-1', '1-1+111-1+1-1*11', '1-1+111-1+1*1-11', '1-1+111-1+1-11*1', '1-1+111-1-1*11+1', '1-1+111-1*1+1-11', '1-1+111-1*1*1*11', '1-1+111-1*1-11+1', '1-1+111-1*1*11*1', '1-1+111-1-11+1*1', '1-1+111-1-11*1+1', '1-1+111-1*11+1-1', '1-1+111-1*11-1+1', '1-1+111-1*11*1*1', '1-1+111*1+1-1-11', '1-1+111*1+1-11-1', '1-1+111*1-1+1-11', '1-1+111*1-1*1*11', '1-1+111*1-1-11+1', '1-1+111*1-1*11*1', '1-1+111*1*1-1*11', '1-1+111*1*1*1-11', '1-1+111*1*1-11*1', '1-1+111*1-11+1-1', '1-1+111*1-11-1+1', '1-1+111*1-11*1*1', '1-1+111-11+1-1*1', '1-1+111-11+1*1-1', '1-1+111-11-1+1*1', '1-1+111-11-1*1+1', '1-1+111-11*1+1-1', '1-1+111-11*1-1+1', '1-1+111-11*1*1*1', '1*1+1-1-1-11+111', '1*1+1-1-1+111-11', '1*1+1-1-11-1+111', '1*1+1-1-11+111-1', '1*1+1-1+111-1-11', '1*1+1-1+111-11-1', '1*1+1*1*111-1-11', '1*1+1*1*111-11-1', '1*1+1-11-1-1+111', '1*1+1-11-1+111-1', '1*1+1-11+111-1-1', '1*1+1+111-1-1-11', '1*1+1+111-1-11-1', '1*1+1+111-11-1-1', '1*1+1*111-1-1*11', '1*1+1*111-1*1-11', '1*1+1*111-1-11*1', '1*1+1*111-1*11-1', '1*1+1*111*1-1-11', '1*1+1*111*1-11-1', '1*1+1*111-11-1*1', '1*1+1*111-11*1-1', '1*1-1+1-1-11+111', '1*1-1+1-1+111-11', '1*1-1+1*1*111-11', '1*1-1+1-11-1+111', '1*1-1+1-11+111-1', '1*1-1+1+111-1-11', '1*1-1+1+111-11-1', '1*1-1+1*111-1*11', '1*1-1+1*111*1-11', '1*1-1+1*111-11*1', '1*1-1-1+1-11+111', '1*1-1-1+1+111-11', '1*1-1-1*1*11+111', '1*1-1-1-11+1+111', '1*1-1-1-11+111+1', '1*1-1-1*11+1*111', '1*1-1-1*11*1+111', '1*1-1-1*11+111*1', '1*1-1-1+111+1-11', '1*1-1-1+111-11+1', '1*1-1*1+1*111-11', '1*1-1*1-1*11+111', '1*1-1*1*1-11+111', '1*1-1*1*1+111-11', '1*1-1*1-11+1*111', '1*1-1*1-11*1+111', '1*1-1*1-11+111*1', '1*1-1*1*11-1+111', '1*1-1*1*11+111-1', '1*1-1*1+111-1*11', '1*1-1*1+111*1-11', '1*1-1*1+111-11*1', '1*1-1-11+1-1+111', '1*1-1-11+1*1*111', '1*1-1-11+1+111-1', '1*1-1-11+1*111*1', '1*1-1-11-1+1+111', '1*1-1-11-1+111+1', '1*1-1-11*1+1*111', '1*1-1-11*1*1+111', '1*1-1-11*1+111*1', '1*1-1-11+111+1-1', '1*1-1-11+111-1+1', '1*1-1-11+111*1*1', '1*1-1*11+1*111-1', '1*1-1*11-1+1*111', '1*1-1*11-1*1+111', '1*1-1*11-1+111*1', '1*1-1*11*1-1+111', '1*1-1*11*1+111-1', '1*1-1*11+111-1*1', '1*1-1*11+111*1-1', '1*1-1+111+1-1-11', '1*1-1+111+1-11-1', '1*1-1+111-1+1-11', '1*1-1+111-1*1*11', '1*1-1+111-1-11+1', '1*1-1+111-1*11*1', '1*1-1+111*1-1*11', '1*1-1+111*1*1-11', '1*1-1+111*1-11*1', '1*1-1+111-11+1-1', '1*1-1+111-11-1+1', '1*1-1+111-11*1*1', '1*1*1+1*111-1-11', '1*1*1+1*111-11-1', '1*1*1-1+1*111-11', '1*1*1-1-1*11+111', '1*1*1-1*1-11+111', '1*1*1-1*1+111-11', '1*1*1-1-11+1*111', '1*1*1-1-11*1+111', '1*1*1-1-11+111*1', '1*1*1-1*11-1+111', '1*1*1-1*11+111-1', '1*1*1-1+111-1*11', '1*1*1-1+111*1-11', '1*1*1-1+111-11*1', '1*1*1*1-1-11+111', '1*1*1*1-1+111-11', '1*1*1*1*1*111-11', '1*1*1*1-11-1+111', '1*1*1*1-11+111-1', '1*1*1*1+111-1-11', '1*1*1*1+111-11-1', '1*1*1*1*111-1*11', '1*1*1*1*111*1-11', '1*1*1*1*111-11*1', '1*1*1-11+1*111-1', '1*1*1-11-1+1*111', '1*1*1-11-1*1+111', '1*1*1-11-1+111*1', '1*1*1-11*1-1+111', '1*1*1-11*1+111-1', '1*1*1-11+111-1*1', '1*1*1-11+111*1-1', '1*1*1+111-1-1*11', '1*1*1+111-1*1-11', '1*1*1+111-1-11*1', '1*1*1+111-1*11-1', '1*1*1+111*1-1-11', '1*1*1+111*1-11-1', '1*1*1+111-11-1*1', '1*1*1+111-11*1-1', '1*1*1*111+1-1-11', '1*1*1*111+1-11-1', '1*1*1*111-1+1-11', '1*1*1*111-1*1*11', '1*1*1*111-1-11+1', '1*1*1*111-1*11*1', '1*1*1*111*1-1*11', '1*1*1*111*1*1-11', '1*1*1*111*1-11*1', '1*1*1*111-11+1-1', '1*1*1*111-11-1+1', '1*1*1*111-11*1*1', '1*1+11*11-11-11', '1*1-11+1-1-1+111', '1*1-11+1-1+111-1', '1*1-11+1*1*111-1', '1*1-11+1+111-1-1', '1*1-11+1*111-1*1', '1*1-11+1*111*1-1', '1*1-11-1+1-1+111', '1*1-11-1+1*1*111', '1*1-11-1+1+111-1', '1*1-11-1+1*111*1', '1*1-11-1-1+1+111', '1*1-11-1-1+111+1', '1*1-11-1*1+1*111', '1*1-11-1*1*1+111', '1*1-11-1*1+111*1', '1*1-11-1+111+1-1', '1*1-11-1+111-1+1', '1*1-11-1+111*1*1', '1*1-11*1+1*111-1', '1*1-11*1-1+1*111', '1*1-11*1-1*1+111', '1*1-11*1-1+111*1', '1*1-11*1*1-1+111', '1*1-11*1*1+111-1', '1*1-11*1+111-1*1', '1*1-11*1+111*1-1', '1*1-11+11*11-11', '1*1-11-11+11*11', '1*1-11+111+1-1-1', '1*1-11+111-1+1-1', '1*1-11+111-1-1+1', '1*1-11+111-1*1*1', '1*1-11+111*1-1*1', '1*1-11+111*1*1-1', '1*1+111+1-1-1-11', '1*1+111+1-1-11-1', '1*1+111+1-11-1-1', '1*1+111-1+1-1-11', '1*1+111-1+1-11-1', '1*1+111-1-1+1-11', '1*1+111-1-1*1*11', '1*1+111-1-1-11+1', '1*1+111-1-1*11*1', '1*1+111-1*1-1*11', '1*1+111-1*1*1-11', '1*1+111-1*1-11*1', '1*1+111-1*1*11-1', '1*1+111-1-11+1-1', '1*1+111-1-11-1+1', '1*1+111-1-11*1*1', '1*1+111-1*11-1*1', '1*1+111-1*11*1-1', '1*1+111*1-1-1*11', '1*1+111*1-1*1-11', '1*1+111*1-1-11*1', '1*1+111*1-1*11-1', '1*1+111*1*1-1-11', '1*1+111*1*1-11-1', '1*1+111*1-11-1*1', '1*1+111*1-11*1-1', '1*1+111-11+1-1-1', '1*1+111-11-1+1-1', '1*1+111-11-1-1+1', '1*1+111-11-1*1*1', '1*1+111-11*1-1*1', '1*1+111-11*1*1-1', '1*1*111+1-1-1*11', '1*1*111+1-1*1-11', '1*1*111+1-1-11*1', '1*1*111+1-1*11-1', '1*1*111+1*1-1-11', '1*1*111+1*1-11-1', '1*1*111+1-11-1*1', '1*1*111+1-11*1-1', '1*1*111-1+1-1*11', '1*1*111-1+1*1-11', '1*1*111-1+1-11*1', '1*1*111-1-1*11+1', '1*1*111-1*1+1-11', '1*1*111-1*1*1*11', '1*1*111-1*1-11+1', '1*1*111-1*1*11*1', '1*1*111-1-11+1*1', '1*1*111-1-11*1+1', '1*1*111-1*11+1-1', '1*1*111-1*11-1+1', '1*1*111-1*11*1*1', '1*1*111*1+1-1-11', '1*1*111*1+1-11-1', '1*1*111*1-1+1-11', '1*1*111*1-1*1*11', '1*1*111*1-1-11+1', '1*1*111*1-1*11*1', '1*1*111*1*1-1*11', '1*1*111*1*1*1-11', '1*1*111*1*1-11*1', '1*1*111*1-11+1-1', '1*1*111*1-11-1+1', '1*1*111*1-11*1*1', '1*1*111-11+1-1*1', '1*1*111-11+1*1-1', '1*1*111-11-1+1*1', '1*1*111-11-1*1+1', '1*1*111-11*1+1-1', '1*1*111-11*1-1+1', '1*1*111-11*1*1*1', '1+11*1*11-11-11', '1+11*11-1*11-11', '1+11*11*1-11-11', '1+11*11-11-1*11', '1+11*11-11*1-11', '1+11*11-11-11*1', '1-11+1+1*111-1-1', '1-11+1-1+1*111-1', '1-11+1-1-1+1*111', '1-11+1-1-1*1+111', '1-11+1-1-1+111*1', '1-11+1-1*1-1+111', '1-11+1-1*1+111-1', '1-11+1-1+111-1*1', '1-11+1-1+111*1-1', '1-11+1*1-1-1+111', '1-11+1*1-1+111-1', '1-11+1*1*1*111-1', '1-11+1*1+111-1-1', '1-11+1*1*111-1*1', '1-11+1*1*111*1-1', '1-11+1*11*11-11', '1-11+1+111-1-1*1', '1-11+1+111-1*1-1', '1-11+1+111*1-1-1', '1-11+1*111+1-1-1', '1-11+1*111-1+1-1', '1-11+1*111-1-1+1', '1-11+1*111-1*1*1', '1-11+1*111*1-1*1', '1-11+1*111*1*1-1', '1-11-1+1+1*111-1', '1-11-1+1-1+1*111', '1-11-1+1-1*1+111', '1-11-1+1-1+111*1', '1-11-1+1*1-1+111', '1-11-1+1*1*1*111', '1-11-1+1*1+111-1', '1-11-1+1*1*111*1', '1-11-1+1+111-1*1', '1-11-1+1+111*1-1', '1-11-1+1*111+1-1', '1-11-1+1*111-1+1', '1-11-1+1*111*1*1', '1-11-1-1+1+1*111', '1-11-1-1+1*1+111', '1-11-1-1+1+111*1', '1-11-1-1+1*111+1', '1-11-1-1*1+1+111', '1-11-1-1*1+111+1', '1-11-1-1+111+1*1', '1-11-1-1+111*1+1', '1-11-1*1+1-1+111', '1-11-1*1+1*1*111', '1-11-1*1+1+111-1', '1-11-1*1+1*111*1', '1-11-1*1-1+1+111', '1-11-1*1-1+111+1', '1-11-1*1*1+1*111', '1-11-1*1*1*1+111', '1-11-1*1*1+111*1', '1-11-1*1+111+1-1', '1-11-1*1+111-1+1', '1-11-1*1+111*1*1', '1-11-1*11+11*11', '1-11-1+111+1-1*1', '1-11-1+111+1*1-1', '1-11-1+111-1+1*1', '1-11-1+111-1*1+1', '1-11-1+111*1+1-1', '1-11-1+111*1-1+1', '1-11-1+111*1*1*1', '1-11*1+1-1-1+111', '1-11*1+1-1+111-1', '1-11*1+1*1*111-1', '1-11*1+1+111-1-1', '1-11*1+1*111-1*1', '1-11*1+1*111*1-1', '1-11*1-1+1-1+111', '1-11*1-1+1*1*111', '1-11*1-1+1+111-1', '1-11*1-1+1*111*1', '1-11*1-1-1+1+111', '1-11*1-1-1+111+1', '1-11*1-1*1+1*111', '1-11*1-1*1*1+111', '1-11*1-1*1+111*1', '1-11*1-1+111+1-1', '1-11*1-1+111-1+1', '1-11*1-1+111*1*1', '1-11*1*1+1*111-1', '1-11*1*1-1+1*111', '1-11*1*1-1*1+111', '1-11*1*1-1+111*1', '1-11*1*1*1-1+111', '1-11*1*1*1+111-1', '1-11*1*1+111-1*1', '1-11*1*1+111*1-1', '1-11*1+11*11-11', '1-11*1-11+11*11', '1-11*1+111+1-1-1', '1-11*1+111-1+1-1', '1-11*1+111-1-1+1', '1-11*1+111-1*1*1', '1-11*1+111*1-1*1', '1-11*1+111*1*1-1', '1-11+11*1*11-11', '1-11+11*11-1*11', '1-11+11*11*1-11', '1-11+11*11-11*1', '1-11-11+1*11*11', '1-11-11*1+11*11', '1-11-11+11*1*11', '1-11-11+11*11*1', '1-11+111+1-1-1*1', '1-11+111+1-1*1-1', '1-11+111+1*1-1-1', '1-11+111-1+1-1*1', '1-11+111-1+1*1-1', '1-11+111-1-1+1*1', '1-11+111-1-1*1+1', '1-11+111-1*1+1-1', '1-11+111-1*1-1+1', '1-11+111-1*1*1*1', '1-11+111*1+1-1-1', '1-11+111*1-1+1-1', '1-11+111*1-1-1+1', '1-11+111*1-1*1*1', '1-11+111*1*1-1*1', '1-11+111*1*1*1-1', '1*11-11-11+111', '1*11-11+111-11', '1*11*11+1-11-11', '1*11*11-11+1-11', '1*11*11-11-11+1', '1*11+111-11-11', '1+111+1-1-1-1*11', '1+111+1-1-1*1-11', '1+111+1-1-1-11*1', '1+111+1-1-1*11-1', '1+111+1-1*1-1-11', '1+111+1-1*1-11-1', '1+111+1-1-11-1*1', '1+111+1-1-11*1-1', '1+111+1-1*11-1-1', '1+111+1*1-1-1-11', '1+111+1*1-1-11-1', '1+111+1*1-11-1-1', '1+111+1-11-1-1*1', '1+111+1-11-1*1-1', '1+111+1-11*1-1-1', '1+111-1+1-1-1*11', '1+111-1+1-1*1-11', '1+111-1+1-1-11*1', '1+111-1+1-1*11-1', '1+111-1+1*1-1-11', '1+111-1+1*1-11-1', '1+111-1+1-11-1*1', '1+111-1+1-11*1-1', '1+111-1-1+1-1*11', '1+111-1-1+1*1-11', '1+111-1-1+1-11*1', '1+111-1-1-1*11+1', '1+111-1-1*1+1-11', '1+111-1-1*1*1*11', '1+111-1-1*1-11+1', '1+111-1-1*1*11*1', '1+111-1-1-11+1*1', '1+111-1-1-11*1+1', '1+111-1-1*11+1-1', '1+111-1-1*11-1+1', '1+111-1-1*11*1*1', '1+111-1*1+1-1-11', '1+111-1*1+1-11-1', '1+111-1*1-1+1-11', '1+111-1*1-1*1*11', '1+111-1*1-1-11+1', '1+111-1*1-1*11*1', '1+111-1*1*1-1*11', '1+111-1*1*1*1-11', '1+111-1*1*1-11*1', '1+111-1*1*1*11-1', '1+111-1*1-11+1-1', '1+111-1*1-11-1+1', '1+111-1*1-11*1*1', '1+111-1*1*11-1*1', '1+111-1*1*11*1-1', '1+111-1-11+1-1*1', '1+111-1-11+1*1-1', '1+111-1-11-1+1*1', '1+111-1-11-1*1+1', '1+111-1-11*1+1-1', '1+111-1-11*1-1+1', '1+111-1-11*1*1*1', '1+111-1*11+1-1-1', '1+111-1*11-1+1-1', '1+111-1*11-1-1+1', '1+111-1*11-1*1*1', '1+111-1*11*1-1*1', '1+111-1*11*1*1-1', '1+111*1+1-1-1-11', '1+111*1+1-1-11-1', '1+111*1+1-11-1-1', '1+111*1-1+1-1-11', '1+111*1-1+1-11-1', '1+111*1-1-1+1-11', '1+111*1-1-1*1*11', '1+111*1-1-1-11+1', '1+111*1-1-1*11*1', '1+111*1-1*1-1*11', '1+111*1-1*1*1-11', '1+111*1-1*1-11*1', '1+111*1-1*1*11-1', '1+111*1-1-11+1-1', '1+111*1-1-11-1+1', '1+111*1-1-11*1*1', '1+111*1-1*11-1*1', '1+111*1-1*11*1-1', '1+111*1*1-1-1*11', '1+111*1*1-1*1-11', '1+111*1*1-1-11*1', '1+111*1*1-1*11-1', '1+111*1*1*1-1-11', '1+111*1*1*1-11-1', '1+111*1*1-11-1*1', '1+111*1*1-11*1-1', '1+111*1-11+1-1-1', '1+111*1-11-1+1-1', '1+111*1-11-1-1+1', '1+111*1-11-1*1*1', '1+111*1-11*1-1*1', '1+111*1-11*1*1-1', '1+111-11+1-1-1*1', '1+111-11+1-1*1-1', '1+111-11+1*1-1-1', '1+111-11-1+1-1*1', '1+111-11-1+1*1-1', '1+111-11-1-1+1*1', '1+111-11-1-1*1+1', '1+111-11-1*1+1-1', '1+111-11-1*1-1+1', '1+111-11-1*1*1*1', '1+111-11*1+1-1-1', '1+111-11*1-1+1-1', '1+111-11*1-1-1+1', '1+111-11*1-1*1*1', '1+111-11*1*1-1*1', '1+111-11*1*1*1-1', '1*111+1+1-1-1-11', '1*111+1+1-1-11-1', '1*111+1+1-11-1-1', '1*111+1-1+1-1-11', '1*111+1-1+1-11-1', '1*111+1-1-1+1-11', '1*111+1-1-1*1*11', '1*111+1-1-1-11+1', '1*111+1-1-1*11*1', '1*111+1-1*1-1*11', '1*111+1-1*1*1-11', '1*111+1-1*1-11*1', '1*111+1-1*1*11-1', '1*111+1-1-11+1-1', '1*111+1-1-11-1+1', '1*111+1-1-11*1*1', '1*111+1-1*11-1*1', '1*111+1-1*11*1-1', '1*111+1*1-1-1*11', '1*111+1*1-1*1-11', '1*111+1*1-1-11*1', '1*111+1*1-1*11-1', '1*111+1*1*1-1-11', '1*111+1*1*1-11-1', '1*111+1*1-11-1*1', '1*111+1*1-11*1-1', '1*111+1-11+1-1-1', '1*111+1-11-1+1-1', '1*111+1-11-1-1+1', '1*111+1-11-1*1*1', '1*111+1-11*1-1*1', '1*111+1-11*1*1-1', '1*111-1+1+1-1-11', '1*111-1+1+1-11-1', '1*111-1+1-1+1-11', '1*111-1+1-1*1*11', '1*111-1+1-1-11+1', '1*111-1+1-1*11*1', '1*111-1+1*1-1*11', '1*111-1+1*1*1-11', '1*111-1+1*1-11*1', '1*111-1+1-11+1-1', '1*111-1+1-11-1+1', '1*111-1+1-11*1*1', '1*111-1-1+1+1-11', '1*111-1-1+1-11+1', '1*111-1-1*1*11+1', '1*111-1-1-11+1+1', '1*111-1-1*11+1*1', '1*111-1-1*11*1+1', '1*111-1*1+1-1*11', '1*111-1*1+1*1-11', '1*111-1*1+1-11*1', '1*111-1*1-1*11+1', '1*111-1*1*1+1-11', '1*111-1*1*1*1*11', '1*111-1*1*1-11+1', '1*111-1*1*1*11*1', '1*111-1*1-11+1*1', '1*111-1*1-11*1+1', '1*111-1*1*11+1-1', '1*111-1*1*11-1+1', '1*111-1*1*11*1*1', '1*111-1-11+1+1-1', '1*111-1-11+1-1+1', '1*111-1-11+1*1*1', '1*111-1-11-1+1+1', '1*111-1-11*1+1*1', '1*111-1-11*1*1+1', '1*111-1*11+1-1*1', '1*111-1*11+1*1-1', '1*111-1*11-1+1*1', '1*111-1*11-1*1+1', '1*111-1*11*1+1-1', '1*111-1*11*1-1+1', '1*111-1*11*1*1*1', '1*111*1+1-1-1*11', '1*111*1+1-1*1-11', '1*111*1+1-1-11*1', '1*111*1+1-1*11-1', '1*111*1+1*1-1-11', '1*111*1+1*1-11-1', '1*111*1+1-11-1*1', '1*111*1+1-11*1-1', '1*111*1-1+1-1*11', '1*111*1-1+1*1-11', '1*111*1-1+1-11*1', '1*111*1-1-1*11+1', '1*111*1-1*1+1-11', '1*111*1-1*1*1*11', '1*111*1-1*1-11+1', '1*111*1-1*1*11*1', '1*111*1-1-11+1*1', '1*111*1-1-11*1+1', '1*111*1-1*11+1-1', '1*111*1-1*11-1+1', '1*111*1-1*11*1*1', '1*111*1*1+1-1-11', '1*111*1*1+1-11-1', '1*111*1*1-1+1-11', '1*111*1*1-1*1*11', '1*111*1*1-1-11+1', '1*111*1*1-1*11*1', '1*111*1*1*1-1*11', '1*111*1*1*1*1-11', '1*111*1*1*1-11*1', '1*111*1*1-11+1-1', '1*111*1*1-11-1+1', '1*111*1*1-11*1*1', '1*111*1-11+1-1*1', '1*111*1-11+1*1-1', '1*111*1-11-1+1*1', '1*111*1-11-1*1+1', '1*111*1-11*1+1-1', '1*111*1-11*1-1+1', '1*111*1-11*1*1*1', '1*111+11-11-11', '1*111-11+1+1-1-1', '1*111-11+1-1+1-1', '1*111-11+1-1-1+1', '1*111-11+1-1*1*1', '1*111-11+1*1-1*1', '1*111-11+1*1*1-1', '1*111-11-1+1+1-1', '1*111-11-1+1-1+1', '1*111-11-1+1*1*1', '1*111-11-1-1+1+1', '1*111-11-1*1+1*1', '1*111-11-1*1*1+1', '1*111-11*1+1-1*1', '1*111-11*1+1*1-1', '1*111-11*1-1+1*1', '1*111-11*1-1*1+1', '1*111-11*1*1+1-1', '1*111-11*1*1-1+1', '1*111-11*1*1*1*1', '1*111-11+11-11', '1*111-11-11+11', '11+1*111-11-11', '11-1*11-11+111', '11-1*11+111-11', '11*1-11-11+111', '11*1-11+111-11', '11*1*11+1-11-11', '11*1*11-11+1-11', '11*1*11-11-11+1', '11*1+111-11-11', '11-11+1*111-11', '11-11-1*11+111', '11-11*1-11+111', '11-11*1+111-11', '11-11-11+1*111', '11-11-11*1+111', '11-11-11+111*1', '11-11+111-1*11', '11-11+111*1-11', '11-11+111-11*1', '11*11+1-1*11-11', '11*11+1*1-11-11', '11*11+1-11-1*11', '11*11+1-11*1-11', '11*11+1-11-11*1', '11*11-1*11+1-11', '11*11-1*11-11+1', '11*11*1+1-11-11', '11*11*1-11+1-11', '11*11*1-11-11+1', '11*11-11+1-1*11', '11*11-11+1*1-11', '11*11-11+1-11*1', '11*11-11-1*11+1', '11*11-11*1+1-11', '11*11-11*1-11+1', '11*11-11-11+1*1', '11*11-11-11*1+1', '11+111-1*11-11', '11+111*1-11-11', '11+111-11-1*11', '11+111-11*1-11', '11+111-11-11*1', '111+1+1-1-1-1*11', '111+1+1-1-1*1-11', '111+1+1-1-1-11*1', '111+1+1-1-1*11-1', '111+1+1-1*1-1-11', '111+1+1-1*1-11-1', '111+1+1-1-11-1*1', '111+1+1-1-11*1-1', '111+1+1-1*11-1-1', '111+1+1*1-1-1-11', '111+1+1*1-1-11-1', '111+1+1*1-11-1-1', '111+1+1-11-1-1*1', '111+1+1-11-1*1-1', '111+1+1-11*1-1-1', '111+1-1+1-1-1*11', '111+1-1+1-1*1-11', '111+1-1+1-1-11*1', '111+1-1+1-1*11-1', '111+1-1+1*1-1-11', '111+1-1+1*1-11-1', '111+1-1+1-11-1*1', '111+1-1+1-11*1-1', '111+1-1-1+1-1*11', '111+1-1-1+1*1-11', '111+1-1-1+1-11*1', '111+1-1-1-1*11+1', '111+1-1-1*1+1-11', '111+1-1-1*1*1*11', '111+1-1-1*1-11+1', '111+1-1-1*1*11*1', '111+1-1-1-11+1*1', '111+1-1-1-11*1+1', '111+1-1-1*11+1-1', '111+1-1-1*11-1+1', '111+1-1-1*11*1*1', '111+1-1*1+1-1-11', '111+1-1*1+1-11-1', '111+1-1*1-1+1-11', '111+1-1*1-1*1*11', '111+1-1*1-1-11+1', '111+1-1*1-1*11*1', '111+1-1*1*1-1*11', '111+1-1*1*1*1-11', '111+1-1*1*1-11*1', '111+1-1*1*1*11-1', '111+1-1*1-11+1-1', '111+1-1*1-11-1+1', '111+1-1*1-11*1*1', '111+1-1*1*11-1*1', '111+1-1*1*11*1-1', '111+1-1-11+1-1*1', '111+1-1-11+1*1-1', '111+1-1-11-1+1*1', '111+1-1-11-1*1+1', '111+1-1-11*1+1-1', '111+1-1-11*1-1+1', '111+1-1-11*1*1*1', '111+1-1*11+1-1-1', '111+1-1*11-1+1-1', '111+1-1*11-1-1+1', '111+1-1*11-1*1*1', '111+1-1*11*1-1*1', '111+1-1*11*1*1-1', '111+1*1+1-1-1-11', '111+1*1+1-1-11-1', '111+1*1+1-11-1-1', '111+1*1-1+1-1-11', '111+1*1-1+1-11-1', '111+1*1-1-1+1-11', '111+1*1-1-1*1*11', '111+1*1-1-1-11+1', '111+1*1-1-1*11*1', '111+1*1-1*1-1*11', '111+1*1-1*1*1-11', '111+1*1-1*1-11*1', '111+1*1-1*1*11-1', '111+1*1-1-11+1-1', '111+1*1-1-11-1+1', '111+1*1-1-11*1*1', '111+1*1-1*11-1*1', '111+1*1-1*11*1-1', '111+1*1*1-1-1*11', '111+1*1*1-1*1-11', '111+1*1*1-1-11*1', '111+1*1*1-1*11-1', '111+1*1*1*1-1-11', '111+1*1*1*1-11-1', '111+1*1*1-11-1*1', '111+1*1*1-11*1-1', '111+1*1-11+1-1-1', '111+1*1-11-1+1-1', '111+1*1-11-1-1+1', '111+1*1-11-1*1*1', '111+1*1-11*1-1*1', '111+1*1-11*1*1-1', '111+1-11+1-1-1*1', '111+1-11+1-1*1-1', '111+1-11+1*1-1-1', '111+1-11-1+1-1*1', '111+1-11-1+1*1-1', '111+1-11-1-1+1*1', '111+1-11-1-1*1+1', '111+1-11-1*1+1-1', '111+1-11-1*1-1+1', '111+1-11-1*1*1*1', '111+1-11*1+1-1-1', '111+1-11*1-1+1-1', '111+1-11*1-1-1+1', '111+1-11*1-1*1*1', '111+1-11*1*1-1*1', '111+1-11*1*1*1-1', '111+1*11-11-11', '111-1+1+1-1-1*11', '111-1+1+1-1*1-11', '111-1+1+1-1-11*1', '111-1+1+1-1*11-1', '111-1+1+1*1-1-11', '111-1+1+1*1-11-1', '111-1+1+1-11-1*1', '111-1+1+1-11*1-1', '111-1+1-1+1-1*11', '111-1+1-1+1*1-11', '111-1+1-1+1-11*1', '111-1+1-1-1*11+1', '111-1+1-1*1+1-11', '111-1+1-1*1*1*11', '111-1+1-1*1-11+1', '111-1+1-1*1*11*1', '111-1+1-1-11+1*1', '111-1+1-1-11*1+1', '111-1+1-1*11+1-1', '111-1+1-1*11-1+1', '111-1+1-1*11*1*1', '111-1+1*1+1-1-11', '111-1+1*1+1-11-1', '111-1+1*1-1+1-11', '111-1+1*1-1*1*11', '111-1+1*1-1-11+1', '111-1+1*1-1*11*1', '111-1+1*1*1-1*11', '111-1+1*1*1*1-11', '111-1+1*1*1-11*1', '111-1+1*1-11+1-1', '111-1+1*1-11-1+1', '111-1+1*1-11*1*1', '111-1+1-11+1-1*1', '111-1+1-11+1*1-1', '111-1+1-11-1+1*1', '111-1+1-11-1*1+1', '111-1+1-11*1+1-1', '111-1+1-11*1-1+1', '111-1+1-11*1*1*1', '111-1-1+1+1-1*11', '111-1-1+1+1*1-11', '111-1-1+1+1-11*1', '111-1-1+1-1*11+1', '111-1-1+1*1+1-11', '111-1-1+1*1-11+1', '111-1-1+1-11+1*1', '111-1-1+1-11*1+1', '111-1-1-1*11+1+1', '111-1-1*1+1+1-11', '111-1-1*1+1-11+1', '111-1-1*1*1*11+1', '111-1-1*1-11+1+1', '111-1-1*1*11+1*1', '111-1-1*1*11*1+1', '111-1-1-11+1+1*1', '111-1-1-11+1*1+1', '111-1-1-11*1+1+1', '111-1-1*11+1+1-1', '111-1-1*11+1-1+1', '111-1-1*11+1*1*1', '111-1-1*11-1+1+1', '111-1-1*11*1+1*1', '111-1-1*11*1*1+1', '111-1*1+1+1-1-11', '111-1*1+1+1-11-1', '111-1*1+1-1+1-11', '111-1*1+1-1*1*11', '111-1*1+1-1-11+1', '111-1*1+1-1*11*1', '111-1*1+1*1-1*11', '111-1*1+1*1*1-11', '111-1*1+1*1-11*1', '111-1*1+1-11+1-1', '111-1*1+1-11-1+1', '111-1*1+1-11*1*1', '111-1*1-1+1+1-11', '111-1*1-1+1-11+1', '111-1*1-1*1*11+1', '111-1*1-1-11+1+1', '111-1*1-1*11+1*1', '111-1*1-1*11*1+1', '111-1*1*1+1-1*11', '111-1*1*1+1*1-11', '111-1*1*1+1-11*1', '111-1*1*1-1*11+1', '111-1*1*1*1+1-11', '111-1*1*1*1*1*11', '111-1*1*1*1-11+1', '111-1*1*1*1*11*1', '111-1*1*1-11+1*1', '111-1*1*1-11*1+1', '111-1*1*1*11+1-1', '111-1*1*1*11-1+1', '111-1*1*1*11*1*1', '111-1*1-11+1+1-1', '111-1*1-11+1-1+1', '111-1*1-11+1*1*1', '111-1*1-11-1+1+1', '111-1*1-11*1+1*1', '111-1*1-11*1*1+1', '111-1*1*11+1-1*1', '111-1*1*11+1*1-1', '111-1*1*11-1+1*1', '111-1*1*11-1*1+1', '111-1*1*11*1+1-1', '111-1*1*11*1-1+1', '111-1*1*11*1*1*1', '111-1-11+1+1-1*1', '111-1-11+1+1*1-1', '111-1-11+1-1+1*1', '111-1-11+1-1*1+1', '111-1-11+1*1+1-1', '111-1-11+1*1-1+1', '111-1-11+1*1*1*1', '111-1-11-1+1+1*1', '111-1-11-1+1*1+1', '111-1-11-1*1+1+1', '111-1-11*1+1+1-1', '111-1-11*1+1-1+1', '111-1-11*1+1*1*1', '111-1-11*1-1+1+1', '111-1-11*1*1+1*1', '111-1-11*1*1*1+1', '111-1*11+1+1-1-1', '111-1*11+1-1+1-1', '111-1*11+1-1-1+1', '111-1*11+1-1*1*1', '111-1*11+1*1-1*1', '111-1*11+1*1*1-1', '111-1*11-1+1+1-1', '111-1*11-1+1-1+1', '111-1*11-1+1*1*1', '111-1*11-1-1+1+1', '111-1*11-1*1+1*1', '111-1*11-1*1*1+1', '111-1*11*1+1-1*1', '111-1*11*1+1*1-1', '111-1*11*1-1+1*1', '111-1*11*1-1*1+1', '111-1*11*1*1+1-1', '111-1*11*1*1-1+1', '111-1*11*1*1*1*1', '111-1*11+11-11', '111-1*11-11+11', '111*1+1+1-1-1-11', '111*1+1+1-1-11-1', '111*1+1+1-11-1-1', '111*1+1-1+1-1-11', '111*1+1-1+1-11-1', '111*1+1-1-1+1-11', '111*1+1-1-1*1*11', '111*1+1-1-1-11+1', '111*1+1-1-1*11*1', '111*1+1-1*1-1*11', '111*1+1-1*1*1-11', '111*1+1-1*1-11*1', '111*1+1-1*1*11-1', '111*1+1-1-11+1-1', '111*1+1-1-11-1+1', '111*1+1-1-11*1*1', '111*1+1-1*11-1*1', '111*1+1-1*11*1-1', '111*1+1*1-1-1*11', '111*1+1*1-1*1-11', '111*1+1*1-1-11*1', '111*1+1*1-1*11-1', '111*1+1*1*1-1-11', '111*1+1*1*1-11-1', '111*1+1*1-11-1*1', '111*1+1*1-11*1-1', '111*1+1-11+1-1-1', '111*1+1-11-1+1-1', '111*1+1-11-1-1+1', '111*1+1-11-1*1*1', '111*1+1-11*1-1*1', '111*1+1-11*1*1-1', '111*1-1+1+1-1-11', '111*1-1+1+1-11-1', '111*1-1+1-1+1-11', '111*1-1+1-1*1*11', '111*1-1+1-1-11+1', '111*1-1+1-1*11*1', '111*1-1+1*1-1*11', '111*1-1+1*1*1-11', '111*1-1+1*1-11*1', '111*1-1+1-11+1-1', '111*1-1+1-11-1+1', '111*1-1+1-11*1*1', '111*1-1-1+1+1-11', '111*1-1-1+1-11+1', '111*1-1-1*1*11+1', '111*1-1-1-11+1+1', '111*1-1-1*11+1*1', '111*1-1-1*11*1+1', '111*1-1*1+1-1*11', '111*1-1*1+1*1-11', '111*1-1*1+1-11*1', '111*1-1*1-1*11+1', '111*1-1*1*1+1-11', '111*1-1*1*1*1*11', '111*1-1*1*1-11+1', '111*1-1*1*1*11*1', '111*1-1*1-11+1*1', '111*1-1*1-11*1+1', '111*1-1*1*11+1-1', '111*1-1*1*11-1+1', '111*1-1*1*11*1*1', '111*1-1-11+1+1-1', '111*1-1-11+1-1+1', '111*1-1-11+1*1*1', '111*1-1-11-1+1+1', '111*1-1-11*1+1*1', '111*1-1-11*1*1+1', '111*1-1*11+1-1*1', '111*1-1*11+1*1-1', '111*1-1*11-1+1*1', '111*1-1*11-1*1+1', '111*1-1*11*1+1-1', '111*1-1*11*1-1+1', '111*1-1*11*1*1*1', '111*1*1+1-1-1*11', '111*1*1+1-1*1-11', '111*1*1+1-1-11*1', '111*1*1+1-1*11-1', '111*1*1+1*1-1-11', '111*1*1+1*1-11-1', '111*1*1+1-11-1*1', '111*1*1+1-11*1-1', '111*1*1-1+1-1*11', '111*1*1-1+1*1-11', '111*1*1-1+1-11*1', '111*1*1-1-1*11+1', '111*1*1-1*1+1-11', '111*1*1-1*1*1*11', '111*1*1-1*1-11+1', '111*1*1-1*1*11*1', '111*1*1-1-11+1*1', '111*1*1-1-11*1+1', '111*1*1-1*11+1-1', '111*1*1-1*11-1+1', '111*1*1-1*11*1*1', '111*1*1*1+1-1-11', '111*1*1*1+1-11-1', '111*1*1*1-1+1-11', '111*1*1*1-1*1*11', '111*1*1*1-1-11+1', '111*1*1*1-1*11*1', '111*1*1*1*1-1*11', '111*1*1*1*1*1-11', '111*1*1*1*1-11*1', '111*1*1*1-11+1-1', '111*1*1*1-11-1+1', '111*1*1*1-11*1*1', '111*1*1-11+1-1*1', '111*1*1-11+1*1-1', '111*1*1-11-1+1*1', '111*1*1-11-1*1+1', '111*1*1-11*1+1-1', '111*1*1-11*1-1+1', '111*1*1-11*1*1*1', '111*1+11-11-11', '111*1-11+1+1-1-1', '111*1-11+1-1+1-1', '111*1-11+1-1-1+1', '111*1-11+1-1*1*1', '111*1-11+1*1-1*1', '111*1-11+1*1*1-1', '111*1-11-1+1+1-1', '111*1-11-1+1-1+1', '111*1-11-1+1*1*1', '111*1-11-1-1+1+1', '111*1-11-1*1+1*1', '111*1-11-1*1*1+1', '111*1-11*1+1-1*1', '111*1-11*1+1*1-1', '111*1-11*1-1+1*1', '111*1-11*1-1*1+1', '111*1-11*1*1+1-1', '111*1-11*1*1-1+1', '111*1-11*1*1*1*1', '111*1-11+11-11', '111*1-11-11+11', '111+11-1*11-11', '111+11*1-11-11', '111+11-11-1*11', '111+11-11*1-11', '111+11-11-11*1', '111-11+1+1-1-1*1', '111-11+1+1-1*1-1', '111-11+1+1*1-1-1', '111-11+1-1+1-1*1', '111-11+1-1+1*1-1', '111-11+1-1-1+1*1', '111-11+1-1-1*1+1', '111-11+1-1*1+1-1', '111-11+1-1*1-1+1', '111-11+1-1*1*1*1', '111-11+1*1+1-1-1', '111-11+1*1-1+1-1', '111-11+1*1-1-1+1', '111-11+1*1-1*1*1', '111-11+1*1*1-1*1', '111-11+1*1*1*1-1', '111-11+1*11-11', '111-11-1+1+1-1*1', '111-11-1+1+1*1-1', '111-11-1+1-1+1*1', '111-11-1+1-1*1+1', '111-11-1+1*1+1-1', '111-11-1+1*1-1+1', '111-11-1+1*1*1*1', '111-11-1-1+1+1*1', '111-11-1-1+1*1+1', '111-11-1-1*1+1+1', '111-11-1*1+1+1-1', '111-11-1*1+1-1+1', '111-11-1*1+1*1*1', '111-11-1*1-1+1+1', '111-11-1*1*1+1*1', '111-11-1*1*1*1+1', '111-11-1*11+11', '111-11*1+1+1-1-1', '111-11*1+1-1+1-1', '111-11*1+1-1-1+1', '111-11*1+1-1*1*1', '111-11*1+1*1-1*1', '111-11*1+1*1*1-1', '111-11*1-1+1+1-1', '111-11*1-1+1-1+1', '111-11*1-1+1*1*1', '111-11*1-1-1+1+1', '111-11*1-1*1+1*1', '111-11*1-1*1*1+1', '111-11*1*1+1-1*1', '111-11*1*1+1*1-1', '111-11*1*1-1+1*1', '111-11*1*1-1*1+1', '111-11*1*1*1+1-1', '111-11*1*1*1-1+1', '111-11*1*1*1*1*1', '111-11*1+11-11', '111-11*1-11+11', '111-11+11-1*11', '111-11+11*1-11', '111-11+11-11*1', '111-11-11+1*11', '111-11-11*1+11', '111-11-11+11*1']"
      },
      {
        "input": "num = \"2233\", target = 25",
        "output": "[]"
      },
      {
        "input": "num = \"1010101010\", target = 0",
        "output": "Execution timed out"
      },
      {
        "input": "num = \"10000\", target = 10",
        "output": "['10+0+0+0', '10+0+0-0', '10+0+0*0', '10+0-0+0', '10+0-0-0', '10+0-0*0', '10+0*0+0', '10+0*0-0', '10+0*0*0', '10-0+0+0', '10-0+0-0', '10-0+0*0', '10-0-0+0', '10-0-0-0', '10-0-0*0', '10-0*0+0', '10-0*0-0', '10-0*0*0']"
      },
      {
        "input": "num = \"1234567890\", target = 100",
        "output": "['1+2+3+4+5+6+7+8*9+0', '1+2+3+4+5+6+7+8*9-0', '1+2+3+4+5-6-7+8+90', '1+2+3+4-5+6+7-8+90', '1+2+3+4+56-7*8+90', '1+2+3+4-56+7*8+90', '1+2+3-4+5+6+78+9+0', '1+2+3-4+5+6+78+9-0', '1+2+3-4*5+6*7+8*9+0', '1+2+3-4*5+6*7+8*9-0', '1+2+3*4-5-6+7+89+0', '1+2+3*4-5-6+7+89-0', '1+2+3-45+67+8*9+0', '1+2+3-45+67+8*9-0', '1+2+3*45*6+7-8*90', '1+2-3-4+5-6+7+8+90', '1+2-3*4+5*6+7+8*9+0', '1+2-3*4+5*6+7+8*9-0', '1+2-3*4-5+6*7+8*9+0', '1+2-3*4-5+6*7+8*9-0', '1+2*3+4+5+6+78+9*0', '1+2*3+4+5+6+78-9*0', '1+2*3+4+5+67+8+9+0', '1+2*3+4+5+67+8+9-0', '1+2*3+4*5-6+7+8*9+0', '1+2*3+4*5-6+7+8*9-0', '1+2*3-4-5+6+7+89+0', '1+2*3-4-5+6+7+89-0', '1+2*3*4-5*6+7+8+90', '1+2*3*4*5-6-7-8+9*0', '1+2*3*4*5-6-7-8-9*0', '1+2+34-5+67-8+9+0', '1+2+34-5+67-8+9-0', '1+2+34*5+6-7-8*9+0', '1+2+34*5+6-7-8*9-0', '1+2+34+56+7+8*9*0', '1+2+34+56+7-8*9*0', '1+2+34+56+7+89*0', '1+2+34+56+7-89*0', '1+2-34+56-7-8+90', '1+2*34+5*6-7+8+9*0', '1+2*34+5*6-7+8-9*0', '1+2*34-56+78+9+0', '1+2*34-56+78+9-0', '1-2+3+4-5-6+7+8+90', '1-2+3-4+5+6-7+8+90', '1-2+3*4+5+6+78+9*0', '1-2+3*4+5+6+78-9*0', '1-2+3*4+5+67+8+9+0', '1-2+3*4+5+67+8+9-0', '1-2+3*4*5+6*7+8-9+0', '1-2+3*4*5+6*7+8-9-0', '1-2+3*4*5-6+7*8-9+0', '1-2+3*4*5-6+7*8-9-0', '1-2+3+45+6+7*8-9+0', '1-2+3+45+6+7*8-9-0', '1-2+3*45-6*7+8+9*0', '1-2+3*45-6*7+8-9*0', '1-2-3+4+5+6+7-8+90', '1-2-3+4*5+6+78+9*0', '1-2-3+4*5+6+78-9*0', '1-2-3+4*5+67+8+9+0', '1-2-3+4*5+67+8+9-0', '1-2-3-4+5*6+78+9*0', '1-2-3-4+5*6+78-9*0', '1-2-3-4*5+6*7-8+90', '1-2-3+45+6*7+8+9+0', '1-2-3+45+6*7+8+9-0', '1-2-3+45-6+7*8+9+0', '1-2-3+45-6+7*8+9-0', '1-2-3+45-6-7+8*9+0', '1-2-3+45-6-7+8*9-0', '1-2-3+45+67-8+9*0', '1-2-3+45+67-8-9*0', '1-2-3-45+67-8+90', '1-2*3+4*5+6+7+8*9+0', '1-2*3+4*5+6+7+8*9-0', '1-2*3+4*5-6-7+8+90', '1-2*3+4*5*6-7-8+9*0', '1-2*3+4*5*6-7-8-9*0', '1-2*3-4+5*6+7+8*9+0', '1-2*3-4+5*6+7+8*9-0', '1-2*3-4-5+6*7+8*9+0', '1-2*3-4-5+6*7+8*9-0', '1-2+34+5+6+7*8+9*0', '1-2+34+5+6+7*8-9*0', '1-2+34-5-6+78+9*0', '1-2+34-5-6+78-9*0', '1-2+34*5+6+7+8-90', '1-2-34+5*6+7+8+90', '1-2-34-5+6*7+8+90', '1-2-34-5-6+7*8+90', '1-2-34+56+7+8*9+0', '1-2-34+56+7+8*9-0', '1-2*34+5-6+78+90', '1-2-345+67*8-90', '1*2+3+4*5+6+78-9+0', '1*2+3+4*5+6+78-9-0', '1*2+3+4*5+67+8+9*0', '1*2+3+4*5+67+8-9*0', '1*2+3-4+5*6+78-9+0', '1*2+3-4+5*6+78-9-0', '1*2+3*4+5+6-7-8+90', '1*2+3*4+5-6+78+9+0', '1*2+3*4+5-6+78+9-0', '1*2+3*4+5*6+7*8+9*0', '1*2+3*4+5*6+7*8-9*0', '1*2+3+45+6*7+8+9*0', '1*2+3+45+6*7+8-9*0', '1*2+3+45-6+7*8+9*0', '1*2+3+45-6+7*8-9*0', '1*2+3+45+67-8-9+0', '1*2+3+45+67-8-9-0', '1*2+3-45+6*7+8+90', '1*2+3-45-6+7*8+90', '1*2-3+4-5+6+7+89+0', '1*2-3+4-5+6+7+89-0', '1*2-3+4*5+6-7-8+90', '1*2-3+4*5-6+78+9+0', '1*2-3+4*5-6+78+9-0', '1*2-3-4+5*6-7-8+90', '1*2-3+45-6*7+8+90', '1*2*3+4+5+6+7+8*9+0', '1*2*3+4+5+6+7+8*9-0', '1*2*3+4+5-6-7+8+90', '1*2*3+4-5+6+7-8+90', '1*2*3+4+56-7*8+90', '1*2*3+4-56+7*8+90', '1*2*3-4+5+6+78+9+0', '1*2*3-4+5+6+78+9-0', '1*2*3-4*5+6*7+8*9+0', '1*2*3-4*5+6*7+8*9-0', '1*2*3*4+5+6+7*8+9+0', '1*2*3*4+5+6+7*8+9-0', '1*2*3*4+5+6-7+8*9+0', '1*2*3*4+5+6-7+8*9-0', '1*2*3*4-5+6-7-8+90', '1*2*3*4-5-6+78+9+0', '1*2*3*4-5-6+78+9-0', '1*2*3-45+67+8*9+0', '1*2*3-45+67+8*9-0', '1*2+34+5+6*7+8+9+0', '1*2+34+5+6*7+8+9-0', '1*2+34+5-6+7*8+9+0', '1*2+34+5-6+7*8+9-0', '1*2+34+5-6-7+8*9+0', '1*2+34+5-6-7+8*9-0', '1*2+34+5*6-7*8+90', '1*2+34+5+67-8+9*0', '1*2+34+5+67-8-9*0', '1*2+34-5-6-7-8+90', '1*2+34*5+6-78+9*0', '1*2+34*5+6-78-9*0', '1*2+34+56+7-8+9+0', '1*2+34+56+7-8+9-0', '1*2*34+56-7-8-9+0', '1*2*34+56-7-8-9-0', '1+23+4+5+67+8*9*0', '1+23+4+5+67-8*9*0', '1+23+4+5+67+89*0', '1+23+4+5+67-89*0', '1+23+4*5-6*7+8+90', '1+23-4+5+6+78-9+0', '1+23-4+5+6+78-9-0', '1+23-4+5+67+8+9*0', '1+23-4+5+67+8-9*0', '1+23-4-5+6+7+8*9+0', '1+23-4-5+6+7+8*9-0', '1+23-4-5-6-7+8+90', '1+23-4+56+7+8+9+0', '1+23-4+56+7+8+9-0', '1+23*4+5-6+7-8+9+0', '1+23*4+5-6+7-8+9-0', '1+23*4-5+6+7+8-9+0', '1+23*4-5+6+7+8-9-0', '1+23+45-67+8+90', '1-23+4*5+6+7+89+0', '1-23+4*5+6+7+89-0', '1-23-4+5*6+7+89+0', '1-23-4+5*6+7+89-0', '1-23-4-5+6*7+89+0', '1-23-4-5+6*7+89-0', '1*23+4+5+67-8+9+0', '1*23+4+5+67-8+9-0', '1*23-4+5-6-7+89+0', '1*23-4+5-6-7+89-0', '1*23-4*5+6-7+8+90', '1*23*4-5+6+7+8*9*0', '1*23*4-5+6+7-8*9*0', '1*23*4-5+6+7+89*0', '1*23*4-5+6+7-89*0', '1+234+5+6-7*8-90', '1+234+5-6*7-8-90', '1+234-5*6-7-8-90', '1+234-56-7-8*9+0', '1+234-56-7-8*9-0', '1*234+5-67-8*9+0', '1*234+5-67-8*9-0', '1*234-56-78+9*0', '1*234-56-78-9*0', '12+3+4+5-6-7+89+0', '12+3+4+5-6-7+89-0', '12+3-4+5+6+78+9*0', '12+3-4+5+6+78-9*0', '12+3-4+5+67+8+9+0', '12+3-4+5+67+8+9-0', '12+3*4+5+6+7*8+9+0', '12+3*4+5+6+7*8+9-0', '12+3*4+5+6-7+8*9+0', '12+3*4+5+6-7+8*9-0', '12+3*4-5+6-7-8+90', '12+3*4-5-6+78+9+0', '12+3*4-5-6+78+9-0', '12+3*4*5-6-7*8+90', '12+3+45+6-7*8+90', '12+3+45-6*7-8+90', '12+3*45+6*7-89+0', '12+3*45+6*7-89-0', '12-3+4*5+6+7*8+9+0', '12-3+4*5+6+7*8+9-0', '12-3+4*5+6-7+8*9+0', '12-3+4*5+6-7+8*9-0', '12-3-4+5-6+7+89+0', '12-3-4+5-6+7+89-0', '12-3-4+5*6+7*8+9+0', '12-3-4+5*6+7*8+9-0', '12-3-4+5*6-7+8*9+0', '12-3-4+5*6-7+8*9-0', '12-3-4*5+6+7+8+90', '12-3*4+5+6+7-8+90', '12*3+4*5*6-7*8+9*0', '12*3+4*5*6-7*8-9*0', '12*3-4+5-6+78-9+0', '12*3-4+5-6+78-9-0', '12*3-4-5-6+7+8*9+0', '12*3-4-5-6+7+8*9-0', '12*3-4*5+6+78+9*0', '12*3-4*5+6+78-9*0', '12*3-4*5+67+8+9+0', '12*3-4*5+67+8+9-0', '12*3-4+56-78+90', '12*3*4-56-78+90', '12+34+5*6+7+8+9+0', '12+34+5*6+7+8+9-0', '12+34-5+6*7+8+9+0', '12+34-5+6*7+8+9-0', '12+34-5-6+7*8+9+0', '12+34-5-6+7*8+9-0', '12+34-5-6-7+8*9+0', '12+34-5-6-7+8*9-0', '12+34-5+67-8+9*0', '12+34-5+67-8-9*0', '12*34-5*6*7-8-90', '123+4-5+67-89+0', '123+4-5+67-89-0', '123+4*5-6*7+8-9+0', '123+4*5-6*7+8-9-0', '123-4-5-6-7+8-9+0', '123-4-5-6-7+8-9-0', '123-4+56+7+8-90', '123*4-56*7+8*9*0', '123*4-56*7-8*9*0', '123*4-56*7+89*0', '123*4-56*7-89*0', '123+45-67+8-9+0', '123+45-67+8-9-0', '123-45-67+89+0', '123-45-67+89-0']"
      },
      {
        "input": "num = \"99999\", target = 99999",
        "output": "['99999']"
      },
      {
        "input": "num = \"10000\", target = 0",
        "output": "['1*0+0+0+0', '1*0+0+0-0', '1*0+0+0*0', '1*0+0-0+0', '1*0+0-0-0', '1*0+0-0*0', '1*0+0*0+0', '1*0+0*0-0', '1*0+0*0*0', '1*0-0+0+0', '1*0-0+0-0', '1*0-0+0*0', '1*0-0-0+0', '1*0-0-0-0', '1*0-0-0*0', '1*0-0*0+0', '1*0-0*0-0', '1*0-0*0*0', '1*0*0+0+0', '1*0*0+0-0', '1*0*0+0*0', '1*0*0-0+0', '1*0*0-0-0', '1*0*0-0*0', '1*0*0*0+0', '1*0*0*0-0', '1*0*0*0*0', '10*0+0+0', '10*0+0-0', '10*0+0*0', '10*0-0+0', '10*0-0-0', '10*0-0*0', '10*0*0+0', '10*0*0-0', '10*0*0*0', '100*0+0', '100*0-0', '100*0*0', '1000*0']"
      },
      {
        "input": "num = \"523\", target = 30",
        "output": "['5*2*3']"
      },
      {
        "input": "num = \"24681012\", target = 24",
        "output": "['2+4+6+8+1+0+1+2', '2+4+6+8+1-0+1+2', '2+4+6+8*1*0+12', '2+4+6-8*1*0+12', '2+4+6-8+10*1*2', '2+4+6+81*0+12', '2+4+6-81*0+12', '2+4*6+8*1*0-1*2', '2+4*6+8*1*0*1-2', '2+4*6-8*1*0-1*2', '2+4*6-8*1*0*1-2', '2+4*6+81*0-1*2', '2+4*6+81*0*1-2', '2+4*6-81*0-1*2', '2+4*6-81*0*1-2', '2-4+6+8+1*0+12', '2-4+6+8-1*0+12', '2-4+6+8*1+0+12', '2-4+6+8*1-0+12', '2-4+6+8+10+1*2', '2-4+6+8+10*1+2', '2-4+6*8-10-12', '2*4+6+8+1+0-1+2', '2*4+6+8+1-0-1+2', '2*4+6+8+1*0+1*2', '2*4+6+8+1*0*1+2', '2*4+6+8-1+0+1+2', '2*4+6+8-1-0+1+2', '2*4+6+8-1*0+1*2', '2*4+6+8-1*0*1+2', '2*4+6+8*1+0+1*2', '2*4+6+8*1+0*1+2', '2*4+6+8*1-0+1*2', '2*4+6+8*1-0*1+2', '2*4+6+8-10+12', '2-46+8*10-12', '2*46-8*10+12', '24+6-8+1+0-1+2', '24+6-8+1-0-1+2', '24+6-8+1*0+1*2', '24+6-8+1*0*1+2', '24+6-8-1+0+1+2', '24+6-8-1-0+1+2', '24+6-8-1*0+1*2', '24+6-8-1*0*1+2', '24+6-8*1+0+1*2', '24+6-8*1+0*1+2', '24+6-8*1-0+1*2', '24+6-8*1-0*1+2', '24+6-8-10+12', '24+6*8*1*0*1*2', '24+6*8*1*0*12', '24+6*81*0*1*2', '24+6*81*0*12', '24-6+8+1+0-1-2', '24-6+8+1-0-1-2', '24-6+8+1*0-1*2', '24-6+8+1*0*1-2', '24-6+8-1+0+1-2', '24-6+8-1-0+1-2', '24-6+8-1*0-1*2', '24-6+8-1*0*1-2', '24-6+8*1+0-1*2', '24-6+8*1+0*1-2', '24-6+8*1-0-1*2', '24-6+8*1-0*1-2', '24-6+8+10-12', '24-6*8*1*0*1*2', '24-6*8*1*0*12', '24-6*81*0*1*2', '24-6*81*0*12', '24+68*1*0*1*2', '24+68*1*0*12', '24-68*1*0*1*2', '24-68*1*0*12', '24+681*0*1*2', '24+681*0*12', '24-681*0*1*2', '24-681*0*12']"
      },
      {
        "input": "num = \"55555\", target = 3125",
        "output": "['5*5*5*5*5']"
      },
      {
        "input": "num = \"12345\", target = 46",
        "output": "[]"
      },
      {
        "input": "num = \"523\", target = 1",
        "output": "[]"
      },
      {
        "input": "num = \"87654321\", target = 87654321",
        "output": "['87654321']"
      },
      {
        "input": "num = \"1234\", target = 1",
        "output": "['1*2+3-4']"
      },
      {
        "input": "num = \"101010\", target = 0",
        "output": "['1+0+1*0-1+0', '1+0+1*0-1-0', '1+0-1+0+1*0', '1+0-1+0-1*0', '1+0-1+0*1+0', '1+0-1+0*1-0', '1+0-1+0*1*0', '1+0-1+0*10', '1+0-1-0+1*0', '1+0-1-0-1*0', '1+0-1-0*1+0', '1+0-1-0*1-0', '1+0-1-0*1*0', '1+0-1-0*10', '1+0-1*0-1+0', '1+0-1*0-1-0', '1+0*1+0-1+0', '1+0*1+0-1-0', '1+0*1-0-1+0', '1+0*1-0-1-0', '1+0*1*0-1+0', '1+0*1*0-1-0', '1+0*10-1+0', '1+0*10-1-0', '1-0+1*0-1+0', '1-0+1*0-1-0', '1-0-1+0+1*0', '1-0-1+0-1*0', '1-0-1+0*1+0', '1-0-1+0*1-0', '1-0-1+0*1*0', '1-0-1+0*10', '1-0-1-0+1*0', '1-0-1-0-1*0', '1-0-1-0*1+0', '1-0-1-0*1-0', '1-0-1-0*1*0', '1-0-1-0*10', '1-0-1*0-1+0', '1-0-1*0-1-0', '1-0*1+0-1+0', '1-0*1+0-1-0', '1-0*1-0-1+0', '1-0*1-0-1-0', '1-0*1*0-1+0', '1-0*1*0-1-0', '1-0*10-1+0', '1-0*10-1-0', '1*0+1+0-1+0', '1*0+1+0-1-0', '1*0+1-0-1+0', '1*0+1-0-1-0', '1*0+1*0+1*0', '1*0+1*0-1*0', '1*0+1*0*1+0', '1*0+1*0*1-0', '1*0+1*0*1*0', '1*0+1*0*10', '1*0-1+0+1+0', '1*0-1+0+1-0', '1*0-1-0+1+0', '1*0-1-0+1-0', '1*0-1*0+1*0', '1*0-1*0-1*0', '1*0-1*0*1+0', '1*0-1*0*1-0', '1*0-1*0*1*0', '1*0-1*0*10', '1*0*1+0+1*0', '1*0*1+0-1*0', '1*0*1+0*1+0', '1*0*1+0*1-0', '1*0*1+0*1*0', '1*0*1+0*10', '1*0*1-0+1*0', '1*0*1-0-1*0', '1*0*1-0*1+0', '1*0*1-0*1-0', '1*0*1-0*1*0', '1*0*1-0*10', '1*0*1*0+1*0', '1*0*1*0-1*0', '1*0*1*0*1+0', '1*0*1*0*1-0', '1*0*1*0*1*0', '1*0*1*0*10', '1*0+10*1*0', '1*0+10-10', '1*0-10*1*0', '1*0-10+10', '1*0*10+1*0', '1*0*10-1*0', '1*0*10*1+0', '1*0*10*1-0', '1*0*10*1*0', '1*0*10*10', '1*0+101*0', '1*0-101*0', '1*0*101+0', '1*0*101-0', '1*0*101*0', '1*0*1010', '10+1*0-10', '10-1*0-10', '10*1+0-10', '10*1-0-10', '10*1*0+1*0', '10*1*0-1*0', '10*1*0*1+0', '10*1*0*1-0', '10*1*0*1*0', '10*1*0*10', '10-10+1*0', '10-10-1*0', '10-10*1+0', '10-10*1-0', '10*10*1*0', '10*101*0', '101*0+1*0', '101*0-1*0', '101*0*1+0', '101*0*1-0', '101*0*1*0', '101*0*10', '1010*1*0', '10101*0']"
      },
      {
        "input": "num = \"123456\", target = 711",
        "output": "[]"
      },
      {
        "input": "num = \"987654321\", target = 45",
        "output": "['9+8+7+6+5+4+3+2+1', '9+8+7+6+5+4+3*2*1', '9+8+7+6+5+4*3-2*1', '9+8+7+6+5*4-3-2*1', '9+8+7+6+5*4-3*2+1', '9+8+7+6-5-4+3+21', '9+8+7+6*5+4*3-21', '9+8+7+6*5-4-3-2*1', '9+8+7+6*5-4-3*2+1', '9+8+7+6*5-4*3+2+1', '9+8+7-6+5+4-3+21', '9+8+7-6+5*4+3*2+1', '9+8+7-6+5+43-21', '9+8+7*6-5+4*3-21', '9+8+7*6-5-4-3-2*1', '9+8+7*6-5-4-3*2+1', '9+8+7*6-5-4*3+2+1', '9+8+7*6-5*4+3+2+1', '9+8+7*6-5*4+3*2*1', '9+8+7+65-43-2+1', '9+8+7-65+43*2*1', '9+8-7+6+5+4*3*2*1', '9+8-7+6*5+4+3-2*1', '9+8-7-6+5+4+32*1', '9+8-7-6-5+43+2+1', '9+8*7+6-5*4-3-2-1', '9+8*7+6-5*4-3*2*1', '9+8*7-6-5+4*3-21', '9+8*7-6-5-4-3-2*1', '9+8*7-6-5-4-3*2+1', '9+8*7-6-5-4*3+2+1', '9+8*7-6-5*4+3+2+1', '9+8*7-6-5*4+3*2*1', '9+8*7-6*5+4+3+2+1', '9+8*7-6*5+4+3*2*1', '9+8*7-6*5+4*3-2*1', '9+8*7+65-43*2+1', '9+8*7-65+43+2*1', '9+8+76-54+3+2+1', '9+8+76-54+3*2*1', '9-8+7+6-5+4+32*1', '9-8+7-6-5*4+3*21', '9-8+7-6*5+4+3*21', '9-8+7*6+5+4-3*2-1', '9-8+7*6+5-4+3-2*1', '9-8+7*6+5*4+3-21', '9-8+7+65+4-32*1', '9-8+7+65-4-3-21', '9-8-7+6+5+43-2-1', '9-8-7-6+5*4*3-2-1', '9-8-7*6+54+32*1', '9-8-7+65+4+3-21', '9-8-7+65-4*3-2*1', '9-8*7+6+54+32*1', '9-8*7+65-4+32-1', '9-8+76+5-4-32-1', '9-8+76-5+4-32+1', '9-8-76+5*4*3*2*1', '9*8+7+6+5-43-2*1', '9*8+7+6-5-4-32+1', '9*8+7+6*5-43-21', '9*8+7-6+5-4*3-21', '9*8+7-6-5-4*3*2+1', '9*8+7-6*5-4+3-2-1', '9*8+7-6*5-4-3+2+1', '9*8+7*6-5-43-21', '9*8-7+6-5*4-3-2-1', '9*8-7+6-5*4-3*2*1', '9*8-7-6-5+4*3-21', '9*8-7-6-5-4-3-2*1', '9*8-7-6-5-4-3*2+1', '9*8-7-6-5-4*3+2+1', '9*8-7-6-5*4+3+2+1', '9*8-7-6-5*4+3*2*1', '9*8-7-6*5+4+3+2+1', '9*8-7-6*5+4+3*2*1', '9*8-7-6*5+4*3-2*1', '9*8-7*6+5+4+3+2+1', '9*8-7*6+5+4+3*2*1', '9*8-7*6+5+4*3-2*1', '9*8-7*6+5*4-3-2*1', '9*8-7*6+5*4-3*2+1', '9*8-7*6-5-4+3+21', '9*8-7+65-43*2+1', '9*8-7-65+43+2*1', '9*8-76+5+43+2-1', '9*8-76+54-3-2*1', '9*8-76+54-3*2+1', '9+87+6-5*4*3+2+1', '9+87-6-5-43+2+1', '9+87-65+4*3+2*1', '9+87-65-4-3+21', '9-87+6+54+3*21', '98+7-6+5+4-3*21', '98+7-6-54+3-2-1', '98+7-6-54-3+2+1', '98+7-65+4+3-2*1', '98-7+6-5*4-32*1', '98-7+6-54+3-2+1', '98-7-6+5-43-2*1', '98-7-6-5-4-32+1', '98-7*6+5*4-32+1', '98-7*6-5-4-3+2-1', '98+76*5-432-1', '98-76-5+4+3+21', '98-76-5-4+32*1', '98-76+54-32+1']"
      },
      {
        "input": "num = \"000\", target = 0",
        "output": "['0+0+0', '0+0-0', '0+0*0', '0-0+0', '0-0-0', '0-0*0', '0*0+0', '0*0-0', '0*0*0']"
      },
      {
        "input": "num = \"123456789\", target = 45",
        "output": "['1+2+3+4+5+6+7+8+9', '1+2+3+4+5-6*7+8*9', '1+2+3+4-5*6+7*8+9', '1+2+3+4-5*6-7+8*9', '1+2+3-4*5+6*7+8+9', '1+2+3-4*5-6+7*8+9', '1+2+3-4*5-6-7+8*9', '1+2+3*4+5+6*7-8-9', '1+2+3*4*5+6-7-8-9', '1+2+3-45+67+8+9', '1+2+3*45-6-78-9', '1+2-3+4*5+6*7-8-9', '1+2-3-4-5*6+7+8*9', '1+2-3*4+5*6+7+8+9', '1+2-3*4-5+6*7+8+9', '1+2-3*4-5-6+7*8+9', '1+2-3*4-5-6-7+8*9', '1+2-3*4*5+6+7+89', '1+2-3+45+6-7-8+9', '1+2-3+45-6+7+8-9', '1+2-3-45-6+7+89', '1+2*3+4*5-6+7+8+9', '1+2*3+4*5*6+7-89', '1+2*3-4-5-6*7+89', '1+2*3*4+5*6+7-8-9', '1+2*3*4-5+6*7-8-9', '1+2*3*4*5+6+7-89', '1+2-34+5+6+7*8+9', '1+2-34+5+6-7+8*9', '1+2-34-5-6+78+9', '1+2*34-5*6+7+8-9', '1-2+3+4-5*6+78-9', '1-2+3-4*5-6+78-9', '1-2+3*4*5-6-7+8-9', '1-2+3+45+6-7+8-9', '1-2+3-45+6-7+89', '1-2-3+4-5+67-8-9', '1-2-3*4+5+6+7*8-9', '1-2-3*4-5-6+78-9', '1-2-3+45-6-7+8+9', '1-2*3+4+5+6*7+8-9', '1-2*3+4+5-6+7*8-9', '1-2*3+4*5+6+7+8+9', '1-2*3+4*5-6*7+8*9', '1-2*3+4+56+7-8-9', '1-2*3-4+5*6+7+8+9', '1-2*3-4-5+6*7+8+9', '1-2*3-4-5-6+7*8+9', '1-2*3-4-5-6-7+8*9', '1-2*3*4+5-6+78-9', '1-2*3*4-5-6+7+8*9', '1-2*3+45-67+8*9', '1-2-34+5+6+78-9', '1-2-34-5+6+7+8*9', '1-2-34+56+7+8+9', '1-2*34+5*6-7+89', '1*2+3+4+5*6+7+8-9', '1*2+3+4-5+6*7+8-9', '1*2+3+4-5-6+7*8-9', '1*2+3*4-56+78+9', '1*2+3+45+67-8*9', '1*2+3-45+6+7+8*9', '1*2-3+4-5-6*7+89', '1*2-3-4*5+67+8-9', '1*2-3-4+56-7-8+9', '1*2-3*4+5+67-8-9', '1*2*3+4+5+6+7+8+9', '1*2*3+4+5-6*7+8*9', '1*2*3+4-5*6+7*8+9', '1*2*3+4-5*6-7+8*9', '1*2*3-4*5+6*7+8+9', '1*2*3-4*5-6+7*8+9', '1*2*3-4*5-6-7+8*9', '1*2*3*4+5+6-7+8+9', '1*2*3*4*5-6-78+9', '1*2*3-45+67+8+9', '1*2+34+5-6-7+8+9', '1*2+34-5+6+7-8+9', '1*2+34+56-7*8+9', '1*2+34-56+7*8+9', '1*2+34-56-7+8*9', '1*2-34+5*6+7*8-9', '1*2*34-5+6-7-8-9', '1*2*34+56-7-8*9', '1+23+4+5+6+7+8-9', '1+23+4-5*6+7*8-9', '1+23+4-5-67+89', '1+23-4-5+6+7+8+9', '1+23-4-5-6*7+8*9', '1+23-4*5+6*7+8-9', '1+23-4*5-6+7*8-9', '1+23*4+5-6-7*8+9', '1+23*4-5-6*7+8-9', '1+23*4-56+7-8+9', '1+23-45+67+8-9', '1-23+4-5+67-8+9', '1-23+4*5-6*7+89', '1-23-4+5+67+8-9', '1-23-4-5-6-7+89', '1-23*4+5+6*7+89', '1-23+45-67+89', '1*23+4*5-6+7-8+9', '1*23-4-56-7+89', '12+3+4-56-7+89', '12+3-4*5+67-8-9', '12+3*4+5+6-7+8+9', '12+3-45+6+78-9', '12+3*45-6-7-89', '12-3+4*5+6-7+8+9', '12-3+4+56-7-8-9', '12-3-4+5*6-7+8+9', '12-3-4-56+7+89', '12-3*4-5+67-8-9', '12-3*4*5+6+78+9', '12-3-45-6+78+9', '12*3+4+5+6-7-8+9', '12*3+4+5-6+7+8-9', '12*3-4-5-6+7+8+9', '12*3-4-56+78-9', '12*3*4-5*6-78+9', '12+34-5-6-7+8+9']"
      },
      {
        "input": "num = \"999999999\", target = 999999999",
        "output": "['999999999']"
      },
      {
        "input": "num = \"555555555\", target = 39916800",
        "output": "[]"
      },
      {
        "input": "num = \"2020202020\", target = -20",
        "output": "Execution timed out"
      },
      {
        "input": "num = \"1111111111\", target = 1",
        "output": "Execution timed out"
      },
      {
        "input": "num = \"12323\", target = 25",
        "output": "['1-2+3+23', '1+23-2+3']"
      },
      {
        "input": "num = \"101010101\", target = 50",
        "output": "[]"
      },
      {
        "input": "num = \"2222222222\", target = 8",
        "output": "Execution timed out"
      },
      {
        "input": "num = \"1111\", target = 1",
        "output": "['1+1-1*1', '1+1*1-1', '1-1+1*1', '1-1*1+1', '1*1+1-1', '1*1-1+1', '1*1*1*1']"
      },
      {
        "input": "num = \"999999999\", target = 899999999",
        "output": "[]"
      },
      {
        "input": "num = \"1000000000\", target = 1000000000",
        "output": "['1000000000']"
      },
      {
        "input": "num = \"2323\", target = 10",
        "output": "['2+3+2+3']"
      },
      {
        "input": "num = \"100\", target = 0",
        "output": "['1*0+0', '1*0-0', '1*0*0', '10*0']"
      },
      {
        "input": "num = \"222\", target = 24",
        "output": "['2+22', '22+2']"
      },
      {
        "input": "num = \"1000\", target = 1",
        "output": "['1+0+0+0', '1+0+0-0', '1+0+0*0', '1+0-0+0', '1+0-0-0', '1+0-0*0', '1+0*0+0', '1+0*0-0', '1+0*0*0', '1-0+0+0', '1-0+0-0', '1-0+0*0', '1-0-0+0', '1-0-0-0', '1-0-0*0', '1-0*0+0', '1-0*0-0', '1-0*0*0']"
      },
      {
        "input": "num = \"1234\", target = 10",
        "output": "['1+2+3+4', '1*2*3+4']"
      },
      {
        "input": "num = \"223123\", target = 1",
        "output": "['2+2+3-1-2-3', '2+2+3-1*2*3', '2+2+3*1-2*3', '2+2-3+1+2-3', '2+2-3-1-2+3', '2+2-3*1*2+3', '2+2*3-1-2*3', '2-2+3-1+2-3', '2-2-3-1+2+3', '2-2*3+1*2+3', '2-2*3-1+2*3', '2-2*3*1+2+3', '2*2+3-1-2-3', '2*2+3-1*2*3', '2*2+3*1-2*3', '2*2-3+1+2-3', '2*2-3-1-2+3', '2*2-3*1*2+3', '2+23-1-23', '2-23-1+23', '22+3-1-23']"
      },
      {
        "input": "num = \"1234123412\", target = 1234",
        "output": "['1+2+3+4-12+3*412', '1+2+3-4*1*2+3*412', '1+2+3-4+1234-1*2', '1+2+3-4+1234*1-2', '1+2+3+412*3+4-12', '1+2+3+412*3-4*1*2', '1+2+3*412+3+4-12', '1+2+3*412+3-4*1*2', '1+2+3*412-3-4+1*2', '1+2+3*412-3-4*1+2', '1+2-3-4+1*2+3*412', '1+2-3-4*1+2+3*412', '1+2-3+412*3-4+1*2', '1+2-3+412*3-4*1+2', '1+2*3-4+1234-1-2', '1+2+34*12*3+4+1+2', '1-2+3-4+1234+1*2', '1-2+3-4+1234*1+2', '1-2+3*412-3+4-1*2', '1-2+3*412-3+4*1-2', '1-2-3+4-1*2+3*412', '1-2-3+4*1-2+3*412', '1-2-3+412*3+4-1*2', '1-2-3+412*3+4*1-2', '1-2*3+4+1-2+3*412', '1-2*3+4+1234-1+2', '1-2*3+412*3+4+1-2', '1*2+3-4-1-2+3*412', '1*2+3-4+1234+1-2', '1*2+3+412*3-4-1-2', '1*2+3*412+3-4-1-2', '1*2+3*412-3-4+1+2', '1*2-3+4+1234-1-2', '1*2-3-4+1+2+3*412', '1*2-3+412*3-4+1+2', '1*2*3+4-12+3*412', '1*2*3-4*1*2+3*412', '1*2*3-4+1234-1*2', '1*2*3-4+1234*1-2', '1*2*3+412*3+4-12', '1*2*3+412*3-4*1*2', '1*2+34*12*3+4*1*2', '1*2+34*12*3-4+12', '12+3*412-3*4-1*2', '12+3*412-3*4*1-2', '12-3*4-1*2+3*412', '12-3*4*1-2+3*412', '12+34*12*3-4+1*2', '12+34*12*3-4*1+2', '1234+1+2+3-4-1*2', '1234+1+2+3-4*1-2', '1234+1+2*3-4-1-2', '1234+1-2+3-4+1*2', '1234+1-2+3-4*1+2', '1234+1-2*3+4-1+2', '1234+1*2+3-4+1-2', '1234+1*2-3+4-1-2', '1234+1*2*3-4-1*2', '1234+1*2*3-4*1-2', '1234-1+2-3+4-1*2', '1234-1+2-3+4*1-2', '1234-1+2*3-4+1-2', '1234-1-2-3+4+1*2', '1234-1-2-3+4*1+2', '1234-1-2*3+4+1+2', '1234-1*2+3-4+1+2', '1234-1*2-3+4-1+2', '1234-1*2*3+4+1*2', '1234-1*2*3+4*1+2', '1234*1+2+3-4+1-2', '1234*1+2-3+4-1-2', '1234*1+2*3-4-1*2', '1234*1+2*3-4*1-2', '1234*1-2+3-4+1+2', '1234*1-2-3+4-1+2', '1234*1-2*3+4+1*2', '1234*1-2*3+4*1+2']"
      },
      {
        "input": "num = \"12345\", target = 27",
        "output": "['1+2*3+4*5', '12*3-4-5']"
      },
      {
        "input": "num = \"100000000\", target = 100000000",
        "output": "['100000000']"
      },
      {
        "input": "num = \"1234\", target = 24",
        "output": "['1*2*3*4', '12+3*4']"
      },
      {
        "input": "num = \"987654321\", target = 100",
        "output": "['9+8+7+6*5+43+2+1', '9+8+7-6-5+43*2+1', '9+8+7*6+5+4+32*1', '9+8+7*6-5+43+2+1', '9+8+7*6*5-4*32+1', '9+8+7+65+4+3*2+1', '9+8+7+65+4*3-2+1', '9+8-7+65+4*3*2+1', '9+8*7+6+5+4*3*2*1', '9+8*7+6*5+4+3-2*1', '9+8*7-6+5+4+32*1', '9+8*7-6-5+43+2+1', '9+8+76+5+4-3+2-1', '9+8+76+5-4+3+2+1', '9+8+76+5-4+3*2*1', '9+8-76+54*3-2-1', '9-8+7+6+54+32*1', '9-8+7*6+5*4*3-2-1', '9-8+7+65-4+32-1', '9-8-7*6+54*3-21', '9-8-7+65+43-2*1', '9-8*7+6+54*3-21', '9-8*7*6-5+432*1', '9-8+76-5+4+3+21', '9-8+76-5-4+32*1', '9-8+76+54-32+1', '9*8+7+6+5+4+3+2+1', '9*8+7+6+5+4+3*2*1', '9*8+7+6+5+4*3-2*1', '9*8+7+6+5*4-3-2*1', '9*8+7+6+5*4-3*2+1', '9*8+7+6-5-4+3+21', '9*8+7+6*5+4*3-21', '9*8+7+6*5-4-3-2*1', '9*8+7+6*5-4-3*2+1', '9*8+7+6*5-4*3+2+1', '9*8+7-6+5+4-3+21', '9*8+7-6+5*4+3*2+1', '9*8+7-6+5+43-21', '9*8+7*6-5+4*3-21', '9*8+7*6-5-4-3-2*1', '9*8+7*6-5-4-3*2+1', '9*8+7*6-5-4*3+2+1', '9*8+7*6-5*4+3+2+1', '9*8+7*6-5*4+3*2*1', '9*8+7+65-43-2+1', '9*8+7-65+43*2*1', '9*8-7+6+5+4*3*2*1', '9*8-7+6*5+4+3-2*1', '9*8-7-6+5+4+32*1', '9*8-7-6-5+43+2+1', '9*8+76-54+3+2+1', '9*8+76-54+3*2*1', '9+87+6-5+4-3+2*1', '9+87+6-5-4+3*2+1', '9+87+6-5*4-3+21', '9+87-6+5+4+3-2*1', '9+87-6-5+4*3+2+1', '9+87*6-5*43*2-1', '98+7+6+5*4-32+1', '98+7+6-5-4-3+2-1', '98+7+6*5-4-32+1', '98+7-6+5-4+3-2-1', '98+7-6+5-4-3+2+1', '98+7-6-5+4+3-2+1', '98+7-6*5+4*3*2+1', '98+7*6+5-43-2*1', '98+7*6-5-4-32+1', '98-7+6+5+4-3-2-1', '98-7+6+5+4-3*2*1', '98-7+6+5-4+3-2+1', '98-7+6-5+4+3+2-1', '98-7-6+5+4+3+2+1', '98-7-6+5+4+3*2*1', '98-7-6+5+4*3-2*1', '98-7-6+5*4-3-2*1', '98-7-6+5*4-3*2+1', '98-7-6-5-4+3+21', '98-7*6+5*4+3+21', '98-76+54+3+21']"
      }
    ]
  },
  {
    "id": 1489,
    "difficulty": "Hard",
    "tags": [
      "Union Find",
      "Graph",
      "Minimum Spanning Tree",
      "Sorting",
      "Strongly Connected Component"
    ],
    "problemDescription": "Given a weighted undirected connected graph with n\u00a0vertices numbered from 0 to n - 1,\u00a0and an array edges\u00a0where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes\u00a0ai\u00a0and bi. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles\u00a0and with the minimum possible total edge weight.\nFind all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a\u00a0critical edge. On\u00a0the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.\nNote that you can return the indices of the edges in any order.\n\u00a0\nExample 1:\n\n\nInput: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]\nOutput: [[0,1],[2,3,4,5]]\nExplanation: The figure above describes the graph.\nThe following figure shows all the possible MSTs:\n\nNotice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.\nThe edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.\n\nExample 2:\n\n\nInput: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]\nOutput: [[],[0,1,2,3]]\nExplanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.\n\n\u00a0\nConstraints:\n\n2 <= n <= 100\n1 <= edges.length <= min(200, n * (n - 1) / 2)\nedges[i].length == 3\n0 <= ai < bi < n\n1 <= weighti\u00a0<= 1000\nAll pairs (ai, bi) are distinct.\n\n",
    "starterCode": "class Solution:\n    def findCriticalAndPseudoCriticalEdges(self, n: int, edges: List[List[int]]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "n = 3, edges = [[0,1,1],[1,2,1],[0,2,2]]",
        "output": "[[0, 1], []]"
      },
      {
        "input": "n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]",
        "output": "[[0, 1], [2, 3, 4, 5]]"
      },
      {
        "input": "n = 6, edges = [[0,1,1],[0,2,2],[1,2,3],[1,3,4],[2,3,5],[3,4,6],[4,5,7]]",
        "output": "[[0, 1, 3, 5, 6], []]"
      },
      {
        "input": "n = 6, edges = [[0,1,1],[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,0,5],[1,3,6]]",
        "output": "[[0, 1, 2, 3, 4], []]"
      },
      {
        "input": "n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]",
        "output": "[[], [0, 1, 2, 3]]"
      },
      {
        "input": "n = 3, edges = [[0,1,1],[1,2,2],[2,0,2]]",
        "output": "[[0], [1, 2]]"
      },
      {
        "input": "n = 3, edges = [[0,1,1],[1,2,2],[0,2,3]]",
        "output": "[[0, 1], []]"
      },
      {
        "input": "n = 7, edges = [[0,1,1],[0,2,1],[0,3,1],[1,2,1],[1,3,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2],[6,3,2]]",
        "output": "[[], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]"
      },
      {
        "input": "n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1],[6,0,1]]",
        "output": "[[], [0, 1, 2, 3, 4, 5, 6]]"
      },
      {
        "input": "n = 5, edges = [[0,1,2],[0,3,6],[1,2,5],[1,3,8],[1,4,9],[2,4,7],[3,4,4]]",
        "output": "[[0, 6, 2, 1], []]"
      },
      {
        "input": "n = 6, edges = [[0,1,4],[0,2,4],[1,2,2],[1,3,3],[1,4,2],[2,3,1],[3,4,2],[3,5,3],[4,5,3]]",
        "output": "[[5], [2, 4, 6, 7, 8, 0, 1]]"
      },
      {
        "input": "n = 7, edges = [[0,1,1],[0,2,2],[0,3,3],[1,2,4],[1,3,5],[1,4,6],[2,3,7],[2,4,8],[2,5,9],[3,4,10],[3,5,11],[3,6,12],[4,5,13],[4,6,14],[5,6,15],[0,4,16],[0,5,17],[0,6,18],[1,5,19],[1,6,20],[2,6,21]]",
        "output": "[[0, 1, 2, 5, 8, 11], []]"
      },
      {
        "input": "n = 12, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1],[6,7,1],[7,8,1],[8,9,1],[9,10,1],[10,11,1],[11,0,1],[0,6,2],[1,7,2],[2,8,2],[3,9,2],[4,10,2],[5,11,2]]",
        "output": "[[], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]"
      },
      {
        "input": "n = 10, edges = [[0,1,10],[0,2,20],[0,3,30],[1,2,10],[1,3,20],[1,4,30],[2,3,10],[2,4,20],[2,5,30],[3,4,10],[3,5,20],[3,6,30],[4,5,10],[4,6,20],[4,7,30],[5,6,10],[5,7,20],[5,8,30],[6,7,10],[6,8,20],[6,9,30],[7,8,10],[7,9,20],[8,9,10]]",
        "output": "[[0, 3, 6, 9, 12, 15, 18, 21, 23], []]"
      },
      {
        "input": "n = 10, edges = [[0,1,1],[0,2,2],[0,3,3],[1,2,4],[1,3,5],[2,3,6],[2,4,7],[3,4,8],[4,5,9],[4,6,10],[5,6,11],[5,7,12],[6,7,13],[6,8,14],[7,8,15],[7,9,16],[8,9,17]]",
        "output": "[[0, 1, 2, 6, 8, 9, 11, 13, 15], []]"
      },
      {
        "input": "n = 12, edges = [[0,1,3],[0,2,4],[0,3,5],[1,2,2],[1,3,6],[1,4,7],[2,3,8],[2,4,9],[2,5,10],[3,4,11],[3,5,12],[3,6,13],[4,5,14],[4,6,15],[4,7,16],[5,6,17],[5,7,18],[5,8,19],[6,7,20],[6,8,21],[6,9,22],[7,8,23],[7,9,24],[7,10,25],[8,9,26],[8,10,27],[8,11,28],[9,10,29],[9,11,30],[10,11,31]]",
        "output": "[[3, 0, 2, 5, 8, 11, 14, 17, 20, 23, 26], []]"
      },
      {
        "input": "n = 9, edges = [[0,1,100],[0,2,90],[0,3,95],[1,2,85],[1,3,80],[1,4,75],[2,3,65],[2,4,60],[2,5,55],[3,4,50],[3,5,45],[3,6,40],[4,5,35],[4,6,30],[4,7,25],[5,6,20],[5,7,15],[5,8,10],[6,7,5],[6,8,1],[7,8,50]]",
        "output": "[[19, 18, 17, 14, 11, 8, 5, 1], []]"
      },
      {
        "input": "n = 12, edges = [[0,1,10],[0,2,20],[1,3,30],[1,4,40],[2,5,50],[2,6,60],[3,7,70],[3,8,80],[4,9,90],[4,10,100],[5,11,110],[6,11,120],[7,8,130],[8,9,140],[9,10,150],[10,11,160],[0,3,170],[1,5,180],[2,7,190],[3,9,200],[4,11,210]]",
        "output": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], []]"
      },
      {
        "input": "n = 15, edges = [[0,1,10],[0,2,20],[0,3,30],[1,2,25],[1,4,35],[2,3,40],[2,5,45],[3,4,50],[3,6,55],[4,5,60],[5,6,65],[6,7,70],[6,8,75],[7,8,80],[7,9,85],[8,9,90],[9,10,95],[9,11,100],[10,11,105],[10,12,110],[11,12,115],[12,13,120],[12,14,125],[13,14,130]]",
        "output": "[[0, 1, 2, 4, 6, 8, 11, 12, 14, 16, 17, 19, 21, 22], []]"
      },
      {
        "input": "n = 8, edges = [[0,1,2],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[0,7,8],[1,3,9],[2,4,10],[3,5,11],[4,6,12],[5,7,13],[0,3,14],[1,4,15],[2,5,16],[3,6,17],[4,7,18]]",
        "output": "[[0, 1, 2, 3, 4, 5, 6], []]"
      },
      {
        "input": "n = 8, edges = [[0,1,5],[0,2,20],[0,3,30],[1,2,15],[1,4,10],[2,3,10],[2,4,25],[2,5,35],[3,4,5],[3,6,15],[4,5,20],[4,6,10],[4,7,25],[5,6,30],[5,7,15],[6,7,20]]",
        "output": "[[0, 8, 4, 5, 11, 14], [10, 15]]"
      },
      {
        "input": "n = 8, edges = [[0,1,1],[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[0,7,7],[1,3,8],[2,4,9],[3,5,10],[4,6,11]]",
        "output": "[[0, 1, 2, 3, 4, 5, 6], []]"
      },
      {
        "input": "n = 6, edges = [[0,1,100],[0,2,50],[0,3,20],[1,2,60],[1,3,40],[1,4,70],[2,3,30],[2,4,80],[2,5,90],[3,4,5],[3,5,10],[4,5,100]]",
        "output": "[[9, 10, 2, 6, 4], []]"
      },
      {
        "input": "n = 8, edges = [[0,1,1],[0,2,2],[0,3,3],[1,2,4],[1,3,5],[1,4,6],[2,3,7],[2,4,8],[2,5,9],[3,4,10],[3,5,11],[3,6,12],[4,5,13],[4,6,14],[4,7,15],[5,6,16],[5,7,17],[6,7,18]]",
        "output": "[[0, 1, 2, 5, 8, 11, 14], []]"
      },
      {
        "input": "n = 8, edges = [[0,1,10],[0,2,6],[0,3,5],[1,3,15],[2,3,4],[2,4,11],[3,4,9],[3,5,10],[4,5,13],[4,6,14],[5,6,16],[5,7,7],[6,7,18]]",
        "output": "[[4, 2, 11, 6, 0, 7, 9], []]"
      },
      {
        "input": "n = 12, edges = [[0,1,2],[0,2,4],[1,3,3],[1,4,5],[2,3,6],[2,4,7],[3,5,8],[4,5,9],[5,6,10],[6,7,11],[6,8,12],[7,9,13],[8,9,14],[9,10,15],[10,11,16],[11,0,17],[2,7,18],[3,8,19],[4,9,20],[5,10,21]]",
        "output": "[[0, 2, 1, 3, 6, 8, 9, 10, 11, 13, 14], []]"
      },
      {
        "input": "n = 10, edges = [[0,1,10],[0,2,20],[1,2,5],[1,3,15],[2,3,25],[2,4,10],[3,4,30],[3,5,15],[4,5,5],[4,6,20],[5,6,25],[5,7,10],[6,7,30],[6,8,15],[7,8,5],[7,9,20],[8,9,25]]",
        "output": "[[2, 8, 14, 0, 5, 11, 13, 15], [3, 7]]"
      },
      {
        "input": "n = 9, edges = [[0,1,5],[0,2,6],[0,3,7],[1,2,8],[1,3,9],[2,3,10],[2,4,11],[3,4,12],[3,5,13],[4,5,14],[4,6,15],[5,6,16],[5,7,17],[6,7,18],[6,8,19],[7,8,20],[0,4,21],[1,5,22],[2,6,23],[3,7,24],[4,8,25]]",
        "output": "[[0, 1, 2, 6, 8, 10, 12, 14], []]"
      },
      {
        "input": "n = 10, edges = [[0,1,10],[0,2,15],[0,3,20],[1,2,35],[1,3,25],[2,3,30],[4,5,10],[4,6,20],[4,7,30],[5,6,25],[5,7,35],[6,7,40],[8,9,5],[8,7,15],[7,9,10]]",
        "output": "[[12, 0, 6, 14, 1, 13, 2, 7, 4, 9, 5, 8, 3, 10, 11], []]"
      },
      {
        "input": "n = 15, edges = [[0,1,5],[0,2,7],[0,3,9],[1,2,3],[1,3,2],[1,4,6],[2,3,1],[2,4,4],[2,5,8],[3,4,11],[3,5,13],[3,6,15],[4,5,12],[4,6,14],[5,6,16],[5,7,18],[5,8,20],[6,7,21],[6,8,22],[7,8,23],[7,9,25],[7,10,27],[8,9,24],[8,10,26],[9,10,28],[9,11,29],[9,12,31],[10,11,30],[10,12,32],[11,12,33],[11,13,35],[11,14,37],[12,13,34],[12,14,36],[13,14,38]]",
        "output": "[[6, 4, 7, 0, 8, 13, 15, 16, 22, 23, 25, 26, 32, 33], []]"
      },
      {
        "input": "n = 8, edges = [[0,1,1],[0,2,2],[1,3,3],[1,4,4],[2,5,5],[2,6,6],[3,6,7],[3,7,8],[4,7,9],[5,7,10],[0,3,11],[1,5,12],[2,4,13],[6,7,14]]",
        "output": "[[0, 1, 2, 3, 4, 5, 7], []]"
      },
      {
        "input": "n = 9, edges = [[0,1,5],[0,2,6],[0,3,7],[1,2,8],[1,3,9],[1,4,10],[2,3,11],[2,4,12],[2,5,13],[3,4,14],[3,5,15],[3,6,16],[4,5,17],[4,6,18],[4,7,19],[5,6,20],[5,7,21],[5,8,22],[6,7,23],[7,8,24]]",
        "output": "[[0, 1, 2, 5, 8, 11, 14, 17], []]"
      },
      {
        "input": "n = 10, edges = [[0,1,10],[0,2,10],[1,3,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,0,10],[0,3,20],[1,4,20],[2,5,20],[3,6,20],[4,7,20],[5,8,20],[6,9,20],[7,0,20],[8,1,20],[9,2,20]]",
        "output": "[[], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]"
      },
      {
        "input": "n = 10, edges = [[0,1,4],[0,2,8],[1,2,2],[1,3,6],[2,3,3],[3,4,5],[4,5,9],[5,6,10],[6,7,1],[7,8,7],[8,9,11],[9,0,12],[1,4,13],[2,5,14]]",
        "output": "[[8, 2, 4, 0, 5, 9, 6, 7, 10], []]"
      },
      {
        "input": "n = 12, edges = [[0,1,1],[0,2,2],[0,3,3],[1,2,4],[1,3,5],[1,4,6],[2,3,7],[2,4,8],[2,5,9],[3,4,10],[3,5,11],[3,6,12],[4,5,13],[4,6,14],[5,6,15],[6,7,16],[6,8,17],[7,8,18],[7,9,19],[8,9,20],[8,10,21],[9,10,22],[9,11,23],[10,11,24]]",
        "output": "[[0, 1, 2, 5, 8, 11, 15, 16, 18, 20, 22], []]"
      },
      {
        "input": "n = 10, edges = [[0,1,1],[0,2,2],[1,2,3],[1,3,4],[2,3,5],[3,4,6],[4,5,7],[5,6,8],[6,7,9],[7,8,10],[8,9,11],[0,9,15],[2,8,12],[4,7,13]]",
        "output": "[[0, 1, 3, 5, 6, 7, 8, 9, 10], []]"
      },
      {
        "input": "n = 11, edges = [[0,1,2],[0,2,3],[0,3,4],[0,4,5],[1,2,6],[1,3,7],[1,4,8],[1,5,9],[2,3,10],[2,4,11],[2,5,12],[2,6,13],[3,4,14],[3,5,15],[3,6,16],[3,7,17],[4,5,18],[4,6,19],[4,7,20],[4,8,21],[5,6,22],[5,7,23],[5,8,24],[5,9,25],[6,7,26],[6,8,27],[6,9,28],[6,10,29],[7,8,30],[7,9,31],[7,10,32],[8,9,33],[8,10,34],[9,10,35]]",
        "output": "[[0, 1, 2, 3, 7, 11, 15, 19, 23, 27], []]"
      },
      {
        "input": "n = 8, edges = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,0,9],[0,3,10],[1,4,11],[2,5,12],[3,6,13],[4,7,14],[5,0,15],[6,1,16],[7,2,17]]",
        "output": "[[0, 1, 2, 3, 4, 5, 6], []]"
      },
      {
        "input": "n = 9, edges = [[0,1,1],[0,2,1],[0,3,1],[1,4,1],[1,5,1],[2,4,1],[2,6,1],[3,5,1],[3,6,1],[4,7,1],[5,7,1],[6,7,1],[7,8,1],[0,4,1],[0,5,1],[0,6,1],[1,6,1],[1,7,1],[2,5,1],[2,7,1],[3,4,1],[3,7,1],[4,6,1],[5,6,1],[4,8,1],[5,8,1],[6,8,1]]",
        "output": "[[], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]]"
      },
      {
        "input": "n = 7, edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,0,10],[0,3,20],[1,4,20],[2,5,20],[3,6,20],[4,0,20],[5,1,20],[6,2,20]]",
        "output": "[[], [0, 1, 2, 3, 4, 5, 6]]"
      },
      {
        "input": "n = 9, edges = [[0,1,1],[0,2,2],[0,3,3],[0,4,4],[0,5,5],[0,6,6],[0,7,7],[0,8,8],[1,2,9],[2,3,10],[3,4,11],[4,5,12],[5,6,13],[6,7,14],[7,8,15],[8,1,16],[1,3,17],[3,5,18],[5,7,19],[7,1,20],[1,4,21],[4,6,22],[6,8,23],[8,2,24],[2,4,25],[4,7,26],[7,3,27],[3,6,28],[6,1,29],[1,5,30],[5,2,31],[2,7,32],[7,4,33],[4,8,34],[8,3,35],[3,1,36]]",
        "output": "[[0, 1, 2, 3, 4, 5, 6, 7], []]"
      },
      {
        "input": "n = 8, edges = [[0,1,1],[0,2,1],[0,3,1],[0,4,1],[0,5,1],[0,6,1],[0,7,1],[1,2,2],[2,3,2],[3,4,2],[4,5,2],[5,6,2],[6,7,2],[7,1,2],[1,3,2],[3,5,2],[5,7,2],[7,2,2],[2,4,2],[4,6,2],[6,1,2],[1,4,2],[4,7,2],[7,3,2],[3,6,2],[6,2,2],[2,5,2],[5,3,2],[3,7,2],[7,4,2],[4,1,2],[1,5,2],[5,2,2],[2,6,2],[6,3,2],[3,1,2],[1,6,2],[6,4,2],[4,2,2],[2,7,2],[7,5,2],[5,4,2],[4,3,2],[3,2,2],[2,1,2],[1,7,2],[7,6,2],[6,5,2],[5,4,2],[4,3,2],[3,1,2],[1,6,2],[6,4,2],[4,2,2],[2,7,2],[7,5,2],[5,3,2],[3,7,2]]",
        "output": "[[0, 1, 2, 3, 4, 5, 6], []]"
      },
      {
        "input": "n = 12, edges = [[0,1,1],[0,2,2],[0,3,3],[1,4,4],[1,5,5],[2,6,6],[2,7,7],[3,8,8],[3,9,9],[4,10,10],[5,11,11],[6,11,12],[7,10,13],[8,9,14],[9,10,15],[10,11,16]]",
        "output": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], []]"
      },
      {
        "input": "n = 10, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1],[6,7,1],[7,8,1],[8,9,1],[9,0,1],[0,5,2],[1,6,2],[2,7,2],[3,8,2],[4,9,2]]",
        "output": "[[], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]"
      },
      {
        "input": "n = 12, edges = [[0,1,1],[1,2,1],[2,3,2],[3,4,3],[4,5,4],[5,6,5],[6,7,6],[7,8,7],[8,9,8],[9,10,9],[10,11,10],[11,0,11],[0,2,12],[1,3,13],[2,4,14],[3,5,15],[4,6,16],[5,7,17],[6,8,18],[7,9,19],[8,10,20],[9,11,21],[10,0,22],[11,1,23],[0,3,24],[1,4,25],[2,5,26],[3,6,27],[4,7,28],[5,8,29],[6,9,30],[7,10,31],[8,11,32],[9,0,33],[10,1,34],[11,2,35],[0,4,36],[1,5,37],[2,6,38],[3,7,39],[4,8,40],[5,9,41],[6,10,42],[7,11,43],[8,0,44],[9,1,45],[10,2,46],[11,3,47],[0,5,48],[1,6,49],[2,7,50],[3,8,51],[4,9,52],[5,10,53],[6,11,54],[7,0,55],[8,1,56],[9,2,57],[10,3,58],[11,4,59]]",
        "output": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], []]"
      },
      {
        "input": "n = 15, edges = [[0,1,100],[0,2,200],[0,3,300],[1,4,400],[1,5,500],[2,6,600],[2,7,700],[3,8,800],[3,9,900],[4,10,1000],[4,11,1100],[5,12,1200],[5,13,1300],[6,14,1400],[6,15,1500],[7,16,1600],[7,17,1700],[8,18,1800],[8,19,1900],[9,20,2000],[9,21,2100],[10,11,2200],[12,13,2300],[14,15,2400],[16,17,2500],[18,19,2600],[20,21,2700],[10,15,2800],[11,16,2900],[12,17,3000],[13,18,3100],[14,19,3200],[15,20,3300],[16,21,3400],[17,18,3500],[19,20,3600],[21,22,3700]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 8, edges = [[0,1,2],[0,2,3],[0,3,4],[1,2,1],[1,3,5],[1,4,6],[2,3,7],[2,4,8],[2,5,9],[3,4,10],[3,5,11],[3,6,12],[4,5,13],[4,6,14],[4,7,15],[5,6,16],[5,7,17],[6,7,18]]",
        "output": "[[3, 0, 2, 5, 8, 11, 14], []]"
      },
      {
        "input": "n = 15, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,0,15],[0,7,16],[1,8,17],[2,9,18],[3,10,19],[4,11,20],[5,12,21],[6,13,22],[7,14,23],[8,0,24],[9,1,25],[10,2,26],[11,3,27],[12,4,28],[13,5,29],[14,6,30]]",
        "output": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], []]"
      },
      {
        "input": "n = 9, edges = [[0,1,1],[0,2,2],[1,2,3],[1,3,4],[2,3,5],[2,4,6],[3,4,7],[3,5,8],[4,5,9],[4,6,10],[5,6,11],[5,7,12],[6,7,13],[6,8,14],[7,8,15],[0,4,16],[1,5,17],[2,6,18],[3,7,19],[0,5,20],[1,6,21],[2,7,22],[3,8,23],[0,6,24],[1,7,25],[2,8,26]]",
        "output": "[[0, 1, 3, 5, 7, 9, 11, 13], []]"
      },
      {
        "input": "n = 9, edges = [[0,1,1],[0,2,10],[0,3,10],[1,2,10],[1,3,10],[2,3,10],[2,4,1],[2,5,10],[3,4,10],[3,5,10],[4,5,1],[4,6,10],[4,7,10],[5,6,10],[5,7,10],[6,7,1],[6,8,10],[7,8,10]]",
        "output": "[[0, 6, 10, 15], [1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 16, 17]]"
      },
      {
        "input": "n = 9, edges = [[0,1,2],[0,2,3],[0,3,4],[1,2,5],[1,3,6],[2,3,7],[3,4,8],[4,5,9],[5,6,10],[6,7,11],[7,8,12],[8,4,13],[0,5,14],[1,6,15],[2,7,16]]",
        "output": "[[0, 1, 2, 6, 7, 8, 9, 10], []]"
      },
      {
        "input": "n = 12, edges = [[0,1,1],[0,2,2],[0,3,3],[1,2,4],[1,3,5],[1,4,6],[2,3,7],[2,4,8],[2,5,9],[3,4,10],[3,5,11],[3,6,12],[4,5,13],[4,6,14],[4,7,15],[5,6,16],[5,7,17],[5,8,18],[6,7,19],[6,8,20],[6,9,21],[7,8,22],[7,9,23],[7,10,24],[8,9,25],[8,10,26],[8,11,27],[9,10,28],[9,11,29],[10,11,30]]",
        "output": "[[0, 1, 2, 5, 8, 11, 14, 17, 20, 23, 26], []]"
      },
      {
        "input": "n = 10, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,0,10],[0,5,11],[1,6,12],[2,7,13],[3,8,14],[4,9,15]]",
        "output": "[[0, 1, 2, 3, 4, 5, 6, 7, 8], []]"
      },
      {
        "input": "n = 9, edges = [[0,1,2],[1,2,2],[2,3,2],[3,4,2],[4,5,2],[5,6,2],[6,7,2],[7,8,2],[8,0,2],[0,2,3],[1,3,3],[2,4,3],[3,5,3],[4,6,3],[5,7,3],[6,8,3],[7,0,3],[8,1,3]]",
        "output": "[[], [0, 1, 2, 3, 4, 5, 6, 7, 8]]"
      },
      {
        "input": "n = 15, edges = [[0,1,1],[0,2,2],[0,3,3],[1,2,4],[1,3,5],[1,4,6],[2,3,7],[2,4,8],[2,5,9],[3,4,10],[3,5,11],[3,6,12],[4,5,13],[4,6,14],[4,7,15],[5,6,16],[5,7,17],[5,8,18],[6,7,19],[6,8,20],[6,9,21],[7,8,22],[7,9,23],[7,10,24],[8,9,25],[8,10,26],[8,11,27],[9,10,28],[9,11,29],[10,11,30],[11,12,31],[11,13,32],[11,14,33],[12,13,34],[12,14,35],[13,14,36]]",
        "output": "[[0, 1, 2, 5, 8, 11, 14, 17, 20, 23, 26, 30, 31, 32], []]"
      },
      {
        "input": "n = 10, edges = [[0,1,2],[0,2,3],[0,3,4],[1,2,1],[1,4,5],[1,5,6],[2,3,2],[2,5,3],[3,6,7],[3,7,8],[4,5,2],[4,8,9],[5,6,4],[5,9,10],[6,7,5],[7,8,6],[8,9,7]]",
        "output": "[[3, 0, 6, 10, 7, 12, 14, 15, 16], []]"
      }
    ]
  },
  {
    "id": 1163,
    "difficulty": "Hard",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "problemDescription": "Given a string s, return the last substring of s in lexicographical order.\n\u00a0\nExample 1:\n\nInput: s = \"abab\"\nOutput: \"bab\"\nExplanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\".\n\nExample 2:\n\nInput: s = \"leetcode\"\nOutput: \"tcode\"\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 4 * 105\ns contains only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def lastSubstring(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"abab\"",
        "output": "bab"
      },
      {
        "input": "s = \"mississippi\"",
        "output": "ssissippi"
      },
      {
        "input": "s = \"abcdabcdabcd\"",
        "output": "dabcdabcd"
      },
      {
        "input": "s = \"banana\"",
        "output": "nana"
      },
      {
        "input": "s = \"zyxzy\"",
        "output": "zyxzy"
      },
      {
        "input": "s = \"zyxzyxzyx\"",
        "output": "zyxzyxzyx"
      },
      {
        "input": "s = \"a\"",
        "output": "a"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"aaa\"",
        "output": "aaa"
      },
      {
        "input": "s = \"abcd\"",
        "output": "d"
      },
      {
        "input": "s = \"akjflaweproqwoijrpprpwlekfawpqwlekfqpwoqpwlekjqwlkfqpwlkerpqwlkfjqwlekflpqwlekfqpwlkerpqwlekfqwlekjfqpwekfqpwlkjqwlekjfqpwlkerpqwlekfpwoqwjfwqppqwjflawejqawlkjqwlkfjqwlkfjqwlkfjqwlkfjqwlekjqwlekjqwlekjqwlekjqwlekjqwlekjqwlkjqwlekjqwlekjqwlekjqwlekjqwlekjqwlkjqwlekjqwlekjqwlekjqwlekjqwlekjqwlkjqwlekjqwlekjqwlekjqwlekjqwlekjqwlkj\"",
        "output": "wqppqwjflawejqawlkjqwlkfjqwlkfjqwlkfjqwlkfjqwlekjqwlekjqwlekjqwlekjqwlekjqwlekjqwlkjqwlekjqwlekjqwlekjqwlekjqwlekjqwlkjqwlekjqwlekjqwlekjqwlekjqwlekjqwlkjqwlekjqwlekjqwlekjqwlekjqwlekjqwlkj"
      },
      {
        "input": "s = \"leetcode\"",
        "output": "tcode"
      },
      {
        "input": "s = \"aaaa\"",
        "output": "aaaa"
      },
      {
        "input": "s = \"aabbccddeeff\"",
        "output": "ff"
      },
      {
        "input": "s = \"abcdabceabcdabcdabcdabceabcdabcdabcd\"",
        "output": "eabcdabcdabcdabceabcdabcdabcd"
      },
      {
        "input": "s = \"aaaabbbbccccdddd\"",
        "output": "dddd"
      },
      {
        "input": "s = \"leetcodeleetcodeleetcodeleetcodeleetcodeleetcodeleetcode\"",
        "output": "tcodeleetcodeleetcodeleetcodeleetcodeleetcodeleetcode"
      },
      {
        "input": "s = \"aaabaaaabaaaaabaaaaaaabaaaaaaaabaaaaaaaaaabaaaaaaaaaaabaaaaaaaaaaa\"",
        "output": "baaaabaaaaabaaaaaaabaaaaaaaabaaaaaaaaaabaaaaaaaaaaabaaaaaaaaaaa"
      },
      {
        "input": "s = \"aaaabaaaabaaaaaa\"",
        "output": "baaaabaaaaaa"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "z"
      },
      {
        "input": "s = \"ababababababababababab\"",
        "output": "babababababababababab"
      },
      {
        "input": "s = \"ananananananananananananananan\"",
        "output": "nanananananananananananananan"
      },
      {
        "input": "s = \"aaaabbaaaabbaaa\"",
        "output": "bbaaaabbaaa"
      },
      {
        "input": "s = \"aabbaabbaabbaabbaabb\"",
        "output": "bbaabbaabbaabbaabb"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"thisisaverylongstringwithseveralrepeatedsubstringsrepeated\"",
        "output": "ylongstringwithseveralrepeatedsubstringsrepeated"
      },
      {
        "input": "s = \"leetcodeloveleetcode\"",
        "output": "veleetcode"
      },
      {
        "input": "s = \"abababababababababab\"",
        "output": "bababababababababab"
      },
      {
        "input": "s = \"bcbcbcbcbcbcbcbc\"",
        "output": "cbcbcbcbcbcbcbc"
      },
      {
        "input": "s = \"anananananananan\"",
        "output": "nananananananan"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "dabcdabcdabcdabcdabcdabcdabcdabcdabcd"
      },
      {
        "input": "s = \"xyxxyxyxxyxyxxyxyxyxxyxyx\"",
        "output": "yxyxyxxyxyx"
      },
      {
        "input": "s = \"abababababababa\"",
        "output": "bababababababa"
      },
      {
        "input": "s = \"abracadabra\"",
        "output": "racadabra"
      },
      {
        "input": "s = \"aaaaaabaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaab\"",
        "output": "baaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaab"
      },
      {
        "input": "s = \"abcdbacdcbac\"",
        "output": "dcbac"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"bbaaabbaaabbaaa\"",
        "output": "bbaaabbaaabbaaa"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaab\"",
        "output": "b"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffff\"",
        "output": "ffff"
      },
      {
        "input": "s = \"abracadabraabracadabraabracadabraabracadabraabracadabra\"",
        "output": "racadabraabracadabraabracadabraabracadabraabracadabra"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"acbbccddeeefffggghhhh\"",
        "output": "hhhh"
      },
      {
        "input": "s = \"racecar\"",
        "output": "racecar"
      },
      {
        "input": "s = \"aaaaaaaaaaab\"",
        "output": "b"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabc\"",
        "output": "cabcabcabcabcabcabcabcabc"
      },
      {
        "input": "s = \"abcdexyzxyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "zxyzxyzxyzxyzxyzxyzxyzxyz"
      },
      {
        "input": "s = \"rollingstonesrollingstonesrollingstones\"",
        "output": "tonesrollingstonesrollingstones"
      },
      {
        "input": "s = \"abcdedcbaedcba\"",
        "output": "edcbaedcba"
      },
      {
        "input": "s = \"aquickbrownfoxjumpsoverthelazydogaquickbrownfoxjumpsoverthelazydog\"",
        "output": "zydogaquickbrownfoxjumpsoverthelazydog"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "zzyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"ababababababab\"",
        "output": "babababababab"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "zabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"racecar racecar racecar\"",
        "output": "racecar racecar racecar"
      },
      {
        "input": "s = \"bananaananabananaananabananaananaba\"",
        "output": "nanabananaananabananaananaba"
      },
      {
        "input": "s = \"bbaaaaaaaaaaaaaaaaaaab\"",
        "output": "bbaaaaaaaaaaaaaaaaaaab"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"aazzzzzaazzzzz\"",
        "output": "zzzzzaazzzzz"
      },
      {
        "input": "s = \"mmmmmmmllllllllkkkkkkkkjjjjjjjjiiiiiiiioooooooonnnnnnnmmm\"",
        "output": "oooooooonnnnnnnmmm"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"aaaaaaaaaabaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaab\"",
        "output": "baaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaab"
      },
      {
        "input": "s = \"aabbccddeeffgg\"",
        "output": "gg"
      },
      {
        "input": "s = \"leetcodeisacodeleetcode\"",
        "output": "tcodeisacodeleetcode"
      },
      {
        "input": "s = \"aabbaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "zz"
      },
      {
        "input": "s = \"zzzzzyzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"xyzyxzyxyzyxzyxyzyxzyxyzyxzyxyzyxzyxyzyxzyxyzyxzyxyzyxzyx\"",
        "output": "zyxzyxyzyxzyxyzyxzyxyzyxzyxyzyxzyxyzyxzyxyzyxzyxyzyxzyx"
      },
      {
        "input": "s = \"bananaananabananananaba\"",
        "output": "nanananaba"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"aaaaaaaaaaabbbbbbbbbbbbbbbbccccccccccccccdddddddddddddddddddd\"",
        "output": "dddddddddddddddddddd"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"racecarbananaappleorangeorangeapplebananaorangeorangeapplebananaorange\"",
        "output": "rbananaappleorangeorangeapplebananaorangeorangeapplebananaorange"
      },
      {
        "input": "s = \"abcdefgzyxwvutsrqpomnlkjihgfedcba\"",
        "output": "zyxwvutsrqpomnlkjihgfedcba"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "zz"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaabb\"",
        "output": "bb"
      },
      {
        "input": "s = \"abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"aaaaaaabbbbbbbccccccdddddeeeeeeffffffff\"",
        "output": "ffffffff"
      },
      {
        "input": "s = \"bbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabb\"",
        "output": "bbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabb"
      },
      {
        "input": "s = \"aaaaaaaaaabaaaaaaaaaabaaaaaaaaaab\"",
        "output": "baaaaaaaaaabaaaaaaaaaab"
      },
      {
        "input": "s = \"abcdedcbaabcdedcbaabcdedcbaabcdedcbaabcdedcbaabcdedcba\"",
        "output": "edcbaabcdedcbaabcdedcbaabcdedcbaabcdedcbaabcdedcba"
      }
    ]
  },
  {
    "id": 1569,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Union Find",
      "Binary Search Tree",
      "Memoization",
      "Array",
      "Math",
      "Divide and Conquer",
      "Dynamic Programming",
      "Binary Tree",
      "Combinatorics"
    ],
    "problemDescription": "Given an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums.\n\nFor example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. The array [2,3,1] also yields the same BST but [3,2,1] yields a different BST.\n\nReturn the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums.\nSince the answer may be very large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\n\nInput: nums = [2,1,3]\nOutput: 1\nExplanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.\n\nExample 2:\n\n\nInput: nums = [3,4,5,1,2]\nOutput: 5\nExplanation: The following 5 arrays will yield the same BST: \n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]\n\nExample 3:\n\n\nInput: nums = [1,2,3]\nOutput: 0\nExplanation: There are no other orderings of nums that will yield the same BST.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= nums.length\nAll integers in nums are distinct.\n\n",
    "starterCode": "class Solution:\n    def numOfWays(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [10,5,15,3,7,13,18,1,4,6,8,12,14,17,19]",
        "output": "21964799"
      },
      {
        "input": "nums = [1,3,2]",
        "output": "0"
      },
      {
        "input": "nums = [10,5,15,3,7,12,18,1,4,6,8,11,13,17,19]",
        "output": "21964799"
      },
      {
        "input": "nums = [8,5,12,3,7,10,15,1,4,6,9,11,13,14,16,17,18,19,20]",
        "output": "572970385"
      },
      {
        "input": "nums = [9,4,10,2,5,8,11,1,3,6,7]",
        "output": "3149"
      },
      {
        "input": "nums = [6,2,9,1,3,8,10,4,5,7]",
        "output": "1511"
      },
      {
        "input": "nums = [1,2,3]",
        "output": "0"
      },
      {
        "input": "nums = [2,1,3]",
        "output": "1"
      },
      {
        "input": "nums = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15,16]",
        "output": "108107999"
      },
      {
        "input": "nums = [8,5,10,3,6,9,11,1,4,7]",
        "output": "3359"
      },
      {
        "input": "nums = [5,3,6,2,4,1]",
        "output": "14"
      },
      {
        "input": "nums = [3,4,5,1,2]",
        "output": "5"
      },
      {
        "input": "nums = [4,2,5,1,3]",
        "output": "7"
      },
      {
        "input": "nums = [5,2,6,1,3,4]",
        "output": "14"
      },
      {
        "input": "nums = [20,10,30,5,15,25,35,3,7,12,17,22,27,32,37,2,4,6,8,11,13,16,18,21,23,26,28,31,33,36,38,1,9,14,19,24,29,34,39]",
        "output": "447293125"
      },
      {
        "input": "nums = [100, 50, 150, 25, 75, 125, 175, 12, 37, 62, 87, 112, 137, 162, 187, 6, 18, 28, 43, 53, 61, 68, 72, 82, 91, 3, 9, 14, 21, 26, 31, 36, 41, 46, 51, 56, 65, 70, 77, 84, 89, 94, 99]",
        "output": "7608543"
      },
      {
        "input": "nums = [50,25,75,12,37,62,87,6,18,29,43,56,68,81,93,3,8,14,16,23,27,33,35,41,44,48,51,55,58,60,65,67,70,73,76,78,80,83,85,88,90,91,92,95,96,97,98,99,100]",
        "output": "346227338"
      },
      {
        "input": "nums = [25,15,30,10,20,28,35,5,12,18,26,32,38,2,7,11,14,17,19,22,25,29,31,34,37,39,40,41]",
        "output": "677042095"
      },
      {
        "input": "nums = [64,32,96,16,48,80,112,8,24,40,56,72,88,104,120,4,12,20,28,36,44,52,60,68,76,84,92,100,108,116,124,2,6,10,14,18,22,26,30,34,38,42,46,50,54,58,62,66,70,74,78,82,86,90,94,98,102,106,110,114,118,122,126,130,134,138,142,146,150]",
        "output": "320734915"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "0"
      },
      {
        "input": "nums = [300, 150, 450, 75, 225, 375, 525, 38, 113, 188, 250, 325, 400, 475, 550, 19, 58, 87, 138, 175, 208, 238, 288, 306, 344, 363, 413, 442, 463, 488, 508, 538, 563, 588, 608, 2, 9, 20, 36, 51, 67, 79, 94, 107, 120, 133, 148, 163, 178, 193, 209, 224, 240, 256, 271, 287, 302, 318, 333, 349, 364, 380, 396, 412, 428, 443, 459, 474, 490, 505, 521, 536, 552, 568, 583, 599, 614, 629, 644, 659, 674, 689, 704, 719, 734, 749, 764, 779, 794, 809, 824, 839, 854, 869, 884, 899, 914, 929, 944, 959, 974, 989, 1004]",
        "output": "118530866"
      },
      {
        "input": "nums = [50,25,75,12,37,63,87,6,18,28,43,55,61,70,80,90,1,9,15,20,29,34,38,42,48,53,58,62,68,72,78,82,85,88,95]",
        "output": "446421114"
      },
      {
        "input": "nums = [50, 25, 75, 12, 37, 62, 87, 6, 18, 28, 43, 53, 61, 68, 72, 82, 91, 3, 9, 14, 21, 27, 31, 41, 46, 50, 57, 65, 70, 78, 85, 88, 94, 1, 5, 8, 11, 15, 19, 23, 26, 30, 35, 40, 45, 49, 52, 55, 58, 63, 66, 71, 74, 77, 80, 83, 86, 90, 93, 97, 99]",
        "output": "571657448"
      },
      {
        "input": "nums = [5,3,8,1,4,7,9,2,6,10,11,12,13,14,15]",
        "output": "108107"
      },
      {
        "input": "nums = [20,10,30,5,15,25,35,3,7,12,18,23,27,33,37,2,4,6,8,11,13,16,19,22,24,26,28,31,32,34,36,38,39,40]",
        "output": "479196662"
      },
      {
        "input": "nums = [50,25,75,12,37,63,88,6,18,30,45,55,60,70,85,90,3,9,15,21,27,33,40,48,52,58,62,68,73,77,83,87,92,95,98]",
        "output": "668093717"
      },
      {
        "input": "nums = [50,25,75,12,37,63,87,6,18,30,45,55,61,65,72,81,93,3,9,15,20,27,32,40,47,52,57,60,62,64,67,70,74,78,84,86,89,90,91,92,95,96,97,98,99]",
        "output": "194452240"
      },
      {
        "input": "nums = [6,4,8,2,5,7,9,1,3,10,11]",
        "output": "8063"
      },
      {
        "input": "nums = [10,5,15,3,7,12,18,1,4,6,8,11,13,14,16,17,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "372948988"
      },
      {
        "input": "nums = [6,3,9,1,4,7,10,2,5,8]",
        "output": "2267"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [20,10,30,5,15,25,35,1,7,12,18,22,28,33,40,2,4,6,8,9,11,13,16,17,19,21,23,24,26,27,29,31,32,34,36,37,38,39]",
        "output": "823462672"
      },
      {
        "input": "nums = [15,10,20,5,12,17,25,3,7,11,14,16,18,23,28]",
        "output": "21964799"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "0"
      },
      {
        "input": "nums = [256,128,384,64,192,288,448,32,96,160,224,320,352,416,480,16,48,80,112,144,176,208,240,272,304,336,368,400,432,464,496,8,24,40,56,72,88,104,120,136,152,168,184,200,216,232,248,264,280,296,312,328,344,360,376,392,408,424,440,456,472,488,512]",
        "output": "968800645"
      },
      {
        "input": "nums = [5,2,7,1,3,6,8,4]",
        "output": "209"
      },
      {
        "input": "nums = [7,2,11,1,4,8,12,3,5,6,9,10]",
        "output": "27719"
      },
      {
        "input": "nums = [100,50,150,25,75,125,175,12,37,63,87,112,137,163,187,6,18,28,43,55,61,70,80,90,102,117,132,142,153,168,178,182,188,195]",
        "output": "84315017"
      },
      {
        "input": "nums = [15, 7, 20, 3, 11, 17, 25, 1, 5, 9, 13, 16, 19, 23, 27, 2, 4, 6, 8, 10, 12, 14, 18, 21, 22, 24, 26, 28, 29]",
        "output": "993050933"
      },
      {
        "input": "nums = [50,25,75,12,37,62,88,6,18,28,43,55,60,70,80,90,3,9,15,20,24,26,32,36,39,42,45,48,53,58,61,65,68,72,74,77,82,85,87,89,92,94,96,98,100]",
        "output": "587907399"
      },
      {
        "input": "nums = [25,10,30,5,15,20,35,2,7,13,18,22,28,33,38,1,4,6,8,11,14,17,19,21,23,27,31,32,34,36,37,39,40]",
        "output": "138112265"
      },
      {
        "input": "nums = [60,30,90,15,45,75,105,10,20,40,50,70,80,95,100,110,5,8,12,17,25,35,42,48,55,65,72,78,85,93,98,102,108,115,120,125,130,135,140,145,150]",
        "output": "303275395"
      },
      {
        "input": "nums = [30,15,45,7,22,37,52,3,11,18,26,32,40,48,55,1,2,5,6,8,9,10,12,13,14,16,17,19,20,21,23,24,25,27,28,29,31,33,34,35,36,38,39,41,42,43,44,46,47,49,50,51,53,54,56,57,58,59,60]",
        "output": "443856139"
      },
      {
        "input": "nums = [600,300,900,150,450,750,1050,75,225,375,525,675,825,975,1125,1275,38,113,188,263,338,413,488,563,638,713,788,863,938,1013,1088,1163,1238,1313,1388,1463,1538,1613,1688,1763,1838,1913,1988,24,69,114,159,204,249,294,339,384,429,474,519,564,609,654,699,744,789,834,879,924,969,1014,1059,1104,1149,1194,1239,1284,1329,1374,1419,1464,1509,1554,1599,1644,1689,1734,1779,1824,1869,1914,1959,1994,12,36,60,84,108,132,156,180,204,228,252,276,300,324,348,372,396,420,444,468,492,516,540,564,588,612,636,660,684,708,732,756,780,804,828,852,876,900,924,948,972,996,1020,1044,1068,1092,1116,1140,1164,1188,1212,1236,1260,1284,1308,1332,1356,1380,1404,1428,1452,1476,1500,1524,1548,1572,1596,1620,1644,1668,1692,1716,1740,1764,1788,1812,1836,1860,1884,1908,1932,1956,1980]",
        "output": "244403225"
      },
      {
        "input": "nums = [7, 3, 11, 1, 5, 9, 13, 2, 4, 6, 8, 10, 12, 14, 15]",
        "output": "12612599"
      },
      {
        "input": "nums = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37,2,4,6,8,12,14,16,18,22,24,26,28,32,34,36,38]",
        "output": "203434153"
      },
      {
        "input": "nums = [15,7,24,3,11,19,28,1,5,9,13,16,22,26,31,2,4,6,8,10,12,14,17,18,20,21,23,25,27,29,30,32,33,34,35,36,37]",
        "output": "765197211"
      },
      {
        "input": "nums = [15,8,21,3,12,18,25,1,5,10,13,16,20,22,24,26,27,28,29,30]",
        "output": "935107010"
      },
      {
        "input": "nums = [100,50,150,25,75,125,175,10,30,60,80,110,140,160,180]",
        "output": "21964799"
      },
      {
        "input": "nums = [15,8,23,4,12,19,27,2,6,10,14,17,21,25,29,1,3,5,7,9,11,13,16,18,20,22,24,26,28,30]",
        "output": "637714638"
      },
      {
        "input": "nums = [20,10,30,5,15,25,35,2,7,12,18,23,27,32,37,1,4,6,8,11,13,14,16,17,19,21,22,24,26,28,29,31,33,34,36,38,39,40]",
        "output": "327188662"
      },
      {
        "input": "nums = [5,3,7,2,4,6,8,1,9,10]",
        "output": "1511"
      },
      {
        "input": "nums = [100,50,150,25,75,125,175,12,37,62,88,112,138,162,188,6,18,31,43,56,71,83,94,106,118,129,139,150,161,172,183,194,3,9,14,20,26,33,40,47,53,60,67,74,81,87,93,99,105,111,117,123,130,136,142,148,154,160,166,173,179,185,191,197,2,5,7,11,13,16,19,22,24,27,29,32,35,38,41,44,46,49,52,55,58,61,64,66,69,72,75,78,80,84,86,89,91,95,97,101,103,107,109,113,115,119,121,124,127,131,133,137,140,144,146,149,151,155,157,163,165,168,170,174,176,178,181,184,186,189,192,196,198,199]",
        "output": "963420092"
      },
      {
        "input": "nums = [10,5,15,3,7,13,18,2,4,6,8,12,14,16,17,19,20]",
        "output": "615014399"
      },
      {
        "input": "nums = [70,35,105,17,53,59,88,126,9,26,44,50,56,81,93,112,120,130,140,150,5,13,20,29,39,42,48,51,58,76,80,85,89,91,97,100,102,107,109,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151]",
        "output": "583396661"
      },
      {
        "input": "nums = [500,250,750,125,375,625,875,63,188,292,463,532,594,656,725,788,844,913,969,1025,1082,1138,1194,1250,1306,1362,1418,1475,1531,1587,1643,1699,1755,1812,1868,1924,1980,31,94,148,224,299,355,400,446,482,520,556,591,626,662,697,733,769,804,840,876,911,947,982,1018,1054,1089,1125,1161,1196,1232,1268,1303,1339,1375,1410,1446,1482,1517,1553,1589,1624,1660,1695,1731,1767,1802,1838,1874,1909,1945,1981,7,26,45,64,83,102,121,140,159,178,197,216,235,254,273,292,311,330,349,368,387,406,425,444,463,482,501,520,539,558,577,596,615,634,653,672,691,710,729,748,767,786,805,824,843,862,881,900,919,938,957,976,995]",
        "output": "126685497"
      },
      {
        "input": "nums = [7,4,12,2,5,9,15,1,3,6,8,11,13,14,16,17,18,19,20,21,22,23,24,25]",
        "output": "240043756"
      },
      {
        "input": "nums = [15,9,20,7,11,18,22,5,8,10,12,16,19,21,23,3,6,13,14,17,24]",
        "output": "290541228"
      },
      {
        "input": "nums = [100,50,150,25,75,125,175,12,37,62,87,112,137,162,187,6,18,27,46,57,72,81,96,107,117,127,132,147,157,167,172,182,197,1,11,15,21,33,41,51,59,61,71,77,83,89,91,97,101,109,111,118,121,129,131,138,141,149,151,159,161,168,171,179,181,188,191,199]",
        "output": "248577023"
      },
      {
        "input": "nums = [15,10,20,8,12,17,22,5,9,11,13,16,19,21,23,3,7,4,6,14,18,24,25]",
        "output": "252477357"
      },
      {
        "input": "nums = [20,10,30,5,15,25,35,2,7,13,18,23,27,32,33,1,3,6,8,12,14,16,17,19,21,22,24,26,28,29,31,34,36]",
        "output": "852994108"
      },
      {
        "input": "nums = [12,7,15,4,8,13,16,2,5,9,14,3,6,10,11]",
        "output": "2270267"
      },
      {
        "input": "nums = [1,4,2,7,3,5,8,6,9,10,11,12,13,14,15]",
        "output": "3509"
      },
      {
        "input": "nums = [7,3,11,1,5,9,13,2,4,6,8,10,12,14,15]",
        "output": "12612599"
      },
      {
        "input": "nums = [800,400,1200,200,600,1000,1400,100,300,500,700,900,1100,1300,1500,50,150,250,350,450,550,650,750,850,950,1050,1150,1250,1350,1450,1550,25,75,125,175,225,275,325,375,425,475,525,575,625,675,725,775,825,875,925,975,1025,1075,1125,1175,1225,1275,1325,1375,1425,1475,1525,1575]",
        "output": "665258151"
      },
      {
        "input": "nums = [80,40,120,20,60,100,140,10,30,50,70,90,110,130,150,5,9,15,25,35,45,55,65,75,85,95,105,115,125,135,145,155]",
        "output": "348178224"
      },
      {
        "input": "nums = [13,7,18,3,10,15,20,1,5,8,11,14,16,19,21,22,23,24,25,26,27,28,29,30]",
        "output": "321724227"
      },
      {
        "input": "nums = [25,12,30,8,18,27,32,5,10,15,22,26,31,33,3,7,9,11,13,14,16,17,19,20,21,23,24,28,29]",
        "output": "106594954"
      },
      {
        "input": "nums = [1000,500,1500,250,750,1250,1750,125,375,625,875,1125,1375,1625,1875,63,188,288,313,438,563,713,813,938,1063,1213,1313,1438,1563,1713,1813,1938,2063,2213,2313,2438,2563,2713,2813,2938,3063,3213,3313,3438,3563,3713,3813,3938,4063,4213,4313,4438,4563,4713,4813,4938,5063,5213,5313,5438,5563,5713,5813,5938,6063,6213,6313,6438,6563,6713,6813,6938,7063,7213,7313,7438,7563,7713,7813,7938,8063,8213,8313,8438,8563,8713,8813,8938,9063,9213,9313,9438,9563,9713,9813,9938,10063,10213,10313,10438,10563,10713,10813,10938,11063,11213,11313,11438,11563,11713,11813,11938,12063,12213,12313,12438,12563,12713,12813,12938,13063,13213,13313,13438,13563,13713,13813,13938,14063,14213,14313,14438,14563,14713,14813,14938,15063,15213,15313,15438,15563,15713,15813,15938,16063,16213,16313,16438,16563,16713,16813,16938,17063,17213,17313,17438,17563,17713,17813,17938,18063,18213,18313,18438,18563,18713,18813,18938,19063,19213,19313,19438,19563,19713,19813,19938]",
        "output": "998164136"
      },
      {
        "input": "nums = [20,10,30,5,15,25,35,2,7,12,18,23,28,33,40]",
        "output": "21964799"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "0"
      },
      {
        "input": "nums = [25,15,35,10,20,30,40,5,12,18,23,28,33,38,43]",
        "output": "21964799"
      },
      {
        "input": "nums = [25,15,35,10,20,30,40,5,12,18,22,28,32,38,45,3,7,11,14,16,19,21,24,26,29,31,33,36,37,39,41,42,43,44,46,47,48,49,50]",
        "output": "625852341"
      },
      {
        "input": "nums = [50,25,75,12,37,63,87,6,18,30,42,56,70,81,93]",
        "output": "21964799"
      }
    ]
  },
  {
    "id": 3241,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Graph",
      "Dynamic Programming"
    ],
    "problemDescription": "There exists an undirected tree with n nodes numbered 0 to n - 1. You are given a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree.\nInitially, all nodes are unmarked. For each node i:\n\nIf i is odd, the node will get marked at time x if there is at least one node adjacent to it which was marked at time x - 1.\nIf i is even, the node will get marked at time x if there is at least one node adjacent to it which was marked at time x - 2.\n\nReturn an array times where times[i] is the time when all nodes get marked in the tree, if you mark node i at time t = 0.\nNote that the answer for each times[i] is independent, i.e. when you mark node i all other nodes are unmarked.\n\u00a0\nExample 1:\n\nInput: edges = [[0,1],[0,2]]\nOutput: [2,4,3]\nExplanation:\n\n\nFor i = 0:\n\n\t\nNode 1 is marked at t = 1, and Node 2 at t = 2.\n\n\nFor i = 1:\n\t\nNode 0 is marked at t = 2, and Node 2 at t = 4.\n\n\nFor i = 2:\n\t\nNode 0 is marked at t = 2, and Node 1 at t = 3.\n\n\n\n\nExample 2:\n\nInput: edges = [[0,1]]\nOutput: [1,2]\nExplanation:\n\n\nFor i = 0:\n\n\t\nNode 1 is marked at t = 1.\n\n\nFor i = 1:\n\t\nNode 0 is marked at t = 2.\n\n\n\n\nExample 3:\n\nInput: edges = [[2,4],[0,1],[2,3],[0,2]]\nOutput: [4,6,3,5,5]\nExplanation:\n\n\n\u00a0\nConstraints:\n\n2 <= n <= 105\nedges.length == n - 1\nedges[i].length == 2\n0 <= edges[i][0], edges[i][1] <= n - 1\nThe input is generated such that edges represents a valid tree.\n\n",
    "starterCode": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "edges = [[0,1],[0,2]]",
        "output": "[2, 4, 3]"
      },
      {
        "input": "edges = [[3,1],[3,0],[1,2]]",
        "output": "[4, 3, 4, 3]"
      },
      {
        "input": "edges = [[1,0],[2,0],[3,0],[4,1],[5,2]]",
        "output": "[3, 5, 5, 5, 6, 7]"
      },
      {
        "input": "edges = [[0,3],[1,2],[2,3],[3,4]]",
        "output": "[4, 5, 3, 3, 4]"
      },
      {
        "input": "edges = [[3,1],[3,0],[3,2],[5,3],[4,3]]",
        "output": "[3, 3, 3, 2, 3, 3]"
      },
      {
        "input": "edges = [[0,3],[1,2],[1,3],[4,3]]",
        "output": "[4, 3, 4, 3, 4]"
      },
      {
        "input": "edges = [[0,2],[0,3],[1,2],[1,3]]",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "edges = [[3,1],[3,2],[3,0]]",
        "output": "[3, 3, 3, 2]"
      },
      {
        "input": "edges = [[2,4],[0,1],[2,3],[0,2]]",
        "output": "[4, 6, 3, 5, 5]"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1]]",
        "output": "[1, 2]"
      },
      {
        "input": "edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30]]",
        "output": "[45, 44, 42, 41, 39, 38, 36, 35, 33, 32, 30, 29, 27, 26, 24, 23, 24, 26, 27, 29, 30, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45]"
      },
      {
        "input": "edges = [[22,12],[22,10],[22,13],[22,11],[22,14],[22,9],[22,8],[22,7],[22,6],[22,5],[22,4],[22,3],[22,2],[22,1],[22,0],[22,15],[22,16],[22,17],[22,18],[22,19],[22,20],[22,21]]",
        "output": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30]]",
        "output": "[8, 10, 9, 11, 11, 11, 11, 12, 12, 13, 13, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 13, 13, 14, 14, 14, 14, 15, 15]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]]",
        "output": "[5, 6, 7, 7, 7, 9, 9, 8, 8, 9, 9]"
      },
      {
        "input": "edges = [[0, 10], [0, 11], [0, 12], [10, 1], [11, 2], [12, 3], [1, 4], [2, 5], [3, 6], [4, 7], [5, 8], [6, 9]]",
        "output": "[6, 10, 9, 10, 11, 11, 11, 13, 12, 13, 8, 8, 8]"
      },
      {
        "input": "edges = [[0,1],[0,2],[2,3],[2,4],[4,5],[4,6],[6,7],[6,8],[8,9],[8,10],[10,11],[10,12],[12,13],[12,14],[14,15],[14,16],[16,17],[16,18],[18,19],[18,20],[20,21],[20,22],[22,23],[22,24],[24,25],[24,26],[26,27],[26,28],[28,29],[28,30]]",
        "output": "[30, 32, 28, 30, 26, 28, 24, 26, 22, 24, 20, 22, 18, 20, 16, 18, 17, 19, 19, 21, 21, 23, 23, 25, 25, 27, 27, 29, 29, 31, 31]"
      },
      {
        "input": "edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30]]",
        "output": "[8, 10, 9, 11, 11, 11, 11, 12, 12, 13, 13, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 13, 13, 14, 14, 14, 14, 15, 15]"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[3,4],[4,5],[4,6],[6,7],[7,8],[7,9]]",
        "output": "[9, 8, 9, 7, 5, 7, 6, 8, 9, 9]"
      },
      {
        "input": "edges = [[0, 1], [1, 2], [2, 3], [0, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15]]",
        "output": "[9, 11, 12, 14, 11, 13, 14, 16, 17, 19, 11, 13, 14, 16, 17, 19]"
      },
      {
        "input": "edges = [[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,5],[12,5],[13,6],[14,6],[15,7],[16,7],[17,8],[18,8],[19,9],[20,9],[21,10],[22,10],[23,11],[24,11],[25,12],[26,12],[27,13],[28,13],[29,14],[30,14],[31,15],[32,15],[33,16],[34,16],[35,17],[36,17],[37,18],[38,18],[39,19],[40,19]]",
        "output": "[8, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 13, 13, 14, 14, 14, 14, 15, 15, 14, 14, 15, 15, 15, 15, 16, 16, 14, 14, 15, 15, 15, 15, 16, 16, 15, 15]"
      },
      {
        "input": "edges = [[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9],[10,11],[10,12]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[7,3],[3,1],[3,0],[3,2],[5,3],[4,3],[6,3]]",
        "output": "[3, 3, 3, 2, 3, 3, 3, 3]"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]]",
        "output": "[30, 29, 27, 26, 24, 23, 21, 20, 18, 17, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29, 30]"
      },
      {
        "input": "edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15]]",
        "output": "[22, 21, 19, 18, 16, 15, 13, 12, 12, 14, 15, 17, 18, 20, 21, 23]"
      },
      {
        "input": "edges = [[10,9],[9,8],[8,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0],[0,10]]",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13]]",
        "output": "[6, 8, 6, 9, 9, 8, 8, 10, 10, 11, 9, 9, 10, 10]"
      },
      {
        "input": "edges = [[15,14],[14,13],[13,12],[12,11],[11,10],[10,9],[9,8],[8,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0],[0,15]]",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9], [4, 10], [4, 11], [5, 12], [5, 13], [6, 14], [6, 15], [7, 16], [7, 17], [8, 18], [8, 19], [9, 20], [9, 21]]",
        "output": "[6, 8, 7, 8, 9, 9, 9, 9, 9, 9, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10]"
      },
      {
        "input": "edges = [[0, 1], [0, 2], [1, 3], [2, 4], [3, 5], [3, 6], [4, 7], [4, 8], [5, 9], [5, 10], [6, 11], [6, 12], [7, 13], [7, 14], [8, 15], [8, 16], [9, 17], [9, 18], [10, 19], [10, 20], [11, 21], [11, 22], [12, 23], [12, 24], [13, 25], [13, 26], [14, 27], [14, 28], [15, 29], [15, 30], [16, 31], [16, 32], [17, 33], [17, 34], [18, 35], [18, 36], [19, 37], [19, 38], [20, 39], [20, 40]]",
        "output": "[10, 12, 11, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 16, 16, 17, 17, 17, 17, 18, 18, 17, 17, 18, 18, 18, 18, 19, 19, 17, 17, 18, 18, 18, 18, 19, 19]"
      },
      {
        "input": "edges = [[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,5],[12,5],[13,6],[14,6],[15,7],[16,7],[17,8],[18,8],[19,9],[20,9],[21,10],[22,10],[23,11],[24,11],[25,12],[26,12],[27,13],[28,13],[29,14],[30,14]]",
        "output": "[8, 10, 9, 11, 11, 11, 11, 12, 12, 13, 13, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 13, 13, 14, 14, 14, 14, 15, 15]"
      },
      {
        "input": "edges = [[0,1],[0,2],[2,3],[2,4],[4,5],[4,6],[4,7],[6,8],[6,9],[6,10],[8,11],[8,12],[8,13],[10,14],[10,15],[10,16]]",
        "output": "[10, 12, 8, 10, 6, 8, 7, 8, 9, 9, 9, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "edges = [[2,3],[1,2],[5,3],[0,5],[4,5],[6,5],[7,6],[8,7],[9,8],[10,9],[11,10],[12,11],[13,12],[14,13],[15,14],[16,15],[17,16],[18,17],[19,18],[20,19],[21,20],[22,21],[23,22],[24,23],[25,24],[26,25],[27,26],[28,27],[29,28]]",
        "output": "[37, 40, 38, 37, 37, 36, 34, 33, 31, 30, 28, 27, 25, 24, 22, 21, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 40]"
      },
      {
        "input": "edges = [[20,19],[19,18],[18,17],[17,16],[16,15],[15,14],[14,13],[13,12],[12,11],[11,10],[10,9],[9,8],[8,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0],[0,20]]",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39]]",
        "output": "[58, 57, 55, 54, 52, 51, 49, 48, 46, 45, 43, 42, 40, 39, 37, 36, 34, 33, 31, 30, 30, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59]"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[0,5],[5,6],[6,7],[7,8],[8,9],[0,10],[10,11],[11,12],[12,13],[13,14],[0,15],[15,16],[16,17],[17,18],[18,19]]",
        "output": "[8, 10, 11, 13, 14, 10, 11, 13, 14, 16, 9, 11, 12, 14, 15, 10, 11, 13, 14, 16]"
      },
      {
        "input": "edges = [[1,0],[3,0],[4,1],[5,1],[6,2],[7,2],[8,3],[9,3],[10,4],[11,4],[12,5],[13,5],[14,6],[15,6],[16,7],[17,7],[18,8],[19,8],[20,9],[21,9],[22,10],[23,10],[24,11],[25,11],[26,12],[27,12],[28,13],[29,13]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[1,2],[0,3],[3,4],[4,5],[0,6],[6,7],[7,8],[8,9]]",
        "output": "[6, 8, 9, 8, 9, 11, 6, 8, 9, 11]"
      },
      {
        "input": "edges = [[10,0],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9],[10,11],[10,12],[10,13],[10,14],[10,15],[10,16],[10,17],[10,18],[10,19]]",
        "output": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4]"
      },
      {
        "input": "edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]",
        "output": "[13, 12, 10, 9, 7, 8, 9, 11, 12, 14]"
      },
      {
        "input": "edges = [[15,1],[15,2],[15,3],[15,4],[15,5],[15,6],[15,7],[15,8],[15,9],[15,10],[15,11],[15,12],[15,13],[15,14],[15,16],[15,17],[15,18],[15,19]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[1,0],[2,0],[3,0],[4,1],[5,1],[6,2],[7,2],[8,3],[9,3],[10,4],[11,4],[12,5],[13,5],[14,6],[15,6],[16,7],[17,7],[18,8],[19,8],[20,9],[21,9]]",
        "output": "[6, 8, 7, 8, 9, 9, 9, 9, 9, 9, 11, 11, 10, 10, 11, 11, 10, 10, 11, 11, 10, 10]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25],[12,26],[12,27],[13,28],[13,29],[14,30],[14,31],[15,32],[15,33],[16,34],[16,35],[17,36],[17,37],[18,38],[18,39],[19,40],[19,41]]",
        "output": "[8, 10, 9, 10, 11, 11, 11, 11, 11, 11, 13, 13, 12, 12, 13, 13, 12, 12, 13, 13, 12, 12, 15, 15, 14, 14, 14, 14, 13, 13, 15, 15, 14, 14, 14, 14, 13, 13, 15, 15, 14, 14]"
      },
      {
        "input": "edges = [[8,6],[8,7],[0,5],[0,4],[0,3],[0,8],[0,1],[0,2]]",
        "output": "[4, 6, 6, 6, 6, 6, 6, 6, 4]"
      },
      {
        "input": "edges = [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 6], [2, 7], [3, 8], [3, 9]]",
        "output": "[4, 6, 5, 6, 7, 7, 7, 7, 7, 7]"
      },
      {
        "input": "edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14]]",
        "output": "[6, 8, 7, 9, 9, 9, 9, 10, 10, 11, 11, 10, 10, 11, 11]"
      },
      {
        "input": "edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22]]",
        "output": "[7, 8, 9, 9, 9, 11, 11, 10, 10, 11, 11, 12, 12, 13, 13, 11, 11, 12, 12, 12, 12, 13, 13]"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]]",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10]]",
        "output": "[5, 6, 7, 7, 7, 9, 9, 8, 8, 9, 9]"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "[13, 12, 10, 9, 7, 8, 9, 11, 12, 14]"
      },
      {
        "input": "edges = [[10,0],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9]]",
        "output": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2]"
      },
      {
        "input": "edges = [[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,5],[12,5],[13,6],[14,6],[15,7],[16,7],[17,8],[18,8],[19,9],[20,9]]",
        "output": "[6, 8, 8, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 11, 11, 12, 12, 12, 12]"
      },
      {
        "input": "edges = [[1,0],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
        "output": "[19, 18, 16, 15, 13, 12, 10, 11, 12, 14, 15, 17, 18, 20]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]]",
        "output": "[7, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 12, 12, 13, 13, 13, 13, 14, 14, 13, 13, 14, 14]"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "[10, 9, 7, 6, 6, 8, 9, 11]"
      },
      {
        "input": "edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6], [3, 7], [3, 8], [4, 9], [4, 10], [5, 11], [5, 12], [6, 13], [6, 14], [7, 15], [7, 16], [8, 17], [8, 18], [9, 19], [9, 20], [10, 21], [10, 22], [11, 23], [11, 24], [12, 25], [12, 26], [13, 27], [13, 28], [14, 29], [14, 30], [15, 31], [15, 32], [16, 33], [16, 34], [17, 35], [17, 36], [18, 37], [18, 38], [19, 39], [19, 40], [20, 41], [20, 42], [21, 43], [21, 44], [22, 45], [22, 46], [23, 47], [23, 48], [24, 49], [24, 50]]",
        "output": "[9, 10, 11, 11, 11, 13, 13, 12, 12, 13, 13, 14, 14, 15, 15, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 14, 14, 15, 15, 15, 15, 16, 16, 15, 15, 16, 16, 16, 16, 17, 17, 16, 16, 17, 17]"
      },
      {
        "input": "edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [4, 8], [4, 9], [5, 10], [5, 11], [6, 12], [6, 13], [7, 14], [7, 15], [8, 16], [8, 17], [9, 18], [9, 19], [10, 20], [10, 21], [11, 22], [11, 23], [12, 24], [12, 25], [13, 26], [13, 27], [14, 28], [14, 29], [15, 30], [15, 31], [16, 32], [16, 33], [17, 34], [17, 35], [18, 36], [18, 37], [19, 38], [19, 39], [20, 40], [20, 41], [21, 42], [21, 43], [22, 44], [22, 45], [23, 46], [23, 47], [24, 48], [24, 49], [25, 50], [25, 51], [26, 52], [26, 53], [27, 54], [27, 55], [28, 56], [28, 57], [29, 58], [29, 59]]",
        "output": "[11, 10, 10, 11, 12, 12, 12, 12, 14, 14, 13, 13, 14, 14, 13, 13, 16, 16, 15, 15, 15, 15, 14, 14, 16, 16, 15, 15, 15, 15, 14, 14, 18, 18, 17, 17, 17, 17, 16, 16, 17, 17, 16, 16, 16, 16, 15, 15, 18, 18, 17, 17, 17, 17, 16, 16, 17, 17, 16, 16]"
      },
      {
        "input": "edges = [[15,11],[15,10],[15,12],[15,9],[15,14],[15,8],[15,13],[15,7],[15,6],[15,5],[15,4],[15,3],[15,2],[15,1],[15,0]]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2]"
      },
      {
        "input": "edges = [[0, 1], [1, 2], [1, 3], [3, 4], [3, 5], [5, 6], [5, 7], [7, 8], [7, 9]]",
        "output": "[6, 5, 6, 4, 5, 4, 5, 5, 6, 6]"
      },
      {
        "input": "edges = [[6,3],[6,0],[6,4],[1,6],[2,6],[5,6]]",
        "output": "[4, 4, 4, 4, 4, 4, 2]"
      },
      {
        "input": "edges = [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [3, 6], [3, 7], [5, 8], [5, 9]]",
        "output": "[6, 5, 4, 6, 6, 6, 7, 7, 7, 7]"
      },
      {
        "input": "edges = [[10,0],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,5],[12,5],[13,6],[14,6]]",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[5,9],[5,10],[6,11],[6,12]]",
        "output": "[6, 8, 6, 9, 9, 8, 8, 10, 10, 9, 9, 10, 10]"
      },
      {
        "input": "edges = [[25,18],[25,24],[25,19],[25,20],[25,21],[25,22],[25,23],[25,2],[25,0],[25,1],[25,10],[25,11],[25,12],[25,13],[25,14],[25,15],[25,16],[25,17],[25,3],[25,4],[25,5],[25,6],[25,7],[25,8],[25,9]]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2]"
      }
    ]
  },
  {
    "id": 2005,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Math",
      "Dynamic Programming",
      "Binary Tree",
      "Game Theory"
    ],
    "problemDescription": "A Fibonacci tree is a binary tree created using the order function order(n):\n\norder(0) is the empty tree.\norder(1) is a binary tree with only one node.\norder(n) is a binary tree that consists of a root node with the left subtree as order(n - 2) and the right subtree as order(n - 1).\n\nAlice and Bob are playing a game with a Fibonacci tree with Alice staring first. On each turn, a player selects a node and removes that node and its subtree. The player that is forced to delete root loses.\nGiven the integer n, return true if Alice wins the game or false if Bob wins, assuming both players play optimally.\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.\n\u00a0\nExample 1:\n\n\nInput: n = 3\nOutput: true\nExplanation:\nAlice takes the node 1 in the right subtree.\nBob takes either the 1 in the left subtree or the 2 in the right subtree.\nAlice takes whichever node Bob doesn't take.\nBob is forced to take the root node 3, so Bob will lose.\nReturn true because Alice wins.\n\nExample 2:\n\n\nInput: n = 1\nOutput: false\nExplanation:\nAlice is forced to take the root node 1, so Alice will lose.\nReturn false because Alice loses.\n\nExample 3:\n\n\nInput: n = 2\nOutput: true\nExplanation:\nAlice takes the node 1.\nBob is forced to take the root node 2, so Bob will lose.\nReturn true because Alice wins.\n\n\u00a0\nConstraints:\n\n1 <= n <= 100\n\n",
    "starterCode": "class Solution:\n    def findGameWinner(self, n: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "n = 3",
        "output": "True"
      },
      {
        "input": "n = 45",
        "output": "True"
      },
      {
        "input": "n = 53",
        "output": "True"
      },
      {
        "input": "n = 70",
        "output": "True"
      },
      {
        "input": "n = 43",
        "output": "False"
      },
      {
        "input": "n = 68",
        "output": "True"
      },
      {
        "input": "n = 5",
        "output": "True"
      },
      {
        "input": "n = 37",
        "output": "False"
      },
      {
        "input": "n = 23",
        "output": "True"
      },
      {
        "input": "n = 73",
        "output": "False"
      },
      {
        "input": "n = 8",
        "output": "True"
      },
      {
        "input": "n = 27",
        "output": "True"
      },
      {
        "input": "n = 35",
        "output": "True"
      },
      {
        "input": "n = 36",
        "output": "True"
      },
      {
        "input": "n = 77",
        "output": "True"
      },
      {
        "input": "n = 24",
        "output": "True"
      },
      {
        "input": "n = 11",
        "output": "True"
      },
      {
        "input": "n = 94",
        "output": "True"
      },
      {
        "input": "n = 1",
        "output": "False"
      },
      {
        "input": "n = 55",
        "output": "False"
      },
      {
        "input": "n = 65",
        "output": "True"
      },
      {
        "input": "n = 88",
        "output": "True"
      },
      {
        "input": "n = 97",
        "output": "False"
      },
      {
        "input": "n = 29",
        "output": "True"
      },
      {
        "input": "n = 21",
        "output": "True"
      },
      {
        "input": "n = 82",
        "output": "True"
      },
      {
        "input": "n = 86",
        "output": "True"
      },
      {
        "input": "n = 44",
        "output": "True"
      },
      {
        "input": "n = 28",
        "output": "True"
      },
      {
        "input": "n = 87",
        "output": "True"
      },
      {
        "input": "n = 4",
        "output": "True"
      },
      {
        "input": "n = 17",
        "output": "True"
      },
      {
        "input": "n = 98",
        "output": "True"
      },
      {
        "input": "n = 42",
        "output": "True"
      },
      {
        "input": "n = 80",
        "output": "True"
      },
      {
        "input": "n = 89",
        "output": "True"
      },
      {
        "input": "n = 74",
        "output": "True"
      },
      {
        "input": "n = 46",
        "output": "True"
      },
      {
        "input": "n = 75",
        "output": "True"
      },
      {
        "input": "n = 20",
        "output": "True"
      },
      {
        "input": "n = 71",
        "output": "True"
      },
      {
        "input": "n = 81",
        "output": "True"
      },
      {
        "input": "n = 41",
        "output": "True"
      },
      {
        "input": "n = 9",
        "output": "True"
      },
      {
        "input": "n = 83",
        "output": "True"
      },
      {
        "input": "n = 6",
        "output": "True"
      },
      {
        "input": "n = 52",
        "output": "True"
      },
      {
        "input": "n = 92",
        "output": "True"
      },
      {
        "input": "n = 10",
        "output": "True"
      },
      {
        "input": "n = 79",
        "output": "False"
      },
      {
        "input": "n = 84",
        "output": "True"
      },
      {
        "input": "n = 90",
        "output": "True"
      },
      {
        "input": "n = 63",
        "output": "True"
      },
      {
        "input": "n = 61",
        "output": "False"
      },
      {
        "input": "n = 49",
        "output": "False"
      },
      {
        "input": "n = 47",
        "output": "True"
      },
      {
        "input": "n = 93",
        "output": "True"
      },
      {
        "input": "n = 57",
        "output": "True"
      },
      {
        "input": "n = 34",
        "output": "True"
      },
      {
        "input": "n = 60",
        "output": "True"
      },
      {
        "input": "n = 30",
        "output": "True"
      },
      {
        "input": "n = 95",
        "output": "True"
      },
      {
        "input": "n = 72",
        "output": "True"
      },
      {
        "input": "n = 16",
        "output": "True"
      },
      {
        "input": "n = 33",
        "output": "True"
      },
      {
        "input": "n = 2",
        "output": "True"
      },
      {
        "input": "n = 76",
        "output": "True"
      },
      {
        "input": "n = 51",
        "output": "True"
      },
      {
        "input": "n = 18",
        "output": "True"
      },
      {
        "input": "n = 32",
        "output": "True"
      },
      {
        "input": "n = 48",
        "output": "True"
      },
      {
        "input": "n = 15",
        "output": "True"
      },
      {
        "input": "n = 14",
        "output": "True"
      },
      {
        "input": "n = 26",
        "output": "True"
      },
      {
        "input": "n = 13",
        "output": "False"
      },
      {
        "input": "n = 69",
        "output": "True"
      },
      {
        "input": "n = 12",
        "output": "True"
      },
      {
        "input": "n = 100",
        "output": "True"
      },
      {
        "input": "n = 50",
        "output": "True"
      },
      {
        "input": "n = 58",
        "output": "True"
      },
      {
        "input": "n = 56",
        "output": "True"
      },
      {
        "input": "n = 59",
        "output": "True"
      },
      {
        "input": "n = 40",
        "output": "True"
      },
      {
        "input": "n = 67",
        "output": "False"
      },
      {
        "input": "n = 99",
        "output": "True"
      },
      {
        "input": "n = 64",
        "output": "True"
      },
      {
        "input": "n = 66",
        "output": "True"
      },
      {
        "input": "n = 54",
        "output": "True"
      },
      {
        "input": "n = 22",
        "output": "True"
      },
      {
        "input": "n = 96",
        "output": "True"
      },
      {
        "input": "n = 19",
        "output": "False"
      },
      {
        "input": "n = 39",
        "output": "True"
      },
      {
        "input": "n = 91",
        "output": "False"
      },
      {
        "input": "n = 62",
        "output": "True"
      },
      {
        "input": "n = 78",
        "output": "True"
      },
      {
        "input": "n = 85",
        "output": "False"
      },
      {
        "input": "n = 31",
        "output": "False"
      },
      {
        "input": "n = 38",
        "output": "True"
      },
      {
        "input": "n = 7",
        "output": "False"
      },
      {
        "input": "n = 25",
        "output": "False"
      }
    ]
  },
  {
    "id": 1255,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Array",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Bitmask"
    ],
    "problemDescription": "Given a list of words, list of\u00a0 single\u00a0letters (might be repeating)\u00a0and score\u00a0of every character.\nReturn the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two\u00a0or more times).\nIt is not necessary to use all characters in letters and each letter can only be used once. Score of letters\u00a0'a', 'b', 'c', ... ,'z' is given by\u00a0score[0], score[1], ... , score[25] respectively.\n\u00a0\nExample 1:\n\nInput: words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]\nOutput: 23\nExplanation:\nScore  a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.\nWords \"dad\" and \"dog\" only get a score of 21.\nExample 2:\n\nInput: words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]\nOutput: 27\nExplanation:\nScore  a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.\nWord \"xxxz\" only get a score of 25.\nExample 3:\n\nInput: words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]\nOutput: 0\nExplanation:\nLetter \"e\" can only be used once.\n\u00a0\nConstraints:\n\n1 <= words.length <= 14\n1 <= words[i].length <= 15\n1 <= letters.length <= 100\nletters[i].length == 1\nscore.length ==\u00a026\n0 <= score[i] <= 10\nwords[i], letters[i]\u00a0contains only lower case English letters.\n\n",
    "starterCode": "class Solution:\n    def maxScoreWords(self, words: List[str], letters: List[str], score: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]",
        "output": "Error: list index out of range"
      },
      {
        "input": "words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]",
        "output": "27"
      },
      {
        "input": "words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "23"
      },
      {
        "input": "words = [\"supercalifragilisticexpialidocious\",\"antidisestablishmentarianism\",\"floccinaucinihilipilification\"], letters = [\"s\",\"u\",\"p\",\"e\",\"r\",\"c\",\"a\",\"l\",\"i\",\"f\",\"r\",\"a\",\"g\",\"i\",\"l\",\"i\",\"s\",\"t\",\"i\",\"c\",\"e\",\"x\",\"p\",\"i\",\"a\",\"l\",\"i\",\"d\",\"o\",\"c\",\"i\",\"o\",\"u\",\"s\",\"a\",\"n\",\"t\",\"i\",\"d\",\"i\",\"s\",\"e\",\"t\",\"a\",\"b\",\"l\",\"i\",\"s\",\"h\",\"m\",\"e\",\"n\",\"t\",\"a\",\"r\",\"i\",\"a\",\"n\",\"i\",\"s\",\"m\",\"f\",\"l\",\"o\",\"c\",\"c\",\"i\",\"n\",\"a\",\"u\",\"c\",\"i\",\"n\",\"i\",\"h\",\"i\",\"l\",\"i\",\"p\",\"i\",\"l\",\"i\",\"f\",\"i\",\"c\",\"a\",\"t\",\"i\",\"o\",\"n\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "659"
      },
      {
        "input": "words = [\"dynamic\",\"programming\",\"complexity\",\"analysis\"], letters = [\"d\",\"y\",\"n\",\"a\",\"m\",\"i\",\"c\",\"p\",\"r\",\"o\",\"g\",\"r\",\"a\",\"m\",\"m\",\"i\",\"n\",\"g\",\"c\",\"o\",\"m\",\"p\",\"l\",\"e\",\"x\",\"i\",\"t\",\"y\",\"a\",\"n\",\"a\",\"l\",\"y\",\"s\",\"i\",\"s\"], score = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9]",
        "output": "184"
      },
      {
        "input": "words = [\"quartz\",\"pearl\",\"opal\"], letters = [\"q\",\"u\",\"a\",\"r\",\"t\",\"z\",\"p\",\"e\",\"a\",\"r\",\"l\",\"o\",\"p\",\"a\",\"l\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,10]",
        "output": "38"
      },
      {
        "input": "words = [\"programming\",\"code\",\"python\",\"challenge\"], letters = [\"a\",\"c\",\"d\",\"e\",\"e\",\"g\",\"h\",\"i\",\"l\",\"l\",\"m\",\"n\",\"n\",\"n\",\"o\",\"o\",\"p\",\"p\",\"r\",\"r\",\"r\",\"s\",\"t\",\"u\",\"y\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "24"
      },
      {
        "input": "words = [\"university\",\"college\",\"school\"], letters = [\"u\",\"n\",\"i\",\"v\",\"e\",\"r\",\"s\",\"i\",\"t\",\"y\",\"c\",\"o\",\"l\",\"l\",\"e\",\"g\",\"e\",\"s\",\"c\",\"h\",\"o\",\"o\",\"l\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,10]",
        "output": "38"
      },
      {
        "input": "words = [\"complex\",\"example\",\"test\"], letters = [\"c\",\"o\",\"m\",\"p\",\"l\",\"e\",\"x\",\"e\",\"a\",\"m\",\"p\",\"l\",\"e\",\"t\",\"e\",\"s\",\"t\",\"c\",\"o\",\"m\",\"p\",\"l\",\"e\",\"x\"], score = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260]",
        "output": "2280"
      },
      {
        "input": "words = [\"zebra\",\"elephant\",\"giraffe\",\"hippo\"], letters = [\"a\",\"e\",\"e\",\"f\",\"g\",\"h\",\"i\",\"i\",\"l\",\"n\",\"o\",\"p\",\"p\",\"r\",\"r\",\"s\",\"t\",\"u\",\"z\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,1,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "13"
      },
      {
        "input": "words = [\"kangaroo\",\"koala\",\"hippopotamus\"], letters = [\"k\",\"a\",\"n\",\"g\",\"a\",\"r\",\"o\",\"o\",\"o\",\"o\",\"l\",\"i\",\"p\",\"p\",\"o\",\"t\",\"a\",\"m\",\"u\",\"s\"], score = [8,1,13,3,1,1,1,1,1,1,4,1,5,9,7,6,5,3,0,9,0,5,5,0,0,0]",
        "output": "47"
      },
      {
        "input": "words = [\"optimization\",\"performance\",\"scalability\",\"expert\",\"knowledge\",\"skill\"], letters = [\"o\",\"p\",\"t\",\"i\",\"m\",\"i\",\"z\",\"a\",\"t\",\"i\",\"o\",\"n\",\"p\",\"e\",\"r\",\"f\",\"o\",\"r\",\"m\",\"a\",\"n\",\"c\",\"e\",\"s\",\"c\",\"a\",\"l\",\"a\",\"b\",\"i\",\"l\",\"i\",\"t\",\"y\",\"e\",\"x\",\"p\",\"e\",\"r\",\"t\",\"k\",\"n\",\"o\",\"w\",\"l\",\"e\",\"d\",\"g\",\"e\",\"s\",\"k\",\"i\",\"l\",\"l\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,4,8,8,10]",
        "output": "118"
      },
      {
        "input": "words = [\"onomatopoeia\",\"palindrome\",\"multifarious\"], letters = [\"o\",\"n\",\"o\",\"m\",\"a\",\"t\",\"o\",\"p\",\"o\",\"e\",\"i\",\"a\",\"p\",\"a\",\"l\",\"i\",\"n\",\"d\",\"r\",\"o\",\"m\",\"e\",\"m\",\"u\",\"l\",\"t\",\"i\",\"f\",\"a\",\"r\",\"i\",\"o\",\"u\",\"s\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,10]",
        "output": "56"
      },
      {
        "input": "words = [\"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"], letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "74"
      },
      {
        "input": "words = [\"optimization\",\"performance\",\"efficiency\"], letters = [\"o\",\"p\",\"t\",\"i\",\"m\",\"i\",\"z\",\"a\",\"t\",\"i\",\"o\",\"n\",\"p\",\"e\",\"r\",\"f\",\"o\",\"r\",\"m\",\"a\",\"n\",\"c\",\"e\",\"e\",\"f\",\"f\",\"i\",\"c\",\"i\",\"e\",\"n\",\"c\",\"y\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,2]",
        "output": "66"
      },
      {
        "input": "words = [\"mississippi\",\"alabama\",\"tennessee\"], letters = [\"m\",\"i\",\"s\",\"s\",\"i\",\"s\",\"s\",\"i\",\"p\",\"p\",\"i\",\"a\",\"l\",\"a\",\"b\",\"a\",\"m\",\"a\",\"t\",\"e\",\"n\",\"n\",\"e\",\"s\",\"s\",\"e\"], score = [3,1,9,4,1,5,9,2,6,5,3,5,8,9,7,9,3,2,3,8,5,5,0,2,3,9]",
        "output": "88"
      },
      {
        "input": "words = [\"zzzz\", \"zzz\", \"zz\", \"z\"], letters = [\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "260"
      },
      {
        "input": "words = [\"algorithm\",\"datastructure\",\"machinelearning\"], letters = [\"a\",\"l\",\"g\",\"o\",\"r\",\"i\",\"t\",\"h\",\"m\",\"d\",\"a\",\"t\",\"a\",\"s\",\"t\",\"r\",\"u\",\"c\",\"t\",\"u\",\"r\",\"e\",\"m\",\"a\",\"c\",\"h\",\"i\",\"n\",\"e\",\"l\",\"e\",\"a\",\"r\",\"n\",\"i\",\"n\",\"g\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,2]",
        "output": "65"
      },
      {
        "input": "words = [\"amazing\",\"zebra\",\"apple\"], letters = [\"a\",\"m\",\"a\",\"z\",\"i\",\"n\",\"g\",\"z\",\"e\",\"b\",\"r\",\"a\",\"a\",\"p\",\"p\",\"l\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,10]",
        "output": "38"
      },
      {
        "input": "words = [\"algorithm\",\"data\",\"structure\"], letters = [\"a\",\"l\",\"g\",\"o\",\"r\",\"i\",\"t\",\"h\",\"m\",\"d\",\"a\",\"t\",\"a\",\"s\",\"t\",\"r\",\"u\",\"c\",\"t\",\"u\",\"r\",\"e\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "274"
      },
      {
        "input": "words = [\"syzygy\",\"zygote\",\"zygomycete\"], letters = [\"s\",\"y\",\"z\",\"y\",\"g\",\"y\",\"z\",\"y\",\"g\",\"o\",\"t\",\"e\",\"z\",\"y\",\"g\",\"o\",\"m\",\"y\",\"c\",\"e\",\"t\",\"e\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,10]",
        "output": "56"
      },
      {
        "input": "words = [\"zebra\",\"monkey\",\"giraffe\"], letters = [\"z\",\"e\",\"r\",\"b\",\"a\",\"o\",\"n\",\"k\",\"m\",\"y\",\"g\",\"i\",\"r\",\"a\",\"f\",\"f\",\"e\"], score = [1,0,0,0,1,3,0,0,0,0,0,0,0,3,0,0,0,0,0,4,0,0,0,5,0,0]",
        "output": "12"
      },
      {
        "input": "words = [\"algorithm\",\"data\",\"structure\",\"software\"], letters = [\"a\",\"a\",\"a\",\"c\",\"d\",\"d\",\"e\",\"g\",\"h\",\"i\",\"i\",\"l\",\"m\",\"n\",\"o\",\"o\",\"o\",\"r\",\"s\",\"s\",\"s\",\"t\",\"u\",\"w\",\"y\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "15"
      },
      {
        "input": "words = [\"algorithm\", \"data\", \"structure\", \"code\"], letters = [\"a\",\"l\",\"g\",\"o\",\"r\",\"i\",\"t\",\"h\",\"m\",\"d\",\"a\",\"t\",\"a\",\"s\",\"t\",\"r\",\"u\",\"c\",\"t\",\"u\",\"r\",\"e\",\"c\",\"o\",\"d\",\"e\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "301"
      },
      {
        "input": "words = [\"abacaxi\",\"kiwi\",\"pineapple\"], letters = [\"a\",\"b\",\"a\",\"c\",\"a\",\"x\",\"i\",\"k\",\"i\",\"w\",\"i\",\"p\",\"i\",\"n\",\"e\",\"a\",\"p\",\"p\",\"l\",\"e\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,10]",
        "output": "41"
      },
      {
        "input": "words = [\"kitten\",\"puppy\",\"dog\",\"cat\"], letters = [\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"k\",\"n\",\"o\",\"p\",\"p\",\"p\",\"p\",\"p\",\"t\",\"u\",\"y\",\"y\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,1,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "24"
      },
      {
        "input": "words = [\"hello\",\"world\",\"python\",\"java\"], letters = [\"h\",\"e\",\"l\",\"l\",\"o\",\"w\",\"r\",\"d\",\"p\",\"y\",\"t\",\"h\",\"o\",\"n\",\"j\",\"a\",\"v\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "26"
      },
      {
        "input": "words = [\"algorithm\",\"data\",\"structure\"], letters = [\"a\",\"l\",\"g\",\"o\",\"r\",\"i\",\"t\",\"h\",\"m\",\"d\",\"a\",\"t\",\"a\",\"s\",\"t\",\"r\",\"u\",\"c\",\"t\",\"u\",\"r\",\"e\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,4,8,8,10]",
        "output": "33"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"cherry\",\"date\"], letters = [\"a\",\"a\",\"b\",\"b\",\"c\",\"d\",\"e\",\"e\",\"e\",\"h\",\"i\",\"l\",\"n\",\"n\",\"p\",\"r\",\"t\",\"u\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "5"
      },
      {
        "input": "words = [\"zebra\", \"elephant\", \"giraffe\"], letters = [\"z\",\"e\",\"b\",\"r\",\"a\",\"e\",\"l\",\"p\",\"h\",\"a\",\"n\",\"t\",\"g\",\"i\",\"r\",\"a\",\"f\",\"f\",\"e\"], score = [5,1,3,2,1,4,2,4,1,8,5,1,3,1,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "36"
      },
      {
        "input": "words = [\"xylophone\",\"guitar\",\"piano\",\"drums\"], letters = [\"a\",\"d\",\"e\",\"g\",\"h\",\"i\",\"l\",\"m\",\"n\",\"n\",\"n\",\"o\",\"o\",\"p\",\"p\",\"r\",\"s\",\"t\",\"u\",\"u\",\"x\",\"y\",\"y\",\"y\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,1,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "32"
      },
      {
        "input": "words = [\"complexity\",\"theory\",\"graph\",\"tree\"], letters = [\"a\",\"b\",\"c\",\"c\",\"d\",\"d\",\"e\",\"e\",\"f\",\"g\",\"g\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"n\",\"n\",\"o\",\"o\",\"o\",\"o\",\"p\",\"q\",\"r\",\"r\",\"s\",\"s\",\"t\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,5]",
        "output": "19"
      },
      {
        "input": "words = [\"hello\", \"world\", \"python\", \"code\"], letters = [\"h\",\"e\",\"l\",\"l\",\"o\",\"w\",\"o\",\"r\",\"l\",\"d\",\"p\",\"y\",\"t\",\"h\",\"o\",\"n\",\"c\",\"o\",\"d\",\"e\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "249"
      },
      {
        "input": "words = [\"expert\",\"knowledge\",\"skill\"], letters = [\"e\",\"x\",\"p\",\"e\",\"r\",\"t\",\"k\",\"n\",\"o\",\"w\",\"l\",\"e\",\"d\",\"g\",\"e\",\"s\",\"k\",\"i\",\"l\",\"l\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,4,8,8,10]",
        "output": "45"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"cherry\"], letters = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"e\",\"e\",\"h\",\"n\",\"n\",\"p\",\"p\",\"r\",\"r\",\"y\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,5,9,7]",
        "output": "17"
      },
      {
        "input": "words = [\"programming\",\"contest\",\"challenge\"], letters = [\"p\",\"r\",\"o\",\"g\",\"a\",\"m\",\"m\",\"i\",\"n\",\"g\",\"c\",\"o\",\"n\",\"t\",\"e\",\"s\",\"t\",\"c\",\"h\",\"a\",\"l\",\"l\",\"e\",\"n\",\"g\",\"e\"], score = [3,5,1,3,1,3,10,1,1,1,1,4,4,8,4,10,8,7,5,4,4,3,7,2,9,4]",
        "output": "60"
      },
      {
        "input": "words = [\"fantastic\",\"extraordinary\",\"amazing\"], letters = [\"f\",\"a\",\"n\",\"t\",\"a\",\"s\",\"t\",\"i\",\"c\",\"e\",\"x\",\"t\",\"r\",\"o\",\"d\",\"i\",\"n\",\"a\",\"r\",\"y\",\"a\",\"m\",\"a\",\"z\",\"i\",\"n\",\"g\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,10]",
        "output": "39"
      },
      {
        "input": "words = [\"complex\",\"challenging\",\"problems\",\"solutions\"], letters = [\"c\",\"o\",\"m\",\"p\",\"l\",\"e\",\"x\",\"c\",\"h\",\"a\",\"l\",\"l\",\"e\",\"n\",\"g\",\"i\",\"n\",\"g\",\"p\",\"r\",\"o\",\"b\",\"l\",\"e\",\"m\",\"s\",\"o\",\"l\",\"u\",\"t\",\"i\",\"o\",\"n\",\"s\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,2]",
        "output": "54"
      },
      {
        "input": "words = [\"backtracking\",\"heuristic\",\"algorithm\",\"search\"], letters = [\"b\",\"a\",\"c\",\"k\",\"t\",\"r\",\"a\",\"c\",\"k\",\"i\",\"n\",\"g\",\"h\",\"e\",\"u\",\"r\",\"i\",\"s\",\"t\",\"i\",\"c\",\"a\",\"l\",\"g\",\"o\",\"r\",\"i\",\"t\",\"h\",\"m\",\"s\",\"e\",\"a\",\"r\",\"c\",\"h\"], score = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9]",
        "output": "165"
      },
      {
        "input": "words = [\"fantastic\",\"breathtaking\",\"transformation\",\"unbelievable\"], letters = [\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"b\",\"c\",\"d\",\"d\",\"e\",\"e\",\"e\",\"e\",\"f\",\"g\",\"h\",\"i\",\"i\",\"i\",\"k\",\"l\",\"m\",\"n\",\"n\",\"n\",\"o\",\"o\",\"o\",\"o\",\"p\",\"r\",\"r\",\"s\",\"t\",\"t\",\"t\",\"u\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "25"
      },
      {
        "input": "words = [\"python\",\"java\",\"csharp\",\"javascript\"], letters = [\"a\",\"a\",\"a\",\"b\",\"c\",\"c\",\"d\",\"d\",\"e\",\"e\",\"f\",\"g\",\"g\",\"h\",\"i\",\"i\",\"j\",\"j\",\"k\",\"k\",\"l\",\"m\",\"n\",\"n\",\"o\",\"o\",\"p\",\"p\",\"q\",\"q\",\"r\",\"s\",\"t\",\"t\",\"u\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,5]",
        "output": "38"
      },
      {
        "input": "words = [\"optimization\",\"algorithm\",\"data\",\"structure\"], letters = [\"a\",\"a\",\"a\",\"b\",\"c\",\"c\",\"d\",\"d\",\"e\",\"e\",\"g\",\"h\",\"i\",\"i\",\"l\",\"m\",\"n\",\"o\",\"o\",\"p\",\"p\",\"r\",\"s\",\"t\",\"t\",\"u\",\"v\",\"x\",\"y\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,5]",
        "output": "20"
      },
      {
        "input": "words = [\"zebra\",\"xylophone\",\"quartz\",\"jigsaw\"], letters = [\"a\",\"a\",\"e\",\"g\",\"h\",\"i\",\"j\",\"j\",\"k\",\"l\",\"o\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"w\",\"x\",\"y\",\"z\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "41"
      },
      {
        "input": "words = [\"wizard\",\"oracle\",\"sorcerer\"], letters = [\"w\",\"i\",\"z\",\"a\",\"r\",\"d\",\"o\",\"r\",\"a\",\"c\",\"l\",\"e\",\"s\",\"o\",\"r\",\"c\",\"e\",\"r\",\"e\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,10]",
        "output": "27"
      },
      {
        "input": "words = [\"hello\",\"world\",\"python\",\"code\"], letters = [\"h\",\"e\",\"l\",\"l\",\"o\",\"w\",\"r\",\"d\",\"p\",\"y\",\"t\",\"h\",\"o\",\"n\",\"c\",\"o\",\"d\",\"e\"], score = [4,5,1,2,4,3,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "190"
      },
      {
        "input": "words = [\"abcdefg\",\"hijklmn\",\"opqrstu\",\"vwxyz\"], letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "351"
      },
      {
        "input": "words = [\"greedy\",\"algorithm\",\"optimization\",\"heuristic\"], letters = [\"g\",\"r\",\"e\",\"e\",\"d\",\"y\",\"a\",\"l\",\"g\",\"o\",\"r\",\"i\",\"t\",\"h\",\"m\",\"o\",\"p\",\"t\",\"i\",\"m\",\"i\",\"z\",\"a\",\"t\",\"i\",\"o\",\"n\",\"h\",\"e\",\"u\",\"r\",\"i\",\"s\",\"t\",\"i\",\"c\"], score = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9]",
        "output": "188"
      },
      {
        "input": "words = [\"programming\",\"code\",\"hackathon\",\"python\"], letters = [\"p\",\"r\",\"o\",\"g\",\"r\",\"a\",\"m\",\"m\",\"i\",\"n\",\"g\",\"c\",\"o\",\"d\",\"e\",\"h\",\"a\",\"c\",\"k\",\"a\",\"t\",\"h\",\"o\",\"n\",\"p\",\"y\",\"t\",\"h\",\"o\",\"n\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,2]",
        "output": "67"
      },
      {
        "input": "words = [\"orange\",\"grape\",\"apple\",\"banana\"], letters = [\"a\",\"a\",\"a\",\"b\",\"e\",\"g\",\"n\",\"n\",\"n\",\"o\",\"p\",\"r\",\"r\",\"r\",\"s\",\"t\",\"u\",\"u\",\"u\",\"u\",\"u\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,1,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "8"
      },
      {
        "input": "words = [\"interview\",\"question\",\"programming\",\"challenge\"], letters = [\"i\",\"n\",\"t\",\"e\",\"r\",\"v\",\"i\",\"e\",\"w\",\"q\",\"u\",\"e\",\"s\",\"t\",\"i\",\"o\",\"n\",\"p\",\"r\",\"o\",\"g\",\"r\",\"a\",\"m\",\"m\",\"i\",\"n\",\"g\",\"c\",\"h\",\"a\",\"l\",\"l\",\"e\",\"n\",\"g\",\"e\"], score = [1,2,3,4,5,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5]",
        "output": "175"
      },
      {
        "input": "words = [\"abacax\",\"banana\",\"cherry\"], letters = [\"a\",\"b\",\"a\",\"c\",\"a\",\"x\",\"b\",\"a\",\"n\",\"a\",\"n\",\"a\",\"c\",\"h\",\"e\",\"r\",\"r\",\"y\",\"a\",\"b\",\"a\",\"c\",\"a\",\"x\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "142"
      },
      {
        "input": "words = [\"xylophone\",\"guitar\",\"piano\",\"drums\"], letters = [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\",\"d\",\"d\",\"d\",\"e\",\"e\",\"e\",\"f\",\"g\",\"g\",\"h\",\"i\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"n\",\"o\",\"o\",\"p\",\"p\",\"q\",\"r\",\"r\",\"s\",\"t\",\"u\",\"u\",\"v\",\"w\",\"x\",\"x\",\"y\",\"y\",\"z\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,1,1,3,10,1,1,1,1,4,4,8,4,10,9,7,5,3,2,1,6,4,2,9,7,5,3,2,1,6,4,2]",
        "output": "39"
      },
      {
        "input": "words = [\"abracadabra\",\"alakazam\",\"sorcery\",\"spellbound\"], letters = [\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"b\",\"c\",\"d\",\"e\",\"e\",\"e\",\"i\",\"l\",\"l\",\"l\",\"m\",\"o\",\"o\",\"o\",\"p\",\"r\",\"r\",\"r\",\"s\",\"s\",\"t\",\"u\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "18"
      },
      {
        "input": "words = [\"supercalifragilisticexpialidocious\",\"antidisestablishmentarianism\",\"floccinaucinihilipilification\"], letters = [\"s\",\"u\",\"p\",\"e\",\"r\",\"c\",\"a\",\"l\",\"i\",\"f\",\"r\",\"a\",\"g\",\"i\",\"l\",\"i\",\"s\",\"t\",\"i\",\"c\",\"e\",\"x\",\"p\",\"i\",\"a\",\"l\",\"i\",\"d\",\"o\",\"c\",\"i\",\"o\",\"u\",\"s\",\"a\",\"n\",\"t\",\"i\",\"d\",\"i\",\"s\",\"e\",\"t\",\"a\",\"b\",\"l\",\"i\",\"s\",\"h\",\"m\",\"e\",\"n\",\"t\",\"a\",\"r\",\"i\",\"a\",\"n\",\"i\",\"s\",\"m\",\"f\",\"l\",\"o\",\"c\",\"c\",\"i\",\"n\",\"a\",\"u\",\"c\",\"i\",\"n\",\"i\",\"h\",\"i\",\"l\",\"i\",\"p\",\"i\",\"l\",\"i\",\"f\",\"i\",\"c\",\"a\",\"t\",\"i\",\"o\",\"n\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,10]",
        "output": "112"
      },
      {
        "input": "words = [\"abcdefghij\",\"klmnopqrstu\",\"vwxyz\"], letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,2]",
        "output": "74"
      },
      {
        "input": "words = [\"abcdefghij\",\"jihgfedcba\",\"mnopqrstuv\"], letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], score = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6]",
        "output": "110"
      },
      {
        "input": "words = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "90"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"cherry\",\"date\"], letters = [\"a\",\"a\",\"a\",\"b\",\"c\",\"d\",\"e\",\"e\",\"e\",\"e\",\"n\",\"n\",\"r\",\"t\",\"y\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,5]",
        "output": "14"
      },
      {
        "input": "words = [\"optimization\",\"resource\",\"constraint\",\"solution\"], letters = [\"o\",\"p\",\"t\",\"i\",\"m\",\"i\",\"z\",\"a\",\"t\",\"i\",\"o\",\"n\",\"r\",\"e\",\"s\",\"o\",\"u\",\"r\",\"c\",\"e\",\"c\",\"o\",\"n\",\"s\",\"t\",\"r\",\"a\",\"i\",\"n\",\"t\",\"s\",\"o\",\"l\",\"u\",\"t\",\"i\",\"o\",\"n\"], score = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9]",
        "output": "169"
      },
      {
        "input": "words = [\"abcdefg\",\"hijklmnop\",\"qrstuvwxyz\"], letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "351"
      },
      {
        "input": "words = [\"quantum\",\"computing\",\"artificial\",\"intelligence\"], letters = [\"q\",\"u\",\"a\",\"n\",\"t\",\"u\",\"m\",\"c\",\"o\",\"m\",\"p\",\"u\",\"t\",\"i\",\"n\",\"g\",\"a\",\"r\",\"t\",\"i\",\"f\",\"i\",\"c\",\"i\",\"a\",\"l\",\"i\",\"n\",\"t\",\"e\",\"l\",\"l\",\"i\",\"g\",\"e\",\"n\",\"c\",\"e\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,2]",
        "output": "79"
      },
      {
        "input": "words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "136"
      },
      {
        "input": "words = [\"programming\",\"challenge\",\"solution\"], letters = [\"p\",\"r\",\"o\",\"g\",\"r\",\"a\",\"m\",\"m\",\"i\",\"n\",\"g\",\"c\",\"h\",\"a\",\"l\",\"l\",\"e\",\"n\",\"g\",\"e\",\"s\",\"o\",\"l\",\"u\",\"t\",\"i\",\"o\",\"n\"], score = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "28"
      },
      {
        "input": "words = [\"aabbcc\",\"ddeeff\",\"gghhii\"], letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"], score = [1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3]",
        "output": "18"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"cherry\",\"date\"], letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"e\",\"e\",\"g\",\"h\",\"i\",\"n\",\"n\",\"p\",\"p\",\"r\",\"t\",\"u\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,1,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "5"
      },
      {
        "input": "words = [\"apple\", \"banana\", \"grape\", \"orange\"], letters = [\"a\",\"a\",\"p\",\"l\",\"e\",\"b\",\"a\",\"n\",\"a\",\"n\",\"a\",\"g\",\"r\",\"a\",\"p\",\"e\",\"o\",\"r\",\"a\",\"n\",\"g\",\"e\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,1,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "24"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"cherry\"], letters = [\"a\",\"p\",\"p\",\"l\",\"e\",\"b\",\"a\",\"n\",\"a\",\"n\",\"a\",\"c\",\"h\",\"e\",\"r\",\"r\",\"y\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,2]",
        "output": "34"
      },
      {
        "input": "words = [\"xylophone\",\"violin\",\"guitar\"], letters = [\"x\",\"y\",\"l\",\"o\",\"p\",\"h\",\"o\",\"n\",\"e\",\"v\",\"i\",\"o\",\"l\",\"i\",\"n\",\"g\",\"u\",\"i\",\"t\",\"a\",\"r\"], score = [8,24,12,15,15,19,6,9,8,4,4,8,9,9,5,14,9,7,8,6,5,7,4,6,10,10]",
        "output": "166"
      },
      {
        "input": "words = [\"programming\",\"is\",\"fun\",\"and\",\"educational\"], letters = [\"a\",\"a\",\"a\",\"b\",\"c\",\"d\",\"e\",\"e\",\"e\",\"e\",\"f\",\"g\",\"h\",\"i\",\"i\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"n\",\"n\",\"o\",\"o\",\"p\",\"p\",\"p\",\"p\",\"r\",\"r\",\"s\",\"t\",\"u\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,5]",
        "output": "30"
      },
      {
        "input": "words = [\"optimization\",\"performance\",\"scalability\"], letters = [\"o\",\"p\",\"t\",\"i\",\"m\",\"i\",\"z\",\"a\",\"t\",\"i\",\"o\",\"n\",\"p\",\"e\",\"r\",\"f\",\"o\",\"r\",\"m\",\"a\",\"n\",\"c\",\"e\",\"s\",\"c\",\"a\",\"l\",\"a\",\"b\",\"i\",\"l\",\"i\",\"t\",\"y\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,4,8,8,10]",
        "output": "73"
      },
      {
        "input": "words = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\"], letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "136"
      },
      {
        "input": "words = [\"zebra\",\"giraffe\",\"hippo\"], letters = [\"z\",\"e\",\"b\",\"r\",\"a\",\"g\",\"i\",\"r\",\"a\",\"f\",\"f\",\"e\",\"h\",\"i\",\"p\",\"p\",\"o\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,2,4,2,4,1,2]",
        "output": "34"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"cherry\"], letters = [\"a\",\"a\",\"a\",\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"h\",\"e\",\"r\",\"r\",\"y\",\"n\"], score = [1,3,3,2,1,4,2,4,1,8,5,1,3,4,1,3,10,1,1,1,1,4,4,8,4,10]",
        "output": "14"
      },
      {
        "input": "words = [\"abcd\", \"dcba\", \"bacd\", \"cadb\"], letters = [\"a\",\"b\",\"c\",\"d\",\"a\",\"b\",\"c\",\"d\",\"a\",\"b\",\"c\",\"d\",\"a\",\"b\",\"c\",\"d\"], score = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "40"
      },
      {
        "input": "words = [\"programming\", \"python\", \"java\", \"code\"], letters = [\"p\",\"r\",\"o\",\"g\",\"r\",\"a\",\"m\",\"m\",\"i\",\"n\",\"g\",\"p\",\"y\",\"t\",\"h\",\"o\",\"n\",\"j\",\"a\",\"v\",\"a\",\"c\",\"o\",\"d\",\"e\"], score = [3,1,3,7,2,2,4,6,5,3,5,1,3,7,2,1,4,6,5,3,5,1,3,7,2,1]",
        "output": "89"
      },
      {
        "input": "words = [\"algorithm\",\"data\",\"structure\",\"code\"], letters = [\"a\",\"l\",\"g\",\"o\",\"r\",\"i\",\"t\",\"h\",\"m\",\"d\",\"a\",\"t\",\"a\",\"s\",\"t\",\"r\",\"u\",\"c\",\"t\",\"u\",\"r\",\"e\",\"c\",\"o\",\"d\",\"e\"], score = [1,3,2,2,1,2,3,5,1,1,1,1,2,1,1,1,2,4,2,4,1,6,2,5,3,5]",
        "output": "59"
      }
    ]
  },
  {
    "id": 2790,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Math",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "You are given a 0-indexed array usageLimits of length n.\nYour task is to create groups using numbers from 0 to n - 1, ensuring that each number, i, is used no more than usageLimits[i] times in total across all groups. You must also satisfy the following conditions:\n\nEach group must consist of distinct numbers, meaning that no duplicate numbers are allowed within a single group.\nEach group (except the first one) must have a length strictly greater than the previous group.\n\nReturn an integer denoting the maximum number of groups you can create while satisfying these conditions.\n\u00a0\nExample 1:\n\nInput: usageLimits = [1,2,5]\nOutput: 3\nExplanation: In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times.\nOne way of creating the maximum number of groups while satisfying the conditions is: \nGroup 1 contains the number [2].\nGroup 2 contains the numbers [1,2].\nGroup 3 contains the numbers [0,1,2]. \nIt can be shown that the maximum number of groups is 3. \nSo, the output is 3. \nExample 2:\n\nInput: usageLimits = [2,1,2]\nOutput: 2\nExplanation: In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nGroup 2 contains the numbers [1,2].\nIt can be shown that the maximum number of groups is 2.\nSo, the output is 2. \n\nExample 3:\n\nInput: usageLimits = [1,1]\nOutput: 1\nExplanation: In this example, we can use both 0 and 1 at most once.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nIt can be shown that the maximum number of groups is 1.\nSo, the output is 1. \n\n\u00a0\nConstraints:\n\n1 <= usageLimits.length <= 105\n1 <= usageLimits[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def maxIncreasingGroups(self, usageLimits: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "usageLimits = [10,9,8,7,6,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "usageLimits = [1000000000,1000000000,1000000000]",
        "output": "3"
      },
      {
        "input": "usageLimits = [5,5,5,5,5,5,5,5,5,5]",
        "output": "9"
      },
      {
        "input": "usageLimits = [1,2,5]",
        "output": "3"
      },
      {
        "input": "usageLimits = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "usageLimits = [3,3,3]",
        "output": "3"
      },
      {
        "input": "usageLimits = [1,1]",
        "output": "1"
      },
      {
        "input": "usageLimits = [1,1,1,1,1,1,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "usageLimits = [1]",
        "output": "1"
      },
      {
        "input": "usageLimits = [1,1000000000,1,1000000000,1]",
        "output": "4"
      },
      {
        "input": "usageLimits = [3,3,3,3]",
        "output": "4"
      },
      {
        "input": "usageLimits = [1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "5"
      },
      {
        "input": "usageLimits = [2,1,2]",
        "output": "2"
      },
      {
        "input": "usageLimits = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000]",
        "output": "5"
      },
      {
        "input": "usageLimits = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "11"
      },
      {
        "input": "usageLimits = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "19"
      },
      {
        "input": "usageLimits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "15"
      },
      {
        "input": "usageLimits = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "14"
      },
      {
        "input": "usageLimits = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "10"
      },
      {
        "input": "usageLimits = [20,1,20,2,20,3,20,4,20,5,20,6,20,7,20,8,20,9,20,10]",
        "output": "20"
      },
      {
        "input": "usageLimits = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "5"
      },
      {
        "input": "usageLimits = [1, 3, 6, 10, 15]",
        "output": "5"
      },
      {
        "input": "usageLimits = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "20"
      },
      {
        "input": "usageLimits = [5, 3, 2, 1]",
        "output": "4"
      },
      {
        "input": "usageLimits = [15, 10, 6, 3, 1]",
        "output": "5"
      },
      {
        "input": "usageLimits = [1,3,6,10,15,21,28,36,45,55]",
        "output": "10"
      },
      {
        "input": "usageLimits = [10,10,10,10,10,10,10,10,10,10]",
        "output": "10"
      },
      {
        "input": "usageLimits = [1000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "4"
      },
      {
        "input": "usageLimits = [30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2]",
        "output": "15"
      },
      {
        "input": "usageLimits = [10, 10, 10, 10, 10]",
        "output": "5"
      },
      {
        "input": "usageLimits = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "10"
      },
      {
        "input": "usageLimits = [1, 3, 2, 5, 4, 7, 6, 9, 8, 10]",
        "output": "10"
      },
      {
        "input": "usageLimits = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "7"
      },
      {
        "input": "usageLimits = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "15"
      },
      {
        "input": "usageLimits = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "9"
      },
      {
        "input": "usageLimits = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20]",
        "output": "6"
      },
      {
        "input": "usageLimits = [100, 50, 25, 12, 6, 3, 1]",
        "output": "7"
      },
      {
        "input": "usageLimits = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14]",
        "output": "20"
      },
      {
        "input": "usageLimits = [1,1,2,2,3,3,4,4,5,5]",
        "output": "7"
      },
      {
        "input": "usageLimits = [5, 4, 3, 2, 1]",
        "output": "5"
      },
      {
        "input": "usageLimits = [10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1]",
        "output": "14"
      },
      {
        "input": "usageLimits = [1000000000, 1, 1000000000, 1, 1000000000, 1]",
        "output": "5"
      },
      {
        "input": "usageLimits = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "10"
      },
      {
        "input": "usageLimits = [1,2,2,3,3,3]",
        "output": "4"
      },
      {
        "input": "usageLimits = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "16"
      },
      {
        "input": "usageLimits = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "usageLimits = [1000000000,1000000000,1000000000,1000000000]",
        "output": "4"
      },
      {
        "input": "usageLimits = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "20"
      },
      {
        "input": "usageLimits = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000]",
        "output": "4"
      },
      {
        "input": "usageLimits = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "4"
      },
      {
        "input": "usageLimits = [5,2,4,1,3]",
        "output": "5"
      },
      {
        "input": "usageLimits = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "usageLimits = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "usageLimits = [5,4,3,2,1]",
        "output": "5"
      },
      {
        "input": "usageLimits = [100,50,25,10,5,1]",
        "output": "6"
      },
      {
        "input": "usageLimits = [1,2,1,2,1,2,1,2,1,2]",
        "output": "5"
      },
      {
        "input": "usageLimits = [1, 2, 3, 4, 5]",
        "output": "5"
      },
      {
        "input": "usageLimits = [1000000000, 500000000, 250000000, 125000000, 62500000, 31250000, 15625000, 7812500, 3906250, 1953125]",
        "output": "10"
      },
      {
        "input": "usageLimits = [20,10,30,5,15,25,5,35,40,10,5,15,20,5,25,30,5,40,5,10]",
        "output": "20"
      },
      {
        "input": "usageLimits = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "7"
      },
      {
        "input": "usageLimits = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "15"
      },
      {
        "input": "usageLimits = [1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10]",
        "output": "14"
      },
      {
        "input": "usageLimits = [10, 10, 10, 10, 10, 10, 10, 10, 10, 1]",
        "output": "10"
      },
      {
        "input": "usageLimits = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "7"
      },
      {
        "input": "usageLimits = [10,1,10,1,10,1,10,1,10,1,10,1,10,1,10]",
        "output": "11"
      },
      {
        "input": "usageLimits = [1,3,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "usageLimits = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "15"
      },
      {
        "input": "usageLimits = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]",
        "output": "6"
      },
      {
        "input": "usageLimits = [10, 10, 10, 10, 10, 10]",
        "output": "6"
      },
      {
        "input": "usageLimits = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "15"
      }
    ]
  },
  {
    "id": 1499,
    "difficulty": "Hard",
    "tags": [
      "Queue",
      "Array",
      "Sliding Window",
      "Monotonic Queue",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. You are also given an integer k.\nReturn the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length.\nIt is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.\n\u00a0\nExample 1:\n\nInput: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1\nOutput: 4\nExplanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\nNo other pairs satisfy the condition, so we return the max of 4 and 1.\n\nExample 2:\n\nInput: points = [[0,0],[3,0],[9,2]], k = 3\nOutput: 3\nExplanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.\n\n\u00a0\nConstraints:\n\n2 <= points.length <= 105\npoints[i].length == 2\n-108 <= xi, yi <= 108\n0 <= k <= 2 * 108\nxi < xj for all 1 <= i < j <= points.length\nxi form a strictly increasing sequence.\n\n",
    "starterCode": "class Solution:\n    def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "points = [[1,3],[2,0],[5,10],[6,-10]], k = 1",
        "output": "4"
      },
      {
        "input": "points = [[100000000,100000000],[200000000,200000000],[300000000,300000000]], k = 100000000",
        "output": "600000000"
      },
      {
        "input": "points = [[1,5],[2,3],[4,7],[8,10]], k = 6",
        "output": "21"
      },
      {
        "input": "points = [[1,3],[2,0],[5,10],[6,-10],[7,5]], k = 4",
        "output": "17"
      },
      {
        "input": "points = [[-10,-10],[-5,-5],[0,0],[5,5],[10,10]], k = 15",
        "output": "20"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4]], k = 2",
        "output": "8"
      },
      {
        "input": "points = [[-1,1],[-2,2],[-3,3]], k = 1",
        "output": "4"
      },
      {
        "input": "points = [[-10,5],[0,0],[10,10],[20,-5]], k = 25",
        "output": "35"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5]], k = 2",
        "output": "10"
      },
      {
        "input": "points = [[-10,-10],[0,0],[10,10]], k = 20",
        "output": "20"
      },
      {
        "input": "points = [[1,100000000],[100000000,1]], k = 200000000",
        "output": "200000000"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5]], k = 4",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[3,3],[5,5]], k = 4",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5]], k = 2",
        "output": "10"
      },
      {
        "input": "points = [[0,0],[3,0],[9,2]], k = 3",
        "output": "3"
      },
      {
        "input": "points = [[-1,2],[-3,3],[1,3],[2,4]], k = 4",
        "output": "10"
      },
      {
        "input": "points = [[-1,20],[-10,15],[-5,10],[0,5],[5,0],[10,-5],[15,-10]], k = 12",
        "output": "30"
      },
      {
        "input": "points = [[1,100000000],[2,99999999],[3,99999998],[4,99999997],[5,99999996],[6,99999995]], k = 4",
        "output": "200000000"
      },
      {
        "input": "points = [[1,1],[2,100000000],[3,1],[4,100000000],[5,1]], k = 1",
        "output": "100000002"
      },
      {
        "input": "points = [[100000000, 100000000], [200000000, -200000000], [300000000, 300000000]], k = 150000000",
        "output": "200000000"
      },
      {
        "input": "points = [[1,1],[3,4],[5,7],[8,10],[12,13],[15,14],[18,15],[20,16],[25,17],[30,18]], k = 15",
        "output": "47"
      },
      {
        "input": "points = [[100000000,-100000000],[100000001,100000000],[100000002,-100000000],[100000003,100000000]], k = 4",
        "output": "200000002"
      },
      {
        "input": "points = [[1,3],[4,1],[8,5],[15,10],[20,6],[25,3]], k = 15",
        "output": "27"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]], k = 9",
        "output": "11"
      },
      {
        "input": "points = [[1,3],[4,5],[7,8],[10,12],[13,15],[16,18]], k = 5",
        "output": "36"
      },
      {
        "input": "points = [[1,5],[2,4],[3,3],[4,2],[5,1],[6,0],[7,-1],[8,-2],[9,-3],[10,-4]], k = 4",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]], k = 2",
        "output": "30"
      },
      {
        "input": "points = [[1, 100], [2, 200], [3, 300], [4, 400], [5, 500], [6, 600], [7, 700]], k = 3",
        "output": "1301"
      },
      {
        "input": "points = [[1,3],[5,10],[8,15],[10,7],[12,20],[16,5],[20,25]], k = 10",
        "output": "53"
      },
      {
        "input": "points = [[1, -1], [2, -2], [3, -3], [4, -4], [5, -5], [6, -6], [7, -7], [8, -8], [9, -9], [10, -10], [11, -11], [12, -12], [13, -13], [14, -14], [15, -15], [16, -16], [17, -17], [18, -18], [19, -19], [20, -20]], k = 5",
        "output": "-2"
      },
      {
        "input": "points = [[-1, 1], [0, 0], [1, -1], [2, 2], [3, -3], [4, 4], [5, -5], [6, 6]], k = 2",
        "output": "12"
      },
      {
        "input": "points = [[1,100],[5,200],[10,300],[15,400],[20,500],[25,600],[30,700]], k = 10",
        "output": "1305"
      },
      {
        "input": "points = [[1,3],[2,0],[5,10],[6,-10],[7,2],[8,-5],[10,4]], k = 3",
        "output": "14"
      },
      {
        "input": "points = [[1,1],[2,3],[4,2],[5,3],[6,5],[8,6],[9,7],[10,8]], k = 5",
        "output": "17"
      },
      {
        "input": "points = [[1, -1], [2, -2], [3, -3], [4, -4], [5, -5], [6, -6], [7, -7], [8, -8], [9, -9], [10, -10]], k = 5",
        "output": "-2"
      },
      {
        "input": "points = [[1,100000000],[2,-100000000],[3,100000000],[4,-100000000],[5,100000000],[6,-100000000],[7,100000000],[8,-100000000],[9,100000000],[10,-100000000]], k = 1",
        "output": "1"
      },
      {
        "input": "points = [[1, 1], [3, 5], [5, 3], [7, 9], [9, 4], [11, 10], [13, 6], [15, 8], [17, 2], [19, 12]], k = 4",
        "output": "24"
      },
      {
        "input": "points = [[100000,-100000],[100005,100000],[100010,-100000],[100015,100000]], k = 10",
        "output": "200010"
      },
      {
        "input": "points = [[1, 10], [3, 20], [5, 15], [7, 5], [9, 25], [11, 30], [13, 10], [15, 35]], k = 15",
        "output": "69"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]], k = 1",
        "output": "3"
      },
      {
        "input": "points = [[-5, 10], [-2, 3], [0, 0], [3, -5], [7, 2], [8, -1], [10, 6]], k = 4",
        "output": "16"
      },
      {
        "input": "points = [[1,1],[3,4],[6,7],[8,10],[11,13],[15,16],[18,19]], k = 7",
        "output": "39"
      },
      {
        "input": "points = [[100000000,-100000000],[200000000,-200000000],[300000000,100000000],[400000000,200000000]], k = 250000000",
        "output": "400000000"
      },
      {
        "input": "points = [[-5,-5],[-3,-3],[0,0],[4,4],[6,6],[10,10]], k = 6",
        "output": "20"
      },
      {
        "input": "points = [[-20,20],[-18,18],[-16,16],[-14,14],[-12,12],[-10,10],[-8,8],[-6,6],[-4,4],[-2,2]], k = 4",
        "output": "40"
      },
      {
        "input": "points = [[-100000000,-100000000],[-90000000,-90000000],[-80000000,-80000000],[-70000000,-70000000],[-60000000,-60000000],[-50000000,-50000000],[-40000000,-40000000],[-30000000,-30000000],[-20000000,-20000000],[-10000000,-10000000]], k = 20000000",
        "output": "-20000000"
      },
      {
        "input": "points = [[1,100000000],[2,99999999],[3,99999998],[4,99999997],[5,99999996]], k = 1",
        "output": "200000000"
      },
      {
        "input": "points = [[1, 100000000], [2, 50000000], [5, 10000000], [10, 5000000], [20, 1000000], [50, 500000], [100, 100000]], k = 99",
        "output": "150000001"
      },
      {
        "input": "points = [[-5,-10],[-3,-7],[-1,-2],[1,3],[4,9]], k = 4",
        "output": "15"
      },
      {
        "input": "points = [[1,5],[4,3],[6,7],[8,2],[10,8]], k = 5",
        "output": "19"
      },
      {
        "input": "points = [[1,5],[3,4],[7,10],[8,2],[10,1]], k = 5",
        "output": "18"
      },
      {
        "input": "points = [[1,2],[4,5],[6,7],[8,9],[10,12],[12,15],[14,17],[16,19],[18,21],[20,23]], k = 10",
        "output": "46"
      },
      {
        "input": "points = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10]], k = 15",
        "output": "29"
      },
      {
        "input": "points = [[1,100000000],[-50000000,-100000000],[100000000,-100000000],[-100000000,100000000]], k = 200000000",
        "output": "99999999"
      },
      {
        "input": "points = [[1,1],[3,5],[6,2],[8,8],[10,4],[15,7],[20,1]], k = 5",
        "output": "18"
      },
      {
        "input": "points = [[1,100000000],[100000000,1],[100000001,2],[200000000,3],[300000000,4],[400000000,5],[500000000,6],[600000000,7],[700000000,8],[800000000,9],[900000000,10]], k = 100000000",
        "output": "200000002"
      },
      {
        "input": "points = [[-1000000,-1000000],[-900000,-900000],[-800000,-800000],[-700000,-700000],[-600000,-600000]], k = 100000",
        "output": "-1200000"
      },
      {
        "input": "points = [[-5, 5], [0, 0], [1, 3], [3, -1], [5, 10], [6, -10], [8, 2], [10, 3], [15, 0]], k = 5",
        "output": "18"
      },
      {
        "input": "points = [[1,-1],[2,-2],[3,-3],[4,-4],[5,-5],[6,-6],[7,-7],[8,-8],[9,-9]], k = 2",
        "output": "-2"
      },
      {
        "input": "points = [[1,1],[10,10],[100,100],[1000,1000],[10000,10000],[100000,100000],[1000000,1000000],[10000000,10000000],[100000000,100000000]], k = 50000000",
        "output": "20000000"
      },
      {
        "input": "points = [[100000,-100000],[100001,-99999],[100002,-99998],[100003,-99997],[100004,-99996]], k = 4",
        "output": "-199992"
      },
      {
        "input": "points = [[-10, -10], [-9, -9], [-8, -8], [-7, -7], [-6, -6], [-5, -5], [-4, -4], [-3, -3], [-2, -2], [-1, -1]], k = 2",
        "output": "-2"
      },
      {
        "input": "points = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91]], k = 3",
        "output": "200"
      },
      {
        "input": "points = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k = 3",
        "output": "20"
      },
      {
        "input": "points = [[1,5],[3,7],[6,8],[8,6],[10,9],[15,1]], k = 5",
        "output": "21"
      },
      {
        "input": "points = [[-50,-50],[-25,-100],[0,0],[25,100],[50,50]], k = 75",
        "output": "175"
      },
      {
        "input": "points = [[1,1000],[2,900],[3,800],[4,700],[5,600],[6,500],[7,400],[8,300],[9,200],[10,100]], k = 3",
        "output": "1901"
      },
      {
        "input": "points = [[1,2],[2,4],[3,8],[4,16],[5,32]], k = 4",
        "output": "49"
      },
      {
        "input": "points = [[1,10],[2,15],[5,20],[8,25],[10,30],[15,35],[20,40],[25,45],[30,50],[35,55]], k = 15",
        "output": "110"
      },
      {
        "input": "points = [[-5,-5],[-3,-1],[0,0],[2,4],[3,6],[8,8]], k = 5",
        "output": "19"
      },
      {
        "input": "points = [[1,1],[10,2],[20,3],[30,4],[40,5],[50,6],[60,7],[70,8],[80,9],[90,10]], k = 15",
        "output": "29"
      },
      {
        "input": "points = [[-100000000,100000000],[-90000000,90000000],[0,-50000000],[100000000,50000000]], k = 110000000",
        "output": "200000000"
      },
      {
        "input": "points = [[1, -1], [3, -2], [5, -3], [7, -4], [9, -5], [11, -6], [13, -7], [15, -8], [17, -9], [19, -10]], k = 18",
        "output": "7"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], k = 1",
        "output": "20"
      },
      {
        "input": "points = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], k = 10",
        "output": "20"
      },
      {
        "input": "points = [[2,3],[5,6],[8,9],[11,12],[14,15]], k = 3",
        "output": "30"
      },
      {
        "input": "points = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]], k = 1",
        "output": "-inf"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], k = 1",
        "output": "18"
      },
      {
        "input": "points = [[1, -100000000], [2, 100000000], [3, -100000000], [4, 100000000], [5, -100000000], [6, 100000000], [7, -100000000]], k = 2",
        "output": "200000002"
      },
      {
        "input": "points = [[1, 2], [2, 1], [3, 4], [4, 3], [5, 6], [6, 5], [7, 8], [8, 7], [9, 10], [10, 9]], k = 1",
        "output": "20"
      },
      {
        "input": "points = [[1, 100000000], [2, 99999999], [3, 99999998], [4, 99999997], [5, 99999996], [6, 99999995], [7, 99999994], [8, 99999993], [9, 99999992], [10, 99999991]], k = 1",
        "output": "200000000"
      },
      {
        "input": "points = [[1,10],[2,3],[3,5],[4,7],[5,2],[6,8]], k = 4",
        "output": "20"
      },
      {
        "input": "points = [[10,50],[20,30],[30,20],[40,10],[50,0],[60,-10],[70,-20],[80,-30],[90,-40]], k = 25",
        "output": "90"
      },
      {
        "input": "points = [[1,100000000],[2,90000000],[3,80000000],[4,70000000],[5,60000000]], k = 3",
        "output": "190000001"
      },
      {
        "input": "points = [[5, 5], [15, 10], [25, 3], [35, 15], [45, 10], [55, 20], [65, 5], [75, 25]], k = 20",
        "output": "65"
      },
      {
        "input": "points = [[1,1],[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90]], k = 30",
        "output": "180"
      },
      {
        "input": "points = [[1, 1], [2, 10], [3, 3], [4, 15], [5, 5], [6, 20], [7, 7], [8, 25], [9, 9], [10, 30]], k = 10",
        "output": "57"
      },
      {
        "input": "points = [[1, 1], [3, 3], [5, 5], [7, 7], [9, 9], [11, 11], [13, 13], [15, 15], [17, 17], [19, 19], [21, 21], [23, 23], [25, 25], [27, 27], [29, 29], [31, 31], [33, 33], [35, 35], [37, 37], [39, 39]], k = 2",
        "output": "78"
      },
      {
        "input": "points = [[-100000000, 100000000], [0, 0], [100000000, -100000000]], k = 200000000",
        "output": "200000000"
      },
      {
        "input": "points = [[-100,100],[-90,90],[-80,80],[-70,70],[-60,60],[-50,50],[-40,40],[-30,30],[-20,20],[-10,10]], k = 20",
        "output": "200"
      },
      {
        "input": "points = [[-5,-5],[-2,3],[-1,2],[0,0],[1,5],[2,1],[4,-2],[6,3]], k = 4",
        "output": "11"
      },
      {
        "input": "points = [[-10, 0], [-9, 1], [-8, 2], [-7, 3], [-6, 4], [-5, 5], [-4, 6], [-3, 7], [-2, 8], [-1, 9]], k = 3",
        "output": "18"
      },
      {
        "input": "points = [[10, 20], [15, 10], [20, 20], [25, 30], [30, 5], [35, 25], [40, 30]], k = 10",
        "output": "65"
      },
      {
        "input": "points = [[1, 5], [3, 4], [6, 7], [8, 2], [10, 10]], k = 4",
        "output": "21"
      },
      {
        "input": "points = [[-5, 10], [0, -1], [4, 3], [7, -2], [12, 5]], k = 5",
        "output": "14"
      },
      {
        "input": "points = [[-100, 100], [-90, -80], [-80, 80], [-70, -70], [-60, 60], [-50, -50]], k = 20",
        "output": "200"
      },
      {
        "input": "points = [[1,10],[2,5],[3,-5],[4,-10],[5,-15],[6,-20],[7,-25],[8,-30]], k = 3",
        "output": "16"
      },
      {
        "input": "points = [[1,3],[2,1],[3,2],[4,4],[5,1],[6,3],[7,2],[8,5],[9,4]], k = 4",
        "output": "13"
      },
      {
        "input": "points = [[-5,-5],[-3,-2],[-1,0],[2,3],[5,5],[8,8],[11,11]], k = 7",
        "output": "22"
      },
      {
        "input": "points = [[1,1],[3,2],[5,3],[7,4],[9,5],[11,6],[13,7],[15,8],[17,9]], k = 8",
        "output": "22"
      },
      {
        "input": "points = [[1,2],[3,5],[5,7],[7,10],[9,15],[11,20],[13,25],[15,30],[17,35],[19,40]], k = 10",
        "output": "77"
      },
      {
        "input": "points = [[-50,10],[-30,20],[-10,30],[10,40],[30,50],[50,60],[70,70],[90,80],[110,90]], k = 30",
        "output": "190"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], k = 3",
        "output": "20"
      },
      {
        "input": "points = [[-100000000,100000000],[0,-100000000],[100000000,100000000]], k = 200000000",
        "output": "400000000"
      },
      {
        "input": "points = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]], k = 2",
        "output": "40"
      },
      {
        "input": "points = [[-100000000,100000000],[-99999999,99999999],[-99999998,99999998],[-99999997,99999997],[-99999996,99999996],[-99999995,99999995]], k = 4",
        "output": "200000000"
      },
      {
        "input": "points = [[-100000, 100000], [-90000, 50000], [-80000, 0], [-70000, -50000], [-60000, -100000], [-50000, 100000], [-40000, 50000], [-30000, 0], [-20000, -50000], [-10000, -100000], [0, 100000], [10000, 50000], [20000, 0], [30000, -50000], [40000, -100000], [50000, 100000], [60000, 50000], [70000, 0], [80000, -50000], [90000, -100000], [100000, 100000]], k = 20000",
        "output": "160000"
      },
      {
        "input": "points = [[1,100],[2,50],[3,75],[4,25],[5,150]], k = 4",
        "output": "254"
      }
    ]
  },
  {
    "id": 644,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Prefix Sum"
    ],
    "problemDescription": "You are given an integer array nums consisting of n elements, and an integer k.\nFind a contiguous subarray whose length is greater than or equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.\n\u00a0\nExample 1:\n\nInput: nums = [1,12,-5,-6,50,3], k = 4\nOutput: 12.75000\nExplanation:\n- When the length is 4, averages are [0.5, 12.75, 10.5] and the maximum average is 12.75\n- When the length is 5, averages are [10.4, 10.8] and the maximum average is 10.8\n- When the length is 6, averages are [9.16667] and the maximum average is 9.16667\nThe maximum average is when we choose a subarray of length 4 (i.e., the sub array [12, -5, -6, 50]) which has the max average 12.75, so we return 12.75\nNote that we do not consider the subarrays of length < 4.\n\nExample 2:\n\nInput: nums = [5], k = 1\nOutput: 5.00000\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= k <= n <= 104\n-104 <= nums[i] <= 104\n\n",
    "starterCode": "class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        ",
    "testCases": [
      {
        "input": "nums = [10, 20, 30, 40, 50], k = 3",
        "output": "40.0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "7.999999046325684"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5], k = 2",
        "output": "-1.5"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5], k = 2",
        "output": "-1.5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5",
        "output": "7.999999046325684"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5], k = 3",
        "output": "-2.0"
      },
      {
        "input": "nums = [10000,-10000,10000,-10000,10000], k = 5",
        "output": "1999.9999925494194"
      },
      {
        "input": "nums = [10000, -10000, 10000, -10000, 10000], k = 3",
        "output": "3333.3333302289248"
      },
      {
        "input": "nums = [1,12,-5,-6,50,3], k = 4",
        "output": "12.749995231628418"
      },
      {
        "input": "nums = [5], k = 1",
        "output": "5"
      },
      {
        "input": "nums = [4,0,4,3,3], k = 2",
        "output": "3.5"
      },
      {
        "input": "nums = [10,20,30,40,50], k = 3",
        "output": "40.0"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], k = 8",
        "output": "1150.0"
      },
      {
        "input": "nums = [-10000, -9000, -8000, -7000, -6000, -5000, -4000, -3000, -2000, -1000], k = 3",
        "output": "-2000.0000074505806"
      },
      {
        "input": "nums = [0, -1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10], k = 10",
        "output": "0.3636355400085449"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, -1000, -900, -800, -700, -600, -500, -400, -300, -200, -100], k = 10",
        "output": "549.9999970197678"
      },
      {
        "input": "nums = [-10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000], k = 6",
        "output": "1428.5714272409678"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 7",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 7",
        "output": "69.99999642372131"
      },
      {
        "input": "nums = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000], k = 10000",
        "output": "10000"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 7",
        "output": "699.9999977648258"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], k = 20",
        "output": "15.499996185302734"
      },
      {
        "input": "nums = [5, -5, 5, -5, 5, -5, 5, -5, 5, -5], k = 4",
        "output": "0.9999942779541016"
      },
      {
        "input": "nums = [10, -5, 20, -30, 40, -50, 60, -70, 80, -90], k = 6",
        "output": "7.142856419086456"
      },
      {
        "input": "nums = [1, 3, 2, 4, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19], k = 15",
        "output": "12.933327674865723"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5], k = 6",
        "output": "2.5"
      },
      {
        "input": "nums = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100], k = 4",
        "output": "13.99999886751175"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10], k = 7",
        "output": "1.4285659790039062"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 10",
        "output": "55.0"
      },
      {
        "input": "nums = [50, 20, 30, 10, 40, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 8",
        "output": "115.0"
      },
      {
        "input": "nums = [5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000], k = 5",
        "output": "5000"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 15",
        "output": "129.99999523162842"
      },
      {
        "input": "nums = [5, -3, 2, 1, -2, 3, -1, 4, -5, 6, -7, 8, -9, 10, -11, 12, -13, 14, -15, 16], k = 7",
        "output": "1.8571383953094482"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5], k = 5",
        "output": "0.9999942779541016"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 15",
        "output": "12.999999523162842"
      },
      {
        "input": "nums = [10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000], k = 4",
        "output": "1999.9999925494194"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], k = 1",
        "output": "1499.9999947845936"
      },
      {
        "input": "nums = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000], k = 15",
        "output": "10000"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 10",
        "output": "5"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 4",
        "output": "0.1999969482421875"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30, 40, -40, 50, -50], k = 3",
        "output": "16.66666269302368"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 7",
        "output": "11.999998092651367"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 1",
        "output": "0"
      },
      {
        "input": "nums = [-10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000], k = 5",
        "output": "1999.9999925494194"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 5",
        "output": "799.9999985098839"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 4",
        "output": "-2.500002861022949"
      },
      {
        "input": "nums = [10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000], k = 5",
        "output": "1999.9999925494194"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, -1, 2, -1, 2, -1, 2, -1, 2], k = 4",
        "output": "0.9999980926513672"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5], k = 3",
        "output": "1.6666603088378906"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10], k = 5",
        "output": "1.9999980926513672"
      },
      {
        "input": "nums = [10, 5, 1, 2, 8, 7, 6, 3, 4, 9], k = 4",
        "output": "6.166664123535156"
      },
      {
        "input": "nums = [-1000, 500, -2000, 1500, -3000, 2500, -4000, 3500, -5000], k = 5",
        "output": "99.99999683350325"
      },
      {
        "input": "nums = [-10, 20, -30, 40, -50, 60, -70, 80, -90, 100], k = 5",
        "output": "15.999999940395355"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], k = 25",
        "output": "17.999993562698364"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 10",
        "output": "5"
      },
      {
        "input": "nums = [-10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000], k = 10",
        "output": "-10000"
      },
      {
        "input": "nums = [1000, 2000, 3000, -4000, 5000, -6000, 7000, -8000, 9000, -10000], k = 5",
        "output": "1399.9999929219484"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 3",
        "output": "-2.000004768371582"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15], k = 8",
        "output": "1.2222163677215576"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], k = 6",
        "output": "1249.999999254942"
      },
      {
        "input": "nums = [-100, 100, -100, 100, -100, 100, -100, 100, -100, 100], k = 6",
        "output": "14.28571343421936"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 5",
        "output": "-3.0000009536743164"
      },
      {
        "input": "nums = [5000, 4000, 3000, 2000, 1000, 0, -1000, -2000, -3000, -4000, -5000], k = 3",
        "output": "3999.9999944120646"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 3",
        "output": "899.9999992549419"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 7",
        "output": "119.99999761581421"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 10",
        "output": "0"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 100",
        "output": "0.0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 30",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 7",
        "output": "16.999993324279785"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "1"
      },
      {
        "input": "numsk = 100",
        "output": "5000"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 15",
        "output": "0.0666656494140625"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 100",
        "output": "1"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 8",
        "output": "1.4999961853027344"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10], k = 3",
        "output": "2.666663646697998"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 10",
        "output": "4.499999046325684"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30], k = 15",
        "output": "-8.00000548362732"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15], k = 5",
        "output": "2.59999680519104"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 20",
        "output": "10.5"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [-10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000], k = 4",
        "output": "1999.9999925494194"
      },
      {
        "input": "nums = [100, -50, 200, -150, 300, -250, 400, -350, 500, -450], k = 5",
        "output": "119.99999433755875"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], k = 30",
        "output": "35.499995946884155"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10",
        "output": "15.499999046325684"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 50",
        "output": "0"
      },
      {
        "input": "nums = [10, -5, 20, -100, 30, 40, -20, 50, 60, -30], k = 6",
        "output": "21.66666030883789"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], k = 25",
        "output": "37.99999988079071"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 15",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 20",
        "output": "5.999998092651367"
      },
      {
        "input": "nums = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000], k = 10",
        "output": "10000"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 5",
        "output": "0.1999969482421875"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 10",
        "output": "0"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 8",
        "output": "0.11110687255859375"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 3",
        "output": "0.3333282470703125"
      }
    ]
  },
  {
    "id": 1960,
    "difficulty": "Hard",
    "tags": [
      "String",
      "Hash Function",
      "Rolling Hash"
    ],
    "problemDescription": "You are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.\nMore formally, you want to choose four integers i, j, k, l such that 0 <= i <= j < k <= l < s.length and both the substrings s[i...j] and s[k...l] are palindromes and have odd lengths. s[i...j] denotes a substring from index i to index j inclusive.\nReturn the maximum possible product of the lengths of the two non-intersecting palindromic substrings.\nA palindrome is a string that is the same forward and backward. A substring is a contiguous sequence of characters in a string.\n\u00a0\nExample 1:\n\nInput: s = \"ababbb\"\nOutput: 9\nExplanation: Substrings \"aba\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.\n\nExample 2:\n\nInput: s = \"zaaaxbbby\"\nOutput: 9\nExplanation: Substrings \"aaa\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.\n\n\u00a0\nConstraints:\n\n2 <= s.length <= 105\ns consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def maxProduct(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"mnoonmmon\"",
        "output": "1"
      },
      {
        "input": "s = \"mamadmim\"",
        "output": "9"
      },
      {
        "input": "s = \"abcdcba\"",
        "output": "5"
      },
      {
        "input": "s = \"abcdedcba\"",
        "output": "7"
      },
      {
        "input": "s = \"mamad\"",
        "output": "3"
      },
      {
        "input": "s = \"aaaaa\"",
        "output": "3"
      },
      {
        "input": "s = \"abcdefghi\"",
        "output": "1"
      },
      {
        "input": "s = \"abacdfgdcaba\"",
        "output": "9"
      },
      {
        "input": "s = \"zaaaxbbby\"",
        "output": "9"
      },
      {
        "input": "s = \"noonnoon\"",
        "output": "1"
      },
      {
        "input": "s = \"abcde\"",
        "output": "1"
      },
      {
        "input": "s = \"racecar\"",
        "output": "5"
      },
      {
        "input": "s = \"abcdeedcba\"",
        "output": "1"
      },
      {
        "input": "s = \"banana\"",
        "output": "5"
      },
      {
        "input": "s = \"ababbb\"",
        "output": "9"
      },
      {
        "input": "s = \"abc\"",
        "output": "1"
      },
      {
        "input": "s = \"abcbabcbabcba\"",
        "output": "35"
      },
      {
        "input": "s = \"abcdefgh\"",
        "output": "1"
      },
      {
        "input": "s = \"abcd\"",
        "output": "1"
      },
      {
        "input": "s = \"mississippi\"",
        "output": "7"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijj\"",
        "output": "1"
      },
      {
        "input": "s = \"mnoonmnonoomnm\"",
        "output": "15"
      },
      {
        "input": "s = \"abcdefg\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeeffgg\"",
        "output": "3"
      },
      {
        "input": "s = \"abccbaabccbaabccbaabccba\"",
        "output": "1"
      },
      {
        "input": "s = \"aaaaaabbaaaaa\"",
        "output": "25"
      },
      {
        "input": "s = \"nunrunrunrun\"",
        "output": "3"
      },
      {
        "input": "s = \"abaaacbaaaaba\"",
        "output": "9"
      },
      {
        "input": "s = \"racecarlevelnoonracecar\"",
        "output": "49"
      },
      {
        "input": "s = \"deeeeefedeeeed\"",
        "output": "15"
      },
      {
        "input": "s = \"rotorrotor\"",
        "output": "25"
      },
      {
        "input": "s = \"abracadabra\"",
        "output": "3"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "1"
      },
      {
        "input": "s = \"abcbaacbabcba\"",
        "output": "25"
      },
      {
        "input": "s = \"abcbacbacbacb\"",
        "output": "5"
      },
      {
        "input": "s = \"tattarrattat\"",
        "output": "9"
      },
      {
        "input": "s = \"repaperrelevelrepeepr\"",
        "output": "35"
      },
      {
        "input": "s = \"babadabababa\"",
        "output": "25"
      },
      {
        "input": "s = \"madaminnadammadam\"",
        "output": "25"
      },
      {
        "input": "s = \"abccbaabcdcba\"",
        "output": "7"
      },
      {
        "input": "s = \"aabaaaabaaaabaa\"",
        "output": "25"
      },
      {
        "input": "s = \"abcdeffedcbaffedcba\"",
        "output": "1"
      },
      {
        "input": "s = \"abccbaabccba\"",
        "output": "1"
      },
      {
        "input": "s = \"xyzabcbaedcbaxyz\"",
        "output": "5"
      },
      {
        "input": "s = \"levellevellevellevel\"",
        "output": "75"
      },
      {
        "input": "s = \"noonnoonnoonnoon\"",
        "output": "1"
      },
      {
        "input": "s = \"mississippimississippi\"",
        "output": "49"
      },
      {
        "input": "s = \"xyzxyzxyzxyz\"",
        "output": "1"
      },
      {
        "input": "s = \"abacdfgdcabaxyzzyzyzyzyzx\"",
        "output": "27"
      },
      {
        "input": "s = \"aabbbaabbbaabbbaaa\"",
        "output": "49"
      },
      {
        "input": "s = \"abacadaeafagahagaha\"",
        "output": "21"
      },
      {
        "input": "s = \"noonracecarnoon\"",
        "output": "13"
      },
      {
        "input": "s = \"aabbbaaabbbaaabbbaaabbbaaabbba\"",
        "output": "221"
      },
      {
        "input": "s = \"ababababababababa\"",
        "output": "63"
      },
      {
        "input": "s = \"abacabaabacabaabacaba\"",
        "output": "49"
      },
      {
        "input": "s = \"repel\"",
        "output": "3"
      },
      {
        "input": "s = \"levelnoonlevel\"",
        "output": "25"
      },
      {
        "input": "s = \"rotorlevelmadamracecar\"",
        "output": "35"
      },
      {
        "input": "s = \"noonnoonnoonnoonnoonnoon\"",
        "output": "1"
      },
      {
        "input": "s = \"kayak\"",
        "output": "3"
      },
      {
        "input": "s = \"mnopqrstuvuvwxyzyx\"",
        "output": "15"
      },
      {
        "input": "s = \"madamlevelmadam\"",
        "output": "25"
      },
      {
        "input": "s = \"babcbabcbabcba\"",
        "output": "35"
      },
      {
        "input": "s = \"abacadaeafagaha\"",
        "output": "9"
      },
      {
        "input": "s = \"leveloneleveleleveldoneleveldot\"",
        "output": "55"
      },
      {
        "input": "s = \"xyzzzzyzyzyzx\"",
        "output": "21"
      },
      {
        "input": "s = \"madaminnadam\"",
        "output": "15"
      },
      {
        "input": "s = \"abababababababab\"",
        "output": "63"
      },
      {
        "input": "s = \"racecarabcdeedcbacar\"",
        "output": "21"
      },
      {
        "input": "s = \"noon\"",
        "output": "1"
      },
      {
        "input": "s = \"abcbacbacb\"",
        "output": "5"
      },
      {
        "input": "s = \"ababababababababab\"",
        "output": "81"
      },
      {
        "input": "s = \"deeee\"",
        "output": "3"
      },
      {
        "input": "s = \"leveloneleveltwo\"",
        "output": "25"
      },
      {
        "input": "s = \"abcabcabcabcabcabc\"",
        "output": "1"
      },
      {
        "input": "s = \"xyzbcbzxyxzyzyzyz\"",
        "output": "35"
      },
      {
        "input": "s = \"abcdefggfedcba\"",
        "output": "1"
      },
      {
        "input": "s = \"aaaaabbbbbbaaaa\"",
        "output": "25"
      },
      {
        "input": "s = \"abcdeffedcba\"",
        "output": "1"
      },
      {
        "input": "s = \"ababcbaababcbaababcba\"",
        "output": "25"
      },
      {
        "input": "s = \"babcbabcbabcbabcbabcbabcbabcbabcbabcbabcba\"",
        "output": "399"
      },
      {
        "input": "s = \"ababaababaababa\"",
        "output": "27"
      },
      {
        "input": "s = \"abcbabcbaabcbabcba\"",
        "output": "81"
      },
      {
        "input": "s = \"mmabccbaakak\"",
        "output": "3"
      },
      {
        "input": "s = \"abcdefedcba\"",
        "output": "9"
      },
      {
        "input": "s = \"palindromeemordnilap\"",
        "output": "1"
      },
      {
        "input": "s = \"level\"",
        "output": "3"
      },
      {
        "input": "s = \"racecarlevelracecar\"",
        "output": "49"
      },
      {
        "input": "s = \"levellevellevel\"",
        "output": "25"
      },
      {
        "input": "s = \"aaaaabaaaaabaaaaabaaaaab\"",
        "output": "143"
      },
      {
        "input": "s = \"xyxzyxzyxzyx\"",
        "output": "3"
      },
      {
        "input": "s = \"nunabannun\"",
        "output": "15"
      },
      {
        "input": "s = \"deeeeefeeeed\"",
        "output": "15"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "143"
      },
      {
        "input": "s = \"abababababababababab\"",
        "output": "99"
      },
      {
        "input": "s = \"madamimadamracecar\"",
        "output": "77"
      },
      {
        "input": "s = \"abbbbabbbaaaaaaaabbba\"",
        "output": "49"
      },
      {
        "input": "s = \"radar\"",
        "output": "3"
      },
      {
        "input": "s = \"abababa\"",
        "output": "9"
      },
      {
        "input": "s = \"abacabadabacaba\"",
        "output": "49"
      },
      {
        "input": "s = \"abacabadabacabada\"",
        "output": "63"
      },
      {
        "input": "s = \"bananaananab\"",
        "output": "25"
      },
      {
        "input": "s = \"aabbccddeeefffggg\"",
        "output": "9"
      },
      {
        "input": "s = \"redivider\"",
        "output": "7"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\"",
        "output": "99"
      },
      {
        "input": "s = \"abcabccbaabcabccba\"",
        "output": "1"
      },
      {
        "input": "s = \"mnbvcxzlkjhgfdsapoiuytrewq\"",
        "output": "1"
      },
      {
        "input": "s = \"deedlevel\"",
        "output": "5"
      },
      {
        "input": "s = \"abcbabcba\"",
        "output": "15"
      },
      {
        "input": "s = \"deifiedrotatordeified\"",
        "output": "49"
      },
      {
        "input": "s = \"noonnoonnoonnoonnoon\"",
        "output": "1"
      },
      {
        "input": "s = \"abcbadefgfe\"",
        "output": "25"
      },
      {
        "input": "s = \"anana\"",
        "output": "3"
      },
      {
        "input": "s = \"ababaabababababa\"",
        "output": "55"
      },
      {
        "input": "s = \"abracadabraabracadabra\"",
        "output": "9"
      },
      {
        "input": "s = \"detartrated\"",
        "output": "9"
      },
      {
        "input": "s = \"manamzzamanaplanacanalpanamazzamanaplanacanalpanamazzzzzz\"",
        "output": "529"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyx\"",
        "output": "63"
      },
      {
        "input": "s = \"madamimadam\"",
        "output": "25"
      },
      {
        "input": "s = \"levelonelevelonelevel\"",
        "output": "25"
      },
      {
        "input": "s = \"madamracecaramadam\"",
        "output": "35"
      },
      {
        "input": "s = \"aaabbaaabbaaa\"",
        "output": "21"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "1"
      },
      {
        "input": "s = \"xylophonepiponolyx\"",
        "output": "9"
      },
      {
        "input": "s = \"racecarandracecar\"",
        "output": "49"
      },
      {
        "input": "s = \"aabaaaabaaba\"",
        "output": "25"
      },
      {
        "input": "s = \"racecarannakayak\"",
        "output": "35"
      },
      {
        "input": "s = \"kayakkayakkayakkayak\"",
        "output": "75"
      },
      {
        "input": "s = \"aaaaabbbbbaaaaa\"",
        "output": "27"
      },
      {
        "input": "s = \"mammadmooommom\"",
        "output": "15"
      },
      {
        "input": "s = \"aaaaabbbbbaaaaaabbbbaaaaa\"",
        "output": "75"
      },
      {
        "input": "s = \"racecarracecar\"",
        "output": "49"
      },
      {
        "input": "s = \"noonnoonnoon\"",
        "output": "1"
      },
      {
        "input": "s = \"repaper\"",
        "output": "5"
      },
      {
        "input": "s = \"racecarlevelrotorkayak\"",
        "output": "35"
      },
      {
        "input": "s = \"rotorrotorrotor\"",
        "output": "25"
      },
      {
        "input": "s = \"aaaaabaaabaaaabaaaaabaaaa\"",
        "output": "99"
      },
      {
        "input": "s = \"ababaababab\"",
        "output": "25"
      },
      {
        "input": "s = \"noonhighnoon\"",
        "output": "1"
      },
      {
        "input": "s = \"tacocattacocattaco\"",
        "output": "49"
      },
      {
        "input": "s = \"rotorrotorrotorrotor\"",
        "output": "75"
      },
      {
        "input": "s = \"bananaananananab\"",
        "output": "45"
      },
      {
        "input": "s = \"zzzyzyzyzyzyzyzyzyzyzyzyz\"",
        "output": "121"
      },
      {
        "input": "s = \"deeddeeddeed\"",
        "output": "1"
      },
      {
        "input": "s = \"aaaaaabbbbbaaaa\"",
        "output": "35"
      },
      {
        "input": "s = \"rotorresistor\"",
        "output": "15"
      },
      {
        "input": "s = \"xylophonelevel\"",
        "output": "5"
      },
      {
        "input": "s = \"aaabaaaabaaaaabaaaaaaab\"",
        "output": "77"
      },
      {
        "input": "s = \"aabbccddeeefffgggzzzzzzzzzzzzzzzzzzzz\"",
        "output": "99"
      },
      {
        "input": "s = \"abcdedcbaabcdedcbaabcdedcba\"",
        "output": "81"
      },
      {
        "input": "s = \"civic\"",
        "output": "3"
      },
      {
        "input": "s = \"rotor\"",
        "output": "3"
      },
      {
        "input": "s = \"qwertyuioplkjhgfdsazxcvbnmnbvcxzasdfghjklpoiuytrewq\"",
        "output": "49"
      },
      {
        "input": "s = \"abbaabbbaabba\"",
        "output": "11"
      },
      {
        "input": "s = \"abcdefghihgfedcba\"",
        "output": "15"
      },
      {
        "input": "s = \"tacocattaco\"",
        "output": "7"
      },
      {
        "input": "s = \"repaperrepaperrepaper\"",
        "output": "49"
      },
      {
        "input": "s = \"aabaaaabaa\"",
        "output": "25"
      },
      {
        "input": "s = \"reviled\"",
        "output": "1"
      },
      {
        "input": "s = \"amoreroma\"",
        "output": "7"
      },
      {
        "input": "s = \"aabbccddeeefffggghhhiiiijjjjkkkkllllmmmnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwwxxxxxyyyyyzzzzzzyyyyyxxxwwvvuuttrrqqppoonnmlkkjjiihhggffeeddccbbaa\"",
        "output": "25"
      },
      {
        "input": "s = \"xyzyzyzyzyzyzyzyz\"",
        "output": "63"
      },
      {
        "input": "s = \"xyxzyzyzyzyzyzyx\"",
        "output": "35"
      },
      {
        "input": "s = \"zzzzzzyyyyyxxxwwvvuuttrrqqppoonnmlkkjjiihhggffeeddccbbaa\"",
        "output": "25"
      },
      {
        "input": "s = \"rotorabcdrotor\"",
        "output": "25"
      },
      {
        "input": "s = \"aabbccddeeeffgghhiii\"",
        "output": "9"
      },
      {
        "input": "s = \"abcdedcbabcdedcbabcdedcb\"",
        "output": "135"
      },
      {
        "input": "s = \"aabbccddeeefffggghhhiiiijjjjkkkkllllmmmnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwwxxxxxyyyyyzzzzz\"",
        "output": "25"
      },
      {
        "input": "s = \"abcabcabcabcabc\"",
        "output": "1"
      },
      {
        "input": "s = \"deed\"",
        "output": "1"
      },
      {
        "input": "s = \"aaaaabbbbbbaaaaa\"",
        "output": "25"
      },
      {
        "input": "s = \"levelwasracecar\"",
        "output": "35"
      },
      {
        "input": "s = \"racecarabcdeedcba\"",
        "output": "9"
      }
    ]
  },
  {
    "id": 2813,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Greedy",
      "Array",
      "Hash Table",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed 2D integer array items of length n and an integer k.\nitems[i] = [profiti, categoryi], where profiti and categoryi denote the profit and category of the ith item respectively.\nLet's define the elegance of a subsequence of items as total_profit + distinct_categories2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence.\nYour task is to find the maximum elegance from all subsequences of size k in items.\nReturn an integer denoting the maximum elegance of a subsequence of items with size exactly k.\nNote: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\n\u00a0\nExample 1:\n\nInput: items = [[3,2],[5,1],[10,1]], k = 2\nOutput: 17\nExplanation: In this example, we have to select a subsequence of size 2.\nWe can select items[0] = [3,2] and items[2] = [10,1].\nThe total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].\nHence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance. \n\nExample 2:\n\nInput: items = [[3,1],[3,1],[2,2],[5,3]], k = 3\nOutput: 19\nExplanation: In this example, we have to select a subsequence of size 3. \nWe can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. \nThe total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. \nHence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance.\nExample 3:\n\nInput: items = [[1,1],[2,1],[3,1]], k = 3\nOutput: 7\nExplanation: In this example, we have to select a subsequence of size 3. \nWe should select all the items. \nThe total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. \nHence, the maximum elegance is 6 + 12 = 7.  \n\u00a0\nConstraints:\n\n1 <= items.length == n <= 105\nitems[i].length == 2\nitems[i][0] == profiti\nitems[i][1] == categoryi\n1 <= profiti <= 109\n1 <= categoryi <= n \n1 <= k <= n\n\n",
    "starterCode": "class Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "items = [[10,1],[9,1],[8,1],[7,1],[6,1]], k = 2",
        "output": "20"
      },
      {
        "input": "items = [[9,1],[7,2],[5,3],[3,4],[1,5]], k = 4",
        "output": "40"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,4],[50,5]], k = 3",
        "output": "129"
      },
      {
        "input": "items = [[5,1],[6,2],[7,3],[8,4]], k = 4",
        "output": "42"
      },
      {
        "input": "items = [[1,100000],[2,99999],[3,99998],[4,99997],[5,99996]], k = 4",
        "output": "30"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,4],[50,5]], k = 5",
        "output": "175"
      },
      {
        "input": "items = [[100,1],[200,2],[300,3],[400,4],[500,5]], k = 5",
        "output": "1525"
      },
      {
        "input": "items = [[5,1],[7,2],[3,2],[8,3],[6,3]], k = 3",
        "output": "29"
      },
      {
        "input": "items = [[1,1],[1,2],[1,3],[1,4],[1,5]], k = 3",
        "output": "12"
      },
      {
        "input": "items = [[5,1],[5,1],[5,1],[5,2],[5,2],[5,3]], k = 4",
        "output": "29"
      },
      {
        "input": "items = [[1000000000,1],[1000000000,2],[1000000000,3],[1000000000,4],[1000000000,5]], k = 5",
        "output": "5000000025"
      },
      {
        "input": "items = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], k = 3",
        "output": "33"
      },
      {
        "input": "items = [[3,2],[5,1],[10,1]], k = 2",
        "output": "17"
      },
      {
        "input": "items = [[1,1],[2,1],[3,1]], k = 3",
        "output": "7"
      },
      {
        "input": "items = [[100,1],[200,2],[300,3],[400,4],[500,5]], k = 4",
        "output": "1416"
      },
      {
        "input": "items = [[5,5],[4,4],[3,3],[2,2],[1,1]], k = 3",
        "output": "21"
      },
      {
        "input": "items = [[10,5],[10,5],[10,5],[10,5],[10,5],[10,6],[10,7],[10,8],[10,9]], k = 5",
        "output": "75"
      },
      {
        "input": "items = [[1,10],[2,10],[3,10],[4,10],[5,10]], k = 2",
        "output": "10"
      },
      {
        "input": "items = [[1,100000],[2,100000],[3,100000],[4,100000],[5,100000]], k = 3",
        "output": "13"
      },
      {
        "input": "items = [[3,1],[3,1],[2,2],[5,3]], k = 3",
        "output": "19"
      },
      {
        "input": "items = [[5,5],[5,5],[5,5],[5,5]], k = 2",
        "output": "11"
      },
      {
        "input": "items = [[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,3],[1,3]], k = 3",
        "output": "12"
      },
      {
        "input": "items = [[100,1],[200,2],[300,3],[400,4],[500,5],[600,6],[700,7],[800,8],[900,9],[1000,10]], k = 5",
        "output": "4025"
      },
      {
        "input": "items = [[100,1],[90,1],[80,2],[70,2],[60,3],[50,3],[40,3],[30,4],[20,4],[10,4]], k = 3",
        "output": "274"
      },
      {
        "input": "items = [[100,1],[90,1],[80,1],[70,1],[60,1],[50,2],[40,2],[30,2],[20,2],[10,2]], k = 5",
        "output": "401"
      },
      {
        "input": "items = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], k = 5",
        "output": "65"
      },
      {
        "input": "items = [[100,10],[90,9],[80,8],[70,7],[60,6],[50,5],[40,4],[30,3],[20,2],[10,1],[1,10],[2,9],[3,8],[4,7],[5,6]], k = 8",
        "output": "584"
      },
      {
        "input": "items = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15]], k = 5",
        "output": "30"
      },
      {
        "input": "items = [[1000000000,1],[2000000000,2],[3000000000,3],[4000000000,4],[5000000000,5],[6000000000,6],[7000000000,7],[8000000000,8],[9000000000,9],[10000000000,10]], k = 5",
        "output": "40000000025"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10],[10,1],[20,2],[30,3],[40,4]], k = 10",
        "output": "661"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10]], k = 10",
        "output": "650"
      },
      {
        "input": "items = [[9,1],[8,1],[7,1],[6,1],[5,1],[4,2],[3,2],[2,2],[1,2],[1,3],[2,3],[3,3],[4,3],[5,3],[6,3],[7,3],[8,3],[9,3],[10,3],[10,4]], k = 10",
        "output": "94"
      },
      {
        "input": "items = [[10,1],[9,2],[8,3],[7,4],[6,5],[5,6],[4,7],[3,8],[2,9],[1,10],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]], k = 15",
        "output": "160"
      },
      {
        "input": "items = [[5,3],[10,2],[15,1],[20,3],[25,2],[30,1],[35,4]], k = 4",
        "output": "126"
      },
      {
        "input": "items = [[1000000000,1],[1000000000,2],[1000000000,1],[1000000000,2],[1000000000,1],[1000000000,2],[1000000000,1],[1000000000,2],[1000000000,1],[1000000000,2]], k = 5",
        "output": "5000000004"
      },
      {
        "input": "items = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[1,1],[2,2],[3,3],[4,4]], k = 7",
        "output": "98"
      },
      {
        "input": "items = [[100,1],[200,2],[300,1],[400,2],[500,3],[600,3],[700,4],[800,4],[900,5]], k = 6",
        "output": "3916"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10],[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10]], k = 15",
        "output": "1074"
      },
      {
        "input": "items = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1]], k = 10",
        "output": "155"
      },
      {
        "input": "items = [[10,1],[9,2],[8,3],[7,4],[6,5],[5,1],[4,2],[3,3],[2,4],[1,5]], k = 5",
        "output": "65"
      },
      {
        "input": "items = [[1000000000,1],[900000000,1],[800000000,2],[700000000,2],[600000000,3],[500000000,3],[400000000,3],[300000000,4],[200000000,4],[100000000,4]], k = 3",
        "output": "2700000004"
      },
      {
        "input": "items = [[10,1],[9,1],[8,1],[7,1],[6,1],[5,2],[4,2],[3,2],[2,2],[1,2]], k = 5",
        "output": "43"
      },
      {
        "input": "items = [[5,1],[5,1],[5,1],[5,1],[5,1],[5,2],[5,2],[5,2],[5,2],[5,2],[5,3],[5,3],[5,3],[5,3],[5,3]], k = 10",
        "output": "59"
      },
      {
        "input": "items = [[50,1],[40,1],[30,1],[20,1],[10,1],[1,2],[2,2],[3,2],[4,2],[5,2],[50,3],[40,3],[30,3],[20,3],[10,3]], k = 5",
        "output": "214"
      },
      {
        "input": "items = [[10,1],[10,1],[10,1],[10,2],[10,2],[10,2],[10,3],[10,3],[10,3],[10,4]], k = 4",
        "output": "56"
      },
      {
        "input": "items = [[9,1],[8,2],[7,3],[6,4],[5,5],[4,1],[3,2],[2,3],[1,4],[9,5]], k = 7",
        "output": "73"
      },
      {
        "input": "items = [[1000000000,1],[1000000000,2],[1000000000,3],[1000000000,4],[1000000000,5],[1000000000,6],[1000000000,7],[1000000000,8],[1000000000,9],[1000000000,10]], k = 5",
        "output": "5000000025"
      },
      {
        "input": "items = [[50,1],[40,2],[30,3],[20,4],[10,5],[5,6],[4,7],[3,8],[2,9],[1,10]], k = 5",
        "output": "175"
      },
      {
        "input": "items = [[5,1],[7,2],[9,3],[10,2],[12,1],[15,4],[18,5],[20,1]], k = 5",
        "output": "97"
      },
      {
        "input": "items = [[5,1],[5,1],[5,1],[5,1],[5,1],[10,2],[10,2],[10,2],[10,2],[10,2],[15,3],[15,3],[15,3],[15,3],[15,3]], k = 5",
        "output": "76"
      },
      {
        "input": "items = [[5,1],[10,1],[15,1],[20,1],[25,1],[30,1],[35,1],[40,1],[45,1],[50,1],[5,2],[10,2],[15,2],[20,2],[25,2],[30,2],[35,2],[40,2],[45,2],[50,2]], k = 10",
        "output": "404"
      },
      {
        "input": "items = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[10,1],[10,2],[10,3],[10,4],[10,5]], k = 10",
        "output": "155"
      },
      {
        "input": "items = [[10,1],[20,1],[30,1],[40,1],[50,1],[60,1],[70,1],[80,1],[90,1],[100,1],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[10,2]], k = 15",
        "output": "594"
      },
      {
        "input": "items = [[100,1],[200,2],[300,3],[400,4],[500,5],[600,1],[700,2],[800,3],[900,4],[1000,5]], k = 7",
        "output": "4925"
      },
      {
        "input": "items = [[100,1],[90,1],[80,1],[70,1],[60,1],[50,2],[40,2],[30,2],[20,2],[10,2],[1,3],[2,3],[3,3],[4,3],[5,3]], k = 6",
        "output": "454"
      },
      {
        "input": "items = [[5,10],[15,20],[25,30],[35,40],[45,50],[55,10],[65,20],[75,30],[85,40],[95,50]], k = 6",
        "output": "445"
      },
      {
        "input": "items = [[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9],[10,10]], k = 3",
        "output": "39"
      },
      {
        "input": "items = [[100,1],[90,2],[80,3],[70,4],[60,5],[50,6],[40,7],[30,8],[20,9],[10,10]], k = 7",
        "output": "539"
      },
      {
        "input": "items = [[1,1],[2,1],[3,1],[4,2],[5,2],[6,2],[7,3],[8,3],[9,3],[10,4],[11,4],[12,4],[13,5],[14,5],[15,5]], k = 7",
        "output": "97"
      },
      {
        "input": "items = [[1,1],[2,1],[3,1],[4,2],[5,2],[6,2],[7,3],[8,3],[9,3],[10,4],[11,4],[12,4],[13,5],[14,5],[15,5],[16,6],[17,6],[18,6],[19,7],[20,7],[21,7]], k = 10",
        "output": "189"
      },
      {
        "input": "items = [[10,1],[20,1],[30,1],[40,2],[50,2],[60,2],[70,3],[80,3],[90,3],[100,4]], k = 7",
        "output": "499"
      },
      {
        "input": "items = [[1,1],[2,1],[3,1],[4,2],[5,2],[6,2],[7,3],[8,3],[9,3],[10,4]], k = 4",
        "output": "44"
      },
      {
        "input": "items = [[5,1],[4,1],[3,1],[2,1],[1,1],[10,2],[9,2],[8,2],[7,2],[6,2]], k = 5",
        "output": "43"
      },
      {
        "input": "items = [[1,1],[1,1],[2,2],[2,2],[3,3],[3,3],[4,4],[4,4],[5,5],[5,5]], k = 6",
        "output": "45"
      },
      {
        "input": "items = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]], k = 15",
        "output": "345"
      },
      {
        "input": "items = [[10,1],[9,2],[8,3],[7,4],[6,5],[5,6],[4,7],[3,8],[2,9],[1,10],[10,1],[9,2],[8,3],[7,4],[6,5]], k = 8",
        "output": "116"
      },
      {
        "input": "items = [[500,1],[400,1],[300,1],[200,1],[100,1],[500,2],[400,2],[300,2],[200,2],[100,2],[500,3],[400,3],[300,3],[200,3],[100,3]], k = 8",
        "output": "3309"
      },
      {
        "input": "items = [[1,1],[1,1],[1,1],[1,1],[2,2],[2,2],[2,2],[2,2],[3,3],[3,3]], k = 3",
        "output": "15"
      },
      {
        "input": "items = [[10,1],[20,1],[30,2],[40,2],[50,3],[60,3],[70,4],[80,4],[90,5],[100,5],[110,6],[120,6],[130,7],[140,7],[150,8],[160,8],[170,9],[180,9],[190,10],[200,10]], k = 15",
        "output": "2014"
      },
      {
        "input": "items = [[100,1],[90,1],[80,1],[70,1],[60,1],[50,2],[40,2],[30,2],[20,2],[10,2]], k = 4",
        "output": "341"
      },
      {
        "input": "items = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]], k = 5",
        "output": "30"
      },
      {
        "input": "items = [[5,1],[5,1],[5,1],[5,1],[5,1],[5,2],[5,2],[5,2],[5,2],[5,2]], k = 3",
        "output": "19"
      },
      {
        "input": "items = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]], k = 10",
        "output": "110"
      },
      {
        "input": "items = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1],[11,10],[12,9],[13,8],[14,7],[15,6],[16,5],[17,4],[18,3],[19,2],[20,1]], k = 15",
        "output": "295"
      },
      {
        "input": "items = [[3,1],[5,2],[7,3],[9,4],[11,5],[13,1],[15,2],[17,3],[19,4],[21,5]], k = 5",
        "output": "110"
      },
      {
        "input": "items = [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]], k = 10",
        "output": "11"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10]], k = 5",
        "output": "425"
      },
      {
        "input": "items = [[100,1],[90,2],[80,3],[70,4],[60,5],[50,6],[40,7],[30,8],[20,9],[10,10]], k = 3",
        "output": "279"
      },
      {
        "input": "items = [[100,1],[90,1],[80,1],[70,1],[60,1],[50,1],[40,1],[30,1],[20,1],[10,1],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[10,2]], k = 15",
        "output": "594"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,1],[50,2],[60,3],[70,4],[80,5],[90,4],[100,5],[110,6],[120,7],[130,8],[140,9],[150,10]], k = 8",
        "output": "969"
      },
      {
        "input": "items = [[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,2],[1,2]], k = 3",
        "output": "7"
      },
      {
        "input": "items = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[1,1],[2,2],[3,3],[4,4],[5,5]], k = 10",
        "output": "155"
      },
      {
        "input": "items = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,9],[2,10]], k = 10",
        "output": "120"
      },
      {
        "input": "items = [[1000000000,1],[999999999,2],[888888888,3],[777777777,4],[666666666,5],[555555555,6],[444444444,7],[333333333,8],[222222222,9],[111111111,10]], k = 5",
        "output": "4333333355"
      },
      {
        "input": "items = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]], k = 10",
        "output": "205"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10],[10,1],[20,2],[30,3],[40,4],[50,5]], k = 10",
        "output": "674"
      },
      {
        "input": "items = [[10,1],[9,1],[8,1],[7,1],[6,1],[5,1],[4,1],[3,1],[2,1],[1,1],[1,2],[2,2],[3,2],[4,2],[5,2]], k = 8",
        "output": "58"
      },
      {
        "input": "items = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,2],[7,2],[8,2],[9,2],[10,2]], k = 6",
        "output": "49"
      },
      {
        "input": "items = [[90,1],[80,2],[70,3],[60,4],[50,5],[40,6],[30,7],[20,8],[10,9]], k = 5",
        "output": "375"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,1],[70,2],[80,3],[90,4],[100,5],[110,6],[120,7],[130,8],[140,9],[150,10],[160,11],[170,12],[180,13],[190,14],[200,15]], k = 10",
        "output": "1650"
      },
      {
        "input": "items = [[1000000000,100000],[900000000,100000],[800000000,100000],[700000000,100000],[600000000,100000]], k = 3",
        "output": "2700000001"
      },
      {
        "input": "items = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[13,1],[14,1],[15,1]], k = 10",
        "output": "106"
      },
      {
        "input": "items = [[10,1],[9,1],[8,2],[7,2],[6,3],[5,3],[4,3],[3,4],[2,4],[1,4],[100,5],[99,5],[98,5],[97,5],[96,5]], k = 10",
        "output": "551"
      },
      {
        "input": "items = [[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[5,9],[5,10]], k = 5",
        "output": "50"
      },
      {
        "input": "items = [[5,1],[5,1],[5,2],[5,2],[5,3],[5,3],[5,4],[5,4],[5,5],[5,5]], k = 5",
        "output": "50"
      },
      {
        "input": "items = [[1000000000,1],[1000000000,2],[1000000000,3],[1000000000,4],[1000000000,5],[1,6],[1,7],[1,8],[1,9],[1,10]], k = 7",
        "output": "5000000051"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10]], k = 7",
        "output": "539"
      },
      {
        "input": "items = [[100,1],[200,2],[300,3],[400,4],[500,5],[100,1],[200,2],[300,3],[400,4],[500,5]], k = 5",
        "output": "2109"
      },
      {
        "input": "items = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10],[110,1],[120,2],[130,3],[140,4],[150,5]], k = 12",
        "output": "1240"
      },
      {
        "input": "items = [[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[5,9],[5,10]], k = 3",
        "output": "24"
      },
      {
        "input": "items = [[10,1],[20,1],[30,1],[40,1],[50,1],[60,2],[70,2],[80,2],[90,2],[100,2],[110,3],[120,3],[130,3],[140,3],[150,3]], k = 10",
        "output": "1054"
      },
      {
        "input": "items = [[5,1],[4,2],[3,3],[2,4],[1,5],[10,6],[9,7],[8,8],[7,9],[6,10],[5,1],[4,2],[3,3],[2,4],[1,5]], k = 5",
        "output": "65"
      },
      {
        "input": "items = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,2],[7,2],[8,2],[9,2],[10,2]], k = 4",
        "output": "36"
      },
      {
        "input": "items = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1],[1,10],[2,9],[3,8],[4,7],[5,6]], k = 10",
        "output": "155"
      },
      {
        "input": "items = [[10,1],[20,1],[30,1],[40,1],[50,1],[60,2],[70,2],[80,2],[90,2],[100,2]], k = 5",
        "output": "401"
      },
      {
        "input": "items = [[1000000000,1],[500000000,1],[250000000,1],[125000000,1],[62500000,1],[31250000,2],[15625000,2],[7812500,2],[3906250,2],[1953125,2]], k = 4",
        "output": "1875000001"
      },
      {
        "input": "items = [[1000000000,1],[900000000,2],[800000000,3],[700000000,4],[600000000,5],[500000000,6],[400000000,7],[300000000,8],[200000000,9],[100000000,10]], k = 5",
        "output": "4000000025"
      },
      {
        "input": "items = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10],[10,10],[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9],[9,9],[10,9]], k = 10",
        "output": "84"
      },
      {
        "input": "items = [[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[5,9],[5,10],[5,11],[5,12],[5,13],[5,14],[5,15]], k = 7",
        "output": "84"
      },
      {
        "input": "items = [[100,1],[99,2],[98,3],[97,4],[96,5],[95,1],[94,2],[93,3],[92,4],[91,5]], k = 3",
        "output": "306"
      },
      {
        "input": "items = [[1,1],[2,1],[3,2],[4,2],[5,3],[6,3],[7,4],[8,4],[9,5],[10,5],[11,6],[12,6],[13,7],[14,7],[15,8],[16,8],[17,9],[18,9],[19,10],[20,10]], k = 5",
        "output": "105"
      },
      {
        "input": "items = [[10,1],[20,1],[30,2],[40,2],[50,3],[60,3],[70,4],[80,4],[90,5],[100,5],[110,6],[120,6],[130,7],[140,7],[150,8],[160,8]], k = 8",
        "output": "1016"
      }
    ]
  },
  {
    "id": 829,
    "difficulty": "Hard",
    "tags": [
      "Math",
      "Enumeration"
    ],
    "problemDescription": "Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.\n\u00a0\nExample 1:\n\nInput: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\n\nExample 2:\n\nInput: n = 9\nOutput: 3\nExplanation: 9 = 4 + 5 = 2 + 3 + 4\n\nExample 3:\n\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\n\n\u00a0\nConstraints:\n\n1 <= n <= 109\n\n",
    "starterCode": "class Solution:\n    def consecutiveNumbersSum(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 100",
        "output": "3"
      },
      {
        "input": "n = 15",
        "output": "4"
      },
      {
        "input": "n = 9",
        "output": "3"
      },
      {
        "input": "n = 1000000",
        "output": "7"
      },
      {
        "input": "n = 25",
        "output": "3"
      },
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 1000000000",
        "output": "10"
      },
      {
        "input": "n = 1000",
        "output": "4"
      },
      {
        "input": "n = 10",
        "output": "2"
      },
      {
        "input": "n = 5",
        "output": "2"
      },
      {
        "input": "n = 3",
        "output": "2"
      },
      {
        "input": "n = 45",
        "output": "6"
      },
      {
        "input": "n = 210",
        "output": "8"
      },
      {
        "input": "n = 897",
        "output": "8"
      },
      {
        "input": "n = 999999999",
        "output": "20"
      },
      {
        "input": "n = 49",
        "output": "3"
      },
      {
        "input": "n = 12345",
        "output": "8"
      },
      {
        "input": "n = 67890",
        "output": "16"
      },
      {
        "input": "n = 2147483647",
        "output": "2"
      },
      {
        "input": "n = 76543210",
        "output": "8"
      },
      {
        "input": "n = 56789",
        "output": "4"
      },
      {
        "input": "n = 89123456",
        "output": "4"
      },
      {
        "input": "n = 2019",
        "output": "4"
      },
      {
        "input": "n = 6789",
        "output": "8"
      },
      {
        "input": "n = 10000",
        "output": "5"
      },
      {
        "input": "n = 43210987",
        "output": "8"
      },
      {
        "input": "n = 1001",
        "output": "8"
      },
      {
        "input": "n = 2",
        "output": "1"
      },
      {
        "input": "n = 9876543210987654321",
        "output": "Execution timed out"
      },
      {
        "input": "n = 200000000",
        "output": "9"
      },
      {
        "input": "n = 50000000",
        "output": "9"
      },
      {
        "input": "n = 1024",
        "output": "1"
      },
      {
        "input": "n = 101",
        "output": "2"
      },
      {
        "input": "n = 8",
        "output": "1"
      },
      {
        "input": "n = 10000000",
        "output": "8"
      },
      {
        "input": "n = 56789123",
        "output": "2"
      },
      {
        "input": "n = 845123",
        "output": "4"
      },
      {
        "input": "n = 1048576",
        "output": "1"
      },
      {
        "input": "n = 89",
        "output": "2"
      },
      {
        "input": "n = 89754321",
        "output": "4"
      },
      {
        "input": "n = 8472187",
        "output": "4"
      },
      {
        "input": "n = 84521",
        "output": "2"
      },
      {
        "input": "n = 13",
        "output": "2"
      },
      {
        "input": "n = 150",
        "output": "6"
      },
      {
        "input": "n = 987654321",
        "output": "18"
      },
      {
        "input": "n = 123456789",
        "output": "12"
      },
      {
        "input": "n = 1234567",
        "output": "4"
      },
      {
        "input": "n = 121",
        "output": "3"
      },
      {
        "input": "n = 999999",
        "output": "64"
      },
      {
        "input": "n = 123456",
        "output": "4"
      },
      {
        "input": "n = 500",
        "output": "4"
      },
      {
        "input": "n = 54321",
        "output": "8"
      },
      {
        "input": "n = 100000000",
        "output": "9"
      },
      {
        "input": "n = 1500",
        "output": "8"
      }
    ]
  },
  {
    "id": 3008,
    "difficulty": "Hard",
    "tags": [
      "Two Pointers",
      "String",
      "Binary Search",
      "String Matching",
      "Hash Function",
      "Rolling Hash"
    ],
    "problemDescription": "You are given a 0-indexed string s, a string a, a string b, and an integer k.\nAn index i is beautiful if:\n\n0 <= i <= s.length - a.length\ns[i..(i + a.length - 1)] == a\nThere exists an index j such that:\n\t\n0 <= j <= s.length - b.length\ns[j..(j + b.length - 1)] == b\n|j - i| <= k\n\n\n\nReturn the array that contains beautiful indices in sorted order from smallest to largest.\n\u00a0\nExample 1:\n\nInput: s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15\nOutput: [16,33]\nExplanation: There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result.\n\nExample 2:\n\nInput: s = \"abcd\", a = \"a\", b = \"a\", k = 4\nOutput: [0]\nExplanation: There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result.\n\n\u00a0\nConstraints:\n\n1 <= k <= s.length <= 5 * 105\n1 <= a.length, b.length <= 5 * 105\ns, a, and b contain only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "s = \"beautifulbeautifulbeautiful\", a = \"ful\", b = \"uti\", k = 5",
        "output": "[6, 15, 24]"
      },
      {
        "input": "s = \"abcabcabcabcabc\", a = \"abc\", b = \"bca\", k = 3",
        "output": "[0, 3, 6, 9, 12]"
      },
      {
        "input": "s = \"mississippi\", a = \"issi\", b = \"ippi\", k = 4",
        "output": "[4]"
      },
      {
        "input": "s = \"abcabcabc\", a = \"abc\", b = \"cab\", k = 3",
        "output": "[0, 3, 6]"
      },
      {
        "input": "s = \"abcabcabc\", a = \"abc\", b = \"cab\", k = 2",
        "output": "[0, 3, 6]"
      },
      {
        "input": "s = \"aaaaaaa\", a = \"aa\", b = \"aa\", k = 2",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "s = \"beautifuldayinbeautifultown\", a = \"day\", b = \"town\", k = 10",
        "output": "[]"
      },
      {
        "input": "s = \"hellohellohello\", a = \"he\", b = \"lo\", k = 2",
        "output": "[5, 10]"
      },
      {
        "input": "s = \"abcd\", a = \"a\", b = \"a\", k = 4",
        "output": "[0]"
      },
      {
        "input": "s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15",
        "output": "[16, 33]"
      },
      {
        "input": "s = \"hellobeautifulworld\", a = \"bea\", b = \"ful\", k = 5",
        "output": "[]"
      },
      {
        "input": "s = \"ababababa\", a = \"aba\", b = \"bab\", k = 2",
        "output": "[0, 2, 4, 6]"
      },
      {
        "input": "s = \"hellohellohello\", a = \"he\", b = \"lo\", k = 5",
        "output": "[0, 5, 10]"
      },
      {
        "input": "s = \"bananaananabananaba\", a = \"ana\", b = \"nana\", k = 3",
        "output": "[1, 3, 6, 8, 12, 14]"
      },
      {
        "input": "s = \"babababababababababa\", a = \"aba\", b = \"bab\", k = 2",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17]"
      },
      {
        "input": "s = \"sequenceofcharacters\", a = \"que\", b = \"nce\", k = 4",
        "output": "[2]"
      },
      {
        "input": "s = \"abababababab\", a = \"aba\", b = \"bab\", k = 2",
        "output": "[0, 2, 4, 6, 8]"
      },
      {
        "input": "s = \"mississippimississippi\", a = \"issi\", b = \"ippi\", k = 6",
        "output": "[1, 4, 12, 15]"
      },
      {
        "input": "s = \"mississippi\", a = \"issi\", b = \"issip\", k = 5",
        "output": "[1, 4]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzz\", a = \"zzz\", b = \"zzz\", k = 3",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
      },
      {
        "input": "s = \"qwertyuiopqwertyuiop\", a = \"qwerty\", b = \"uiop\", k = 4",
        "output": "[10]"
      },
      {
        "input": "s = \"xyxxyxyxyxyxyxyxyx\", a = \"xy\", b = \"yx\", k = 4",
        "output": "[0, 3, 5, 7, 9, 11, 13, 15]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzz\", a = \"zzz\", b = \"zzzz\", k = 5",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefgabcdefgabcdefg\", a = \"abc\", b = \"def\", k = 12",
        "output": "[0, 7, 14, 21, 28]"
      },
      {
        "input": "s = \"repeatedrepeatedrepeated\", a = \"pea\", b = \"eat\", k = 6",
        "output": "[2, 10, 18]"
      },
      {
        "input": "s = \"ababababababababab\", a = \"aba\", b = \"bab\", k = 1",
        "output": "[0, 2, 4, 6, 8, 10, 12, 14]"
      },
      {
        "input": "s = \"qwertyuiopqwertyuiopqwertyuiop\", a = \"qwerty\", b = \"uiop\", k = 15",
        "output": "[0, 10, 20]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", a = \"zzz\", b = \"zzz\", k = 250000",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm\", a = \"erty\", b = \"ghjk\", k = 10",
        "output": "[]"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghij\", a = \"def\", b = \"jabcdefghi\", k = 12",
        "output": "[3, 13, 23]"
      },
      {
        "input": "s = \"bananaananabayana\", a = \"ana\", b = \"anaba\", k = 6",
        "output": "[3, 6, 8, 14]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", a = \"mnop\", b = \"qrst\", k = 10",
        "output": "[]"
      },
      {
        "input": "s = \"longstringwithrepeatedpatternsandpatterns\", a = \"pattern\", b = \"patterns\", k = 10",
        "output": "[22, 33]"
      },
      {
        "input": "s = \"mississippi\", a = \"iss\", b = \"sis\", k = 4",
        "output": "[1, 4]"
      },
      {
        "input": "s = \"bananaananabananabanana\", a = \"ana\", b = \"anana\", k = 5",
        "output": "[1, 3, 6, 8, 12, 14, 18, 20]"
      },
      {
        "input": "s = \"qwertyuiopqwertyuiop\", a = \"rty\", b = \"tyu\", k = 6",
        "output": "[3, 13]"
      },
      {
        "input": "s = \"xyzyzyzyzyzyzyz\", a = \"zyz\", b = \"yzy\", k = 4",
        "output": "[2, 4, 6, 8, 10, 12]"
      },
      {
        "input": "s = \"thisisaverylongstringwithvariouswords\", a = \"word\", b = \"words\", k = 20",
        "output": "[32]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzz\", a = \"zzz\", b = \"zzz\", k = 1",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\", a = \"xyxy\", b = \"yxyx\", k = 6",
        "output": "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]"
      },
      {
        "input": "s = \"xyzzxyzzxyzzxyzz\", a = \"zz\", b = \"xy\", k = 4",
        "output": "[2, 6, 10, 14]"
      },
      {
        "input": "s = \"abababababababa\", a = \"aba\", b = \"bab\", k = 5",
        "output": "[0, 2, 4, 6, 8, 10, 12]"
      },
      {
        "input": "s = \"abcdabcdabcdabcd\", a = \"abcd\", b = \"dcba\", k = 8",
        "output": "[]"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmqwertyuiop\", a = \"asdf\", b = \"ghjk\", k = 10",
        "output": "[10]"
      },
      {
        "input": "s = \"lkjsdhflksjdhflksjdhflksjdhf\", a = \"ksj\", b = \"jdh\", k = 10",
        "output": "[8, 15, 22]"
      },
      {
        "input": "s = \"thisisaverylongstringwithmultiplesubstrings\", a = \"string\", b = \"multiplesubstrings\", k = 20",
        "output": "[15, 36]"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghij\", a = \"ghi\", b = \"def\", k = 3",
        "output": "[6, 16, 26]"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababab\", a = \"abab\", b = \"baba\", k = 5",
        "output": "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48]"
      },
      {
        "input": "s = \"qwertyuiopqwertyuiopqwertyuiop\", a = \"qwe\", b = \"rty\", k = 5",
        "output": "[0, 10, 20]"
      },
      {
        "input": "s = \"mississippi\", a = \"issi\", b = \"ippi\", k = 5",
        "output": "[4]"
      },
      {
        "input": "s = \"bananaananabananana\", a = \"ana\", b = \"nana\", k = 7",
        "output": "[1, 3, 6, 8, 12, 14, 16]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", a = \"abc\", b = \"xyz\", k = 20",
        "output": "[]"
      },
      {
        "input": "s = \"hellohellohellohello\", a = \"llo\", b = \"hel\", k = 7",
        "output": "[2, 7, 12, 17]"
      },
      {
        "input": "s = \"bananaananabananabanana\", a = \"ana\", b = \"nan\", k = 5",
        "output": "[1, 3, 6, 8, 12, 14, 18, 20]"
      },
      {
        "input": "s = \"repeatedrepeatedrepeated\", a = \"repeated\", b = \"atedrepe\", k = 9",
        "output": "[0, 8, 16]"
      },
      {
        "input": "s = \"mississippi\", a = \"iss\", b = \"sip\", k = 5",
        "output": "[1, 4]"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijj\", a = \"abcd\", b = \"bcde\", k = 4",
        "output": "[]"
      },
      {
        "input": "s = \"mississippi\", a = \"iss\", b = \"sis\", k = 2",
        "output": "[1, 4]"
      },
      {
        "input": "s = \"patternpatternpatternpattern\", a = \"pattern\", b = \"ternpat\", k = 15",
        "output": "[0, 7, 14, 21]"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", a = \"abc\", b = \"def\", k = 10",
        "output": "[0, 10]"
      },
      {
        "input": "s = \"mississippiississipi\", a = \"iss\", b = \"issi\", k = 4",
        "output": "[1, 4, 11, 14]"
      },
      {
        "input": "s = \"abacabadabacaba\", a = \"aba\", b = \"aca\", k = 8",
        "output": "[0, 4, 8, 12]"
      },
      {
        "input": "s = \"ababababababababab\", a = \"aba\", b = \"bab\", k = 6",
        "output": "[0, 2, 4, 6, 8, 10, 12, 14]"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyz\", a = \"xyz\", b = \"zyx\", k = 5",
        "output": "[]"
      },
      {
        "input": "s = \"ababababababababab\", a = \"aba\", b = \"bab\", k = 5",
        "output": "[0, 2, 4, 6, 8, 10, 12, 14]"
      },
      {
        "input": "s = \"bananaananabanananananabanana\", a = \"ana\", b = \"nana\", k = 8",
        "output": "[1, 3, 6, 8, 12, 14, 16, 18, 20, 24, 26]"
      },
      {
        "input": "s = \"overlappingoverlapping\", a = \"over\", b = \"lap\", k = 5",
        "output": "[0, 11]"
      },
      {
        "input": "s = \"banana\", a = \"ana\", b = \"nan\", k = 2",
        "output": "[1, 3]"
      },
      {
        "input": "s = \"longstringwithsubstring\", a = \"with\", b = \"subs\", k = 10",
        "output": "[10]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", a = \"xyz\", b = \"uvw\", k = 3",
        "output": "[23]"
      },
      {
        "input": "s = \"mississippi\", a = \"iss\", b = \"issi\", k = 3",
        "output": "[1, 4]"
      },
      {
        "input": "s = \"aaaaabbbbbbbcccccc\", a = \"bbbb\", b = \"cccc\", k = 6",
        "output": "[6, 7, 8]"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", a = \"efgh\", b = \"ghij\", k = 5",
        "output": "[4, 14]"
      },
      {
        "input": "s = \"repeatedpatternrepeatedpattern\", a = \"repe\", b = \"atte\", k = 8",
        "output": "[15]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\", a = \"mnopqr\", b = \"ghijkl\", k = 15",
        "output": "[12, 38]"
      },
      {
        "input": "s = \"abracadabraabracadabra\", a = \"abra\", b = \"cad\", k = 5",
        "output": "[0, 7, 11, 18]"
      },
      {
        "input": "s = \"foobarfoobarfoobar\", a = \"foo\", b = \"bar\", k = 6",
        "output": "[0, 6, 12]"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", a = \"def\", b = \"xyz\", k = 15",
        "output": "[]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", a = \"zz\", b = \"zz\", k = 1",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]"
      },
      {
        "input": "s = \"hellohellohellohello\", a = \"hel\", b = \"ell\", k = 4",
        "output": "[0, 5, 10, 15]"
      },
      {
        "input": "s = \"complexstringwithmultipleoverlaps\", a = \"over\", b = \"overlap\", k = 12",
        "output": "[25]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\", a = \"zzz\", b = \"zzzz\", k = 3",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]"
      },
      {
        "input": "s = \"abracadabraabracadabra\", a = \"cad\", b = \"bra\", k = 8",
        "output": "[4, 15]"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxy\", a = \"xyx\", b = \"yxy\", k = 3",
        "output": "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", a = \"def\", b = \"ghi\", k = 8",
        "output": "[3, 13]"
      },
      {
        "input": "s = \"bananaananabanana\", a = \"ana\", b = \"naa\", k = 7",
        "output": "[1, 3, 6, 8]"
      },
      {
        "input": "s = \"racecaracecaracecaracecar\", a = \"ace\", b = \"cec\", k = 4",
        "output": "[1, 7, 13, 19]"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm\", a = \"qwerty\", b = \"zxcvbn\", k = 10",
        "output": "[26]"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcd\", a = \"abc\", b = \"bcd\", k = 1",
        "output": "[0, 4, 8, 12, 16, 20, 24]"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", a = \"abc\", b = \"cde\", k = 10",
        "output": "[0, 10]"
      },
      {
        "input": "s = \"mississippi\", a = \"issi\", b = \"issip\", k = 2",
        "output": "[4]"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyz\", a = \"xyz\", b = \"zyx\", k = 4",
        "output": "[]"
      },
      {
        "input": "s = \"repeatedrepeatedrepeatedrepeated\", a = \"repeated\", b = \"eatedr\", k = 18",
        "output": "[0, 8, 16, 24]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\", a = \"abcabc\", b = \"bcabca\", k = 12",
        "output": "[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42]"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxy\", a = \"xyxy\", b = \"xyxyxy\", k = 8",
        "output": "[0, 2, 4, 6, 8, 10, 12, 14]"
      },
      {
        "input": "s = \"abababababababab\", a = \"ab\", b = \"ba\", k = 2",
        "output": "[0, 2, 4, 6, 8, 10, 12, 14]"
      },
      {
        "input": "s = \"abababababab\", a = \"aba\", b = \"bab\", k = 5",
        "output": "[0, 2, 4, 6, 8]"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghijabcdefghij\", a = \"cde\", b = \"efg\", k = 5",
        "output": "[2, 12, 22, 32]"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefg\", a = \"def\", b = \"abc\", k = 10",
        "output": "[3, 10, 17]"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\", a = \"ghij\", b = \"efgh\", k = 20",
        "output": "[6, 16, 26, 36, 46]"
      },
      {
        "input": "s = \"hellohellohello\", a = \"hello\", b = \"ohell\", k = 6",
        "output": "[0, 5, 10]"
      },
      {
        "input": "s = \"aabbccddeeffaabbccddeeff\", a = \"abb\", b = \"bbc\", k = 2",
        "output": "[1, 13]"
      },
      {
        "input": "s = \"ababababababababab\", a = \"aba\", b = \"bab\", k = 4",
        "output": "[0, 2, 4, 6, 8, 10, 12, 14]"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghij\", a = \"def\", b = \"ghi\", k = 3",
        "output": "[3, 13, 23]"
      },
      {
        "input": "s = \"repeatedsubstringrepeatedsubstring\", a = \"substring\", b = \"substr\", k = 15",
        "output": "[8, 25]"
      },
      {
        "input": "s = \"abcabcabcabcabcabc\", a = \"abc\", b = \"abcabc\", k = 5",
        "output": "[0, 3, 6, 9, 12, 15]"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmqwerty\", a = \"erty\", b = \"asdf\", k = 10",
        "output": "[2]"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghij\", a = \"abc\", b = \"efg\", k = 10",
        "output": "[0, 10, 20]"
      },
      {
        "input": "s = \"abacabadabacaba\", a = \"aba\", b = \"aca\", k = 5",
        "output": "[0, 4, 8, 12]"
      },
      {
        "input": "s = \"hellohellohellohellohellohellohello\", a = \"hello\", b = \"elloh\", k = 20",
        "output": "[0, 5, 10, 15, 20, 25, 30]"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\", a = \"abc\", b = \"cab\", k = 2",
        "output": "[0, 3, 6, 9, 12, 15, 18, 21, 24, 27]"
      },
      {
        "input": "s = \"mississippiississippiississippiississippiississippi\", a = \"issi\", b = \"issip\", k = 15",
        "output": "[1, 4, 11, 14, 21, 24, 31, 34, 41, 44]"
      },
      {
        "input": "s = \"hellohellohellohello\", a = \"hello\", b = \"lohel\", k = 7",
        "output": "[0, 5, 10, 15]"
      },
      {
        "input": "s = \"hellohellohellohello\", a = \"ell\", b = \"ell\", k = 2",
        "output": "[1, 6, 11, 16]"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghij\", a = \"abc\", b = \"ghi\", k = 7",
        "output": "[0, 10, 20]"
      },
      {
        "input": "s = \"thisisaverylongstringwithmanywords\", a = \"very\", b = \"with\", k = 15",
        "output": "[7]"
      },
      {
        "input": "s = \"hellohellohellohello\", a = \"hello\", b = \"hello\", k = 0",
        "output": "[0, 5, 10, 15]"
      },
      {
        "input": "s = \"mississippiississippi\", a = \"issi\", b = \"ippi\", k = 10",
        "output": "[1, 4, 11, 14]"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\", a = \"zzz\", b = \"zzzz\", k = 8",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]"
      },
      {
        "input": "s = \"bananaanananabanananabanananabanananabananana\", a = \"anan\", b = \"nana\", k = 8",
        "output": "[1, 6, 8, 14, 16, 22, 24, 30, 32, 38, 40]"
      },
      {
        "input": "s = \"xyxxyxyxyxxyxyxyxyxyxy\", a = \"xyx\", b = \"xyxy\", k = 4",
        "output": "[0, 3, 5, 7, 10, 12, 14, 16, 18]"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghij\", a = \"abc\", b = \"ghi\", k = 5",
        "output": "[10, 20]"
      }
    ]
  },
  {
    "id": 2846,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Graph",
      "Array",
      "Strongly Connected Component"
    ],
    "problemDescription": "There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi in the tree.\nYou are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, find the minimum number of operations required to make the weight of every edge on the path from ai to bi equal. In one operation, you can choose any edge of the tree and change its weight to any value.\nNote that:\n\nQueries are independent of each other, meaning that the tree returns to its initial state on each new query.\nThe path from ai to bi is a sequence of distinct nodes starting with node ai and ending with node bi such that every two adjacent nodes in the sequence share an edge in the tree.\n\nReturn an array answer of length m where answer[i] is the answer to the ith query.\n\u00a0\nExample 1:\n\n\nInput: n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]], queries = [[0,3],[3,6],[2,6],[0,6]]\nOutput: [0,0,1,3]\nExplanation: In the first query, all the edges in the path from 0 to 3 have a weight of 1. Hence, the answer is 0.\nIn the second query, all the edges in the path from 3 to 6 have a weight of 2. Hence, the answer is 0.\nIn the third query, we change the weight of edge [2,3] to 2. After this operation, all the edges in the path from 2 to 6 have a weight of 2. Hence, the answer is 1.\nIn the fourth query, we change the weights of edges [0,1], [1,2] and [2,3] to 2. After these operations, all the edges in the path from 0 to 6 have a weight of 2. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi.\n\nExample 2:\n\n\nInput: n = 8, edges = [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]], queries = [[4,6],[0,4],[6,5],[7,4]]\nOutput: [1,2,2,3]\nExplanation: In the first query, we change the weight of edge [1,3] to 6. After this operation, all the edges in the path from 4 to 6 have a weight of 6. Hence, the answer is 1.\nIn the second query, we change the weight of edges [0,3] and [3,1] to 6. After these operations, all the edges in the path from 0 to 4 have a weight of 6. Hence, the answer is 2.\nIn the third query, we change the weight of edges [1,3] and [5,2] to 6. After these operations, all the edges in the path from 6 to 5 have a weight of 6. Hence, the answer is 2.\nIn the fourth query, we change the weights of edges [0,7], [0,3] and [1,3] to 6. After these operations, all the edges in the path from 7 to 4 have a weight of 6. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from ai to bi.\n\n\u00a0\nConstraints:\n\n1 <= n <= 104\nedges.length == n - 1\nedges[i].length == 3\n0 <= ui, vi < n\n1 <= wi <= 26\nThe input is generated such that edges represents a valid tree.\n1 <= queries.length == m <= 2 * 104\nqueries[i].length == 2\n0 <= ai, bi < n\n\n",
    "starterCode": "class Solution:\n    def minOperationsQueries(self, n: int, edges: List[List[int]], queries: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]], queries = [[0,3],[3,6],[2,6],[0,6]]",
        "output": "[0, 0, 1, 3]"
      },
      {
        "input": "n = 8, edges = [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]], queries = [[4,6],[0,4],[6,5],[7,4]]",
        "output": "[1, 2, 2, 3]"
      },
      {
        "input": "n = 20, edges = [[0,1,5],[1,2,4],[2,3,6],[3,4,5],[4,5,4],[5,6,6],[6,7,5],[7,8,4],[8,9,6],[0,10,3],[10,11,2],[11,12,3],[12,13,4],[13,14,3],[14,15,2],[15,16,3],[16,17,4],[17,18,3],[18,19,2]], queries = [[0,4],[7,14],[2,13],[8,15],[1,16],[9,18]]",
        "output": "[2, 9, 4, 10, 4, 13]"
      },
      {
        "input": "n",
        "output": "Error: Solution.minOperationsQueries() missing 3 required positional arguments: 'n', 'edges', and 'queries'"
      },
      {
        "input": "n = 30, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2],[6,7,3],[7,8,3],[8,9,3],[9,10,4],[10,11,4],[11,12,4],[12,13,5],[13,14,5],[14,15,5],[15,16,6],[16,17,6],[17,18,6],[18,19,7],[19,20,7],[20,21,7],[21,22,8],[22,23,8],[23,24,8],[24,25,9],[25,26,9],[26,27,9],[27,28,10],[28,29,10]], queries = [[0,29],[1,28],[2,27],[3,26],[4,25],[5,24],[6,23],[7,22],[8,21],[9,20],[10,19],[11,18],[12,17],[13,16],[14,15]]",
        "output": "[26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 1, 0]"
      },
      {
        "input": "n = 25, edges = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10],[9,10,11],[10,11,12],[11,12,13],[12,13,14],[13,14,15],[14,15,16],[15,16,17],[16,17,18],[17,18,19],[18,19,20],[19,20,21],[20,21,22],[21,22,23],[22,23,24],[23,24,25],[24,0,1]], queries = [[0,15],[15,20],[20,10],[10,5],[5,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "n = 100, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,20,20],[20,21,21],[21,22,22],[22,23,23],[23,24,24],[24,25,25],[25,26,26],[26,27,27],[27,28,28],[28,29,29],[29,30,30],[30,31,31],[31,32,32],[32,33,33],[33,34,34],[34,35,35],[35,36,36],[36,37,37],[37,38,38],[38,39,39],[39,40,40],[40,41,41],[41,42,42],[42,43,43],[43,44,44],[44,45,45],[45,46,46],[46,47,47],[47,48,48],[48,49,49],[49,50,50],[50,51,51],[51,52,52],[52,53,53],[53,54,54],[54,55,55],[55,56,56],[56,57,57],[57,58,58],[58,59,59],[59,60,60],[60,61,61],[61,62,62],[62,63,63],[63,64,64],[64,65,65],[65,66,66],[66,67,67],[67,68,68],[68,69,69],[69,70,70],[70,71,71],[71,72,72],[72,73,73],[73,74,74],[74,75,75],[75,76,76],[76,77,77],[77,78,78],[78,79,79],[79,80,80],[80,81,81],[81,82,82],[82,83,83],[83,84,84],[84,85,85],[85,86,86],[86,87,87],[87,88,88],[88,89,89],[89,90,90],[90,91,91],[91,92,92],[92,93,93],[93,94,94],[94,95,95],[95,96,96],[96,97,97],[97,98,98],[98,99,99]], queries = [[0,99],[0,50],[10,60],[50,99],[10,50]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 15, edges = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10],[9,10,11],[10,11,12],[11,12,13],[12,13,14],[13,14,15],[14,0,1]], queries = [[0,5],[5,12],[12,7],[7,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "n = 15, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14]], queries = [[0,14],[1,13],[2,12],[3,11],[4,10],[5,9],[6,8],[7,8]]",
        "output": "[13, 11, 9, 7, 5, 3, 1, 0]"
      },
      {
        "input": "n = 15, edges = [[0,1,5],[0,2,3],[0,3,2],[1,4,1],[1,5,1],[2,6,4],[2,7,4],[3,8,3],[3,9,6],[4,10,2],[5,11,5],[6,12,3],[7,13,4],[8,14,6]], queries = [[10,12],[5,14],[1,13],[0,11],[8,11]]",
        "output": "[4, 4, 2, 1, 3]"
      },
      {
        "input": "n = 30, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,20,20],[20,21,21],[21,22,22],[22,23,23],[23,24,24],[24,25,25],[25,26,26],[26,27,27],[27,28,28],[28,29,29]], queries = [[0,29],[0,15],[10,20],[25,29],[10,15]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 9, edges = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9]], queries = [[0,8],[1,7],[2,6],[3,5],[4,4]]",
        "output": "[7, 5, 3, 1, 0]"
      },
      {
        "input": "n = 12, edges = [[0,1,1],[1,2,1],[2,3,2],[3,4,2],[4,5,3],[5,6,3],[6,7,4],[7,8,4],[8,9,5],[9,10,5],[10,11,6]], queries = [[0,5],[1,6],[2,7],[3,8],[4,9],[5,10],[6,11],[7,4],[8,3],[9,2],[10,1]]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 1, 3, 5, 7]"
      },
      {
        "input": "n = 25, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,20,20],[20,21,21],[21,22,22],[22,23,23],[23,24,24]], queries = [[0,24],[1,23],[2,22],[3,21]]",
        "output": "[23, 21, 19, 17]"
      },
      {
        "input": "n = 20, edges = [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,6,5],[6,7,5],[7,8,5],[8,9,5],[9,10,5],[10,11,5],[11,12,5],[12,13,5],[13,14,5],[14,15,5],[15,16,5],[16,17,5],[17,18,5],[18,19,5]], queries = [[0,19],[0,10],[5,15],[10,15],[0,5]]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "n = 10, edges = [[0,1,10],[0,2,5],[1,3,3],[1,4,7],[2,5,10],[2,6,5],[3,7,2],[4,8,8],[5,9,15]], queries = [[0,7],[1,8],[3,6],[4,9],[7,9]]",
        "output": "[2, 1, 2, 3, 4]"
      },
      {
        "input": "queries",
        "output": "Error: Solution.minOperationsQueries() missing 3 required positional arguments: 'n', 'edges', and 'queries'"
      },
      {
        "input": "n = 15, edges = [[0,1,1],[1,2,1],[2,3,2],[3,4,2],[4,5,3],[5,6,3],[6,7,4],[7,8,4],[8,9,5],[9,10,5],[10,11,6],[11,12,6],[12,13,7],[13,14,7]], queries = [[0,7],[3,11],[5,13],[2,14]]",
        "output": "[5, 6, 6, 10]"
      },
      {
        "input": "n = 12, edges = [[0,1,5],[0,2,3],[0,3,4],[1,4,5],[1,5,3],[2,6,4],[2,7,5],[3,8,3],[3,9,4],[4,10,2],[5,11,2]], queries = [[0,10],[4,8],[1,6],[2,9],[3,11],[5,7]]",
        "output": "[1, 2, 2, 1, 3, 2]"
      },
      {
        "input": "n = 100, edges = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10],[9,10,11],[0,11,12],[11,12,13],[12,13,14],[13,14,15],[14,15,16],[15,16,17],[16,17,18],[17,18,19],[18,19,20],[19,20,21],[0,21,22],[21,22,23],[22,23,24],[23,24,25],[24,25,26]], queries = [[0,50],[1,51],[2,52],[3,53],[4,54],[5,55],[6,56],[7,57],[8,58],[9,59]]",
        "output": "Error: 'NoneType' object is not subscriptable"
      },
      {
        "input": "n = 50, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,20,20],[20,21,21],[21,22,22],[22,23,23],[23,24,24],[24,25,25],[25,26,26],[26,27,27],[27,28,28],[28,29,29],[29,30,30],[30,31,31],[31,32,32],[32,33,33],[33,34,34],[34,35,35],[35,36,36],[36,37,37],[37,38,38],[38,39,39],[39,40,40],[40,41,41],[41,42,42],[42,43,43],[43,44,44],[44,45,45],[45,46,46],[46,47,47],[47,48,48],[48,49,49],[49,0,1]], queries = [[0,25],[25,50],[50,25],[25,0],[10,40],[40,10],[20,30],[30,20]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 18, edges = [[0,1,10],[1,2,20],[2,3,10],[3,4,20],[4,5,10],[5,6,20],[6,7,10],[7,8,20],[8,9,10],[9,10,20],[10,11,10],[11,12,20],[12,13,10],[13,14,20],[14,15,10],[15,16,20],[16,17,10]], queries = [[0,17],[1,16],[2,15],[3,14],[4,13],[5,12],[6,11],[7,10],[8,9]]",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "n = 20, edges = [[0,1,1],[0,2,2],[0,3,3],[1,4,4],[1,5,5],[2,6,6],[2,7,7],[3,8,8],[3,9,9],[4,10,10],[4,11,11],[5,12,12],[5,13,13],[6,14,14],[6,15,15],[7,16,16],[7,17,17],[8,18,18],[8,19,19],[9,10,20]], queries = [[0,19],[1,18],[2,17],[3,16],[4,15],[5,14],[6,13],[7,12],[8,11],[9,10]]",
        "output": "Execution timed out"
      },
      {
        "input": "n = 50, edges = [[0,1,20],[1,2,19],[2,3,18],[3,4,17],[4,5,16],[5,6,15],[6,7,14],[7,8,13],[8,9,12],[9,10,11],[10,11,10],[11,12,9],[12,13,8],[13,14,7],[14,15,6],[15,16,5],[16,17,4],[17,18,3],[18,19,2],[19,20,1],[20,21,20],[21,22,19],[22,23,18],[23,24,17],[24,25,16],[25,26,15],[26,27,14],[27,28,13],[28,29,12],[29,30,11],[30,31,10],[31,32,9],[32,33,8],[33,34,7],[34,35,6],[35,36,5],[36,37,4],[37,38,3],[38,39,2],[39,40,1],[40,41,20],[41,42,19],[42,43,18],[43,44,17],[44,45,16],[45,46,15],[46,47,14],[47,48,13],[48,49,12]], queries = [[0,49],[0,25],[10,35],[25,49],[10,25]]",
        "output": "[46, 23, 23, 22, 14]"
      },
      {
        "input": "n = 15, edges = [[0,1,3],[1,2,2],[2,3,3],[0,4,1],[4,5,1],[5,6,3],[6,7,2],[7,8,3],[0,9,2],[9,10,2],[10,11,3],[11,12,2],[12,13,1],[13,14,1]], queries = [[0,3],[5,7],[2,12],[8,14],[1,13],[6,10]]",
        "output": "[1, 1, 2, 7, 3, 3]"
      },
      {
        "input": "n = 30, edges = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10],[9,10,11],[10,11,12],[11,12,13],[12,13,14],[13,14,15],[14,15,16],[15,16,17],[16,17,18],[17,18,19],[18,19,20],[19,20,21],[20,21,22],[21,22,23],[22,23,24],[23,24,25],[24,25,26],[25,26,27],[26,27,28],[27,28,29]], queries = [[0,29],[1,28],[2,27],[3,26]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 20, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19]], queries = [[0,19],[1,18],[2,17],[3,16],[4,15],[5,14],[6,13],[7,12],[8,11],[9,10]]",
        "output": "[18, 16, 14, 12, 10, 8, 6, 4, 2, 0]"
      },
      {
        "input": "n = 20, edges = [[0,1,1],[1,2,1],[2,3,2],[3,4,2],[4,5,3],[5,6,3],[6,7,4],[7,8,4],[8,9,5],[9,10,5],[10,11,6],[11,12,6],[12,13,7],[13,14,7],[14,15,8],[15,16,8],[16,17,9],[17,18,9],[18,19,10]], queries = [[0,19],[1,18],[2,17],[3,16]]",
        "output": "[17, 15, 13, 11]"
      },
      {
        "input": "n = 15, edges = [[0,1,2],[1,2,2],[1,3,3],[2,4,4],[3,5,2],[3,6,3],[4,7,3],[4,8,4],[5,9,5],[5,10,2],[6,11,2],[6,12,3],[7,13,3],[8,14,4]], queries = [[0,14],[1,13],[2,12],[4,11]]",
        "output": "[2, 2, 1, 3]"
      },
      {
        "input": "n = 10, edges = [[0,1,3],[0,2,5],[1,3,2],[1,4,2],[2,5,4],[2,6,4],[3,7,6],[4,8,1],[5,9,3]], queries = [[0,7],[1,9],[3,5],[2,8],[6,9]]",
        "output": "[2, 2, 3, 3, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1,1],[0,2,2],[1,3,3],[1,4,4],[2,5,5],[2,6,6],[3,7,7],[3,8,8],[4,9,9],[4,10,10],[5,11,11],[5,12,12],[6,13,13],[6,14,14],[7,15,15],[7,16,16],[8,17,17],[8,18,18],[9,19,19],[10,15,1]], queries = [[0,15],[15,10],[10,5],[5,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "n = 15, edges = [[0,1,2],[0,2,3],[1,3,4],[1,4,5],[2,5,6],[2,6,7],[3,7,8],[4,8,9],[5,9,10],[6,10,11],[7,11,12],[8,12,13],[9,13,14],[10,14,15]], queries = [[0,14],[1,13],[2,12],[3,11],[4,10],[5,9],[6,8],[7,7]]",
        "output": "[3, 4, 4, 1, 4, 0, 4, 0]"
      },
      {
        "input": "n = 25, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,20,20],[20,21,21],[21,22,22],[22,23,23],[23,24,24]], queries = [[0,24],[1,23],[2,22],[3,21],[4,20],[5,19],[6,18],[7,17],[8,16],[9,15]]",
        "output": "[23, 21, 19, 17, 15, 13, 11, 9, 7, 5]"
      },
      {
        "input": "n = 100, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2],[6,7,3],[7,8,3],[8,9,3],[9,10,4],[10,11,4],[11,12,4],[12,13,5],[13,14,5],[14,15,5],[15,16,6],[16,17,6],[17,18,6],[18,19,7],[19,20,7],[20,21,7],[21,22,8],[22,23,8],[23,24,8],[24,25,9],[25,26,9],[26,27,9],[27,28,10],[28,29,10],[29,30,10],[30,31,11],[31,32,11],[32,33,11],[33,34,12],[34,35,12],[35,36,12],[36,37,13],[37,38,13],[38,39,13],[39,40,14],[40,41,14],[41,42,14],[42,43,15],[43,44,15],[44,45,15],[45,46,16],[46,47,16],[47,48,16],[48,49,17],[49,50,17],[50,51,17],[51,52,18],[52,53,18],[53,54,18],[54,55,19],[55,56,19],[56,57,19],[57,58,20],[58,59,20],[59,60,20],[60,61,21],[61,62,21],[62,63,21],[63,64,22],[64,65,22],[65,66,22],[66,67,23],[67,68,23],[68,69,23],[69,70,24],[70,71,24],[71,72,24],[72,73,25],[73,74,25],[74,75,25],[75,76,26],[76,77,26],[77,78,26],[78,79,1],[79,80,1],[80,81,2],[81,82,2],[82,83,3],[83,84,3],[84,85,4],[85,86,4],[86,87,5],[87,88,5],[88,89,6],[89,90,6],[90,91,7],[91,92,7],[92,93,8],[93,94,8],[94,95,9],[95,96,9],[96,97,10],[97,98,10],[98,99,10]], queries = [[0,99],[1,98],[2,97],[3,96],[4,95],[5,94],[6,93],[7,92],[8,91],[9,90],[10,89],[11,88],[12,87],[13,86],[14,85],[15,84],[16,83],[17,82],[18,81],[19,80],[20,79],[21,78],[22,77],[23,76],[24,75],[25,74],[26,73],[27,72],[28,71],[29,70],[30,69],[31,68],[32,67],[33,66],[34,65],[35,64],[36,63],[37,62],[38,61],[39,60],[40,59],[41,58],[42,57],[43,56],[44,55],[45,54],[46,53],[47,52],[48,51],[49,50]]",
        "output": "[93, 92, 90, 88, 86, 84, 82, 80, 78, 76, 74, 72, 71, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0, 0]"
      },
      {
        "input": "edges",
        "output": "Error: Solution.minOperationsQueries() missing 3 required positional arguments: 'n', 'edges', and 'queries'"
      },
      {
        "input": "n = 10, edges = [[0,1,3],[0,2,3],[1,3,5],[1,4,5],[2,5,7],[2,6,7],[3,7,9],[3,8,9],[4,9,11]], queries = [[0,9],[1,8],[2,7],[4,6]]",
        "output": "[2, 1, 2, 2]"
      },
      {
        "input": "n = 40, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2],[6,7,3],[7,8,3],[8,9,3],[9,10,4],[10,11,4],[11,12,4],[12,13,5],[13,14,5],[14,15,5],[15,16,6],[16,17,6],[17,18,6],[18,19,7],[19,20,7],[20,21,7],[21,22,8],[22,23,8],[23,24,8],[24,25,9],[25,26,9],[26,27,9],[27,28,10],[28,29,10],[29,30,10],[30,31,11],[31,32,11],[32,33,11],[33,34,12],[34,35,12],[35,36,12],[36,37,13],[37,38,13],[38,39,13]], queries = [[0,39],[1,38],[2,37],[3,36],[4,35],[5,34],[6,33],[7,32],[8,31],[9,30],[10,29],[11,28],[12,27],[13,26],[14,25],[15,24],[16,23],[17,22],[18,21],[19,20]]",
        "output": "[36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0, 0]"
      },
      {
        "input": "n = 12, edges = [[0,1,1],[0,2,2],[1,3,3],[1,4,4],[2,5,5],[2,6,6],[3,7,7],[3,8,8],[4,9,9],[5,10,10],[6,11,11]], queries = [[0,11],[1,10],[2,9],[3,8],[4,7],[5,6],[7,11],[8,10]]",
        "output": "[2, 3, 3, 0, 2, 1, 5, 5]"
      }
    ]
  },
  {
    "id": 1591,
    "difficulty": "Hard",
    "tags": [
      "Graph",
      "Topological Sort",
      "Array",
      "Matrix"
    ],
    "problemDescription": "There is a strange printer with the following two special requirements:\n\nOn each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.\nOnce the printer has used a color for the above operation, the same color cannot be used again.\n\nYou are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid.\nReturn true if it is possible to print the matrix targetGrid, otherwise, return false.\n\u00a0\nExample 1:\n\n\nInput: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\nOutput: true\n\nExample 2:\n\n\nInput: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\nOutput: true\n\nExample 3:\n\nInput: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\nOutput: false\nExplanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.\n\n\u00a0\nConstraints:\n\nm == targetGrid.length\nn == targetGrid[i].length\n1 <= m, n <= 60\n1 <= targetGrid[row][col] <= 60\n\n",
    "starterCode": "class Solution:\n    def isPrintable(self, targetGrid: List[List[int]]) -> bool:\n        ",
    "testCases": [
      {
        "input": "targetGrid = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1],[1,1,1],[1,1,1]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,1],[2,1,2],[1,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,3,4],[2,1,4,3],[3,4,1,2],[4,3,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,1,4],[2,1,4,1],[1,4,1,2],[4,1,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1],[1,1],[2,2],[2,2]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,2,1],[2,3,4,3,2],[3,4,5,4,3],[2,3,4,3,2],[1,2,3,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,2,3],[2,3,3,4],[2,3,3,4],[1,2,2,3]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,2,2,3,3,4,4],[1,1,2,2,3,3,4,4],[1,1,2,2,3,3,4,4],[5,5,6,6,7,7,8,8],[5,5,6,6,7,7,8,8],[5,5,6,6,7,7,8,8],[5,5,6,6,7,7,8,8],[5,5,6,6,7,7,8,8]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,2,2,3],[1,4,1,5,2,3],[1,4,6,5,2,3],[1,4,6,5,2,3],[1,4,1,5,2,3],[1,1,1,2,2,3]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6],[2,3,4,5,6,1],[3,4,5,6,1,2],[4,5,6,1,2,3],[5,6,1,2,3,4],[6,1,2,3,4,5]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,1,1,1,1,1],[1,2,2,2,2,2,1],[1,2,3,3,3,2,1],[1,2,3,4,3,2,1],[1,2,3,3,3,2,1],[1,2,2,2,2,2,1],[1,1,1,1,1,1,1]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6,7],[2,1,2,3,4,5,6],[3,2,1,2,3,4,5],[4,3,2,1,2,3,4],[5,4,3,2,1,2,3],[6,5,4,3,2,1,2],[7,6,5,4,3,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6],[2,1,4,5,6,3],[3,4,1,6,5,2],[4,5,6,1,2,3],[5,6,2,3,1,4],[6,3,5,4,3,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6,7],[2,1,3,4,5,6,7],[3,2,1,4,5,6,7],[4,3,2,1,5,6,7],[5,4,3,2,1,6,7],[6,5,4,3,2,1,7],[7,6,5,4,3,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,1,2,2,2],[1,3,1,3,3,2],[1,3,1,3,3,2],[1,1,1,2,2,2],[1,3,3,3,3,3],[1,3,3,3,3,3]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5],[5,1,2,3,4],[4,5,1,2,3],[3,4,5,1,2],[2,3,4,5,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,2,2,2,2],[2,3,3,3,3,2],[2,3,4,4,3,2],[2,3,4,4,3,2],[2,3,3,3,3,2],[2,2,2,2,2,2]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,2,1,1],[2,3,3,2,2],[2,3,3,2,2],[1,2,2,1,1],[5,5,5,5,5]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,1,2,2,2,3,3,3],[1,1,1,2,2,2,3,3,3],[4,4,4,5,5,5,6,6,6],[4,4,4,5,5,5,6,6,6],[7,7,7,8,8,8,9,9,9],[7,7,7,8,8,8,9,9,9]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,1,1],[1,2,2,2,1],[1,2,3,2,1],[1,2,2,2,1],[1,1,1,1,1]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,1,2,2,2,2],[1,2,2,2,2,2,2,2],[1,2,3,3,3,3,2,2],[1,2,3,4,4,3,2,2],[1,2,3,4,4,3,2,2],[1,2,3,3,3,3,2,2],[1,2,2,2,2,2,2,2],[1,1,1,1,2,2,2,2]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,1],[1,2,3,3,3,3,2,1],[1,2,3,4,4,3,2,1],[1,2,3,4,4,3,2,1],[1,2,3,3,3,3,2,1],[1,2,2,2,2,2,2,1],[1,1,1,1,1,1,1,1]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5],[2,1,4,5,3],[3,4,1,2,5],[4,5,2,3,1],[5,3,1,4,2]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,2,3],[2,4,4,3],[2,4,4,3],[1,2,2,3]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,2,2,1],[1,2,3,3,3,3,3,3,2,1],[1,2,3,4,4,4,4,3,2,1],[1,2,3,4,5,5,4,3,2,1],[1,2,3,4,5,5,4,3,2,1],[1,2,3,4,4,4,4,3,2,1],[1,2,3,3,3,3,3,3,2,1],[1,2,2,2,2,2,2,2,2,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,2,3,1],[1,2,2,3,1],[4,5,5,6,4],[4,5,5,6,4],[7,8,8,9,7]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[5,5,5,5,5],[5,6,6,6,5],[5,6,7,6,5],[5,6,6,6,5],[5,5,5,5,5]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6,7],[7,1,2,3,4,5,6],[6,7,1,2,3,4,5],[5,6,7,1,2,3,4],[4,5,6,7,1,2,3],[3,4,5,6,7,1,2],[2,3,4,5,6,7,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,2,2,2,2],[2,1,3,3,3,2],[2,1,3,4,3,2],[2,1,3,3,3,2],[2,2,2,2,2,2]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,2,1],[1,2,3,3,3,3,3,2,1],[1,2,3,4,4,4,3,2,1],[1,2,3,4,5,4,3,2,1],[1,2,3,4,4,4,3,2,1],[1,2,3,3,3,3,3,2,1],[1,2,2,2,2,2,2,2,1],[1,1,1,1,1,1,1,1,1]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,2,1],[2,3,3,2],[2,3,3,2],[1,2,2,1],[1,2,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,49]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5],[2,1,2,3,4],[3,2,1,2,3],[4,3,2,1,2],[5,4,3,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,2,2,3,3],[1,1,2,2,3,3],[1,1,4,4,5,5],[1,1,4,4,5,5],[6,6,6,6,6,6],[6,6,6,6,6,6]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,1,2,1,2],[2,1,2,1,2,1],[1,2,1,2,1,2],[2,1,2,1,2,1],[1,2,1,2,1,2],[2,1,2,1,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,1,2,2,2],[1,1,1,2,2,2],[3,3,3,4,4,4],[3,3,3,4,4,4],[5,5,5,6,6,6],[5,5,5,6,6,6]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,2,2,2,3],[1,4,4,4,2,3],[1,4,5,4,2,3],[1,4,5,4,2,3],[1,1,5,5,2,3],[1,1,5,5,2,3]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[5,5,5,5,5,5],[5,6,6,6,6,5],[5,6,7,7,6,5],[5,6,7,7,6,5],[5,6,6,6,6,5],[5,5,5,5,5,5]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,2,1],[1,1,2,2],[1,2,2,1],[1,1,2,2],[1,2,2,1],[1,1,2,2]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,1,1,2,2,2],[1,2,2,2,1,2,2,2],[1,2,3,3,1,2,2,2],[1,2,3,3,1,2,2,2],[1,1,1,1,1,2,2,2],[4,4,4,4,4,5,5,5],[4,4,6,6,4,5,5,5],[4,4,6,6,4,5,5,5]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,2,1,1],[2,3,3,2,1],[2,3,3,2,1],[1,2,2,1,1],[1,1,1,1,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,2,1,1,1],[2,1,1,1,1,2],[2,1,3,3,1,2],[2,1,3,3,1,2],[2,1,1,1,1,2],[1,2,2,1,1,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,2,2,3,3],[1,1,2,2,3,3],[4,4,5,5,6,6],[4,4,5,5,6,6],[7,7,8,8,9,9],[7,7,8,8,9,9]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,1],[2,2,2,2],[3,3,3,3],[4,4,4,4],[5,5,5,5]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,2,2,1],[1,2,3,3,3,3,3,3,2,1],[1,2,3,4,4,4,4,3,2,1],[1,2,3,4,5,5,4,3,2,1],[1,2,3,4,5,6,5,4,3,2],[1,2,3,4,5,5,4,3,2,1],[1,2,3,4,4,4,4,3,2,1],[1,2,3,3,3,3,3,3,2,1],[1,2,2,2,2,2,2,2,2,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,1,1,1,2,2,2,2],[1,1,1,1,2,2,2,2],[1,1,1,1,2,2,2,2],[1,1,1,1,2,2,2,2],[3,3,3,3,4,4,4,4],[3,3,3,3,4,4,4,4],[3,3,3,3,4,4,4,4],[3,3,3,3,4,4,4,4]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,2,2],[1,1,1,2,2],[1,1,1,2,2],[3,3,3,4,4],[3,3,3,4,4]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,2,2,2,3,3,3],[1,1,1,2,2,2,3,3,3],[1,1,1,2,2,2,3,3,3],[4,4,4,5,5,5,6,6,6],[4,4,4,5,5,5,6,6,6],[4,4,4,5,5,5,6,6,6],[7,7,7,8,8,8,9,9,9],[7,7,7,8,8,8,9,9,9],[7,7,7,8,8,8,9,9,9]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,2,2,2],[1,1,1,2,2,2],[1,1,1,2,2,2],[3,3,3,4,4,4],[3,3,3,4,4,4],[3,3,3,4,4,4]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,2,2],[1,1,1,2,2],[3,3,3,4,4],[3,3,3,4,4],[5,5,5,6,6],[5,5,5,6,6]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,2,2,3,3,3],[1,1,1,2,2,3,3,3],[1,1,1,2,2,3,3,3],[4,4,4,5,5,6,6,6],[4,4,4,5,5,6,6,6],[4,4,4,5,5,6,6,6],[7,7,7,8,8,9,9,9],[7,7,7,8,8,9,9,9]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6],[6,5,4,3,2,1],[1,2,3,4,5,6],[6,5,4,3,2,1],[1,2,3,4,5,6],[6,5,4,3,2,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5,6],[6,1,2,3,4,5],[5,6,1,2,3,4],[4,5,6,1,2,3],[3,4,5,6,1,2],[2,3,4,5,6,1]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,2,2,2,2],[1,1,3,3,3,1],[1,1,3,4,3,1],[1,1,3,3,3,1],[1,1,1,1,1,1]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,1,1,1,1,1],[1,2,2,2,2,1],[1,2,3,3,2,1],[1,2,3,3,2,1],[1,2,2,2,2,1],[1,1,1,1,1,1]]",
        "output": "True"
      },
      {
        "input": "targetGrid = [[1,2,3,4,5],[2,3,4,5,1],[3,4,5,1,2],[4,5,1,2,3],[5,1,2,3,4]]",
        "output": "False"
      },
      {
        "input": "targetGrid = [[1,2,2,1,1,2],[2,1,2,1,2,1],[2,1,1,2,1,2],[1,2,2,1,1,2],[1,1,1,1,1,1],[2,2,2,2,2,2]]",
        "output": "False"
      }
    ]
  },
  {
    "id": 2272,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.\nGiven a string s consisting of lowercase English letters only, return the largest variance possible among all substrings of s.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nExample 1:\n\nInput: s = \"aababbb\"\nOutput: 3\nExplanation:\nAll possible variances along with their respective substrings are listed below:\n- Variance 0 for substrings \"a\", \"aa\", \"ab\", \"abab\", \"aababb\", \"ba\", \"b\", \"bb\", and \"bbb\".\n- Variance 1 for substrings \"aab\", \"aba\", \"abb\", \"aabab\", \"ababb\", \"aababbb\", and \"bab\".\n- Variance 2 for substrings \"aaba\", \"ababbb\", \"abbb\", and \"babb\".\n- Variance 3 for substring \"babbb\".\nSince the largest possible variance is 3, we return it.\n\nExample 2:\n\nInput: s = \"abcde\"\nOutput: 0\nExplanation:\nNo letter occurs more than once in s, so the variance of every substring is 0.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 104\ns consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def largestVariance(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"zzzzzzy\"",
        "output": "5"
      },
      {
        "input": "s = \"zyzzyzyzy\"",
        "output": "2"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "0"
      },
      {
        "input": "s = \"abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "1"
      },
      {
        "input": "s = \"abbaabbaabba\"",
        "output": "2"
      },
      {
        "input": "s = \"abababab\"",
        "output": "1"
      },
      {
        "input": "s = \"aaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"a\"",
        "output": "0"
      },
      {
        "input": "s = \"abcabcabc\"",
        "output": "1"
      },
      {
        "input": "s = \"zzyzxzyzyzxzyzxzyzxzyzxzyzxzyzxzyz\"",
        "output": "11"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "1"
      },
      {
        "input": "s = \"abcde\"",
        "output": "0"
      },
      {
        "input": "s = \"leetcode\"",
        "output": "2"
      },
      {
        "input": "s = \"xyzxyzxyz\"",
        "output": "1"
      },
      {
        "input": "s = \"abccccccc\"",
        "output": "6"
      },
      {
        "input": "s = \"zzzzzzzzzz\"",
        "output": "0"
      },
      {
        "input": "s = \"zzzzzyyyyxxxxwwwwvvvvuuuuttttssssrrrrqqqqppppllllkkkkjjjjiiiihhhhggggffffffeee ddcccbbbbaaaa\"",
        "output": "5"
      },
      {
        "input": "s = \"aabbcc\"",
        "output": "1"
      },
      {
        "input": "s = \"mississippi\"",
        "output": "3"
      },
      {
        "input": "s = \"abcdefghij\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijj\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbaaabb\"",
        "output": "3"
      },
      {
        "input": "s = \"abacaba\"",
        "output": "3"
      },
      {
        "input": "s = \"aababbb\"",
        "output": "3"
      }
    ]
  },
  {
    "id": 1601,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Backtracking",
      "Enumeration"
    ],
    "problemDescription": "We have n buildings numbered from 0 to n - 1. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.\nYou are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi.\nAll buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2.\nReturn the maximum number of achievable requests.\n\u00a0\nExample 1:\n\n\nInput: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]\nOutput: 5\nExplantion: Let's see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\nFrom building 2 we have employee z and they want to move to building 0.\nFrom building 3 we have employee c and they want to move to building 4.\nFrom building 4 we don't have any requests.\nWe can achieve the requests of users x and b by swapping their places.\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.\n\nExample 2:\n\n\nInput: n = 3, requests = [[0,0],[1,2],[2,1]]\nOutput: 3\nExplantion: Let's see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\nFrom building 1 we have employee y and they want to move to building 2.\nFrom building 2 we have employee z and they want to move to building 1.\nWe can achieve all the requests. \nExample 3:\n\nInput: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= n <= 20\n1 <= requests.length <= 16\nrequests[i].length == 2\n0 <= fromi, toi < n\n\n",
    "starterCode": "class Solution:\n    def maximumRequests(self, n: int, requests: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 6, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0]]",
        "output": "6"
      },
      {
        "input": "n = 4, requests = [[0,1],[1,0],[0,2],[2,0],[0,3],[3,0]]",
        "output": "6"
      },
      {
        "input": "n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]",
        "output": "4"
      },
      {
        "input": "n = 3, requests = [[0,1],[1,0],[0,2],[2,0]]",
        "output": "4"
      },
      {
        "input": "n = 3, requests = [[0,1],[1,2],[2,0],[0,2]]",
        "output": "3"
      },
      {
        "input": "n = 6, requests = [[0,3],[3,4],[4,2],[2,5],[5,0],[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "7"
      },
      {
        "input": "n = 3, requests = [[0,0],[1,2],[2,1]]",
        "output": "3"
      },
      {
        "input": "n = 2, requests = [[0,0],[1,1]]",
        "output": "2"
      },
      {
        "input": "n = 3, requests = [[0,1],[1,0],[1,2],[2,1],[0,2],[2,0]]",
        "output": "6"
      },
      {
        "input": "n = 5, requests = [[0,1],[1,2],[2,3],[3,4],[4,0]]",
        "output": "5"
      },
      {
        "input": "n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]",
        "output": "5"
      },
      {
        "input": "n = 2, requests = [[0,1],[1,0]]",
        "output": "2"
      },
      {
        "input": "n = 6, requests = [[0,1],[1,0],[1,2],[2,1],[2,3],[3,2],[3,4],[4,3],[4,5],[5,4],[5,0],[0,5],[0,2],[2,0],[1,3],[3,1]]",
        "output": "16"
      },
      {
        "input": "n = 4, requests = [[0,1],[1,2],[2,3],[3,0],[0,2],[2,1],[1,3],[3,2],[0,3],[3,1]]",
        "output": "8"
      },
      {
        "input": "n = 15, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,1],[14,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "n = 8, requests = [[0,1],[1,0],[2,3],[3,2],[4,5],[5,4],[6,7],[7,6],[0,7],[1,6],[2,5],[3,4]]",
        "output": "8"
      },
      {
        "input": "n = 4, requests = [[0,1],[1,0],[0,2],[2,0],[1,3],[3,1],[2,3],[3,2],[0,3],[3,0]]",
        "output": "10"
      },
      {
        "input": "n = 7, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0],[0,3],[3,6],[6,2],[2,5],[5,1],[1,4],[4,0]]",
        "output": "14"
      },
      {
        "input": "n = 10, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,2],[2,4],[4,6],[6,8],[8,0],[1,3],[3,5],[5,7],[7,9],[9,1]]",
        "output": "20"
      },
      {
        "input": "n = 20, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,0],[0,3],[3,6],[6,9],[9,12],[12,15],[15,18],[18,1],[1,4],[4,7],[7,10],[10,13],[13,16],[16,19],[19,2],[2,5],[5,8],[8,11],[11,14],[14,17],[17,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "n = 5, requests = [[0,1],[1,2],[2,3],[3,4],[4,0],[0,2],[1,3],[2,4],[3,0],[4,1],[0,3],[1,4],[2,0],[3,1],[4,2]]",
        "output": "15"
      },
      {
        "input": "n = 8, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,3],[3,6],[6,1],[1,4],[4,7],[7,2],[2,5],[5,0]]",
        "output": "16"
      },
      {
        "input": "n = 8, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0]]",
        "output": "16"
      },
      {
        "input": "n = 6, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[1,3],[2,4],[3,5],[4,0],[5,1],[0,3],[1,4],[2,5],[3,0],[4,1],[5,2],[0,4],[1,5],[2,0],[3,1],[4,2],[5,3]]",
        "output": "24"
      },
      {
        "input": "n = 6, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[1,3],[2,4],[3,5],[4,0],[5,1]]",
        "output": "12"
      },
      {
        "input": "n = 10, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,3],[3,6],[6,9],[9,2],[2,5],[5,8],[8,1],[1,4],[4,7],[7,0]]",
        "output": "20"
      },
      {
        "input": "n = 12, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,0],[0,5],[5,10],[10,3]]",
        "output": "12"
      },
      {
        "input": "n = 6, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,1],[1,2],[2,3],[3,4],[4,5],[5,0]]",
        "output": "18"
      },
      {
        "input": "n = 10, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,5],[1,6],[2,7],[3,8],[4,9],[0,3],[1,4],[2,5],[3,6],[4,7],[5,8],[6,9],[7,0],[8,1],[9,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "n = 4, requests = [[0,1],[1,2],[2,3],[3,0],[0,2],[2,1],[1,3],[3,2]]",
        "output": "7"
      },
      {
        "input": "n = 4, requests = [[0,1],[1,2],[2,3],[3,0],[0,2],[1,3],[2,0],[3,1],[0,3],[1,0],[2,1],[3,2]]",
        "output": "12"
      },
      {
        "input": "n = 20, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,0]]",
        "output": "20"
      },
      {
        "input": "n = 15, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0],[0,7],[7,14],[14,7],[7,0],[0,7]]",
        "output": "19"
      },
      {
        "input": "n = 7, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0],[0,3],[3,6],[6,3],[3,0],[0,3],[3,0],[0,6],[6,0],[0,3],[3,0]]",
        "output": "17"
      },
      {
        "input": "n = 8, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,3],[3,6],[1,4],[4,7],[2,5],[5,0]]",
        "output": "10"
      },
      {
        "input": "n = 10, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,2],[2,4],[4,6],[6,8],[8,0]]",
        "output": "15"
      },
      {
        "input": "n = 9, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[0,4],[4,8],[1,5],[5,9],[2,6],[6,0],[3,7],[7,1]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 4, requests = [[0,1],[1,2],[2,3],[3,0],[0,1],[1,2],[2,3],[3,0],[0,1],[1,2],[2,3],[3,0],[0,2],[1,3],[2,0],[3,1],[0,3],[1,0],[2,1],[3,2]]",
        "output": "20"
      },
      {
        "input": "n = 8, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,3],[3,1],[1,4],[4,2],[2,5],[5,3],[3,6],[6,4],[4,7],[7,5]]",
        "output": "15"
      },
      {
        "input": "n = 6, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,3],[3,2],[1,4],[4,0]]",
        "output": "9"
      },
      {
        "input": "n = 5, requests = [[0,1],[1,2],[2,3],[3,4],[4,0],[0,2],[2,4],[4,1],[1,3],[3,0]]",
        "output": "10"
      },
      {
        "input": "n = 7, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0],[0,6],[1,5],[2,4]]",
        "output": "7"
      },
      {
        "input": "n = 7, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0],[0,2],[2,4],[4,6],[6,1],[1,3],[3,5],[5,0]]",
        "output": "14"
      },
      {
        "input": "n = 9, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[0,8],[8,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0]]",
        "output": "18"
      },
      {
        "input": "n = 12, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,0],[0,6],[6,3],[3,9],[9,5],[5,1],[1,7],[7,10],[10,4],[4,8],[8,2],[2,11],[11,0]]",
        "output": "24"
      },
      {
        "input": "n = 15, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0]]",
        "output": "15"
      },
      {
        "input": "n = 5, requests = [[0,1],[1,0],[0,2],[2,0],[0,3],[3,0],[0,4],[4,0],[1,2],[2,1],[1,3],[3,1],[1,4],[4,1],[2,3],[3,2],[2,4],[4,2],[3,4],[4,3]]",
        "output": "20"
      },
      {
        "input": "n = 5, requests = [[0,1],[1,2],[2,3],[3,4],[4,0],[0,2],[1,3],[2,4],[3,0],[4,1]]",
        "output": "10"
      },
      {
        "input": "n = 7, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0],[0,2],[1,3],[2,4],[3,5],[4,6],[5,1],[6,2],[0,3],[1,4],[2,5],[3,6],[4,0],[5,1],[6,2]]",
        "output": "20"
      },
      {
        "input": "n = 4, requests = [[0,1],[1,0],[0,2],[2,0],[0,3],[3,0],[1,2],[2,1],[1,3],[3,1],[2,3],[3,2]]",
        "output": "12"
      },
      {
        "input": "n = 15, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0],[0,3],[3,6],[6,9],[9,12],[12,15],[15,0],[0,4],[4,8],[8,12],[12,0],[0,5],[5,10],[10,15],[15,0]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 5, requests = [[0,1],[1,2],[2,3],[3,4],[4,0],[0,1],[1,2],[2,3],[3,4],[4,0]]",
        "output": "10"
      },
      {
        "input": "n = 5, requests = [[0,1],[0,2],[1,0],[2,0],[1,2],[2,1],[3,4],[4,3]]",
        "output": "8"
      },
      {
        "input": "n = 6, requests = [[0,1],[1,0],[2,3],[3,2],[4,5],[5,4],[0,3],[3,0],[1,4],[4,1],[2,5],[5,2]]",
        "output": "12"
      },
      {
        "input": "n = 4, requests = [[0,1],[1,2],[2,3],[3,0],[0,2],[1,3],[2,0],[3,1]]",
        "output": "8"
      },
      {
        "input": "n = 3, requests = [[0,1],[1,2],[2,0],[0,2],[1,0],[2,1],[0,1],[1,2],[2,0]]",
        "output": "9"
      },
      {
        "input": "n = 10, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]]",
        "output": "10"
      },
      {
        "input": "n = 8, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,2],[2,4],[4,6],[6,1],[1,3],[3,5],[5,7],[7,0]]",
        "output": "16"
      },
      {
        "input": "n = 15, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0],[0,2],[2,4],[4,6],[6,8],[8,10],[10,12],[12,14],[14,1],[1,3],[3,5],[5,7],[7,9],[9,11],[11,13]]",
        "output": "Execution timed out"
      },
      {
        "input": "n = 6, requests = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[0,1],[1,2],[2,3],[3,4],[4,5],[5,0]]",
        "output": "12"
      },
      {
        "input": "n = 5, requests = [[0,1],[1,2],[2,3],[3,4],[4,0],[0,4],[1,3],[2,0]]",
        "output": "5"
      },
      {
        "input": "n = 7, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0],[0,2],[1,3],[2,4],[3,5],[4,6],[5,0],[6,1]]",
        "output": "14"
      },
      {
        "input": "n = 6, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,3],[3,1],[1,4],[4,2],[2,5],[5,3]]",
        "output": "11"
      },
      {
        "input": "n = 10, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,2],[2,4],[4,6],[6,8],[8,1],[1,3],[3,5],[5,7],[7,9],[9,1]]",
        "output": "19"
      },
      {
        "input": "n = 8, requests = [[0,7],[7,1],[1,6],[6,2],[2,5],[5,3],[3,4],[4,0],[0,2],[2,4],[4,6],[6,0]]",
        "output": "12"
      },
      {
        "input": "n = 6, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[1,3],[2,4],[3,5]]",
        "output": "12"
      },
      {
        "input": "n = 6, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,3],[3,1],[1,4],[4,2],[2,5],[5,0]]",
        "output": "12"
      },
      {
        "input": "n = 10, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,5],[1,6],[2,7],[3,8],[4,9]]",
        "output": "10"
      },
      {
        "input": "n = 15, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0],[0,7],[7,12],[12,5]]",
        "output": "15"
      },
      {
        "input": "n = 5, requests = [[0,1],[0,1],[1,0],[1,0],[0,2],[2,0],[1,2],[2,1],[0,3],[3,0],[1,3],[3,1],[2,3],[3,2],[0,4],[4,0],[1,4],[4,1],[2,4],[4,2],[3,4],[4,3]]",
        "output": "22"
      },
      {
        "input": "n = 18, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,0],[0,9],[9,15],[15,3]]",
        "output": "18"
      },
      {
        "input": "n = 14, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,0],[0,7],[7,14],[14,7],[7,0],[0,7],[0,13],[13,6],[6,2],[2,8],[8,10],[10,5],[5,3],[3,11],[11,9],[9,4],[4,12],[12,1],[1,14]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 8, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,3],[1,4],[2,5],[3,6],[4,7],[5,1],[6,2],[7,3]]",
        "output": "15"
      },
      {
        "input": "n = 10, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,3],[3,6],[6,9]]",
        "output": "10"
      },
      {
        "input": "n = 12, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,0],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,1],[11,2]]",
        "output": "23"
      },
      {
        "input": "n = 5, requests = [[0,1],[1,2],[2,3],[3,4],[4,0],[0,4],[4,3],[3,2],[2,1],[1,0]]",
        "output": "10"
      },
      {
        "input": "n = 7, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0],[0,2],[1,3],[2,4],[3,5],[4,6],[5,1],[6,2]]",
        "output": "13"
      },
      {
        "input": "n = 6, requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[0,2],[2,4],[4,1],[1,3],[3,5],[5,3]]",
        "output": "10"
      }
    ]
  },
  {
    "id": 668,
    "difficulty": "Hard",
    "tags": [
      "Math",
      "Binary Search"
    ],
    "problemDescription": "Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).\nGiven three integers m, n, and k, return the kth smallest element in the m x n multiplication table.\n\u00a0\nExample 1:\n\n\nInput: m = 3, n = 3, k = 5\nOutput: 3\nExplanation: The 5th smallest number is 3.\n\nExample 2:\n\n\nInput: m = 2, n = 3, k = 6\nOutput: 6\nExplanation: The 6th smallest number is 6.\n\n\u00a0\nConstraints:\n\n1 <= m, n <= 3 * 104\n1 <= k <= m * n\n\n",
    "starterCode": "class Solution:\n    def findKthNumber(self, m: int, n: int, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "m = 3, n = 3, k = 5",
        "output": "3"
      },
      {
        "input": "m = 10, n = 10, k = 25",
        "output": "10"
      },
      {
        "input": "m = 5, n = 5, k = 1",
        "output": "1"
      },
      {
        "input": "m = 4, n = 4, k = 10",
        "output": "6"
      },
      {
        "input": "m = 4, n = 4, k = 8",
        "output": "4"
      },
      {
        "input": "m = 30000, n = 30000, k = 10000",
        "output": "1358"
      },
      {
        "input": "m = 2, n = 3, k = 6",
        "output": "6"
      },
      {
        "input": "m = 5, n = 6, k = 15",
        "output": "8"
      },
      {
        "input": "m = 30000, n = 30000, k = 100",
        "output": "28"
      },
      {
        "input": "m = 1, n = 1, k = 1",
        "output": "1"
      },
      {
        "input": "m = 4, n = 4, k = 7",
        "output": "4"
      },
      {
        "input": "m = 1, n = 30000, k = 15000",
        "output": "15000"
      },
      {
        "input": "m = 1000, n = 1, k = 500",
        "output": "500"
      },
      {
        "input": "m = 12345, n = 6789, k = 5000000",
        "output": "906384"
      },
      {
        "input": "m = 12000, n = 12000, k = 71999999",
        "output": "26888084"
      },
      {
        "input": "m = 9999, n = 9999, k = 99980001",
        "output": "99980001"
      },
      {
        "input": "m = 10000, n = 10, k = 5000",
        "output": "1709"
      },
      {
        "input": "m = 10, n = 1, k = 5",
        "output": "5"
      },
      {
        "input": "m = 9999, n = 10000, k = 49995000",
        "output": "18671202"
      },
      {
        "input": "m = 5000, n = 5000, k = 12500000",
        "output": "4669497"
      },
      {
        "input": "m = 10, n = 10000, k = 5000",
        "output": "1709"
      },
      {
        "input": "m = 15000, n = 15000, k = 11250000",
        "output": "1961750"
      },
      {
        "input": "m = 10000, n = 10000, k = 50000000",
        "output": "18673076"
      },
      {
        "input": "m = 8000, n = 8000, k = 39999999",
        "output": "17356893"
      },
      {
        "input": "m = 7, n = 9, k = 45",
        "output": "27"
      },
      {
        "input": "m = 10, n = 15, k = 45",
        "output": "18"
      },
      {
        "input": "m = 25000, n = 25000, k = 6250000",
        "output": "821997"
      },
      {
        "input": "m = 5000, n = 20000, k = 1000000",
        "output": "132820"
      },
      {
        "input": "m = 10000, n = 15000, k = 2000000",
        "output": "275724"
      },
      {
        "input": "m = 10000, n = 10000, k = 99999999",
        "output": "99990000"
      },
      {
        "input": "m = 7, n = 7, k = 49",
        "output": "49"
      },
      {
        "input": "m = 12345, n = 67890, k = 4567890",
        "output": "553668"
      },
      {
        "input": "m = 300, n = 100, k = 28000",
        "output": "19899"
      },
      {
        "input": "m = 7500, n = 2500, k = 18749999",
        "output": "18747500"
      },
      {
        "input": "m = 1000, n = 30000, k = 2999900",
        "output": "617430"
      },
      {
        "input": "m = 30000, n = 1, k = 29999",
        "output": "29999"
      },
      {
        "input": "m = 200, n = 100, k = 19900",
        "output": "18145"
      },
      {
        "input": "m = 250, n = 250, k = 12500",
        "output": "3210"
      },
      {
        "input": "m = 1, n = 30000, k = 30000",
        "output": "30000"
      },
      {
        "input": "m = 100, n = 50, k = 2500",
        "output": "969"
      },
      {
        "input": "m = 30000, n = 1000, k = 2999900",
        "output": "617430"
      },
      {
        "input": "m = 20000, n = 25000, k = 4000000",
        "output": "509960"
      },
      {
        "input": "m = 30000, n = 25000, k = 7500000",
        "output": "986034"
      },
      {
        "input": "m = 1, n = 10, k = 5",
        "output": "5"
      },
      {
        "input": "m = 15000, n = 20000, k = 500000",
        "output": "53798"
      },
      {
        "input": "m = 15000, n = 20000, k = 900000",
        "output": "102087"
      },
      {
        "input": "m = 30000, n = 30000, k = 8999999",
        "output": "1182788"
      },
      {
        "input": "m = 3000, n = 1000, k = 2999000",
        "output": "2925000"
      },
      {
        "input": "m = 15000, n = 20000, k = 1500000",
        "output": "180253"
      },
      {
        "input": "m = 8, n = 7, k = 28",
        "output": "14"
      },
      {
        "input": "m = 2500, n = 2500, k = 3125000",
        "output": "1167987"
      },
      {
        "input": "m = 10000, n = 10000, k = 100000000",
        "output": "100000000"
      },
      {
        "input": "m = 30000, n = 1, k = 15000",
        "output": "15000"
      },
      {
        "input": "m = 12345, n = 6789, k = 500000",
        "output": "62055"
      },
      {
        "input": "m = 10000, n = 10000, k = 9999999",
        "output": "2047629"
      },
      {
        "input": "m = 8000, n = 4000, k = 3199999",
        "output": "655946"
      },
      {
        "input": "m = 30000, n = 15000, k = 449999999",
        "output": "449985000"
      },
      {
        "input": "m = 7, n = 11, k = 45",
        "output": "24"
      },
      {
        "input": "m = 15000, n = 15000, k = 5625000",
        "output": "858635"
      },
      {
        "input": "m = 5000, n = 5000, k = 12345678",
        "output": "4578057"
      },
      {
        "input": "m = 15000, n = 25000, k = 500000",
        "output": "52647"
      },
      {
        "input": "m = 10, n = 10, k = 99",
        "output": "90"
      },
      {
        "input": "m = 20000, n = 20000, k = 39999999",
        "output": "8185453"
      },
      {
        "input": "m = 10000, n = 10000, k = 1",
        "output": "1"
      },
      {
        "input": "m = 30, n = 30, k = 400",
        "output": "153"
      },
      {
        "input": "m = 20000, n = 15000, k = 2999999",
        "output": "395392"
      },
      {
        "input": "m = 20, n = 25, k = 400",
        "output": "234"
      },
      {
        "input": "m = 2500, n = 7500, k = 9375000",
        "output": "3502712"
      },
      {
        "input": "m = 5000, n = 5000, k = 1250000",
        "output": "218673"
      },
      {
        "input": "m = 150, n = 200, k = 14999",
        "output": "5684"
      },
      {
        "input": "m = 100, n = 50, k = 2499",
        "output": "968"
      },
      {
        "input": "m = 12345, n = 6789, k = 83245678",
        "output": "74281625"
      },
      {
        "input": "m = 100, n = 200, k = 10000",
        "output": "3807"
      },
      {
        "input": "m = 25000, n = 25000, k = 12500000",
        "output": "1833387"
      },
      {
        "input": "m = 7, n = 8, k = 28",
        "output": "14"
      },
      {
        "input": "m = 7, n = 10, k = 50",
        "output": "30"
      },
      {
        "input": "m = 10, n = 5, k = 20",
        "output": "10"
      },
      {
        "input": "m = 50, n = 75, k = 2000",
        "output": "810"
      },
      {
        "input": "m = 15000, n = 15000, k = 10000000",
        "output": "1701960"
      },
      {
        "input": "m = 1, n = 30000, k = 25000",
        "output": "25000"
      },
      {
        "input": "m = 1, n = 30000, k = 20000",
        "output": "20000"
      },
      {
        "input": "m = 20000, n = 15000, k = 200000000",
        "output": "91383084"
      },
      {
        "input": "m = 3000, n = 2500, k = 7499999",
        "output": "7497500"
      },
      {
        "input": "m = 100, n = 100, k = 4950",
        "output": "1887"
      },
      {
        "input": "m = 15, n = 20, k = 100",
        "output": "36"
      },
      {
        "input": "m = 20000, n = 15000, k = 1000000",
        "output": "114741"
      },
      {
        "input": "m = 15000, n = 15000, k = 1000000",
        "output": "118734"
      },
      {
        "input": "m = 25000, n = 5000, k = 2000000",
        "output": "284382"
      },
      {
        "input": "m = 30000, n = 30000, k = 9000000",
        "output": "1182788"
      },
      {
        "input": "m = 30000, n = 1, k = 30000",
        "output": "30000"
      },
      {
        "input": "m = 15000, n = 20000, k = 2999999",
        "output": "395392"
      },
      {
        "input": "m = 500, n = 500, k = 125000",
        "output": "46917"
      },
      {
        "input": "m = 100, n = 100, k = 5000",
        "output": "1917"
      },
      {
        "input": "m = 100, n = 100, k = 4900",
        "output": "1856"
      },
      {
        "input": "m = 1500, n = 2000, k = 1500000",
        "output": "560898"
      }
    ]
  },
  {
    "id": 2398,
    "difficulty": "Hard",
    "tags": [
      "Queue",
      "Array",
      "Binary Search",
      "Prefix Sum",
      "Sliding Window",
      "Monotonic Queue",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.\nThe total cost of running k chosen robots is equal to max(chargeTimes) + k * sum(runningCosts), where max(chargeTimes) is the largest charge cost among the k robots and sum(runningCosts) is the sum of running costs among the k robots.\nReturn the maximum number of consecutive robots you can run such that the total cost does not exceed budget.\n\u00a0\nExample 1:\n\nInput: chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25\nOutput: 3\nExplanation: \nIt is possible to run all individual and consecutive pairs of robots within budget.\nTo obtain answer 3, consider the first 3 robots. The total cost will be max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25.\nIt can be shown that it is not possible to run more than 3 consecutive robots within budget, so we return 3.\n\nExample 2:\n\nInput: chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19\nOutput: 0\nExplanation: No robot can be run that does not exceed the budget, so we return 0.\n\n\u00a0\nConstraints:\n\nchargeTimes.length == runningCosts.length == n\n1 <= n <= 5 * 104\n1 <= chargeTimes[i], runningCosts[i] <= 105\n1 <= budget <= 1015\n\n",
    "starterCode": "class Solution:\n    def maximumRobots(self, chargeTimes: List[int], runningCosts: List[int], budget: int) -> int:\n        ",
    "testCases": [
      {
        "input": "chargeTimes = [7,1,3,9,2], runningCosts = [8,6,4,5,0], budget = 30",
        "output": "2"
      },
      {
        "input": "chargeTimes = [1,1,1,1,1], runningCosts = [100000,100000,100000,100000,100000], budget = 500000",
        "output": "2"
      },
      {
        "input": "chargeTimes = [7,7,7,7], runningCosts = [1,1,1,1], budget = 20",
        "output": "3"
      },
      {
        "input": "chargeTimes = [100000,100000,100000,100000,100000], runningCosts = [100000,100000,100000,100000,100000], budget = 1000000000000",
        "output": "5"
      },
      {
        "input": "chargeTimes = [1,2,3,4,5], runningCosts = [1,2,3,4,5], budget = 20",
        "output": "2"
      },
      {
        "input": "chargeTimes = [100000,100000,100000], runningCosts = [1,1,1], budget = 300001",
        "output": "3"
      },
      {
        "input": "chargeTimes = [5,11,2,7], runningCosts = [3,9,1,10], budget = 30",
        "output": "2"
      },
      {
        "input": "chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19",
        "output": "0"
      },
      {
        "input": "chargeTimes = [1,2,3], runningCosts = [10,20,30], budget = 100",
        "output": "2"
      },
      {
        "input": "chargeTimes = [1,2,3,4,5], runningCosts = [5,4,3,2,1], budget = 20",
        "output": "2"
      },
      {
        "input": "chargeTimes = [5,5,5,5,5], runningCosts = [1,1,1,1,1], budget = 15",
        "output": "3"
      },
      {
        "input": "chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25",
        "output": "3"
      },
      {
        "input": "chargeTimes = [100000,100000,100000], runningCosts = [100000,100000,100000], budget = 100000000000",
        "output": "3"
      },
      {
        "input": "chargeTimes = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500], runningCosts = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], budget = 500",
        "output": "4"
      },
      {
        "input": "chargeTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], runningCosts = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], budget = 50",
        "output": "4"
      },
      {
        "input": "chargeTimes = [1, 3, 2, 4, 5, 3, 2, 1, 4, 5], runningCosts = [5, 1, 4, 2, 3, 5, 1, 4, 2, 3], budget = 25",
        "output": "3"
      },
      {
        "input": "chargeTimes = [9, 8, 7, 6, 5, 4, 3, 2, 1], runningCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1], budget = 20",
        "output": "4"
      },
      {
        "input": "chargeTimes = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], runningCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], budget = 30",
        "output": "4"
      },
      {
        "input": "chargeTimes = [1,3,5,7,9,11,13,15,17,19], runningCosts = [19,17,15,13,11,9,7,5,3,1], budget = 100",
        "output": "4"
      },
      {
        "input": "chargeTimes = [1,2,3,4,5,6,7,8,9,10], runningCosts = [1,1,1,1,1,1,1,1,1,1], budget = 10",
        "output": "2"
      },
      {
        "input": "chargeTimes = [20,10,15,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], runningCosts = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], budget = 300",
        "output": "7"
      },
      {
        "input": "chargeTimes = [3,6,1,3,4,5,7,8,9,10,2,11,12,13,14,15,16,17,18,19,20], runningCosts = [2,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21], budget = 100",
        "output": "5"
      },
      {
        "input": "chargeTimes = [9, 8, 7, 6, 5, 4, 3, 2, 1], runningCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9], budget = 40",
        "output": "3"
      },
      {
        "input": "chargeTimes = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], runningCosts = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], budget = 20",
        "output": "4"
      },
      {
        "input": "chargeTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], runningCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], budget = 300",
        "output": "10"
      },
      {
        "input": "chargeTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], runningCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], budget = 1000",
        "output": "10"
      },
      {
        "input": "chargeTimes = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], runningCosts = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], budget = 500",
        "output": "9"
      },
      {
        "input": "chargeTimes = [3, 7, 9, 8, 5, 6, 2, 4], runningCosts = [10, 8, 5, 3, 9, 6, 7, 2], budget = 50",
        "output": "2"
      },
      {
        "input": "chargeTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], runningCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], budget = 100",
        "output": "5"
      },
      {
        "input": "chargeTimes = [10,20,30,40,50], runningCosts = [5,15,25,35,45], budget = 500",
        "output": "4"
      },
      {
        "input": "chargeTimes = [10, 15, 20, 25, 30], runningCosts = [1, 2, 3, 4, 5], budget = 50",
        "output": "3"
      },
      {
        "input": "chargeTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], runningCosts = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000], budget = 500005",
        "output": "2"
      },
      {
        "input": "chargeTimes = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], runningCosts = [25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], budget = 500",
        "output": "9"
      },
      {
        "input": "chargeTimes = [1,2,3,4,5,6,7,8,9,10], runningCosts = [10,9,8,7,6,5,4,3,2,1], budget = 50",
        "output": "4"
      },
      {
        "input": "chargeTimes = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], runningCosts = [100,90,80,70,60,50,40,30,20,10,100,90,80,70,60], budget = 250",
        "output": "3"
      },
      {
        "input": "chargeTimes = [100,200,300,400,500], runningCosts = [5,5,5,5,5], budget = 1500",
        "output": "5"
      },
      {
        "input": "chargeTimes = [10,9,8,7,6,5,4,3,2,1], runningCosts = [1,1,1,1,1,1,1,1,1,1], budget = 30",
        "output": "5"
      },
      {
        "input": "chargeTimes = [3, 6, 1, 3, 4, 9, 12, 8, 10, 5], runningCosts = [2, 1, 3, 4, 5, 1, 2, 3, 4, 5], budget = 100",
        "output": "5"
      },
      {
        "input": "chargeTimes = [1, 2, 3, 4, 5], runningCosts = [10000, 10000, 10000, 10000, 10000], budget = 50000",
        "output": "2"
      },
      {
        "input": "chargeTimes = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], runningCosts = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], budget = 500",
        "output": "9"
      },
      {
        "input": "chargeTimes = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], runningCosts = [5, 9, 2, 6, 5, 3, 5, 9, 1, 4, 1], budget = 150",
        "output": "6"
      },
      {
        "input": "chargeTimes = [10000,20000,30000,40000,50000], runningCosts = [1000,2000,3000,4000,5000], budget = 100000",
        "output": "4"
      },
      {
        "input": "chargeTimes = [100000, 100000, 100000, 100000, 100000], runningCosts = [1, 1, 1, 1, 1], budget = 500005",
        "output": "5"
      },
      {
        "input": "chargeTimes = [10,15,20,25,30,35,40,45,50,55,60], runningCosts = [5,10,15,20,25,30,35,40,45,50,55], budget = 1000",
        "output": "6"
      },
      {
        "input": "chargeTimes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], runningCosts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], budget = 10000",
        "output": "10"
      },
      {
        "input": "chargeTimes = [1,2,3,4,5,6,7,8,9,10], runningCosts = [10,9,8,7,6,5,4,3,2,1], budget = 100",
        "output": "5"
      },
      {
        "input": "chargeTimes = [1,10,100,1000,10000], runningCosts = [1,10,100,1000,10000], budget = 111111",
        "output": "5"
      },
      {
        "input": "chargeTimes = [9,8,7,6,5,4,3,2,1], runningCosts = [1,2,3,4,5,6,7,8,9], budget = 50",
        "output": "4"
      },
      {
        "input": "chargeTimes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], runningCosts = [19, 17, 15, 13, 11, 9, 7, 5, 3, 1], budget = 1000",
        "output": "9"
      },
      {
        "input": "chargeTimes = [1,2,3,4,5,6,7,8,9,10], runningCosts = [10,9,8,7,6,5,4,3,2,1], budget = 55",
        "output": "4"
      },
      {
        "input": "chargeTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], runningCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], budget = 5",
        "output": "2"
      },
      {
        "input": "chargeTimes = [5,6,7,8,9,10,11,12,13,14,15], runningCosts = [15,14,13,12,11,10,9,8,7,6,5], budget = 100",
        "output": "3"
      },
      {
        "input": "chargeTimes = [100, 200, 300, 400, 500], runningCosts = [5, 10, 15, 20, 25], budget = 1000",
        "output": "5"
      },
      {
        "input": "chargeTimes = [5,5,5,5,5,5,5,5,5,5], runningCosts = [1,1,1,1,1,1,1,1,1,1], budget = 25",
        "output": "4"
      },
      {
        "input": "chargeTimes = [9,9,9,9,9,9,9,9,9,9], runningCosts = [1,2,3,4,5,6,7,8,9,10], budget = 45",
        "output": "3"
      },
      {
        "input": "chargeTimes = [50,25,75,100,125,200,150,225,300,350], runningCosts = [10,20,30,40,50,60,70,80,90,100], budget = 1000",
        "output": "5"
      },
      {
        "input": "chargeTimes = [3,3,3,3,3,3,3,3,3,3], runningCosts = [1,1,1,1,1,1,1,1,1,1], budget = 10",
        "output": "2"
      },
      {
        "input": "chargeTimes = [1,1,1,1,1,1,1,1,1,1], runningCosts = [1,1,1,1,1,1,1,1,1,1], budget = 5",
        "output": "2"
      },
      {
        "input": "chargeTimes = [1, 5, 1, 5, 1, 5], runningCosts = [1, 1, 1, 1, 1, 1], budget = 12",
        "output": "2"
      },
      {
        "input": "chargeTimes = [100000,99999,99998,99997,99996,99995,99994,99993,99992,99991], runningCosts = [1,1,1,1,1,1,1,1,1,1], budget = 1000000",
        "output": "10"
      },
      {
        "input": "chargeTimes = [5,15,10,20,25,30,35,40,45,50], runningCosts = [1,2,3,4,5,6,7,8,9,10], budget = 100",
        "output": "5"
      },
      {
        "input": "chargeTimes = [50, 40, 30, 20, 10], runningCosts = [1, 2, 3, 4, 5], budget = 100",
        "output": "4"
      },
      {
        "input": "chargeTimes = [9, 8, 7, 6, 5, 4, 3, 2, 1], runningCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9], budget = 45",
        "output": "3"
      },
      {
        "input": "chargeTimes = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], runningCosts = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], budget = 10",
        "output": "3"
      },
      {
        "input": "chargeTimes = [50,40,30,20,10], runningCosts = [1,2,3,4,5], budget = 200",
        "output": "5"
      },
      {
        "input": "chargeTimes = [100000, 100000, 100000, 100000, 100000], runningCosts = [100000, 100000, 100000, 100000, 100000], budget = 500000",
        "output": "2"
      },
      {
        "input": "chargeTimes = [100,200,300,400,500], runningCosts = [50,40,30,20,10], budget = 1000",
        "output": "4"
      },
      {
        "input": "chargeTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], runningCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], budget = 100",
        "output": "5"
      },
      {
        "input": "chargeTimes = [10,20,30,40,50,60,70,80,90,100], runningCosts = [100,90,80,70,60,50,40,30,20,10], budget = 500",
        "output": "4"
      },
      {
        "input": "chargeTimes = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000], runningCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], budget = 5000010",
        "output": "10"
      },
      {
        "input": "chargeTimes = [10,20,30,40,50], runningCosts = [1,2,3,4,5], budget = 100",
        "output": "4"
      },
      {
        "input": "chargeTimes = [1000,900,800,700,600,500,400,300,200,100], runningCosts = [15,14,13,12,11,10,9,8,7,6], budget = 300",
        "output": "2"
      },
      {
        "input": "chargeTimes = [1,3,5,7,9,11,13,15,17,19], runningCosts = [19,17,15,13,11,9,7,5,3,1], budget = 50",
        "output": "3"
      },
      {
        "input": "chargeTimes = [100,200,300,400,500,600], runningCosts = [1,2,3,4,5,6], budget = 1500",
        "output": "6"
      },
      {
        "input": "chargeTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], runningCosts = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], budget = 100",
        "output": "5"
      },
      {
        "input": "chargeTimes = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], runningCosts = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5], budget = 100",
        "output": "5"
      },
      {
        "input": "chargeTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], runningCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], budget = 15",
        "output": "3"
      },
      {
        "input": "chargeTimes = [1,3,5,7,9,11,13,15,17,19], runningCosts = [10,20,30,40,50,60,70,80,90,100], budget = 500",
        "output": "4"
      },
      {
        "input": "chargeTimes = [9, 7, 5, 11, 13, 2, 8], runningCosts = [4, 8, 12, 16, 20, 24, 28], budget = 100",
        "output": "3"
      },
      {
        "input": "chargeTimes = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75], runningCosts = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], budget = 1500",
        "output": "13"
      },
      {
        "input": "chargeTimes = [1,3,5,7,9,11,13,15,17,19], runningCosts = [10,9,8,7,6,5,4,3,2,1], budget = 50",
        "output": "3"
      },
      {
        "input": "chargeTimes = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], runningCosts = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], budget = 50",
        "output": "4"
      },
      {
        "input": "chargeTimes = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], runningCosts = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], budget = 100",
        "output": "5"
      },
      {
        "input": "chargeTimes = [1,1,1,1,1,1,1,1,1,1], runningCosts = [1,1,1,1,1,1,1,1,1,1], budget = 10",
        "output": "3"
      },
      {
        "input": "chargeTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], runningCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], budget = 20",
        "output": "4"
      },
      {
        "input": "chargeTimes = [1, 3, 2, 5, 4], runningCosts = [5, 3, 6, 2, 4], budget = 20",
        "output": "2"
      },
      {
        "input": "chargeTimes = [9,8,7,6,5,4,3,2,1], runningCosts = [1,2,3,4,5,6,7,8,9], budget = 100",
        "output": "5"
      },
      {
        "input": "chargeTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], runningCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], budget = 200",
        "output": "6"
      },
      {
        "input": "chargeTimes = [10, 20, 30, 40, 50, 60, 70], runningCosts = [1, 2, 3, 4, 5, 6, 7], budget = 200",
        "output": "6"
      },
      {
        "input": "chargeTimes = [50,40,30,20,10], runningCosts = [1,2,3,4,5], budget = 300",
        "output": "5"
      },
      {
        "input": "chargeTimes = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], runningCosts = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], budget = 150",
        "output": "6"
      },
      {
        "input": "chargeTimes = [9,8,7,6,5,4,3,2,1], runningCosts = [1,2,3,4,5,6,7,8,9], budget = 30",
        "output": "3"
      },
      {
        "input": "chargeTimes = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000], runningCosts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], budget = 1000000",
        "output": "10"
      },
      {
        "input": "chargeTimes = [100000, 90000, 80000, 70000, 60000], runningCosts = [10000, 9000, 8000, 7000, 6000], budget = 10000000",
        "output": "5"
      },
      {
        "input": "chargeTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], runningCosts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], budget = 250",
        "output": "3"
      },
      {
        "input": "chargeTimes = [100,90,80,70,60,50,40,30,20,10], runningCosts = [1,1,1,1,1,1,1,1,1,1], budget = 200",
        "output": "10"
      },
      {
        "input": "chargeTimes = [3,5,7,9,11,13,15,17,19,21,23,25], runningCosts = [25,23,21,19,17,15,13,11,9,7,5,3], budget = 200",
        "output": "5"
      },
      {
        "input": "chargeTimes = [20, 18, 15, 12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], runningCosts = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], budget = 100",
        "output": "4"
      },
      {
        "input": "chargeTimes = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50], runningCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], budget = 100",
        "output": "7"
      },
      {
        "input": "chargeTimes = [100000,100000,100000,100000,100000], runningCosts = [1,1,1,1,1], budget = 500000",
        "output": "5"
      },
      {
        "input": "chargeTimes = [1000,2000,3000,4000,5000], runningCosts = [5,5,5,5,5], budget = 10000",
        "output": "5"
      },
      {
        "input": "chargeTimes = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31], runningCosts = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], budget = 300",
        "output": "16"
      },
      {
        "input": "chargeTimes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], runningCosts = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], budget = 500",
        "output": "10"
      },
      {
        "input": "chargeTimes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], runningCosts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], budget = 500",
        "output": "4"
      },
      {
        "input": "chargeTimes = [10,20,30,40,50,60,70,80,90,100], runningCosts = [1,2,3,4,5,6,7,8,9,10], budget = 150",
        "output": "5"
      },
      {
        "input": "chargeTimes = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], runningCosts = [9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3], budget = 200",
        "output": "6"
      },
      {
        "input": "chargeTimes = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], runningCosts = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], budget = 250",
        "output": "7"
      },
      {
        "input": "chargeTimes = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], runningCosts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], budget = 50",
        "output": "4"
      }
    ]
  },
  {
    "id": 936,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Greedy",
      "Queue",
      "String"
    ],
    "problemDescription": "You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.\nIn one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.\n\nFor example, if stamp = \"abc\" and target = \"abcba\", then s is \"?????\" initially. In one turn you can:\n\n\t\nplace stamp at index 0 of s to obtain \"abc??\",\nplace stamp at index 1 of s to obtain \"?abc?\", or\nplace stamp at index 2 of s to obtain \"??abc\".\n\n\tNote that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).\n\nWe want to convert s to target using at most 10 * target.length turns.\nReturn an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.\n\u00a0\nExample 1:\n\nInput: stamp = \"abc\", target = \"ababc\"\nOutput: [0,2]\nExplanation: Initially s = \"?????\".\n- Place stamp at index 0 to get \"abc??\".\n- Place stamp at index 2 to get \"ababc\".\n[1,0,2] would also be accepted as an answer, as well as some other answers.\n\nExample 2:\n\nInput: stamp = \"abca\", target = \"aabcaca\"\nOutput: [3,0,1]\nExplanation: Initially s = \"???????\".\n- Place stamp at index 3 to get \"???abca\".\n- Place stamp at index 0 to get \"abcabca\".\n- Place stamp at index 1 to get \"aabcaca\".\n\n\u00a0\nConstraints:\n\n1 <= stamp.length <= target.length <= 1000\nstamp and target consist of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def movesToStamp(self, stamp: str, target: str) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "stamp = \"world\", target = \"worldworldworld\"",
        "output": "[9, 8, 7, 6, 4, 3, 2, 1, 10, 5, 0]"
      },
      {
        "input": "stamp = \"abc\", target = \"abcababcbcababc\"",
        "output": "[11, 9, 8, 6, 4, 2, 1, 10, 7, 3, 12, 5, 0]"
      },
      {
        "input": "stamp = \"abcde\", target = \"abcdeabcde\"",
        "output": "[4, 3, 2, 1, 5, 0]"
      },
      {
        "input": "stamp = \"abc\", target = \"abc????\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"a\", target = \"aaaaaaaa\"",
        "output": "[7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "stamp = \"abcde\", target = \"abcdeabcdeabcde\"",
        "output": "[9, 8, 7, 6, 4, 3, 2, 1, 10, 5, 0]"
      },
      {
        "input": "stamp = \"abc\", target = \"????abc???\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abc\", target = \"abcabc????????\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abc\", target = \"?????\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abc\", target = \"ab?bc\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"hello\", target = \"hellohellohello\"",
        "output": "[9, 8, 7, 6, 4, 3, 2, 1, 10, 5, 0]"
      },
      {
        "input": "stamp = \"abc\", target = \"abc????abc\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"ab\", target = \"abababab\"",
        "output": "[5, 3, 1, 6, 4, 2, 0]"
      },
      {
        "input": "stamp = \"abcdef\", target = \"abcdefabcdef\"",
        "output": "[5, 4, 3, 2, 1, 6, 0]"
      },
      {
        "input": "stamp = \"a\", target = \"aaaaaaaaa\"",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "stamp = \"abc\", target = \"abcabcabc\"",
        "output": "[5, 4, 2, 1, 6, 3, 0]"
      },
      {
        "input": "stamp = \"abc\", target = \"abc????????abc\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abc\", target = \"abcabc\"",
        "output": "[2, 1, 3, 0]"
      },
      {
        "input": "stamp = \"a\", target = \"aaaaaaaaaa\"",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "stamp = \"test\", target = \"testtesttest\"",
        "output": "[7, 6, 5, 3, 2, 1, 8, 4, 0]"
      },
      {
        "input": "stamp = \"abcd\", target = \"abcdabcd\"",
        "output": "[3, 2, 1, 4, 0]"
      },
      {
        "input": "stamp = \"abca\", target = \"aabcaca\"",
        "output": "[2, 3, 0, 1]"
      },
      {
        "input": "stamp = \"abc\", target = \"????abc\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abc\", target = \"??abc??\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abc\", target = \"ababc\"",
        "output": "[1, 0, 2]"
      },
      {
        "input": "stamp = \"xyz\", target = \"xyzxyzxyz\"",
        "output": "[5, 4, 2, 1, 6, 3, 0]"
      },
      {
        "input": "stamp = \"abc\", target = \"????????abcabc\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abc\", target = \"abcabcabcabcabc\"",
        "output": "[11, 10, 8, 7, 5, 4, 2, 1, 12, 9, 6, 3, 0]"
      },
      {
        "input": "stamp = \"abcde\", target = \"abcde\"",
        "output": "[0]"
      },
      {
        "input": "stamp = \"abc\", target = \"ababcbababcbababc\"",
        "output": "[11, 9, 5, 3, 13, 10, 7, 4, 1, 12, 6, 0, 14, 8, 2]"
      },
      {
        "input": "stamp = \"mnopqr\", target = \"mnopqrmnopqrmnopqrmnopqrmnopqr\"",
        "output": "[23, 22, 21, 20, 19, 17, 16, 15, 14, 13, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 24, 18, 12, 6, 0]"
      },
      {
        "input": "stamp = \"efgh\", target = \"efghefghefghefghefghefghefgh\"",
        "output": "[23, 22, 21, 19, 18, 17, 15, 14, 13, 11, 10, 9, 7, 6, 5, 3, 2, 1, 24, 20, 16, 12, 8, 4, 0]"
      },
      {
        "input": "stamp = \"aabbcc\", target = \"aabbccaaabbccaaabbcc\"",
        "output": "[11, 10, 9, 8, 4, 3, 2, 1, 13, 12, 6, 5, 14, 7, 0]"
      },
      {
        "input": "stamp = \"abcd\", target = \"ddddddddddddddddddddddddddddabcd\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"xyz\", target = \"xyxyxyxyxyxyxyxyxyxy\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"zzz\", target = \"zzzzzzzzzzzzzzzzzzzz\"",
        "output": "[17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "stamp = \"abcdef\", target = \"abcdefabcdefabcdefabcdefabcdefabcdef\"",
        "output": "[29, 28, 27, 26, 25, 23, 22, 21, 20, 19, 17, 16, 15, 14, 13, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 30, 24, 18, 12, 6, 0]"
      },
      {
        "input": "stamp = \"xyz\", target = \"xyxyxyxyxyxyxyxyxyxyxyx\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abcabc\", target = \"abcabcabcabcabcabcabcd\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"aabbcc\", target = \"aabbccaaabbccaaabbccaaabbcc\"",
        "output": "[18, 17, 16, 15, 11, 10, 9, 8, 4, 3, 2, 1, 20, 19, 13, 12, 6, 5, 21, 14, 7, 0]"
      },
      {
        "input": "stamp = \"xyz\", target = \"xyzxyzxyzxyzxyz\"",
        "output": "[11, 10, 8, 7, 5, 4, 2, 1, 12, 9, 6, 3, 0]"
      },
      {
        "input": "stamp = \"abcd\", target = \"abcdabcdeabcdabcd\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"aaaa\", target = \"aaaaaaaaaaaaaaaa\"",
        "output": "[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "stamp = \"abcde\", target = \"abcdeabcdeabcdeabcdef\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abc\", target = \"xyzabcxyzabcxyz\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abcd\", target = \"abcdabcdabcdabcd\"",
        "output": "[11, 10, 9, 7, 6, 5, 3, 2, 1, 12, 8, 4, 0]"
      },
      {
        "input": "stamp = \"xyz\", target = \"xyzxyzxyzxyz\"",
        "output": "[8, 7, 5, 4, 2, 1, 9, 6, 3, 0]"
      },
      {
        "input": "stamp = \"qrstuv\", target = \"qrstuvqrstuvqrstuvqrstuvqrstuvqrstuvqrstuv\"",
        "output": "[35, 34, 33, 32, 31, 29, 28, 27, 26, 25, 23, 22, 21, 20, 19, 17, 16, 15, 14, 13, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 36, 30, 24, 18, 12, 6, 0]"
      },
      {
        "input": "stamp = \"aaa\", target = \"aaaaaaaaaaaaaaaaaaaa\"",
        "output": "[17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "stamp = \"a\", target = \"aaaaaaaaaaaaaaaaaaaa\"",
        "output": "[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "stamp = \"xyzabc\", target = \"xyzabcxyzabcxyzabcxyzabc\"",
        "output": "[17, 16, 15, 14, 13, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 18, 12, 6, 0]"
      },
      {
        "input": "stamp = \"abcabc\", target = \"abcabcabcabcabcabcabc\"",
        "output": "[14, 13, 11, 10, 8, 7, 5, 4, 2, 1, 15, 12, 9, 6, 3, 0]"
      },
      {
        "input": "stamp = \"abcde\", target = \"edcbaedcbaedcba\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abcabc\", target = \"abcabcabcabcabcabcabcabc\"",
        "output": "[17, 16, 14, 13, 11, 10, 8, 7, 5, 4, 2, 1, 18, 15, 12, 9, 6, 3, 0]"
      },
      {
        "input": "stamp = \"xyz\", target = \"xyzxyzxyzxyzxyzxyz\"",
        "output": "[14, 13, 11, 10, 8, 7, 5, 4, 2, 1, 15, 12, 9, 6, 3, 0]"
      },
      {
        "input": "stamp = \"qrst\", target = \"qrstqrstqrstqrstqrstqrstqrstqrst\"",
        "output": "[27, 26, 25, 23, 22, 21, 19, 18, 17, 15, 14, 13, 11, 10, 9, 7, 6, 5, 3, 2, 1, 28, 24, 20, 16, 12, 8, 4, 0]"
      },
      {
        "input": "stamp = \"mnop\", target = \"mnopmnopmnopmnopmnopmnopmnopmnop\"",
        "output": "[27, 26, 25, 23, 22, 21, 19, 18, 17, 15, 14, 13, 11, 10, 9, 7, 6, 5, 3, 2, 1, 28, 24, 20, 16, 12, 8, 4, 0]"
      },
      {
        "input": "stamp = \"abc\", target = \"abcabcabcabcabcabc\"",
        "output": "[14, 13, 11, 10, 8, 7, 5, 4, 2, 1, 15, 12, 9, 6, 3, 0]"
      },
      {
        "input": "stamp = \"abac\", target = \"abacabacabacabacabac\"",
        "output": "[15, 14, 13, 11, 10, 9, 7, 6, 5, 3, 2, 1, 16, 12, 8, 4, 0]"
      },
      {
        "input": "stamp = \"abc\", target = \"aaaaaaaaaaabcabcaaaaaaaaaa\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"ab\", target = \"abababababababababab\"",
        "output": "[17, 15, 13, 11, 9, 7, 5, 3, 1, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0]"
      },
      {
        "input": "stamp = \"stamp\", target = \"stampstampstamp\"",
        "output": "[9, 8, 7, 6, 4, 3, 2, 1, 10, 5, 0]"
      },
      {
        "input": "stamp = \"abcdefg\", target = \"abcdefgabcdefgabcdefgabcdefg\"",
        "output": "[20, 19, 18, 17, 16, 15, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 21, 14, 7, 0]"
      },
      {
        "input": "stamp = \"abcde\", target = \"abcdeabcdeabcdeabcdeabc\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abab\", target = \"abababababababab\"",
        "output": "[11, 9, 7, 5, 3, 1, 12, 10, 8, 6, 4, 2, 0]"
      },
      {
        "input": "stamp = \"ab\", target = \"abaabaabaab\"",
        "output": "[7, 4, 1, 8, 5, 2, 9, 6, 3, 0]"
      },
      {
        "input": "stamp = \"hello\", target = \"hellohellohellohello\"",
        "output": "[14, 13, 12, 11, 9, 8, 7, 6, 4, 3, 2, 1, 15, 10, 5, 0]"
      },
      {
        "input": "stamp = \"mnopqr\", target = \"mnopqrnopqrmonpqrnonqrmpnoqrmnoprqmnopqr\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abc\", target = \"ababababababababc\"",
        "output": "[1, 3, 0, 5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 12, 14]"
      },
      {
        "input": "stamp = \"xyzxyz\", target = \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "[29, 28, 26, 25, 23, 22, 20, 19, 17, 16, 14, 13, 11, 10, 8, 7, 5, 4, 2, 1, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, 0]"
      },
      {
        "input": "stamp = \"hello\", target = \"hellohellohellohelloh\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abcd\", target = \"abcabcabcabc\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abcd\", target = \"abcdeabcd\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"mnopqr\", target = \"mnopqrmnopqrmnopqr\"",
        "output": "[11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 12, 6, 0]"
      },
      {
        "input": "stamp = \"aabbcc\", target = \"aabbccaaabbccaaabbccabc\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abcdef\", target = \"fedcbafedcbafedcba\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abcdef\", target = \"abcdefabcdefabcdefabcdef\"",
        "output": "[17, 16, 15, 14, 13, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 18, 12, 6, 0]"
      },
      {
        "input": "stamp = \"stamp\", target = \"stampstampstampstam\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abcdefg\", target = \"abcdefgabcdefgabcdefgabcdefgabcdefgabcdefg\"",
        "output": "[34, 33, 32, 31, 30, 29, 27, 26, 25, 24, 23, 22, 20, 19, 18, 17, 16, 15, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 35, 28, 21, 14, 7, 0]"
      },
      {
        "input": "stamp = \"abcd\", target = \"abcdabcdabcdabcdabcd\"",
        "output": "[15, 14, 13, 11, 10, 9, 7, 6, 5, 3, 2, 1, 16, 12, 8, 4, 0]"
      },
      {
        "input": "stamp = \"abcd\", target = \"abcdabcabcd\"",
        "output": "[6, 5, 3, 2, 1, 4, 7, 0]"
      },
      {
        "input": "stamp = \"xyzyx\", target = \"xyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyxyzyx\"",
        "output": "[67, 66, 65, 63, 62, 61, 59, 58, 57, 55, 54, 53, 51, 50, 49, 47, 46, 45, 43, 42, 41, 39, 38, 37, 35, 34, 33, 31, 30, 29, 27, 26, 25, 23, 22, 21, 19, 18, 17, 15, 14, 13, 11, 10, 9, 7, 6, 5, 3, 2, 1, 68, 64, 60, 56, 52, 48, 44, 40, 36, 32, 28, 24, 20, 16, 12, 8, 4, 0]"
      },
      {
        "input": "stamp = \"ab\", target = \"ababababababababababh\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"abcde\", target = \"abcdeabcdeabcdeabcde\"",
        "output": "[14, 13, 12, 11, 9, 8, 7, 6, 4, 3, 2, 1, 15, 10, 5, 0]"
      },
      {
        "input": "stamp = \"abcd\", target = \"dabcdabc\"",
        "output": "[]"
      },
      {
        "input": "stamp = \"aabbcc\", target = \"aabbccaabbccaaabbccaaabbccaaabbccaaabbcc\"",
        "output": "[31, 30, 29, 28, 24, 23, 22, 21, 17, 16, 15, 14, 10, 9, 8, 7, 33, 32, 26, 25, 19, 18, 12, 11, 5, 4, 3, 2, 1, 34, 27, 20, 13, 6, 0]"
      },
      {
        "input": "stamp = \"aabbcc\", target = \"aabbccaabbccaabbcc\"",
        "output": "[11, 10, 9, 8, 7, 5, 4, 3, 2, 1, 12, 6, 0]"
      },
      {
        "input": "stamp = \"abcdef\", target = \"fedcbafedcbafedcbafedcbafedcbafedcbafedcba\"",
        "output": "[]"
      }
    ]
  },
  {
    "id": 2931,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Matrix",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed m * n integer matrix values, representing the values of m * n different items in m different shops. Each shop has n items where the jth item in the ith shop has a value of values[i][j]. Additionally, the items in the ith shop are sorted in non-increasing order of value. That is, values[i][j] >= values[i][j + 1] for all 0 <= j < n - 1.\nOn each day, you would like to buy a single item from one of the shops. Specifically, On the dth day you can:\n\nPick any shop i.\nBuy the rightmost available item j for the price of values[i][j] * d. That is, find the greatest index j such that item j was never bought before, and buy it for the price of values[i][j] * d.\n\nNote that all items are pairwise different. For example, if you have bought item 0 from shop 1, you can still buy item 0 from any other shop.\nReturn the maximum amount of money that can be spent on buying all  m * n products.\n\u00a0\nExample 1:\n\nInput: values = [[8,5,2],[6,4,1],[9,7,3]]\nOutput: 285\nExplanation: On the first day, we buy product 2 from shop 1 for a price of values[1][2] * 1 = 1.\nOn the second day, we buy product 2 from shop 0 for a price of values[0][2] * 2 = 4.\nOn the third day, we buy product 2 from shop 2 for a price of values[2][2] * 3 = 9.\nOn the fourth day, we buy product 1 from shop 1 for a price of values[1][1] * 4 = 16.\nOn the fifth day, we buy product 1 from shop 0 for a price of values[0][1] * 5 = 25.\nOn the sixth day, we buy product 0 from shop 1 for a price of values[1][0] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 2 for a price of values[2][1] * 7 = 49.\nOn the eighth day, we buy product 0 from shop 0 for a price of values[0][0] * 8 = 64.\nOn the ninth day, we buy product 0 from shop 2 for a price of values[2][0] * 9 = 81.\nHence, our total spending is equal to 285.\nIt can be shown that 285 is the maximum amount of money that can be spent buying all m * n products. \n\nExample 2:\n\nInput: values = [[10,8,6,4,2],[9,7,5,3,2]]\nOutput: 386\nExplanation: On the first day, we buy product 4 from shop 0 for a price of values[0][4] * 1 = 2.\nOn the second day, we buy product 4 from shop 1 for a price of values[1][4] * 2 = 4.\nOn the third day, we buy product 3 from shop 1 for a price of values[1][3] * 3 = 9.\nOn the fourth day, we buy product 3 from shop 0 for a price of values[0][3] * 4 = 16.\nOn the fifth day, we buy product 2 from shop 1 for a price of values[1][2] * 5 = 25.\nOn the sixth day, we buy product 2 from shop 0 for a price of values[0][2] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 1 for a price of values[1][1] * 7 = 49.\nOn the eighth day, we buy product 1 from shop 0 for a price of values[0][1] * 8 = 64\nOn the ninth day, we buy product 0 from shop 1 for a price of values[1][0] * 9 = 81.\nOn the tenth day, we buy product 0 from shop 0 for a price of values[0][0] * 10 = 100.\nHence, our total spending is equal to 386.\nIt can be shown that 386 is the maximum amount of money that can be spent buying all m * n products.\n\n\u00a0\nConstraints:\n\n1 <= m == values.length <= 10\n1 <= n == values[i].length <= 104\n1 <= values[i][j] <= 106\nvalues[i] are sorted in non-increasing order.\n\n",
    "starterCode": "class Solution:\n    def maxSpending(self, values: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "values = [[10,8,6,4,2],[9,7,5,3,2]]",
        "output": "386"
      },
      {
        "input": "values = [[1,1,1,1],[1,1,1,1],[1,1,1,1]]",
        "output": "78"
      },
      {
        "input": "values = [[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]]",
        "output": "55"
      },
      {
        "input": "values = [[1000000],[999999],[999998],[999997]]",
        "output": "9999990"
      },
      {
        "input": "values = [[10,9,8,7,6,5,4,3,2,1],[10,9,8,7,6,5,4,3,2,1]]",
        "output": "1485"
      },
      {
        "input": "values = [[10],[20],[30],[40],[50]]",
        "output": "550"
      },
      {
        "input": "values = [[1000000,999999,999998],[999997,999996,999995]]",
        "output": "20999965"
      },
      {
        "input": "values = [[8,5,2],[6,4,1],[9,7,3]]",
        "output": "285"
      },
      {
        "input": "values = [[5,4,3],[2,1,1]]",
        "output": "71"
      },
      {
        "input": "values = [[5,3,1],[6,4,2],[7,5,3]]",
        "output": "222"
      },
      {
        "input": "values = [[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10]]",
        "output": "1155"
      },
      {
        "input": "values = [[1000000,999999,999998],[1000000,999999,999998],[1000000,999999,999998]]",
        "output": "44999973"
      },
      {
        "input": "values = [[5,4,3],[2,1,0]]",
        "output": "70"
      },
      {
        "input": "values = [[100000,100000,100000,100000,100000],[100000,100000,100000,100000,100000],[100000,100000,100000,100000,100000],[100000,100000,100000,100000,100000],[100000,100000,100000,100000,100000]]",
        "output": "32500000"
      },
      {
        "input": "values = [[100,50,25,10,5],[200,150,75,20,10],[50,25,10,5,1],[400,300,150,40,20]]",
        "output": "27441"
      },
      {
        "input": "values = [[10,9,8,7,6,5,4,3,2,1],[9,8,7,6,5,4,3,2,1,0],[8,7,6,5,4,3,2,1,0,9],[7,6,5,4,3,2,1,0,9,8]]",
        "output": "4247"
      },
      {
        "input": "values = [[15,12,9,6,3],[14,11,8,5,2],[13,10,7,4,1]]",
        "output": "1240"
      },
      {
        "input": "values = [[6,6,6,6,6,6,6,6,6,6],[5,5,5,5,5,5,5,5,5,5],[4,4,4,4,4,4,4,4,4,4],[3,3,3,3,3,3,3,3,3,3],[2,2,2,2,2,2,2,2,2,2],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "8155"
      },
      {
        "input": "values = [[5,4,3,2,1],[15,14,13,12,11],[25,24,23,22,21],[35,34,33,32,31],[45,44,43,42,41]]",
        "output": "10025"
      },
      {
        "input": "values = [[20,15,10,5],[15,10,5,0],[10,5,0,0],[5,0,0,0],[0,0,0,0]]",
        "output": "1685"
      },
      {
        "input": "values = [[20,15,10,5],[30,25,20,15],[40,35,30,25]]",
        "output": "2160"
      },
      {
        "input": "values = [[1000000,999999,999998,999997,999996,999995,999994,999993,999992,999991]]",
        "output": "54999835"
      },
      {
        "input": "values = [[5,4,3,2,1],[5,4,3,2,1],[5,4,3,2,1],[5,4,3,2,1],[5,4,3,2,1]]",
        "output": "1225"
      },
      {
        "input": "values = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]]",
        "output": "2550"
      },
      {
        "input": "values = [[1000,900,800,700,600,500,400,300,200,100],[950,850,750,650,550,450,350,250,150,50],[100,200,300,400,500,600,700,800,900,1000],[50,150,250,350,450,550,650,750,850,950]]",
        "output": "454750"
      },
      {
        "input": "values = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]",
        "output": "1953"
      },
      {
        "input": "values = [[1000000,500000,250000,125000,62500,31250,15625,7812,3906,1953,976,488,244,122,61,30,15,7,3,1]]",
        "output": "37999973"
      },
      {
        "input": "values = [[1000000], [999999], [999998], [999997], [999996], [999995], [999994], [999993], [999992], [999991]]",
        "output": "54999835"
      },
      {
        "input": "values = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
        "output": "5425"
      },
      {
        "input": "values = [[20,18,16,14,12],[19,17,15,13,11],[21,19,17,15,13],[22,20,18,16,14]]",
        "output": "3814"
      },
      {
        "input": "values = [[20,18,16,14,12,10,8,6,4,2],[19,17,15,13,11,9,7,5,3,1]]",
        "output": "2870"
      },
      {
        "input": "values = [[3,2,1],[6,5,4],[9,8,7]]",
        "output": "285"
      },
      {
        "input": "values = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[5,10,15,20,25,30,35,40,45,50]]",
        "output": "7800"
      },
      {
        "input": "values = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17,19],[20,18,16,14,12,10,8,6,4,2]]",
        "output": "7745"
      },
      {
        "input": "values = [[1000,500,100],[900,400,90],[800,300,80],[700,200,70],[600,100,60]]",
        "output": "67300"
      },
      {
        "input": "values = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]]",
        "output": "2520"
      },
      {
        "input": "values = [[8,6,4,2,1],[10,8,6,4,2],[9,7,5,3,2]]",
        "output": "793"
      },
      {
        "input": "values = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]]",
        "output": "19150"
      },
      {
        "input": "values = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,2,4,6,8,10]]",
        "output": "2550"
      },
      {
        "input": "values = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "1176"
      },
      {
        "input": "values = [[1000000,500000,250000,125000,62500],[100000,50000,25000,12500,6250],[1000,500,250,125,62]]",
        "output": "29258062"
      },
      {
        "input": "values = [[30,20,10],[25,15,5],[20,10,0]]",
        "output": "885"
      },
      {
        "input": "values = [[9,7,5,3,1],[8,6,4,2,0],[11,9,7,5,3],[10,8,6,4,2]]",
        "output": "1504"
      },
      {
        "input": "values = [[1000000,999998,999996],[999999,999997,999995],[999994,999992,999990]]",
        "output": "44999876"
      },
      {
        "input": "values = [[5,3,1],[10,8,6],[15,13,11]]",
        "output": "462"
      },
      {
        "input": "values = [[9,8,7,6,5],[8,7,6,5,4],[7,6,5,4,3],[6,5,4,3,2],[5,4,3,2,1]]",
        "output": "1979"
      },
      {
        "input": "values = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[5,6,7,8,9,1,2,3,4,10],[10,1,2,3,4,5,6,7,8,9],[9,10,1,2,3,4,5,6,7,8],[8,9,10,1,2,3,4,5,6,7]]",
        "output": "11080"
      },
      {
        "input": "values = [[1000,500,250,125,62,31,15,7,3,1],[900,450,225,112,56,28,14,7,3,1],[800,400,200,100,50,25,12,6,3,1]]",
        "output": "140756"
      },
      {
        "input": "values = [[100000,90000,80000,70000,60000],[100000,90000,80000,70000,60000],[100000,90000,80000,70000,60000],[100000,90000,80000,70000,60000]]",
        "output": "18400000"
      },
      {
        "input": "values = [[30,25,20,15,10],[28,23,18,13,8],[26,21,16,11,6]]",
        "output": "2630"
      },
      {
        "input": "values = [[8,7,6,5,4,3,2,1],[7,6,5,4,3,2,1,0],[6,5,4,3,2,1,0,-1]]",
        "output": "1451"
      },
      {
        "input": "values = [[50,40,30,20,10],[45,35,25,15,5],[40,30,20,10,0]]",
        "output": "3950"
      },
      {
        "input": "values = [[7,5,3,1],[8,6,4,2],[9,7,5,3],[10,8,6,4],[11,9,7,5]]",
        "output": "1562"
      },
      {
        "input": "values = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[2,3,4,5,6,7,8,9,10,11]]",
        "output": "2775"
      },
      {
        "input": "values = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,2,4,6,8,10],[10,8,6,4,2,1,3,5,7,9]]",
        "output": "4650"
      },
      {
        "input": "values = [[500, 400, 300], [450, 350, 250], [600, 500, 400], [350, 250, 150]]",
        "output": "34200"
      },
      {
        "input": "values = [[100,90,80,70,60],[95,85,75,65,55],[90,80,70,60,50],[85,75,65,55,45]]",
        "output": "16970"
      },
      {
        "input": "values = [[10,8,6,4,2,0],[9,7,5,3,1,0],[8,6,4,2,0,0],[7,5,3,1,0,0],[6,4,2,0,0,0]]",
        "output": "2385"
      },
      {
        "input": "values = [[800, 700, 600, 500], [750, 650, 550, 450], [900, 800, 700, 600], [600, 500, 400, 300]]",
        "output": "94600"
      },
      {
        "input": "values = [[9,7,5,3,1],[8,6,4,2,0],[7,5,3,1,0],[6,4,2,0,0],[5,3,1,0,0],[4,2,0,0,0]]",
        "output": "2048"
      },
      {
        "input": "values = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[5,5,5,5,5,5,5,5,5,5],[3,6,9,12,15,18,21,24,27,30]]",
        "output": "8285"
      },
      {
        "input": "values = [[15,10,5,1],[14,9,4,1],[13,8,3,1],[12,7,2,1],[11,6,1,1],[10,5,1,1],[9,4,1,1],[8,3,1,1],[7,2,1,1],[6,1,1,1]]",
        "output": "5735"
      },
      {
        "input": "values = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]]",
        "output": "10100"
      },
      {
        "input": "values = [[9,7,5,3,1],[8,6,4,2,0],[10,8,6,4,2]]",
        "output": "790"
      },
      {
        "input": "values = [[123456, 111111, 100000], [98765, 87654, 76543], [65432, 54321, 43210], [32109, 21098, 10987]]",
        "output": "6816158"
      },
      {
        "input": "values = [[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3],[4,4,4,4,4],[5,5,5,5,5]]",
        "output": "1225"
      },
      {
        "input": "values = [[999999,999998,999997],[999996,999995,999994],[999993,999992,999991],[999990,999989,999988],[999987,999986,999985]]",
        "output": "119999320"
      },
      {
        "input": "values = [[1000000,999999,999998,999997,999996],[999995,999994,999993,999992,999991],[999990,999989,999988,999987,999986]]",
        "output": "119999440"
      },
      {
        "input": "values = [[5,3,1],[4,2,0],[6,4,2],[7,5,3]]",
        "output": "354"
      },
      {
        "input": "values = [[9,7,5],[8,6,4],[7,5,3],[6,4,2],[5,3,1],[4,2,0],[3,1,-1],[2,0,-2],[1,-1,-3]]",
        "output": "1770"
      },
      {
        "input": "values = [[8,5,2,1],[6,4,1,0],[9,7,3,2]]",
        "output": "429"
      },
      {
        "input": "values = [[20,18,16,14,12],[19,17,15,13,11],[21,19,17,15,13]]",
        "output": "2110"
      },
      {
        "input": "values = [[10,9,8,7,6,5],[9,8,7,6,5,4],[8,7,6,5,4,3],[7,6,5,4,3,2],[6,5,4,3,2,1],[5,4,3,2,1,0]]",
        "output": "4219"
      },
      {
        "input": "values = [[8,6,4,2,1],[7,5,3,2,1],[9,8,7,6,5],[10,9,8,7,6]]",
        "output": "1501"
      },
      {
        "input": "values = [[100,90,80,70,60],[50,40,30,20,10],[95,85,75,65,55],[45,35,25,15,5]]",
        "output": "14350"
      },
      {
        "input": "values = [[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]]",
        "output": "955"
      },
      {
        "input": "values = [[50,45,40,35,30,25,20,15,10,5],[48,43,38,33,28,23,18,13,8,3],[46,41,36,31,26,21,16,11,6,1]]",
        "output": "15610"
      },
      {
        "input": "values = [[1000000],[999999],[999998],[999997],[999996],[999995],[999994],[999993],[999992],[999991]]",
        "output": "54999835"
      },
      {
        "input": "values = [[10000, 9000, 8000, 7000, 6000], [9000, 8000, 7000, 6000, 5000], [8000, 7000, 6000, 5000, 4000], [7000, 6000, 5000, 4000, 3000], [6000, 5000, 4000, 3000, 2000]]",
        "output": "2304000"
      },
      {
        "input": "values = [[5, 4, 3, 2, 1], [10, 9, 8, 7, 6], [15, 14, 13, 12, 11], [20, 19, 18, 17, 16], [25, 24, 23, 22, 21]]",
        "output": "5525"
      },
      {
        "input": "values = [[10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10], [10, 10, 10, 10, 10]]",
        "output": "3250"
      },
      {
        "input": "values = [[10,9,8,7,6,5,4,3,2,1],[9,8,7,6,5,4,3,2,1,0],[8,7,6,5,4,3,2,1,0,0]]",
        "output": "2865"
      },
      {
        "input": "values = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15]]",
        "output": "1240"
      },
      {
        "input": "values = [[100,90,80,70,60],[50,45,40,35,30],[20,15,10,5,0]]",
        "output": "7150"
      },
      {
        "input": "values = [[50,40,30,20,10],[90,80,70,60,50],[130,120,110,100,90],[170,160,150,140,130]]",
        "output": "24300"
      },
      {
        "input": "values = [[10,9,8,7,6,5,4,3,2,1],[9,8,7,6,5,4,3,2,1,0],[8,7,6,5,4,3,2,1,0,0],[7,6,5,4,3,2,1,0,0,0],[6,5,4,3,2,1,0,0,0,0]]",
        "output": "6782"
      },
      {
        "input": "values = [[9,7,5,3,1],[8,6,4,2,0],[7,5,3,1,0],[6,4,2,0,0]]",
        "output": "1088"
      },
      {
        "input": "values = [[10,9,8,7,6,5,4,3,2,1],[20,19,18,17,16,15,14,13,12,11],[30,29,28,27,26,25,24,23,22,21]]",
        "output": "9455"
      },
      {
        "input": "values = [[1000,500,250,125,62],[500,250,125,62,31],[250,125,62,31,15],[125,62,31,15,7],[62,31,15,7,3]]",
        "output": "78347"
      },
      {
        "input": "values = [[9, 8, 7], [6, 5, 4], [3, 2, 1], [9, 8, 7], [6, 5, 4], [3, 2, 1]]",
        "output": "1095"
      },
      {
        "input": "values = [[10,9,8,7,6,5,4,3,2,1],[9,8,7,6,5,4,3,2,1,0],[8,7,6,5,4,3,2,1,0,-1]]",
        "output": "2864"
      },
      {
        "input": "values = [[5,4,3,2,1],[4,3,2,1,0],[3,2,1,0,0],[2,1,0,0,0],[1,0,0,0,0]]",
        "output": "707"
      },
      {
        "input": "values = [[10,9,8,7,6,5,4,3,2,1],[9,8,7,6,5,4,3,2,1,0],[8,7,6,5,4,3,2,1,0,0],[7,6,5,4,3,2,1,0,0,0],[6,5,4,3,2,1,0,0,0,0],[5,4,3,2,1,0,0,0,0,0],[4,3,2,1,0,0,0,0,0,0],[3,2,1,0,0,0,0,0,0,0],[2,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]]",
        "output": "18139"
      },
      {
        "input": "values = [[10,9,8,7,6,5,4,3,2,1,0],[9,8,7,6,5,4,3,2,1,0,-1],[8,7,6,5,4,3,2,1,0,-1,-2]]",
        "output": "3266"
      },
      {
        "input": "values = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[5,5,5,5,5,5,5,5,5,5],[10,10,10,10,10,10,10,10,10,10]]",
        "output": "6225"
      },
      {
        "input": "values = [[5,4,3,2,1],[5,4,3,2,1],[5,4,3,2,1],[5,4,3,2,1]]",
        "output": "790"
      },
      {
        "input": "values = [[9,7,5,3,1],[8,6,4,2,0],[7,5,3,1,0],[6,4,2,0,0],[5,3,1,0,0],[4,2,0,0,0],[3,1,0,0,0],[2,0,0,0,0],[1,0,0,0,0],[0,0,0,0,0]]",
        "output": "4016"
      }
    ]
  },
  {
    "id": 1147,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Two Pointers",
      "String",
      "Dynamic Programming",
      "Hash Function",
      "Rolling Hash"
    ],
    "problemDescription": "You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:\n\nsubtexti is a non-empty string.\nThe concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).\nsubtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).\n\nReturn the largest possible value of k.\n\u00a0\nExample 1:\n\nInput: text = \"ghiabcdefhelloadamhelloabcdefghi\"\nOutput: 7\nExplanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".\n\nExample 2:\n\nInput: text = \"merchant\"\nOutput: 1\nExplanation: We can split the string on \"(merchant)\".\n\nExample 3:\n\nInput: text = \"antaprezatepzapreanta\"\nOutput: 11\nExplanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)\".\n\n\u00a0\nConstraints:\n\n1 <= text.length <= 1000\ntext consists only of lowercase English characters.\n\n",
    "starterCode": "class Solution:\n    def longestDecomposition(self, text: str) -> int:\n        ",
    "testCases": [
      {
        "input": "text = \"abcabc\"",
        "output": "2"
      },
      {
        "input": "text = \"abcabcabc\"",
        "output": "3"
      },
      {
        "input": "text = \"level\"",
        "output": "5"
      },
      {
        "input": "text = \"zyxzyxzyx\"",
        "output": "3"
      },
      {
        "input": "text = \"madam\"",
        "output": "5"
      },
      {
        "input": "text = \"aaaaa\"",
        "output": "5"
      },
      {
        "input": "text = \"merchant\"",
        "output": "1"
      },
      {
        "input": "text = \"aabbccddeedccbbaa\"",
        "output": "15"
      },
      {
        "input": "text = \"repaper\"",
        "output": "7"
      },
      {
        "input": "text = \"ghiabcdefhelloadamhelloabcdefghi\"",
        "output": "7"
      },
      {
        "input": "text = \"aaa\"",
        "output": "3"
      },
      {
        "input": "text = \"antaprezatepzapreanta\"",
        "output": "11"
      },
      {
        "input": "text = \"abcdabcdabcdabcd\"",
        "output": "4"
      },
      {
        "input": "text = \"abacaba\"",
        "output": "7"
      },
      {
        "input": "text = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "52"
      },
      {
        "input": "text = \"xyzzyx\"",
        "output": "6"
      },
      {
        "input": "text = \"abcddcba\"",
        "output": "8"
      },
      {
        "input": "text = \"rotor\"",
        "output": "5"
      },
      {
        "input": "text = \"abcdedcba\"",
        "output": "9"
      },
      {
        "input": "text = \"refer\"",
        "output": "5"
      },
      {
        "input": "text = \"redder\"",
        "output": "6"
      },
      {
        "input": "text = \"peep\"",
        "output": "4"
      },
      {
        "input": "text = \"abba\"",
        "output": "4"
      },
      {
        "input": "text = \"racecar\"",
        "output": "7"
      },
      {
        "input": "text = \"civic\"",
        "output": "5"
      },
      {
        "input": "text = \"abcdabcd\"",
        "output": "2"
      },
      {
        "input": "text = \"a\"",
        "output": "1"
      },
      {
        "input": "text = \"abcabcabcabcabcabc\"",
        "output": "6"
      },
      {
        "input": "text = \"xyzzyxxyzzyx\"",
        "output": "12"
      },
      {
        "input": "text = \"noon\"",
        "output": "4"
      },
      {
        "input": "text = \"deified\"",
        "output": "7"
      },
      {
        "input": "text = \"racecarlevelracecar\"",
        "output": "19"
      },
      {
        "input": "text = \"deed\"",
        "output": "4"
      },
      {
        "input": "text = \"abccba\"",
        "output": "6"
      },
      {
        "input": "text = \"abab\"",
        "output": "2"
      },
      {
        "input": "text = \"aabbccddeeddccbbaa\"",
        "output": "18"
      },
      {
        "input": "text = \"abcba\"",
        "output": "5"
      },
      {
        "input": "text = \"abcdeedcba\"",
        "output": "10"
      },
      {
        "input": "text = \"levellevel\"",
        "output": "10"
      },
      {
        "input": "text = \"ababababab\"",
        "output": "5"
      },
      {
        "input": "text = \"bananaananabayananabanana\"",
        "output": "13"
      },
      {
        "input": "text = \"abcdabcabcabcabcd\"",
        "output": "5"
      },
      {
        "input": "text = \"racecarannakayakracecar\"",
        "output": "15"
      },
      {
        "input": "text = \"abcabcabcabcabcabcabc\"",
        "output": "7"
      },
      {
        "input": "text = \"xxyyxxyyxyyxxyyxxyy\"",
        "output": "5"
      },
      {
        "input": "text = \"xylophonephoneyloxyxylophonephoneyloxy\"",
        "output": "10"
      },
      {
        "input": "text = \"leveloneleveltwolevelonelevel\"",
        "output": "23"
      },
      {
        "input": "text = \"aaaaabaaaabaaaa\"",
        "output": "13"
      },
      {
        "input": "text = \"abacababacaba\"",
        "output": "13"
      },
      {
        "input": "text = \"rotorcarrot\"",
        "output": "3"
      },
      {
        "input": "text = \"leveloneonetwothreefourthreefourtwoonelevel\"",
        "output": "15"
      },
      {
        "input": "text = \"aaaaabaaaabaaaaaaaabaaaaabaaaabaaaa\"",
        "output": "27"
      },
      {
        "input": "text = \"noonnoonnoonnoonnoonnoon\"",
        "output": "24"
      },
      {
        "input": "text = \"annakayakannakayakannakayakannakayakannakayak\"",
        "output": "5"
      },
      {
        "input": "text = \"abcdefghihgfedcbaabcdefghihgfedcba\"",
        "output": "34"
      },
      {
        "input": "text = \"abcdefgfedcbaabcdefgfedcbaabcdefgfedcba\"",
        "output": "39"
      },
      {
        "input": "text = \"abacabaabacaba\"",
        "output": "14"
      },
      {
        "input": "text = \"qwertyuiopasdfghjklzxcvbnmmnbvcxzlkjhgfdsapoiuytrewq\"",
        "output": "52"
      },
      {
        "input": "text = \"madamimadamimadam\"",
        "output": "17"
      },
      {
        "input": "text = \"kayak\"",
        "output": "5"
      },
      {
        "input": "text = \"thisisaverylongstringwhichdoesnotrepeatthisisaverylongstring\"",
        "output": "3"
      },
      {
        "input": "text = \"deifiedrotorcarcaretordeified\"",
        "output": "21"
      },
      {
        "input": "text = \"madamimadamimadamimadamimadam\"",
        "output": "29"
      },
      {
        "input": "text = \"noonnoonnoonnoonnoonnoonnoonnoon\"",
        "output": "32"
      },
      {
        "input": "text = \"deifiedrotordeified\"",
        "output": "19"
      },
      {
        "input": "text = \"noonracecarnoon\"",
        "output": "15"
      },
      {
        "input": "text = \"madamimadam\"",
        "output": "11"
      },
      {
        "input": "text = \"repaperdeified\"",
        "output": "1"
      },
      {
        "input": "text = \"deededeed\"",
        "output": "9"
      },
      {
        "input": "text = \"ananaananaananananananananananana\"",
        "output": "15"
      },
      {
        "input": "text = \"racecarlevelracecarlevelracecarlevel\"",
        "output": "3"
      },
      {
        "input": "text = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "18"
      },
      {
        "input": "text = \"racecarlevelmadamracecar\"",
        "output": "15"
      },
      {
        "input": "text = \"leveloneonelevel\"",
        "output": "12"
      },
      {
        "input": "text = \"xyzyxzyzyxzyzyxzyx\"",
        "output": "15"
      },
      {
        "input": "text = \"abcdefghihgfedcba\"",
        "output": "17"
      },
      {
        "input": "text = \"abbaabbaabbaabbaabba\"",
        "output": "20"
      },
      {
        "input": "text = \"abacabaabacabaabacaba\"",
        "output": "21"
      },
      {
        "input": "text = \"abcdabcdeedcbadcbabcd\"",
        "output": "3"
      },
      {
        "input": "text = \"abccbaabccba\"",
        "output": "12"
      },
      {
        "input": "text = \"abracadabra\"",
        "output": "7"
      },
      {
        "input": "text = \"madammadam\"",
        "output": "10"
      },
      {
        "input": "text = \"aaaaaaaaabbbbbbbbbbbbbbbccccccccccccccccccccdd\"",
        "output": "1"
      },
      {
        "input": "text = \"deifiedrotorleveldeified\"",
        "output": "15"
      },
      {
        "input": "text = \"racecarlevelracecarlevelracecarlevelracecarlevel\"",
        "output": "4"
      },
      {
        "input": "text = \"madaminnadammadam\"",
        "output": "11"
      },
      {
        "input": "text = \"leveldeifiedmadamdeifiedlevel\"",
        "output": "29"
      },
      {
        "input": "text = \"abacabacabacabac\"",
        "output": "4"
      },
      {
        "input": "text = \"aaaabbbbccccaaaabbbbcccc\"",
        "output": "2"
      },
      {
        "input": "text = \"noonnoonnoon\"",
        "output": "12"
      },
      {
        "input": "text = \"xyzyxzyzyxzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyx\"",
        "output": "33"
      },
      {
        "input": "text = \"abcdefgabcdefgabcdefg\"",
        "output": "3"
      },
      {
        "input": "text = \"abracadabraabracadabra\"",
        "output": "14"
      },
      {
        "input": "text = \"civiccivic\"",
        "output": "10"
      },
      {
        "input": "text = \"annakayakannakayakannakayakannakayakannakayakannakayakannakayak\"",
        "output": "7"
      },
      {
        "input": "text = \"rotorcarrots\"",
        "output": "1"
      },
      {
        "input": "text = \"abracadabraacarab\"",
        "output": "11"
      },
      {
        "input": "text = \"kayakkayakkayak\"",
        "output": "15"
      },
      {
        "input": "text = \"nun\"",
        "output": "3"
      },
      {
        "input": "text = \"annakayakannakayakannakayak\"",
        "output": "3"
      },
      {
        "input": "text = \"rotorlevelrotor\"",
        "output": "15"
      },
      {
        "input": "text = \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm\"",
        "output": "2"
      },
      {
        "input": "text = \"aabbccddeeddccbaa\"",
        "output": "7"
      },
      {
        "input": "text = \"abbaabbaabba\"",
        "output": "12"
      },
      {
        "input": "text = \"xyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "8"
      },
      {
        "input": "text = \"levellevellevellevel\"",
        "output": "20"
      },
      {
        "input": "text = \"abccbaabccbaabccba\"",
        "output": "18"
      },
      {
        "input": "text = \"abcdeedcbaabcdeedcbaabcdeedcba\"",
        "output": "30"
      },
      {
        "input": "text = \"abcdefgfedcbaabcdefg\"",
        "output": "3"
      },
      {
        "input": "text = \"levelmadamlevel\"",
        "output": "15"
      },
      {
        "input": "text = \"abcabcabcabc\"",
        "output": "4"
      },
      {
        "input": "text = \"abacabadabacabaabacabadabacaba\"",
        "output": "30"
      },
      {
        "input": "text = \"rotorcarcaretor\"",
        "output": "7"
      },
      {
        "input": "text = \"annakayakannakayakannakayakannakayak\"",
        "output": "4"
      },
      {
        "input": "text = \"levellevellevellevellevellevellevellevellevellevellevellevel\"",
        "output": "60"
      },
      {
        "input": "text = \"levellevellevellevellevellevel\"",
        "output": "30"
      },
      {
        "input": "text = \"aaaaabbbbbaaaabbbbbaaaaa\"",
        "output": "24"
      },
      {
        "input": "text = \"abcdabcabcabcd\"",
        "output": "4"
      },
      {
        "input": "text = \"aaaabbbbccccbbbbaaaa\"",
        "output": "20"
      },
      {
        "input": "text = \"madamimadamimadamimadamimadamimadamimadamimadam\"",
        "output": "47"
      },
      {
        "input": "text = \"abcdxyzyxzyxcddcbaabcdxyzyxzyxcddcba\"",
        "output": "18"
      },
      {
        "input": "text = \"abacabadabacabadabacaba\"",
        "output": "23"
      },
      {
        "input": "text = \"deifieddeified\"",
        "output": "14"
      },
      {
        "input": "text = \"deifiedracecardeified\"",
        "output": "21"
      },
      {
        "input": "text = \"noonnoonnoonnoon\"",
        "output": "16"
      },
      {
        "input": "text = \"radar\"",
        "output": "5"
      },
      {
        "input": "text = \"abacabadabacaba\"",
        "output": "15"
      },
      {
        "input": "text = \"annakayakannakayak\"",
        "output": "2"
      },
      {
        "input": "text = \"abcdabcdefgabcdefgdcba\"",
        "output": "10"
      },
      {
        "input": "text = \"racecarannakayak\"",
        "output": "1"
      },
      {
        "input": "text = \"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\"",
        "output": "44"
      },
      {
        "input": "text = \"abacabadabacabad\"",
        "output": "2"
      },
      {
        "input": "text = \"rotorrotor\"",
        "output": "10"
      },
      {
        "input": "text = \"abcabcabcabcabc\"",
        "output": "5"
      },
      {
        "input": "text = \"abracadabracadabra\"",
        "output": "11"
      },
      {
        "input": "text = \"levellevellevellevellevel\"",
        "output": "25"
      },
      {
        "input": "text = \"aaaaaabaaaaa\"",
        "output": "11"
      },
      {
        "input": "text = \"aabbccddeedcbaabbccdd\"",
        "output": "3"
      },
      {
        "input": "text = \"hellohellobellohellobellohello\"",
        "output": "4"
      },
      {
        "input": "text = \"xyzzxyzzxyzz\"",
        "output": "3"
      },
      {
        "input": "text = \"xxyyzzzyyxxyyyzzzzyyxx\"",
        "output": "15"
      },
      {
        "input": "text = \"aabbccddeeeedddccbbaaa\"",
        "output": "5"
      },
      {
        "input": "text = \"deifiedrotor\"",
        "output": "1"
      },
      {
        "input": "text = \"abcdeedcbaabcdeedcba\"",
        "output": "20"
      },
      {
        "input": "text = \"abababababababab\"",
        "output": "8"
      },
      {
        "input": "text = \"abacabaabacabaabacabaabacaba\"",
        "output": "28"
      },
      {
        "input": "text = \"aaaabbbbccccddddeeeeffffeeeeggggccccbbbbaaaaffff\"",
        "output": "1"
      },
      {
        "input": "text = \"wow\"",
        "output": "3"
      },
      {
        "input": "text = \"abcdabccbaabcd\"",
        "output": "8"
      },
      {
        "input": "text = \"abcabcabcabcabcabcabcd\"",
        "output": "1"
      },
      {
        "input": "text = \"abcxyzzyxcba\"",
        "output": "12"
      },
      {
        "input": "text = \"racecarlevelracecarlevelracecarlevelracecarlevelracecarlevel\"",
        "output": "5"
      },
      {
        "input": "text = \"madamimadamimadamimadamimadamimadam\"",
        "output": "35"
      },
      {
        "input": "text = \"noonabbadacabbaaddaabbnoon\"",
        "output": "15"
      },
      {
        "input": "text = \"xyzzyxzyxzyxzyxzyxzyxzyxyz\"",
        "output": "15"
      },
      {
        "input": "text = \"levellevellevellevellevellevellevellevel\"",
        "output": "40"
      },
      {
        "input": "text = \"abababababababababababab\"",
        "output": "12"
      },
      {
        "input": "text = \"mississippiississimississimississippi\"",
        "output": "17"
      },
      {
        "input": "text = \"aabbccddeedcba\"",
        "output": "3"
      },
      {
        "input": "text = \"xyzyxzyzyxzyx\"",
        "output": "11"
      },
      {
        "input": "text = \"aaaaabaaa\"",
        "output": "7"
      },
      {
        "input": "text = \"abcdcdeabcdcdeabcdcdeabcd\"",
        "output": "7"
      },
      {
        "input": "text = \"racecarracecar\"",
        "output": "14"
      },
      {
        "input": "text = \"rotorrotorrotor\"",
        "output": "15"
      },
      {
        "input": "text = \"racecarlevelracecarlevel\"",
        "output": "2"
      },
      {
        "input": "text = \"kayakkayak\"",
        "output": "10"
      },
      {
        "input": "text = \"noonnoon\"",
        "output": "8"
      },
      {
        "input": "text = \"racecarlevelmadamracecarlevelmadam\"",
        "output": "2"
      },
      {
        "input": "text = \"abcxyzzyxcbaabcxyzzyxcba\"",
        "output": "24"
      },
      {
        "input": "text = \"redividerrotorredivider\"",
        "output": "23"
      },
      {
        "input": "text = \"ababababababababababababababababab\"",
        "output": "17"
      },
      {
        "input": "text = \"referrefer\"",
        "output": "10"
      },
      {
        "input": "text = \"noonnoonnoonnoonnoonnoonnoonnoonnoonnoon\"",
        "output": "40"
      },
      {
        "input": "text = \"madamimadamimadamimadam\"",
        "output": "23"
      },
      {
        "input": "text = \"abbaabbaabbaabba\"",
        "output": "16"
      },
      {
        "input": "text = \"mississippi\"",
        "output": "1"
      },
      {
        "input": "text = \"aabbccddeedccbbaaa\"",
        "output": "5"
      },
      {
        "input": "text = \"abcdeabcdeabcde\"",
        "output": "3"
      },
      {
        "input": "text = \"racecarracecarracecar\"",
        "output": "21"
      },
      {
        "input": "text = \"redivider\"",
        "output": "9"
      },
      {
        "input": "text = \"thisisaverylongstringwithnorepeatedpattern\"",
        "output": "1"
      }
    ]
  },
  {
    "id": 632,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Hash Table",
      "Sorting",
      "Sliding Window",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You have k lists of sorted integers in non-decreasing\u00a0order. Find the smallest range that includes at least one number from each of the k lists.\nWe define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.\n\u00a0\nExample 1:\n\nInput: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\nOutput: [20,24]\nExplanation: \nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\n\nExample 2:\n\nInput: nums = [[1,2,3],[1,2,3],[1,2,3]]\nOutput: [1,1]\n\n\u00a0\nConstraints:\n\nnums.length == k\n1 <= k <= 3500\n1 <= nums[i].length <= 50\n-105 <= nums[i][j] <= 105\nnums[i]\u00a0is sorted in non-decreasing order.\n\n",
    "starterCode": "class Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [[-10,-5,-3,-1],[0,2,4,6],[5,10,15,20]]",
        "output": "[-1, 5]"
      },
      {
        "input": "nums = [[1,2,3],[1,2,3],[1,2,3]]",
        "output": "[1, 1]"
      },
      {
        "input": "nums = [[1,5,9],[2,6,10],[3,7,11]]",
        "output": "[1, 3]"
      },
      {
        "input": "nums = [[5,10,15],[3,6,9],[12,14,18]]",
        "output": "[9, 12]"
      },
      {
        "input": "nums = [[-10,-9,-8],[-7,-6,-5],[-4,-3,-2]]",
        "output": "[-8, -4]"
      },
      {
        "input": "nums = [[-10,-9,-8],[-4,-3,-2],[-1,0,1]]",
        "output": "[-8, -1]"
      },
      {
        "input": "nums = [[-10,-5,0,5,10],[-5,0,5,10,15],[0,5,10,15,20]]",
        "output": "[0, 0]"
      },
      {
        "input": "nums = [[1,5,9],[0,6,8],[2,3,7]]",
        "output": "[0, 2]"
      },
      {
        "input": "nums = [[-5,-3],[-1,-2],[4,5,6]]",
        "output": "[-3, 4]"
      },
      {
        "input": "nums = [[10,10,10],[10,10,10],[10,10,10]]",
        "output": "[10, 10]"
      },
      {
        "input": "nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]",
        "output": "[20, 24]"
      },
      {
        "input": "nums = [[1,3,5,7],[2,4,6,8],[0,9,10,11]]",
        "output": "[0, 2]"
      },
      {
        "input": "nums = [[-10,-8,-6],[-6,-4,-2],[0,2,4]]",
        "output": "[-6, 0]"
      },
      {
        "input": "nums = [[1],[2],[3],[4],[5]]",
        "output": "[1, 5]"
      },
      {
        "input": "nums = [[5,10,15],[3,6,9],[12,18,24]]",
        "output": "[9, 12]"
      },
      {
        "input": "nums = [[1,4,7,10,13],[2,5,8,11,14],[3,6,9,12,15],[0,16,17,18,19]]",
        "output": "[0, 3]"
      },
      {
        "input": "nums = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]]",
        "output": "[2, 19]"
      },
      {
        "input": "nums = [[-5,-4,-3,-2,-1],[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19]]",
        "output": "[-1, 15]"
      },
      {
        "input": "nums = [[1000, 2000, 3000], [500, 1500, 2500, 3500], [-1000, 0, 1000, 2000]]",
        "output": "[500, 1000]"
      },
      {
        "input": "nums = [[1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,4,4,4,4,4]]",
        "output": "[1, 4]"
      },
      {
        "input": "nums = [[1], [2], [3], [4], [5]]",
        "output": "[1, 5]"
      },
      {
        "input": "nums = [[-1000, -900, -800, -700, -600, -500], [-950, -850, -750, -650, -550, -450], [-900, -800, -700, -600, -500, -400], [-850, -750, -650, -550, -450, -350]]",
        "output": "[-900, -850]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40]]",
        "output": "[10, 31]"
      },
      {
        "input": "nums = [[1,3,5,7,9,11,13,15,17,19],[2,4,6,8,10,12,14,16,18,20],[0,10,20,30,40,50,60,70,80,90]]",
        "output": "[9, 10]"
      },
      {
        "input": "nums = [[5],[10],[15],[20],[25],[30],[35],[40],[45],[50]]",
        "output": "[5, 50]"
      },
      {
        "input": "nums = [[-100,-99,-98],[-97,-96,-95],[-94,-93,-92],[-91,-90,-89],[-88,-87,-86]]",
        "output": "[-98, -88]"
      },
      {
        "input": "nums = [[-1,-2,-3,-4,-5],[-10,-20,-30,-40,-50],[-100,-200,-300,-400,-500],[-1000,-2000,-3000,-4000,-5000]]",
        "output": "[-1000, -5]"
      },
      {
        "input": "nums = [[1000,2000,3000,4000,5000],[1500,2500,3500,4500,5500],[2000,3000,4000,5000,6000],[2500,3500,4500,5500,6500]]",
        "output": "[2000, 2500]"
      },
      {
        "input": "nums = [[-1, 0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9]]",
        "output": "[3, 3]"
      },
      {
        "input": "nums = [[-10, -5, 0], [0, 5, 10], [10, 15, 20], [20, 25, 30], [30, 35, 40]]",
        "output": "[0, 30]"
      },
      {
        "input": "nums = [[-100,-90,-80,-70,-60,-50,-40,-30,-20,-10,0,10,20,30,40,50,60,70,80,90,100],[-95,-85,-75,-65,-55,-45,-35,-25,-15,-5,5,15,25,35,45,55,65,75,85,95,105]]",
        "output": "[-100, -95]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[2,4,6,8,10,12,14,16,18,20],[3,6,9,12,15,18,21,24,27,30]]",
        "output": "[6, 6]"
      },
      {
        "input": "nums = [[1,10,20,30,40,50,60,70,80,90,100],[0,2,4,6,8,10,12,14,16,18,20],[5,15,25,35,45,55,65,75,85,95,105]]",
        "output": "[1, 5]"
      },
      {
        "input": "nums = [[10,20,30,40,50],[15,25,35,45,55],[20,30,40,50,60],[25,35,45,55,65]]",
        "output": "[20, 25]"
      },
      {
        "input": "nums = [[5,10,15,20,25,30,35,40,45,50],[1,6,11,16,21,26,31,36,41,46],[2,7,12,17,22,27,32,37,42,47]]",
        "output": "[5, 7]"
      },
      {
        "input": "nums = [[-100, -50, 0, 50, 100], [-200, -150, -100, -50, 0], [50, 100, 150, 200, 250]]",
        "output": "[0, 50]"
      },
      {
        "input": "nums = [[-100,-50,-25,0,25,50,100],[5,15,25,35,45,55,65],[10,20,30,40,50,60,70]]",
        "output": "[20, 25]"
      },
      {
        "input": "nums = [[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29],[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]]",
        "output": "[1, 2]"
      },
      {
        "input": "nums = [[1,5,9,13,17],[2,6,10,14,18],[3,7,11,15,19],[4,8,12,16,20]]",
        "output": "[1, 4]"
      },
      {
        "input": "nums = [[-5, -3, -1], [-4, -2, 0], [-3, -1, 1], [-2, 0, 2], [-1, 1, 3], [0, 2, 4], [1, 3, 5], [2, 4, 6], [3, 5, 7], [4, 6, 8]]",
        "output": "[-1, 4]"
      },
      {
        "input": "nums = [[-100,-90,-80,-70,-60],[-50,-40,-30,-20,-10],[0,10,20,30,40],[50,60,70,80,90],[100,110,120,130,140]]",
        "output": "[-60, 100]"
      },
      {
        "input": "nums = [[-100,0,100],[50,60,70],[90,100,110],[200,210,220]]",
        "output": "[70, 200]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[10,20,30,40,50],[1,11,21,31,41,51]]",
        "output": "[10, 11]"
      },
      {
        "input": "nums = [[-1,-2,-3,-4,-5],[-5,-4,-3,-2,-1],[-3,-2,-1,0,1,2,3],[1,2,3,4,5,6,7]]",
        "output": "[-1, 1]"
      },
      {
        "input": "nums = [[-10,-5,-1],[0,1,5],[10,15,20],[25,30,35],[40,45,50]]",
        "output": "[-1, 40]"
      },
      {
        "input": "nums = [[-10,-5,0,5,10],[0,2,4,6,8],[3,7,11,15,19],[1,3,5,7,9]]",
        "output": "[3, 5]"
      },
      {
        "input": "nums = [[-10,-5,-1],[0,1,5,10,15],[20,25,30,35,40],[45,50,55,60,65]]",
        "output": "[-1, 45]"
      },
      {
        "input": "nums = [[1, 100000], [2, 99999], [3, 99998], [4, 99997], [5, 99996], [6, 99995], [7, 99994], [8, 99993], [9, 99992], [10, 99991]]",
        "output": "[1, 10]"
      },
      {
        "input": "nums = [[-100,-50,0,50,100],[-90,-40,-10,40,90],[-80,-30,-20,30,80]]",
        "output": "[-100, -80]"
      },
      {
        "input": "nums = [[-100,-50,-25,-10,0,10,25,50,100],[0,1,2,3,4,5,6,7,8,9,10],[10,20,30,40,50,60,70,80,90,100],[5,15,25,35,45,55,65,75,85,95]]",
        "output": "[5, 10]"
      },
      {
        "input": "nums = [[1,3,5,7,9,11,13,15,17,19],[2,4,6,8,10,12,14,16,18,20],[0,21,22,23,24,25,26,27,28,29]]",
        "output": "[0, 2]"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]",
        "output": "[5, 21]"
      },
      {
        "input": "nums = [[10,20,30,40,50],[11,21,31,41,51],[12,22,32,42,52],[13,23,33,43,53],[14,24,34,44,54]]",
        "output": "[10, 14]"
      },
      {
        "input": "nums = [[-10,0,10,20],[0,1,2,3],[5,6,7,8,9]]",
        "output": "[0, 5]"
      },
      {
        "input": "nums = [[-1,-2,-3,-4,-5],[-10,-20,-30,-40,-50],[-100,-200,-300,-400,-500]]",
        "output": "[-100, -5]"
      },
      {
        "input": "nums = [[1,10,20,30,40],[2,12,22,32,42],[3,13,23,33,43]]",
        "output": "[1, 3]"
      },
      {
        "input": "nums = [[1,3,5,7,9,11],[2,4,6,8,10,12],[0,9,12,20,24,26],[5,18,22,30,35,40]]",
        "output": "[5, 9]"
      },
      {
        "input": "nums = [[-1000,-500,-250,-100,-50,-25,-10,-5,-2,-1,0,1,2,5,10,25,50,100,250,500,1000],[1000,2000,3000,4000,5000,6000,7000,8000,9000,10000]]",
        "output": "[1000, 1000]"
      },
      {
        "input": "nums = [[-1000,-500,-250,-100,-50,-25,0,25,50,100,250,500,1000],[500,1000,1500,2000,2500,3000,3500,4000,4500,5000],[0,500,1000,1500,2000,2500,3000,3500,4000,4500]]",
        "output": "[500, 500]"
      },
      {
        "input": "nums = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]",
        "output": "[1, 10]"
      },
      {
        "input": "nums = [[1,20,30],[2,25,35],[3,30,40],[4,35,45],[5,40,50]]",
        "output": "[1, 5]"
      },
      {
        "input": "nums = [[100,200,300,400,500],[50,150,250,350,450],[25,75,125,175,225]]",
        "output": "[50, 100]"
      },
      {
        "input": "nums = [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [3, 5, 7, 9, 11], [4, 6, 8, 10, 12]]",
        "output": "[3, 4]"
      },
      {
        "input": "nums = [[1,4,10,14],[0,9,10,20,24],[5,18,22,30],[3,13,15,17]]",
        "output": "[0, 5]"
      },
      {
        "input": "nums = [[1,4,7,10,13],[2,5,8,11,14],[3,6,9,12,15]]",
        "output": "[1, 3]"
      },
      {
        "input": "nums = [[-1000,-900,-800,-700,-600,-500,-400,-300,-200,-100],[0,100,200,300,400,500,600,700,800,900],[1000,2000,3000,4000,5000,6000,7000,8000,9000,10000]]",
        "output": "[-100, 1000]"
      },
      {
        "input": "nums = [[1,10,19,28,37],[2,11,20,29,38],[3,12,21,30,39],[4,13,22,31,40],[5,14,23,32,41]]",
        "output": "[1, 5]"
      },
      {
        "input": "nums = [[-10,-5,0,5,10],[-20,-15,-10,-5,0],[1,6,11,16,21]]",
        "output": "[0, 1]"
      },
      {
        "input": "nums = [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], [20, 30, 40, 50, 60], [5, 10, 15, 20, 25]]",
        "output": "[15, 20]"
      },
      {
        "input": "nums = [[-5,-4,-3,-2,-1,0,1,2,3,4,5],[-6,-5,-4,-3,-2,-1,0,1,2,3,4],[-7,-6,-5,-4,-3,-2,-1,0,1,2,3]]",
        "output": "[-5, -5]"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]]",
        "output": "[6, 6]"
      },
      {
        "input": "nums = [[100,200,300,400],[50,150,250,350],[25,125,225,325,425]]",
        "output": "[100, 150]"
      },
      {
        "input": "nums = [[1,4,7,10,13,16,19,22,25,28],[2,5,8,11,14,17,20,23,26,29],[3,6,9,12,15,18,21,24,27,30]]",
        "output": "[1, 3]"
      },
      {
        "input": "nums = [[-100000,0,100000],[-99999,99999],[-99998,99998],[-99997,99997]]",
        "output": "[-100000, -99997]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]]",
        "output": "[50, 51]"
      },
      {
        "input": "nums = [[1,3,5,7,9,11,13,15,17,19],[2,4,6,8,10,12,14,16,18,20],[0,10,20,30,40,50,60,70,80,90,100],[5,15,25,35,45,55,65,75,85,95,105]]",
        "output": "[0, 5]"
      },
      {
        "input": "nums = [[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [4, 4, 4, 4, 4], [5, 5, 5, 5, 5]]",
        "output": "[1, 5]"
      },
      {
        "input": "nums = [[1,100000],[2,99999],[3,99998],[4,99997],[5,99996]]",
        "output": "[1, 5]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "[1, 1]"
      },
      {
        "input": "nums = [[-100,-50,0,50,100],[5,15,25,35,45],[1,2,3,4,5],[0,0,0,0,0]]",
        "output": "[0, 5]"
      },
      {
        "input": "nums = [[-5,-4,-3,-2,-1,0,1,2,3,4,5],[-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0],[0,1,2,3,4,5,6,7,8,9,10]]",
        "output": "[0, 0]"
      },
      {
        "input": "nums = [[-1,-2,-3,-4,-5],[-6,-7,-8,-9,-10],[-11,-12,-13,-14,-15],[-16,-17,-18,-19,-20]]",
        "output": "[-16, -5]"
      },
      {
        "input": "nums = [[1,1,1,1],[2,2,2,2],[3,3,3,3],[4,4,4,4],[5,5,5,5]]",
        "output": "[1, 5]"
      },
      {
        "input": "nums = [[1, 10, 20, 30, 40], [5, 15, 25, 35, 45], [10, 20, 30, 40, 50], [5, 15, 25, 35, 45]]",
        "output": "[5, 10]"
      },
      {
        "input": "nums = [[1,3,5,7,9,11,13,15,17,19],[2,4,6,8,10,12,14,16,18,20],[0,1,2,3,4,5,6,7,8,9]]",
        "output": "[1, 2]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10,11],[3,4,5,6,7,8,9,10,11,12]]",
        "output": "[3, 3]"
      },
      {
        "input": "nums = [[10, 20, 30], [11, 21, 31], [12, 22, 32], [13, 23, 33], [14, 24, 34], [15, 25, 35], [16, 26, 36], [17, 27, 37], [18, 28, 38], [19, 29, 39]]",
        "output": "[10, 19]"
      },
      {
        "input": "nums = [[1,10,20,30,40,50,60,70,80,90,100],[2,11,21,31,41,51,61,71,81,91,101],[3,12,22,32,42,52,62,72,82,92,102],[4,13,23,33,43,53,63,73,83,93,103],[5,14,24,34,44,54,64,74,84,94,104]]",
        "output": "[1, 5]"
      },
      {
        "input": "nums = [[-1,0,1],[-2,-1,0,1,2],[-3,-2,-1,0,1,2,3]]",
        "output": "[-1, -1]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
        "output": "[5, 21]"
      },
      {
        "input": "nums = [[-100, -90, -80, -70, -60], [-95, -85, -75, -65, -55], [-90, -80, -70, -60, -50], [-85, -75, -65, -55, -45]]",
        "output": "[-90, -85]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]]",
        "output": "[10, 21]"
      },
      {
        "input": "nums = [[-10,-5,0,5,10],[1,3,6,9,12],[2,4,7,11,13],[0,8,16,24,32]]",
        "output": "[0, 2]"
      },
      {
        "input": "nums = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]]",
        "output": "[1, 10]"
      },
      {
        "input": "nums = [[100,200,300],[150,250,350],[200,250,300,350]]",
        "output": "[150, 200]"
      },
      {
        "input": "nums = [[-100000, 100000], [-90000, 90000], [-80000, 80000], [-70000, 70000], [-60000, 60000]]",
        "output": "[-100000, -60000]"
      },
      {
        "input": "nums = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15]]",
        "output": "[1, 15]"
      }
    ]
  },
  {
    "id": 899,
    "difficulty": "Hard",
    "tags": [
      "Math",
      "String",
      "Sorting"
    ],
    "problemDescription": "You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string.\nReturn the lexicographically smallest string you could have after applying the mentioned step any number of moves.\n\u00a0\nExample 1:\n\nInput: s = \"cba\", k = 1\nOutput: \"acb\"\nExplanation: \nIn the first move, we move the 1st character 'c' to the end, obtaining the string \"bac\".\nIn the second move, we move the 1st character 'b' to the end, obtaining the final result \"acb\".\n\nExample 2:\n\nInput: s = \"baaca\", k = 3\nOutput: \"aaabc\"\nExplanation: \nIn the first move, we move the 1st character 'b' to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3rd character 'c' to the end, obtaining the final result \"aaabc\".\n\n\u00a0\nConstraints:\n\n1 <= k <= s.length <= 1000\ns consist of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def orderlyQueue(self, s: str, k: int) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"aaab\", k = 1",
        "output": "aaab"
      },
      {
        "input": "s = \"aaa\", k = 3",
        "output": "aaa"
      },
      {
        "input": "s = \"zxy\", k = 3",
        "output": "xyz"
      },
      {
        "input": "s = \"zxy\", k = 1",
        "output": "xyz"
      },
      {
        "input": "s = \"ccccc\", k = 4",
        "output": "ccccc"
      },
      {
        "input": "s = \"abcd\", k = 2",
        "output": "abcd"
      },
      {
        "input": "s = \"cba\", k = 1",
        "output": "acb"
      },
      {
        "input": "s = \"aaa\", k = 1",
        "output": "aaa"
      },
      {
        "input": "s = \"zyx\", k = 2",
        "output": "xyz"
      },
      {
        "input": "s = \"zyx\", k = 1",
        "output": "xzy"
      },
      {
        "input": "s = \"baaca\", k = 3",
        "output": "aaabc"
      },
      {
        "input": "s = \"mississippi\", k = 1",
        "output": "imississipp"
      },
      {
        "input": "s = \"abcdef\", k = 6",
        "output": "abcdef"
      },
      {
        "input": "s = \"aaaabbbbcccc\", k = 3",
        "output": "aaaabbbbcccc"
      },
      {
        "input": "s = \"zzzzzzzzzz\", k = 1",
        "output": "zzzzzzzzzz"
      },
      {
        "input": "s = \"leetcodeleetcode\", k = 6",
        "output": "ccddeeeeeelloott"
      },
      {
        "input": "s = \"mississippi\", k = 4",
        "output": "iiiimppssss"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 1",
        "output": "zzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"aabbccddeeff\", k = 1",
        "output": "aabbccddeeff"
      },
      {
        "input": "s = \"xyzxyzxyzxyz\", k = 4",
        "output": "xxxxyyyyzzzz"
      },
      {
        "input": "s = \"pqrsrstp\", k = 1",
        "output": "ppqrsrst"
      },
      {
        "input": "s = \"abcdefedcba\", k = 20",
        "output": "aabbccddeef"
      },
      {
        "input": "s = \"abcdedcba\", k = 1",
        "output": "aabcdedcb"
      },
      {
        "input": "s = \"pqrsrstp\", k = 3",
        "output": "ppqrrsst"
      },
      {
        "input": "s = \"bananaananab\", k = 2",
        "output": "aaaaaabbnnnn"
      },
      {
        "input": "s = \"cbbca\", k = 2",
        "output": "abbcc"
      },
      {
        "input": "s = \"banana\", k = 2",
        "output": "aaabnn"
      },
      {
        "input": "s = \"leetcode\", k = 4",
        "output": "cdeeelot"
      },
      {
        "input": "s = \"abcdxyz\", k = 5",
        "output": "abcdxyz"
      },
      {
        "input": "s = \"abracadabra\", k = 1",
        "output": "aabracadabr"
      },
      {
        "input": "s = \"mnopqr\", k = 4",
        "output": "mnopqr"
      },
      {
        "input": "s = \"abcdedcba\", k = 9",
        "output": "aabbccdde"
      },
      {
        "input": "s = \"abababab\", k = 2",
        "output": "aaaabbbb"
      },
      {
        "input": "s = \"zyxcba\", k = 1",
        "output": "azyxcb"
      },
      {
        "input": "s = \"aabbccddeeff\", k = 6",
        "output": "aabbccddeeff"
      },
      {
        "input": "s = \"aaaabbbb\", k = 1",
        "output": "aaaabbbb"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", k = 1",
        "output": "azyxwvutsrqponmlkjihgfedcb"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 25",
        "output": "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz"
      },
      {
        "input": "s = \"fedcbabcd\", k = 2",
        "output": "abbccddef"
      },
      {
        "input": "s = \"fedcba\", k = 1",
        "output": "afedcb"
      },
      {
        "input": "s = \"banana\", k = 1",
        "output": "abanan"
      },
      {
        "input": "s = \"mnopqrsmnopqrsmnopqr\", k = 4",
        "output": "mmmnnnooopppqqqrrrss"
      },
      {
        "input": "s = \"aaaaabbbbbcccc\", k = 2",
        "output": "aaaaabbbbbcccc"
      },
      {
        "input": "s = \"mnopqrstuvw\", k = 3",
        "output": "mnopqrstuvw"
      },
      {
        "input": "s = \"abababababab\", k = 6",
        "output": "aaaaaabbbbbb"
      },
      {
        "input": "s = \"abcdedcba\", k = 2",
        "output": "aabbccdde"
      },
      {
        "input": "s = \"pqrsqponmlkjihgfedcba\", k = 1",
        "output": "apqrsqponmlkjihgfedcb"
      },
      {
        "input": "s = \"defabc\", k = 1",
        "output": "abcdef"
      },
      {
        "input": "s = \"abcdexyz\", k = 3",
        "output": "abcdexyz"
      },
      {
        "input": "s = \"aaaaaabbbbb\", k = 2",
        "output": "aaaaaabbbbb"
      },
      {
        "input": "s = \"fghijklmnopqrstuvwxyzabcdef\", k = 10",
        "output": "abcdeffghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abababab\", k = 3",
        "output": "aaaabbbb"
      },
      {
        "input": "s = \"rotation\", k = 2",
        "output": "ainoortt"
      },
      {
        "input": "s = \"mnopqr\", k = 6",
        "output": "mnopqr"
      },
      {
        "input": "s = \"acbacbacbacb\", k = 3",
        "output": "aaaabbbbcccc"
      },
      {
        "input": "s = \"kjihgfedcbazyxwvutsrqponml\", k = 5",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aaaabbbbcccc\", k = 2",
        "output": "aaaabbbbcccc"
      },
      {
        "input": "s = \"abcabcabc\", k = 3",
        "output": "aaabbbccc"
      },
      {
        "input": "s = \"zzzzzzzzyy\", k = 2",
        "output": "yyzzzzzzzz"
      },
      {
        "input": "s = \"aabbbccccddddeeeeffffgggg\", k = 10",
        "output": "aabbbccccddddeeeeffffgggg"
      },
      {
        "input": "s = \"aaaabbbbcccc\", k = 1",
        "output": "aaaabbbbcccc"
      },
      {
        "input": "s = \"abcdfe\", k = 1",
        "output": "abcdfe"
      },
      {
        "input": "s = \"thisisaverylongstringwithrandomcharacters\", k = 1",
        "output": "actersthisisaverylongstringwithrandomchar"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzz\", k = 10",
        "output": "zzzzzzzzzzzzzzz"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", k = 1000",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"thisisatest\", k = 4",
        "output": "aehiisssttt"
      },
      {
        "input": "s = \"banana\", k = 3",
        "output": "aaabnn"
      },
      {
        "input": "s = \"rotor\", k = 1",
        "output": "orrot"
      },
      {
        "input": "s = \"fedcba\", k = 2",
        "output": "abcdef"
      },
      {
        "input": "s = \"ppqpp\", k = 2",
        "output": "ppppq"
      },
      {
        "input": "s = \"abcde\", k = 5",
        "output": "abcde"
      },
      {
        "input": "s = \"abcdfe\", k = 3",
        "output": "abcdef"
      },
      {
        "input": "s = \"zzzzzzzzzzyyyyyyyyxxxxxxxxxx\", k = 25",
        "output": "xxxxxxxxxxyyyyyyyyzzzzzzzzzz"
      },
      {
        "input": "s = \"bananaananab\", k = 1",
        "output": "aananabbanan"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 13",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abcdxyz\", k = 2",
        "output": "abcdxyz"
      },
      {
        "input": "s = \"acbxyz\", k = 2",
        "output": "abcxyz"
      },
      {
        "input": "s = \"xyzzyx\", k = 3",
        "output": "xxyyzz"
      },
      {
        "input": "s = \"abcdeabcde\", k = 5",
        "output": "aabbccddee"
      },
      {
        "input": "s = \"qazwsxedcrfvtgbyhnujmikolp\", k = 1",
        "output": "azwsxedcrfvtgbyhnujmikolpq"
      },
      {
        "input": "s = \"abcdabcd\", k = 2",
        "output": "aabbccdd"
      },
      {
        "input": "s = \"rotation\", k = 1",
        "output": "ationrot"
      },
      {
        "input": "s = \"mnopqrstuvwxyz\", k = 13",
        "output": "mnopqrstuvwxyz"
      },
      {
        "input": "s = \"aabbccddeeffgg\", k = 4",
        "output": "aabbccddeeffgg"
      },
      {
        "input": "s = \"xyzzyx\", k = 2",
        "output": "xxyyzz"
      },
      {
        "input": "s = \"abcabcabc\", k = 1",
        "output": "abcabcabc"
      },
      {
        "input": "s = \"leetcodeleetcode\", k = 5",
        "output": "ccddeeeeeelloott"
      },
      {
        "input": "s = \"aaabbbccc\", k = 1",
        "output": "aaabbbccc"
      },
      {
        "input": "s = \"abracadabra\", k = 5",
        "output": "aaaaabbcdrr"
      },
      {
        "input": "s = \"fedcba\", k = 3",
        "output": "abcdef"
      },
      {
        "input": "s = \"aaabbbccc\", k = 3",
        "output": "aaabbbccc"
      },
      {
        "input": "s = \"xyzxyzxyz\", k = 3",
        "output": "xxxyyyzzz"
      },
      {
        "input": "s = \"zzzzzzzzzzyyyyyyyyxxxxxxxxxx\", k = 1",
        "output": "xxxxxxxxxxzzzzzzzzzzyyyyyyyy"
      },
      {
        "input": "s = \"leetcodeleetcode\", k = 8",
        "output": "ccddeeeeeelloott"
      },
      {
        "input": "s = \"zyxcba\", k = 5",
        "output": "abcxyz"
      },
      {
        "input": "s = \"qwertyuiop\", k = 5",
        "output": "eiopqrtuwy"
      },
      {
        "input": "s = \"rotation\", k = 6",
        "output": "ainoortt"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 1",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abacabadabacaba\", k = 3",
        "output": "aaaaaaaabbbbccd"
      },
      {
        "input": "s = \"bananaappleorange\", k = 7",
        "output": "aaaaabeeglnnnoppr"
      },
      {
        "input": "s = \"abacabadabacaba\", k = 5",
        "output": "aaaaaaaabbbbccd"
      },
      {
        "input": "s = \"abcdefghihgfedcba\", k = 1",
        "output": "aabcdefghihgfedcb"
      },
      {
        "input": "s = \"qazwsxedcrfvtgbyhnujmikolp\", k = 15",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aaaaabbbbbaaaa\", k = 2",
        "output": "aaaaaaaaabbbbb"
      },
      {
        "input": "s = \"zzzyyy\", k = 2",
        "output": "yyyzzz"
      },
      {
        "input": "s = \"qwertyuiop\", k = 10",
        "output": "eiopqrtuwy"
      },
      {
        "input": "s = \"xyzxyzxyz\", k = 9",
        "output": "xxxyyyzzz"
      },
      {
        "input": "s = \"abacabadabacaba\", k = 7",
        "output": "aaaaaaaabbbbccd"
      },
      {
        "input": "s = \"racecar\", k = 1",
        "output": "acecarr"
      },
      {
        "input": "s = \"xyzxyzxyz\", k = 2",
        "output": "xxxyyyzzz"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 26",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"zyxzyxzyxzyx\", k = 5",
        "output": "xxxxyyyyzzzz"
      },
      {
        "input": "s = \"thisisaverylongstringwithrandomcharacters\", k = 5",
        "output": "aaaaccdeegghhhiiiilmnnnoorrrrrssssttttvwy"
      },
      {
        "input": "s = \"hellohellohello\", k = 4",
        "output": "eeehhhllllllooo"
      },
      {
        "input": "s = \"mvvuuz\", k = 3",
        "output": "muuvvz"
      },
      {
        "input": "s = \"aabbcc\", k = 1",
        "output": "aabbcc"
      },
      {
        "input": "s = \"abcdexyz\", k = 1",
        "output": "abcdexyz"
      },
      {
        "input": "s = \"aabbcc\", k = 2",
        "output": "aabbcc"
      }
    ]
  },
  {
    "id": 2344,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Math",
      "Number Theory",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.\nReturn the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide. If this is not possible, return -1.\nNote that an integer x divides y if y % x == 0.\n\u00a0\nExample 1:\n\nInput: nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]\nOutput: 2\nExplanation: \nThe smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide.\nWe use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3].\nThe smallest element in [3,4,3] is 3, which divides all the elements of numsDivide.\nIt can be shown that 2 is the minimum number of deletions needed.\n\nExample 2:\n\nInput: nums = [4,3,6], numsDivide = [8,2,6,10]\nOutput: -1\nExplanation: \nWe want the smallest element in nums to divide all the elements of numsDivide.\nThere is no way to delete elements from nums to allow this.\n\u00a0\nConstraints:\n\n1 <= nums.length, numsDivide.length <= 105\n1 <= nums[i], numsDivide[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,3,4,5], numsDivide = [10,20,30,40,50]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,15,20], numsDivide = [5,15,25,35]",
        "output": "0"
      },
      {
        "input": "nums = [1,3,5,7], numsDivide = [2,4,6,8]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30], numsDivide = [5,10,15]",
        "output": "-1"
      },
      {
        "input": "nums = [5,5,5,5], numsDivide = [5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [3,5,7,9], numsDivide = [15,30,45,60]",
        "output": "0"
      },
      {
        "input": "nums = [2,4,6,8], numsDivide = [2,4,6,8]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,15,20], numsDivide = [10,20,30,40]",
        "output": "0"
      },
      {
        "input": "nums = [5,7,10], numsDivide = [14,35,70]",
        "output": "1"
      },
      {
        "input": "nums = [2,4,8,16], numsDivide = [1,2,3,4]",
        "output": "-1"
      },
      {
        "input": "nums = [3,5,6,8,9], numsDivide = [30,45,60]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4], numsDivide = [2,4,6,8]",
        "output": "0"
      },
      {
        "input": "nums = [4,3,6], numsDivide = [8,2,6,10]",
        "output": "-1"
      },
      {
        "input": "nums = [3,9,7,3], numsDivide = [9,18,90,72]",
        "output": "0"
      },
      {
        "input": "nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]",
        "output": "2"
      },
      {
        "input": "nums = [1], numsDivide = [1]",
        "output": "0"
      },
      {
        "input": "nums = [3,6,9,12], numsDivide = [3,6,9,12]",
        "output": "0"
      },
      {
        "input": "nums = [3,6,9,12,15], numsDivide = [27,54,81,108]",
        "output": "0"
      },
      {
        "input": "nums = [2,4,6,8,10], numsDivide = [20,40,60,80,100]",
        "output": "0"
      },
      {
        "input": "nums = [9,18,27,36,45,54,63,72,81], numsDivide = [162,324,486,648]",
        "output": "0"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70,77,84], numsDivide = [84,168,252]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,15,20,25], numsDivide = [100,200,300]",
        "output": "0"
      },
      {
        "input": "nums = [17, 34, 51, 68], numsDivide = [34, 68, 102, 136, 170]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], numsDivide = [15,30,45,60,75]",
        "output": "0"
      },
      {
        "input": "nums = [8, 16, 32, 64, 128], numsDivide = [256, 512, 1024, 2048]",
        "output": "0"
      },
      {
        "input": "nums = [7,14,21,28,35], numsDivide = [49,98,147,196]",
        "output": "0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19], numsDivide = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "-1"
      },
      {
        "input": "nums = [4, 8, 12, 16, 20], numsDivide = [8, 16, 24, 32, 40, 48, 56]",
        "output": "0"
      },
      {
        "input": "nums = [9,18,27,36,45], numsDivide = [18,36,54,72]",
        "output": "0"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30], numsDivide = [18,36,54,72,90]",
        "output": "0"
      },
      {
        "input": "nums = [21, 42, 63, 84], numsDivide = [42, 84, 126, 168, 210]",
        "output": "0"
      },
      {
        "input": "nums = [2,4,8,16,32,64,128], numsDivide = [256,512,1024,2048]",
        "output": "0"
      },
      {
        "input": "nums = [3, 9, 27, 81, 243], numsDivide = [81, 243, 729, 2187]",
        "output": "0"
      },
      {
        "input": "nums = [4,8,12,16,20,24,28,32,36,40], numsDivide = [4,8,12,16,20]",
        "output": "0"
      },
      {
        "input": "nums = [2,4,6,8,10,12], numsDivide = [24,48,72,96]",
        "output": "0"
      },
      {
        "input": "nums = [3, 6, 9, 12], numsDivide = [18, 24, 30, 36, 42]",
        "output": "0"
      },
      {
        "input": "nums = [13, 26, 39, 52], numsDivide = [260, 390, 520]",
        "output": "0"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], numsDivide = [30, 45, 60, 75]",
        "output": "-1"
      },
      {
        "input": "nums = [8,16,24,32,40,48,56,64], numsDivide = [192,384,576,768]",
        "output": "0"
      },
      {
        "input": "nums = [12,15,18,21], numsDivide = [36,54,72,90]",
        "output": "2"
      },
      {
        "input": "nums = [7,11,13,17], numsDivide = [14,22,26,34]",
        "output": "-1"
      },
      {
        "input": "nums = [1,2,3,5,7,11,13], numsDivide = [2,3,5,7,11,13]",
        "output": "0"
      },
      {
        "input": "nums = [13,26,39,52,65], numsDivide = [260,390,520,650]",
        "output": "0"
      },
      {
        "input": "nums = [31, 37, 41, 43, 47], numsDivide = [93, 121, 143, 187]",
        "output": "-1"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], numsDivide = [10,20,30,40,50,60,70,80,90,100]",
        "output": "0"
      },
      {
        "input": "nums = [7,14,21,28,35], numsDivide = [14,28,42,56]",
        "output": "0"
      },
      {
        "input": "nums = [11, 22, 33, 44, 55], numsDivide = [66, 132, 198, 264]",
        "output": "0"
      },
      {
        "input": "nums = [2,5,7,10,14], numsDivide = [4,10,14,20]",
        "output": "0"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65], numsDivide = [78, 156, 234, 312]",
        "output": "0"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25], numsDivide = [100, 50, 25, 20]",
        "output": "0"
      },
      {
        "input": "nums = [31, 62, 93, 124, 155], numsDivide = [186, 372, 558, 744]",
        "output": "0"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30], numsDivide = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "-1"
      },
      {
        "input": "nums = [101, 202, 303, 404], numsDivide = [202, 404, 606, 808, 1010]",
        "output": "0"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25], numsDivide = [100, 200, 300, 400]",
        "output": "0"
      },
      {
        "input": "nums = [11,22,33,44,55], numsDivide = [220,330,440,550]",
        "output": "0"
      },
      {
        "input": "nums = [47, 94, 141, 188, 235], numsDivide = [282, 564, 846, 1128]",
        "output": "0"
      },
      {
        "input": "nums = [29, 58, 87, 116, 145], numsDivide = [174, 348, 522, 696]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], numsDivide = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "0"
      },
      {
        "input": "nums = [9, 18, 27, 36], numsDivide = [27, 54, 81, 108, 135]",
        "output": "0"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15], numsDivide = [27, 54, 81, 108]",
        "output": "0"
      },
      {
        "input": "nums = [11,22,33,44,55], numsDivide = [22,44,66,88]",
        "output": "0"
      },
      {
        "input": "nums = [13,26,39,52,65], numsDivide = [78,156,234,312]",
        "output": "0"
      },
      {
        "input": "nums = [3, 5, 7, 11, 13], numsDivide = [15, 21, 35, 77]",
        "output": "-1"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3], numsDivide = [1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [18,27,36,45,54], numsDivide = [54,108,162,216]",
        "output": "0"
      },
      {
        "input": "nums = [3,6,9,12,15], numsDivide = [18,36,54,72]",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], numsDivide = [60, 105, 140, 231]",
        "output": "-1"
      },
      {
        "input": "nums = [100,200,300,400,500], numsDivide = [1000,2000,3000,4000]",
        "output": "0"
      },
      {
        "input": "nums = [7,14,28,35], numsDivide = [28,56,84,112]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000], numsDivide = [1000000000, 500000000, 250000000, 125000000]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000, 2000000000, 3000000000], numsDivide = [5000000000, 10000000000]",
        "output": "0"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10], numsDivide = [12, 18, 24, 30, 36]",
        "output": "0"
      },
      {
        "input": "nums = [101,202,303,404,505,606,707,808,909], numsDivide = [1010,2020,3030]",
        "output": "0"
      },
      {
        "input": "nums = [17, 34, 51, 68, 85], numsDivide = [102, 204, 306, 408]",
        "output": "0"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25], numsDivide = [50, 75, 100]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], numsDivide = [100,200,300,400,500]",
        "output": "0"
      },
      {
        "input": "nums = [3,5,7,9,11,13,15,17,19,21], numsDivide = [1,3,5,7,9,11,13,15,17,19,21]",
        "output": "-1"
      },
      {
        "input": "nums = [13,26,39,52,65,78,91,104], numsDivide = [104,208,312]",
        "output": "0"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10], numsDivide = [12, 18, 24, 30]",
        "output": "0"
      },
      {
        "input": "nums = [2,3,5,7,11], numsDivide = [2310,4620,6930,9240]",
        "output": "0"
      },
      {
        "input": "nums = [7, 14, 21, 28], numsDivide = [42, 56, 70, 84]",
        "output": "0"
      },
      {
        "input": "nums = [30,40,50,60,70], numsDivide = [300,600,900,1200]",
        "output": "0"
      },
      {
        "input": "nums = [18, 27, 36, 45], numsDivide = [162, 243, 324]",
        "output": "1"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20], numsDivide = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "-1"
      },
      {
        "input": "nums = [11,22,33,44,55,66], numsDivide = [132,264,396]",
        "output": "0"
      },
      {
        "input": "nums = [10,15,20,25,30], numsDivide = [100,150,200]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], numsDivide = [50,100,150,200]",
        "output": "0"
      },
      {
        "input": "nums = [12, 15, 20, 25, 30], numsDivide = [60, 90, 120, 150]",
        "output": "1"
      },
      {
        "input": "nums = [7,14,21,28,35,42], numsDivide = [420,840,1260,1680]",
        "output": "0"
      },
      {
        "input": "nums = [7,14,28,35,42], numsDivide = [84,168,252,336]",
        "output": "0"
      },
      {
        "input": "nums = [3,5,7,11,13,17,19,23,29,31], numsDivide = [3,5,7,11,13,17,19,23,29,31]",
        "output": "-1"
      },
      {
        "input": "nums = [23, 46, 69, 92, 115], numsDivide = [138, 207, 276, 345, 414]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30,40,50], numsDivide = [25,50,75,100]",
        "output": "-1"
      },
      {
        "input": "nums = [2,3,5,7,11,13], numsDivide = [30030,60060,90090,120120]",
        "output": "0"
      },
      {
        "input": "nums = [12, 24, 36, 48], numsDivide = [60, 120, 180]",
        "output": "0"
      },
      {
        "input": "nums = [43, 86, 129, 172, 215], numsDivide = [258, 387, 516, 645, 774]",
        "output": "0"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35], numsDivide = [42, 56, 70, 84]",
        "output": "0"
      },
      {
        "input": "nums = [11, 22, 33, 44, 55], numsDivide = [220, 330, 440, 550, 660]",
        "output": "0"
      },
      {
        "input": "nums = [2,4,6,8,10], numsDivide = [3,5,7,9,11]",
        "output": "-1"
      },
      {
        "input": "nums = [2,2,2,2,2], numsDivide = [4,6,8,10]",
        "output": "0"
      },
      {
        "input": "nums = [8,16,24,32,40], numsDivide = [40,80,120,160]",
        "output": "0"
      },
      {
        "input": "nums = [5,15,25,35,45,55,65], numsDivide = [165,330,495]",
        "output": "0"
      },
      {
        "input": "nums = [43, 86, 129, 172, 215], numsDivide = [258, 516, 774, 1032]",
        "output": "0"
      },
      {
        "input": "nums = [10,15,20,25,30], numsDivide = [150,300,450,600,750]",
        "output": "0"
      },
      {
        "input": "nums = [3,6,9,12,15,18], numsDivide = [180,360,540,720,900]",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], numsDivide = [100, 200, 300, 400, 500]",
        "output": "0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19], numsDivide = [13,17,19,29,31]",
        "output": "-1"
      },
      {
        "input": "nums = [1001, 2002, 3003, 4004], numsDivide = [2002, 4004, 6006, 8008, 10010]",
        "output": "0"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45], numsDivide = [108, 162, 216, 270, 324]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], numsDivide = [20,40,60,80,100]",
        "output": "0"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65], numsDivide = [78, 130, 195, 260, 325]",
        "output": "0"
      },
      {
        "input": "nums = [3, 6, 9, 12], numsDivide = [36, 72, 108]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,5,7,11,13,17,19,23], numsDivide = [2310,4620,6930,9240]",
        "output": "0"
      },
      {
        "input": "nums = [3,9,12,18], numsDivide = [27,54,81,108]",
        "output": "0"
      },
      {
        "input": "nums = [5,15,25,35,45], numsDivide = [75,150,225,300]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,15,20,25], numsDivide = [50,100,150,200]",
        "output": "0"
      },
      {
        "input": "nums = [11,22,33,44,55], numsDivide = [110,220,330,440,550]",
        "output": "0"
      },
      {
        "input": "nums = [37, 74, 111, 148, 185], numsDivide = [238, 357, 476, 595, 714]",
        "output": "-1"
      },
      {
        "input": "nums = [31, 62, 93, 124, 155], numsDivide = [186, 279, 372, 465, 558]",
        "output": "0"
      },
      {
        "input": "nums = [41, 82, 123, 164, 205], numsDivide = [246, 369, 492, 615, 738]",
        "output": "0"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78], numsDivide = [156, 195, 260, 390]",
        "output": "0"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35], numsDivide = [49, 98, 147, 196]",
        "output": "0"
      },
      {
        "input": "nums = [7, 14, 21, 28], numsDivide = [42, 56, 70]",
        "output": "0"
      },
      {
        "input": "nums = [30,60,90,120,150,180], numsDivide = [300,600,900,1200]",
        "output": "0"
      },
      {
        "input": "nums = [5, 15, 25, 35], numsDivide = [25, 50, 75, 100, 125]",
        "output": "0"
      },
      {
        "input": "nums = [100,200,300,400,500], numsDivide = [150,300,450,600]",
        "output": "-1"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70], numsDivide = [14,28,42,56,70]",
        "output": "0"
      },
      {
        "input": "nums = [13, 26, 39, 52], numsDivide = [26, 52, 78, 104, 130]",
        "output": "0"
      },
      {
        "input": "nums = [17,34,51,68,85], numsDivide = [340,680,1020,1360]",
        "output": "0"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25], numsDivide = [50, 100, 150, 200]",
        "output": "0"
      },
      {
        "input": "nums = [7,14,21,28,35,42], numsDivide = [14,28,42,56,70]",
        "output": "0"
      },
      {
        "input": "nums = [111,222,333,444,555,666,777,888,999], numsDivide = [1110,2220,3330]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 5, 7, 11], numsDivide = [105, 165, 231]",
        "output": "0"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45, 54, 63], numsDivide = [108, 162, 216, 270]",
        "output": "0"
      },
      {
        "input": "nums = [13,26,39,52,65], numsDivide = [26,52,78,104]",
        "output": "0"
      },
      {
        "input": "nums = [11, 22, 33, 44, 55], numsDivide = [66, 77, 88, 99]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,15,20,25,30], numsDivide = [60,120,180,240]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,15,20,25], numsDivide = [50,100,150,200,250]",
        "output": "0"
      },
      {
        "input": "nums = [100, 200, 300, 400], numsDivide = [500, 1000, 1500]",
        "output": "0"
      },
      {
        "input": "nums = [37, 74, 111, 148, 185], numsDivide = [222, 444, 666, 888]",
        "output": "0"
      },
      {
        "input": "nums = [29, 58, 87, 116, 145], numsDivide = [174, 261, 348, 435, 522]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30,40,50], numsDivide = [10,20,30,40,50]",
        "output": "0"
      },
      {
        "input": "nums = [8,16,24,32,40], numsDivide = [100,200,300,400]",
        "output": "-1"
      },
      {
        "input": "nums = [23, 46, 69, 92, 115], numsDivide = [138, 276, 414, 552]",
        "output": "0"
      },
      {
        "input": "nums = [19, 38, 57, 76, 95], numsDivide = [114, 190, 285, 380, 475]",
        "output": "0"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20], numsDivide = [3,5,7,9,11,13,15,17,19,21]",
        "output": "-1"
      },
      {
        "input": "nums = [19, 38, 57, 76, 95], numsDivide = [114, 228, 342, 456]",
        "output": "0"
      },
      {
        "input": "nums = [10, 15, 20, 25], numsDivide = [100, 200, 300]",
        "output": "0"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30], numsDivide = [12,24,36,48,60]",
        "output": "0"
      },
      {
        "input": "nums = [11, 22, 33, 44], numsDivide = [22, 44, 66, 88, 110]",
        "output": "0"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10], numsDivide = [24, 36, 48, 60]",
        "output": "0"
      },
      {
        "input": "nums = [17,23,31,37,41,43], numsDivide = [51,68,85]",
        "output": "0"
      },
      {
        "input": "nums = [8, 16, 24, 32, 40], numsDivide = [16, 32, 48, 64, 80, 96]",
        "output": "0"
      },
      {
        "input": "nums = [19, 38, 57, 76], numsDivide = [38, 76, 114, 152, 190]",
        "output": "0"
      },
      {
        "input": "nums = [41, 82, 123, 164, 205], numsDivide = [246, 492, 738, 984]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1], numsDivide = [1]",
        "output": "0"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35], numsDivide = [42, 56, 84, 98, 140]",
        "output": "0"
      },
      {
        "input": "nums = [6, 12, 18, 24, 30], numsDivide = [12, 24, 36, 48, 60, 72]",
        "output": "0"
      }
    ]
  },
  {
    "id": 1793,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Array",
      "Two Pointers",
      "Binary Search",
      "Monotonic Stack"
    ],
    "problemDescription": "You are given an array of integers nums (0-indexed) and an integer k.\nThe score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j.\nReturn the maximum possible score of a good subarray.\n\u00a0\nExample 1:\n\nInput: nums = [1,4,3,7,4,5], k = 3\nOutput: 15\nExplanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. \n\nExample 2:\n\nInput: nums = [5,5,4,5,4,1,1,1], k = 0\nOutput: 20\nExplanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 2 * 104\n0 <= k < nums.length\n\n",
    "starterCode": "class Solution:\n    def maximumScore(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,5,4,5,4,1,1,1], k = 0",
        "output": "20"
      },
      {
        "input": "nums = [10,10,10,10,10], k = 2",
        "output": "50"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], k = 4",
        "output": "25"
      },
      {
        "input": "nums = [1,100,1,100,1,100,1,100,1,100], k = 4",
        "output": "10"
      },
      {
        "input": "nums = [9,7,5,3,1], k = 2",
        "output": "15"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2], k = 5",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "30"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 2",
        "output": "9"
      },
      {
        "input": "nums = [2,1,3,4,5,6,7,8,9], k = 2",
        "output": "21"
      },
      {
        "input": "nums = [1,4,3,7,4,5], k = 3",
        "output": "15"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [1,3,5,7,9,7,5,3,1], k = 4",
        "output": "25"
      },
      {
        "input": "nums = [100,200,300,400,500,400,300,200,100], k = 4",
        "output": "1500"
      },
      {
        "input": "nums = [10,20,30,40,50], k = 2",
        "output": "90"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], k = 5",
        "output": "30"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], k = 4",
        "output": "54"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1], k = 3",
        "output": "7"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 4",
        "output": "30"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10], k = 4",
        "output": "30"
      },
      {
        "input": "nums = [5,3,8,6,2,7,4,1,9,10,1,2,3,4,5], k = 9",
        "output": "18"
      },
      {
        "input": "nums = [7,6,5,4,3,2,1,2,3,4,5,6,7,8,9], k = 7",
        "output": "16"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5], k = 25",
        "output": "69"
      },
      {
        "input": "nums = [1, 20000, 2, 19999, 3, 19998, 4, 19997, 5, 19996, 6], k = 5",
        "output": "19998"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1], k = 9",
        "output": "55"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "20"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,10,20,30,40,50,60,70,80,90,100], k = 10",
        "output": "200"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,5,5,5,5,5,5,5,5,5,5,10,9,8,7,6,5,4,3,2,1], k = 15",
        "output": "110"
      },
      {
        "input": "nums = [5,15,10,20,25,30,35,40,45,50], k = 3",
        "output": "140"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 9",
        "output": "55"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,20,30,40,50,40,30,20,10,9,8,7,6,5,4,3,2,1], k = 12",
        "output": "150"
      },
      {
        "input": "nums = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000], k = 9",
        "output": "200000"
      },
      {
        "input": "nums = [1,9,2,8,3,7,4,6,5,10,11,12,13,14,15,16,17,18,19,20], k = 9",
        "output": "110"
      },
      {
        "input": "nums = [100,100,100,100,100,100,100,100,100,100], k = 4",
        "output": "1000"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10], k = 9",
        "output": "19"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "110"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 10",
        "output": "20"
      },
      {
        "input": "nums = [20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000], k = 10",
        "output": "400000"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 5",
        "output": "300"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,20,30,40,50,1,5,4,3,2,1,2,3,4,5,1,5,4,3,2,1,2,3,4,5,1,5,4,3,2,1,2,3,4,5], k = 15",
        "output": "44"
      },
      {
        "input": "nums = [5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5], k = 4",
        "output": "19"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 2, 4, 6, 8, 10, 8, 6, 4, 2, 1, 3, 5, 7, 9], k = 9",
        "output": "30"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], k = 10",
        "output": "1000"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60], k = 6",
        "output": "210"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,1], k = 9",
        "output": "10"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 7",
        "output": "64"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5], k = 5",
        "output": "150"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 9",
        "output": "30"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "55"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2], k = 15",
        "output": "30"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 7",
        "output": "15"
      },
      {
        "input": "nums = [10,20,30,40,50,40,30,20,10,100,90,80,70,60,50,40,30,20,10], k = 9",
        "output": "300"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10",
        "output": "55"
      },
      {
        "input": "nums = [1,10,1,10,1,10,1,10,1,10], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120], k = 6",
        "output": "420"
      },
      {
        "input": "nums = [5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1], k = 11",
        "output": "55"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 20",
        "output": "44"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,10,11,12], k = 5",
        "output": "24"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], k = 10",
        "output": "200"
      },
      {
        "input": "nums = [10,1,2,3,4,5,6,7,8,9], k = 1",
        "output": "10"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1], k = 9",
        "output": "99"
      },
      {
        "input": "nums = [100, 50, 25, 12, 6, 3, 2, 1, 2, 3, 6, 12, 25, 50, 100], k = 7",
        "output": "15"
      },
      {
        "input": "nums = [5,5,4,4,4,5,5,4,4,4,5,5,4,4,4,5,5,4,4,4,5,5,4,4,4,5,5,4,4,4], k = 12",
        "output": "120"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 14",
        "output": "55"
      },
      {
        "input": "nums = [5,4,3,2,1,10,9,8,7,6], k = 4",
        "output": "10"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4], k = 10",
        "output": "30"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 40, 30, 20, 10], k = 4",
        "output": "150"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5], k = 10",
        "output": "55"
      },
      {
        "input": "nums = [10,10,10,10,10,1,1,1,1,1], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,100], k = 9",
        "output": "100"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12], k = 10",
        "output": "66"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 20",
        "output": "169"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], k = 12",
        "output": "128"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,100], k = 4",
        "output": "15"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5, 10, 20, 30, 40, 50, 40, 30, 20, 10, 5], k = 15",
        "output": "150"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81], k = 10",
        "output": "1620"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6,5,6,4,7,3,8,2,9,1,10], k = 9",
        "output": "39"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 8",
        "output": "18"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 7",
        "output": "64"
      },
      {
        "input": "nums = [10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990], k = 5",
        "output": "109890"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 20",
        "output": "38"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91], k = 5",
        "output": "910"
      },
      {
        "input": "nums = [60,55,50,45,40,35,30,25,20,15,10,5], k = 5",
        "output": "210"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 20",
        "output": "210"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4], k = 10",
        "output": "20"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6], k = 15",
        "output": "100"
      },
      {
        "input": "nums = [3,3,3,1,2,3,2,1,3,3,3,3], k = 5",
        "output": "12"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10",
        "output": "110"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6], k = 5",
        "output": "21"
      },
      {
        "input": "nums = [20000, 19000, 18000, 17000, 16000, 15000, 14000, 13000, 12000, 11000, 10000], k = 10",
        "output": "110000"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81], k = 15",
        "output": "1620"
      },
      {
        "input": "nums = [1,5,4,3,2,1,2,3,4,5,1,5,4,3,2,1,2,3,4,5,1,5,4,3,2,1,2,3,4,5], k = 25",
        "output": "30"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6], k = 4",
        "output": "10"
      },
      {
        "input": "nums = [10000, 20000, 10000, 20000, 10000, 20000, 10000, 20000, 10000, 20000, 10000], k = 7",
        "output": "110000"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9], k = 8",
        "output": "18"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 15",
        "output": "80"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5], k = 15",
        "output": "210"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], k = 4",
        "output": "300"
      }
    ]
  },
  {
    "id": 2246,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Graph",
      "Topological Sort",
      "Array",
      "String"
    ],
    "problemDescription": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to node i.\nReturn the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.\n\u00a0\nExample 1:\n\n\nInput: parent = [-1,0,0,1,1,2], s = \"abacbe\"\nOutput: 3\nExplanation: The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions. \n\nExample 2:\n\n\nInput: parent = [-1,0,0,0], s = \"aabc\"\nOutput: 3\nExplanation: The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned.\n\n\u00a0\nConstraints:\n\nn == parent.length == s.length\n1 <= n <= 105\n0 <= parent[i] <= n - 1 for all i >= 1\nparent[0] == -1\nparent represents a valid tree.\ns consists of only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "parent = [-1,0,0,0,0,1,2,2], s = \"abcdeff\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,1,2,3], s = \"abac\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,2,2,2], s = \"abbccc\"",
        "output": "4"
      },
      {
        "input": "parent = [-1,0,1,2,2,2], s = \"abcde\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,2,2], s = \"abacabad\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,2,2,2], s = \"abcde\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2], s = \"abcdef\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0], s = \"aabc\"",
        "output": "3"
      },
      {
        "input": "parent = [-1,0,0,1,1,2], s = \"abacbe\"",
        "output": "3"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5], s = \"abcdefg\"",
        "output": "7"
      },
      {
        "input": "parent = [-1,0,0,0,0,0,0], s = \"abcdefg\"",
        "output": "3"
      },
      {
        "input": "parent = [-1,0,0,1,1], s = \"abac\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,1,2,3,4], s = \"abcde\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,1,1,3,3,3,4,4], s = \"abccabcc\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,1,2,2], s = \"aaaa\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,1,1,2,2,2,2], s = \"aabbbbcccc\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], s = \"abcdefgabcdefg\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"aabbaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "5"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "8"
      },
      {
        "input": "parent = [-1,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3], s = \"aaaaaaabbbbbbbcccccccd\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,1,2,3,0,6,7,8,2,10,11,12,1,14,15,16,0,18,19,20,3,22,23,24,4,26,27,28,5,30,31,32,6,34,35,36,7,38,39,40,8,42,43,44,9,46,47,48,10,50,51,52,11,54,55,56,12,58,59,60], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "8"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7], s = \"aabbaacccddeeeff\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "21"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"aabbccddeeffgghhiiiijjjjkkkkllllmmmmnnnnoooppqqrrssttuuvvwwxxyyzz\"",
        "output": "7"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12], s = \"abcdefghijklmno\"",
        "output": "14"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "7"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "10"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21], s = \"zyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "10"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijk\"",
        "output": "8"
      },
      {
        "input": "parent = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6], s = \"aabbaaccddcceeddffgeee\"",
        "output": "5"
      },
      {
        "input": "parent = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4], s = \"abcabcabcabcabcabc\"",
        "output": "5"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "9"
      },
      {
        "input": "parent = [-1,0,0,0,1,1,1,2,2,3], s = \"abacabadaba\"",
        "output": "5"
      },
      {
        "input": "parent = [-1,0,0,0,1,2,2,2,3,3,3,4,4,4], s = \"abacabadacac\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"abacabadacadaeafagahaiajakalalamanaoapaqara\"",
        "output": "7"
      },
      {
        "input": "parent = [-1,0,0,1,2,2,3,4,5,6,7,8,9], s = \"abcdefghijk\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5], s = \"ababababababababababababababababababababababababababababababababababababababababababa\"",
        "output": "5"
      },
      {
        "input": "parent = [-1,0,0,0,1,1,2,2,3,4], s = \"abcdefghij\"",
        "output": "6"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,4,5,6], s = \"aabbccddeee\"",
        "output": "5"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14], s = \"abcdefghijklmno\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,21,22,23,24,25,26,27,28,29], s = \"zyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyz\"",
        "output": "26"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], s = \"abacbacbacbac\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29], s = \"abcdefghijklmnopqrstuvabcdefghijklmnopqrstuvabcdefghijklmnopqrstuvabcdefghijklmnopqrstuv\"",
        "output": "11"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], s = \"abacabadabacabadabacabadabacabadabacabadabacaba\"",
        "output": "32"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21], s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "1"
      },
      {
        "input": "parent = [-1,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7], s = \"abcdefghijklmnopqrstuvwx\"",
        "output": "7"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], s = \"abcdefghijklmnopqrstuvwxypq\"",
        "output": "21"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,0,37,38,39,40,41,42,43,44,45], s = \"abcdefghijklmnopqrstuvwxypqabcdefghijklmnopqrstuvwxypq\"",
        "output": "13"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnop\"",
        "output": "9"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "16"
      },
      {
        "input": "parent = [-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3], s = \"aaaaabbbbbcccccddeeeeffffgghhhhiijjjj\"",
        "output": "3"
      },
      {
        "input": "parent = [-1,0,0,0,1,1,2,2,3,3], s = \"aababbccdd\"",
        "output": "3"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "31"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4], s = \"abcdefghij\"",
        "output": "6"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,2,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "8"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"abacabadacadaeafagahaiajakalalamanaoapaqara\"",
        "output": "7"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "5"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4], s = \"aaabbbcccdd\"",
        "output": "5"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5], s = \"abacabadabacaba\"",
        "output": "5"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4], s = \"abcdefghij\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "8"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4], s = \"abcdefghia\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,0,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "11"
      },
      {
        "input": "parent = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzz\"",
        "output": "10"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzz\"",
        "output": "9"
      },
      {
        "input": "parent = [-1,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "9"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "7"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,1,1,2,2,2,2], s = \"abcdeabcdeabcde\"",
        "output": "5"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "13"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4], s = \"aaaaaaaaaabbccccdddd\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,1,1,2,2,3,3,4,4], s = \"abcdefghij\"",
        "output": "Error: string index out of range"
      }
    ]
  },
  {
    "id": 1719,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Graph"
    ],
    "problemDescription": "You are given an array pairs, where pairs[i] = [xi, yi], and:\n\nThere are no duplicates.\nxi < yi\n\nLet ways be the number of rooted trees that satisfy the following conditions:\n\nThe tree consists of nodes whose values appeared in pairs.\nA pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi.\nNote: the tree does not have to be a binary tree.\n\nTwo ways are considered to be different if there is at least one node that has different parents in both ways.\nReturn:\n\n0 if ways == 0\n1 if ways == 1\n2 if ways > 1\n\nA rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.\nAn ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.\n\u00a0\nExample 1:\n\n\nInput: pairs = [[1,2],[2,3]]\nOutput: 1\nExplanation: There is exactly one valid rooted tree, which is shown in the above figure.\n\nExample 2:\n\n\nInput: pairs = [[1,2],[2,3],[1,3]]\nOutput: 2\nExplanation: There are multiple valid rooted trees. Three of them are shown in the above figures.\n\nExample 3:\n\nInput: pairs = [[1,2],[2,3],[2,4],[1,5]]\nOutput: 0\nExplanation: There are no valid rooted trees.\n\u00a0\nConstraints:\n\n1 <= pairs.length <= 105\n1 <= xi < yi <= 500\nThe elements in pairs are unique.\n\n",
    "starterCode": "class Solution:\n    def checkWays(self, pairs: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[3,5],[4,5]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[4,5],[1,5]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,3],[2,3],[3,4],[4,5]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[3,4]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3]]",
        "output": "1"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[3,5]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,3],[2,3],[4,5]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[1,4]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]",
        "output": "2"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[1,5]]",
        "output": "1"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[4,5]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[1,3]]",
        "output": "2"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[1,5]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[6,11],[6,12],[7,13],[7,14],[8,15],[8,16]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[3,13],[4,14],[4,15],[4,16],[4,17],[5,18],[5,19],[5,20],[5,21],[6,22],[6,23],[6,24],[7,25],[7,26],[7,27],[8,28],[8,29],[8,30],[9,31],[9,32],[9,33],[10,34],[10,35],[10,36],[11,37],[11,38],[11,39],[12,40],[12,41],[12,42],[13,43],[13,44],[13,45],[14,46],[14,47],[14,48],[15,49],[15,50],[15,51]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[9,17],[10,18],[11,19],[12,20]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8],[5,9],[5,10],[6,11],[6,12],[7,13],[7,14],[8,15],[8,16],[9,17],[9,18],[10,19],[10,20],[11,21],[11,22],[12,23],[12,24],[13,25],[13,26],[14,27],[14,28],[15,29],[15,30],[16,31],[16,32],[17,33],[17,34],[18,35],[18,36],[19,37],[19,38],[20,39],[20,40],[21,41],[21,42],[22,43],[22,44],[23,45],[23,46],[24,47],[24,48]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8],[5,9],[5,10],[6,11],[6,12],[7,13],[8,14],[9,15],[10,16],[11,17],[12,18]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[2,7],[2,8],[3,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[4,16],[5,17],[5,18],[5,19],[5,20],[6,21],[6,22],[6,23],[6,24],[7,25],[7,26]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8],[5,9],[5,10],[6,11],[6,12],[7,13],[7,14],[8,15],[8,16],[9,17],[9,18],[10,19],[10,20],[11,21],[11,22],[12,23],[12,24]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,12],[1,11],[1,10],[1,9],[1,8],[1,7],[1,6],[1,5],[1,4],[1,3],[1,2]]",
        "output": "1"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8],[3,9],[3,10],[3,11],[4,12],[4,13],[4,14],[5,15],[5,16],[5,17],[6,18],[6,19],[7,20],[7,21],[8,22],[8,23],[9,24],[9,25],[10,26],[10,27],[11,28],[11,29],[12,30],[12,31],[13,32],[13,33],[14,34],[14,35],[15,36],[15,37],[16,38],[16,39],[17,40],[17,41]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[6,8],[6,9],[7,10],[7,11]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,6],[6,7],[6,8],[1,9],[9,10],[9,11],[1,12],[12,13],[12,14]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25],[12,26],[12,27]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[4,5],[1,6],[6,7],[6,8],[8,9],[9,10],[1,11],[11,12],[12,13]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,3],[3,5],[5,7],[3,6],[6,8],[1,2],[2,4],[4,9],[9,10]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[2,6],[3,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25],[12,26],[12,27],[13,28],[13,29],[14,30],[14,31],[15,32],[15,33]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[2,5],[3,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15],[11,16],[12,17],[13,18],[14,19],[15,20],[16,21],[17,22],[18,23],[19,24],[20,25],[21,26],[22,27],[23,28],[24,29],[25,30],[26,31],[27,32],[28,33],[29,34],[30,35],[31,36],[32,37],[33,38],[34,39],[35,40],[36,41],[37,42],[38,43],[39,44],[40,45],[41,46],[42,47],[43,48],[44,49],[45,50]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[2,7],[3,8],[3,9],[3,10],[4,11],[4,12],[4,13]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[6,11],[6,12],[7,13],[7,14],[8,15],[8,16],[9,17],[9,18],[10,19],[11,20],[11,21],[12,22],[12,23],[13,24],[13,25],[14,26],[14,27],[15,28],[15,29],[16,30],[16,31],[17,32],[17,33],[18,34],[18,35],[19,36],[19,37],[20,38],[20,39],[21,40],[21,41],[22,42],[22,43],[23,44],[23,45]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[2,7],[3,8],[3,9],[3,10],[4,11],[4,12],[4,13],[5,14],[5,15],[5,16],[6,17],[6,18],[6,19],[7,20],[7,21],[7,22],[8,23],[8,24],[8,25],[9,26],[9,27],[9,28],[10,29],[10,30],[10,31]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[2,7],[2,8],[3,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[4,16],[5,17],[5,18],[5,19],[5,20],[6,21],[6,22],[6,23],[6,24],[7,25],[7,26],[7,27],[7,28],[8,29],[8,30],[8,31],[8,32]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[2,6],[3,7],[3,8],[3,9],[4,10],[5,11],[6,12]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8],[5,9],[5,10],[6,11],[6,12]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15],[11,16]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15],[11,16],[12,17],[13,18],[14,19],[15,20]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[8,17]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[3,13],[4,14],[4,15],[4,16],[4,17],[5,18],[5,19],[5,20],[5,21]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[2,7],[3,8],[3,9],[3,10],[4,11],[4,12],[4,13],[5,14],[6,15],[7,16],[8,17],[9,18],[10,19]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39],[20,40],[20,41],[21,42],[21,43]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,16],[13,17],[14,18],[15,19],[16,20],[17,21],[18,22],[19,23],[20,24],[21,25],[22,26],[23,27],[24,28],[25,29],[26,30],[27,31],[28,32],[29,33],[30,34]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[1,5],[5,6],[6,7],[1,8],[8,9],[9,10],[10,11]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[3,13],[4,14],[4,15],[4,16],[4,17],[5,18],[5,19],[5,20],[5,21],[6,22],[6,23],[6,24],[6,25],[7,26],[7,27],[7,28],[7,29],[8,30],[8,31],[8,32],[8,33],[9,34],[9,35],[9,36],[9,37],[10,38],[10,39],[10,40],[10,41]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[10,19],[11,20],[12,21],[13,22],[14,23],[15,24],[16,25],[17,26],[18,27],[19,28],[20,29],[21,30],[22,31],[23,32],[24,33],[25,34],[26,35],[27,36],[28,37],[29,38],[30,39],[31,40]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8],[5,9],[5,10],[6,11],[6,12],[7,13],[7,14],[8,15],[8,16]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40],[20,41],[20,42],[21,43],[21,44],[22,45],[22,46],[23,47],[23,48],[24,49],[24,50]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[2,7],[3,8],[3,9],[3,10],[4,11],[4,12],[4,13],[5,14],[5,15],[5,16],[6,17],[6,18],[6,19],[7,20],[7,21],[7,22],[8,23],[8,24]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15],[11,16],[12,17],[13,18],[14,19],[15,20],[16,21],[17,22],[18,23],[19,24],[20,25]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,20],[19,21],[20,22],[21,23],[22,24],[23,25],[24,26],[25,27],[26,28],[27,29],[28,30]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[2,6],[3,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[6,8],[6,9],[7,10],[7,11],[10,12],[11,13]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[14,27],[15,28],[16,29],[17,30],[18,31],[19,32],[20,33]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,3],[1,2],[3,5],[3,6],[3,7],[2,4],[2,8],[2,9],[4,10],[4,11],[8,12],[8,13],[9,14],[9,15],[14,16],[15,17]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,6],[1,7],[1,8],[2,6],[3,7],[4,8],[5,8],[5,6],[5,7]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[4,5],[1,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[2,4],[2,5],[3,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[5,13]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,6],[6,7],[1,2],[1,3],[1,4],[1,5],[5,8],[8,9]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,3],[3,5],[5,7],[7,9],[1,4],[4,6],[6,8],[8,10],[1,11],[11,12],[12,13],[13,14]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39],[20,40],[20,41],[21,42],[21,43],[22,44],[22,45],[23,46],[23,47],[24,48],[24,49],[25,50],[25,51]]",
        "output": "0"
      },
      {
        "input": "pairs = [[1,15],[1,14],[1,13],[1,12],[1,11],[1,10],[1,9],[1,8],[1,7],[1,6],[1,5],[1,4],[1,3],[1,2]]",
        "output": "1"
      }
    ]
  },
  {
    "id": 2435,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Matrix"
    ],
    "problemDescription": "You are given a 0-indexed m x n integer matrix grid and an integer k. You are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right.\nReturn the number of paths where the sum of the elements on the path is divisible by k. Since the answer may be very large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\n\nInput: grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3\nOutput: 2\nExplanation: There are two paths where the sum of the elements on the path is divisible by k.\nThe first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18 which is divisible by 3.\nThe second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15 which is divisible by 3.\n\nExample 2:\n\n\nInput: grid = [[0,0]], k = 5\nOutput: 1\nExplanation: The path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5.\n\nExample 3:\n\n\nInput: grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1\nOutput: 10\nExplanation: Every integer is divisible by 1 so the sum of the elements on every possible path is divisible by k.\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 5 * 104\n1 <= m * n <= 5 * 104\n0 <= grid[i][j] <= 100\n1 <= k <= 50\n\n",
    "starterCode": "class Solution:\n    def numberOfPaths(self, grid: List[List[int]], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[10,10,10],[10,10,10],[10,10,10]], k = 5",
        "output": "6"
      },
      {
        "input": "grid = [[100,100],[100,100]], k = 101",
        "output": "0"
      },
      {
        "input": "grid = [[100,100],[100,100]], k = 5",
        "output": "2"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6]], k = 2",
        "output": "3"
      },
      {
        "input": "grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1",
        "output": "10"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9]], k = 2",
        "output": "0"
      },
      {
        "input": "grid = [[10,10,10],[10,10,10],[10,10,10]], k = 10",
        "output": "6"
      },
      {
        "input": "grid = [[10,20,30],[40,50,60]], k = 10",
        "output": "3"
      },
      {
        "input": "grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3",
        "output": "2"
      },
      {
        "input": "grid = [[0,0]], k = 5",
        "output": "1"
      },
      {
        "input": "grid = [[x for x in range(1, 101)] for _ in range(100)], k = 17",
        "output": "Error: Solution.numberOfPaths() missing 1 required positional argument: 'grid'"
      },
      {
        "input": "grid = [[2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2]], k = 11",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,4,4,4,4,4],[5,5,5,5,5,5,5,5,5,5]], k = 15",
        "output": "48"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]], k = 7",
        "output": "5"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]], k = 3",
        "output": "13"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1,0],[0,9,8,7,6,5,4,3,2,1],[1,0,9,8,7,6,5,4,3,2]], k = 10",
        "output": "44"
      },
      {
        "input": "grid = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], k = 3",
        "output": "0"
      },
      {
        "input": "grid = [[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9],[9,7,5,3,1,2,4,6,8]], k = 4",
        "output": "5"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]], k = 3",
        "output": "0"
      },
      {
        "input": "grid = [[100,99,98,97,96],[95,94,93,92,91],[90,89,88,87,86],[85,84,83,82,81],[80,79,78,77,76]], k = 50",
        "output": "7"
      },
      {
        "input": "grid = [[50,49,48,47,46],[45,44,43,42,41],[40,39,38,37,36],[35,34,33,32,31],[30,29,28,27,26]], k = 7",
        "output": "10"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], k = 11",
        "output": "7"
      },
      {
        "input": "grid = [[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3],[4,4,4,4,4],[5,5,5,5,5]], k = 3",
        "output": "22"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,4,4,4,4,4],[5,5,5,5,5,5,5,5,5,5]], k = 11",
        "output": "65"
      },
      {
        "input": "grid = [[50,49,48,47,46,45,44,43,42,41],[40,39,38,37,36,35,34,33,32,31],[30,29,28,27,26,25,24,23,22,21],[20,19,18,17,16,15,14,13,12,11],[10,9,8,7,6,5,4,3,2,1]], k = 29",
        "output": "41"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1,0],[0,2,4,6,8,10,12,14,16,18],[18,16,14,12,10,8,6,4,2,0]], k = 19",
        "output": "9"
      },
      {
        "input": "grid = [[100, 0, 0, 100], [0, 100, 100, 0], [100, 0, 0, 100], [0, 100, 100, 0]], k = 100",
        "output": "20"
      },
      {
        "input": "grid = [[97,23,14],[12,54,67],[11,22,33],[44,55,66]], k = 49",
        "output": "0"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]], k = 10",
        "output": "0"
      },
      {
        "input": "grid = [[5,5,5,5,5,5,5,5,5,5],[5,5,5,5,5,5,5,5,5,5],[5,5,5,5,5,5,5,5,5,5],[5,5,5,5,5,5,5,5,5,5]], k = 10",
        "output": "0"
      },
      {
        "input": "grid = [[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,1,2,3,4,5,6,7,8,9]], k = 13",
        "output": "2"
      },
      {
        "input": "grid = [[10,20,30,40,50],[50,40,30,20,10],[10,20,30,40,50],[50,40,30,20,10],[10,20,30,40,50]], k = 13",
        "output": "6"
      },
      {
        "input": "grid = [[5,15,25,35,45],[10,20,30,40,50],[5,15,25,35,45],[10,20,30,40,50]], k = 7",
        "output": "5"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]], k = 5",
        "output": "16"
      },
      {
        "input": "grid = [[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3]], k = 5",
        "output": "0"
      },
      {
        "input": "grid = [[3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8],[9,8,7,6,5,4,3,2],[1,3,5,7,9,11,13,15]], k = 7",
        "output": "20"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]], k = 4",
        "output": "35"
      },
      {
        "input": "grid = [[99,98,97,96,95],[94,93,92,91,90],[89,88,87,86,85],[84,83,82,81,80],[79,78,77,76,75]], k = 50",
        "output": "0"
      },
      {
        "input": "grid = [[100,99,98,97,96,95,94,93],[92,91,90,89,88,87,86,85],[84,83,82,81,80,79,78,77]], k = 8",
        "output": "5"
      },
      {
        "input": "grid = [[30,30,30,30,30,30,30,30,30,30],[30,30,30,30,30,30,30,30,30,30],[30,30,30,30,30,30,30,30,30,30]], k = 25",
        "output": "0"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1]], k = 11",
        "output": "4500"
      },
      {
        "input": "grid = [[42, 24, 64, 18, 81], [30, 37, 30, 26, 44], [30, 37, 30, 26, 44], [30, 37, 30, 26, 44], [30, 37, 30, 26, 44]], k = 17",
        "output": "5"
      },
      {
        "input": "grid = [[1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0]], k = 2",
        "output": "35"
      },
      {
        "input": "grid = [[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3],[3,3,3,3,3,3,3,3,3,3]], k = 10",
        "output": "0"
      },
      {
        "input": "grid = [[10,20,30,40,50,60,70,80,90,100],[100,90,80,70,60,50,40,30,20,10],[10,20,30,40,50,60,70,80,90,100],[100,90,80,70,60,50,40,30,20,10],[10,20,30,40,50,60,70,80,90,100]], k = 11",
        "output": "119"
      },
      {
        "input": "grid = [[50,50,50,50,50,50,50,50,50,50],[50,50,50,50,50,50,50,50,50,50],[50,50,50,50,50,50,50,50,50,50]], k = 100",
        "output": "55"
      },
      {
        "input": "grid = [[25,24,23,22,21],[20,19,18,17,16],[15,14,13,12,11],[10,9,8,7,6],[5,4,3,2,1]], k = 17",
        "output": "1"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,1]], k = 3",
        "output": "16568"
      },
      {
        "input": "grid = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], k = 10",
        "output": "35"
      },
      {
        "input": "grid = [[5,10,15,20,25,30],[35,40,45,50,55,60],[65,70,75,80,85,90],[95,100,105,110,115,120],[125,130,135,140,145,150]], k = 13",
        "output": "8"
      },
      {
        "input": "grid = [[1]*100 for _ in range(100)], k = 100",
        "output": "Error: Solution.numberOfPaths() missing 1 required positional argument: 'grid'"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 7",
        "output": "55"
      },
      {
        "input": "grid = [[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3],[4,4,4,4,4],[5,5,5,5,5]], k = 4",
        "output": "16"
      },
      {
        "input": "grid = [[42,35,18,57],[61,36,35,90],[61,28,47,66],[84,84,53,71]], k = 17",
        "output": "1"
      },
      {
        "input": "grid = [[5,8,3,6,2],[7,1,4,9,10],[12,5,16,3,8],[4,13,11,20,6]], k = 7",
        "output": "4"
      },
      {
        "input": "grid = [[7,6,5,4,3,2,1],[1,2,3,4,5,6,7],[2,3,4,5,6,7,8],[8,7,6,5,4,3,2]], k = 11",
        "output": "2"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,1,1,1,1,1,1,1,1,1]], k = 7",
        "output": "12"
      },
      {
        "input": "grid = [[34,21,54,23],[12,34,56,78],[90,12,34,56],[78,90,12,34]], k = 13",
        "output": "1"
      },
      {
        "input": "grid = [[1,2],[3,4],[5,6],[7,8],[9,0]], k = 5",
        "output": "1"
      },
      {
        "input": "grid = [[50,49,48,47,46,45,44,43,42,41],[40,39,38,37,36,35,34,33,32,31],[30,29,28,27,26,25,24,23,22,21],[20,19,18,17,16,15,14,13,12,11],[10,9,8,7,6,5,4,3,2,1]], k = 42",
        "output": "50"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 7",
        "output": "715"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10]], k = 3",
        "output": "0"
      },
      {
        "input": "grid = [[99, 98, 97, 96], [95, 94, 93, 92], [91, 90, 89, 88]], k = 50",
        "output": "0"
      },
      {
        "input": "grid = [[100,99,98,97,96,95,94,93,92,91],[90,89,88,87,86,85,84,83,82,81],[80,79,78,77,76,75,74,73,72,71],[70,69,68,67,66,65,64,63,62,61],[60,59,58,57,56,55,54,53,52,51]], k = 50",
        "output": "0"
      },
      {
        "input": "grid = [[3,1,4,1,5],[9,2,6,5,3],[5,8,9,7,9],[3,2,3,8,4],[0,2,1,3,8]], k = 13",
        "output": "4"
      },
      {
        "input": "grid = [[3,1,2,3,4],[1,3,4,5,2],[2,4,5,1,3],[4,5,1,3,2],[5,1,3,2,4]], k = 13",
        "output": "39"
      },
      {
        "input": "grid = [[99,98,97,96,95],[94,93,92,91,90],[89,88,87,86,85],[84,83,82,81,80]], k = 25",
        "output": "2"
      },
      {
        "input": "grid = [[99,98,97,96,95],[94,93,92,91,90],[89,88,87,86,85],[84,83,82,81,80],[79,78,77,76,75]], k = 49",
        "output": "0"
      },
      {
        "input": "grid = [[100,0,100,0,100],[0,100,0,100,0],[100,0,100,0,100],[0,100,0,100,0],[100,0,100,0,100]], k = 5",
        "output": "70"
      },
      {
        "input": "grid = [[1,3,5,7,9],[2,4,6,8,10],[1,3,5,7,9],[2,4,6,8,10],[1,3,5,7,9]], k = 11",
        "output": "5"
      },
      {
        "input": "grid = [[37,37,37,37,37,37,37,37,37,37],[37,37,37,37,37,37,37,37,37,37],[37,37,37,37,37,37,37,37,37,37],[37,37,37,37,37,37,37,37,37,37],[37,37,37,37,37,37,37,37,37,37]], k = 47",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], k = 2",
        "output": "70"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,3,5,7,9,11,13,15,17,19]], k = 19",
        "output": "3"
      },
      {
        "input": "grid = [[0,1,2,3,4,5],[5,4,3,2,1,0],[0,2,4,6,8,10],[10,8,6,4,2,0]], k = 4",
        "output": "14"
      },
      {
        "input": "grid = [[50,10,20,30,40],[50,10,20,30,40],[50,10,20,30,40],[50,10,20,30,40],[50,10,20,30,40]], k = 7",
        "output": "10"
      },
      {
        "input": "grid = [[10,20,30,40,50],[15,25,35,45,55],[20,30,40,50,60],[25,35,45,55,65]], k = 27",
        "output": "1"
      }
    ]
  },
  {
    "id": 2014,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "String",
      "Backtracking",
      "Counting",
      "Enumeration"
    ],
    "problemDescription": "You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nA subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.\n\nFor example, \"bba\" is repeated 2 times in the string \"bababcba\", because the string \"bbabba\", constructed by concatenating \"bba\" 2 times, is a subsequence of the string \"bababcba\".\n\nReturn the longest subsequence repeated k times in string s. If multiple such subsequences are found, return the lexicographically largest one. If there is no such subsequence, return an empty string.\n\u00a0\nExample 1:\n\n\nInput: s = \"letsleetcode\", k = 2\nOutput: \"let\"\nExplanation: There are two longest subsequences repeated 2 times: \"let\" and \"ete\".\n\"let\" is the lexicographically largest one.\n\nExample 2:\n\nInput: s = \"bb\", k = 2\nOutput: \"b\"\nExplanation: The longest subsequence repeated 2 times is \"b\".\n\nExample 3:\n\nInput: s = \"ab\", k = 2\nOutput: \"\"\nExplanation: There is no subsequence repeated 2 times. Empty string is returned.\n\n\u00a0\nConstraints:\n\nn == s.length\n2 <= n, k <= 2000\n2 <= n < k * 8\ns consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def longestSubsequenceRepeatedK(self, s: str, k: int) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"aabbcc\", k = 3",
        "output": ""
      },
      {
        "input": "s = \"zzzzzzzzz\", k = 4",
        "output": "zz"
      },
      {
        "input": "s = \"zzzzzzzzzz\", k = 5",
        "output": "zz"
      },
      {
        "input": "s = \"abcabcabcabc\", k = 4",
        "output": "abc"
      },
      {
        "input": "s = \"abcdabcabc\", k = 3",
        "output": "abc"
      },
      {
        "input": "s = \"abababababab\", k = 3",
        "output": "abab"
      },
      {
        "input": "s = \"aabbbccccc\", k = 3",
        "output": "c"
      },
      {
        "input": "s = \"letsleetcode\", k = 2",
        "output": "let"
      },
      {
        "input": "s = \"ab\", k = 2",
        "output": ""
      },
      {
        "input": "s = \"zzzzzzzzzzzzzz\", k = 5",
        "output": "zz"
      },
      {
        "input": "s = \"aaaabbbbcccc\", k = 2",
        "output": "cc"
      },
      {
        "input": "s = \"aaaabbbb\", k = 2",
        "output": "bb"
      },
      {
        "input": "s = \"aabbccddeeff\", k = 2",
        "output": "f"
      },
      {
        "input": "s = \"abcabcabc\", k = 3",
        "output": "abc"
      },
      {
        "input": "s = \"abcdabcdabcd\", k = 3",
        "output": "abcd"
      },
      {
        "input": "s = \"bb\", k = 2",
        "output": "b"
      },
      {
        "input": "s = \"abcdeabcdeabcde\", k = 3",
        "output": "abcde"
      },
      {
        "input": "s = \"abcdefghi\", k = 1",
        "output": "abcdefghi"
      },
      {
        "input": "s = \"aabbcc\", k = 2",
        "output": "c"
      },
      {
        "input": "s = \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\", k = 16",
        "output": "qq"
      },
      {
        "input": "s = \"mnopmnopmnop\", k = 6",
        "output": ""
      },
      {
        "input": "s = \"abcabcabcabc\", k = 3",
        "output": "cab"
      },
      {
        "input": "s = \"abcdefabcdefabcdefabcdef\", k = 4",
        "output": "abcdef"
      },
      {
        "input": "s = \"aabbaaccdd\", k = 3",
        "output": "a"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefg\", k = 3",
        "output": "abcdefg"
      },
      {
        "input": "s = \"kkkkkkkkkkkkkkkk\", k = 16",
        "output": "k"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiii\", k = 3",
        "output": "i"
      },
      {
        "input": "s = \"abcdefghijklaaaaaaabbbbbbbbbccccccccc\", k = 5",
        "output": "cc"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxyxy\", k = 8",
        "output": "yxyx"
      },
      {
        "input": "s = \"abababababababababababababab\", k = 7",
        "output": "abab"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\", k = 5",
        "output": "zzzz"
      },
      {
        "input": "s = \"aabaaaabbbaaa\", k = 4",
        "output": "aa"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 1",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyz\", k = 2",
        "output": "xyzxyzxyz"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbcccccccccccccc\", k = 5",
        "output": "aaa"
      },
      {
        "input": "s = \"ababababababababababababababababab\", k = 10",
        "output": "ba"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabadabacabad\", k = 4",
        "output": "abaabaaba"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm\", k = 2",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabc\", k = 5",
        "output": "cabcab"
      },
      {
        "input": "s = \"mississippi\", k = 2",
        "output": "ssi"
      },
      {
        "input": "s = \"ppppqqrrrrrssstttt\", k = 3",
        "output": "t"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabc\", k = 3",
        "output": "cabcab"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzz\", k = 10",
        "output": "z"
      },
      {
        "input": "s = \"abcabcabcabcabcabc\", k = 3",
        "output": "abcabc"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\", k = 2",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 20",
        "output": "zzz"
      },
      {
        "input": "s = \"abababababababab\", k = 8",
        "output": "ab"
      },
      {
        "input": "s = \"mnopqrqponmlkjihgfedcba\", k = 2",
        "output": "q"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\", k = 5",
        "output": "abcabc"
      },
      {
        "input": "s = \"qqwweerrttyyuuiiooppllaaasssdddfffggghhjjkk\", k = 3",
        "output": "s"
      },
      {
        "input": "s = \"aabbccddeeefffggg\", k = 2",
        "output": "g"
      },
      {
        "input": "s = \"aaabbbcccddd\", k = 3",
        "output": "d"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\", k = 5",
        "output": "dabcdabc"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\", k = 10",
        "output": "abc"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabca\", k = 5",
        "output": "bcabca"
      },
      {
        "input": "s = \"zzzzzzzzzzzz\", k = 5",
        "output": "zz"
      },
      {
        "input": "s = \"aaaabbbbccccdddddd\", k = 4",
        "output": "d"
      },
      {
        "input": "s = \"xzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzy\", k = 4",
        "output": "zyxzyx"
      },
      {
        "input": "s = \"aabbccddeeffgg\", k = 2",
        "output": "g"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\", k = 20",
        "output": "z"
      },
      {
        "input": "s = \"ababababababab\", k = 4",
        "output": "ba"
      },
      {
        "input": "s = \"ababababababababab\", k = 5",
        "output": "ba"
      },
      {
        "input": "s = \"mnopqrsmnopqrsmnopqrsmnopqrsmnopqrs\", k = 3",
        "output": "smnopqr"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghijabcdefghij\", k = 4",
        "output": "abcdefghij"
      },
      {
        "input": "s = \"aaaaaaaaaa\", k = 2",
        "output": "aaaaa"
      },
      {
        "input": "s = \"qwertyqwertyqwerty\", k = 3",
        "output": "qwerty"
      },
      {
        "input": "s = \"xyzzzzzzzzzzzxyzzzzzzzzzzzzxyzzzzzzzzzzzz\", k = 3",
        "output": "xyzzzzzzzzzzz"
      },
      {
        "input": "s = \"ababababababababababababababababab\", k = 16",
        "output": "ba"
      },
      {
        "input": "s = \"aabbccddeeefff\", k = 2",
        "output": "f"
      },
      {
        "input": "s = \"abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef\", k = 6",
        "output": "fabcde"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefg\", k = 2",
        "output": "gabcdef"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 10",
        "output": "zzzz"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 25",
        "output": "z"
      },
      {
        "input": "s = \"aaabbbcccdddeeefffggghhhiii\", k = 4",
        "output": ""
      },
      {
        "input": "s = \"abcdabcdbacdb\", k = 2",
        "output": "cdab"
      },
      {
        "input": "s = \"xyxyxyxyxyxy\", k = 4",
        "output": "yx"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabc\", k = 4",
        "output": "abcabc"
      },
      {
        "input": "s = \"aabaaabaaabaaabaaab\", k = 5",
        "output": "aab"
      },
      {
        "input": "s = \"abcdefghijklaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbcccccccccccccc\", k = 6",
        "output": "bbb"
      },
      {
        "input": "s = \"abcabcabcabcabc\", k = 5",
        "output": "abc"
      },
      {
        "input": "s = \"mmmmmmnnnnnnnnnnoooooo\", k = 5",
        "output": "nn"
      },
      {
        "input": "s = \"mmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxxyyyyyzzzzz\", k = 5",
        "output": "z"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcd\", k = 8",
        "output": "abcd"
      },
      {
        "input": "s = \"zzzzzzzzzzzzz\", k = 5",
        "output": "zz"
      },
      {
        "input": "s = \"axbyczdxeyfzgyhz\", k = 2",
        "output": "xyz"
      },
      {
        "input": "s = \"aaabbbcccdddeeefff\", k = 4",
        "output": ""
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\", k = 10",
        "output": "zxy"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 2",
        "output": "z"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghij\", k = 3",
        "output": "abcdefghij"
      },
      {
        "input": "s = \"abcdefghabcdefghabcdefgh\", k = 3",
        "output": "abcdefgh"
      },
      {
        "input": "s = \"zzzzyyyxxxwww\", k = 4",
        "output": "z"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyz\", k = 4",
        "output": "zxy"
      }
    ]
  },
  {
    "id": 1521,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Segment Tree",
      "Array",
      "Binary Search"
    ],
    "problemDescription": "\nWinston was given the above mysterious function func. He has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.\nReturn the minimum possible value of |func(arr, l, r) - target|.\nNotice that func should be called with the values l and r where 0 <= l, r < arr.length.\n\u00a0\nExample 1:\n\nInput: arr = [9,12,3,7,15], target = 5\nOutput: 2\nExplanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.\n\nExample 2:\n\nInput: arr = [1000000,1000000,1000000], target = 1\nOutput: 999999\nExplanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.\n\nExample 3:\n\nInput: arr = [1,2,4,8,16], target = 0\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 105\n1 <= arr[i] <= 106\n0 <= target <= 107\n\n",
    "starterCode": "class Solution:\n    def closestToTarget(self, arr: List[int], target: int) -> int:\n        ",
    "testCases": [
      {
        "input": "arr = [7,7,7,7,7,7], target = 8",
        "output": "1"
      },
      {
        "input": "arr = [1000000], target = 1000000",
        "output": "0"
      },
      {
        "input": "arr = [2,4,6,8,10], target = 7",
        "output": "1"
      },
      {
        "input": "arr = [5,5,5,5,5], target = 5",
        "output": "0"
      },
      {
        "input": "arr = [1,1,1,1,1], target = 2",
        "output": "1"
      },
      {
        "input": "arr = [1,2,4,8,16], target = 0",
        "output": "0"
      },
      {
        "input": "arr = [10,20,30,40,50], target = 25",
        "output": "5"
      },
      {
        "input": "arr = [9,12,3,7,15], target = 5",
        "output": "2"
      },
      {
        "input": "arr = [5,5,5,5,5], target = 3",
        "output": "2"
      },
      {
        "input": "arr = [3,6,9,12,15], target = 13",
        "output": "1"
      },
      {
        "input": "arr = [1000000,1000000,1000000], target = 1",
        "output": "999999"
      },
      {
        "input": "arr = [2,4,6,8,10], target = 5",
        "output": "1"
      },
      {
        "input": "arr = [1,3,5,7,9], target = 6",
        "output": "1"
      },
      {
        "input": "arr = [10,20,30,40,50], target = 0",
        "output": "0"
      },
      {
        "input": "arr = [7,14,21,28,35], target = 20",
        "output": "0"
      },
      {
        "input": "arr = [3,6,9,12,15], target = 7",
        "output": "1"
      },
      {
        "input": "arr = [1,1,1,1,1], target = 0",
        "output": "1"
      },
      {
        "input": "arr = [10,20,30,40,50], target = 15",
        "output": "5"
      },
      {
        "input": "arr = [100,200,300,400,500], target = 250",
        "output": "6"
      },
      {
        "input": "arr = [2,4,8,16,32], target = 10",
        "output": "2"
      },
      {
        "input": "arr = [23,46,69,92,115,138,161,184,207,230], target = 150",
        "output": "10"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], target = 100",
        "output": "28"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], target = 7",
        "output": "0"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288], target = 50000",
        "output": "15536"
      },
      {
        "input": "arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47], target = 100",
        "output": "53"
      },
      {
        "input": "arr = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180], target = 100",
        "output": "0"
      },
      {
        "input": "arr = [16,8,4,2,1,32,16,8,4,2,1], target = 15",
        "output": "1"
      },
      {
        "input": "arr = [999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991, 999990], target = 1",
        "output": "999983"
      },
      {
        "input": "arr = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], target = 500000000",
        "output": "400000000"
      },
      {
        "input": "arr = [1000000, 999999, 999998, 999997, 999996, 999995], target = 1000000",
        "output": "0"
      },
      {
        "input": "arr = [4294967295, 2147483647, 1073741823, 536870911, 268435455, 134217727, 67108863, 33554431, 16777215, 8388607], target = 1000000",
        "output": "7388607"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], target = 100",
        "output": "28"
      },
      {
        "input": "arr = [5,3,8,12,14,2,11], target = 10",
        "output": "1"
      },
      {
        "input": "arr = [5,3,8,6,2,7,4,1], target = 5",
        "output": "0"
      },
      {
        "input": "arr = [9, 12, 3, 7, 15, 8, 6, 4, 2, 1], target = 5",
        "output": "1"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 10",
        "output": "1"
      },
      {
        "input": "arr = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023], target = 512",
        "output": "1"
      },
      {
        "input": "arr = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023], target = 1",
        "output": "0"
      },
      {
        "input": "arr = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767], target = 10000",
        "output": "1809"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], target = 1000",
        "output": "24"
      },
      {
        "input": "arr = [1000000, 500000, 250000, 125000, 62500, 31250, 15625, 7812, 3906, 1953, 976, 488, 244, 122, 61, 30, 15, 7, 3, 1], target = 100000",
        "output": "1696"
      },
      {
        "input": "arr = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 3",
        "output": "2"
      },
      {
        "input": "arr = [1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125], target = 1000000",
        "output": "609375"
      },
      {
        "input": "arr = [7,14,21,28,35,42,49,56], target = 30",
        "output": "2"
      },
      {
        "input": "arr = [5,10,15,20,25,30,35,40], target = 22",
        "output": "2"
      },
      {
        "input": "arr = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384], target = 1000",
        "output": "24"
      },
      {
        "input": "arr = [1234567,2345678,3456789,4567890,5678901,6789012,7890123,8901234,9012345], target = 5000000",
        "output": "377900"
      },
      {
        "input": "arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47], target = 20",
        "output": "1"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], target = 1000",
        "output": "24"
      },
      {
        "input": "arr = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], target = 500",
        "output": "12"
      },
      {
        "input": "arr = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], target = 500",
        "output": "11"
      },
      {
        "input": "arr = [3,6,9,12,15,18,21], target = 10",
        "output": "1"
      },
      {
        "input": "arr = [83552, 83552, 83552, 83552, 83552, 83552, 83552, 83552], target = 50000",
        "output": "33552"
      },
      {
        "input": "arr = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], target = 1",
        "output": "2"
      },
      {
        "input": "arr = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105], target = 50",
        "output": "1"
      },
      {
        "input": "arr = [2, 6, 14, 30, 62, 126, 254, 510, 1022, 2046], target = 1024",
        "output": "2"
      },
      {
        "input": "arr = [7,7,7,7,7,7,7,7,7,7], target = 5",
        "output": "2"
      },
      {
        "input": "arr = [1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048], target = 100000",
        "output": "31072"
      },
      {
        "input": "arr = [13, 23, 33, 43, 53, 63, 73, 83, 93, 103, 113, 123, 133, 143, 153], target = 75",
        "output": "2"
      },
      {
        "input": "arr = [999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991, 999990], target = 500000",
        "output": "499984"
      },
      {
        "input": "arr = [111111, 222222, 333333, 444444, 555555, 666666, 777777, 888888, 999999, 1111111], target = 500000",
        "output": "24320"
      },
      {
        "input": "arr = [31, 15, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], target = 16",
        "output": "1"
      },
      {
        "input": "arr = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], target = 1",
        "output": "2"
      },
      {
        "input": "arr = [1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000], target = 500",
        "output": "492"
      },
      {
        "input": "arr = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023], target = 500",
        "output": "11"
      },
      {
        "input": "arr = [31,13,7,1,9,15,8,10,18,6], target = 12",
        "output": "1"
      },
      {
        "input": "arr = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000], target = 5000",
        "output": "0"
      },
      {
        "input": "arr = [987654,321654,654321,123456,654123,321987,987321,123654,456789,789123], target = 500000",
        "output": "43211"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], target = 8190",
        "output": "2"
      },
      {
        "input": "arr = [100000, 200000, 300000, 400000, 500000], target = 350000",
        "output": "43216"
      },
      {
        "input": "arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], target = 50",
        "output": "1"
      },
      {
        "input": "arr = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], target = 50000000",
        "output": "23736448"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], target = 0",
        "output": "0"
      },
      {
        "input": "arr = [1000000, 500000, 250000, 125000, 62500, 31250, 15625, 7812, 3906, 1953, 976, 488, 244, 122, 61, 30, 15, 7, 3, 1], target = 1000",
        "output": "24"
      },
      {
        "input": "arr = [987654, 876543, 765432, 654321, 543210, 432109, 321098, 210987, 109876, 98765], target = 500000",
        "output": "24288"
      },
      {
        "input": "arr = [8, 4, 2, 1, 16, 32, 64, 128, 256, 512], target = 100",
        "output": "28"
      },
      {
        "input": "arr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], target = 10",
        "output": "1"
      },
      {
        "input": "arr = [1000000, 500000, 250000, 125000, 62500, 31250, 15625, 7812, 3906, 1953], target = 100000",
        "output": "1696"
      },
      {
        "input": "arr = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], target = 200",
        "output": "55"
      },
      {
        "input": "arr = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], target = 511",
        "output": "1"
      },
      {
        "input": "arr = [123456, 654321, 111111, 222222, 333333, 444444, 555555, 666666, 777777, 888888], target = 333333",
        "output": "0"
      },
      {
        "input": "arr = [31, 15, 7, 3, 1, 1, 3, 7, 15, 31, 15, 7, 3, 1, 1, 3, 7, 15, 31, 15, 7, 3, 1, 1, 3, 7, 15, 31, 15, 7, 3, 1], target = 10",
        "output": "3"
      },
      {
        "input": "arr = [1048576,524288,262144,131072,65536,32768,16384,8192,4096,2048,1024,512,256,128,64,32,16,8,4,2,1], target = 100000",
        "output": "31072"
      },
      {
        "input": "arr = [1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000], target = 1000000",
        "output": "0"
      },
      {
        "input": "arr = [1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], target = 1000000",
        "output": "48576"
      },
      {
        "input": "arr = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575], target = 1000000",
        "output": "48575"
      },
      {
        "input": "arr = [1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], target = 1023",
        "output": "1"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], target = 27",
        "output": "2"
      },
      {
        "input": "arr = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], target = 4",
        "output": "3"
      },
      {
        "input": "arr = [123, 456, 789, 101112, 131415, 161718, 192021, 222324, 252627, 282930], target = 100000",
        "output": "1112"
      },
      {
        "input": "arr = [1000000, 1000000, 1000000, 1, 1, 1, 2, 3, 4, 5], target = 1000005",
        "output": "5"
      },
      {
        "input": "arr = [2147483647, 2147483646, 2147483645, 2147483644, 2147483643, 2147483642, 2147483641, 2147483640], target = 2147483640",
        "output": "0"
      },
      {
        "input": "arr = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31], target = 15",
        "output": "2"
      },
      {
        "input": "arr = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], target = 123456789",
        "output": "23456789"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10], target = 15",
        "output": "5"
      },
      {
        "input": "arr = [33,33,33,33,33,33,33,33,33,33,33,33,33,33,33], target = 32",
        "output": "1"
      },
      {
        "input": "arr = [512, 256, 128, 64, 32, 16, 8, 4, 2, 1], target = 300",
        "output": "44"
      },
      {
        "input": "arr = [999999, 999999, 999999, 999999, 999999, 999999, 999999, 999999, 999999, 999999], target = 1",
        "output": "999998"
      },
      {
        "input": "arr = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], target = 3",
        "output": "3"
      },
      {
        "input": "arr = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], target = 5",
        "output": "0"
      },
      {
        "input": "arr = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], target = 10",
        "output": "2"
      },
      {
        "input": "arr = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90], target = 50",
        "output": "4"
      },
      {
        "input": "arr = [123, 456, 789, 101, 112, 131, 44, 55, 66, 77, 88, 99], target = 200",
        "output": "56"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], target = 20",
        "output": "1"
      },
      {
        "input": "arr = [2,4,8,16,32,64,128,256], target = 100",
        "output": "28"
      },
      {
        "input": "arr = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], target = 10",
        "output": "3"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], target = 75",
        "output": "5"
      },
      {
        "input": "arr = [987654,876543,765432,654321,543210,432109,321098,210987,109876], target = 300000",
        "output": "3480"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], target = 750",
        "output": "18"
      },
      {
        "input": "arr = [1,3,7,15,31,63,127,255], target = 123",
        "output": "4"
      },
      {
        "input": "arr = [255, 127, 63, 31, 15, 7, 3, 1], target = 10",
        "output": "3"
      },
      {
        "input": "arr = [1000000,500000,250000,125000,62500,31250,15625,7812,3906,1953], target = 1000",
        "output": "24"
      },
      {
        "input": "arr = [9,18,27,36,45,54,63,72,81,90], target = 50",
        "output": "4"
      },
      {
        "input": "arr = [1000000, 900000, 800000, 700000, 600000, 500000, 400000, 300000, 200000, 100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10], target = 45000",
        "output": "4728"
      },
      {
        "input": "arr = [123456, 234567, 345678, 456789, 567890, 678901, 789012, 890123, 901234, 101234], target = 400000",
        "output": "54322"
      },
      {
        "input": "arr = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767], target = 1024",
        "output": "1"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], target = 85",
        "output": "5"
      },
      {
        "input": "arr = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], target = 50",
        "output": "50"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 7",
        "output": "0"
      }
    ]
  },
  {
    "id": 2617,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Breadth-First Search",
      "Union Find",
      "Array",
      "Dynamic Programming",
      "Matrix",
      "Monotonic Stack",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed m x n integer matrix grid. Your initial position is at the top-left cell (0, 0).\nStarting from the cell (i, j), you can move to one of the following cells:\n\nCells (i, k) with j < k <= grid[i][j] + j (rightward movement), or\nCells (k, j) with i < k <= grid[i][j] + i (downward movement).\n\nReturn the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). If there is no valid path, return -1.\n\u00a0\nExample 1:\n\n\nInput: grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]\nOutput: 4\nExplanation: The image above shows one of the paths that visits exactly 4 cells.\n\nExample 2:\n\n\nInput: grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]\nOutput: 3\nExplanation: The image above shows one of the paths that visits exactly 3 cells.\n\nExample 3:\n\n\nInput: grid = [[2,1,0],[1,0,0]]\nOutput: -1\nExplanation: It can be proven that no path exists.\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 105\n1 <= m * n <= 105\n0 <= grid[i][j] < m * n\ngrid[m - 1][n - 1] == 0\n\n",
    "starterCode": "class Solution:\n    def minimumVisitedCells(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[2,0,0],[1,3,1],[0,1,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[0,0],[0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,1,1],[1,1,1],[1,1,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[2,1,0],[1,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,0],[0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5], [2, 3, 4, 5, 0], [3, 4, 5, 0, 0], [4, 5, 0, 0, 0], [5, 0, 0, 0, 0]]",
        "output": "5"
      },
      {
        "input": "grid = [[3,2,1,4,0],[4,1,2,3,1],[2,3,0,1,0],[3,0,2,0,1],[0,0,0,0,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[2, 0, 0], [0, 2, 0], [0, 0, 0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[2,1,0,0,0],[0,0,3,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[2,2,2,2,2],[2,1,1,1,2],[2,1,0,1,2],[2,1,1,1,2],[2,2,2,2,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[2, 2, 1, 1], [1, 2, 2, 1], [1, 1, 2, 2], [1, 1, 1, 0]]",
        "output": "5"
      },
      {
        "input": "grid = [[2,2,0,0],[2,2,0,0],[0,0,3,0],[0,0,0,3],[0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[3,0,0,0],[0,3,0,0],[0,0,3,0],[0,0,0,3]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 0]]",
        "output": "3"
      },
      {
        "input": "grid = [[1,2,3,4,5],[5,4,3,2,1],[1,3,5,7,9],[9,7,5,3,1],[0,0,0,0,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[2,3,0,0,1],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,0]]",
        "output": "9"
      },
      {
        "input": "grid = [[0,1,2,3,4],[1,0,1,2,3],[2,1,0,1,2],[3,2,1,0,1],[4,3,2,1,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3,3,3,3,3,3],[3,3,3,3,3,3],[3,3,3,3,3,3],[3,3,3,3,3,3],[3,3,3,3,3,3],[3,3,3,3,3,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3,3,0,2,1,1],[2,2,0,1,1,0],[1,1,0,0,0,0],[1,1,0,0,0,0],[0,0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[0,0,0,0,0,0]]",
        "output": "11"
      },
      {
        "input": "grid = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 0]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,2,3,4,5],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[5,4,3,2,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[2,2,2,2],[2,2,2,2],[2,2,2,2],[2,2,2,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[3,0,0,1],[0,0,0,1],[1,0,0,1],[1,1,1,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[5,0,0,0,0],[4,0,0,0,0],[3,0,0,0,0],[2,0,0,0,0],[1,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,0]]",
        "output": "13"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,2,3,4],[4,3,2,1],[2,1,4,3],[3,4,1,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[3,2,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,0]]",
        "output": "7"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,0]]",
        "output": "11"
      },
      {
        "input": "grid = [[2,1,0,0],[0,2,1,0],[1,0,2,0],[0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3,0,2,1,1],[0,0,0,0,0],[1,0,0,0,0],[0,0,0,0,0],[1,1,1,1,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0, 1, 2, 3], [1, 2, 3, 0], [2, 3, 0, 0], [3, 0, 0, 0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[5,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0]]",
        "output": "7"
      },
      {
        "input": "grid = [[2,0,0,0,0],[0,2,0,0,0],[0,0,2,0,0],[0,0,0,2,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[2,3,1,1,4],[2,2,2,2,2],[1,1,2,1,2],[2,2,2,2,2],[0,0,0,0,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[2,3,0,0,0],[1,1,0,0,0],[1,0,0,0,0],[1,0,0,0,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[4,3,2,1,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3,1,0,2,0],[0,1,1,0,0],[0,0,0,1,1],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,2,3,4,5],[1,2,3,4,5,0],[2,3,4,5,0,5],[3,4,5,0,5,4],[4,5,0,5,4,3],[5,0,5,4,3,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3, 2, 1, 0], [2, 2, 2, 2], [1, 2, 2, 2], [0, 2, 2, 0]]",
        "output": "5"
      },
      {
        "input": "grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0]]",
        "output": "7"
      },
      {
        "input": "grid = [[2,3,1,1,1],[1,2,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,0]]",
        "output": "7"
      },
      {
        "input": "grid = [[5,4,3,2,1,0],[4,3,2,1,0,0],[3,2,1,0,0,0],[2,1,0,0,0,0],[1,0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,3,1,3,1,3],[3,1,3,1,3,1],[1,3,1,3,1,0],[3,1,3,1,3,1],[1,3,1,3,1,1]]",
        "output": "6"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "19"
      },
      {
        "input": "grid = [[5,3,2,1],[2,2,2,1],[1,1,1,1],[0,0,0,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[10,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3,2,2,1],[1,2,3,4],[2,3,1,1],[1,1,1,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[3,1,2,1,1],[2,2,1,1,2],[1,1,2,1,1],[1,2,1,2,1],[0,0,0,0,0]]",
        "output": "6"
      },
      {
        "input": "grid = [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0]]",
        "output": "11"
      },
      {
        "input": "grid = [[2,0,2,0,1,0],[0,2,0,2,0,2],[2,0,2,0,2,0],[0,2,0,2,0,2],[1,0,1,0,1,0],[0,0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0, 2, 2], [2, 0, 2], [2, 2, 0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[5,4,3,2,1],[4,3,2,1,0],[3,2,1,0,0],[2,1,0,0,0],[1,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[2,0,0,0,0,0],[0,2,0,0,0,0],[0,0,2,0,0,0],[0,0,0,2,0,0],[0,0,0,0,2,0],[0,0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 5], [5, 5, 5, 0]]",
        "output": "3"
      },
      {
        "input": "grid = [[4, 3, 2, 1, 0], [3, 3, 3, 3, 3], [2, 3, 2, 3, 2], [1, 3, 2, 3, 1], [0, 3, 2, 3, 0]]",
        "output": "5"
      },
      {
        "input": "grid = [[4,4,4,4,4],[4,4,4,4,4],[4,4,4,4,4],[4,4,4,4,4],[4,4,4,4,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[2,2,2,2],[2,0,0,2],[2,0,0,2],[2,2,2,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[0,0,0,0,0]]",
        "output": "9"
      },
      {
        "input": "grid = [[3,1,2,3,2],[1,1,1,1,1],[2,1,2,1,2],[1,2,1,2,1],[2,1,1,1,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,1,1,1,1,1],[1,0,0,0,0,1],[1,0,0,0,0,1],[1,0,0,0,0,1],[1,0,0,0,0,1],[1,1,1,1,1,0]]",
        "output": "11"
      },
      {
        "input": "grid = [[4,4,4,4],[4,4,4,4],[4,4,4,4],[4,4,4,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[2,3,3,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0]]",
        "output": "12"
      },
      {
        "input": "grid = [[2,2,1,2],[2,2,2,1],[1,2,2,2],[2,1,1,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[3, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 3]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3,2,1,1,2],[2,2,3,1,1],[1,3,2,1,1],[1,1,1,2,3],[1,1,1,1,0]]",
        "output": "6"
      },
      {
        "input": "grid = [[3,2,1,0],[2,3,1,0],[1,1,0,0],[0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[5,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[2, 1, 1, 1], [1, 1, 2, 1], [1, 2, 1, 1], [1, 1, 1, 2]]",
        "output": "5"
      },
      {
        "input": "grid = [[2,1,2,1,2],[1,2,1,2,1],[2,1,2,1,2],[1,2,1,2,1],[0,0,0,0,0]]",
        "output": "5"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[2,3,4,5,6],[1,1,1,1,1],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[2,0,3,0,0],[1,0,0,0,4],[0,0,0,0,0],[3,0,0,0,2],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[4, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1, 2, 3, 4], [2, 3, 4, 3], [3, 4, 3, 2], [4, 3, 2, 1]]",
        "output": "4"
      },
      {
        "input": "grid = [[2,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3,3,3],[3,0,0],[3,0,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[5,5,5,5,5],[5,0,0,0,0],[5,0,0,0,0],[5,0,0,0,0],[5,0,0,0,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[3,2,1,4,0,0,0],[0,1,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[3,2,1,0,0],[2,2,0,1,0],[0,1,0,2,3],[1,0,0,0,4],[0,0,0,0,0]]",
        "output": "7"
      },
      {
        "input": "grid = [[1, 1, 1], [1, 0, 0], [1, 0, 0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[4,2,0,0,0],[2,2,2,0,0],[0,2,2,2,0],[0,0,2,2,2],[0,0,0,2,0]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[2, 1, 2], [1, 2, 1], [2, 1, 0]]",
        "output": "3"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 0]]",
        "output": "9"
      }
    ]
  },
  {
    "id": 2132,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Matrix",
      "Prefix Sum"
    ],
    "problemDescription": "You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).\nYou are then given stamps of size stampHeight x stampWidth. We want to fit the stamps such that they follow the given restrictions and requirements:\n\nCover all the empty cells.\nDo not cover any of the occupied cells.\nWe can put as many stamps as we want.\nStamps can overlap with each other.\nStamps are not allowed to be rotated.\nStamps must stay completely inside the grid.\n\nReturn true if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return false.\n\u00a0\nExample 1:\n\n\nInput: grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3\nOutput: true\nExplanation: We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.\n\nExample 2:\n\n\nInput: grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 \nOutput: false \nExplanation: There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[r].length\n1 <= m, n <= 105\n1 <= m * n <= 2 * 105\ngrid[r][c] is either 0 or 1.\n1 <= stampHeight, stampWidth <= 105\n\n",
    "starterCode": "class Solution:\n    def possibleToStamp(self, grid: List[List[int]], stampHeight: int, stampWidth: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "grid = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]], stampHeight = 2, stampWidth = 2",
        "output": "True"
      },
      {
        "input": "grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[0,0,0]], stampHeight = 1, stampWidth = 1",
        "output": "True"
      },
      {
        "input": "grid = [[0,0],[0,0]], stampHeight = 1, stampWidth = 1",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "True"
      },
      {
        "input": "grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], stampHeight = 2, stampWidth = 2",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,1,0,1,0],[0,0,0,0,0],[0,1,0,1,0],[0,0,0,0,0]], stampHeight = 3, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0],[0,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 4",
        "output": "True"
      },
      {
        "input": "grid = [[1,0,0,1,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,1,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,0,0,1],[1,0,0,0,1],[1,1,1,1,1]], stampHeight = 3, stampWidth = 3",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]], stampHeight = 5, stampWidth = 5",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]], stampHeight = 3, stampWidth = 5",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0],[0,1,1,1,0,1,1,0],[0,1,1,1,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,1,1,0,1,1,0],[0,1,1,1,0,1,1,0],[0,0,0,0,0,0,0,0]], stampHeight = 2, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], stampHeight = 5, stampWidth = 5",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,1,1,1,1,0],[0,1,0,0,1,0],[0,1,1,1,1,0],[0,0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 4",
        "output": "True"
      },
      {
        "input": "grid = [[1,1,1,0,0,0],[0,0,0,0,0,0],[0,0,0,1,1,1],[1,1,1,0,0,0],[0,0,0,0,0,0],[0,0,0,1,1,1]], stampHeight = 2, stampWidth = 3",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0]], stampHeight = 3, stampWidth = 5",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0],[0,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,1,1,0,0],[0,0,1,1,1,0,0],[0,0,1,1,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0]], stampHeight = 2, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,1,0],[0,0,1,0,0,0],[0,1,0,1,0,1],[0,0,1,0,0,0],[1,0,0,0,1,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,1,1,0],[0,0,1,1,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,1,1,0],[0,0,1,1,1,0],[0,0,1,1,1,0],[0,0,0,0,0,0]], stampHeight = 3, stampWidth = 4",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,1,1,0,0],[0,0,1,0,1,0,0],[0,0,1,1,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0],[1,0,1,0,1,0,1],[0,1,0,1,0,1,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,1,0,0,0],[0,0,0,1,1,1,1,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 4",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,1],[0,0,0,0,0],[0,1,0,1,0],[0,0,0,0,0],[1,0,0,0,1]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,0,1],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,0,1]], stampHeight = 2, stampWidth = 2",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,1,1,1,1,0,0],[0,0,1,0,0,1,0,0],[0,0,1,0,0,1,0,0],[0,0,1,1,1,1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 4",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,1,1,1,0],[0,1,1,1,0],[0,1,1,1,0],[0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,1,0,1,0,1,0],[0,0,0,0,0,0,0],[0,1,0,1,0,1,0],[0,0,0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 4",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,1,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0]], stampHeight = 2, stampWidth = 2",
        "output": "True"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1]], stampHeight = 2, stampWidth = 2",
        "output": "True"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,1,1,0,0],[0,0,0,0,0,0],[0,0,1,1,0,0],[0,0,0,0,0,0]], stampHeight = 2, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]], stampHeight = 5, stampWidth = 10",
        "output": "True"
      },
      {
        "input": "grid = [[1,1,0,0,1,1],[1,1,0,0,1,1],[0,0,0,0,0,0],[0,0,0,0,0,0],[1,1,0,0,1,1],[1,1,0,0,1,1]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,1,1,0,1,1,0],[0,1,1,0,1,1,0],[0,0,0,0,0,0,0],[0,1,1,0,1,1,0],[0,1,1,0,1,1,0]], stampHeight = 3, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,1,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,1,0,0],[0,0,0,1,0,0]], stampHeight = 2, stampWidth = 2",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], stampHeight = 5, stampWidth = 4",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,1,1,1,1,0],[0,1,0,0,1,0],[0,1,0,0,1,0],[0,1,1,1,1,0],[0,0,0,0,0,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[1,1,1,1,1],[0,0,0,0,0],[0,1,1,1,0],[0,0,0,0,0],[1,1,1,1,1]], stampHeight = 2, stampWidth = 4",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,1,0,0]], stampHeight = 2, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[1,1,1,1,1],[0,0,0,0,0],[0,1,1,1,0],[0,0,0,0,0],[1,1,1,1,1]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1],[1,0,1,0,1,0],[0,1,0,1,0,1]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 4",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,1,1,1,0],[0,1,1,1,0],[0,1,1,1,0],[0,0,0,0,0]], stampHeight = 4, stampWidth = 4",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,1,1,1,0],[0,1,1,1,0],[0,1,1,1,0],[0,0,0,0,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[1,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 5",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,1,1],[0,0,0,0,1,1],[0,0,1,0,1,1],[0,0,0,0,0,0],[0,0,0,0,0,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0]], stampHeight = 3, stampWidth = 2",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 5",
        "output": "True"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,1]], stampHeight = 2, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,1]], stampHeight = 2, stampWidth = 3",
        "output": "True"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,1],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,1,0,0,0,0]], stampHeight = 2, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,1,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,0,0],[1,0,1,0,1,0,1,0,1],[0,0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,1,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,1]], stampHeight = 3, stampWidth = 4",
        "output": "True"
      },
      {
        "input": "grid = [[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,1,0,0],[0,1,1,1,0],[0,0,1,0,0],[0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[1,1,0,0,0,1,1],[1,1,0,0,0,1,1],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[1,1,0,0,0,1,1],[1,1,0,0,0,1,1]], stampHeight = 3, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1],[0,0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0],[1,1,1,1,1,1,1]], stampHeight = 1, stampWidth = 1",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,1,1,1,1,0],[0,1,0,0,1,0],[0,1,0,0,1,0],[0,1,1,1,1,0],[0,0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 5",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,1,0,0],[0,0,1,1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], stampHeight = 3, stampWidth = 4",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,1,0,0,0],[0,0,0,1,1,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 4",
        "output": "False"
      },
      {
        "input": "grid = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], stampHeight = 5, stampWidth = 4",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]], stampHeight = 5, stampWidth = 5",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,1,1,1,1,0,0],[0,0,1,0,0,0,1,0,0],[0,0,1,1,1,1,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]], stampHeight = 4, stampWidth = 4",
        "output": "False"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,1]], stampHeight = 2, stampWidth = 3",
        "output": "False"
      },
      {
        "input": "grid = [[1,1,1,1],[1,0,0,1],[1,0,0,1],[1,1,1,1]], stampHeight = 2, stampWidth = 2",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]], stampHeight = 3, stampWidth = 3",
        "output": "True"
      },
      {
        "input": "grid = [[0,0,1,0,0],[0,0,0,0,0],[1,0,0,0,1],[0,0,0,0,0],[0,1,0,1,0]], stampHeight = 2, stampWidth = 2",
        "output": "False"
      },
      {
        "input": "grid = [[0,1,0,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]], stampHeight = 3, stampWidth = 2",
        "output": "False"
      }
    ]
  },
  {
    "id": 336,
    "difficulty": "Hard",
    "tags": [
      "Trie",
      "Array",
      "Hash Table",
      "String"
    ],
    "problemDescription": "You are given a 0-indexed array of unique strings words.\nA palindrome pair is a pair of integers (i, j) such that:\n\n0 <= i, j < words.length,\ni != j, and\nwords[i] + words[j] (the concatenation of the two strings) is a palindrome.\n\nReturn an array of all the palindrome pairs of words.\nYou must write an algorithm with\u00a0O(sum of words[i].length)\u00a0runtime complexity.\n\u00a0\nExample 1:\n\nInput: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\nOutput: [[0,1],[1,0],[3,2],[2,4]]\nExplanation: The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]\n\nExample 2:\n\nInput: words = [\"bat\",\"tab\",\"cat\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"battab\",\"tabbat\"]\n\nExample 3:\n\nInput: words = [\"a\",\"\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"a\",\"a\"]\n\n\u00a0\nConstraints:\n\n1 <= words.length <= 5000\n0 <= words[i].length <= 300\nwords[i] consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def palindromePairs(self, words: List[str]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "words = [\"aabb\",\"bbaa\",\"abc\",\"cba\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2]]"
      },
      {
        "input": "words = [\"bat\",\"tab\",\"cat\"]",
        "output": "[[0, 1], [1, 0]]"
      },
      {
        "input": "words = [\"abc\",\"cba\",\"bca\",\"xyz\",\"zyx\"]",
        "output": "[[0, 1], [1, 0], [3, 4], [4, 3]]"
      },
      {
        "input": "words = [\"abba\",\"a\",\"abc\",\"cba\"]",
        "output": "[[2, 3], [3, 2]]"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"\",\"cba\",\"abc\"]",
        "output": "[[0, 3], [0, 1], [4, 1], [1, 0], [3, 4], [4, 3]]"
      },
      {
        "input": "words = [\"abba\",\"a\",\"abc\",\"cba\",\"bbaa\",\"aba\"]",
        "output": "[[2, 3], [3, 2]]"
      },
      {
        "input": "words = [\"ab\",\"ba\",\"abc\",\"cba\",\"abcd\",\"dcba\"]",
        "output": "[[0, 1], [1, 0], [2, 1], [2, 3], [0, 3], [3, 2], [4, 3], [4, 5], [2, 5], [5, 4]]"
      },
      {
        "input": "words = [\"aa\",\"bb\",\"aaa\",\"bbb\",\"aaaa\",\"bbbb\"]",
        "output": "[[0, 2], [2, 0], [1, 3], [3, 1], [2, 4], [4, 0], [0, 4], [4, 2], [3, 5], [5, 1], [1, 5], [5, 3]]"
      },
      {
        "input": "words = [\"aa\",\"b\",\"aaa\",\"bb\"]",
        "output": "[[0, 2], [2, 0], [3, 1], [1, 3]]"
      },
      {
        "input": "words = [\"a\",\"\"]",
        "output": "[[0, 1], [1, 0]]"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]",
        "output": "[[0, 1], [1, 0], [3, 2], [2, 4]]"
      },
      {
        "input": "words = [\"abc\",\"cba\",\"bba\",\"aab\",\"aaa\"]",
        "output": "[[0, 1], [1, 0]]"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"a\",\"\" ]",
        "output": "[[0, 1], [1, 0]]"
      },
      {
        "input": "words = [\"tacocat\",\"racecar\",\"banana\",\"ananab\",\"civic\"]",
        "output": "[[2, 3], [3, 2]]"
      },
      {
        "input": "words = [\"aabb\",\"bbaa\",\"abab\",\"baba\",\"aaaa\",\"bbbb\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2]]"
      },
      {
        "input": "words = [\"abcd\",\"dcba\"]",
        "output": "[[0, 1], [1, 0]]"
      },
      {
        "input": "words = [\"dcb\",\"abcd\",\"cba\",\"abc\",\"bca\",\"bac\",\"cab\",\"a\"]",
        "output": "[[0, 1], [1, 2], [2, 3], [3, 2], [5, 6], [6, 5]]"
      },
      {
        "input": "words = [\"abab\",\"baba\",\"abba\",\"baab\",\"aaaa\",\"bbbb\"]",
        "output": "[[0, 1], [1, 0]]"
      },
      {
        "input": "words = [\"abba\",\"a\",\"baa\",\"b\"]",
        "output": "[[2, 3]]"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\",\"ddsssll\"]",
        "output": "[[0, 1], [1, 0], [3, 2], [2, 4]]"
      },
      {
        "input": "words = [\"a\",\"abc\",\"aba\",\"xyz\",\"zyx\"]",
        "output": "[[3, 4], [4, 3]]"
      },
      {
        "input": "words = [\"\",\"a\",\"b\",\"c\",\"d\"]",
        "output": "[[1, 0], [0, 1], [2, 0], [0, 2], [3, 0], [0, 3], [4, 0], [0, 4]]"
      },
      {
        "input": "words = [\"aabb\",\"bbaa\",\"aaaa\",\"abba\",\"baab\"]",
        "output": "[[0, 1], [1, 0]]"
      },
      {
        "input": "words = [\"dcb\",\"abcd\",\"cba\",\"cbcd\"]",
        "output": "[[0, 1], [1, 2], [0, 3]]"
      },
      {
        "input": "words = [\"zxcvbnm\",\"mnbvcxz\",\"asdfghjkl\",\"lkjhgfdsa\",\"qwertyuiop\",\"poiuytrewq\",\"1234567890\",\"0987654321\",\"abcdefghij\",\"jihgfedcba\",\"klmnopqrst\",\"tsrqponmlk\",\"uvwxyz\",\"zyxwvut\",\"nopqrstu\",\"utsrqpon\",\"abcdefgh\",\"hgfedcba\",\"ijklmnop\",\"ponmlkji\",\"qrstuvwx\",\"xwvutsrq\",\"yz\",\"zy\",\"abcd\",\"dcba\",\"ab\",\"ba\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2], [4, 5], [5, 4], [6, 7], [7, 6], [8, 9], [9, 8], [10, 11], [11, 10], [13, 12], [14, 15], [15, 14], [16, 17], [17, 16], [18, 19], [19, 18], [20, 21], [21, 20], [22, 52], [53, 22], [22, 23], [23, 53], [52, 23], [23, 22], [24, 25], [25, 24], [26, 28], [29, 26], [26, 27], [27, 29], [28, 27], [27, 26]]"
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaa\",\"aaaaaaaa\",\"aaaaaaaaa\",\"aaaaaaaaaa\",\"aaaaaaaaaaa\",\"aaaaaaaaaaaa\",\"aaaaaaaaaaaaa\",\"aaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaa\"]",
        "output": "[[1, 0], [0, 1], [2, 0], [1, 2], [2, 1], [0, 2], [3, 0], [2, 3], [3, 1], [1, 3], [3, 2], [0, 3], [4, 0], [3, 4], [4, 1], [2, 4], [4, 2], [1, 4], [4, 3], [0, 4], [5, 0], [4, 5], [5, 1], [3, 5], [5, 2], [2, 5], [5, 3], [1, 5], [5, 4], [0, 5], [6, 0], [5, 6], [6, 1], [4, 6], [6, 2], [3, 6], [6, 3], [2, 6], [6, 4], [1, 6], [6, 5], [0, 6], [7, 0], [6, 7], [7, 1], [5, 7], [7, 2], [4, 7], [7, 3], [3, 7], [7, 4], [2, 7], [7, 5], [1, 7], [7, 6], [0, 7], [8, 0], [7, 8], [8, 1], [6, 8], [8, 2], [5, 8], [8, 3], [4, 8], [8, 4], [3, 8], [8, 5], [2, 8], [8, 6], [1, 8], [8, 7], [0, 8], [9, 0], [8, 9], [9, 1], [7, 9], [9, 2], [6, 9], [9, 3], [5, 9], [9, 4], [4, 9], [9, 5], [3, 9], [9, 6], [2, 9], [9, 7], [1, 9], [9, 8], [0, 9], [10, 0], [9, 10], [10, 1], [8, 10], [10, 2], [7, 10], [10, 3], [6, 10], [10, 4], [5, 10], [10, 5], [4, 10], [10, 6], [3, 10], [10, 7], [2, 10], [10, 8], [1, 10], [10, 9], [0, 10], [11, 0], [10, 11], [11, 1], [9, 11], [11, 2], [8, 11], [11, 3], [7, 11], [11, 4], [6, 11], [11, 5], [5, 11], [11, 6], [4, 11], [11, 7], [3, 11], [11, 8], [2, 11], [11, 9], [1, 11], [11, 10], [0, 11], [12, 0], [11, 12], [12, 1], [10, 12], [12, 2], [9, 12], [12, 3], [8, 12], [12, 4], [7, 12], [12, 5], [6, 12], [12, 6], [5, 12], [12, 7], [4, 12], [12, 8], [3, 12], [12, 9], [2, 12], [12, 10], [1, 12], [12, 11], [0, 12], [13, 0], [12, 13], [13, 1], [11, 13], [13, 2], [10, 13], [13, 3], [9, 13], [13, 4], [8, 13], [13, 5], [7, 13], [13, 6], [6, 13], [13, 7], [5, 13], [13, 8], [4, 13], [13, 9], [3, 13], [13, 10], [2, 13], [13, 11], [1, 13], [13, 12], [0, 13], [14, 0], [13, 14], [14, 1], [12, 14], [14, 2], [11, 14], [14, 3], [10, 14], [14, 4], [9, 14], [14, 5], [8, 14], [14, 6], [7, 14], [14, 7], [6, 14], [14, 8], [5, 14], [14, 9], [4, 14], [14, 10], [3, 14], [14, 11], [2, 14], [14, 12], [1, 14], [14, 13], [0, 14], [15, 0], [14, 15], [15, 1], [13, 15], [15, 2], [12, 15], [15, 3], [11, 15], [15, 4], [10, 15], [15, 5], [9, 15], [15, 6], [8, 15], [15, 7], [7, 15], [15, 8], [6, 15], [15, 9], [5, 15], [15, 10], [4, 15], [15, 11], [3, 15], [15, 12], [2, 15], [15, 13], [1, 15], [15, 14], [0, 15], [16, 0], [15, 16], [16, 1], [14, 16], [16, 2], [13, 16], [16, 3], [12, 16], [16, 4], [11, 16], [16, 5], [10, 16], [16, 6], [9, 16], [16, 7], [8, 16], [16, 8], [7, 16], [16, 9], [6, 16], [16, 10], [5, 16], [16, 11], [4, 16], [16, 12], [3, 16], [16, 13], [2, 16], [16, 14], [1, 16], [16, 15], [0, 16], [17, 0], [16, 17], [17, 1], [15, 17], [17, 2], [14, 17], [17, 3], [13, 17], [17, 4], [12, 17], [17, 5], [11, 17], [17, 6], [10, 17], [17, 7], [9, 17], [17, 8], [8, 17], [17, 9], [7, 17], [17, 10], [6, 17], [17, 11], [5, 17], [17, 12], [4, 17], [17, 13], [3, 17], [17, 14], [2, 17], [17, 15], [1, 17], [17, 16], [0, 17], [18, 0], [17, 18], [18, 1], [16, 18], [18, 2], [15, 18], [18, 3], [14, 18], [18, 4], [13, 18], [18, 5], [12, 18], [18, 6], [11, 18], [18, 7], [10, 18], [18, 8], [9, 18], [18, 9], [8, 18], [18, 10], [7, 18], [18, 11], [6, 18], [18, 12], [5, 18], [18, 13], [4, 18], [18, 14], [3, 18], [18, 15], [2, 18], [18, 16], [1, 18], [18, 17], [0, 18], [19, 0], [18, 19], [19, 1], [17, 19], [19, 2], [16, 19], [19, 3], [15, 19], [19, 4], [14, 19], [19, 5], [13, 19], [19, 6], [12, 19], [19, 7], [11, 19], [19, 8], [10, 19], [19, 9], [9, 19], [19, 10], [8, 19], [19, 11], [7, 19], [19, 12], [6, 19], [19, 13], [5, 19], [19, 14], [4, 19], [19, 15], [3, 19], [19, 16], [2, 19], [19, 17], [1, 19], [19, 18], [0, 19]]"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]",
        "output": "[[0, 3], [3, 0], [1, 3], [3, 1], [2, 3], [3, 2], [4, 3], [3, 4], [5, 3], [3, 5], [6, 3], [3, 6], [7, 3], [3, 7], [8, 3], [3, 8], [9, 3], [3, 9], [10, 3], [3, 10], [11, 3], [3, 11], [12, 3], [3, 12], [13, 3], [3, 13], [14, 3], [3, 14], [15, 3], [3, 15], [16, 3], [3, 16], [17, 3], [3, 17], [18, 3], [3, 18], [19, 3], [3, 19], [20, 3], [3, 20], [21, 3], [3, 21], [22, 3], [3, 22], [23, 3], [3, 23], [24, 3], [3, 24], [25, 3], [3, 25], [26, 3], [3, 26]]"
      },
      {
        "input": "words = [\"noon\",\"civic\",\"level\",\"rotor\",\"deified\",\"redder\",\"repaper\",\"refer\",\"reviver\",\"reviled\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"abba\",\"baab\",\"aabb\",\"bbaa\",\"aaaa\",\"aaab\",\"abaa\",\"baaa\",\"bbba\",\"baba\"]",
        "output": "[[2, 3], [3, 2], [5, 7], [7, 5]]"
      },
      {
        "input": "words = [\"a\",\"ab\",\"abc\",\"abcd\",\"abcde\",\"abcdef\",\"abcdefg\",\"abcdefgh\",\"abcdefghi\",\"abcdefghij\"]",
        "output": "[[1, 0]]"
      },
      {
        "input": "words = [\"noon\",\"civic\",\"rotor\",\"refer\",\"deed\",\"level\",\"kayak\",\"reviled\",\"repaid\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"race\",\"car\",\"\",\"\",\"racecar\",\"ecar\",\"cec\",\"ceccec\"]",
        "output": "[[0, 1], [0, 5], [2, 3], [4, 3], [3, 4], [5, 0], [6, 3], [3, 6], [7, 3], [7, 6], [6, 7], [3, 7]]"
      },
      {
        "input": "words = [\"abcdabcd\",\"dcbaabcd\",\"cdabcd\",\"dcbabcd\",\"abcbabc\",\"cbababc\",\"abcabcba\",\"bcbabcba\",\"cdcdcdcd\",\"dcddcddc\",\"abcd\",\"dcba\",\"cd\",\"dc\",\"abcdabc\",\"dcbaabc\",\"abc\",\"cba\"]",
        "output": "[[15, 1], [6, 17], [4, 7], [12, 9], [10, 17], [10, 11], [16, 11], [11, 10], [12, 13], [13, 12], [16, 17], [17, 16]]"
      },
      {
        "input": "words = [\"race\",\"car\",\"cec\",\"dec\",\"ded\",\"level\",\"deified\",\"civic\"]",
        "output": "[[0, 1]]"
      },
      {
        "input": "words = [\"abcde\",\"edcba\",\"fgh\",\"hgf\",\"xyz\",\"zyx\",\"ijk\",\"kji\",\"mnop\",\"ponm\",\"qrst\",\"tsrq\",\"uvw\",\"wvu\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2], [4, 5], [5, 4], [6, 7], [7, 6], [8, 9], [9, 8], [10, 11], [11, 10], [12, 13], [13, 12]]"
      },
      {
        "input": "words = [\"race\",\"ecar\",\"car\",\"racecar\",\"carrace\",\"arcec\",\"cecarr\",\"racecarcar\"]",
        "output": "[[0, 2], [0, 1], [1, 0]]"
      },
      {
        "input": "words = [\"aabbcc\",\"ccbbaa\",\"abcde\",\"edcba\",\"abcd\",\"dcba\"]",
        "output": "[[0, 1], [1, 0], [2, 5], [2, 3], [4, 3], [3, 2], [4, 5], [5, 4]]"
      },
      {
        "input": "words = [\"aabbcc\",\"ccbbaa\",\"abc\",\"cba\",\"abcd\",\"dcba\",\"abcde\",\"edcba\",\"abcdef\",\"fedcba\",\"abcdefg\",\"gfedcba\",\"abcdefgh\",\"hgfedcba\",\"abcdefghi\",\"ihgfedcba\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2], [4, 3], [4, 5], [2, 5], [5, 4], [6, 5], [6, 7], [4, 7], [7, 6], [8, 7], [8, 9], [6, 9], [9, 8], [10, 9], [10, 11], [8, 11], [11, 10], [12, 11], [12, 13], [10, 13], [13, 12], [14, 13], [14, 15], [12, 15], [15, 14]]"
      },
      {
        "input": "words = [\"abcde\",\"edcba\",\"fghij\",\"jihgf\",\"klmno\",\"onmlk\",\"pqrst\",\"tsrqp\",\"uvwxy\",\"yxwuv\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2], [4, 5], [5, 4], [6, 7], [7, 6]]"
      },
      {
        "input": "words = [\"abab\",\"baba\",\"ab\",\"ba\",\"a\",\"b\",\"\",\"aba\",\"bab\",\"bba\",\"aab\",\"baa\"]",
        "output": "[[0, 4], [8, 0], [0, 7], [5, 0], [0, 1], [1, 5], [7, 1], [1, 8], [4, 1], [1, 0], [2, 4], [5, 2], [2, 3], [3, 5], [4, 3], [3, 2], [4, 6], [6, 4], [5, 6], [6, 5], [7, 6], [2, 7], [7, 3], [6, 7], [8, 6], [3, 8], [8, 2], [6, 8], [2, 9], [4, 9], [3, 10], [5, 10], [10, 11], [11, 5], [11, 2], [11, 10]]"
      },
      {
        "input": "words = [\"aabbcc\",\"ccbbaa\",\"abcabc\",\"cbabca\",\"bacbac\",\"abacab\",\"bacbac\",\"cababc\",\"bcaacb\",\"aabb\",\"bbaa\",\"aabbaa\",\"abbbaa\",\"aaabbb\",\"baaabb\",\"aababb\",\"abbaab\",\"bababa\"]",
        "output": "[[0, 10], [0, 1], [9, 1], [1, 0], [9, 10], [10, 9], [9, 11], [11, 10]]"
      },
      {
        "input": "words = [\"xyxy\",\"yxyx\",\"yxx\",\"xx\",\"xyyx\",\"yyxy\",\"xyx\",\"yyy\",\"xyyxxyy\",\"yyxxyyx\",\"xyyyxyx\",\"yyxyxxy\",\"xyyxyyx\",\"yyxxyxy\",\"xyyyxxy\",\"yyxyxyx\",\"xyyxyxy\",\"yyxxyyy\",\"xyyyxyy\",\"yyxxyxy\",\"xyyxyyx\",\"yyxxyxy\",\"xyyyxxy\",\"yyxyxyx\",\"xyyxyxy\",\"yyxxyyy\",\"xyyyxyy\",\"yyxxyxy\",\"xyyxyyx\",\"yyxxyxy\",\"xyyyxxy\",\"yyxyxyx\",\"xyyxyxy\",\"yyxxyyy\"]",
        "output": "[[0, 6], [0, 1], [6, 1], [1, 0], [3, 2], [8, 9], [9, 8], [12, 28], [16, 4], [20, 28], [24, 4], [32, 4]]"
      },
      {
        "input": "words = [\"abcde\",\"edcba\",\"fghij\",\"jihgf\",\"klmno\",\"onmlk\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2], [4, 5], [5, 4]]"
      },
      {
        "input": "words = [\"ab\",\"ba\",\"abc\",\"cba\",\"abcd\",\"dcba\",\"abcde\",\"edcba\",\"abcdef\",\"fedcba\",\"abcdefg\",\"gfedcba\"]",
        "output": "[[0, 1], [1, 0], [2, 1], [2, 3], [0, 3], [3, 2], [4, 3], [4, 5], [2, 5], [5, 4], [6, 5], [6, 7], [4, 7], [7, 6], [8, 7], [8, 9], [6, 9], [9, 8], [10, 9], [10, 11], [8, 11], [11, 10]]"
      },
      {
        "input": "words = [\"ab\",\"ba\",\"abc\",\"cba\",\"abcd\",\"dcba\",\"abcde\",\"edcba\",\"abcdef\",\"fedcba\",\"abcdefg\",\"gfedcba\",\"abcdefgh\",\"hgfedcba\",\"abcdefghi\",\"ihgfedcba\",\"abcdefghij\",\"jihgfedcba\",\"abcdefghijk\",\"kjihgfedcba\",\"abcdefghijkl\",\"lkjihgfedcba\",\"abcdefghijklm\",\"mlkjihgfedcba\",\"abcdefghijklmn\",\"nmlkjihgfedcba\",\"abcdefghijklmno\",\"onmlkjihgfedcba\",\"abcdefghijklmnop\",\"ponmlkjihgfedcba\",\"abcdefghijklmnopq\",\"qponmlkjihgfedcba\",\"abcdefghijklmnopqr\",\"rponmlkjihgfedcba\",\"abcdefghijklmnopqrs\",\"spnmlkjihgfedcba\",\"abcdefghijklmnopqrst\",\"tspnmlkjihgfedcba\",\"abcdefghijklmnopqrstu\",\"ustpnmlkjihgfedcba\",\"abcdefghijklmnopqrstuv\",\"vustpnmlkjihgfedcba\",\"abcdefghijklmnopqrstuvw\",\"wvustpnmlkjihgfedcba\",\"abcdefghijklmnopqrstuvwx\",\"xwvustpnmlkjihgfedcba\",\"abcdefghijklmnopqrstuvwxy\",\"yxwvustpnmlkjihgfedcba\",\"abcdefghijklmnopqrstuvwxyz\",\"zyxwvutsrqponmlkjihgfedcba\"]",
        "output": "[[0, 1], [1, 0], [2, 1], [2, 3], [0, 3], [3, 2], [4, 3], [4, 5], [2, 5], [5, 4], [6, 5], [6, 7], [4, 7], [7, 6], [8, 7], [8, 9], [6, 9], [9, 8], [10, 9], [10, 11], [8, 11], [11, 10], [12, 11], [12, 13], [10, 13], [13, 12], [14, 13], [14, 15], [12, 15], [15, 14], [16, 15], [16, 17], [14, 17], [17, 16], [18, 17], [18, 19], [16, 19], [19, 18], [20, 19], [20, 21], [18, 21], [21, 20], [22, 21], [22, 23], [20, 23], [23, 22], [24, 23], [24, 25], [22, 25], [25, 24], [26, 25], [26, 27], [24, 27], [27, 26], [28, 27], [28, 29], [26, 29], [29, 28], [30, 29], [30, 31], [28, 31], [31, 30], [32, 31], [28, 33], [48, 49], [46, 49], [49, 48]]"
      },
      {
        "input": "words = [\"abcba\",\"bcbaa\",\"cbaab\",\"baabc\",\"aabcd\",\"bcdcb\",\"cdcbc\",\"dcbcd\",\"cbcdc\",\"bcdbc\",\"abcdc\"]",
        "output": "[[2, 3], [3, 2], [6, 8], [8, 6]]"
      },
      {
        "input": "words = [\"abcde\",\"edcba\",\"\",\"\",\"abcdeedcba\",\"aabcdeedcbaa\",\"aaabcdeedcbaaa\",\"aaaabcdeedcbaaaa\",\"aaaaabcdeedcbaaaaa\",\"abcdeedcbaaaaa\",\"aabcdeedcbaaaaaa\",\"aaabcdeedcbaaaaaaa\",\"aaaabcdeedcbaaaaaaaa\",\"aaaaabcdeedcbaaaaaaaaa\",\"abcdeedcbaaaaaaaaaa\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [4, 3], [3, 4], [5, 3], [3, 5], [6, 3], [3, 6], [7, 3], [3, 7], [8, 3], [8, 9], [3, 8], [9, 4], [10, 5], [11, 6], [12, 7], [13, 9], [13, 8], [14, 4]]"
      },
      {
        "input": "words = [\"abacaba\",\"abcbaca\",\"abcdcba\",\"abeceda\",\"aabcdcbba\",\"abcddcba\",\"deified\",\"civic\",\"level\",\"rotor\",\"madam\",\"refer\",\"repaper\",\"reviver\",\"reviled\",\"redder\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"abacaba\",\"acababa\",\"bacabab\",\"cabaaba\",\"\",\"abacaba\",\"acababa\",\"bacabab\",\"cabaaba\"]",
        "output": "[[0, 4], [0, 5], [4, 0], [5, 4], [4, 5]]"
      },
      {
        "input": "words = [\"a\",\"ab\",\"abc\",\"abcd\",\"abcba\",\"abccba\",\"abcdcba\",\"abccbaa\"]",
        "output": "[[1, 0], [7, 5], [0, 7]]"
      },
      {
        "input": "words = [\"palindrome\",\"emordnilap\",\"word\",\"drow\",\"madam\",\"ada\",\"radar\",\"kayak\",\"reviled\",\"devil\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2]]"
      },
      {
        "input": "words = [\"noon\",\"moon\",\"noontime\",\"timenoon\",\"time\",\"emit\"]",
        "output": "[[5, 2], [3, 5], [4, 5], [5, 4]]"
      },
      {
        "input": "words = [\"xyx\",\"yxy\",\"xxyy\",\"yyxx\",\"xyyx\",\"yxxy\",\"xyxx\",\"yxx\",\"xxy\",\"yy\",\"xy\",\"yx\",\"x\",\"y\",\"\",\"aaa\",\"bbb\",\"ccc\",\"aaab\",\"bbba\",\"aaa\",\"bbbb\",\"cccc\",\"dddd\",\"dddb\",\"bbbd\",\"aaa\",\"bbbb\",\"cccc\",\"dddd\",\"dddb\",\"bbbd\"]",
        "output": "[[0, 14], [10, 0], [0, 11], [14, 0], [1, 14], [11, 1], [1, 10], [14, 1], [9, 2], [2, 7], [2, 3], [8, 3], [3, 9], [3, 2], [4, 14], [14, 4], [5, 14], [7, 5], [5, 8], [14, 5], [8, 6], [6, 11], [6, 0], [12, 6], [7, 13], [7, 10], [7, 8], [11, 8], [13, 8], [8, 7], [9, 14], [9, 13], [13, 9], [14, 9], [10, 12], [13, 10], [10, 11], [11, 13], [12, 11], [11, 10], [12, 14], [14, 12], [13, 14], [14, 13], [15, 14], [15, 26], [14, 15], [16, 14], [14, 16], [17, 14], [14, 17], [18, 26], [19, 16], [20, 14], [20, 26], [14, 20], [21, 14], [16, 21], [21, 16], [21, 27], [14, 21], [22, 14], [17, 22], [22, 17], [22, 28], [14, 22], [23, 14], [23, 29], [14, 23], [25, 16], [26, 14], [14, 26], [27, 14], [16, 27], [27, 16], [14, 27], [28, 14], [17, 28], [28, 17], [14, 28], [29, 14], [14, 29], [31, 16]]"
      },
      {
        "input": "words = [\"ab\",\"ba\",\"abc\",\"cba\",\"abcd\",\"dcba\",\"abcde\",\"edcba\",\"abcdef\",\"fedcba\",\"abcdefg\",\"gfedcba\",\"abcdefgh\",\"hgfedcba\",\"abcdefghi\",\"ihgfedcba\",\"abcdefghij\",\"jihgfedcba\"]",
        "output": "[[0, 1], [1, 0], [2, 1], [2, 3], [0, 3], [3, 2], [4, 3], [4, 5], [2, 5], [5, 4], [6, 5], [6, 7], [4, 7], [7, 6], [8, 7], [8, 9], [6, 9], [9, 8], [10, 9], [10, 11], [8, 11], [11, 10], [12, 11], [12, 13], [10, 13], [13, 12], [14, 13], [14, 15], [12, 15], [15, 14], [16, 15], [16, 17], [14, 17], [17, 16]]"
      },
      {
        "input": "words = [\"amanaplanacanalpanama\",\"noon\",\"civic\",\"rotor\",\"refer\",\"deed\",\"level\",\"kayak\",\"reviled\",\"repaid\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"aaaa\",\"aaab\",\"baaa\",\"baba\",\"abab\",\"abba\"]",
        "output": "[[1, 2], [2, 1], [3, 4], [4, 3]]"
      },
      {
        "input": "words = [\"abcdexyz\",\"zyxcdeba\",\"mnop\",\"ponm\",\"\",\"pponm\",\"mnopq\",\"zyxwvutsrqp\",\"rqsponmlkjihgfedcba\"]",
        "output": "[[2, 3], [3, 2], [2, 5], [6, 3]]"
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaa\",\"aaaaaaaa\",\"aaaaaaaaa\",\"aaaaaaaaaa\"]",
        "output": "[[1, 0], [0, 1], [2, 0], [1, 2], [2, 1], [0, 2], [3, 0], [2, 3], [3, 1], [1, 3], [3, 2], [0, 3], [4, 0], [3, 4], [4, 1], [2, 4], [4, 2], [1, 4], [4, 3], [0, 4], [5, 0], [4, 5], [5, 1], [3, 5], [5, 2], [2, 5], [5, 3], [1, 5], [5, 4], [0, 5], [6, 0], [5, 6], [6, 1], [4, 6], [6, 2], [3, 6], [6, 3], [2, 6], [6, 4], [1, 6], [6, 5], [0, 6], [7, 0], [6, 7], [7, 1], [5, 7], [7, 2], [4, 7], [7, 3], [3, 7], [7, 4], [2, 7], [7, 5], [1, 7], [7, 6], [0, 7], [8, 0], [7, 8], [8, 1], [6, 8], [8, 2], [5, 8], [8, 3], [4, 8], [8, 4], [3, 8], [8, 5], [2, 8], [8, 6], [1, 8], [8, 7], [0, 8], [9, 0], [8, 9], [9, 1], [7, 9], [9, 2], [6, 9], [9, 3], [5, 9], [9, 4], [4, 9], [9, 5], [3, 9], [9, 6], [2, 9], [9, 7], [1, 9], [9, 8], [0, 9]]"
      },
      {
        "input": "words = [\"xyx\",\"yxy\",\"xyyx\",\"yyxy\",\"xyxyy\",\"yxyxy\",\"xyxyxy\",\"yxyxyx\",\"xyxyxyx\",\"yxyxyxy\",\"xyxyxyxy\"]",
        "output": "[[1, 3], [3, 4], [4, 0], [5, 6], [6, 0], [1, 6], [6, 7], [7, 1], [0, 7], [7, 5], [7, 6], [6, 8], [8, 7], [7, 9], [9, 6], [9, 10], [10, 0], [5, 10], [1, 10], [10, 8]]"
      },
      {
        "input": "words = [\"race\",\"ecar\",\"car\",\"arc\",\"racer\",\"carrace\",\"\",\"a\",\"aa\",\"aaa\"]",
        "output": "[[0, 2], [0, 1], [1, 0], [4, 1], [7, 6], [6, 7], [8, 6], [8, 7], [7, 8], [6, 8], [9, 6], [9, 7], [8, 9], [9, 8], [7, 9], [6, 9]]"
      },
      {
        "input": "words = [\"racecar\",\"carerac\",\"level\",\"deified\",\"civic\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"noon\",\"moon\",\"noonmoon\",\"moonoon\",\"moonnoon\",\"noonnoo\"]",
        "output": "[[5, 4]]"
      },
      {
        "input": "words = [\"madam\",\"racecar\",\"level\",\"noon\",\"civic\",\"rotor\",\"refer\",\"deified\",\"reviled\",\"deed\",\"peep\",\"radar\",\"repaper\",\"kayak\",\"reviver\",\"redder\",\"repel\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"aabbcc\",\"ccbbaa\",\"abcabc\",\"cbacba\",\"xyzzyx\",\"yxzzxy\",\"mnopqr\",\"rqponm\",\"\",\"pqr\",\"qpon\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2], [4, 8], [8, 4], [5, 8], [8, 5], [6, 7], [7, 6]]"
      },
      {
        "input": "words = [\"aabbcc\",\"ccbbaa\",\"bbccaa\",\"aabb\",\"bbaa\",\"ccaa\",\"aabbccaa\",\"aabbccbb\",\"aabbaa\",\"bbcc\",\"ccbb\",\"aabbccc\",\"ccbaab\",\"bbccaabb\",\"ccaabbbc\",\"aabbbcc\",\"ccbbbaa\",\"bbcaabbcc\",\"aabcc\",\"bbaac\",\"ccaab\",\"bbaabbcc\",\"aabbbccaa\",\"aabbbccbb\",\"aaabbccaa\",\"aaabbccbb\",\"aabbbbcc\",\"bbccbbbb\",\"aabbbbaa\",\"bbaaaa\",\"ccaabbbaa\",\"aabbbcccc\",\"cccaabbb\",\"bbcccaabb\",\"aabbbcccbb\",\"bbbaaabbbc\",\"ccbbbaabbb\",\"bbbaabbbcc\",\"aabbbbaabbcc\",\"aabbbbaabbbc\",\"bbbaabbccbb\",\"bbbaabbbccc\",\"bbbaaabbbcc\",\"aabbbbaaabbb\",\"bbbaaabbbb\",\"aabbbaaaaabb\",\"aabbbbaaaaab\",\"aabbbaaaaaaa\",\"bbaaaaaaabbb\",\"bbaaaaaaaabb\",\"bbaaaaaaabba\",\"bbaaaaaaaaab\",\"bbaaaaaaaaaa\"]",
        "output": "[[10, 0], [0, 4], [0, 1], [3, 1], [1, 9], [1, 0], [2, 10], [3, 4], [4, 3], [6, 1], [7, 1], [3, 8], [8, 4], [9, 10], [10, 9], [11, 4], [11, 1], [12, 18], [15, 16], [16, 15], [19, 3], [1, 21], [22, 16], [23, 16], [27, 10], [29, 3], [31, 16], [36, 15], [36, 37], [16, 37], [37, 36], [10, 38], [41, 36], [44, 43], [52, 3]]"
      },
      {
        "input": "words = [\"xyx\",\"yxy\",\"yxx\",\"xxz\",\"zxx\",\"zzz\",\"zzxz\",\"xzzx\",\"zxzx\",\"xzzxz\",\"zxzzx\",\"zxxxxz\",\"xzxxxxz\",\"zxzxzxz\",\"xzzzzzzx\",\"zzzzzzzz\",\"zxxzzzxxz\",\"zxzzzzzxz\",\"xzxxxxzzx\",\"zzxxxxzzz\",\"zxzzzzzzx\"]",
        "output": "[[3, 4], [4, 3], [9, 7], [9, 10], [7, 10], [10, 6], [10, 9], [11, 12], [8, 13], [15, 5], [5, 15], [14, 20]]"
      },
      {
        "input": "words = [\"abacaba\",\"bacabab\",\"cababac\",\"abacabc\",\"bacabc\",\"cababc\",\"abcabc\",\"bcabc\",\"cabc\",\"abc\",\"bc\",\"c\",\"\",\"a\",\"b\",\"ba\",\"ab\",\"ac\",\"ca\",\"bca\",\"cab\",\"abcba\",\"bcbca\",\"cabcb\",\"abcabcba\",\"bcabcbca\",\"cabcbcab\"]",
        "output": "[[0, 12], [12, 0], [15, 1], [2, 12], [12, 2], [11, 4], [9, 15], [10, 14], [11, 10], [11, 12], [12, 11], [13, 12], [12, 13], [14, 12], [12, 14], [15, 14], [13, 15], [15, 16], [16, 13], [14, 16], [16, 15], [17, 13], [11, 17], [17, 18], [18, 11], [13, 18], [18, 17], [17, 19], [15, 20], [20, 17], [21, 12], [12, 21], [17, 22], [23, 17]]"
      },
      {
        "input": "words = [\"noon\",\"moon\",\"noom\",\"noon\",\"moom\",\"omo\",\"moo\",\"omo\",\"m\",\"oo\",\"om\",\"mo\",\"\",\"n\",\"nn\",\"nno\",\"onn\",\"no\",\"on\",\"o\",\"oo\",\"ooo\",\"oooo\",\"ooooo\",\"oooooo\",\"ooooooo\",\"oooooooo\",\"ooooooooo\"]",
        "output": "[[0, 12], [0, 3], [12, 0], [1, 2], [6, 2], [2, 1], [3, 12], [12, 3], [4, 12], [6, 4], [12, 4], [5, 12], [10, 5], [5, 11], [5, 7], [12, 5], [6, 8], [20, 6], [6, 10], [7, 12], [10, 7], [7, 11], [12, 7], [8, 12], [12, 8], [9, 12], [9, 19], [19, 9], [9, 20], [12, 9], [10, 19], [8, 10], [10, 11], [11, 8], [19, 11], [11, 10], [13, 12], [12, 13], [14, 12], [14, 13], [13, 14], [12, 14], [18, 15], [15, 14], [19, 15], [15, 16], [16, 19], [14, 16], [16, 17], [16, 15], [17, 13], [19, 17], [17, 18], [18, 19], [13, 18], [18, 17], [19, 12], [12, 19], [20, 12], [20, 19], [19, 20], [12, 20], [21, 12], [21, 19], [20, 21], [21, 20], [19, 21], [12, 21], [22, 12], [22, 19], [21, 22], [22, 20], [20, 22], [22, 21], [19, 22], [12, 22], [23, 12], [23, 19], [22, 23], [23, 20], [21, 23], [23, 21], [20, 23], [23, 22], [19, 23], [12, 23], [24, 12], [24, 19], [23, 24], [24, 20], [22, 24], [24, 21], [21, 24], [24, 22], [20, 24], [24, 23], [19, 24], [12, 24], [25, 12], [25, 19], [24, 25], [25, 20], [23, 25], [25, 21], [22, 25], [25, 22], [21, 25], [25, 23], [20, 25], [25, 24], [19, 25], [12, 25], [26, 12], [26, 19], [25, 26], [26, 20], [24, 26], [26, 21], [23, 26], [26, 22], [22, 26], [26, 23], [21, 26], [26, 24], [20, 26], [26, 25], [19, 26], [12, 26], [27, 12], [27, 19], [26, 27], [27, 20], [25, 27], [27, 21], [24, 27], [27, 22], [23, 27], [27, 23], [22, 27], [27, 24], [21, 27], [27, 25], [20, 27], [27, 26], [19, 27], [12, 27]]"
      },
      {
        "input": "words = [\"racecar\",\"carerac\",\"madam\",\"level\",\"noon\",\"civic\",\"rotor\",\"refer\",\"deified\",\"redder\",\"repaper\",\"rotator\",\"detartrated\",\"reviled\",\"repel\",\"redivider\",\"repaper\",\"reviver\",\"rotor\",\"rotator\",\"redder\",\"refer\",\"civic\",\"level\",\"rotor\",\"repaper\",\"rotator\",\"deified\",\"detartrated\",\"refer\",\"rotor\",\"reviver\",\"redder\",\"repaper\",\"repaper\",\"rotor\",\"repaper\"]",
        "output": "[[3, 23], [5, 22], [6, 35], [7, 29], [8, 27], [9, 32], [10, 36], [11, 26], [12, 28], [16, 36], [17, 31], [18, 35], [19, 26], [20, 32], [21, 29], [24, 35], [25, 36], [30, 35], [33, 36], [34, 36]]"
      },
      {
        "input": "words = [\"aaaa\",\"aaab\",\"baaa\",\"bbbb\",\"aaaaa\"]",
        "output": "[[1, 2], [2, 1], [0, 4], [4, 0]]"
      },
      {
        "input": "words = [\"a1b\",\"b1a\",\"abc2\",\"2cba\",\"abcd3\",\"3dcba\",\"abcde4\",\"4edcba\",\"abcdef5\",\"5fedcba\",\"abcdefg6\",\"6gfedcba\",\"abcdefgh7\",\"7hgfedcba\",\"abcdefghi8\",\"8ihgfedcba\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2], [4, 5], [5, 4], [6, 7], [7, 6], [8, 9], [9, 8], [10, 11], [11, 10], [12, 13], [13, 12], [14, 15], [15, 14]]"
      },
      {
        "input": "words = [\"racecar\",\"madam\",\"rotor\",\"refer\",\"deed\",\"level\",\"kayak\",\"reviled\",\"repaid\",\"noon\",\"civic\",\"rotor\",\"refer\",\"deed\",\"level\",\"kayak\",\"reviled\",\"repaid\"]",
        "output": "[[2, 11], [3, 12], [4, 13], [5, 14], [6, 15]]"
      },
      {
        "input": "words = [\"aaaaa\",\"bbbbb\",\"ccccc\",\"ddddd\",\"eeeee\",\"aaaa\",\"bbbb\",\"cccc\",\"dddd\",\"eeee\",\"aaa\",\"bbb\",\"ccc\",\"ddd\",\"eee\",\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"a\",\"b\",\"c\",\"d\",\"e\",\"\",\"ab\",\"ba\",\"ac\",\"ca\",\"ad\",\"da\",\"ae\",\"ea\",\"bc\",\"cb\",\"bd\",\"db\",\"be\",\"eb\",\"cd\",\"dc\",\"ce\",\"ec\",\"de\",\"ed\",\"abc\",\"cba\",\"abd\",\"dba\",\"abe\",\"eba\",\"acd\",\"dca\",\"ace\",\"eca\",\"ade\",\"eda\",\"bcd\",\"dcb\",\"bce\",\"ecb\",\"bde\",\"edb\",\"cde\",\"edc\",\"cef\",\"fec\",\"def\",\"fed\",\"cef\",\"fec\",\"gfe\",\"efg\",\"geh\",\"ehg\",\"heg\",\"geh\",\"hic\",\"cih\",\"ich\",\"hic\",\"jid\",\"dij\",\"idj\",\"jid\",\"kil\",\"lik\",\"ilk\",\"kil\",\"lmn\",\"nml\",\"mln\",\"lmn\",\"nop\",\"pon\",\"opn\",\"nop\",\"qrs\",\"srq\",\"rsq\",\"qrs\",\"tuv\",\"vtu\",\"utv\",\"tuv\",\"wxy\",\"yxw\",\"xyw\",\"wxy\",\"zzz\",\"zz\",\"z\"]",
        "output": "[[0, 25], [0, 20], [5, 0], [0, 15], [10, 0], [0, 10], [15, 0], [0, 5], [20, 0], [25, 0], [1, 25], [1, 21], [6, 1], [1, 16], [11, 1], [1, 11], [16, 1], [1, 6], [21, 1], [25, 1], [2, 25], [2, 22], [7, 2], [2, 17], [12, 2], [2, 12], [17, 2], [2, 7], [22, 2], [25, 2], [3, 25], [3, 23], [8, 3], [3, 18], [13, 3], [3, 13], [18, 3], [3, 8], [23, 3], [25, 3], [4, 25], [4, 24], [9, 4], [4, 19], [14, 4], [4, 14], [19, 4], [4, 9], [24, 4], [25, 4], [5, 25], [5, 20], [10, 5], [5, 15], [15, 5], [5, 10], [20, 5], [25, 5], [6, 25], [6, 21], [11, 6], [6, 16], [16, 6], [6, 11], [21, 6], [25, 6], [7, 25], [7, 22], [12, 7], [7, 17], [17, 7], [7, 12], [22, 7], [25, 7], [8, 25], [8, 23], [13, 8], [8, 18], [18, 8], [8, 13], [23, 8], [25, 8], [9, 25], [9, 24], [14, 9], [9, 19], [19, 9], [9, 14], [24, 9], [25, 9], [10, 25], [10, 20], [15, 10], [10, 15], [20, 10], [25, 10], [11, 25], [11, 21], [16, 11], [11, 16], [21, 11], [25, 11], [12, 25], [12, 22], [17, 12], [12, 17], [22, 12], [25, 12], [13, 25], [13, 23], [18, 13], [13, 18], [23, 13], [25, 13], [14, 25], [14, 24], [19, 14], [14, 19], [24, 14], [25, 14], [15, 25], [15, 20], [20, 15], [25, 15], [16, 25], [16, 21], [21, 16], [25, 16], [17, 25], [17, 22], [22, 17], [25, 17], [18, 25], [18, 23], [23, 18], [25, 18], [19, 25], [19, 24], [24, 19], [25, 19], [20, 25], [25, 20], [21, 25], [25, 21], [22, 25], [25, 22], [23, 25], [25, 23], [24, 25], [25, 24], [26, 20], [21, 26], [26, 27], [27, 21], [20, 27], [27, 26], [28, 20], [22, 28], [28, 29], [29, 22], [20, 29], [29, 28], [30, 20], [23, 30], [30, 31], [31, 23], [20, 31], [31, 30], [32, 20], [24, 32], [32, 33], [33, 24], [20, 33], [33, 32], [34, 21], [22, 34], [34, 35], [35, 22], [21, 35], [35, 34], [36, 21], [23, 36], [36, 37], [37, 23], [21, 37], [37, 36], [38, 21], [24, 38], [38, 39], [39, 24], [21, 39], [39, 38], [40, 22], [23, 40], [40, 41], [41, 23], [22, 41], [41, 40], [42, 22], [24, 42], [42, 43], [43, 24], [22, 43], [43, 42], [44, 23], [24, 44], [44, 45], [45, 24], [23, 45], [45, 44], [35, 46], [46, 27], [46, 47], [26, 47], [47, 34], [47, 46], [37, 48], [48, 27], [48, 49], [26, 49], [49, 36], [49, 48], [39, 50], [50, 27], [50, 51], [26, 51], [51, 38], [51, 50], [41, 52], [52, 29], [52, 53], [28, 53], [53, 40], [53, 52], [43, 54], [54, 29], [54, 55], [28, 55], [55, 42], [55, 54], [45, 56], [56, 31], [56, 57], [30, 57], [57, 44], [57, 56], [41, 58], [58, 35], [58, 59], [34, 59], [59, 40], [59, 58], [43, 60], [60, 35], [60, 61], [34, 61], [61, 42], [61, 60], [45, 62], [62, 37], [62, 63], [36, 63], [63, 44], [63, 62], [45, 64], [64, 41], [64, 65], [40, 65], [65, 44], [65, 64], [66, 43], [66, 71], [42, 67], [67, 70], [68, 45], [68, 69], [44, 69], [69, 68], [70, 43], [70, 71], [42, 71], [71, 70], [72, 73], [73, 72], [74, 76], [76, 77], [77, 76], [78, 79], [79, 81], [81, 79], [82, 83], [83, 85], [85, 83], [86, 87], [87, 89], [89, 87], [90, 91], [91, 93], [93, 91], [94, 95], [95, 97], [97, 95], [98, 99], [99, 101], [101, 99], [103, 104], [104, 103], [106, 107], [107, 109], [109, 107], [110, 25], [110, 112], [111, 110], [110, 111], [112, 110], [25, 110], [111, 25], [111, 112], [112, 111], [25, 111], [112, 25], [25, 112]]"
      },
      {
        "input": "words = [\"\", \"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\"]",
        "output": "[[1, 0], [0, 1], [2, 0], [2, 1], [1, 2], [0, 2], [3, 0], [3, 1], [2, 3], [3, 2], [1, 3], [0, 3], [4, 0], [4, 1], [3, 4], [4, 2], [2, 4], [4, 3], [1, 4], [0, 4], [5, 0], [5, 1], [4, 5], [5, 2], [3, 5], [5, 3], [2, 5], [5, 4], [1, 5], [0, 5], [6, 0], [6, 1], [5, 6], [6, 2], [4, 6], [6, 3], [3, 6], [6, 4], [2, 6], [6, 5], [1, 6], [0, 6], [7, 0], [7, 1], [7, 2], [7, 3], [6, 7], [7, 4], [5, 7], [7, 5], [4, 7], [7, 6], [3, 7], [2, 7], [1, 7], [0, 7], [8, 0], [8, 1], [7, 8], [8, 2], [8, 3], [8, 4], [6, 8], [8, 5], [5, 8], [8, 6], [4, 8], [3, 8], [2, 8], [8, 7], [1, 8], [0, 8]]"
      },
      {
        "input": "words = [\"race\",\"car\",\"level\",\"\",\"deified\",\"civic\",\"rotor\",\"\",\"madam\",\"refer\",\"redder\",\"repaper\",\"reviled\",\"deed\",\"noon\",\"detartrated\",\"redivider\",\"rotor\"]",
        "output": "[[0, 1], [2, 7], [7, 2], [3, 7], [4, 7], [7, 4], [5, 7], [7, 5], [6, 7], [6, 17], [7, 6], [8, 7], [7, 8], [9, 7], [7, 9], [10, 7], [7, 10], [11, 7], [7, 11], [13, 7], [7, 13], [14, 7], [7, 14], [15, 7], [7, 15], [16, 7], [7, 16], [17, 7], [7, 17]]"
      },
      {
        "input": "words = [\"xabc\",\"cba\",\"abcx\",\"abxcba\",\"cabxa\",\"bxcba\",\"abcabc\",\"bcabc\",\"cbabc\",\"xcba\",\"bac\",\"cabx\",\"bacxab\",\"xcbax\",\"baxcb\",\"cbaabc\"]",
        "output": "[[1, 0], [2, 1], [2, 9], [2, 5], [9, 2], [11, 10], [0, 13], [13, 2]]"
      },
      {
        "input": "words = [\"ab\",\"ba\",\"abc\",\"cba\",\"abcd\",\"dcba\",\"abcde\",\"edcba\",\"abcdef\",\"fedcba\"]",
        "output": "[[0, 1], [1, 0], [2, 1], [2, 3], [0, 3], [3, 2], [4, 3], [4, 5], [2, 5], [5, 4], [6, 5], [6, 7], [4, 7], [7, 6], [8, 7], [8, 9], [6, 9], [9, 8]]"
      },
      {
        "input": "words = [\"noon\",\"level\",\"deified\",\"civic\",\"rotor\",\"madam\",\"refer\",\"deed\",\"peep\",\"radar\",\"reviled\",\"repaid\",\"detartrated\",\"reviver\",\"redder\",\"repaper\",\"pepper\",\"repel\",\"deterred\",\"reworded\",\"repeal\",\"perpet\",\"repressed\",\"repellet\",\"perpetual\",\"repellect\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]",
        "output": "[]"
      },
      {
        "input": "words = [\"palindrome\",\"emordnilap\",\"detartrated\",\"deified\",\"repaid\",\"stressed\",\"desserts\",\"deed\",\"civic\",\"rotor\",\"refer\",\"level\",\"kayak\",\"reviled\"]",
        "output": "[[0, 1], [1, 0], [5, 6], [6, 5]]"
      },
      {
        "input": "words = [\"abcde\",\"edcba\",\"fghij\",\"jihgf\",\"klmno\",\"onmlk\",\"pqrstu\",\"utsrqp\",\"vwxyz\",\"zyxwv\"]",
        "output": "[[0, 1], [1, 0], [2, 3], [3, 2], [4, 5], [5, 4], [6, 7], [7, 6], [8, 9], [9, 8]]"
      },
      {
        "input": "words = [\"xabcx\",\"xbax\",\"xcabx\",\"xcax\",\"xbxc\",\"xcabxx\",\"xxcabx\",\"abcxx\",\"xxcba\",\"abcdxx\",\"xxdcba\",\"xxabcd\",\"dxxcba\",\"xabxx\",\"xxbax\"]",
        "output": "[[7, 8], [8, 7], [9, 10], [10, 9], [7, 12], [13, 1], [13, 14], [14, 13]]"
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaa\"]",
        "output": "[[1, 0], [0, 1], [2, 0], [1, 2], [2, 1], [0, 2], [3, 0], [2, 3], [3, 1], [1, 3], [3, 2], [0, 3], [4, 0], [3, 4], [4, 1], [2, 4], [4, 2], [1, 4], [4, 3], [0, 4], [5, 0], [4, 5], [5, 1], [3, 5], [5, 2], [2, 5], [5, 3], [1, 5], [5, 4], [0, 5], [6, 0], [5, 6], [6, 1], [4, 6], [6, 2], [3, 6], [6, 3], [2, 6], [6, 4], [1, 6], [6, 5], [0, 6]]"
      },
      {
        "input": "words = [\"\",\"a\",\"b\",\"c\",\"aa\",\"bb\",\"cc\",\"aaa\",\"bbb\",\"ccc\",\"aaaa\",\"bbbb\",\"cccc\",\"aaaaa\",\"bbbbb\",\"ccccc\"]",
        "output": "[[1, 0], [0, 1], [2, 0], [0, 2], [3, 0], [0, 3], [4, 0], [4, 1], [1, 4], [0, 4], [5, 0], [5, 2], [2, 5], [0, 5], [6, 0], [6, 3], [3, 6], [0, 6], [7, 0], [7, 1], [4, 7], [7, 4], [1, 7], [0, 7], [8, 0], [8, 2], [5, 8], [8, 5], [2, 8], [0, 8], [9, 0], [9, 3], [6, 9], [9, 6], [3, 9], [0, 9], [10, 0], [10, 1], [7, 10], [10, 4], [4, 10], [10, 7], [1, 10], [0, 10], [11, 0], [11, 2], [8, 11], [11, 5], [5, 11], [11, 8], [2, 11], [0, 11], [12, 0], [12, 3], [9, 12], [12, 6], [6, 12], [12, 9], [3, 12], [0, 12], [13, 0], [13, 1], [10, 13], [13, 4], [7, 13], [13, 7], [4, 13], [13, 10], [1, 13], [0, 13], [14, 0], [14, 2], [11, 14], [14, 5], [8, 14], [14, 8], [5, 14], [14, 11], [2, 14], [0, 14], [15, 0], [15, 3], [12, 15], [15, 6], [9, 15], [15, 9], [6, 15], [15, 12], [3, 15], [0, 15]]"
      },
      {
        "input": "words = [\"ab\",\"ba\",\"a\",\"b\",\"aba\",\"bab\",\"aa\",\"bb\",\"aaa\",\"bbb\"]",
        "output": "[[0, 2], [3, 0], [0, 1], [1, 3], [2, 1], [1, 0], [0, 4], [4, 1], [1, 5], [5, 0], [6, 2], [2, 6], [7, 3], [3, 7], [8, 2], [6, 8], [8, 6], [2, 8], [9, 3], [7, 9], [9, 7], [3, 9]]"
      },
      {
        "input": "words = [\"race\",\"ecar\",\"car\",\"arc\",\"civic\",\"level\",\"deified\",\"rotor\",\"redder\",\"repaper\"]",
        "output": "[[0, 2], [0, 1], [1, 0]]"
      },
      {
        "input": "words = [\"noon\",\"moon\",\"noonmoon\",\"moonnoon\",\"noonno\",\"onnoon\",\"noonmo\",\"onnoom\"]",
        "output": "[[4, 5], [5, 4]]"
      },
      {
        "input": "words = [\"aaaaaaaa\",\"aaaaaaaaa\",\"aaaaaaaaaa\",\"aaaaaaaaaaa\",\"aaaaaaaaaaaa\",\"aaaaaaaaaaaaa\",\"aaaaaaaaaaaaaa\"]",
        "output": "[[0, 1], [1, 0], [1, 2], [0, 2], [2, 0], [2, 1], [2, 3], [1, 3], [0, 3], [3, 0], [3, 1], [3, 2], [3, 4], [2, 4], [1, 4], [0, 4], [4, 0], [4, 1], [4, 2], [4, 3], [4, 5], [3, 5], [2, 5], [1, 5], [0, 5], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 6], [4, 6], [3, 6], [2, 6], [1, 6], [0, 6], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5]]"
      },
      {
        "input": "words = [\"12321\",\"21312\",\"32123\",\"43234\",\"54345\",\"65456\",\"76567\",\"87678\",\"98789\",\"10901\",\"11011\"]",
        "output": "[]"
      }
    ]
  },
  {
    "id": 2440,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Array",
      "Math",
      "Enumeration"
    ],
    "problemDescription": "There is an undirected tree with n nodes labeled from 0 to n - 1.\nYou are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are allowed to delete some edges, splitting the tree into multiple connected components. Let the value of a component be the sum of all nums[i] for which node i is in the component.\nReturn the maximum number of edges you can delete, such that every connected component in the tree has the same value.\n\u00a0\nExample 1:\n\n\nInput: nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]] \nOutput: 2 \nExplanation: The above figure shows how we can delete the edges [0,1] and [3,4]. The created components are nodes [0], [1,2,3] and [4]. The sum of the values in each component equals 6. It can be proven that no better deletion exists, so the answer is 2.\n\nExample 2:\n\nInput: nums = [2], edges = []\nOutput: 0\nExplanation: There are no edges to be deleted.\n\n\u00a0\nConstraints:\n\n1 <= n <= 2 * 104\nnums.length == n\n1 <= nums[i] <= 50\nedges.length == n - 1\nedges[i].length == 2\n0 <= edges[i][0], edges[i][1] <= n - 1\nedges represents a valid tree.\n\n",
    "starterCode": "class Solution:\n    def componentValue(self, nums: List[int], edges: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [10,10,10,10], edges = [[0,1],[1,2],[2,3]]",
        "output": "3"
      },
      {
        "input": "nums = [5,5,5,5,5,5], edges = [[0,1],[0,2],[0,3],[1,4],[1,5]]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,1], edges = [[0,1],[1,2],[1,3],[3,4],[3,5]]",
        "output": "5"
      },
      {
        "input": "nums = [4,4,4,4,4,4], edges = [[0,1],[1,2],[1,3],[3,4],[4,5]]",
        "output": "5"
      },
      {
        "input": "nums = [10,10,10,10], edges = [[0,1],[1,2],[1,3]]",
        "output": "3"
      },
      {
        "input": "nums = [3,2,6,1,3], edges = [[0,1],[1,2],[1,3],[3,4]]",
        "output": "0"
      },
      {
        "input": "nums = [3,3,3,9,3], edges = [[0,1],[1,2],[1,3],[1,4]]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1], edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]]",
        "output": "7"
      },
      {
        "input": "nums = [7,7,7,7,7,7], edges = [[0,1],[0,2],[0,3],[1,4],[1,5]]",
        "output": "5"
      },
      {
        "input": "nums = [4,4,4,4,4,4], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1], edges = [[0,1],[1,2],[1,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "7"
      },
      {
        "input": "nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]]",
        "output": "2"
      },
      {
        "input": "nums = [50,50,50,50,50,50,50,50], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "7"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "7"
      },
      {
        "input": "nums = [2], edges = []",
        "output": "0"
      },
      {
        "input": "nums = [4,4,4,4,4,4,4,4], edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]]",
        "output": "7"
      },
      {
        "input": "nums = [1,2,3,4,5,6], edges = [[0,1],[1,2],[1,3],[3,4],[3,5]]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 6, 2, 2, 2, 6], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6],[0,7]]",
        "output": "1"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[4,15],[5,16],[5,17],[5,18],[6,19],[6,20],[6,21],[7,22],[7,23],[7,24],[8,25],[8,26],[8,27],[9,28],[9,29],[9,30],[10,31],[10,32],[10,33],[11,34],[11,35],[11,36],[12,37],[12,38],[12,39],[13,40],[13,41],[13,42],[14,43],[14,44],[14,45],[15,46],[15,47],[15,48],[16,49],[16,50],[16,51],[17,52],[17,53],[17,54],[18,55],[18,56],[18,57],[19,58],[19,59],[19,60],[20,61],[20,62],[20,63],[21,64],[21,65],[21,66],[22,67],[22,68],[22,69],[23,70],[23,71],[23,72],[24,73],[24,74],[24,75],[25,76],[25,77],[25,78],[26,79],[26,80],[26,81],[27,82],[27,83],[27,84],[28,85],[28,86],[28,87],[29,88],[29,89],[29,90],[30,91],[30,92],[30,93],[31,94],[31,95],[31,96],[32,97],[32,98],[32,99]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [15, 10, 5, 5, 10, 10, 10, 5, 10, 10], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[4,6],[4,7],[5,8],[5,9]]",
        "output": "2"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]]",
        "output": "9"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19]]",
        "output": "19"
      },
      {
        "input": "nums = [1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[0,6],[6,7],[6,8],[8,9],[9,10],[8,11],[7,12],[12,13],[12,14],[14,15],[14,16],[6,17],[17,18],[17,19]]",
        "output": "0"
      },
      {
        "input": "nums = [30,20,20,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], edges = [[0,1],[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8],[5,9],[5,10],[6,11],[6,12],[7,13],[7,14],[8,15],[8,16],[9,17],[9,18],[10,19]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[6,8],[6,9]]",
        "output": "9"
      },
      {
        "input": "nums = [5, 10, 5, 10, 5, 10, 5], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
        "output": "1"
      },
      {
        "input": "nums = [5,1,5,1,5,1,5], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
        "output": "0"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]]",
        "output": "0"
      },
      {
        "input": "nums = [10,15,15,10,20,20,10,30], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7]]",
        "output": "0"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15]]",
        "output": "15"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]]",
        "output": "19"
      },
      {
        "input": "nums = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49]]",
        "output": "62"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19],[12,20],[13,21],[14,22],[15,23],[16,24],[17,25],[18,26],[19,27],[20,28],[21,29],[22,30],[23,31],[24,32],[25,33],[26,34]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [15,10,15,10,15,10,15,10,15,10,15,10,15,10,15,10,15,10,15,10], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]]",
        "output": "0"
      },
      {
        "input": "nums = [12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39]]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]]",
        "output": "0"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], edges = [[0,1],[1,2],[1,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
        "output": "19"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29]]",
        "output": "29"
      },
      {
        "input": "nums = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[15,31],[15,32],[16,33],[16,34],[17,35],[17,36],[18,37],[18,38],[19,39],[19,40],[20,41],[20,42],[21,43],[21,44],[22,45],[22,46],[23,47],[23,48],[24,49]]",
        "output": "63"
      },
      {
        "input": "nums = [10, 10, 5, 5, 5, 5, 10, 5, 5, 5, 5, 10], edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[0,8],[8,9],[8,10],[9,11]]",
        "output": "0"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]]",
        "output": "19"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10], edges = [[0,1],[1,2],[1,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]]",
        "output": "0"
      },
      {
        "input": "nums = [3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1], edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39]]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]]",
        "output": "0"
      },
      {
        "input": "nums = [10, 5, 5, 2, 2, 2, 10, 10], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7]]",
        "output": "0"
      },
      {
        "input": "nums = [2,4,8,8,8,16,16,16,16], edges = [[0,1],[1,2],[1,3],[2,4],[3,5],[3,6],[4,7],[4,8]]",
        "output": "0"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9]]",
        "output": "9"
      },
      {
        "input": "nums = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "11"
      },
      {
        "input": "nums = [20,10,20,10,20,10,20,10,20,10,20,10,20,10,20,10,20,10,20,10], edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[1,7],[2,8],[2,9],[2,10],[3,11],[3,12],[3,13],[4,14],[4,15],[4,16],[5,17],[6,18],[7,19]]",
        "output": "0"
      },
      {
        "input": "nums = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19],[12,20]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [6, 3, 3, 2, 2, 2, 6], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[0,6]]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[1,7],[1,8],[2,9],[2,10],[2,11],[2,12],[3,13],[3,14],[3,15],[3,16],[4,17],[4,18],[4,19],[4,20],[5,21],[5,22],[5,23],[6,24],[6,25],[6,26],[7,27],[7,28],[7,29],[8,30],[8,31],[8,32],[9,33],[9,34],[9,35],[10,36],[10,37],[10,38],[11,39],[11,40],[11,41],[12,42],[12,43],[12,44],[13,45],[13,46],[13,47],[14,48],[14,49],[14,50]]",
        "output": "0"
      }
    ]
  },
  {
    "id": 2122,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Enumeration",
      "Sorting"
    ],
    "problemDescription": "Alice had a 0-indexed array arr consisting of n positive integers. She chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner:\n\nlower[i] = arr[i] - k, for every index i where 0 <= i < n\nhigher[i] = arr[i] + k, for every index i where 0 <= i < n\n\nUnfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays lower and higher, but not the array each integer belonged to. Help Alice and recover the original array.\nGiven an array nums consisting of 2n integers, where exactly n of the integers were present in lower and the remaining in higher, return the original array arr. In case the answer is not unique, return any valid array.\nNote: The test cases are generated such that there exists at least one valid array arr.\n\u00a0\nExample 1:\n\nInput: nums = [2,10,6,4,8,12]\nOutput: [3,7,11]\nExplanation:\nIf arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12].\nCombining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums.\nAnother valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12]. \n\nExample 2:\n\nInput: nums = [1,1,3,3]\nOutput: [2,2]\nExplanation:\nIf arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3].\nCombining lower and higher gives us [1,1,3,3], which is equal to nums.\nNote that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0.\nThis is invalid since k must be positive.\n\nExample 3:\n\nInput: nums = [5,435]\nOutput: [220]\nExplanation:\nThe only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435].\n\n\u00a0\nConstraints:\n\n2 * n == nums.length\n1 <= n <= 1000\n1 <= nums[i] <= 109\nThe test cases are generated such that there exists at least one valid array arr.\n\n",
    "starterCode": "class Solution:\n    def recoverArray(self, nums: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [3,1,5,7,9,11]",
        "output": "[2, 6, 10]"
      },
      {
        "input": "nums = [10,20,30,40,50,60]",
        "output": "[15, 35, 55]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8]",
        "output": "[2, 3, 6, 7]"
      },
      {
        "input": "nums = [1,2,3,4,5,6]",
        "output": "[]"
      },
      {
        "input": "nums = [2,10,6,4,8,12]",
        "output": "[3, 7, 11]"
      },
      {
        "input": "nums = [1,3,5,7]",
        "output": "[2, 6]"
      },
      {
        "input": "nums = [7,9,11,13,15,17]",
        "output": "[8, 12, 16]"
      },
      {
        "input": "nums = [100,200,300,400,500,600]",
        "output": "[150, 350, 550]"
      },
      {
        "input": "nums = [9,11,13,15,17,19]",
        "output": "[10, 14, 18]"
      },
      {
        "input": "nums = [5,435]",
        "output": "[220]"
      },
      {
        "input": "nums = [1,1,3,3]",
        "output": "[2, 2]"
      },
      {
        "input": "nums = [1000000000,1]",
        "output": "[]"
      },
      {
        "input": "nums = [2,2,2,2]",
        "output": "[]"
      },
      {
        "input": "nums = [3,9,3,9,5,7]",
        "output": "[]"
      },
      {
        "input": "nums = [3,3,3,9,9,9]",
        "output": "[6, 6, 6]"
      },
      {
        "input": "nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41]",
        "output": "[4, 8, 12, 16, 20, 24, 28, 32, 36, 40]"
      },
      {
        "input": "nums = [10, 22, 30, 42, 50, 62, 70, 82, 90, 102, 110, 122]",
        "output": "[16, 36, 56, 76, 96, 116]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "[2, 6, 10, 14, 18, 22, 26, 30]"
      },
      {
        "input": "nums = [10,100,20,110,30,120,40,130,50,140,60,150,70,160,80,170]",
        "output": "[15, 35, 55, 75, 105, 125, 145, 165]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99]",
        "output": "[2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98]"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6,11,20,12,19,13,18,14,17,15,16]",
        "output": "[2, 3, 6, 7, 10, 11, 14, 15, 18, 19]"
      },
      {
        "input": "nums = [2,4,8,10,16,18,24,26,32,34,40,42,48,50,56,58,64,66,72,74,80,82,88,90,96,98,104,106,112,114,120,122,128,130,136,138,144,146,152,154,160,162,168,170,176,178,184,186,192,194,200]",
        "output": "[3, 9, 17, 25, 33, 41, 49, 57, 65, 73, 81, 89, 97, 105, 113, 121, 129, 137, 145, 153, 161, 169, 177, 185, 193]"
      },
      {
        "input": "nums = [1,3,3,5,7,7,9,11,11,13,15,17,17,19]",
        "output": "[]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "[2, 6, 10, 14, 18, 22, 26, 30]"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16]",
        "output": "[3, 7, 11, 15]"
      },
      {
        "input": "nums = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29]",
        "output": "[]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000]",
        "output": "[150, 350, 550, 750, 950, 1150, 1350, 1550, 1750, 1950]"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9]",
        "output": "[]"
      },
      {
        "input": "nums = [5, 9, 13, 17, 21, 25, 29, 33]",
        "output": "[7, 15, 23, 31]"
      },
      {
        "input": "nums = [10, 20, 15, 25, 30, 40, 35, 45, 50, 60, 55, 65, 70, 80, 75, 85]",
        "output": "[15, 20, 35, 40, 55, 60, 75, 80]"
      },
      {
        "input": "nums = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]",
        "output": "[3, 11, 19, 27, 35]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "[2, 3, 6, 7, 10, 11, 14, 15]"
      },
      {
        "input": "nums = [7,21,14,28,21,42,28,56,35,70,42,84,49,98,56,112]",
        "output": "[]"
      },
      {
        "input": "nums = [1,1000000000,2,999999999,3,999999998,4,999999997,5,999999996,6,999999995]",
        "output": "[499999998, 499999999, 500000000, 500000001, 500000002, 500000003]"
      },
      {
        "input": "nums = [10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "[11, 15, 19, 23, 27, 31, 35, 39]"
      },
      {
        "input": "nums = [1, 1000000000, 2, 999999999, 3, 999999998, 4, 999999997]",
        "output": "[2, 3, 999999998, 999999999]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80]",
        "output": "[15, 35, 55, 75]"
      },
      {
        "input": "nums = [5, 5, 5, 5, 9, 9, 9, 9]",
        "output": "[7, 7, 7, 7]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]",
        "output": "[6, 6, 6, 6, 6, 6, 6, 6, 6, 6]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[]"
      },
      {
        "input": "nums = [1,9,2,8,3,7,4,6,5,10]",
        "output": "[]"
      },
      {
        "input": "nums = [1000000000,2000000000,3000000000,4000000000,5000000000]",
        "output": "[1500000000, 3500000000]"
      },
      {
        "input": "nums = [3,7,11,15,19,23,27,31,35,39]",
        "output": "[5, 13, 21, 29, 37]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "[2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46]"
      },
      {
        "input": "nums = [3,9,15,21,27,33,39,45,51,57,63,69]",
        "output": "[6, 18, 30, 42, 54, 66]"
      },
      {
        "input": "nums = [3,9,15,21,27,33,39,45]",
        "output": "[6, 18, 30, 42]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "[]"
      },
      {
        "input": "nums = [5,5,5,5,10,10,10,10,15,15,15,15]",
        "output": "[]"
      },
      {
        "input": "nums = [10,22,34,46,58,70,82,94,106,118,130,142,154,166,178]",
        "output": "[16, 40, 64, 88, 112, 136, 160]"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12]",
        "output": "[2, 3, 3, 4, 6, 7, 7, 8, 10, 11, 11]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200]",
        "output": "[150, 350, 550, 750, 950, 1150]"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "[]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "[2, 6, 10, 14, 18, 22, 26]"
      },
      {
        "input": "nums = [2,6,10,4,8,12,16,20]",
        "output": "[]"
      },
      {
        "input": "nums = [1,2,4,5,7,8,10,11,13,14]",
        "output": "[]"
      },
      {
        "input": "nums = [1,5,9,13,17,21,25,29,33,37,41,45,49,53]",
        "output": "[3, 11, 19, 27, 35, 43, 51]"
      },
      {
        "input": "nums = [5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49]",
        "output": "[7, 15, 23, 31, 39, 47]"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,31,37]",
        "output": "[]"
      },
      {
        "input": "nums = [1,2,4,5,7,8,10,11,13,14,16,17,19,20]",
        "output": "[]"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]",
        "output": "[3, 7, 11, 15, 19, 23, 27, 31]"
      },
      {
        "input": "nums = [5,15,25,35,45,55,65,75,85,95,105,115]",
        "output": "[10, 30, 50, 70, 90, 110]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600]",
        "output": "[150, 350, 550, 750, 950, 1150, 1350, 1550]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "[3, 7, 11, 15, 19, 23, 27, 31, 35, 39]"
      },
      {
        "input": "nums = [5,15,25,35,45,55,65,75,85,95]",
        "output": "[10, 30, 50, 70, 90]"
      },
      {
        "input": "nums = [10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86]",
        "output": "[12, 20, 28, 36, 44, 52, 60, 68, 76, 84]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "[]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[2, 3, 6, 7, 10, 11, 14, 15, 18, 19]"
      },
      {
        "input": "nums = [1,1,1,1,3,3,3,3]",
        "output": "[2, 2, 2, 2]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]",
        "output": "[3, 7, 11, 15, 19, 23, 27, 31]"
      },
      {
        "input": "nums = [1000000000, 2000000000, 500000000, 1500000000, 750000000, 1250000000]",
        "output": "[750000000, 1000000000, 1750000000]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]",
        "output": "[3, 7, 11, 15, 19, 23]"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60]",
        "output": "[6, 9, 18, 21, 30, 33, 42, 45, 54, 57]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[]"
      },
      {
        "input": "nums = [1,2,5,6,9,10,13,14,17,18]",
        "output": "[]"
      },
      {
        "input": "nums = [1,9,17,25,33,41,49,57,65,73,81,89,97,105]",
        "output": "[5, 21, 37, 53, 69, 85, 101]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150,155,160,165,170,175,180,185,190,195,200]",
        "output": "[10, 15, 30, 35, 50, 55, 70, 75, 90, 95, 110, 115, 130, 135, 150, 155, 170, 175, 190, 195]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "[2, 6, 10, 14, 18]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "[15, 35, 55, 75, 95]"
      },
      {
        "input": "nums = [2,14,8,6,10,18,12,4]",
        "output": "[]"
      },
      {
        "input": "nums = [100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175]",
        "output": "[105, 110, 125, 130, 145, 150, 165, 170]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]",
        "output": "[15, 35, 55, 75, 95, 115, 135, 155, 175, 195, 215, 235]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]",
        "output": "[15, 35, 55, 75, 95, 115, 135, 155]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[3, 7, 11, 15, 19]"
      },
      {
        "input": "nums = [1000000000,1000000001,1000000002,1000000003,1000000004,1000000005]",
        "output": "[]"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105]",
        "output": "[15, 20, 35, 40, 55, 60, 75, 80, 95, 100]"
      },
      {
        "input": "nums = [1,5,9,13,17,21,25,29,33,37]",
        "output": "[3, 11, 19, 27, 35]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "[15, 35, 55, 75, 95, 115, 135]"
      },
      {
        "input": "nums = [15,25,35,45,55,65,75,85,95,105,115,125,135,145,155,165]",
        "output": "[20, 40, 60, 80, 100, 120, 140, 160]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[2, 3, 6, 7, 10, 11, 14, 15, 18, 19]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120]",
        "output": "[15, 35, 55, 75, 95, 115]"
      },
      {
        "input": "nums = [1000000000,2000000000]",
        "output": "[1500000000]"
      },
      {
        "input": "nums = [3,7,11,15,19,23,27,31,35,39,43,47]",
        "output": "[5, 13, 21, 29, 37, 45]"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]",
        "output": "[3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 67, 71, 75, 79, 83, 87, 91, 95, 99]"
      },
      {
        "input": "nums = [5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65]",
        "output": "[7, 15, 23, 31, 39, 47, 55, 63]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "[10, 15, 30, 35, 50, 55, 70, 75, 90, 95]"
      },
      {
        "input": "nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005]",
        "output": "[]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250]",
        "output": "[15, 35, 55, 75, 95, 115, 135, 155, 175, 195, 215, 235]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "[2, 6, 10, 14, 18, 22, 26, 30, 34, 38]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160]",
        "output": "[15, 35, 55, 75, 95, 115, 135, 155]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 5, 5, 5, 5]",
        "output": "[3, 3, 3, 3]"
      },
      {
        "input": "nums = [1000000000, 1000000001, 1000000002, 1000000003, 2000000000, 2000000001, 2000000002, 2000000003]",
        "output": "[1000000001, 1000000002, 2000000001, 2000000002]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[15, 35, 55, 75, 95]"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20]",
        "output": "[3, 7, 11, 15, 19]"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "[]"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125]",
        "output": "[20, 40, 60, 80, 100, 120]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80]",
        "output": "[10, 15, 30, 35, 50, 55, 70, 75]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]",
        "output": "[2, 6, 10, 14, 18, 22]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80]",
        "output": "[15, 35, 55, 75]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "[150, 350, 550, 750, 950]"
      },
      {
        "input": "nums = [100, 101, 200, 201, 300, 301, 400, 401]",
        "output": "[150, 151, 350, 351]"
      }
    ]
  },
  {
    "id": 2277,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Array"
    ],
    "problemDescription": "You are given a positive integer n representing the number of nodes in a tree, numbered from 0 to n - 1 (inclusive). You are also given a 2D integer array edges of length n - 1, where edges[i] = [node1i, node2i] denotes that there is a bidirectional edge connecting node1i and node2i in the tree.\nYou are given a 0-indexed integer array query of length m where query[i] = [starti, endi, nodei] means that for the ith query, you are tasked with finding the node on the path from starti to endi that is closest to nodei.\nReturn an integer array answer of length m, where answer[i] is the answer to the ith query.\n\u00a0\nExample 1:\n\n\nInput: n = 7, edges = [[0,1],[0,2],[0,3],[1,4],[2,5],[2,6]], query = [[5,3,4],[5,3,6]]\nOutput: [0,2]\nExplanation:\nThe path from node 5 to node 3 consists of the nodes 5, 2, 0, and 3.\nThe distance between node 4 and node 0 is 2.\nNode 0 is the node on the path closest to node 4, so the answer to the first query is 0.\nThe distance between node 6 and node 2 is 1.\nNode 2 is the node on the path closest to node 6, so the answer to the second query is 2.\n\nExample 2:\n\n\nInput: n = 3, edges = [[0,1],[1,2]], query = [[0,1,2]]\nOutput: [1]\nExplanation:\nThe path from node 0 to node 1 consists of the nodes 0, 1.\nThe distance between node 2 and node 1 is 1.\nNode 1 is the node on the path closest to node 2, so the answer to the first query is 1.\n\nExample 3:\n\n\nInput: n = 3, edges = [[0,1],[1,2]], query = [[0,0,0]]\nOutput: [0]\nExplanation:\nThe path from node 0 to node 0 consists of the node 0.\nSince 0 is the only node on the path, the answer to the first query is 0.\n\u00a0\nConstraints:\n\n1 <= n <= 1000\nedges.length == n - 1\nedges[i].length == 2\n0 <= node1i, node2i <= n - 1\nnode1i != node2i\n1 <= query.length <= 1000\nquery[i].length == 3\n0 <= starti, endi, nodei <= n - 1\nThe graph is a tree.\n\n",
    "starterCode": "class Solution:\n    def closestNode(self, n: int, edges: List[List[int]], query: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]], query = [[4,0,2],[0,4,3],[2,3,1]]",
        "output": "[2, 3, 2]"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[1,3]], query = [[3,2,0],[2,3,1],[0,3,2]]",
        "output": "[1, 1, 1]"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]], query = [[4,0,2],[0,2,1],[1,3,2]]",
        "output": "[2, 1, 2]"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[2,4]], query = [[0,4,1],[3,0,2],[4,1,3]]",
        "output": "[1, 2, 2]"
      },
      {
        "input": "n = 3, edges = [[0,1],[1,2]], query = [[0,1,2]]",
        "output": "[1]"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[1,3]], query = [[2,3,0],[0,3,2]]",
        "output": "[1, 1]"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[0,3],[1,4],[2,5],[2,6]], query = [[5,3,4],[5,3,6]]",
        "output": "[0, 2]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], query = [[3,5,0],[1,2,4]]",
        "output": "[0, 1]"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]], query = [[4,0,2]]",
        "output": "[2]"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]], query = [[0,4,2],[4,0,1],[1,3,0]]",
        "output": "[2, 1, 1]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], query = [[3,5,0],[5,3,1],[4,2,3]]",
        "output": "[0, 1, 1]"
      },
      {
        "input": "n = 3, edges = [[0,1],[1,2]], query = [[0,0,0]]",
        "output": "[0]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], query = [[3,5,0],[2,4,3],[0,1,5]]",
        "output": "[0, 1, 0]"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], query = [[0,9,5],[1,8,6],[2,7,7]]",
        "output": "[5, 6, 7]"
      },
      {
        "input": "n = 11, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], query = [[0,10,5],[1,9,6],[2,8,7],[3,7,8]]",
        "output": "[5, 6, 7, 7]"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], query = [[0,6,3],[1,5,4],[2,4,6]]",
        "output": "[3, 4, 4]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], query = [[7,10,5],[8,11,1],[9,11,3],[0,10,7]]",
        "output": "[1, 1, 1, 1]"
      },
      {
        "input": "n = 11, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], query = [[7,10,0],[8,9,1],[9,10,2],[10,7,3],[0,1,4],[1,2,5],[2,3,6],[3,4,7],[4,5,8],[5,6,9]]",
        "output": "[1, 1, 4, 3, 1, 2, 2, 3, 1, 2]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], query = [[7,11,0],[8,13,1],[9,14,2],[10,12,3]]",
        "output": "[0, 1, 2, 1]"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7]], query = [[3,6,0],[4,7,1],[7,3,2],[6,4,5]]",
        "output": "[0, 1, 2, 2]"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7]], query = [[0,7,3],[3,6,4],[7,4,5],[5,3,6],[6,7,0]]",
        "output": "[0, 1, 5, 2, 2]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[6,8],[6,9]], query = [[7,8,1],[3,9,6],[4,5,0]]",
        "output": "[2, 6, 0]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[0,3],[1,4],[1,5]], query = [[4,5,0],[3,1,2],[2,4,5],[0,5,3]]",
        "output": "[1, 0, 1, 0]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], query = [[3,5,0],[4,2,3],[0,5,1],[2,4,1]]",
        "output": "[0, 1, 0, 1]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], query = [[7,13,0],[10,11,2],[12,14,1],[8,9,4],[13,14,5],[1,12,3],[0,10,6]]",
        "output": "[0, 2, 2, 4, 6, 1, 0]"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[1,3],[2,4],[3,5],[3,6]], query = [[5,6,2],[2,6,5],[4,5,0],[1,5,3],[0,3,6]]",
        "output": "[3, 3, 1, 3, 3]"
      },
      {
        "input": "n = 13, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12]], query = [[0,12,3],[6,10,1],[7,9,4],[2,8,5],[3,11,6]]",
        "output": "[0, 1, 4, 2, 2]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], query = [[15,19,0],[11,18,2],[7,14,3],[10,12,4],[13,17,5]]",
        "output": "[1, 2, 3, 4, 2]"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], query = [[5,4,3],[3,6,1],[4,0,2],[6,0,5]]",
        "output": "[1, 1, 0, 2]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], query = [[0,11,3],[6,10,1],[7,9,4],[2,8,5]]",
        "output": "[0, 1, 4, 2]"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], query = [[15,23,5],[20,24,3],[7,18,12],[14,17,9],[10,19,2],[13,22,6]]",
        "output": "[5, 1, 3, 1, 4, 6]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], query = [[15,19,0],[16,11,1],[17,12,2],[18,13,3],[19,14,4]]",
        "output": "[1, 1, 2, 3, 4]"
      },
      {
        "input": "n = 9, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8]], query = [[5,8,0],[6,7,1],[7,8,2],[0,4,3],[1,5,4],[2,6,5],[3,0,6],[4,1,7],[5,2,8]]",
        "output": "[0, 1, 3, 1, 1, 2, 0, 1, 2]"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], query = [[0,6,3],[3,5,1],[5,4,2],[4,3,0],[6,0,1]]",
        "output": "[0, 1, 2, 1, 0]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], query = [[7,10,11],[8,9,6],[10,7,2],[11,3,4],[9,6,1]]",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], query = [[7,10,0],[11,1,2],[8,4,3],[9,6,4],[11,9,5],[10,8,6],[7,2,7],[3,0,8],[1,5,9],[0,11,10]]",
        "output": "[1, 2, 3, 4, 5, 1, 7, 3, 1, 0]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11]], query = [[10,7,6],[8,5,2],[11,1,0],[9,4,3],[6,0,1],[7,11,8]]",
        "output": "[2, 0, 1, 3, 0, 0]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], query = [[7,14,5],[0,14,9],[3,10,2]]",
        "output": "[2, 0, 1]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], query = [[3,5,1],[0,5,2],[4,2,3],[5,0,4]]",
        "output": "[1, 2, 1, 0]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], query = [[3,5,0],[0,5,4],[1,2,3],[4,5,2]]",
        "output": "[0, 0, 1, 2]"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7]], query = [[3,6,0],[4,7,2],[5,0,3]]",
        "output": "[0, 2, 0]"
      },
      {
        "input": "n = 9, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[4,7],[4,8]], query = [[3,8,6],[7,5,0],[8,6,3],[6,7,4],[5,3,1]]",
        "output": "[1, 0, 1, 4, 1]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], query = [[7,11,0],[9,11,1],[10,11,2],[7,10,3],[8,10,4],[7,9,5]]",
        "output": "[0, 1, 2, 3, 4, 1]"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[5,8],[5,9]], query = [[4,8,0],[6,9,2],[1,7,5]]",
        "output": "[2, 2, 1]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17],[10,18],[11,19]], query = [[15,18,0],[17,19,1],[16,14,2],[10,13,3],[7,9,4]]",
        "output": "[1, 1, 2, 1, 4]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], query = [[15,19,0],[16,12,1],[17,11,2],[18,10,3],[19,9,4],[15,13,5],[16,14,6],[17,12,7],[18,11,8],[19,10,9]]",
        "output": "[1, 1, 2, 3, 9, 2, 6, 3, 8, 9]"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7]], query = [[3,7,0],[0,6,4],[7,4,2]]",
        "output": "[0, 0, 2]"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[2,3],[0,4],[4,5],[4,6]], query = [[5,6,0],[3,5,4],[1,6,3]]",
        "output": "[4, 4, 1]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], query = [[7,11,0],[8,10,1],[9,11,2],[10,7,3],[11,8,4],[0,1,5],[1,2,6],[2,3,7],[3,4,8],[4,5,9]]",
        "output": "[0, 1, 2, 3, 1, 0, 2, 3, 3, 4]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], query = [[7,12,0],[8,11,1],[9,13,3],[0,10,7],[14,4,2]]",
        "output": "[0, 1, 1, 1, 2]"
      },
      {
        "input": "n = 9, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8]], query = [[0,8,4],[4,6,2],[5,7,3],[1,5,6]]",
        "output": "[1, 2, 3, 2]"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], query = [[0,6,3],[3,6,0],[0,6,5],[1,4,6],[2,5,1]]",
        "output": "[3, 3, 5, 4, 2]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], query = [[7,11,0],[8,10,2],[9,0,3],[11,1,4]]",
        "output": "[0, 1, 1, 1]"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7]], query = [[0,7,4],[4,6,2],[5,7,3],[1,5,6]]",
        "output": "[1, 2, 3, 2]"
      },
      {
        "input": "n = 6, edges = [[0,1],[1,2],[2,3],[3,4],[4,5]], query = [[0,5,2],[1,4,3],[2,3,4],[3,5,1],[4,0,5]]",
        "output": "[2, 3, 3, 3, 4]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], query = [[10,19,12],[15,18,6],[0,14,3],[5,16,8]]",
        "output": "[4, 3, 0, 3]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], query = [[7,10,2],[11,14,0],[8,12,4]]",
        "output": "[1, 2, 1]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], query = [[7,9,5],[6,8,0],[1,5,3],[4,2,9]]",
        "output": "[1, 0, 1, 4]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], query = [[7,14,0],[8,12,2],[9,0,3],[11,1,4],[13,10,5]]",
        "output": "[0, 2, 1, 1, 2]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], query = [[7,10,0],[8,12,1],[9,13,2],[10,14,3],[11,1,4]]",
        "output": "[1, 1, 2, 1, 1]"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7]], query = [[7,5,4],[5,3,0],[1,6,2]]",
        "output": "[1, 0, 2]"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], query = [[3,5,0],[4,5,2],[5,0,3]]",
        "output": "[0, 2, 0]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[5,8],[6,9]], query = [[3,7,8],[4,6,9],[0,9,1]]",
        "output": "[5, 6, 0]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]], query = [[3,9,0],[7,8,2],[6,0,4]]",
        "output": "[0, 1, 0]"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[6,11]], query = [[7,10,11],[8,9,2],[5,11,0],[1,6,4],[3,10,1],[4,8,5],[2,7,9]]",
        "output": "[2, 1, 2, 1, 1, 1, 1]"
      },
      {
        "input": "n = 14, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13]], query = [[7,13,0],[8,12,1],[9,11,2],[10,13,3],[0,2,4],[1,5,5],[2,6,6],[3,7,7],[4,8,8],[5,9,9],[6,10,10],[7,11,11],[8,12,12],[9,13,13]]",
        "output": "[0, 1, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7]], query = [[3,5,0],[4,6,7],[7,1,3]]",
        "output": "[0, 2, 1]"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,9]], query = [[8,9,6],[1,5,7],[4,6,9]]",
        "output": "[2, 1, 2]"
      },
      {
        "input": "n = 9, edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[3,8]], query = [[4,8,0],[5,7,1],[6,8,2],[0,7,3],[1,8,4],[2,6,5]]",
        "output": "[1, 1, 3, 3, 1, 2]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]], query = [[7,5,2],[8,9,0],[3,6,4]]",
        "output": "[2, 0, 1]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14]], query = [[12,13,14],[10,11,8],[7,14,1],[9,5,0],[2,4,3],[1,6,10]]",
        "output": "[5, 4, 2, 0, 0, 1]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[5,8],[6,9]], query = [[3,7,2],[0,9,4],[1,6,8]]",
        "output": "[2, 0, 2]"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], query = [[15,19,0],[16,11,1],[17,12,3],[0,18,7],[13,9,5],[14,4,2]]",
        "output": "[1, 1, 3, 3, 2, 2]"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], query = [[3,6,0],[4,5,1],[5,4,2],[6,3,3],[0,1,4]]",
        "output": "[0, 1, 2, 3, 1]"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], query = [[7,9,5],[8,6,4],[5,8,2]]",
        "output": "[1, 1, 2]"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7]], query = [[3,7,0],[4,6,1],[0,7,2]]",
        "output": "[0, 1, 2]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], query = [[7,10,12],[8,11,3],[13,4,6],[14,9,5]]",
        "output": "[1, 3, 6, 2]"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], query = [[7,12,0],[9,13,1],[11,14,2],[3,10,4]]",
        "output": "[0, 1, 2, 4]"
      }
    ]
  },
  {
    "id": 2065,
    "difficulty": "Hard",
    "tags": [
      "Graph",
      "Array",
      "Backtracking"
    ],
    "problemDescription": "There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.\nA valid path in the graph is any path that starts at node 0, ends at node 0, and takes at most maxTime seconds to complete. You may visit the same node multiple times. The quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum).\nReturn the maximum quality of a valid path.\nNote: There are at most four edges connected to each node.\n\u00a0\nExample 1:\n\n\nInput: values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49\nOutput: 75\nExplanation:\nOne possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75.\n\nExample 2:\n\n\nInput: values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30\nOutput: 25\nExplanation:\nOne possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30.\nThe nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25.\n\nExample 3:\n\n\nInput: values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50\nOutput: 7\nExplanation:\nOne possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.\n\n\u00a0\nConstraints:\n\nn == values.length\n1 <= n <= 1000\n0 <= values[i] <= 108\n0 <= edges.length <= 2000\nedges[j].length == 3 \n0 <= uj < vj <= n - 1\n10 <= timej, maxTime <= 100\nAll the pairs [uj, vj] are unique.\nThere are at most four edges connected to each node.\nThe graph may not be connected.\n\n",
    "starterCode": "class Solution:\n    def maximalPathQuality(self, values: List[int], edges: List[List[int]], maxTime: int) -> int:\n        ",
    "testCases": [
      {
        "input": "values = [10,20,30,40,50], edges = [[0,1,10],[0,2,20],[1,3,30],[2,4,40]], maxTime = 100",
        "output": "70"
      },
      {
        "input": "values = [100,200,300,400], edges = [[0,1,10],[1,2,10],[2,3,10],[3,0,10]], maxTime = 50",
        "output": "1000"
      },
      {
        "input": "values = [5,5,5,5,5], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,0,10]], maxTime = 40",
        "output": "15"
      },
      {
        "input": "values = [5,5,5,5], edges = [[0,1,10],[0,2,10],[2,3,10]], maxTime = 25",
        "output": "10"
      },
      {
        "input": "values = [1,1,1,1,1,1,1,1,1,1], edges = [[0,1,10],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[4,6,10],[5,7,10],[6,8,10],[7,9,10]], maxTime = 50",
        "output": "3"
      },
      {
        "input": "values = [1,2,3,4,5], edges = [[0,1,10],[0,2,10],[1,3,10],[2,4,10]], maxTime = 20",
        "output": "4"
      },
      {
        "input": "values = [1,1,1,1,1], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10]], maxTime = 40",
        "output": "3"
      },
      {
        "input": "values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30",
        "output": "25"
      },
      {
        "input": "values = [0,1,2,3,4,5,6,7,8,9], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10],[1,5,10],[2,6,10],[3,7,10],[4,8,10],[5,9,10]], maxTime = 100",
        "output": "27"
      },
      {
        "input": "values = [5,5,5,5,5,5,5,5,5,5], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10]], maxTime = 90",
        "output": "25"
      },
      {
        "input": "values = [5,5,5,5,5,5], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10]], maxTime = 30",
        "output": "10"
      },
      {
        "input": "values = [10,20,30,40,50], edges = [[0,1,10],[0,2,10],[1,3,10],[2,4,10]], maxTime = 50",
        "output": "90"
      },
      {
        "input": "values = [5,5,5,5], edges = [[0,1,10],[0,2,10],[1,3,10],[2,3,10]], maxTime = 30",
        "output": "10"
      },
      {
        "input": "values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50",
        "output": "7"
      },
      {
        "input": "values = [10,20,30,40,50], edges = [[0,1,10],[0,2,20],[1,3,15],[2,3,25],[3,4,10]], maxTime = 60",
        "output": "70"
      },
      {
        "input": "values = [1,2,3,4], edges = [[0,1,10],[0,2,10],[0,3,10]], maxTime = 10",
        "output": "1"
      },
      {
        "input": "values = [1,2,3,4,5,6], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10]], maxTime = 60",
        "output": "12"
      },
      {
        "input": "values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49",
        "output": "75"
      },
      {
        "input": "values = [10,20,30], edges = [[0,1,10],[1,2,10]], maxTime = 25",
        "output": "30"
      },
      {
        "input": "values = [10,20,30], edges = [[0,1,10],[1,2,20]], maxTime = 30",
        "output": "30"
      },
      {
        "input": "values = [10,20,30,40,50], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,0,10]], maxTime = 50",
        "output": "150"
      },
      {
        "input": "values = [10], edges = [], maxTime = 100",
        "output": "10"
      },
      {
        "input": "values = [100,0,0,0], edges = [[0,1,10],[0,2,10],[0,3,10]], maxTime = 10",
        "output": "100"
      },
      {
        "input": "values = [100, 50, 200, 300, 150, 250, 400], edges = [[0,1,20],[0,2,30],[0,3,40],[1,4,10],[1,5,20],[2,6,30],[3,6,40],[4,5,50],[5,6,60]], maxTime = 120",
        "output": "700"
      },
      {
        "input": "values = [100,200,300,400,500,600,700,800,900,1000], edges = [[0,1,10],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[4,6,10],[5,7,10],[6,8,10],[7,9,10],[8,9,10]], maxTime = 80",
        "output": "2500"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,8,10],[5,9,10],[6,7,10],[6,8,10],[7,8,10],[7,9,10],[8,9,10]], maxTime = 50",
        "output": "110"
      },
      {
        "input": "values = [10,10,10,10,10], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10],[1,2,10],[1,3,10],[1,4,10],[2,3,10],[2,4,10],[3,4,10]], maxTime = 40",
        "output": "40"
      },
      {
        "input": "values = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10],[1,5,10],[1,6,10],[1,7,10],[2,8,10],[2,9,10],[3,10,10],[3,11,10],[4,12,10],[4,13,10],[5,14,10],[5,15,10],[6,16,10],[6,17,10],[7,18,10],[7,19,10],[8,14,10],[8,15,10],[9,16,10],[9,17,10],[10,18,10],[10,19,10],[11,14,10],[11,15,10],[12,16,10],[12,17,10],[13,18,10],[13,19,10]], maxTime = 100",
        "output": "10"
      },
      {
        "input": "values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], edges = [[0,1,10],[0,2,20],[1,3,15],[2,4,25],[3,5,10],[4,6,15],[5,7,20],[6,8,10],[7,9,15],[8,10,20],[9,11,10]], maxTime = 120",
        "output": "210"
      },
      {
        "input": "values = [1,1,1,1,1,1,1,1,1,1], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,7,10],[5,8,10],[6,8,10],[7,9,10],[8,9,10]], maxTime = 80",
        "output": "8"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,0,10],[0,2,15],[1,3,15],[2,4,15],[3,5,15],[4,6,15],[5,7,15],[6,8,15],[7,9,15],[8,0,15],[9,1,15]], maxTime = 150",
        "output": "550"
      },
      {
        "input": "values = [5,10,15,20,25,30,35], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,0,10]], maxTime = 50",
        "output": "70"
      },
      {
        "input": "values = [100,200,300,400,500,600,700,800,900,1000], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10]], maxTime = 55",
        "output": "600"
      },
      {
        "input": "values = [1,2,3,4,5,6,7,8,9,10], edges = [[0,1,10],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[4,6,10],[5,7,10],[6,8,10],[7,9,10]], maxTime = 50",
        "output": "9"
      },
      {
        "input": "values = [1,1,1,1,1,1,1,1,1,1], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10],[1,2,10],[1,3,10],[1,4,10],[2,3,10],[2,4,10],[3,4,10]], maxTime = 100",
        "output": "5"
      },
      {
        "input": "values = [10,20,30,40,50,60], edges = [[0,1,10],[0,2,10],[1,2,15],[1,3,20],[2,4,25],[3,4,30],[4,5,15]], maxTime = 70",
        "output": "90"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100], edges = [[0,1,10],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[4,6,10],[5,7,10],[6,8,10],[7,9,10],[8,0,10]], maxTime = 90",
        "output": "310"
      },
      {
        "input": "values = [1,2,3,4,5,6,7,8,9,10], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,8,10],[5,9,10],[6,7,10],[6,8,10],[7,8,10],[8,9,10],[0,3,10],[0,4,10],[1,5,10],[2,7,10],[3,8,10],[4,9,10],[5,6,10]], maxTime = 60",
        "output": "37"
      },
      {
        "input": "values = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[3,8,10],[4,9,10],[4,10,10],[5,11,10],[5,12,10],[6,13,10],[6,14,10],[7,15,10],[7,16,10],[8,17,10],[8,18,10],[9,19,10]], maxTime = 150",
        "output": "8"
      },
      {
        "input": "values = [1, 2, 3, 4, 5], edges = [[0,1,10],[0,2,10],[1,3,10],[2,4,10],[3,4,10]], maxTime = 40",
        "output": "9"
      },
      {
        "input": "values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0,1,10],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[4,6,10],[5,7,10],[6,8,10],[7,9,10]], maxTime = 100",
        "output": "310"
      },
      {
        "input": "values = [100,200,100,200,100,200,100,200], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,7,10]], maxTime = 50",
        "output": "500"
      },
      {
        "input": "values = [50,20,30,40], edges = [[0,1,10],[0,2,20],[0,3,30],[1,2,15],[1,3,25],[2,3,10]], maxTime = 40",
        "output": "80"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10],[1,2,10],[1,3,10],[1,4,10],[2,3,10],[2,4,10],[3,4,10]], maxTime = 35",
        "output": "100"
      },
      {
        "input": "values = [5,10,15,20,25,30], edges = [[0,1,10],[1,2,15],[2,3,20],[3,4,25],[4,5,30],[0,3,35],[1,4,40]], maxTime = 100",
        "output": "50"
      },
      {
        "input": "values = [5, 10, 15, 20, 25, 30, 35, 40], edges = [[0,1,10],[1,2,15],[2,3,20],[3,4,25],[4,5,30],[5,6,35],[6,7,40],[0,7,10]], maxTime = 100",
        "output": "80"
      },
      {
        "input": "values = [1,2,3,4,5,6,7,8,9,10], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,8,10],[5,9,10]], maxTime = 80",
        "output": "27"
      },
      {
        "input": "values = [1,2,3,4,5,6,7,8,9,10], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,0,10]], maxTime = 50",
        "output": "20"
      },
      {
        "input": "values = [30,20,10,40,50,60,70,80,90,100], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,0,10],[0,5,10],[1,6,10],[2,7,10],[3,8,10],[4,9,10]], maxTime = 150",
        "output": "550"
      },
      {
        "input": "values = [30,20,10,40,50], edges = [[0,1,10],[0,2,15],[0,3,20],[0,4,25],[1,2,5],[1,3,15],[1,4,25],[2,3,10],[2,4,20],[3,4,5]], maxTime = 60",
        "output": "150"
      },
      {
        "input": "values = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,10,10],[10,11,10],[11,12,10],[12,13,10],[13,14,10],[14,15,10],[15,16,10],[16,17,10],[17,18,10],[18,19,10]], maxTime = 190",
        "output": "275"
      },
      {
        "input": "values = [9,8,7,6,5,4,3,2,1], edges = [[0,1,10],[0,2,10],[0,3,10],[1,4,10],[1,5,10],[2,6,10],[2,7,10],[3,8,10],[4,8,10],[5,6,10]], maxTime = 60",
        "output": "31"
      },
      {
        "input": "values = [5,10,15,20,25,30,35,40,45,50], edges = [[0,1,10],[1,2,10],[0,3,10],[3,4,10],[2,5,10],[5,6,10],[4,7,10],[7,8,10],[6,9,10]], maxTime = 100",
        "output": "145"
      },
      {
        "input": "values = [1,2,3,4,5,6,7,8,9,10], edges = [[0,1,15],[0,2,20],[1,3,25],[2,4,30],[3,5,35],[4,6,40],[5,7,45],[6,8,50],[7,9,55],[8,9,60]], maxTime = 150",
        "output": "13"
      },
      {
        "input": "values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0,1,10],[0,2,10],[0,3,10],[1,4,10],[1,5,10],[2,6,10],[2,7,10],[3,8,10],[3,9,10]], maxTime = 50",
        "output": "150"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,0,10],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[4,6,10],[5,7,10],[6,8,10],[7,9,10],[0,3,10],[1,4,10],[2,5,10],[3,6,10],[4,7,10],[5,8,10],[6,9,10],[0,4,10],[1,5,10],[2,6,10],[3,7,10],[4,8,10],[5,9,10],[0,5,10],[1,6,10],[2,7,10],[3,8,10],[4,9,10]], maxTime = 120",
        "output": "Execution timed out"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,10,10],[10,11,10],[11,12,10],[12,13,10],[13,14,10],[14,0,10]], maxTime = 140",
        "output": "850"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,7,10],[5,8,10],[6,8,10],[7,9,10],[8,9,10]], maxTime = 100",
        "output": "510"
      },
      {
        "input": "values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], edges = [[0,1,10],[1,2,15],[2,3,20],[3,4,25],[4,5,10],[5,6,30],[6,7,10],[7,8,25],[8,9,20],[9,10,15],[10,11,20],[11,12,15],[12,13,10],[13,14,30]], maxTime = 200",
        "output": "210"
      },
      {
        "input": "values = [100,200,300,400,500,600,700,800,900,1000], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,0,10]], maxTime = 90",
        "output": "3500"
      },
      {
        "input": "values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10],[1,5,10],[1,6,10],[2,7,10],[2,8,10],[3,9,10],[3,10,10],[4,11,10],[4,12,10],[5,13,10],[6,14,10],[7,15,10],[8,16,10],[9,17,10],[10,18,10],[11,19,10],[12,13,10],[14,15,10],[16,17,10],[18,19,10]], maxTime = 150",
        "output": "142"
      },
      {
        "input": "values = [100, 200, 300, 400, 500], edges = [[0,1,20],[0,2,30],[1,3,25],[2,4,35],[3,4,40]], maxTime = 150",
        "output": "1500"
      },
      {
        "input": "values = [50,60,70,80,90,100,110,120,130,140], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,7,10],[5,8,10],[6,8,10],[7,9,10],[8,9,10],[3,4,15],[5,6,15]], maxTime = 120",
        "output": "950"
      },
      {
        "input": "values = [100,200,300,400,500,600,700,800,900,1000], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10],[0,5,10],[0,6,10],[0,7,10],[0,8,10],[0,9,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10]], maxTime = 500",
        "output": "Execution timed out"
      },
      {
        "input": "values = [100,200,300,400,500], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,0,10]], maxTime = 50",
        "output": "1500"
      },
      {
        "input": "values = [50, 20, 10, 30, 40, 60], edges = [[0,1,10],[1,2,15],[1,3,20],[2,3,25],[3,4,10],[4,5,30]], maxTime = 100",
        "output": "150"
      },
      {
        "input": "values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0,1,10],[0,2,10],[1,3,10],[2,3,10],[3,4,10],[1,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,1,10]], maxTime = 60",
        "output": "22"
      },
      {
        "input": "values = [5,5,5,5,5,5,5,5,5,5], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,8,10],[5,9,10],[6,7,10],[6,8,10],[7,8,10]], maxTime = 100",
        "output": "40"
      },
      {
        "input": "values = [5,10,15,20,25,30], edges = [[0,1,10],[1,2,15],[2,3,20],[3,4,25],[4,5,30],[0,5,35]], maxTime = 70",
        "output": "35"
      },
      {
        "input": "values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10]], maxTime = 90",
        "output": "15"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,7,10],[5,8,10],[6,8,10],[7,9,10],[8,9,10],[0,3,30],[1,5,30],[2,4,30]], maxTime = 90",
        "output": "450"
      },
      {
        "input": "values = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], edges = [[0,1,10],[0,2,15],[1,3,20],[2,4,25],[3,5,10],[4,6,30],[5,7,10],[6,8,25],[7,9,20]], maxTime = 150",
        "output": "3100"
      },
      {
        "input": "values = [1,2,3,4,5,6,7,8,9,10], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10],[1,5,10],[2,6,10],[3,7,10],[4,8,10],[5,9,10],[6,9,10],[7,9,10],[8,9,10]], maxTime = 50",
        "output": "15"
      },
      {
        "input": "values = [100000000,200000000,300000000,400000000], edges = [[0,1,20],[1,2,30],[2,3,25],[3,0,35]], maxTime = 100",
        "output": "600000000"
      },
      {
        "input": "values = [50, 60, 70, 80, 90, 100], edges = [[0,1,10],[0,2,20],[1,3,15],[2,3,25],[3,4,10],[4,5,15]], maxTime = 100",
        "output": "380"
      },
      {
        "input": "values = [100,200,300,400,500], edges = [[0,1,20],[1,2,30],[2,3,25],[3,4,35],[4,0,40]], maxTime = 120",
        "output": "800"
      },
      {
        "input": "values = [10,20,30,40,50], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,0,10],[1,3,15],[2,4,20]], maxTime = 50",
        "output": "150"
      },
      {
        "input": "values = [5,10,15,20,25,30,35,40,45,50], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,7,10],[5,8,10],[6,8,10],[7,9,10],[8,9,10],[0,5,20],[1,6,20],[2,7,20],[3,8,20],[4,9,20]], maxTime = 120",
        "output": "275"
      },
      {
        "input": "values = [100,200,300,400,500,600,700,800,900,1000], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[4,8,10],[5,9,10],[6,7,10],[6,8,10],[7,8,10],[8,9,10],[0,3,10],[0,4,10],[1,5,10],[2,7,10],[3,8,10],[4,9,10],[5,6,10],[0,5,10],[1,6,10],[2,3,10],[3,9,10],[4,5,10],[6,9,10],[7,9,10]], maxTime = 100",
        "output": "5500"
      },
      {
        "input": "values = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,10,10],[10,11,10],[11,12,10],[12,13,10],[13,14,10],[14,15,10]], maxTime = 150",
        "output": "40"
      },
      {
        "input": "values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], edges = [[0,1,10],[0,2,10],[1,3,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,10,10],[10,11,10],[11,12,10],[12,13,10],[13,14,10],[14,0,10]], maxTime = 150",
        "output": "1180"
      },
      {
        "input": "values = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10],[0,5,10],[0,6,10],[0,7,10],[0,8,10],[0,9,10],[1,10,10],[10,11,10],[11,12,10],[12,13,10],[13,14,10],[14,15,10],[15,16,10],[16,17,10],[17,18,10],[18,19,10]], maxTime = 50",
        "output": "3"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100], edges = [[0,1,10],[0,2,10],[1,3,10],[1,4,10],[2,5,10],[2,6,10],[3,7,10],[3,8,10],[4,9,10],[5,6,10],[7,8,10],[8,9,10]], maxTime = 90",
        "output": "390"
      },
      {
        "input": "values = [100, 200, 300, 400, 500], edges = [[0,1,20],[0,2,20],[1,3,20],[2,3,20],[3,4,20],[1,2,20]], maxTime = 80",
        "output": "1000"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,0,10]], maxTime = 90",
        "output": "350"
      },
      {
        "input": "values = [8,6,7,5,3,0,9], edges = [[0,1,15],[1,2,20],[2,3,25],[3,4,30],[4,5,35],[5,6,40],[6,0,45]], maxTime = 100",
        "output": "21"
      },
      {
        "input": "values = [5,10,15,20,25,30], edges = [[0,1,10],[1,2,15],[2,3,20],[3,4,25],[4,5,30],[0,5,10]], maxTime = 100",
        "output": "70"
      },
      {
        "input": "values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], edges = [[0,1,10],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[4,6,10],[5,7,10],[6,8,10],[7,9,10],[9,0,10]], maxTime = 100",
        "output": "390"
      },
      {
        "input": "values = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], edges = [[0,1,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10],[9,10,10],[10,11,10],[11,12,10],[12,13,10],[13,14,10]], maxTime = 150",
        "output": "360"
      },
      {
        "input": "values = [1,2,3,4,5,6,7,8,9,10], edges = [[0,1,10],[0,9,10],[1,2,10],[2,3,10],[3,4,10],[4,5,10],[5,6,10],[6,7,10],[7,8,10],[8,9,10]], maxTime = 80",
        "output": "35"
      },
      {
        "input": "values = [10,20,30,40,50], edges = [[0,1,10],[0,2,10],[0,3,10],[0,4,10],[1,2,10],[1,3,10],[1,4,10],[2,3,10],[2,4,10],[3,4,10]], maxTime = 30",
        "output": "100"
      }
    ]
  },
  {
    "id": 1125,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Dynamic Programming",
      "Bitmask"
    ],
    "problemDescription": "In a project, you have a list of required skills req_skills, and a list of people. The ith person people[i] contains a list of skills that the person has.\nConsider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.\n\nFor example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3].\n\nReturn any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.\nIt is guaranteed an answer exists.\n\u00a0\nExample 1:\nInput: req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]\nOutput: [0,2]\nExample 2:\nInput: req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]\nOutput: [1,2]\n\n\u00a0\nConstraints:\n\n1 <= req_skills.length <= 16\n1 <= req_skills[i].length <= 16\nreq_skills[i] consists of lowercase English letters.\nAll the strings of req_skills are unique.\n1 <= people.length <= 60\n0 <= people[i].length <= 16\n1 <= people[i][j].length <= 16\npeople[i][j] consists of lowercase English letters.\nAll the strings of people[i] are unique.\nEvery skill in people[i] is a skill in req_skills.\nIt is guaranteed a sufficient team exists.\n\n",
    "starterCode": "class Solution:\n    def smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "req_skills = [\"python\",\"sql\"], people = [[\"python\"],[\"sql\"],[\"python\",\"sql\"]]",
        "output": "[2]"
      },
      {
        "input": "req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]",
        "output": "[2, 0]"
      },
      {
        "input": "req_skills = [\"programming\",\"testing\",\"design\"], people = [[\"programming\"],[\"testing\"],[\"design\"],[\"programming\",\"testing\"],[\"testing\",\"design\"],[\"design\",\"programming\"]]",
        "output": "[4, 0]"
      },
      {
        "input": "req_skills = [\"a\",\"b\",\"c\"], people = [[\"a\",\"b\"],[\"b\",\"c\"],[\"c\"],[\"a\"]]",
        "output": "[1, 3]"
      },
      {
        "input": "req_skills = [\"network\",\"database\"], people = [[\"network\"],[\"database\"],[\"network\",\"database\"]]",
        "output": "[2]"
      },
      {
        "input": "req_skills = [\"skill1\",\"skill2\",\"skill3\",\"skill4\"], people = [[\"skill1\"],[\"skill2\"],[\"skill3\"],[\"skill4\"],[\"skill1\",\"skill2\",\"skill3\",\"skill4\"]]",
        "output": "[4]"
      },
      {
        "input": "req_skills = [\"coding\",\"design\",\"writing\"], people = [[\"coding\"],[\"design\"],[\"writing\"],[\"coding\",\"design\",\"writing\"]]",
        "output": "[3]"
      },
      {
        "input": "req_skills = [\"coding\",\"design\"], people = [[\"coding\"],[\"design\"],[\"coding\",\"design\"]]",
        "output": "[2]"
      },
      {
        "input": "req_skills = [\"skill1\",\"skill2\",\"skill3\",\"skill4\"], people = [[\"skill1\"],[\"skill2\"],[\"skill3\"],[\"skill4\"],[\"skill1\",\"skill2\"],[\"skill3\",\"skill4\"]]",
        "output": "[5, 4]"
      },
      {
        "input": "req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]",
        "output": "[2, 1]"
      },
      {
        "input": "req_skills = [\"python\",\"data\",\"ai\"], people = [[\"python\"],[\"data\"],[\"ai\"],[\"python\",\"data\"],[\"data\",\"ai\"],[\"python\",\"ai\"]]",
        "output": "[4, 0]"
      },
      {
        "input": "req_skills = [\"req1\",\"req2\"], people = [[\"req1\"],[\"req2\"],[\"req1\",\"req2\"],[\"req1\"],[\"req2\"]]",
        "output": "[2]"
      },
      {
        "input": "req_skills = [\"sql\",\"noSql\"], people = [[\"sql\"],[\"noSql\"],[\"sql\",\"noSql\"],[\"sql\"],[\"noSql\"]]",
        "output": "[2]"
      },
      {
        "input": "req_skills = [\"skill1\",\"skill2\",\"skill3\"], people = [[\"skill1\",\"skill2\"],[\"skill2\",\"skill3\"],[\"skill3\",\"skill1\"]]",
        "output": "[1, 0]"
      },
      {
        "input": "req_skills = [\"a\",\"b\",\"c\",\"d\"], people = [[\"a\",\"b\"],[\"b\",\"c\"],[\"c\",\"d\"],[\"d\",\"a\"],[\"a\",\"b\",\"c\",\"d\"]]",
        "output": "[4]"
      },
      {
        "input": "req_skills = [\"frontend\",\"backend\",\"devops\"], people = [[\"frontend\"],[\"backend\"],[\"devops\"],[\"frontend\",\"backend\"],[\"backend\",\"devops\"],[\"frontend\",\"devops\"],[\"frontend\",\"backend\",\"devops\"]]\"",
        "output": "Error: Solution.smallestSufficientTeam() missing 1 required positional argument: 'people'"
      },
      {
        "input": "req_skills = [\"devops\",\"data_analysis\",\"cloud_services\",\"ui_ux\"], people = [[\"devops\"],[\"data_analysis\"],[\"cloud_services\"],[\"ui_ux\"],[\"devops\",\"data_analysis\"],[\"cloud_services\",\"ui_ux\"],[\"devops\",\"cloud_services\"],[\"data_analysis\",\"ui_ux\"]]",
        "output": "[5, 4]"
      },
      {
        "input": "req_skills = [\"machinelearning\",\"deeplearning\",\"computer_vision\",\"nlp\"], people = [[\"machinelearning\"],[\"deeplearning\"],[\"computer_vision\"],[\"nlp\"],[\"machinelearning\",\"deeplearning\"],[\"computer_vision\",\"nlp\"],[\"machinelearning\",\"nlp\"]] ",
        "output": "[5, 4]"
      },
      {
        "input": "req_skills = [\"frontend\",\"backend\",\"fullstack\",\"uiux\",\"devops\"], people = [[\"frontend\"],[\"backend\"],[\"fullstack\"],[\"uiux\"],[\"devops\"],[\"frontend\",\"backend\"],[\"fullstack\",\"uiux\"],[\"backend\",\"devops\"],[\"fullstack\",\"devops\"],[\"frontend\",\"uiux\"],[\"frontend\",\"backend\",\"uiux\"]] ",
        "output": "[8, 10]"
      },
      {
        "input": "req_skills = [\"ui\",\"ux\",\"backend\",\"frontend\"], people = [[\"ui\"],[\"ux\"],[\"backend\"],[\"frontend\"],[\"ui\",\"ux\"],[\"backend\",\"frontend\"],[\"ui\",\"backend\"],[\"ux\",\"frontend\"],[\"ui\",\"ux\",\"backend\",\"frontend\"]]",
        "output": "[8]"
      },
      {
        "input": "req_skills = [\"python\",\"javascript\",\"c++\",\"ruby\"], people = [[\"python\",\"javascript\"],[\"c++\"],[\"ruby\"],[\"python\",\"c++\"],[\"javascript\",\"ruby\"]]",
        "output": "[4, 3]"
      },
      {
        "input": "req_skills = [\"frontend\",\"backend\",\"devops\",\"qa\"], people = [[\"frontend\"],[\"backend\"],[\"devops\"],[\"qa\"],[\"frontend\",\"backend\"],[\"backend\",\"devops\"],[\"devops\",\"qa\"],[\"frontend\",\"qa\"],[\"frontend\",\"backend\",\"devops\"],[\"backend\",\"devops\",\"qa\"],[\"frontend\",\"devops\",\"qa\"],[\"frontend\",\"backend\",\"qa\"],[\"frontend\",\"backend\",\"devops\",\"qa\"]]",
        "output": "[12]"
      },
      {
        "input": "req_skills = [\"sql\",\"nosql\",\"big_data\",\"data_warehouse\"], people = [[\"sql\"],[\"nosql\"],[\"big_data\"],[\"data_warehouse\"],[\"sql\",\"nosql\"],[\"nosql\",\"big_data\"],[\"big_data\",\"data_warehouse\"],[\"sql\",\"data_warehouse\"],[\"sql\",\"nosql\",\"big_data\"],[\"nosql\",\"big_data\",\"data_warehouse\"],[\"sql\",\"big_data\",\"data_warehouse\"],[\"sql\",\"nosql\",\"data_warehouse\"],[\"sql\",\"nosql\",\"big_data\",\"data_warehouse\"]]",
        "output": "[12]"
      },
      {
        "input": "req_skills = [\"mobiledev\",\"webdev\",\"devops\",\"design\",\"testing\"], people = [[\"mobiledev\"],[\"webdev\"],[\"devops\"],[\"design\"],[\"testing\"],[\"mobiledev\",\"webdev\"],[\"devops\",\"design\"],[\"webdev\",\"testing\"],[\"mobiledev\",\"devops\"],[\"design\",\"testing\"],[\"mobiledev\",\"webdev\",\"devops\"],[\"devops\",\"design\",\"testing\"]] ",
        "output": "[11, 5]"
      },
      {
        "input": "req_skills = [\"algorithm\",\"datastructure\",\"programming\",\"problem-solving\"], people = [[\"algorithm\"],[\"datastructure\"],[\"programming\"],[\"problem-solving\"],[\"algorithm\",\"datastructure\"],[\"programming\",\"problem-solving\"],[\"algorithm\",\"problem-solving\"],[\"datastructure\",\"programming\"],[\"algorithm\",\"datastructure\",\"programming\",\"problem-solving\"]] ",
        "output": "[8]"
      },
      {
        "input": "req_skills = [\"iot\",\"ml\",\"ai\",\"automation\",\"cloudcomputing\"], people = [[\"iot\"],[\"ml\"],[\"ai\"],[\"automation\"],[\"cloudcomputing\"],[\"iot\",\"ml\"],[\"ai\",\"automation\"],[\"cloudcomputing\",\"ml\"],[\"iot\",\"automation\"],[\"ai\",\"cloudcomputing\"],[\"iot\",\"ml\",\"ai\"],[\"automation\",\"cloudcomputing\",\"ml\"]] ",
        "output": "[11, 10]"
      },
      {
        "input": "req_skills = [\"project_management\",\"communication\",\"problem_solving\",\"decision_making\"], people = [[\"project_management\"],[\"communication\"],[\"problem_solving\"],[\"decision_making\"],[\"project_management\",\"communication\"],[\"problem_solving\",\"decision_making\"],[\"project_management\",\"problem_solving\"],[\"communication\",\"decision_making\"],[\"project_management\",\"communication\",\"problem_solving\"],[\"communication\",\"problem_solving\",\"decision_making\"]]",
        "output": "[9, 0]"
      },
      {
        "input": "req_skills = [\"database\",\"frontend\",\"backend\",\"devops\",\"cloud\",\"security\"], people = [[\"database\"],[\"frontend\"],[\"backend\"],[\"devops\"],[\"cloud\"],[\"security\"],[\"database\",\"frontend\"],[\"backend\",\"devops\"],[\"cloud\",\"security\"],[\"database\",\"backend\"],[\"frontend\",\"devops\"],[\"cloud\",\"frontend\"],[\"database\",\"cloud\"],[\"devops\",\"security\"],[\"database\",\"frontend\",\"backend\"],[\"devops\",\"cloud\",\"security\"]] ",
        "output": "[15, 14]"
      },
      {
        "input": "req_skills = [\"python\",\"javascript\",\"ruby\",\"cpp\"], people = [[\"python\",\"cpp\"],[\"javascript\"],[\"ruby\"],[\"python\",\"javascript\"],[\"cpp\",\"ruby\"],[\"python\",\"ruby\"]]",
        "output": "[4, 3]"
      },
      {
        "input": "req_skills = [\"sql\",\"nosql\",\"devops\",\"cloud\",\"agile\"], people = [[\"sql\"],[\"nosql\"],[\"devops\"],[\"cloud\"],[\"agile\"],[\"sql\",\"nosql\"],[\"devops\",\"cloud\"],[\"cloud\",\"agile\"],[\"sql\",\"devops\"],[\"nosql\",\"agile\"]] ",
        "output": "[7, 8, 1]"
      },
      {
        "input": "req_skills = [\"agile\",\"scrum\",\"kanban\",\"project_management\",\"team_leadership\"], people = [[\"agile\"],[\"scrum\"],[\"kanban\"],[\"project_management\"],[\"team_leadership\"],[\"agile\",\"scrum\"],[\"kanban\",\"project_management\"],[\"team_leadership\",\"agile\"],[\"scrum\",\"team_leadership\"]]\"",
        "output": "Error: Solution.smallestSufficientTeam() missing 1 required positional argument: 'people'"
      },
      {
        "input": "req_skills = [\"leadership\",\"communication\",\"programming\",\"project-management\",\"design\"], people = [[\"leadership\"],[\"communication\"],[\"programming\"],[\"project-management\"],[\"design\"],[\"leadership\",\"communication\"],[\"programming\",\"project-management\"],[\"design\",\"communication\"],[\"leadership\",\"programming\"],[\"project-management\",\"design\"],[\"leadership\",\"programming\",\"design\"],[\"communication\",\"project-management\",\"design\"],[\"leadership\",\"communication\",\"design\"]]",
        "output": "[11, 8]"
      },
      {
        "input": "req_skills = [\"javascript\",\"typescript\",\"angular\",\"react\"], people = [[\"javascript\"],[\"typescript\"],[\"angular\"],[\"react\"],[\"javascript\",\"typescript\"],[\"angular\",\"react\"],[\"javascript\",\"angular\"],[\"typescript\",\"react\"],[\"javascript\",\"typescript\",\"angular\",\"react\"]]",
        "output": "[8]"
      },
      {
        "input": "req_skills = [\"python\",\"javascript\",\"c++\",\"ruby\",\"go\"], people = [[\"python\",\"javascript\"],[\"c++\",\"ruby\"],[\"go\"],[\"python\",\"c++\"],[\"javascript\",\"ruby\",\"go\"]]",
        "output": "[4, 3]"
      },
      {
        "input": "req_skills = [\"linux\",\"windows\",\"macos\",\"docker\"], people = [[\"linux\"],[\"windows\"],[\"macos\"],[\"docker\"],[\"linux\",\"windows\"],[\"macos\",\"docker\"],[\"linux\",\"macos\"],[\"windows\",\"docker\"],[\"linux\",\"macos\",\"docker\"],[\"windows\",\"macos\",\"docker\"],[\"linux\",\"windows\",\"docker\"],[\"linux\",\"windows\",\"macos\",\"docker\"]]",
        "output": "[11]"
      },
      {
        "input": "req_skills = [\"sql\",\"nosql\",\"bigdata\",\"machinelearning\",\"datascience\"], people = [[\"sql\",\"nosql\"],[\"bigdata\",\"machinelearning\"],[\"datascience\"],[\"sql\",\"bigdata\"],[\"nosql\",\"machinelearning\"],[\"bigdata\",\"datascience\"],[\"machinelearning\",\"datascience\"],[\"sql\",\"nosql\",\"bigdata\",\"machinelearning\",\"datascience\"]]",
        "output": "[7]"
      },
      {
        "input": "req_skills = [\"git\",\"docker\",\"jenkins\",\"travis\",\"circleci\",\"aws\"], people = [[\"git\",\"docker\"],[\"jenkins\",\"travis\"],[\"circleci\",\"aws\"],[\"git\",\"travis\"],[\"docker\",\"circleci\"],[\"jenkins\",\"aws\"],[\"git\",\"docker\",\"jenkins\",\"travis\",\"circleci\",\"aws\"]]",
        "output": "[6]"
      },
      {
        "input": "req_skills = [\"sql\",\"nosql\",\"database_design\",\"database_performance\"], people = [[\"sql\"],[\"nosql\"],[\"database_design\"],[\"database_performance\"],[\"sql\",\"nosql\"],[\"database_design\",\"database_performance\"],[\"sql\",\"database_performance\"],[\"nosql\",\"database_design\"]]\"",
        "output": "Error: Solution.smallestSufficientTeam() missing 1 required positional argument: 'people'"
      },
      {
        "input": "req_skills = [\"mongodb\",\"postgresql\",\"mysql\",\"oracle\"], people = [[\"mongodb\"],[\"postgresql\"],[\"mysql\"],[\"oracle\"],[\"mongodb\",\"postgresql\"],[\"mysql\",\"oracle\"],[\"mongodb\",\"mysql\"],[\"postgresql\",\"oracle\"],[\"mongodb\",\"postgresql\",\"mysql\"],[\"postgresql\",\"mysql\",\"oracle\"],[\"mongodb\",\"mysql\",\"oracle\"],[\"mongodb\",\"postgresql\",\"oracle\"],[\"mongodb\",\"postgresql\",\"mysql\",\"oracle\"]]",
        "output": "[12]"
      },
      {
        "input": "req_skills = [\"communication\",\"problem_solving\",\"critical_thinking\",\"leadership\"], people = [[\"communication\"],[\"problem_solving\"],[\"critical_thinking\"],[\"leadership\"],[\"communication\",\"problem_solving\"],[\"critical_thinking\",\"leadership\"],[\"communication\",\"critical_thinking\"],[\"problem_solving\",\"leadership\"],[\"communication\",\"problem_solving\",\"critical_thinking\"],[\"communication\",\"problem_solving\",\"leadership\"],[\"communication\",\"critical_thinking\",\"leadership\"],[\"problem_solving\",\"critical_thinking\",\"leadership\"],[\"communication\",\"problem_solving\",\"critical_thinking\",\"leadership\"]] ",
        "output": "[12]"
      },
      {
        "input": "req_skills = [\"web_development\",\"mobile_development\",\"game_development\",\"software_development\"], people = [[\"web_development\"],[\"mobile_development\"],[\"game_development\"],[\"software_development\"],[\"web_development\",\"mobile_development\"],[\"game_development\",\"software_development\"],[\"web_development\",\"game_development\"],[\"mobile_development\",\"software_development\"]]\"",
        "output": "Error: Solution.smallestSufficientTeam() missing 1 required positional argument: 'people'"
      },
      {
        "input": "req_skills = [\"image_processing\",\"natural_language_processing\",\"deep_learning\",\"computer_vision\"], people = [[\"image_processing\"],[\"natural_language_processing\"],[\"deep_learning\"],[\"computer_vision\"],[\"image_processing\",\"natural_language_processing\"],[\"deep_learning\",\"computer_vision\"],[\"image_processing\",\"deep_learning\"],[\"natural_language_processing\",\"computer_vision\"],[\"image_processing\",\"natural_language_processing\",\"deep_learning\"],[\"natural_language_processing\",\"deep_learning\",\"computer_vision\"],[\"image_processing\",\"deep_learning\",\"computer_vision\"],[\"image_processing\",\"natural_language_processing\",\"deep_learning\",\"computer_vision\"]]",
        "output": "[11]"
      },
      {
        "input": "req_skills = [\"java\",\"spring\",\"hibernate\",\"react\"], people = [[\"java\"],[\"spring\"],[\"hibernate\"],[\"react\"],[\"java\",\"spring\"],[\"spring\",\"hibernate\"],[\"hibernate\",\"react\"],[\"java\",\"react\"],[\"java\",\"spring\",\"hibernate\"],[\"java\",\"spring\",\"react\"],[\"spring\",\"hibernate\",\"react\"],[\"java\",\"spring\",\"hibernate\",\"react\"]]",
        "output": "[11]"
      },
      {
        "input": "req_skills = [\"sql\",\"python\",\"frontend\",\"backend\"], people = [[\"sql\"],[\"python\"],[\"frontend\"],[\"backend\"],[\"sql\",\"python\"],[\"frontend\",\"backend\"]]",
        "output": "[5, 4]"
      },
      {
        "input": "req_skills = [\"python\",\"java\",\"c++\",\"ruby\"], people = [[\"python\"],[\"java\"],[\"c++\"],[\"ruby\"],[\"python\",\"java\"],[\"c++\",\"ruby\"],[\"python\",\"c++\"],[\"java\",\"ruby\"]]",
        "output": "[5, 4]"
      },
      {
        "input": "req_skills = [\"aws\",\"azure\",\"gcp\"], people = [[\"aws\",\"azure\"],[\"gcp\"],[\"aws\"],[\"azure\",\"gcp\"],[\"aws\",\"gcp\"],[\"azure\"],[\"aws\",\"azure\",\"gcp\"]]",
        "output": "[6]"
      },
      {
        "input": "req_skills = [\"data_science\",\"data_engineering\",\"ai\",\"ml\"], people = [[\"data_science\"],[\"data_engineering\"],[\"ai\"],[\"ml\"],[\"data_science\",\"data_engineering\"],[\"ai\",\"ml\"],[\"data_science\",\"ai\"],[\"data_engineering\",\"ml\"],[\"data_science\",\"data_engineering\",\"ai\"],[\"data_engineering\",\"ai\",\"ml\"],[\"data_science\",\"ai\",\"ml\"],[\"data_science\",\"data_engineering\",\"ai\",\"ml\"]]",
        "output": "[11]"
      },
      {
        "input": "req_skills = [\"security\",\"testing\",\"projectmanagement\",\"communication\",\"design\"], people = [[\"security\"],[\"testing\"],[\"projectmanagement\"],[\"communication\"],[\"design\"],[\"security\",\"testing\"],[\"projectmanagement\",\"communication\"],[\"design\",\"security\"],[\"testing\",\"communication\"],[\"security\",\"projectmanagement\",\"design\"],[\"testing\",\"communication\",\"design\"]] ",
        "output": "[9, 8]"
      },
      {
        "input": "req_skills = [\"coding\",\"debugging\",\"testing\",\"design\"], people = [[\"coding\",\"debugging\"],[\"testing\"],[\"design\"],[\"coding\",\"testing\"],[\"debugging\",\"design\"]]",
        "output": "[4, 3]"
      },
      {
        "input": "req_skills = [\"photoshop\",\"illustrator\",\"indesign\",\"lightroom\"], people = [[\"photoshop\",\"illustrator\"],[\"indesign\"],[\"lightroom\"],[\"photoshop\",\"indesign\"],[\"illustrator\",\"lightroom\"],[\"photoshop\",\"lightroom\"],[\"indesign\",\"lightroom\"],[\"photoshop\",\"illustrator\",\"indesign\"],[\"illustrator\",\"indesign\",\"lightroom\"],[\"photoshop\",\"indesign\",\"lightroom\"],[\"photoshop\",\"illustrator\",\"lightroom\"],[\"photoshop\",\"illustrator\",\"indesign\",\"lightroom\"]]",
        "output": "[11]"
      },
      {
        "input": "req_skills = [\"algorithm\",\"data-structures\",\"database\",\"networking\",\"os\"], people = [[\"algorithm\",\"data-structures\"],[\"database\"],[\"networking\"],[\"os\"],[\"algorithm\",\"os\"],[\"data-structures\",\"networking\"],[\"database\",\"os\"],[\"algorithm\",\"data-structures\",\"database\"],[\"networking\",\"os\"],[\"algorithm\",\"networking\",\"os\"]]",
        "output": "[8, 7]"
      },
      {
        "input": "req_skills = [\"security\",\"analytics\",\"ml\",\"devops\"], people = [[\"security\"],[\"analytics\"],[\"ml\"],[\"devops\"],[\"security\",\"analytics\"],[\"ml\",\"devops\"],[\"security\",\"ml\"],[\"analytics\",\"devops\"],[\"security\",\"analytics\",\"ml\"],[\"security\",\"analytics\",\"devops\"],[\"security\",\"ml\",\"devops\"],[\"analytics\",\"ml\",\"devops\"],[\"security\",\"analytics\",\"ml\",\"devops\"]]",
        "output": "[12]"
      },
      {
        "input": "req_skills = [\"sql\",\"no_sql\",\"big_data\",\"cloud_computing\"], people = [[\"sql\"],[\"no_sql\"],[\"big_data\"],[\"cloud_computing\"],[\"sql\",\"no_sql\"],[\"big_data\",\"cloud_computing\"],[\"sql\",\"big_data\"],[\"no_sql\",\"cloud_computing\"],[\"sql\",\"no_sql\",\"big_data\"],[\"no_sql\",\"big_data\",\"cloud_computing\"],[\"sql\",\"big_data\",\"cloud_computing\"],[\"sql\",\"no_sql\",\"cloud_computing\"]]",
        "output": "[9, 0]"
      },
      {
        "input": "req_skills = [\"coding\",\"debugging\",\"design\",\"deployment\"], people = [[\"coding\",\"debugging\"],[\"design\"],[\"deployment\"],[\"coding\",\"deployment\"],[\"design\",\"debugging\"]] ",
        "output": "[3, 4]"
      },
      {
        "input": "req_skills = [\"sql\",\"nosql\",\"bigdata\",\"cloud\",\"devops\"], people = [[\"sql\"],[\"nosql\"],[\"bigdata\"],[\"cloud\"],[\"devops\"],[\"sql\",\"nosql\"],[\"bigdata\",\"cloud\"],[\"devops\",\"sql\"],[\"nosql\",\"cloud\"],[\"bigdata\",\"devops\"],[\"sql\",\"cloud\"],[\"nosql\",\"devops\"],[\"bigdata\",\"sql\"],[\"cloud\",\"devops\"],[\"sql\",\"nosql\",\"cloud\"],[\"bigdata\",\"sql\",\"cloud\"],[\"nosql\",\"cloud\",\"devops\"]]",
        "output": "[16, 12]"
      },
      {
        "input": "req_skills = [\"python\",\"cpp\",\"java\",\"javascript\"], people = [[\"python\",\"cpp\"],[\"java\"],[\"javascript\",\"java\"],[\"cpp\",\"python\"],[\"cpp\",\"java\"],[\"javascript\"]]",
        "output": "[2, 0]"
      },
      {
        "input": "req_skills = [\"data_science\",\"machine_learning\",\"deep_learning\"], people = [[\"data_science\"],[\"machine_learning\"],[\"deep_learning\"],[\"data_science\",\"machine_learning\"],[\"machine_learning\",\"deep_learning\"],[\"data_science\",\"deep_learning\"]]\"",
        "output": "Error: Solution.smallestSufficientTeam() missing 1 required positional argument: 'people'"
      },
      {
        "input": "req_skills = [\"coding\",\"debugging\",\"testing\",\"deployment\"], people = [[\"coding\"],[\"debugging\"],[\"testing\"],[\"deployment\"],[\"coding\",\"debugging\"],[\"testing\",\"deployment\"],[\"coding\",\"testing\"],[\"debugging\",\"deployment\"],[\"coding\",\"debugging\",\"testing\"],[\"debugging\",\"testing\",\"deployment\"],[\"coding\",\"debugging\",\"deployment\"],[\"coding\",\"testing\",\"deployment\"],[\"coding\",\"debugging\",\"testing\",\"deployment\"]]",
        "output": "[12]"
      },
      {
        "input": "req_skills = [\"networking\",\"security\",\"project_management\",\"budgeting\"], people = [[\"networking\"],[\"security\"],[\"project_management\"],[\"budgeting\"],[\"networking\",\"security\"],[\"project_management\",\"budgeting\"],[\"networking\",\"project_management\"],[\"security\",\"budgeting\"],[\"networking\",\"project_management\",\"budgeting\"],[\"networking\",\"security\",\"project_management\",\"budgeting\"]]",
        "output": "[9]"
      },
      {
        "input": "req_skills = [\"html\",\"css\",\"javascript\",\"react\",\"nodejs\",\"python\"], people = [[\"html\",\"css\"],[\"javascript\",\"react\"],[\"nodejs\",\"python\"],[\"html\",\"javascript\"],[\"css\",\"python\"],[\"react\",\"nodejs\"],[\"html\",\"css\",\"javascript\",\"react\",\"nodejs\",\"python\"]]\"",
        "output": "Error: Solution.smallestSufficientTeam() missing 1 required positional argument: 'people'"
      },
      {
        "input": "req_skills = [\"architecture\",\"security\",\"performance\",\"usability\",\"coding\"], people = [[\"architecture\",\"security\"],[\"performance\",\"usability\"],[\"coding\"],[\"architecture\",\"performance\"],[\"security\",\"usability\"],[\"performance\",\"coding\"],[\"architecture\",\"usability\",\"coding\"]]\"",
        "output": "Error: Solution.smallestSufficientTeam() missing 1 required positional argument: 'people'"
      },
      {
        "input": "req_skills = [\"ui\",\"ux\",\"product_design\",\"interaction_design\"], people = [[\"ui\",\"ux\"],[\"product_design\"],[\"interaction_design\"],[\"ui\",\"product_design\"],[\"ux\",\"interaction_design\"],[\"ui\",\"ux\",\"product_design\"],[\"product_design\",\"interaction_design\"]]\"",
        "output": "Error: Solution.smallestSufficientTeam() missing 1 required positional argument: 'people'"
      },
      {
        "input": "req_skills = [\"aws\",\"azure\",\"gcp\",\"docker\",\"kubernetes\"], people = [[\"aws\",\"azure\"],[\"gcp\",\"docker\"],[\"kubernetes\"],[\"aws\",\"docker\"],[\"azure\",\"gcp\"],[\"aws\",\"gcp\",\"kubernetes\"]]",
        "output": "[5, 3, 0]"
      },
      {
        "input": "req_skills = [\"coding\",\"testing\",\"documentation\",\"deployment\"], people = [[\"coding\",\"testing\"],[\"documentation\",\"deployment\"],[\"coding\",\"documentation\"],[\"testing\",\"deployment\"],[\"coding\",\"testing\",\"documentation\"],[\"testing\",\"documentation\",\"deployment\"],[\"coding\",\"documentation\",\"deployment\"],[\"coding\",\"testing\",\"deployment\"],[\"coding\",\"testing\",\"documentation\",\"deployment\"]]",
        "output": "[8]"
      },
      {
        "input": "req_skills = [\"html\",\"css\",\"javascript\",\"react\",\"nodejs\"], people = [[\"html\",\"css\"],[\"javascript\"],[\"react\",\"nodejs\"],[\"html\",\"javascript\"],[\"css\",\"nodejs\"],[\"react\"],[\"html\",\"javascript\",\"react\"]] ",
        "output": "[4, 6]"
      },
      {
        "input": "req_skills = [\"product\",\"design\",\"backend\",\"frontend\",\"testing\"], people = [[\"product\"],[\"design\"],[\"backend\"],[\"frontend\"],[\"testing\"],[\"product\",\"design\"],[\"backend\",\"frontend\"],[\"testing\",\"product\"],[\"design\",\"backend\"],[\"frontend\",\"testing\"],[\"product\",\"backend\",\"frontend\",\"testing\"],[\"design\",\"backend\",\"frontend\",\"testing\"]]",
        "output": "[11, 0]"
      },
      {
        "input": "req_skills = [\"docker\",\"kubernetes\",\"aws\",\"gcp\"], people = [[\"docker\"],[\"kubernetes\"],[\"aws\"],[\"gcp\"],[\"docker\",\"kubernetes\"],[\"aws\",\"gcp\"],[\"docker\",\"aws\"],[\"kubernetes\",\"gcp\"]]",
        "output": "[5, 4]"
      },
      {
        "input": "req_skills = [\"linux\",\"windows\",\"macos\",\"unix\"], people = [[\"linux\"],[\"windows\"],[\"macos\"],[\"unix\"],[\"linux\",\"windows\"],[\"macos\",\"unix\"],[\"linux\",\"macos\"],[\"windows\",\"unix\"],[\"linux\",\"unix\"],[\"windows\",\"macos\"],[\"linux\",\"macos\",\"unix\"],[\"linux\",\"windows\",\"unix\"],[\"windows\",\"macos\",\"unix\"],[\"linux\",\"windows\",\"macos\"],[\"linux\",\"windows\",\"macos\",\"unix\"]]",
        "output": "[14]"
      },
      {
        "input": "req_skills = [\"python\",\"javascript\",\"typescript\",\"react\",\"angular\",\"vue\"], people = [[\"python\"],[\"javascript\"],[\"typescript\"],[\"react\"],[\"angular\"],[\"vue\"],[\"python\",\"javascript\"],[\"typescript\",\"react\"],[\"angular\",\"vue\"],[\"python\",\"react\"],[\"javascript\",\"vue\"]] ",
        "output": "[8, 7, 6]"
      },
      {
        "input": "req_skills = [\"html\",\"css\",\"javascript\",\"react\"], people = [[\"html\",\"css\"],[\"javascript\"],[\"react\"],[\"css\",\"javascript\"],[\"html\",\"react\"],[\"html\",\"css\",\"javascript\",\"react\"]]",
        "output": "[5]"
      },
      {
        "input": "req_skills = [\"algorithm\",\"data_structure\",\"design_patterns\",\"software_architecture\"], people = [[\"algorithm\"],[\"data_structure\"],[\"design_patterns\"],[\"software_architecture\"],[\"algorithm\",\"data_structure\"],[\"design_patterns\",\"software_architecture\"],[\"algorithm\",\"design_patterns\"],[\"data_structure\",\"software_architecture\"],[\"algorithm\",\"data_structure\",\"design_patterns\"],[\"algorithm\",\"data_structure\",\"software_architecture\"],[\"algorithm\",\"design_patterns\",\"software_architecture\"],[\"data_structure\",\"design_patterns\",\"software_architecture\"],[\"algorithm\",\"data_structure\",\"design_patterns\",\"software_architecture\"]] ",
        "output": "[12]"
      },
      {
        "input": "req_skills = [\"frontend\",\"backend\",\"devops\",\"qa\"], people = [[\"frontend\"],[\"backend\"],[\"devops\"],[\"qa\"],[\"frontend\",\"backend\"],[\"devops\",\"qa\"],[\"frontend\",\"devops\"],[\"backend\",\"qa\"],[\"frontend\",\"devops\",\"qa\"],[\"backend\",\"devops\",\"qa\"],[\"frontend\",\"backend\",\"devops\"],[\"frontend\",\"backend\",\"qa\"],[\"frontend\",\"backend\",\"devops\",\"qa\"]]",
        "output": "[12]"
      },
      {
        "input": "req_skills = [\"machine-learning\",\"deep-learning\",\"neural-networks\",\"cv\",\"nlp\"], people = [[\"machine-learning\"],[\"deep-learning\"],[\"neural-networks\"],[\"cv\"],[\"nlp\"],[\"machine-learning\",\"deep-learning\"],[\"neural-networks\",\"cv\"],[\"nlp\",\"machine-learning\"],[\"deep-learning\",\"cv\"],[\"neural-networks\",\"nlp\"],[\"machine-learning\",\"cv\"],[\"deep-learning\",\"nlp\"],[\"machine-learning\",\"neural-networks\"],[\"deep-learning\",\"neural-networks\"],[\"cv\",\"nlp\"],[\"machine-learning\",\"deep-learning\",\"cv\"],[\"neural-networks\",\"cv\",\"nlp\"],[\"machine-learning\",\"deep-learning\",\"nlp\"],[\"neural-networks\",\"deep-learning\",\"cv\",\"nlp\"],[\"machine-learning\",\"neural-networks\",\"cv\",\"nlp\"]]",
        "output": "[18, 0]"
      },
      {
        "input": "req_skills = [\"python\",\"java\",\"cpp\"], people = [[\"python\",\"cpp\"],[\"java\"],[\"python\",\"java\"],[\"cpp\"],[\"java\",\"cpp\"]]\"",
        "output": "Error: Solution.smallestSufficientTeam() missing 1 required positional argument: 'people'"
      },
      {
        "input": "req_skills = [\"ai\",\"ml\",\"dl\",\"nlp\",\"cv\"], people = [[\"ai\"],[\"ml\"],[\"dl\"],[\"nlp\"],[\"cv\"],[\"ai\",\"ml\"],[\"ml\",\"dl\"],[\"dl\",\"nlp\"],[\"nlp\",\"cv\"],[\"cv\",\"ai\"],[\"ai\",\"dl\"],[\"ml\",\"nlp\"],[\"ai\",\"cv\"],[\"ml\",\"cv\"],[\"ai\",\"ml\",\"dl\",\"nlp\",\"cv\"]]\"",
        "output": "Error: Solution.smallestSufficientTeam() missing 1 required positional argument: 'people'"
      },
      {
        "input": "req_skills = [\"network_security\",\"cyber_security\",\"penetration_testing\",\"vulnerability_assessment\"], people = [[\"network_security\"],[\"cyber_security\"],[\"penetration_testing\"],[\"vulnerability_assessment\"],[\"network_security\",\"cyber_security\"],[\"penetration_testing\",\"vulnerability_assessment\"],[\"network_security\",\"penetration_testing\"],[\"cyber_security\",\"vulnerability_assessment\"],[\"network_security\",\"vulnerability_assessment\"],[\"cyber_security\",\"penetration_testing\"],[\"network_security\",\"cyber_security\",\"penetration_testing\",\"vulnerability_assessment\"]]",
        "output": "[10]"
      },
      {
        "input": "req_skills = [\"front_end\",\"back_end\",\"database\",\"cloud_services\"], people = [[\"front_end\"],[\"back_end\"],[\"database\"],[\"cloud_services\"],[\"front_end\",\"back_end\"],[\"database\",\"cloud_services\"],[\"front_end\",\"database\"],[\"back_end\",\"cloud_services\"],[\"front_end\",\"back_end\",\"database\"],[\"front_end\",\"back_end\",\"cloud_services\"],[\"front_end\",\"database\",\"cloud_services\"],[\"back_end\",\"database\",\"cloud_services\"],[\"front_end\",\"back_end\",\"database\",\"cloud_services\"]] ",
        "output": "[12]"
      },
      {
        "input": "req_skills = [\"data_science\",\"machine_learning\",\"deep_learning\",\"computer_vision\"], people = [[\"data_science\"],[\"machine_learning\"],[\"deep_learning\"],[\"computer_vision\"],[\"machine_learning\",\"deep_learning\"],[\"data_science\",\"computer_vision\"],[\"data_science\",\"machine_learning\"],[\"data_science\",\"deep_learning\"],[\"machine_learning\",\"computer_vision\"],[\"deep_learning\",\"computer_vision\"]]",
        "output": "[9, 6]"
      },
      {
        "input": "req_skills = [\"python\",\"javascript\",\"html\",\"css\",\"react\",\"nodejs\"], people = [[\"python\"],[\"javascript\"],[\"html\"],[\"css\"],[\"react\"],[\"nodejs\"],[\"python\",\"javascript\"],[\"html\",\"css\"],[\"react\",\"nodejs\"],[\"python\",\"html\",\"css\"],[\"javascript\",\"react\",\"nodejs\"]]",
        "output": "[10, 9]"
      },
      {
        "input": "req_skills = [\"machine_learning\",\"deep_learning\",\"cv\",\"nlp\"], people = [[\"machine_learning\",\"deep_learning\"],[\"cv\"],[\"nlp\"],[\"deep_learning\",\"cv\"],[\"machine_learning\",\"nlp\"],[\"deep_learning\",\"nlp\",\"cv\"],[\"machine_learning\",\"deep_learning\",\"cv\",\"nlp\"]]",
        "output": "[6]"
      },
      {
        "input": "req_skills = [\"ux\",\"ui\",\"product\",\"design\",\"marketing\"], people = [[\"ux\"],[\"ui\"],[\"product\"],[\"design\"],[\"marketing\"],[\"ux\",\"ui\"],[\"product\",\"design\"],[\"marketing\",\"ux\"],[\"ui\",\"product\"],[\"design\",\"marketing\"],[\"ux\",\"product\"],[\"ui\",\"marketing\"],[\"product\",\"design\",\"marketing\"],[\"ux\",\"ui\",\"design\"],[\"ui\",\"product\",\"design\"],[\"ux\",\"product\",\"marketing\"],[\"ux\",\"ui\",\"product\",\"design\",\"marketing\"]]",
        "output": "[16]"
      },
      {
        "input": "req_skills = [\"python\",\"javascript\",\"cpp\",\"go\"], people = [[\"python\",\"cpp\"],[\"javascript\"],[\"go\"],[\"python\",\"javascript\",\"go\"],[\"cpp\",\"javascript\"]] ",
        "output": "[3, 0]"
      }
    ]
  },
  {
    "id": 140,
    "difficulty": "Hard",
    "tags": [
      "Trie",
      "Memoization",
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking"
    ],
    "problemDescription": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n\u00a0\nExample 1:\n\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n\nExample 2:\n\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\nExample 3:\n\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 20\n1 <= wordDict.length <= 1000\n1 <= wordDict[i].length <= 10\ns and wordDict[i] consist of only lowercase English letters.\nAll the strings of wordDict are unique.\nInput is generated in a way that the length of the answer doesn't exceed\u00a0105.\n\n",
    "starterCode": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "s = \"aaaaaaa\", wordDict = [\"aa\",\"aaa\"]",
        "output": "['aa aa aaa', 'aa aaa aa', 'aaa aa aa']"
      },
      {
        "input": "s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]",
        "output": "['pine apple pen apple', 'pine applepen apple', 'pineapple pen apple']"
      },
      {
        "input": "s = \"a\", wordDict = [\"a\"]",
        "output": "['a']"
      },
      {
        "input": "s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]",
        "output": "['cat sand dog', 'cats and dog']"
      },
      {
        "input": "s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
        "output": "[]"
      },
      {
        "input": "s = \"abcd\", wordDict = [\"a\",\"abc\",\"b\",\"cd\"]",
        "output": "['a b cd']"
      },
      {
        "input": "s = \"leetcodeleet\", wordDict = [\"leet\",\"code\"]",
        "output": "['leet code leet']"
      },
      {
        "input": "s = \"nevergonnagiveyouup\", wordDict = [\"never\",\"gonna\",\"give\",\"you\",\"up\",\"nevergonna\",\"gonnagive\",\"onnagive\",\"nnagive\",\"nagive\",\"agive\",\"giveu\",\"giveyo\",\"giveyou\",\"giveyoup\",\"giveyoupu\",\"giveyoupup\",\"youpup\",\"oupup\",\"pupup\",\"upup\",\"pup\",\"up\"]",
        "output": "['never gonna give you up', 'never gonna giveyou up', 'never gonnagive you up', 'nevergonna give you up', 'nevergonna giveyou up']"
      },
      {
        "input": "s = \"ababababababababababababababababababababababababababababababababababababab\", wordDict = [\"ab\",\"aba\",\"bab\",\"baba\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"thisproblemisverydifficult\", wordDict = [\"this\",\"problem\",\"is\",\"very\",\"difficult\",\"difficul\",\"icult\"]",
        "output": "['this problem is very difficult']"
      },
      {
        "input": "s = \"exampleofquestion\", wordDict = [\"example\",\"of\",\"question\",\"ex\",\"ample\",\"que\",\"stion\",\"exam\",\"ple\",\"quest\",\"uest\",\"ion\"]",
        "output": "['ex ample of que stion', 'ex ample of quest ion', 'ex ample of question', 'exam ple of que stion', 'exam ple of quest ion', 'exam ple of question', 'example of que stion', 'example of quest ion', 'example of question']"
      },
      {
        "input": "s = \"amazingrace\", wordDict = [\"amazing\",\"race\",\"amaz\",\"ing\",\"zing\",\"ace\",\"rac\"]",
        "output": "['amaz ing race', 'amazing race']"
      },
      {
        "input": "s = \"wordbreakproblem\", wordDict = [\"word\",\"break\",\"problem\",\"wordbreak\",\"breakprob\",\"lem\",\"pro\",\"b\",\"reak\",\"prob\",\"lem\",\"wordbreakprob\"]",
        "output": "['word b reak pro b lem', 'word b reak prob lem', 'word b reak problem', 'word break pro b lem', 'word break prob lem', 'word break problem', 'word breakprob lem', 'wordbreak pro b lem', 'wordbreak prob lem', 'wordbreak problem', 'wordbreakprob lem']"
      },
      {
        "input": "s = \"skyscraper\", wordDict = [\"sky\",\"scraper\",\"sky\",\"scrap\",\"er\"]",
        "output": "['sky scrap er', 'sky scraper']"
      },
      {
        "input": "s = \"wordbreakproblem\", wordDict = [\"word\",\"break\",\"problem\",\"wordbreak\",\"prob\",\"lem\"]",
        "output": "['word break prob lem', 'word break problem', 'wordbreak prob lem', 'wordbreak problem']"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababababababababab\", wordDict = [\"a\",\"ab\",\"bab\",\"aba\",\"baba\",\"abab\",\"babab\",\"bababa\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefgabcdefgabcdefg\", wordDict = [\"abc\",\"defg\",\"abcd\",\"efgabc\",\"abcdefg\",\"fgabcde\",\"abcde\",\"bcdefg\",\"def\",\"abcfg\"]",
        "output": "['abc defg abc defg abc defg abc defg abc defg', 'abc defg abc defg abc defg abc defg abcdefg', 'abc defg abc defg abc defg abcd efgabc defg', 'abc defg abc defg abc defg abcdefg abc defg', 'abc defg abc defg abc defg abcdefg abcdefg', 'abc defg abc defg abcd efgabc defg abc defg', 'abc defg abc defg abcd efgabc defg abcdefg', 'abc defg abc defg abcdefg abc defg abc defg', 'abc defg abc defg abcdefg abc defg abcdefg', 'abc defg abc defg abcdefg abcd efgabc defg', 'abc defg abc defg abcdefg abcdefg abc defg', 'abc defg abc defg abcdefg abcdefg abcdefg', 'abc defg abcd efgabc defg abc defg abc defg', 'abc defg abcd efgabc defg abc defg abcdefg', 'abc defg abcd efgabc defg abcd efgabc defg', 'abc defg abcd efgabc defg abcdefg abc defg', 'abc defg abcd efgabc defg abcdefg abcdefg', 'abc defg abcdefg abc defg abc defg abc defg', 'abc defg abcdefg abc defg abc defg abcdefg', 'abc defg abcdefg abc defg abcd efgabc defg', 'abc defg abcdefg abc defg abcdefg abc defg', 'abc defg abcdefg abc defg abcdefg abcdefg', 'abc defg abcdefg abcd efgabc defg abc defg', 'abc defg abcdefg abcd efgabc defg abcdefg', 'abc defg abcdefg abcdefg abc defg abc defg', 'abc defg abcdefg abcdefg abc defg abcdefg', 'abc defg abcdefg abcdefg abcd efgabc defg', 'abc defg abcdefg abcdefg abcdefg abc defg', 'abc defg abcdefg abcdefg abcdefg abcdefg', 'abcd efgabc defg abc defg abc defg abc defg', 'abcd efgabc defg abc defg abc defg abcdefg', 'abcd efgabc defg abc defg abcd efgabc defg', 'abcd efgabc defg abc defg abcdefg abc defg', 'abcd efgabc defg abc defg abcdefg abcdefg', 'abcd efgabc defg abcd efgabc defg abc defg', 'abcd efgabc defg abcd efgabc defg abcdefg', 'abcd efgabc defg abcdefg abc defg abc defg', 'abcd efgabc defg abcdefg abc defg abcdefg', 'abcd efgabc defg abcdefg abcd efgabc defg', 'abcd efgabc defg abcdefg abcdefg abc defg', 'abcd efgabc defg abcdefg abcdefg abcdefg', 'abcdefg abc defg abc defg abc defg abc defg', 'abcdefg abc defg abc defg abc defg abcdefg', 'abcdefg abc defg abc defg abcd efgabc defg', 'abcdefg abc defg abc defg abcdefg abc defg', 'abcdefg abc defg abc defg abcdefg abcdefg', 'abcdefg abc defg abcd efgabc defg abc defg', 'abcdefg abc defg abcd efgabc defg abcdefg', 'abcdefg abc defg abcdefg abc defg abc defg', 'abcdefg abc defg abcdefg abc defg abcdefg', 'abcdefg abc defg abcdefg abcd efgabc defg', 'abcdefg abc defg abcdefg abcdefg abc defg', 'abcdefg abc defg abcdefg abcdefg abcdefg', 'abcdefg abcd efgabc defg abc defg abc defg', 'abcdefg abcd efgabc defg abc defg abcdefg', 'abcdefg abcd efgabc defg abcd efgabc defg', 'abcdefg abcd efgabc defg abcdefg abc defg', 'abcdefg abcd efgabc defg abcdefg abcdefg', 'abcdefg abcdefg abc defg abc defg abc defg', 'abcdefg abcdefg abc defg abc defg abcdefg', 'abcdefg abcdefg abc defg abcd efgabc defg', 'abcdefg abcdefg abc defg abcdefg abc defg', 'abcdefg abcdefg abc defg abcdefg abcdefg', 'abcdefg abcdefg abcd efgabc defg abc defg', 'abcdefg abcdefg abcd efgabc defg abcdefg', 'abcdefg abcdefg abcdefg abc defg abc defg', 'abcdefg abcdefg abcdefg abc defg abcdefg', 'abcdefg abcdefg abcdefg abcd efgabc defg', 'abcdefg abcdefg abcdefg abcdefg abc defg', 'abcdefg abcdefg abcdefg abcdefg abcdefg']"
      },
      {
        "input": "s = \"ababababababababababababababababababababababababababababababababababababab\", wordDict = [\"ab\",\"aba\",\"bab\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"anagramproblem\", wordDict = [\"anagram\",\"anagramprob\",\"gram\",\"prob\",\"lem\",\"problem\",\"ana\",\"gramprob\",\"anag\",\"ramprob\",\"rampro\",\"an\",\"grampro\",\"gramprob\"]",
        "output": "['ana gram prob lem', 'ana gram problem', 'ana gramprob lem', 'anag ramprob lem', 'anagram prob lem', 'anagram problem', 'anagramprob lem']"
      },
      {
        "input": "s = \"amazingrace\", wordDict = [\"amazing\",\"race\",\"amazingr\",\"acer\",\"age\",\"maze\",\"rang\",\"racer\",\"ace\",\"zing\"]",
        "output": "['amazing race', 'amazingr ace']"
      },
      {
        "input": "s = \"thisproblemiswaytoolongtobreakdownintosmallervariables\", wordDict = [\"this\",\"problem\",\"is\",\"way\",\"too\",\"long\",\"to\",\"be\",\"broken\",\"down\",\"into\",\"smaller\",\"variables\",\"break\",\"down\",\"small\"]",
        "output": "['this problem is way too long to break down into smaller variables']"
      },
      {
        "input": "s = \"mississippi\", wordDict = [\"mis\",\"is\",\"sip\",\"issi\",\"ppi\",\"ippi\",\"pi\",\"pippi\",\"miss\",\"sipi\"]",
        "output": "['miss is sip pi', 'miss issi ppi']"
      },
      {
        "input": "s = \"quickbrownfoxjumpsoverthelazydog\", wordDict = [\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"the\",\"lazy\",\"dog\",\"quickbrown\",\"brownfox\",\"jumpsover\",\"overthe\",\"the\",\"lazydog\"]",
        "output": "['quick brown fox jumps over the lazy dog', 'quick brown fox jumps over the lazydog', 'quick brown fox jumps overthe lazy dog', 'quick brown fox jumps overthe lazydog', 'quick brown fox jumpsover the lazy dog', 'quick brown fox jumpsover the lazydog', 'quick brownfox jumps over the lazy dog', 'quick brownfox jumps over the lazydog', 'quick brownfox jumps overthe lazy dog', 'quick brownfox jumps overthe lazydog', 'quick brownfox jumpsover the lazy dog', 'quick brownfox jumpsover the lazydog', 'quickbrown fox jumps over the lazy dog', 'quickbrown fox jumps over the lazydog', 'quickbrown fox jumps overthe lazy dog', 'quickbrown fox jumps overthe lazydog', 'quickbrown fox jumpsover the lazy dog', 'quickbrown fox jumpsover the lazydog']"
      },
      {
        "input": "s = \"abcd\", wordDict = [\"a\",\"ab\",\"abc\",\"abcd\",\"b\",\"bc\",\"bcd\",\"c\",\"cd\",\"d\"]",
        "output": "['a b c d', 'a b cd', 'a bc d', 'a bcd', 'ab c d', 'ab cd', 'abc d', 'abcd']"
      },
      {
        "input": "s = \"themanran\", wordDict = [\"the\",\"ran\",\"man\",\" Marathon\"]",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"wordbreakproblem\", wordDict = [\"word\",\"break\",\"breakproblem\",\"problem\",\"wordbreak\",\"breakpro\",\"lem\"]",
        "output": "['word break problem', 'word breakproblem', 'wordbreak problem']"
      },
      {
        "input": "s = \"amazingprogramminglanguage\", wordDict = [\"amazing\",\"programming\",\"language\",\"pro\",\"gram\",\"ming\",\"amaz\",\"ing\",\"za\",\"zing\"]",
        "output": "['amaz ing pro gram ming language', 'amaz ing programming language', 'amazing pro gram ming language', 'amazing programming language']"
      },
      {
        "input": "s = \"programmingisfun\", wordDict = [\"programming\",\"is\",\"fun\",\"pro\",\"gram\",\"ming\",\"gramming\",\"isfun\",\"progra\"]",
        "output": "['pro gram ming is fun', 'pro gram ming isfun', 'pro gramming is fun', 'pro gramming isfun', 'programming is fun', 'programming isfun']"
      },
      {
        "input": "s = \"supercalifragilisticexpialidocious\", wordDict = [\"super\",\"cali\",\"fragi\",\"listic\",\"expi\",\"ali\",\"docious\",\"supercal\",\"ifragilisticexpi\",\"alidocious\",\"frag\",\"listicexpialido\",\"cious\"]",
        "output": "['super cali fragi listic expi ali docious', 'super cali fragi listic expi alidocious', 'super cali fragi listicexpialido cious', 'supercal ifragilisticexpi ali docious', 'supercal ifragilisticexpi alidocious']"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcd\", wordDict = [\"a\",\"b\",\"c\",\"d\",\"ab\",\"bc\",\"cd\",\"abc\",\"bcd\",\"abcd\",\"abdc\",\"abcdc\",\"abcde\",\"abcdabcd\",\"abcdabc\",\"abcdab\",\"abcdabcdabc\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"optimization\", wordDict = [\"opt\",\"im\",\"iza\",\"tio\",\"n\",\"on\",\"optim\",\"optimiz\",\"optimiza\",\"ization\"]",
        "output": "['opt im iza tio n', 'opt im ization', 'optim iza tio n', 'optim ization', 'optimiza tio n']"
      },
      {
        "input": "s = \"theprogramminglanguage\", wordDict = [\"the\",\"pro\",\"gram\",\"ming\",\"lan\",\"guage\"]",
        "output": "['the pro gram ming lan guage']"
      },
      {
        "input": "s = \"thisisatest\", wordDict = [\"this\",\"is\",\"a\",\"test\",\"thisis\",\"ate\",\"st\"]",
        "output": "['this is a test', 'this is ate st', 'thisis a test', 'thisis ate st']"
      },
      {
        "input": "s = \"backtrackingalgorithm\", wordDict = [\"back\", \"tracking\", \"algorithm\", \"backtrack\", \"ingalgo\", \"rithm\", \"backtracki\", \"ngalgor\", \"thmalgo\", \"rithmal\", \"backtrac\", \"kingalg\", \"thm\", \"algo\", \"thmalgo\", \"backtrackin\", \"backtrackinga\", \"backtrackingal\", \"backtrackingalg\", \"backtrackingalgo\"]",
        "output": "['back tracking algo rithm', 'back tracking algorithm', 'backtrack ingalgo rithm', 'backtrackingalgo rithm']"
      },
      {
        "input": "s = \"thepinkquickbrownfoxjumpsoverthelazydog\", wordDict = [\"the\",\"pink\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"pinkquick\",\"brownfox\",\"overthe\",\"lazydog\"]",
        "output": "['the pink quick brown fox jumps over the lazy dog', 'the pink quick brown fox jumps over the lazydog', 'the pink quick brown fox jumps overthe lazy dog', 'the pink quick brown fox jumps overthe lazydog', 'the pink quick brownfox jumps over the lazy dog', 'the pink quick brownfox jumps over the lazydog', 'the pink quick brownfox jumps overthe lazy dog', 'the pink quick brownfox jumps overthe lazydog', 'the pinkquick brown fox jumps over the lazy dog', 'the pinkquick brown fox jumps over the lazydog', 'the pinkquick brown fox jumps overthe lazy dog', 'the pinkquick brown fox jumps overthe lazydog', 'the pinkquick brownfox jumps over the lazy dog', 'the pinkquick brownfox jumps over the lazydog', 'the pinkquick brownfox jumps overthe lazy dog', 'the pinkquick brownfox jumps overthe lazydog']"
      },
      {
        "input": "s = \"thequickbrownfoxjumpsoverthelazydog\", wordDict = [\"the\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"quickbrown\",\"brownfox\",\"foxjump\",\"jumpsover\",\"overthe\",\"thelazy\"]",
        "output": "['the quick brown fox jumps over the lazy dog', 'the quick brown fox jumps over thelazy dog', 'the quick brown fox jumps overthe lazy dog', 'the quick brown fox jumpsover the lazy dog', 'the quick brown fox jumpsover thelazy dog', 'the quick brownfox jumps over the lazy dog', 'the quick brownfox jumps over thelazy dog', 'the quick brownfox jumps overthe lazy dog', 'the quick brownfox jumpsover the lazy dog', 'the quick brownfox jumpsover thelazy dog', 'the quickbrown fox jumps over the lazy dog', 'the quickbrown fox jumps over thelazy dog', 'the quickbrown fox jumps overthe lazy dog', 'the quickbrown fox jumpsover the lazy dog', 'the quickbrown fox jumpsover thelazy dog']"
      },
      {
        "input": "s = \"sololeveltwo\", wordDict = [\"sol\",\"olev\",\"el\",\"elv\",\"ello\",\"lev\",\"leve\",\"vel\",\"velt\",\"velto\",\"veltwo\",\"o\",\"l\",\"v\",\"t\",\"w\",\"two\",\"to\",\"level\",\"levelt\",\"levelto\",\"leveltwo\"]",
        "output": "['sol o lev el t w o', 'sol o lev el two', 'sol o leve l t w o', 'sol o leve l two', 'sol o level t w o', 'sol o level two', 'sol o levelt w o', 'sol o leveltwo', 'sol olev el t w o', 'sol olev el two']"
      },
      {
        "input": "s = \"thisisjustasillywordtobreak\", wordDict = [\"this\",\"is\",\"just\",\"a\",\"silly\",\"word\",\"to\",\"break\",\"sillyword\",\"wordtobreak\"]",
        "output": "['this is just a silly word to break', 'this is just a silly wordtobreak', 'this is just a sillyword to break']"
      },
      {
        "input": "s = \"thisisaverylongsentencethatweneedtosplit\", wordDict = [\"this\", \"is\", \"a\", \"very\", \"long\", \"sentence\", \"that\", \"we\", \"need\", \"to\", \"split\", \"verylong\", \"sentencewe\", \"needtos\", \"tosplit\", \"thisisavery\"]",
        "output": "['this is a very long sentence that we need to split', 'this is a very long sentence that we need tosplit', 'this is a verylong sentence that we need to split', 'this is a verylong sentence that we need tosplit', 'thisisavery long sentence that we need to split', 'thisisavery long sentence that we need tosplit']"
      },
      {
        "input": "s = \"solvetheproblem\", wordDict = [\"solve\",\"the\",\"problem\",\"sol\",\"ve\",\"prob\",\"lem\",\"othe\",\"probem\",\"solvethe\",\"heproblem\"]",
        "output": "['sol ve the prob lem', 'sol ve the problem', 'solve the prob lem', 'solve the problem', 'solvethe prob lem', 'solvethe problem']"
      },
      {
        "input": "s = \"supercalifragilisticexpialidocious\", wordDict = [\"super\",\"cali\",\"fragilistic\",\"expiali\",\"docious\",\"frag\",\"ilisti\",\"c\",\"ex\",\"piali\",\"doc\",\"io\",\"us\",\"superca\",\"li\",\"frag\",\"listic\",\"expi\",\"ali\",\"do\",\"cious\"]",
        "output": "['super c ali frag ilisti c ex piali do c io us', 'super c ali frag ilisti c ex piali do cious', 'super c ali frag ilisti c ex piali doc io us', 'super c ali frag ilisti c ex piali docious', 'super c ali frag ilisti c expi ali do c io us', 'super c ali frag ilisti c expi ali do cious', 'super c ali frag ilisti c expi ali doc io us', 'super c ali frag ilisti c expi ali docious', 'super c ali frag ilisti c expiali do c io us', 'super c ali frag ilisti c expiali do cious', 'super c ali frag ilisti c expiali doc io us', 'super c ali frag ilisti c expiali docious', 'super c ali fragilistic ex piali do c io us', 'super c ali fragilistic ex piali do cious', 'super c ali fragilistic ex piali doc io us', 'super c ali fragilistic ex piali docious', 'super c ali fragilistic expi ali do c io us', 'super c ali fragilistic expi ali do cious', 'super c ali fragilistic expi ali doc io us', 'super c ali fragilistic expi ali docious', 'super c ali fragilistic expiali do c io us', 'super c ali fragilistic expiali do cious', 'super c ali fragilistic expiali doc io us', 'super c ali fragilistic expiali docious', 'super cali frag ilisti c ex piali do c io us', 'super cali frag ilisti c ex piali do cious', 'super cali frag ilisti c ex piali doc io us', 'super cali frag ilisti c ex piali docious', 'super cali frag ilisti c expi ali do c io us', 'super cali frag ilisti c expi ali do cious', 'super cali frag ilisti c expi ali doc io us', 'super cali frag ilisti c expi ali docious', 'super cali frag ilisti c expiali do c io us', 'super cali frag ilisti c expiali do cious', 'super cali frag ilisti c expiali doc io us', 'super cali frag ilisti c expiali docious', 'super cali fragilistic ex piali do c io us', 'super cali fragilistic ex piali do cious', 'super cali fragilistic ex piali doc io us', 'super cali fragilistic ex piali docious', 'super cali fragilistic expi ali do c io us', 'super cali fragilistic expi ali do cious', 'super cali fragilistic expi ali doc io us', 'super cali fragilistic expi ali docious', 'super cali fragilistic expiali do c io us', 'super cali fragilistic expiali do cious', 'super cali fragilistic expiali doc io us', 'super cali fragilistic expiali docious', 'superca li frag ilisti c ex piali do c io us', 'superca li frag ilisti c ex piali do cious', 'superca li frag ilisti c ex piali doc io us', 'superca li frag ilisti c ex piali docious', 'superca li frag ilisti c expi ali do c io us', 'superca li frag ilisti c expi ali do cious', 'superca li frag ilisti c expi ali doc io us', 'superca li frag ilisti c expi ali docious', 'superca li frag ilisti c expiali do c io us', 'superca li frag ilisti c expiali do cious', 'superca li frag ilisti c expiali doc io us', 'superca li frag ilisti c expiali docious', 'superca li fragilistic ex piali do c io us', 'superca li fragilistic ex piali do cious', 'superca li fragilistic ex piali doc io us', 'superca li fragilistic ex piali docious', 'superca li fragilistic expi ali do c io us', 'superca li fragilistic expi ali do cious', 'superca li fragilistic expi ali doc io us', 'superca li fragilistic expi ali docious', 'superca li fragilistic expiali do c io us', 'superca li fragilistic expiali do cious', 'superca li fragilistic expiali doc io us', 'superca li fragilistic expiali docious']"
      },
      {
        "input": "s = \"leetcode\", wordDict = [\"leet\",\"code\",\"le\",\"et\",\"code\",\"cod\",\"leetco\"]",
        "output": "['le et code', 'leet code']"
      },
      {
        "input": "s = \"thelongestwordisinthisdictionary\", wordDict = [\"the\",\"longest\",\"word\",\"is\",\"in\",\"this\",\"dictionary\"]",
        "output": "['the longest word is in this dictionary']"
      },
      {
        "input": "s = \"backtracking\", wordDict = [\"back\",\"track\",\"ing\",\"backtrack\",\"backtracking\",\"tra\",\"ck\",\"bac\",\"king\"]",
        "output": "['back tra ck ing', 'back track ing', 'backtrack ing', 'backtracking']"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\", wordDict = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaa\",\"aaaaaaaa\",\"aaaaaaaaa\",\"aaaaaaaaaa\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"thethreefishes\", wordDict = [\"the\",\"three\",\"threefish\",\"fish\",\"fishes\"]",
        "output": "['the three fishes']"
      },
      {
        "input": "s = \"abcd\", wordDict = [\"a\",\"b\",\"c\",\"d\",\"ab\",\"bc\",\"cd\",\"abcd\"]",
        "output": "['a b c d', 'a b cd', 'a bc d', 'ab c d', 'ab cd', 'abcd']"
      },
      {
        "input": "s = \"canadaday\", wordDict = [\"can\",\"ada\",\"day\",\"canada\",\"anada\",\"aday\"]",
        "output": "['can ada day', 'canada day']"
      },
      {
        "input": "s = \"ambiguityindictionary\", wordDict = [\"ambi\", \"biguity\", \"in\", \"dictionary\", \"ambigui\", \"tity\", \"uity\", \"amb\", \"uityin\", \"ityinden\", \"uityindict\", \"uityindicti\", \"uityindiction\", \"uityindictiona\", \"uityindictionar\", \"uityindictionary\"]",
        "output": "[]"
      },
      {
        "input": "s = \"wordbreakproblem\", wordDict = [\"word\", \"break\", \"problem\", \"wordbreak\", \"pro\", \"blem\", \"wordbreakpro\", \"breakpro\", \"lemproblem\"]",
        "output": "['word break pro blem', 'word break problem', 'word breakpro blem', 'wordbreak pro blem', 'wordbreak problem', 'wordbreakpro blem']"
      },
      {
        "input": "s = \"optimizethiscode\", wordDict = [\"optimize\", \"this\", \"code\", \"opt\", \"imize\", \"thisco\", \"deopt\", \"mizethis\", \"ethiscode\", \"optimizethis\", \"opti\", \"mize\", \"thisc\"]",
        "output": "['opt imize this code', 'opti mize this code', 'opti mizethis code', 'optimize this code', 'optimizethis code']"
      },
      {
        "input": "s = \"abababababababababababababab\", wordDict = [\"aba\",\"abab\",\"ababa\",\"bab\",\"babab\",\"bababa\"]",
        "output": "['aba bab aba bab aba bab aba bab abab', 'aba bab aba bab aba bab abab aba bab', 'aba bab aba bab aba bab ababa babab', 'aba bab aba bab aba babab aba babab', 'aba bab aba bab aba babab abab abab', 'aba bab aba bab aba babab ababa bab', 'aba bab aba bab aba bababa bab abab', 'aba bab aba bab abab aba bab aba bab', 'aba bab aba bab abab aba babab abab', 'aba bab aba bab abab aba bababa bab', 'aba bab aba bab abab abab aba babab', 'aba bab aba bab abab abab abab abab', 'aba bab aba bab abab abab ababa bab', 'aba bab aba bab abab ababa bab abab', 'aba bab aba bab ababa bab aba babab', 'aba bab aba bab ababa bab abab abab', 'aba bab aba bab ababa bab ababa bab', 'aba bab aba bab ababa babab aba bab', 'aba bab aba bab ababa bababa babab', 'aba bab aba babab aba bab aba babab', 'aba bab aba babab aba bab abab abab', 'aba bab aba babab aba bab ababa bab', 'aba bab aba babab aba babab aba bab', 'aba bab aba babab aba bababa babab', 'aba bab aba babab abab aba bab abab', 'aba bab aba babab abab abab aba bab', 'aba bab aba babab abab ababa babab', 'aba bab aba babab ababa bab aba bab', 'aba bab aba babab ababa babab abab', 'aba bab aba babab ababa bababa bab', 'aba bab aba bababa bab aba bab abab', 'aba bab aba bababa bab abab aba bab', 'aba bab aba bababa bab ababa babab', 'aba bab aba bababa babab aba babab', 'aba bab aba bababa babab abab abab', 'aba bab aba bababa babab ababa bab', 'aba bab aba bababa bababa bab abab', 'aba bab abab aba bab aba bab aba bab', 'aba bab abab aba bab aba babab abab', 'aba bab abab aba bab aba bababa bab', 'aba bab abab aba bab abab aba babab', 'aba bab abab aba bab abab abab abab', 'aba bab abab aba bab abab ababa bab', 'aba bab abab aba bab ababa bab abab', 'aba bab abab aba babab aba bab abab', 'aba bab abab aba babab abab aba bab', 'aba bab abab aba babab ababa babab', 'aba bab abab aba bababa bab aba bab', 'aba bab abab aba bababa babab abab', 'aba bab abab aba bababa bababa bab', 'aba bab abab abab aba bab aba babab', 'aba bab abab abab aba bab abab abab', 'aba bab abab abab aba bab ababa bab', 'aba bab abab abab aba babab aba bab', 'aba bab abab abab aba bababa babab', 'aba bab abab abab abab aba bab abab', 'aba bab abab abab abab abab aba bab', 'aba bab abab abab abab ababa babab', 'aba bab abab abab ababa bab aba bab', 'aba bab abab abab ababa babab abab', 'aba bab abab abab ababa bababa bab', 'aba bab abab ababa bab aba bab abab', 'aba bab abab ababa bab abab aba bab', 'aba bab abab ababa bab ababa babab', 'aba bab abab ababa babab aba babab', 'aba bab abab ababa babab abab abab', 'aba bab abab ababa babab ababa bab', 'aba bab abab ababa bababa bab abab', 'aba bab ababa bab aba bab aba babab', 'aba bab ababa bab aba bab abab abab', 'aba bab ababa bab aba bab ababa bab', 'aba bab ababa bab aba babab aba bab', 'aba bab ababa bab aba bababa babab', 'aba bab ababa bab abab aba bab abab', 'aba bab ababa bab abab abab aba bab', 'aba bab ababa bab abab ababa babab', 'aba bab ababa bab ababa bab aba bab', 'aba bab ababa bab ababa babab abab', 'aba bab ababa bab ababa bababa bab', 'aba bab ababa babab aba bab aba bab', 'aba bab ababa babab aba babab abab', 'aba bab ababa babab aba bababa bab', 'aba bab ababa babab abab aba babab', 'aba bab ababa babab abab abab abab', 'aba bab ababa babab abab ababa bab', 'aba bab ababa babab ababa bab abab', 'aba bab ababa bababa bab aba babab', 'aba bab ababa bababa bab abab abab', 'aba bab ababa bababa bab ababa bab', 'aba bab ababa bababa babab aba bab', 'aba bab ababa bababa bababa babab', 'aba babab aba bab aba bab aba babab', 'aba babab aba bab aba bab abab abab', 'aba babab aba bab aba bab ababa bab', 'aba babab aba bab aba babab aba bab', 'aba babab aba bab aba bababa babab', 'aba babab aba bab abab aba bab abab', 'aba babab aba bab abab abab aba bab', 'aba babab aba bab abab ababa babab', 'aba babab aba bab ababa bab aba bab', 'aba babab aba bab ababa babab abab', 'aba babab aba bab ababa bababa bab', 'aba babab aba babab aba bab aba bab', 'aba babab aba babab aba babab abab', 'aba babab aba babab aba bababa bab', 'aba babab aba babab abab aba babab', 'aba babab aba babab abab abab abab', 'aba babab aba babab abab ababa bab', 'aba babab aba babab ababa bab abab', 'aba babab aba bababa bab aba babab', 'aba babab aba bababa bab abab abab', 'aba babab aba bababa bab ababa bab', 'aba babab aba bababa babab aba bab', 'aba babab aba bababa bababa babab', 'aba babab abab aba bab aba bab abab', 'aba babab abab aba bab abab aba bab', 'aba babab abab aba bab ababa babab', 'aba babab abab aba babab aba babab', 'aba babab abab aba babab abab abab', 'aba babab abab aba babab ababa bab', 'aba babab abab aba bababa bab abab', 'aba babab abab abab aba bab aba bab', 'aba babab abab abab aba babab abab', 'aba babab abab abab aba bababa bab', 'aba babab abab abab abab aba babab', 'aba babab abab abab abab abab abab', 'aba babab abab abab abab ababa bab', 'aba babab abab abab ababa bab abab', 'aba babab abab ababa bab aba babab', 'aba babab abab ababa bab abab abab', 'aba babab abab ababa bab ababa bab', 'aba babab abab ababa babab aba bab', 'aba babab abab ababa bababa babab', 'aba babab ababa bab aba bab aba bab', 'aba babab ababa bab aba babab abab', 'aba babab ababa bab aba bababa bab', 'aba babab ababa bab abab aba babab', 'aba babab ababa bab abab abab abab', 'aba babab ababa bab abab ababa bab', 'aba babab ababa bab ababa bab abab', 'aba babab ababa babab aba bab abab', 'aba babab ababa babab abab aba bab', 'aba babab ababa babab ababa babab', 'aba babab ababa bababa bab aba bab', 'aba babab ababa bababa babab abab', 'aba babab ababa bababa bababa bab', 'aba bababa bab aba bab aba bab abab', 'aba bababa bab aba bab abab aba bab', 'aba bababa bab aba bab ababa babab', 'aba bababa bab aba babab aba babab', 'aba bababa bab aba babab abab abab', 'aba bababa bab aba babab ababa bab', 'aba bababa bab aba bababa bab abab', 'aba bababa bab abab aba bab aba bab', 'aba bababa bab abab aba babab abab', 'aba bababa bab abab aba bababa bab', 'aba bababa bab abab abab aba babab', 'aba bababa bab abab abab abab abab', 'aba bababa bab abab abab ababa bab', 'aba bababa bab abab ababa bab abab', 'aba bababa bab ababa bab aba babab', 'aba bababa bab ababa bab abab abab', 'aba bababa bab ababa bab ababa bab', 'aba bababa bab ababa babab aba bab', 'aba bababa bab ababa bababa babab', 'aba bababa babab aba bab aba babab', 'aba bababa babab aba bab abab abab', 'aba bababa babab aba bab ababa bab', 'aba bababa babab aba babab aba bab', 'aba bababa babab aba bababa babab', 'aba bababa babab abab aba bab abab', 'aba bababa babab abab abab aba bab', 'aba bababa babab abab ababa babab', 'aba bababa babab ababa bab aba bab', 'aba bababa babab ababa babab abab', 'aba bababa babab ababa bababa bab', 'aba bababa bababa bab aba bab abab', 'aba bababa bababa bab abab aba bab', 'aba bababa bababa bab ababa babab', 'aba bababa bababa babab aba babab', 'aba bababa bababa babab abab abab', 'aba bababa bababa babab ababa bab', 'aba bababa bababa bababa bab abab', 'abab aba bab aba bab aba bab aba bab', 'abab aba bab aba bab aba babab abab', 'abab aba bab aba bab aba bababa bab', 'abab aba bab aba bab abab aba babab', 'abab aba bab aba bab abab abab abab', 'abab aba bab aba bab abab ababa bab', 'abab aba bab aba bab ababa bab abab', 'abab aba bab aba babab aba bab abab', 'abab aba bab aba babab abab aba bab', 'abab aba bab aba babab ababa babab', 'abab aba bab aba bababa bab aba bab', 'abab aba bab aba bababa babab abab', 'abab aba bab aba bababa bababa bab', 'abab aba bab abab aba bab aba babab', 'abab aba bab abab aba bab abab abab', 'abab aba bab abab aba bab ababa bab', 'abab aba bab abab aba babab aba bab', 'abab aba bab abab aba bababa babab', 'abab aba bab abab abab aba bab abab', 'abab aba bab abab abab abab aba bab', 'abab aba bab abab abab ababa babab', 'abab aba bab abab ababa bab aba bab', 'abab aba bab abab ababa babab abab', 'abab aba bab abab ababa bababa bab', 'abab aba bab ababa bab aba bab abab', 'abab aba bab ababa bab abab aba bab', 'abab aba bab ababa bab ababa babab', 'abab aba bab ababa babab aba babab', 'abab aba bab ababa babab abab abab', 'abab aba bab ababa babab ababa bab', 'abab aba bab ababa bababa bab abab', 'abab aba babab aba bab aba bab abab', 'abab aba babab aba bab abab aba bab', 'abab aba babab aba bab ababa babab', 'abab aba babab aba babab aba babab', 'abab aba babab aba babab abab abab', 'abab aba babab aba babab ababa bab', 'abab aba babab aba bababa bab abab', 'abab aba babab abab aba bab aba bab', 'abab aba babab abab aba babab abab', 'abab aba babab abab aba bababa bab', 'abab aba babab abab abab aba babab', 'abab aba babab abab abab abab abab', 'abab aba babab abab abab ababa bab', 'abab aba babab abab ababa bab abab', 'abab aba babab ababa bab aba babab', 'abab aba babab ababa bab abab abab', 'abab aba babab ababa bab ababa bab', 'abab aba babab ababa babab aba bab', 'abab aba babab ababa bababa babab', 'abab aba bababa bab aba bab aba bab', 'abab aba bababa bab aba babab abab', 'abab aba bababa bab aba bababa bab', 'abab aba bababa bab abab aba babab', 'abab aba bababa bab abab abab abab', 'abab aba bababa bab abab ababa bab', 'abab aba bababa bab ababa bab abab', 'abab aba bababa babab aba bab abab', 'abab aba bababa babab abab aba bab', 'abab aba bababa babab ababa babab', 'abab aba bababa bababa bab aba bab', 'abab aba bababa bababa babab abab', 'abab aba bababa bababa bababa bab', 'abab abab aba bab aba bab aba babab', 'abab abab aba bab aba bab abab abab', 'abab abab aba bab aba bab ababa bab', 'abab abab aba bab aba babab aba bab', 'abab abab aba bab aba bababa babab', 'abab abab aba bab abab aba bab abab', 'abab abab aba bab abab abab aba bab', 'abab abab aba bab abab ababa babab', 'abab abab aba bab ababa bab aba bab', 'abab abab aba bab ababa babab abab', 'abab abab aba bab ababa bababa bab', 'abab abab aba babab aba bab aba bab', 'abab abab aba babab aba babab abab', 'abab abab aba babab aba bababa bab', 'abab abab aba babab abab aba babab', 'abab abab aba babab abab abab abab', 'abab abab aba babab abab ababa bab', 'abab abab aba babab ababa bab abab', 'abab abab aba bababa bab aba babab', 'abab abab aba bababa bab abab abab', 'abab abab aba bababa bab ababa bab', 'abab abab aba bababa babab aba bab', 'abab abab aba bababa bababa babab', 'abab abab abab aba bab aba bab abab', 'abab abab abab aba bab abab aba bab', 'abab abab abab aba bab ababa babab', 'abab abab abab aba babab aba babab', 'abab abab abab aba babab abab abab', 'abab abab abab aba babab ababa bab', 'abab abab abab aba bababa bab abab', 'abab abab abab abab aba bab aba bab', 'abab abab abab abab aba babab abab', 'abab abab abab abab aba bababa bab', 'abab abab abab abab abab aba babab', 'abab abab abab abab abab abab abab', 'abab abab abab abab abab ababa bab', 'abab abab abab abab ababa bab abab', 'abab abab abab ababa bab aba babab', 'abab abab abab ababa bab abab abab', 'abab abab abab ababa bab ababa bab', 'abab abab abab ababa babab aba bab', 'abab abab abab ababa bababa babab', 'abab abab ababa bab aba bab aba bab', 'abab abab ababa bab aba babab abab', 'abab abab ababa bab aba bababa bab', 'abab abab ababa bab abab aba babab', 'abab abab ababa bab abab abab abab', 'abab abab ababa bab abab ababa bab', 'abab abab ababa bab ababa bab abab', 'abab abab ababa babab aba bab abab', 'abab abab ababa babab abab aba bab', 'abab abab ababa babab ababa babab', 'abab abab ababa bababa bab aba bab', 'abab abab ababa bababa babab abab', 'abab abab ababa bababa bababa bab', 'abab ababa bab aba bab aba bab abab', 'abab ababa bab aba bab abab aba bab', 'abab ababa bab aba bab ababa babab', 'abab ababa bab aba babab aba babab', 'abab ababa bab aba babab abab abab', 'abab ababa bab aba babab ababa bab', 'abab ababa bab aba bababa bab abab', 'abab ababa bab abab aba bab aba bab', 'abab ababa bab abab aba babab abab', 'abab ababa bab abab aba bababa bab', 'abab ababa bab abab abab aba babab', 'abab ababa bab abab abab abab abab', 'abab ababa bab abab abab ababa bab', 'abab ababa bab abab ababa bab abab', 'abab ababa bab ababa bab aba babab', 'abab ababa bab ababa bab abab abab', 'abab ababa bab ababa bab ababa bab', 'abab ababa bab ababa babab aba bab', 'abab ababa bab ababa bababa babab', 'abab ababa babab aba bab aba babab', 'abab ababa babab aba bab abab abab', 'abab ababa babab aba bab ababa bab', 'abab ababa babab aba babab aba bab', 'abab ababa babab aba bababa babab', 'abab ababa babab abab aba bab abab', 'abab ababa babab abab abab aba bab', 'abab ababa babab abab ababa babab', 'abab ababa babab ababa bab aba bab', 'abab ababa babab ababa babab abab', 'abab ababa babab ababa bababa bab', 'abab ababa bababa bab aba bab abab', 'abab ababa bababa bab abab aba bab', 'abab ababa bababa bab ababa babab', 'abab ababa bababa babab aba babab', 'abab ababa bababa babab abab abab', 'abab ababa bababa babab ababa bab', 'abab ababa bababa bababa bab abab', 'ababa bab aba bab aba bab aba babab', 'ababa bab aba bab aba bab abab abab', 'ababa bab aba bab aba bab ababa bab', 'ababa bab aba bab aba babab aba bab', 'ababa bab aba bab aba bababa babab', 'ababa bab aba bab abab aba bab abab', 'ababa bab aba bab abab abab aba bab', 'ababa bab aba bab abab ababa babab', 'ababa bab aba bab ababa bab aba bab', 'ababa bab aba bab ababa babab abab', 'ababa bab aba bab ababa bababa bab', 'ababa bab aba babab aba bab aba bab', 'ababa bab aba babab aba babab abab', 'ababa bab aba babab aba bababa bab', 'ababa bab aba babab abab aba babab', 'ababa bab aba babab abab abab abab', 'ababa bab aba babab abab ababa bab', 'ababa bab aba babab ababa bab abab', 'ababa bab aba bababa bab aba babab', 'ababa bab aba bababa bab abab abab', 'ababa bab aba bababa bab ababa bab', 'ababa bab aba bababa babab aba bab', 'ababa bab aba bababa bababa babab', 'ababa bab abab aba bab aba bab abab', 'ababa bab abab aba bab abab aba bab', 'ababa bab abab aba bab ababa babab', 'ababa bab abab aba babab aba babab', 'ababa bab abab aba babab abab abab', 'ababa bab abab aba babab ababa bab', 'ababa bab abab aba bababa bab abab', 'ababa bab abab abab aba bab aba bab', 'ababa bab abab abab aba babab abab', 'ababa bab abab abab aba bababa bab', 'ababa bab abab abab abab aba babab', 'ababa bab abab abab abab abab abab', 'ababa bab abab abab abab ababa bab', 'ababa bab abab abab ababa bab abab', 'ababa bab abab ababa bab aba babab', 'ababa bab abab ababa bab abab abab', 'ababa bab abab ababa bab ababa bab', 'ababa bab abab ababa babab aba bab', 'ababa bab abab ababa bababa babab', 'ababa bab ababa bab aba bab aba bab', 'ababa bab ababa bab aba babab abab', 'ababa bab ababa bab aba bababa bab', 'ababa bab ababa bab abab aba babab', 'ababa bab ababa bab abab abab abab', 'ababa bab ababa bab abab ababa bab', 'ababa bab ababa bab ababa bab abab', 'ababa bab ababa babab aba bab abab', 'ababa bab ababa babab abab aba bab', 'ababa bab ababa babab ababa babab', 'ababa bab ababa bababa bab aba bab', 'ababa bab ababa bababa babab abab', 'ababa bab ababa bababa bababa bab', 'ababa babab aba bab aba bab aba bab', 'ababa babab aba bab aba babab abab', 'ababa babab aba bab aba bababa bab', 'ababa babab aba bab abab aba babab', 'ababa babab aba bab abab abab abab', 'ababa babab aba bab abab ababa bab', 'ababa babab aba bab ababa bab abab', 'ababa babab aba babab aba bab abab', 'ababa babab aba babab abab aba bab', 'ababa babab aba babab ababa babab', 'ababa babab aba bababa bab aba bab', 'ababa babab aba bababa babab abab', 'ababa babab aba bababa bababa bab', 'ababa babab abab aba bab aba babab', 'ababa babab abab aba bab abab abab', 'ababa babab abab aba bab ababa bab', 'ababa babab abab aba babab aba bab', 'ababa babab abab aba bababa babab', 'ababa babab abab abab aba bab abab', 'ababa babab abab abab abab aba bab', 'ababa babab abab abab ababa babab', 'ababa babab abab ababa bab aba bab', 'ababa babab abab ababa babab abab', 'ababa babab abab ababa bababa bab', 'ababa babab ababa bab aba bab abab', 'ababa babab ababa bab abab aba bab', 'ababa babab ababa bab ababa babab', 'ababa babab ababa babab aba babab', 'ababa babab ababa babab abab abab', 'ababa babab ababa babab ababa bab', 'ababa babab ababa bababa bab abab', 'ababa bababa bab aba bab aba babab', 'ababa bababa bab aba bab abab abab', 'ababa bababa bab aba bab ababa bab', 'ababa bababa bab aba babab aba bab', 'ababa bababa bab aba bababa babab', 'ababa bababa bab abab aba bab abab', 'ababa bababa bab abab abab aba bab', 'ababa bababa bab abab ababa babab', 'ababa bababa bab ababa bab aba bab', 'ababa bababa bab ababa babab abab', 'ababa bababa bab ababa bababa bab', 'ababa bababa babab aba bab aba bab', 'ababa bababa babab aba babab abab', 'ababa bababa babab aba bababa bab', 'ababa bababa babab abab aba babab', 'ababa bababa babab abab abab abab', 'ababa bababa babab abab ababa bab', 'ababa bababa babab ababa bab abab', 'ababa bababa bababa bab aba babab', 'ababa bababa bababa bab abab abab', 'ababa bababa bababa bab ababa bab', 'ababa bababa bababa babab aba bab', 'ababa bababa bababa bababa babab']"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\", wordDict = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaa\",\"aaaaaaaa\",\"aaaaaaaaa\",\"aaaaaaaaaa\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"abcdefgh\", wordDict = [\"ab\",\"abc\",\"abcd\",\"abcde\",\"abcdef\",\"abcdefg\",\"abcdefgh\"]",
        "output": "['abcdefgh']"
      },
      {
        "input": "s = \"elephant\", wordDict = [\"ele\",\"phant\",\"lephant\",\"el\",\"phant\",\"le\",\"pha\",\"nt\",\"e\",\"phantom\",\"pha\"]",
        "output": "['e le pha nt', 'e le phant', 'e lephant', 'el e pha nt', 'el e phant', 'ele pha nt', 'ele phant']"
      },
      {
        "input": "s = \"thelongwordthatshouldbreakdown\", wordDict = [\"the\", \"long\", \"word\", \"that\", \"should\", \"break\", \"down\", \"thelon\", \"breakdo\", \"wordtha\", \"thatshoul\", \"ouldbreak\"]",
        "output": "['the long word that should break down']"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaab\", wordDict = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaaaaa\",\"b\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"thisisaverylongstringthatcanbebrokenintomultiplewordswithdictionary\", wordDict = [\"this\",\"is\",\"a\",\"very\",\"long\",\"string\",\"that\",\"can\",\"be\",\"broken\",\"into\",\"multiple\",\"words\",\"with\",\"dictionary\"]",
        "output": "['this is a very long string that can be broken into multiple words with dictionary']"
      },
      {
        "input": "s = \"solvetheproblem\", wordDict = [\"solve\",\"the\",\"problem\",\"solvethe\",\"solvepro\",\"prob\",\"lem\",\"prob\",\"lempro\",\"solvethepro\",\"solvetheprob\",\"solvetheproblem\",\"sol\",\"vel\",\"ethe\",\"prob\",\"pro\",\"lem\",\"lempro\",\"solvethepro\",\"solvetheprob\",\"solvetheproblem\"]",
        "output": "['solve the prob lem', 'solve the problem', 'solvethe prob lem', 'solvethe problem', 'solvetheprob lem', 'solvetheproblem']"
      },
      {
        "input": "s = \"aquickbrownfox\", wordDict = [\"a\",\"quick\",\"brown\",\"fox\",\"quickbrown\",\"brownfox\"]",
        "output": "['a quick brown fox', 'a quick brownfox', 'a quickbrown fox']"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\", wordDict = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaa\",\"aaaaaaaa\",\"aaaaaaaaa\",\"aaaaaaaaaa\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\", wordDict = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaa\",\"aaaaaaaa\",\"aaaaaaaaa\",\"aaaaaaaaaa\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"thisisatoyproblem\", wordDict = [\"this\",\"is\",\"atoy\",\"problem\",\"isato\",\"oyprob\",\"lem\",\"toy\",\"prob\",\"em\",\"l\",\"em\",\"thisisato\",\"oy\",\"prob\"]",
        "output": "['this is atoy prob l em', 'this is atoy prob lem', 'this is atoy problem']"
      },
      {
        "input": "s = \"thequickbrownfoxjumpsoverthelazydog\", wordDict = [\"the\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\",\"thequick\",\"brownfox\",\"jumpsover\",\"thelazy\"]",
        "output": "['the quick brown fox jumps over the lazy dog', 'the quick brown fox jumps over thelazy dog', 'the quick brown fox jumpsover the lazy dog', 'the quick brown fox jumpsover thelazy dog', 'the quick brownfox jumps over the lazy dog', 'the quick brownfox jumps over thelazy dog', 'the quick brownfox jumpsover the lazy dog', 'the quick brownfox jumpsover thelazy dog', 'thequick brown fox jumps over the lazy dog', 'thequick brown fox jumps over thelazy dog', 'thequick brown fox jumpsover the lazy dog', 'thequick brown fox jumpsover thelazy dog', 'thequick brownfox jumps over the lazy dog', 'thequick brownfox jumps over thelazy dog', 'thequick brownfox jumpsover the lazy dog', 'thequick brownfox jumpsover thelazy dog']"
      },
      {
        "input": "s = \"abcd\", wordDict = [\"a\",\"b\",\"c\",\"d\",\"ab\",\"bc\",\"cd\",\"abcd\",\"abc\",\"bcd\",\"ab\",\"bc\",\"a\",\"d\",\"abcd\"]",
        "output": "['a b c d', 'a b cd', 'a bc d', 'a bcd', 'ab c d', 'ab cd', 'abc d', 'abcd']"
      },
      {
        "input": "s = \"wordbreakproblem\", wordDict = [\"word\",\"break\",\"problem\",\"wordbreak\",\"pro\",\"blem\"]",
        "output": "['word break pro blem', 'word break problem', 'wordbreak pro blem', 'wordbreak problem']"
      },
      {
        "input": "s = \"wordbreakproblem\", wordDict = [\"word\",\"break\",\"problem\",\"wordbreak\",\"breakprob\",\"lem\",\"prob\",\"lempro\",\"breakpro\",\"wordbreakpro\",\"wordbreakprob\",\"wordbreakproblem\"]",
        "output": "['word break prob lem', 'word break problem', 'word breakprob lem', 'wordbreak prob lem', 'wordbreak problem', 'wordbreakprob lem', 'wordbreakproblem']"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", wordDict = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababababababab\", wordDict = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"ab\",\"aba\",\"abab\"]",
        "output": "Execution timed out"
      },
      {
        "input": "s = \"supercalifragilisticexpialidocious\", wordDict = [\"super\",\"cali\",\"fragilistic\",\"expiali\",\"docious\",\"cal\",\"frag\",\"ilis\",\"tic\",\"exp\",\"expi\",\"ali\",\"do\",\"cious\"]",
        "output": "['super cali frag ilis tic expi ali do cious', 'super cali frag ilis tic expi ali docious', 'super cali frag ilis tic expiali do cious', 'super cali frag ilis tic expiali docious', 'super cali fragilistic expi ali do cious', 'super cali fragilistic expi ali docious', 'super cali fragilistic expiali do cious', 'super cali fragilistic expiali docious']"
      },
      {
        "input": "s = \"solvetheproblemrecursively\", wordDict = [\"solve\",\"the\",\"problem\",\"recursively\",\"solvethe\",\"problemre\",\"cursivelysolve\",\"solvetheproblem\",\"theproblemis\",\"solvetheproble\",\"problemrecursively\",\"theisproblem\"]",
        "output": "['solve the problem recursively', 'solve the problemrecursively', 'solvethe problem recursively', 'solvethe problemrecursively', 'solvetheproblem recursively']"
      }
    ]
  },
  {
    "id": 778,
    "difficulty": "Hard",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Array",
      "Binary Search",
      "Matrix",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\nThe rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\nReturn the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\n\u00a0\nExample 1:\n\n\nInput: grid = [[0,2],[1,3]]\nOutput: 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n\nExample 2:\n\n\nInput: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\nOutput: 16\nExplanation: The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n\n\u00a0\nConstraints:\n\nn == grid.length\nn == grid[i].length\n1 <= n <= 50\n0 <= grid[i][j] <\u00a0n2\nEach value grid[i][j] is unique.\n\n",
    "starterCode": "class Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[3,0,8,4],[2,5,1,7],[9,6,10,11],[13,12,14,15]]",
        "output": "15"
      },
      {
        "input": "grid = [[7,1,4,0,5],[2,3,6,8,9],[10,11,12,13,14],[15,16,17,18,19],[20,21,22,23,24]]",
        "output": "24"
      },
      {
        "input": "grid = [[1,2,3],[0,9,4],[5,6,7]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]",
        "output": "16"
      },
      {
        "input": "grid = [[0,2],[1,3]]",
        "output": "3"
      },
      {
        "input": "grid = [[0]]",
        "output": "0"
      },
      {
        "input": "grid = [[3,0,8,0,0],[0,2,0,0,4],[0,0,1,2,0],[0,9,0,3,0],[7,0,3,0,5]]",
        "output": "8"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[3,0,8,0,6],[5,0,0,4,0],[7,8,9,5,0],[9,0,0,9,0],[0,4,6,0,7]]",
        "output": "-1"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7],[49,48,47,46,45,44,8],[15,16,17,18,19,43,9],[14,23,24,25,26,42,10],[13,22,29,28,27,41,11],[12,21,30,31,32,40,12],[39,38,37,36,35,34,40]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[1,14,15,16,17,18],[2,13,24,23,22,19],[3,12,25,28,27,20],[4,11,26,29,30,21],[5,10,27,32,31,34],[6,9,8,7,33,35]]",
        "output": "35"
      },
      {
        "input": "grid = [[25,24,23,22,21],[20,19,18,17,16],[15,14,13,12,11],[10,9,8,7,6],[5,4,3,2,1]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[0,7,4,10,5,9],[2,1,6,12,8,11],[3,13,30,18,14,17],[15,19,24,28,21,22],[32,33,31,25,26,27],[16,20,23,29,34,35]]",
        "output": "35"
      },
      {
        "input": "grid = [[25,24,23,22,21,20],[19,18,17,16,15,14],[13,12,11,10,9,8],[7,6,5,4,3,2],[1,0,26,27,28,29],[35,34,33,32,31,30]]",
        "output": "30"
      },
      {
        "input": "grid = [[1,15,19,13],[2,25,29,24],[6,10,14,18],[7,11,16,30],[3,5,23,28],[17,8,26,27],[9,12,21,22],[31,4,20,2]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[5,19,23,20],[14,22,17,21],[7,2,16,10],[4,18,1,15]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[0,3,2,4,1],[7,6,5,8,9],[12,11,10,13,14],[19,18,17,16,15],[24,23,22,21,20]]",
        "output": "20"
      },
      {
        "input": "grid = [[8,26,14,27,42],[43,40,15,20,16],[13,41,25,38,17],[30,33,11,24,35],[29,39,21,19,34],[18,10,22,32,36],[12,23,5,9,31],[1,37,6,7,28]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9],[19,18,17,16,15,14,13,12,11,10],[20,21,22,23,24,25,26,27,28,29],[39,38,37,36,35,34,33,32,31,30],[40,41,42,43,44,45,46,47,48,49],[59,58,57,56,55,54,53,52,51,50],[60,61,62,63,64,65,66,67,68,69],[79,78,77,76,75,74,73,72,71,70],[80,81,82,83,84,85,86,87,88,89],[99,98,97,96,95,94,93,92,91,90]]",
        "output": "90"
      },
      {
        "input": "grid = [[32,2,35,30,29,40],[36,33,26,31,34,28],[23,20,4,9,10,11],[19,3,22,25,21,12],[1,37,18,15,17,5],[16,8,7,27,13,38]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[0, 25, 20, 15, 10], [5, 30, 28, 27, 21], [35, 3, 24, 26, 19], [40, 39, 38, 36, 22], [41, 42, 43, 44, 45]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[49, 48, 47, 46, 45], [44, 43, 42, 41, 40], [39, 38, 37, 36, 35], [34, 33, 32, 31, 30], [29, 28, 27, 26, 25]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[0,15,14,13,12,11,10],[1,2,3,4,5,6,7],[8,9,16,17,18,19,20],[23,24,25,26,27,28,29],[30,31,32,33,34,35,36],[37,38,39,40,41,42,43],[44,45,46,47,48,49,50],[51,52,53,54,55,56,57],[58,59,60,61,62,63,64],[65,66,67,68,69,70,71]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[5,0,4,1,2,6],[9,11,13,15,17,19],[8,10,12,14,16,18],[7,3,23,21,25,27],[6,22,20,24,26,28],[29,30,31,32,33,34]]",
        "output": "34"
      },
      {
        "input": "grid = [[16,15,20,17],[14,13,18,19],[12,11,10,9],[8,7,6,5]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[8,3,2,6,1,4],[7,5,0,9,11,13],[12,10,14,15,17,19],[16,18,20,21,23,25],[22,24,26,27,29,31],[28,30,32,33,34,35]]",
        "output": "35"
      },
      {
        "input": "grid = [[0,1,2,3,4,5],[16,15,14,13,12,6],[17,28,27,26,11,7],[18,29,34,25,10,8],[19,30,33,32,9,13],[20,21,22,23,24,14]]",
        "output": "14"
      },
      {
        "input": "grid = [[30,29,28,27,26,25,24],[31,8,7,6,5,4,23],[32,9,0,1,2,3,22],[33,10,11,12,13,14,21],[34,19,18,17,16,15,20],[35,36,37,38,39,40,41],[42,43,44,45,46,47,48]]",
        "output": "48"
      },
      {
        "input": "grid = [[1, 14, 15, 16, 17], [12, 8, 9, 10, 18], [11, 7, 2, 13, 19], [10, 6, 5, 3, 20], [9, 4, 1, 0, 24]]",
        "output": "24"
      },
      {
        "input": "grid = [[8,4,5,11,14],[9,7,6,10,12],[15,13,2,3,1],[0,16,18,17,19],[24,23,25,22,21]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6],[7,8,9,10,11,12,13],[14,15,16,17,18,19,20],[21,22,23,24,25,26,27],[28,29,30,31,32,33,34],[35,36,37,38,39,40,41],[42,43,44,45,46,47,48]]",
        "output": "48"
      },
      {
        "input": "grid = [[13,14,15,16,17],[8,9,10,11,12],[3,4,5,6,7],[0,1,2,18,19],[20,21,22,23,24]]",
        "output": "24"
      },
      {
        "input": "grid = [[20, 19, 32, 18, 29], [21, 28, 17, 16, 31], [15, 27, 22, 26, 14], [13, 25, 23, 24, 12], [11, 10, 9, 8, 7]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[25,24,23,22,21,20],[26,7,6,5,4,19],[27,8,1,2,3,18],[28,9,10,11,12,17],[29,30,31,32,33,16],[34,35,36,37,38,15]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[20, 21, 22, 23, 24, 25], [19, 18, 17, 16, 15, 26], [10, 9, 8, 7, 14, 27], [11, 12, 13, 6, 5, 28], [0, 1, 2, 3, 4, 29], [30, 31, 32, 33, 34, 35]]",
        "output": "35"
      },
      {
        "input": "grid = [[4,0,7,6,5],[3,9,8,1,2],[16,15,14,13,10],[11,12,17,18,19],[20,21,22,23,24]]",
        "output": "24"
      },
      {
        "input": "grid = [[10,20,30,40,50],[5,15,25,35,45],[0,1,2,3,4],[55,54,53,52,51],[60,70,80,90,100]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[0,51,52,53,54,55],[50,49,48,47,46,56],[45,44,43,42,41,57],[30,31,32,33,34,58],[29,28,27,26,25,59],[24,23,22,21,20,19]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[1,100,99,98,97],[2,3,96,95,94],[4,5,6,93,92],[7,8,9,10,91],[11,12,13,14,15]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[25,17,20,18,19],[24,30,29,15,16],[21,26,23,27,28],[9,10,11,8,7],[12,13,14,5,6],[0,1,2,3,4]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6],[35,34,33,32,31,30,7],[36,19,18,17,16,29,8],[37,20,7,6,15,28,9],[38,21,8,5,4,14,10],[39,22,9,10,11,13,12],[40,41,42,43,44,45,46]]",
        "output": "46"
      },
      {
        "input": "grid = [[48,47,46,45,44,43,42],[41,40,39,38,37,36,49],[35,34,33,32,31,30,50],[29,28,27,26,25,24,51],[23,22,21,20,19,18,52],[17,16,15,14,13,12,53],[11,10,9,8,7,6,54],[5,4,3,2,1,0,55]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[0,2,30,31,32,33],[1,3,29,28,27,26],[4,5,6,7,8,9],[14,13,12,11,10,34],[15,16,17,18,19,35],[24,23,22,21,20,36]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[31,32,33,34,35],[26,27,28,29,30],[21,22,23,24,25],[16,17,18,19,20],[11,12,13,14,15],[6,7,8,9,10],[1,2,3,4,5]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[0, 5, 9, 12, 17], [3, 1, 8, 10, 18], [4, 7, 2, 15, 16], [13, 6, 11, 14, 21], [22, 20, 19, 23, 24]]",
        "output": "24"
      },
      {
        "input": "grid = [[25,19,8,21,20],[17,16,15,14,13],[9,3,0,1,2],[4,5,6,7,12],[10,11,18,24,23]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[37,34,26,25,38,35,31,27,36],[17,20,33,29,19,23,22,21,32],[2,18,16,39,40,24,11,9,30],[3,5,6,42,14,4,1,8,7],[41,13,43,15,44,47,50,48,49],[45,12,46,10,9,11,28,39,38],[29,31,32,33,34,35,36,37,38],[39,40,41,42,43,44,45,46,47],[48,49,50,1,2,3,4,5,6]]",
        "output": "51"
      },
      {
        "input": "grid = [[1,5,9,13,17],[2,6,10,14,18],[3,7,11,15,19],[4,8,12,16,20],[21,22,23,24,25]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[3,17,12,4,16],[13,14,10,11,8],[6,0,7,5,15],[18,1,19,2,9],[24,22,23,20,21]]",
        "output": "21"
      },
      {
        "input": "grid = [[43,49,45,42,30,35,44],[47,40,37,39,33,34,46],[4,29,31,32,36,3,23],[22,10,13,12,27,28,25],[24,20,15,11,5,26,21],[19,16,18,17,9,2,7],[8,14,6,1,0,24,38]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[0,1,2,3,4,5],[35,34,33,32,31,6],[36,37,38,39,30,7],[59,58,57,56,55,8],[54,53,52,51,50,9],[49,48,47,46,45,44]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[0,1,2,3,4,5],[19,18,17,16,15,6],[14,23,22,21,10,7],[13,24,25,20,11,8],[12,27,26,29,12,9],[34,33,32,31,30,35]]",
        "output": "35"
      },
      {
        "input": "grid = [[36,35,34,33,32,31],[25,26,27,28,29,30],[6,5,4,3,2,1],[7,8,9,10,11,12],[18,17,16,15,14,13],[19,20,21,22,23,24]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[30,29,28,27,26,25],[24,23,22,21,20,19],[18,17,16,15,14,13],[12,11,10,9,8,7],[6,5,4,3,2,1],[0,35,34,33,32,31]]",
        "output": "31"
      },
      {
        "input": "grid = [[49,48,47,46,45,44,43,42,41,40],[40,39,38,37,36,35,34,33,32,31],[31,30,29,28,27,26,25,24,23,22],[22,21,20,19,18,17,16,15,14,13],[13,12,11,10,9,8,7,6,5,4],[4,3,2,1,0,41,42,43,44,45],[46,47,48,49,50,51,52,53,54,55],[55,54,53,52,51,50,49,48,47,46],[45,44,43,42,41,56,57,58,59,60],[60,59,58,57,56,61,62,63,64,65]]",
        "output": "-1"
      },
      {
        "input": "grid = [[2,18,24,23,22,21],[19,3,4,5,6,7],[20,8,9,10,11,12],[29,30,31,32,33,13],[38,37,36,35,34,14],[39,40,41,42,43,15],[50,49,48,47,46,16],[45,44,43,42,41,17],[40,39,38,37,36,18],[51,52,53,54,55,56]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[30,27,28,31,32],[26,23,24,25,33],[22,19,20,21,34],[18,15,16,17,35],[14,11,12,13,36],[10,7,8,9,37],[6,3,4,5,38],[0,1,2,3,39]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[25,24,23,22,21,20],[19,18,17,16,15,14],[13,12,11,10,9,8],[7,6,5,4,3,2],[1,0,29,28,27,26],[35,34,33,32,31,30]]",
        "output": "30"
      },
      {
        "input": "grid = [[0,9,8,7,6,5],[1,2,3,4,30,31],[14,13,12,11,10,32],[15,16,17,18,19,33],[24,23,22,21,20,34],[25,26,27,28,29,35]]",
        "output": "35"
      },
      {
        "input": "grid = [[0,1,4,3,12],[5,6,7,8,11],[16,15,14,13,10],[9,18,17,19,20],[21,22,23,24,25]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[10,5,9,11,12],[7,3,4,6,8],[19,13,2,14,15],[18,17,21,16,22],[24,23,20,25,0]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[33,16,21,30,22,10],[18,5,29,3,24,20],[34,2,31,17,19,9],[15,13,14,23,28,32],[4,35,8,7,6,27],[1,0,12,11,26,25]]",
        "output": "33"
      },
      {
        "input": "grid = [[15,13,2,27,30],[8,5,3,17,19],[24,1,20,22,18],[4,29,28,16,25],[7,23,14,10,6]]",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "grid = [[5,24,19,22,21,6],[4,4,20,17,15,9],[14,10,3,16,1,11],[7,18,23,13,12,8],[2,0,5,25,27,26],[30,31,32,33,34,35]]",
        "output": "35"
      },
      {
        "input": "grid = [[8,2,3],[4,7,6],[5,1,0]]",
        "output": "8"
      }
    ]
  },
  {
    "id": 1354,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :\n\nlet x be the sum of all elements currently in your array.\nchoose index i, such that 0 <= i < n and set the value of arr at index i to x.\nYou may repeat this procedure as many times as needed.\n\nReturn true if it is possible to construct the target array from arr, otherwise, return false.\n\u00a0\nExample 1:\n\nInput: target = [9,3,5]\nOutput: true\nExplanation: Start with arr = [1, 1, 1] \n[1, 1, 1], sum = 3 choose index 1\n[1, 3, 1], sum = 5 choose index 2\n[1, 3, 5], sum = 9 choose index 0\n[9, 3, 5] Done\n\nExample 2:\n\nInput: target = [1,1,1,2]\nOutput: false\nExplanation: Impossible to create target array from [1,1,1,1].\n\nExample 3:\n\nInput: target = [8,5]\nOutput: true\n\n\u00a0\nConstraints:\n\nn == target.length\n1 <= n <= 5 * 104\n1 <= target[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def isPossible(self, target: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "target = [10,9,8,7,6,5,4,3,2,1]",
        "output": "False"
      },
      {
        "input": "target = [1,2,3,4,5]",
        "output": "False"
      },
      {
        "input": "target = [1000000000,1,1]",
        "output": "False"
      },
      {
        "input": "target = [5,7,1]",
        "output": "True"
      },
      {
        "input": "target = [10,1]",
        "output": "True"
      },
      {
        "input": "target = [1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "False"
      },
      {
        "input": "target = [5,5,5]",
        "output": "False"
      },
      {
        "input": "target = [1000000000,1000000000]",
        "output": "False"
      },
      {
        "input": "target = [1000000000, 1]",
        "output": "True"
      },
      {
        "input": "target = [1,1,1,2]",
        "output": "False"
      },
      {
        "input": "target = [5,10,15]",
        "output": "False"
      },
      {
        "input": "target = [1,1000000000,1000000000]",
        "output": "False"
      },
      {
        "input": "target = [9,3,5]",
        "output": "True"
      },
      {
        "input": "target = [1,1,1]",
        "output": "True"
      },
      {
        "input": "target = [2,900000000]",
        "output": "False"
      },
      {
        "input": "target = [8,5]",
        "output": "True"
      },
      {
        "input": "target = [1,1000000000]",
        "output": "True"
      },
      {
        "input": "target = [1,1,1,1,1,1,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "target = [7,7,7,7,7,7,7,7,7,7]",
        "output": "False"
      },
      {
        "input": "target = [1000000000, 500000000, 250000000, 125000000, 62500000, 31250000, 15625000, 7812500, 3906250, 1953125]",
        "output": "False"
      },
      {
        "input": "target = [21, 17, 13, 9, 5, 1]",
        "output": "False"
      },
      {
        "input": "target = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "False"
      },
      {
        "input": "target = [100, 100, 100, 100, 100, 99, 98, 97, 96, 95]",
        "output": "False"
      },
      {
        "input": "target = [5,10,15,20,25,30]",
        "output": "False"
      },
      {
        "input": "target = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "False"
      },
      {
        "input": "target = [20,19,18,17,16,15,14,13,12,11]",
        "output": "False"
      },
      {
        "input": "target = [37, 11, 25, 7, 19]",
        "output": "False"
      },
      {
        "input": "target = [41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131]",
        "output": "False"
      },
      {
        "input": "target = [5,10,15,20,25,30,35,40,45,50]",
        "output": "False"
      },
      {
        "input": "target = [1,1000000000,1,1000000000,1,1000000000]",
        "output": "False"
      },
      {
        "input": "target = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "False"
      },
      {
        "input": "target = [2, 6, 10, 14, 18, 22]",
        "output": "False"
      },
      {
        "input": "target = [100,100,100,100,99]",
        "output": "False"
      },
      {
        "input": "target = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20]",
        "output": "False"
      },
      {
        "input": "target = [13,11,10]",
        "output": "False"
      },
      {
        "input": "target = [81, 27, 9, 3, 1]",
        "output": "False"
      },
      {
        "input": "target = [100,90,80,70,60,50,40,30,20,10]",
        "output": "False"
      },
      {
        "input": "target = [5, 7, 9, 13, 21, 34, 55]",
        "output": "False"
      },
      {
        "input": "target = [10,5,15,20]",
        "output": "False"
      },
      {
        "input": "target = [987,654,321]",
        "output": "False"
      },
      {
        "input": "target = [18,5,7]",
        "output": "False"
      },
      {
        "input": "target = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]",
        "output": "False"
      },
      {
        "input": "target = [1,2,4,8,16,32,64,128,256,512]",
        "output": "False"
      },
      {
        "input": "target = [3, 5, 11, 13, 17]",
        "output": "False"
      },
      {
        "input": "target = [50,25,50,25,50,25,50,25,50,25,50,25,50,25,50,25,50,25,50,25]",
        "output": "False"
      },
      {
        "input": "target = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994]",
        "output": "False"
      },
      {
        "input": "target = [21,15,12]",
        "output": "False"
      },
      {
        "input": "target = [1000000000,999999999,999999998,999999997,999999996]",
        "output": "False"
      },
      {
        "input": "target = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "False"
      },
      {
        "input": "target = [7, 14, 21, 28, 35, 42, 49]",
        "output": "False"
      },
      {
        "input": "target = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000001]",
        "output": "False"
      },
      {
        "input": "target = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "target = [123456789, 987654321, 456789123, 321987654]",
        "output": "False"
      },
      {
        "input": "target = [3,6,9,12,15,18,21,24,27,30]",
        "output": "False"
      },
      {
        "input": "target = [999999999, 999999999, 1]",
        "output": "False"
      },
      {
        "input": "target = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "False"
      },
      {
        "input": "target = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "False"
      },
      {
        "input": "target = [8,13,21,34,55,89]",
        "output": "False"
      },
      {
        "input": "target = [100,99,98,97]",
        "output": "False"
      },
      {
        "input": "target = [1000000000,1,1,1,1]",
        "output": "False"
      },
      {
        "input": "target = [123456789,987654321,111111111]",
        "output": "False"
      },
      {
        "input": "target = [17,7,17,7,17]",
        "output": "False"
      },
      {
        "input": "target = [4,12,33,55]",
        "output": "False"
      },
      {
        "input": "target = [1000000000, 1000000000, 1000000000, 1]",
        "output": "False"
      },
      {
        "input": "target = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "False"
      },
      {
        "input": "target = [45, 12, 18, 30, 36, 24]",
        "output": "False"
      },
      {
        "input": "target = [314159265,271828182,161803398,141421356]",
        "output": "False"
      },
      {
        "input": "target = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]",
        "output": "False"
      },
      {
        "input": "target = [7, 11, 15, 22]",
        "output": "False"
      },
      {
        "input": "target = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288]",
        "output": "False"
      },
      {
        "input": "target = [17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17]",
        "output": "False"
      },
      {
        "input": "target = [999999999, 1, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]",
        "output": "False"
      },
      {
        "input": "target = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000]",
        "output": "False"
      },
      {
        "input": "target = [33,17,13]",
        "output": "True"
      },
      {
        "input": "target = [1, 1, 2, 3, 6, 11, 20, 37, 68]",
        "output": "False"
      },
      {
        "input": "target = [101,103,107,109]",
        "output": "False"
      },
      {
        "input": "target = [10, 15, 3]",
        "output": "False"
      },
      {
        "input": "target = [7,18,5,4]",
        "output": "False"
      },
      {
        "input": "target = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "False"
      },
      {
        "input": "target = [2,900000000,900000000]",
        "output": "False"
      },
      {
        "input": "target = [123456789,987654321]",
        "output": "False"
      },
      {
        "input": "target = [100, 200, 300, 400, 500]",
        "output": "False"
      },
      {
        "input": "target = [1, 1000000000, 1000000000, 1000000000]",
        "output": "False"
      },
      {
        "input": "target = [2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711]",
        "output": "False"
      },
      {
        "input": "target = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]",
        "output": "False"
      },
      {
        "input": "target = [5, 11, 19, 29, 41]",
        "output": "False"
      },
      {
        "input": "target = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000]",
        "output": "False"
      },
      {
        "input": "target = [3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41]",
        "output": "False"
      },
      {
        "input": "target = [10, 15, 20, 30]",
        "output": "False"
      },
      {
        "input": "target = [2, 2, 2, 2, 2, 2, 2, 2, 2, 1]",
        "output": "False"
      },
      {
        "input": "target = [1000000000,1000000000,999999999,1]",
        "output": "False"
      },
      {
        "input": "target = [1,2,3,4,5,6,7,8,9,10]",
        "output": "False"
      },
      {
        "input": "target = [123456789, 987654321, 456789123, 321987654, 654321987, 789456123, 123789456, 456123789, 789654321, 987456123]",
        "output": "False"
      },
      {
        "input": "target = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1]",
        "output": "False"
      },
      {
        "input": "target = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "False"
      },
      {
        "input": "target = [3,9,20,5]",
        "output": "False"
      },
      {
        "input": "target = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1]",
        "output": "False"
      },
      {
        "input": "target = [3, 6, 12, 24, 48, 96, 192, 384, 768, 1536]",
        "output": "False"
      },
      {
        "input": "target = [2,2,2,2,2,2,2,2,2,2]",
        "output": "False"
      }
    ]
  },
  {
    "id": 2589,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Greedy",
      "Array",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "There is a computer that can run an unlimited number of tasks at the same time. You are given a 2D integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi].\nYou may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.\nReturn the minimum time during which the computer should be turned on to complete all tasks.\n\u00a0\nExample 1:\n\nInput: tasks = [[2,3,1],[4,5,1],[1,5,2]]\nOutput: 2\nExplanation: \n- The first task can be run in the inclusive time range [2, 2].\n- The second task can be run in the inclusive time range [5, 5].\n- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].\nThe computer will be on for a total of 2 seconds.\n\nExample 2:\n\nInput: tasks = [[1,3,2],[2,5,3],[5,6,2]]\nOutput: 4\nExplanation: \n- The first task can be run in the inclusive time range [2, 3].\n- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].\n- The third task can be run in the two inclusive time range [5, 6].\nThe computer will be on for a total of 4 seconds.\n\n\u00a0\nConstraints:\n\n1 <= tasks.length <= 2000\ntasks[i].length == 3\n1 <= starti, endi <= 2000\n1 <= durationi <= endi - starti + 1 \n\n",
    "starterCode": "class Solution:\n    def findMinimumTime(self, tasks: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "tasks = [[1,2,1],[2,3,1],[3,4,1],[4,5,1]]",
        "output": "2"
      },
      {
        "input": "tasks = [[1,100,50],[50,150,50],[100,200,50]]",
        "output": "99"
      },
      {
        "input": "tasks = [[1,1,1],[2,2,1],[3,3,1],[4,4,1],[5,5,1]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1,2,1],[1,2,1],[1,2,1]]",
        "output": "1"
      },
      {
        "input": "tasks = [[1,100,50],[50,150,50],[150,200,50]]",
        "output": "100"
      },
      {
        "input": "tasks = [[1,10,10],[2,9,8],[3,8,6],[4,7,4],[5,6,2]]",
        "output": "10"
      },
      {
        "input": "tasks = [[1,10,10],[2,9,9],[3,8,8],[4,7,7],[5,6,6]]",
        "output": "10"
      },
      {
        "input": "tasks = [[5,10,5],[15,20,5],[25,30,5]]",
        "output": "15"
      },
      {
        "input": "tasks = [[1,10,10],[10,20,5],[20,30,5]]",
        "output": "18"
      },
      {
        "input": "tasks = [[1,5,1],[2,6,2],[3,7,3],[4,8,4]]",
        "output": "4"
      },
      {
        "input": "tasks = [[10,20,5],[20,30,5],[30,40,5],[40,50,5]]",
        "output": "17"
      },
      {
        "input": "tasks = [[5,10,3],[10,15,3],[15,20,4]]",
        "output": "8"
      },
      {
        "input": "tasks = [[1,3,2],[2,5,3],[5,6,2]]",
        "output": "4"
      },
      {
        "input": "tasks = [[1,5,5],[6,10,5],[11,15,5]]",
        "output": "15"
      },
      {
        "input": "tasks = [[1,2,1],[2,3,1],[3,4,1]]",
        "output": "2"
      },
      {
        "input": "tasks = [[1,10,10],[10,20,10],[20,30,10]]",
        "output": "28"
      },
      {
        "input": "tasks = [[1,10,10]]",
        "output": "10"
      },
      {
        "input": "tasks = [[1,10,5],[2,9,4],[3,8,3],[4,7,2]]",
        "output": "5"
      },
      {
        "input": "tasks = [[2,3,1],[4,5,1],[1,5,2]]",
        "output": "2"
      },
      {
        "input": "tasks = [[1,5,3],[2,6,4],[3,7,5],[4,8,6],[5,9,7]]",
        "output": "7"
      },
      {
        "input": "tasks = [[1,10,5],[10,20,5],[20,30,5]]",
        "output": "13"
      },
      {
        "input": "tasks = [[1,1,1],[2,2,1],[3,3,1],[4,4,1]]",
        "output": "4"
      },
      {
        "input": "tasks = [[1,2,2],[2,3,2],[3,4,2]]",
        "output": "4"
      },
      {
        "input": "tasks = [[1,100,50],[51,150,50],[101,200,50]]",
        "output": "100"
      },
      {
        "input": "tasks = [[1,10,5],[10,20,10],[15,25,10]]",
        "output": "18"
      },
      {
        "input": "tasks = [[1,20,10],[5,15,5],[10,25,10]]",
        "output": "10"
      },
      {
        "input": "tasks = [[1,2,1],[3,4,1],[5,6,1]]",
        "output": "3"
      },
      {
        "input": "tasks = [[1, 5, 3], [2, 5, 3], [3, 5, 3], [4, 5, 3], [1, 5, 3], [2, 5, 3], [3, 5, 3], [4, 5, 3], [1, 5, 3], [2, 5, 3], [3, 5, 3], [4, 5, 3], [1, 5, 3], [2, 5, 3], [3, 5, 3], [4, 5, 3]]",
        "output": "3"
      },
      {
        "input": "tasks = [[1,5,1],[2,6,1],[3,7,1],[4,8,1],[5,9,1],[6,10,1],[7,11,1],[8,12,1],[9,13,1],[10,14,1]]",
        "output": "2"
      },
      {
        "input": "tasks = [[1,3,1],[2,4,1],[3,5,1],[4,6,1],[5,7,1],[6,8,1],[7,9,1],[8,10,1],[9,11,1],[10,12,1]]",
        "output": "4"
      },
      {
        "input": "tasks = [[1,15,10],[5,20,12],[10,25,15],[15,30,18]]",
        "output": "25"
      },
      {
        "input": "tasks = [[1,500,250],[200,600,200],[300,700,150],[400,800,100]]",
        "output": "250"
      },
      {
        "input": "tasks = [[1,10,5],[1,10,5],[1,10,5],[1,10,5],[1,10,5]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1,10,10],[2,9,9],[3,8,8],[4,7,7],[5,6,6],[6,5,5],[7,4,4],[8,3,3],[9,2,2],[10,1,1]]",
        "output": "10"
      },
      {
        "input": "tasks = [[1,5,2],[2,4,2],[3,4,2],[4,5,2],[5,6,2]]",
        "output": "4"
      },
      {
        "input": "tasks = [[1,50,25],[25,75,25],[50,100,25],[75,125,25],[100,150,25],[125,175,25],[150,200,25]]",
        "output": "97"
      },
      {
        "input": "tasks = [[1,5,5],[5,10,5],[10,15,5],[15,20,5]]",
        "output": "17"
      },
      {
        "input": "tasks = [[10,20,1],[11,21,1],[12,22,1],[13,23,1],[14,24,1],[15,25,1],[16,26,1],[17,27,1],[18,28,1],[19,29,1]]",
        "output": "1"
      },
      {
        "input": "tasks = [[1,100,10],[20,120,20],[40,140,30],[60,160,40],[80,180,50],[100,190,60]]",
        "output": "69"
      },
      {
        "input": "tasks = [[1,10,10],[2,15,5],[3,20,3],[4,25,2],[5,30,1],[6,35,2],[7,40,3],[8,45,4],[9,50,5],[10,55,6]]",
        "output": "15"
      },
      {
        "input": "tasks = [[1,10,9],[2,9,8],[3,8,7],[4,7,6],[5,6,5]]",
        "output": "9"
      },
      {
        "input": "tasks = [[10,20,10],[15,30,5],[20,40,3],[25,50,2],[30,60,1],[35,70,2],[40,80,3],[45,90,4],[50,100,5]]",
        "output": "17"
      },
      {
        "input": "tasks = [[1,10,5],[1,10,5],[1,10,5],[1,10,5],[1,10,5],[1,10,5]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1,2000,1000],[500,1500,1000],[1000,2000,1000],[1,1000,500],[1001,2000,500]]",
        "output": "1499"
      },
      {
        "input": "tasks = [[10,20,5],[15,25,4],[20,30,3],[25,35,2],[30,40,1],[35,45,2],[40,50,3],[45,55,4],[50,60,5],[55,65,6]]",
        "output": "17"
      },
      {
        "input": "tasks = [[1,2000,1000],[500,1500,500],[1000,2000,1000],[1500,2000,500],[1,1000,500],[500,1000,250]]",
        "output": "1499"
      },
      {
        "input": "tasks = [[1,100,50],[20,30,15],[40,50,10],[60,70,5],[80,90,3]]",
        "output": "50"
      },
      {
        "input": "tasks = [[1,20,15],[5,15,10],[10,25,12],[15,30,10]]",
        "output": "19"
      },
      {
        "input": "tasks = [[1,10,9],[2,10,8],[3,10,7],[4,10,6],[5,10,5]]",
        "output": "9"
      },
      {
        "input": "tasks = [[1,2000,1000],[500,1500,500],[1000,2000,500],[1500,2500,500],[2000,3000,500],[2500,3500,500],[3000,4000,500]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "tasks = [[1,2000,2000],[2,1999,1999],[3,1998,1998],[4,1997,1997],[5,1996,1996]]",
        "output": "2000"
      },
      {
        "input": "tasks = [[1,10,1],[2,3,1],[4,5,1],[6,7,1],[8,9,1],[10,10,1]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1,1000,500],[1,1000,500],[1,1000,500],[1,1000,500],[1,1000,500]]",
        "output": "500"
      },
      {
        "input": "tasks = [[5,15,10],[10,20,5],[15,25,3],[20,30,2],[25,35,1]]",
        "output": "12"
      },
      {
        "input": "tasks = [[1,5,1],[1,5,2],[1,5,3],[1,5,4],[1,5,5]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1, 5, 1], [2, 6, 1], [3, 7, 1], [4, 8, 1], [5, 9, 1], [6, 10, 1], [7, 11, 1], [8, 12, 1], [9, 13, 1], [10, 14, 1]]",
        "output": "2"
      },
      {
        "input": "tasks = [[1,10,1],[2,9,2],[3,8,3],[4,7,4],[5,6,5]]",
        "output": "4"
      },
      {
        "input": "tasks = [[1,20,5],[2,19,5],[3,18,5],[4,17,5],[5,16,5],[6,15,5],[7,14,5],[8,13,5],[9,12,5],[10,11,5]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1, 1000, 500], [200, 800, 300], [400, 600, 200], [500, 700, 150]]",
        "output": "500"
      },
      {
        "input": "tasks = [[1,2,1],[3,4,1],[5,6,1],[7,8,1],[9,10,1],[11,12,1],[13,14,1],[15,16,1],[17,18,1],[19,20,1]]",
        "output": "10"
      },
      {
        "input": "tasks = [[1,500,250],[250,750,300],[500,1000,350],[750,1250,400],[1000,1500,450]]",
        "output": "1048"
      },
      {
        "input": "tasks = [[1,10,3],[1,10,3],[1,10,3],[1,10,3],[1,10,3],[1,10,3],[1,10,3],[1,10,3],[1,10,3],[1,10,3],[1,10,3]]",
        "output": "3"
      },
      {
        "input": "tasks = [[1,10,3],[2,9,5],[3,8,4],[4,7,1],[5,6,2]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1,10,10],[1,10,10],[1,10,10],[1,10,10],[1,10,10],[1,10,10],[1,10,10],[1,10,10],[1,10,10]]",
        "output": "10"
      },
      {
        "input": "tasks = [[1,10,10],[2,9,9],[3,8,8],[4,7,7],[5,6,6],[6,5,5],[7,4,4],[8,3,3],[9,2,2]]",
        "output": "10"
      },
      {
        "input": "tasks = [[1,3,3],[4,6,2],[7,9,1],[10,12,3],[13,15,2]]",
        "output": "11"
      },
      {
        "input": "tasks = [[5,10,5],[10,15,5],[15,20,5],[20,25,5],[25,30,5],[30,35,5],[35,40,5],[40,45,5]]",
        "output": "33"
      },
      {
        "input": "tasks = [[1,50,25],[25,75,30],[50,100,35],[75,125,40],[100,150,45]]",
        "output": "103"
      },
      {
        "input": "tasks = [[1,3,3],[4,6,3],[7,9,3],[10,12,3],[13,15,3],[16,18,3],[19,21,3],[22,24,3],[25,27,3],[28,30,3]]",
        "output": "30"
      },
      {
        "input": "tasks = [[1,10,3],[1,20,3],[1,30,3],[1,40,3],[1,50,3],[1,60,3],[1,70,3],[1,80,3],[1,90,3],[1,100,3]]",
        "output": "3"
      },
      {
        "input": "tasks = [[1,1000,999],[500,1500,1000],[1000,2000,1000]]",
        "output": "1998"
      },
      {
        "input": "tasks = [[1,10,5],[2,9,4],[3,8,3],[4,7,2],[5,6,1],[6,5,1],[7,4,1],[8,3,1],[9,2,1],[10,1,1]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1,100,99],[2,150,98],[3,200,97],[4,250,96],[5,300,95],[6,350,94],[7,400,93],[8,450,92],[9,500,91]]",
        "output": "99"
      },
      {
        "input": "tasks = [[1, 2, 1], [3, 4, 1], [5, 6, 1], [7, 8, 1], [9, 10, 1], [11, 12, 1], [13, 14, 1], [15, 16, 1], [17, 18, 1], [19, 20, 1], [21, 22, 1], [23, 24, 1], [25, 26, 1], [27, 28, 1], [29, 30, 1]]",
        "output": "15"
      },
      {
        "input": "tasks = [[1,100,50],[2,90,40],[3,80,30],[4,70,20],[5,60,10],[6,50,5],[7,40,3],[8,30,2],[9,20,1]]",
        "output": "50"
      },
      {
        "input": "tasks = [[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1],[1,10,1]]",
        "output": "1"
      },
      {
        "input": "tasks = [[1,10,1],[2,10,2],[3,10,3],[4,10,4],[5,10,5],[6,10,6],[7,10,7],[8,10,8],[9,10,9]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1,2000,2000],[10,500,400],[150,800,300],[300,1800,500],[1000,1900,600]]",
        "output": "2000"
      },
      {
        "input": "tasks = [[1,2000,1000],[2,1999,999],[3,1998,998],[4,1997,997],[5,1996,996],[6,1995,995],[7,1994,994],[8,1993,993],[9,1992,992],[10,1991,991]]",
        "output": "1000"
      },
      {
        "input": "tasks = [[1,5,5],[2,6,4],[3,7,3],[4,8,2],[5,9,1],[6,10,1],[7,11,1],[8,12,1],[9,13,1],[10,14,1]]",
        "output": "6"
      },
      {
        "input": "tasks = [[1,50,10],[10,20,5],[20,30,5],[30,40,5],[40,50,5],[50,60,5],[60,70,5],[70,80,5],[80,90,5]]",
        "output": "33"
      },
      {
        "input": "tasks = [[1,100,50],[50,150,60],[100,200,70],[150,250,80],[200,300,90]]",
        "output": "208"
      },
      {
        "input": "tasks = [[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1],[6,7,1],[7,8,1],[8,9,1],[9,10,1]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1,10,10],[2,9,9],[3,8,8],[4,7,7],[5,6,6],[6,7,5],[7,8,4],[8,9,3],[9,10,2],[10,10,1]]",
        "output": "10"
      },
      {
        "input": "tasks = [[50,150,100],[100,200,100],[150,250,100],[200,300,100],[250,350,100],[300,400,100],[350,450,100],[400,500,100]]",
        "output": "446"
      },
      {
        "input": "tasks = [[1,10,1],[2,11,2],[3,12,3],[4,13,4],[5,14,5],[6,15,6],[7,16,7],[8,17,8],[9,18,9],[10,19,10]]",
        "output": "10"
      },
      {
        "input": "tasks = [[1,5,1],[6,10,1],[11,15,1],[16,20,1]]",
        "output": "4"
      },
      {
        "input": "tasks = [[1,100,100],[50,150,50],[100,200,30],[150,250,20],[200,300,10]]",
        "output": "138"
      },
      {
        "input": "tasks = [[1, 5, 5], [2, 6, 5], [3, 7, 5], [4, 8, 5], [5, 9, 5], [6, 10, 5], [7, 11, 5], [8, 12, 5], [9, 13, 5], [10, 14, 5]]",
        "output": "14"
      },
      {
        "input": "tasks = [[1,2000,500],[2,1999,499],[3,1998,498],[4,1997,497],[5,1996,496],[6,1995,495],[7,1994,494],[8,1993,493],[9,1992,492],[10,1991,491]]",
        "output": "500"
      },
      {
        "input": "tasks = [[1,100,50],[51,150,50],[101,200,50],[151,250,50],[201,300,50]]",
        "output": "150"
      },
      {
        "input": "tasks = [[1,100,1],[2,99,1],[3,98,1],[4,97,1],[5,96,1],[6,95,1],[7,94,1],[8,93,1],[9,92,1],[10,91,1],[11,90,1],[12,89,1],[13,88,1],[14,87,1],[15,86,1],[16,85,1],[17,84,1],[18,83,1],[19,82,1],[20,81,1],[21,80,1],[22,79,1],[23,78,1],[24,77,1],[25,76,1],[26,75,1],[27,74,1],[28,73,1],[29,72,1],[30,71,1],[31,70,1],[32,69,1],[33,68,1],[34,67,1],[35,66,1],[36,65,1],[37,64,1],[38,63,1],[39,62,1],[40,61,1],[41,60,1],[42,59,1],[43,58,1],[44,57,1],[45,56,1],[46,55,1],[47,54,1],[48,53,1],[49,52,1],[50,51,1]]",
        "output": "1"
      },
      {
        "input": "tasks = [[1,3,3],[2,4,2],[3,5,2],[4,6,2],[5,7,2],[6,8,2],[7,9,2]]",
        "output": "7"
      },
      {
        "input": "tasks = [[1,5,5],[2,10,5],[3,15,5],[4,20,5],[5,25,5],[6,30,5]]",
        "output": "10"
      },
      {
        "input": "tasks = [[1,3,1],[2,5,2],[3,7,3],[4,9,4],[5,11,5],[6,13,6],[7,15,7]]",
        "output": "9"
      },
      {
        "input": "tasks = [[1,2000,1000],[500,2500,1000],[1000,3000,1000],[1500,3500,1000],[2000,4000,1000]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "tasks = [[1,50,40],[25,75,30],[50,100,20],[75,125,10]]",
        "output": "59"
      },
      {
        "input": "tasks = [[1,20,5],[1,15,5],[1,10,5],[1,5,5],[6,10,5],[11,15,5],[16,20,5]]",
        "output": "20"
      },
      {
        "input": "tasks = [[1,2000,1000],[500,1500,500],[1000,2000,500],[1,500,100],[1500,2000,100]]",
        "output": "1000"
      },
      {
        "input": "tasks = [[1,2000,1],[2,2000,2],[3,2000,3],[4,2000,4],[5,2000,5],[6,2000,6],[7,2000,7],[8,2000,8],[9,2000,9],[10,2000,10]]",
        "output": "10"
      },
      {
        "input": "tasks = [[100,200,100],[150,250,100],[200,300,100],[250,350,100],[300,400,100]]",
        "output": "298"
      },
      {
        "input": "tasks = [[1, 2000, 1000], [2, 1999, 999], [3, 1998, 998], [4, 1997, 997], [5, 1996, 996], [6, 1995, 995], [7, 1994, 994], [8, 1993, 993], [9, 1992, 992], [10, 1991, 991]]",
        "output": "1000"
      },
      {
        "input": "tasks = [[1,2000,1000],[1000,2000,1000],[500,1500,500],[100,1900,900]]",
        "output": "1000"
      },
      {
        "input": "tasks = [[1,2,1],[1,3,1],[1,4,1],[1,5,1],[1,6,1],[1,7,1],[1,8,1],[1,9,1],[1,10,1]]",
        "output": "1"
      },
      {
        "input": "tasks = [[1,10,1],[2,9,2],[3,8,3],[4,7,4],[5,6,5],[6,7,4],[7,8,3],[8,9,2],[9,10,1]]",
        "output": "6"
      },
      {
        "input": "tasks = [[1, 10, 3], [2, 10, 3], [3, 10, 3], [4, 10, 3], [5, 10, 3], [6, 10, 3], [7, 10, 3], [8, 10, 3], [9, 10, 3], [1, 10, 3]]",
        "output": "3"
      },
      {
        "input": "tasks = [[1,100,50],[50,150,50],[100,200,50],[150,250,50],[200,300,50]]",
        "output": "148"
      },
      {
        "input": "tasks = [[1, 50, 25], [10, 60, 25], [20, 70, 25], [30, 80, 25], [40, 90, 25], [50, 100, 25], [60, 110, 25], [70, 120, 25], [80, 130, 25], [90, 140, 25]]",
        "output": "63"
      },
      {
        "input": "tasks = [[1,1000,500],[500,1500,500],[1000,2000,500],[1500,2500,500],[2000,3000,500]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "tasks = [[1,10,1],[2,10,2],[3,10,3],[4,10,4],[5,10,5],[6,10,6],[7,10,7],[8,10,8],[9,10,9],[10,10,10]]",
        "output": "5"
      },
      {
        "input": "tasks = [[1,10,1],[2,9,1],[3,8,1],[4,7,1],[5,6,1],[6,5,1],[7,4,1],[8,3,1],[9,2,1],[10,1,1]]",
        "output": "1"
      },
      {
        "input": "tasks = [[1,3,1],[2,4,1],[3,5,1],[4,6,1],[5,7,1]]",
        "output": "2"
      },
      {
        "input": "tasks = [[1,5,2],[1,5,2],[1,5,2],[1,5,2],[1,5,2]]",
        "output": "2"
      },
      {
        "input": "tasks = [[1,100,50],[20,150,60],[30,180,70],[40,200,80]]",
        "output": "80"
      },
      {
        "input": "tasks = [[1,5,1],[1,5,2],[1,5,3],[1,5,4],[1,5,5],[2,6,1],[2,6,2],[2,6,3],[2,6,4],[2,6,5]]",
        "output": "6"
      }
    ]
  },
  {
    "id": 2382,
    "difficulty": "Hard",
    "tags": [
      "Union Find",
      "Array",
      "Ordered Set",
      "Prefix Sum"
    ],
    "problemDescription": "You are given two 0-indexed integer arrays nums and removeQueries, both of length n. For the ith query, the element in nums at the index removeQueries[i] is removed, splitting nums into different segments.\nA segment is a contiguous sequence of positive integers in nums. A segment sum is the sum of every element in a segment.\nReturn an integer array answer, of length n, where answer[i] is the maximum segment sum after applying the ith removal.\nNote: The same index will not be removed more than once.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]\nOutput: [14,7,2,2,0]\nExplanation: Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 0th element, nums becomes [0,2,5,6,1] and the maximum segment sum is 14 for segment [2,5,6,1].\nQuery 2: Remove the 3rd element, nums becomes [0,2,5,0,1] and the maximum segment sum is 7 for segment [2,5].\nQuery 3: Remove the 2nd element, nums becomes [0,2,0,0,1] and the maximum segment sum is 2 for segment [2]. \nQuery 4: Remove the 4th element, nums becomes [0,2,0,0,0] and the maximum segment sum is 2 for segment [2]. \nQuery 5: Remove the 1st element, nums becomes [0,0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [14,7,2,2,0].\nExample 2:\n\nInput: nums = [3,2,11,1], removeQueries = [3,2,1,0]\nOutput: [16,5,3,0]\nExplanation: Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 3rd element, nums becomes [3,2,11,0] and the maximum segment sum is 16 for segment [3,2,11].\nQuery 2: Remove the 2nd element, nums becomes [3,2,0,0] and the maximum segment sum is 5 for segment [3,2].\nQuery 3: Remove the 1st element, nums becomes [3,0,0,0] and the maximum segment sum is 3 for segment [3].\nQuery 4: Remove the 0th element, nums becomes [0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [16,5,3,0].\n\n\u00a0\nConstraints:\n\nn == nums.length == removeQueries.length\n1 <= n <= 105\n1 <= nums[i] <= 109\n0 <= removeQueries[i] < n\nAll the values of removeQueries are unique.\n\n",
    "starterCode": "class Solution:\n    def maximumSegmentSum(self, nums: List[int], removeQueries: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]",
        "output": "[14, 7, 2, 2, 0]"
      },
      {
        "input": "nums = [5,1,4,3,2], removeQueries = [2,0,4,1,3]",
        "output": "[6, 5, 3, 3, 0]"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000], removeQueries = [0,1,2]",
        "output": "[2000000000, 1000000000, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50], removeQueries = [4,3,2,1,0]",
        "output": "[100, 60, 30, 10, 0]"
      },
      {
        "input": "nums = [5,1,4,3], removeQueries = [1,2,0,3]",
        "output": "[7, 5, 3, 0]"
      },
      {
        "input": "nums = [3,2,11,1], removeQueries = [3,2,1,0]",
        "output": "[16, 5, 3, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50], removeQueries = [0,1,2,3,4]",
        "output": "[140, 120, 90, 50, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50], removeQueries = [2,4,0,1,3]",
        "output": "[90, 40, 40, 40, 0]"
      },
      {
        "input": "nums = [5,2,3,1,4], removeQueries = [2,0,4,3,1]",
        "output": "[7, 5, 2, 2, 0]"
      },
      {
        "input": "nums = [1,1,1,1,1], removeQueries = [0,1,2,3,4]",
        "output": "[4, 3, 2, 1, 0]"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000], removeQueries = [0,1,2]",
        "output": "[2000000000, 1000000000, 0]"
      },
      {
        "input": "nums = [5,1,3,2,4], removeQueries = [2,0,1,3,4]",
        "output": "[6, 6, 6, 4, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], removeQueries = [9,8,7,6,5,4,3,2,1,0]",
        "output": "[45, 36, 28, 21, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "nums = [5,2,3,1,4], removeQueries = [2,0,3,4,1]",
        "output": "[7, 5, 4, 2, 0]"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000], removeQueries = [0,1,2,3,4,5,6,7,8,9]",
        "output": "[9000000000, 8000000000, 7000000000, 6000000000, 5000000000, 4000000000, 3000000000, 2000000000, 1000000000, 0]"
      },
      {
        "input": "nums = [10,100,1000,10000,100000,1000000], removeQueries = [5,4,3,2,1,0]",
        "output": "[111110, 11110, 1110, 110, 10, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], removeQueries = [24,12,6,0,2,10,14,20,22,8,16,18,4,15,11,13,7,19,17,3,5,9,1,21,23,25]",
        "output": "[300, 209, 209, 209, 209, 209, 180, 90, 90, 90, 57, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0]"
      },
      {
        "input": "nums = [9,1,5,3,2,4,8,6,7,10], removeQueries = [0,9,1,8,2,7,3,6,4,5]",
        "output": "[46, 36, 35, 28, 23, 17, 14, 6, 4, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], removeQueries = [0,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[324, 299, 275, 252, 230, 209, 189, 170, 152, 135, 119, 104, 90, 77, 65, 54, 44, 35, 27, 20, 14, 9, 5, 2, 0]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], removeQueries = [0,2,4,6,8,1,3,5,7,9]",
        "output": "[5400, 4900, 4000, 2700, 1000, 1000, 1000, 1000, 1000, 0]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40], removeQueries = [3, 6, 0, 5, 1, 7, 2, 4]",
        "output": "[130, 55, 55, 40, 40, 25, 25, 0]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], removeQueries = [14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]",
        "output": "[105, 104, 102, 99, 95, 90, 84, 77, 69, 60, 50, 39, 27, 14, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], removeQueries = [4,2,6,8,0,1,3,5,7,9]",
        "output": "[400, 400, 270, 100, 100, 100, 100, 100, 100, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], removeQueries = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,0]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], removeQueries = [19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[380, 342, 306, 272, 240, 210, 182, 156, 132, 110, 90, 72, 56, 42, 30, 20, 12, 6, 2, 0]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10], removeQueries = [19,0,18,1,17,2,16,3,15,4,14,5,13,6,12,7,11,8,10,9]",
        "output": "[45, 45, 36, 36, 28, 28, 21, 21, 15, 15, 10, 10, 6, 6, 3, 3, 1, 1, 0, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], removeQueries = [19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[190, 171, 153, 136, 120, 105, 91, 78, 66, 55, 45, 36, 28, 21, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], removeQueries = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], removeQueries = [14,0,7,2,9,4,12,6,11,3,8,13,5,10,1]",
        "output": "[196, 195, 132, 132, 96, 96, 44, 44, 27, 27, 27, 21, 21, 3, 0]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10], removeQueries = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,2,3,4,0,1]",
        "output": "[65, 61, 58, 56, 55, 54, 52, 49, 45, 40, 40, 40, 40, 40, 40, 19, 19, 19, 9, 0]"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1000000000], removeQueries = [2,0,1,3]",
        "output": "[2000000000, 1000000000, 1000000000, 0]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], removeQueries = [4, 3, 2, 1, 0]",
        "output": "[1000, 600, 300, 100, 0]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], removeQueries = [15, 10, 5, 0, 20, 14, 9, 4, 19, 13, 8, 3, 18, 12, 7, 2, 17, 11, 6, 1]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], removeQueries = [5,2,8,0,4,7,1,9,6,3]",
        "output": "[340, 340, 150, 150, 150, 100, 100, 70, 40, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], removeQueries = [5,2,8,1,7,4,3,9,6,0]",
        "output": "[340, 340, 150, 150, 100, 100, 100, 70, 10, 0]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], removeQueries = [0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], removeQueries = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], removeQueries = [0,2,4,6,8,10,12,14,16,18,1,3,5,7,9,11,13,15,17,19]",
        "output": "[190, 153, 120, 91, 66, 45, 28, 19, 19, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1, 0]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500], removeQueries = [14,1,2,12,0,3,4,13,5,6,11,7,8,9,10]",
        "output": "[10500, 10200, 9900, 7200, 7200, 6800, 6300, 6300, 5700, 5000, 3800, 3000, 2100, 1100, 0]"
      },
      {
        "input": "nums = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1], removeQueries = [0,1,2,3,4,9,10,11,12,13,18,19,20,21,22,5,6,7,8,14,15,16,17]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], removeQueries = [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[105, 91, 78, 66, 55, 45, 36, 28, 21, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], removeQueries = [19,9,18,8,17,7,16,6,15,5,14,4,13,3,12,2,11,1,10,0]",
        "output": "[1900, 1350, 1160, 1160, 980, 980, 810, 810, 650, 650, 500, 500, 360, 360, 230, 230, 110, 110, 10, 0]"
      },
      {
        "input": "nums = [31,41,59,26,53,58,97,93,23,84,62,64,33,83,27,95,28,84,19,71], removeQueries = [10,18,8,12,17,19,16,7,5,0,14,2,15,9,6,13,3,4,11,1]",
        "output": "[565, 565, 458, 458, 458, 458, 458, 365, 210, 205, 179, 97, 97, 97, 83, 79, 64, 64, 41, 0]"
      },
      {
        "input": "nums = [3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41], removeQueries = [19,9,29,1,11,21,31,39,3,13,23,33,37,7,17,27,4,14,24,34]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [2,1,3,4,2,3,4,1,5,6,7,8,9,10], removeQueries = [1,3,5,7,9,11,13,0,2,4,6,8,10,12]",
        "output": "[62, 55, 50, 45, 34, 19, 9, 9, 9, 9, 9, 9, 9, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], removeQueries = [0,2,4,6,8,1,3,5,7,9]",
        "output": "[540, 490, 400, 270, 100, 100, 100, 100, 100, 0]"
      },
      {
        "input": "nums = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000], removeQueries = [4, 2, 0, 3, 1]",
        "output": "[10000000000, 4000000000, 4000000000, 2000000000, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], removeQueries = [19,17,15,13,11,9,7,5,3,1,0,2,4,6,8,10,12,14,16,18]",
        "output": "[190, 153, 120, 91, 66, 45, 28, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], removeQueries = [5,3,7,1,9,4,0,6,8,2]",
        "output": "[340, 340, 190, 190, 90, 90, 90, 90, 30, 0]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], removeQueries = [4,2,6,8,0,3,5,7,9,1]",
        "output": "[4000, 4000, 2700, 1000, 1000, 1000, 1000, 1000, 200, 0]"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9,7,9,3,2,3,8,4,6], removeQueries = [19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[89, 85, 77, 74, 72, 69, 60, 53, 44, 39, 36, 31, 25, 23, 14, 9, 8, 4, 3, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], removeQueries = [19,17,15,13,11,9,7,5,3,1,18,16,14,12,10,8,6,4,2,0]",
        "output": "[190, 153, 120, 91, 66, 45, 28, 19, 19, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1, 0]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], removeQueries = [2, 4, 6, 8, 10, 12, 14, 0, 1, 3, 5, 7, 9, 11, 13]",
        "output": "[11400, 10500, 9200, 7500, 5400, 2900, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 0]"
      },
      {
        "input": "nums = [1000000000,500000000,250000000,125000000,62500000,31250000,15625000,7812500,3906250,1953125], removeQueries = [9,8,7,6,5,4,3,2,1,0]",
        "output": "[1996093750, 1992187500, 1984375000, 1968750000, 1937500000, 1875000000, 1750000000, 1500000000, 1000000000, 0]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], removeQueries = [0,2,4,6,8,10,12,14,16,18,1,3,5,7,9,11,13,15,17,19]",
        "output": "[19, 17, 15, 13, 11, 9, 7, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 2, 4, 6, 8, 10], removeQueries = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[46, 39, 34, 31, 30, 28, 24, 18, 10, 0]"
      },
      {
        "input": "nums = [5,1,4,3,9,8,7,2,6], removeQueries = [2,5,0,3,4,8,6,7,1]",
        "output": "[35, 15, 15, 15, 15, 9, 2, 1, 0]"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], removeQueries = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "[190, 171, 153, 136, 120, 105, 91, 78, 66, 55, 45, 36, 28, 21, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], removeQueries = [4,8,3,7,2,6,1,5,0]",
        "output": "[30, 30, 24, 24, 17, 17, 9, 9, 0]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], removeQueries = [0,1,2,3,4,5,6,7,8,9]",
        "output": "[45, 36, 28, 21, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], removeQueries = [19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], removeQueries = [10,9,8,7,6,5,4,3,2,1,0,11,12,13,14,15,16,17,18,19]",
        "output": "[144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 132, 119, 105, 90, 74, 57, 39, 20, 0]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], removeQueries = [5, 7, 3, 1, 9, 0, 8, 6, 2, 4]",
        "output": "[340, 190, 190, 190, 90, 90, 70, 50, 50, 0]"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000], removeQueries = [9,8,7,6,5,4,3,2,1,0]",
        "output": "[9000000000, 8000000000, 7000000000, 6000000000, 5000000000, 4000000000, 3000000000, 2000000000, 1000000000, 0]"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6], removeQueries = [5,0,4,9,2,8,6,3,7,1]",
        "output": "[25, 24, 22, 21, 16, 11, 10, 10, 10, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], removeQueries = [14,1,2,12,0,3,4,13,5,6,11,7,8,9,10]",
        "output": "[105, 102, 99, 72, 72, 68, 63, 63, 57, 50, 38, 30, 21, 11, 0]"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000], removeQueries = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[9000000000, 8000000000, 7000000000, 6000000000, 5000000000, 4000000000, 3000000000, 2000000000, 1000000000, 0]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], removeQueries = [7, 14, 0, 13, 1, 12, 2, 11, 3, 10, 4, 9, 5, 8, 6]",
        "output": "[840, 690, 690, 550, 550, 420, 420, 300, 300, 190, 190, 130, 90, 70, 0]"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], removeQueries = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18]",
        "output": "[90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], removeQueries = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "nums = [1000000000,500000000,250000000,125000000,62500000,31250000,15625000,7812500,3906250,1953125,976562,488281,244140,122070,61035,30517,15258,7629,3814,1907], removeQueries = [19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[1999996181, 1999992367, 1999984738, 1999969480, 1999938963, 1999877928, 1999755858, 1999511718, 1999023437, 1998046875, 1996093750, 1992187500, 1984375000, 1968750000, 1937500000, 1875000000, 1750000000, 1500000000, 1000000000, 0]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200], removeQueries = [11,5,3,7,9,1,8,10,4,2,6,0]",
        "output": "[6600, 4500, 4500, 3000, 1100, 1100, 1100, 700, 700, 700, 100, 0]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], removeQueries = [0,1,2,3,4,5,6,7,8]",
        "output": "[36, 28, 21, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], removeQueries = [0, 8, 1, 7, 2, 6, 3, 5, 4]",
        "output": "[36, 35, 27, 25, 18, 15, 9, 5, 0]"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5], removeQueries = [0,2,4,6,8,10,12,14,1,3,5,7,9,11,13]",
        "output": "[54, 50, 44, 37, 29, 20, 10, 5, 5, 5, 5, 5, 5, 5, 0]"
      },
      {
        "input": "nums = [100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115], removeQueries = [7,15,3,11,13,5,9,1,12,14,8,10,6,2,4,0]",
        "output": "[892, 777, 777, 339, 327, 327, 303, 114, 114, 110, 110, 106, 104, 104, 100, 0]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], removeQueries = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], removeQueries = [14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[105, 91, 78, 66, 55, 45, 36, 28, 21, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "nums = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000], removeQueries = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000, 0]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], removeQueries = [0,8,1,7,2,6,3,5,4]",
        "output": "[36, 35, 27, 25, 18, 15, 9, 5, 0]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], removeQueries = [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[190, 171, 153, 136, 120, 105, 91, 78, 66, 55, 45, 36, 28, 21, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], removeQueries = [15,10,5,0,20,2,7,12,17,3,8,13,18,4,9,14,19,1,6,11,16]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], removeQueries = [10,2,12,4,14,6,16,8,18,0,24,1,22,3,20]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], removeQueries = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "[209, 206, 204, 199, 195, 189, 182, 174, 165, 155, 144, 132, 119, 105, 90, 74, 57, 39, 20, 0]"
      },
      {
        "input": "nums = [5,4,3,2,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], removeQueries = [15,10,5,0,19,14,9,4,18,13,8,3,17,12,7,2,16,11,6,1]",
        "output": "[120, 74, 74, 74, 54, 54, 54, 54, 39, 35, 35, 35, 25, 17, 17, 17, 12, 7, 4, 0]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], removeQueries = [10,5,15,2,18,8,0,17,3,14,9,11,7,1,12,6,13,4,16,19]",
        "output": "[10, 9, 5, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9,2,6,5,3,5,9,2,6], removeQueries = [10,2,16,14,18,6,8,12,4,1,13,7,15,3,9,19,11,5,17,0]",
        "output": "[47, 47, 31, 31, 31, 17, 17, 15, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 0]"
      },
      {
        "input": "nums = [7,2,5,4,6,3,9,8,1,0,8,1,0,8,1,0,8,1,0,8], removeQueries = [15,11,5,13,3,19,9,17,7,1,0,12,4,8,16,2,14,6,10,18]",
        "output": "[54, 53, 26, 26, 26, 26, 18, 18, 14, 9, 9, 9, 9, 9, 9, 9, 9, 8, 0, 0]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], removeQueries = [5, 7, 9, 1, 3, 8, 2, 6, 4, 0]",
        "output": "[340, 190, 150, 120, 90, 70, 70, 50, 10, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], removeQueries = [29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[435, 406, 378, 351, 325, 300, 276, 253, 231, 210, 190, 171, 153, 136, 120, 105, 91, 78, 66, 55, 45, 36, 28, 21, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], removeQueries = [7,3,9,13,5,11,1,6,2,14,8,0,12,10,4]",
        "output": "[840, 840, 650, 360, 360, 150, 150, 150, 150, 130, 130, 130, 110, 50, 0]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], removeQueries = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [5,2,3,1,4,6,8,7,9,10], removeQueries = [4,0,3,2,5,1,8,9,7,6]",
        "output": "[40, 40, 40, 40, 34, 34, 15, 15, 8, 0]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], removeQueries = [0,2,4,6,8,1,3,5,7]",
        "output": "[36, 21, 10, 8, 8, 6, 4, 2, 0]"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000], removeQueries = [0, 1, 2, 3, 4]",
        "output": "[4000000000, 3000000000, 2000000000, 1000000000, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], removeQueries = [49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[1225, 1176, 1128, 1081, 1035, 990, 946, 903, 861, 820, 780, 741, 703, 666, 630, 595, 561, 528, 496, 465, 435, 406, 378, 351, 325, 300, 276, 253, 231, 210, 190, 171, 153, 136, 120, 105, 91, 78, 66, 55, 45, 36, 28, 21, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], removeQueries = [4, 2, 7, 5, 8, 1, 0, 9, 3, 6]",
        "output": "[400, 400, 190, 190, 100, 100, 100, 70, 70, 0]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], removeQueries = [5,7,3,9,1,6,0,8,2,4]",
        "output": "[64, 36, 36, 17, 17, 17, 17, 9, 9, 0]"
      }
    ]
  },
  {
    "id": 2801,
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "problemDescription": "Given two positive integers low and high represented as strings, find the count of stepping numbers in the inclusive range [low, high].\nA stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1.\nReturn an integer denoting the count of stepping numbers in the inclusive range [low, high]. \nSince the answer may be very large, return it modulo 109 + 7.\nNote: A stepping number should not have a leading zero.\n\u00a0\nExample 1:\n\nInput: low = \"1\", high = \"11\"\nOutput: 10\nExplanation: The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10.\nExample 2:\n\nInput: low = \"90\", high = \"101\"\nOutput: 2\nExplanation: The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2. \n\u00a0\nConstraints:\n\n1 <= int(low) <= int(high) < 10100\n1 <= low.length, high.length <= 100\nlow and high consist of only digits.\nlow and high don't have any leading zeros.\n\n",
    "starterCode": "class Solution:\n    def countSteppingNumbers(self, low: str, high: str) -> int:\n        ",
    "testCases": [
      {
        "input": "low = \"123\", high = \"456\"",
        "output": "13"
      },
      {
        "input": "low = \"5555555555\", high = \"6666666666\"",
        "output": "436"
      },
      {
        "input": "low = \"1111111111\", high = \"2222222222\"",
        "output": "307"
      },
      {
        "input": "low = \"1000000000\", high = \"1000000001\"",
        "output": "0"
      },
      {
        "input": "low = \"10\", high = \"100\"",
        "output": "17"
      },
      {
        "input": "low = \"9999999999\", high = \"9999999999\"",
        "output": "0"
      },
      {
        "input": "low = \"1\", high = \"9876543210\"",
        "output": "6111"
      },
      {
        "input": "low = \"1\", high = \"11\"",
        "output": "10"
      },
      {
        "input": "low = \"9876543210\", high = \"9876543210\"",
        "output": "1"
      },
      {
        "input": "low = \"90\", high = \"101\"",
        "output": "2"
      },
      {
        "input": "low = \"10000000000000000000\", high = \"10000000000000000010\"",
        "output": "0"
      },
      {
        "input": "low = \"12345678901234567890\", high = \"98765432109876543210\"",
        "output": "1768804"
      },
      {
        "input": "low = \"12345678901234567890\", high = \"12345678901234567891\"",
        "output": "0"
      },
      {
        "input": "low = \"999999999999999999\", high = \"1000000000000000000\"",
        "output": "0"
      },
      {
        "input": "low = \"321098765432109876543210987\", high = \"432109876543210987654321098\"",
        "output": "25767582"
      },
      {
        "input": "low = \"8888888888\", high = \"8888888899\"",
        "output": "0"
      },
      {
        "input": "low = \"9999999999999999999\", high = \"10000000000000000000\"",
        "output": "0"
      },
      {
        "input": "low = \"3333333333\", high = \"4444444444\"",
        "output": "436"
      },
      {
        "input": "low = \"989898989898989898\", high = \"999999999999999999\"",
        "output": "1"
      },
      {
        "input": "low = \"9\", high = \"9\"",
        "output": "1"
      },
      {
        "input": "low = \"1234567890\", high = \"2345678901\"",
        "output": "333"
      },
      {
        "input": "low = \"1\", high = \"2147483647\"",
        "output": "3627"
      },
      {
        "input": "low = \"1010101010\", high = \"2020202020\"",
        "output": "251"
      },
      {
        "input": "low = \"8888888888\", high = \"9999999999\"",
        "output": "196"
      },
      {
        "input": "low = \"1\", high = \"12345678901234567890\"",
        "output": "2358711"
      },
      {
        "input": "low = \"54321098765432109876543210\", high = \"65432109876543210987654321\"",
        "output": "14851321"
      },
      {
        "input": "low = \"5\", high = \"5555555555\"",
        "output": "4904"
      },
      {
        "input": "low = \"987654321\", high = \"9876543211\"",
        "output": "2931"
      },
      {
        "input": "low = \"54321098765432109876\", high = \"65432109876543210987\"",
        "output": "297140"
      },
      {
        "input": "low = \"5000000000\", high = \"5000000010\"",
        "output": "0"
      },
      {
        "input": "low = \"500\", high = \"600\"",
        "output": "4"
      },
      {
        "input": "low = \"5\", high = \"5\"",
        "output": "1"
      },
      {
        "input": "low = \"12345678912345678912\", high = \"23456789123456789123\"",
        "output": "226942"
      },
      {
        "input": "low = \"8888888888\", high = \"8989898989\"",
        "output": "70"
      },
      {
        "input": "low = \"9876543210\", high = \"9876543219\"",
        "output": "2"
      },
      {
        "input": "low = \"888888888\", high = \"999999999\"",
        "output": "105"
      },
      {
        "input": "low = \"1000000000\", high = \"9999999999\"",
        "output": "2986"
      },
      {
        "input": "low = \"8989898989\", high = \"9898989898\"",
        "output": "127"
      },
      {
        "input": "low = \"1212121212\", high = \"2121212121\"",
        "output": "202"
      },
      {
        "input": "low = \"987654321\", high = \"987654322\"",
        "output": "1"
      },
      {
        "input": "low = \"10000000000000000000\", high = \"10000000000000000001\"",
        "output": "0"
      },
      {
        "input": "low = \"54321\", high = \"65432\"",
        "output": "17"
      },
      {
        "input": "low = \"8999999999999999999\", high = \"9000000000000000001\"",
        "output": "0"
      },
      {
        "input": "low = \"1010101010\", high = \"1121212121\"",
        "output": "70"
      },
      {
        "input": "low = \"1010101010\", high = \"9090909090\"",
        "output": "2860"
      },
      {
        "input": "low = \"9999999999\", high = \"10000000000\"",
        "output": "0"
      },
      {
        "input": "low = \"9999999990\", high = \"9999999999\"",
        "output": "0"
      },
      {
        "input": "low = \"9876543210987654321\", high = \"9876543210987654322\"",
        "output": "0"
      },
      {
        "input": "low = \"1\", high = \"9999999999\"",
        "output": "6236"
      },
      {
        "input": "low = \"98765432109876543210\", high = \"98765432109876543211\"",
        "output": "0"
      },
      {
        "input": "low = \"1234567890\", high = \"1234567899\"",
        "output": "1"
      },
      {
        "input": "low = \"123\", high = \"45678901234567890123\"",
        "output": "3157659"
      },
      {
        "input": "low = \"7777777777\", high = \"8888888888\"",
        "output": "307"
      },
      {
        "input": "low = \"12121212121212121212\", high = \"13131313131313131313\"",
        "output": "102885"
      },
      {
        "input": "low = \"321\", high = \"654\"",
        "output": "13"
      },
      {
        "input": "low = \"9876543210123456789\", high = \"9876543210123456790\"",
        "output": "1"
      },
      {
        "input": "low = \"1010101010\", high = \"1111111111\"",
        "output": "70"
      },
      {
        "input": "low = \"98765432101234567890\", high = \"98765432101234567899\"",
        "output": "1"
      },
      {
        "input": "low = \"4444444444\", high = \"5555555555\"",
        "output": "456"
      },
      {
        "input": "low = \"200\", high = \"210\"",
        "output": "1"
      },
      {
        "input": "low = \"1\", high = \"1234567890\"",
        "output": "3500"
      },
      {
        "input": "low = \"987654321\", high = \"9876543210\"",
        "output": "2931"
      },
      {
        "input": "low = \"9876543210\", high = \"10123456789\"",
        "output": "252"
      },
      {
        "input": "low = \"100000000000000000000000000000000000000000000000000\", high = \"99999999999999999999999999999999999999999999999999\"",
        "output": "0"
      },
      {
        "input": "low = \"99999999999999999999\", high = \"100000000000000000000\"",
        "output": "0"
      },
      {
        "input": "low = \"1111111111111111111\", high = \"1212121212121212121\"",
        "output": "8551"
      },
      {
        "input": "low = \"1111111111\", high = \"1111111111\"",
        "output": "0"
      },
      {
        "input": "low = \"8989898989\", high = \"9090909090\"",
        "output": "1"
      },
      {
        "input": "low = \"98765432101234567890\", high = \"98765432101234567891\"",
        "output": "0"
      },
      {
        "input": "low = \"5432109876\", high = \"5432109877\"",
        "output": "0"
      },
      {
        "input": "low = \"50505050505050505050\", high = \"60606060606060606060\"",
        "output": "298777"
      },
      {
        "input": "low = \"11111111111111111111\", high = \"22222222222222222222\"",
        "output": "204289"
      },
      {
        "input": "low = \"98765432101234567890\", high = \"98765432109876543210\"",
        "output": "1"
      },
      {
        "input": "low = \"10000000000\", high = \"20000000000\"",
        "output": "460"
      },
      {
        "input": "low = \"123\", high = \"135\"",
        "output": "1"
      },
      {
        "input": "low = \"1000000000\", high = \"2000000000\"",
        "output": "251"
      },
      {
        "input": "low = \"123456789\", high = \"987654321\"",
        "output": "1362"
      },
      {
        "input": "low = \"98765432109876543210987654321\", high = \"98765432109876543210987654322\"",
        "output": "0"
      },
      {
        "input": "low = \"98765\", high = \"98766\"",
        "output": "1"
      },
      {
        "input": "low = \"123456789\", high = \"1234567891\"",
        "output": "1681"
      },
      {
        "input": "low = \"987654321\", high = \"9876543219\"",
        "output": "2932"
      },
      {
        "input": "low = \"987654321\", high = \"987654329\"",
        "output": "2"
      },
      {
        "input": "low = \"543210\", high = \"6543210\"",
        "output": "380"
      },
      {
        "input": "low = \"1234567890\", high = \"1234567891\"",
        "output": "0"
      },
      {
        "input": "low = \"123\", high = \"321\"",
        "output": "6"
      },
      {
        "input": "low = \"1010101010101010101\", high = \"1111111111111111111\"",
        "output": "22950"
      },
      {
        "input": "low = \"8999999999\", high = \"9000000000\"",
        "output": "0"
      },
      {
        "input": "low = \"555555555\", high = \"666666666\"",
        "output": "228"
      },
      {
        "input": "low = \"10101010101010101010\", high = \"21212121212121212121\"",
        "output": "195908"
      },
      {
        "input": "low = \"1\", high = \"10000000000000000000\"",
        "output": "2194764"
      },
      {
        "input": "low = \"12345\", high = \"123456789012345\"",
        "output": "90485"
      },
      {
        "input": "low = \"2222222222\", high = \"3333333333\"",
        "output": "389"
      },
      {
        "input": "low = \"1\", high = \"99999999999999999999999999999999999999999999999999\"",
        "output": "254219541"
      },
      {
        "input": "low = \"123454321\", high = \"123456789\"",
        "output": "16"
      },
      {
        "input": "low = \"1010101010\", high = \"1010101011\"",
        "output": "1"
      },
      {
        "input": "low = \"112233445566778899\", high = \"122334455667788990\"",
        "output": "12190"
      },
      {
        "input": "low = \"100000000000000000000000000000000000000000000000000\", high = \"200000000000000000000000000000000000000000000000000\"",
        "output": "251590529"
      },
      {
        "input": "low = \"1111111111\", high = \"9999999999\"",
        "output": "2916"
      },
      {
        "input": "low = \"10101010101010101010\", high = \"20202020202020202020\"",
        "output": "164407"
      },
      {
        "input": "low = \"123\", high = \"133\"",
        "output": "1"
      },
      {
        "input": "low = \"10\", high = \"1111111111\"",
        "output": "3311"
      }
    ]
  },
  {
    "id": 996,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Hash Table",
      "Math",
      "Dynamic Programming",
      "Backtracking",
      "Bitmask"
    ],
    "problemDescription": "An array is squareful if the sum of every pair of adjacent elements is a perfect square.\nGiven an integer array nums, return the number of permutations of nums that are squareful.\nTwo permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].\n\u00a0\nExample 1:\n\nInput: nums = [1,17,8]\nOutput: 2\nExplanation: [1,8,17] and [17,8,1] are the valid permutations.\n\nExample 2:\n\nInput: nums = [2,2,2]\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 12\n0 <= nums[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def numSquarefulPerms(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [9,0,16,25,36]",
        "output": "0"
      },
      {
        "input": "nums = [2,2,2]",
        "output": "1"
      },
      {
        "input": "nums = [1,17,8]",
        "output": "2"
      },
      {
        "input": "nums = [9,0,9]",
        "output": "1"
      },
      {
        "input": "nums = [0,0,0]",
        "output": "1"
      },
      {
        "input": "nums = [4,6,15,33,50]",
        "output": "0"
      },
      {
        "input": "nums = [0,1,1,0]",
        "output": "3"
      },
      {
        "input": "nums = [16,9,4,0,25]",
        "output": "0"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [4,6,15,33]",
        "output": "0"
      },
      {
        "input": "nums = [9,0,4,10,9]",
        "output": "0"
      },
      {
        "input": "nums = [0,0,0,0]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,6,10]",
        "output": "0"
      },
      {
        "input": "nums = [25,10,5,15,20]",
        "output": "0"
      },
      {
        "input": "nums = [9,4,1,4,9]",
        "output": "0"
      },
      {
        "input": "nums = [1,3,5,7,9]",
        "output": "0"
      },
      {
        "input": "nums = [2,8,10,18,26]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 5, 10, 17, 26, 37, 50, 65, 82]",
        "output": "0"
      },
      {
        "input": "nums = [0,1,3,6,10,15,21,28,36,45,55,66]",
        "output": "12"
      },
      {
        "input": "nums = [0, 4, 9, 16, 25, 36, 49]",
        "output": "0"
      },
      {
        "input": "nums = [2,7,8,18,20,25]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 6, 10, 15, 21, 28, 36, 45]",
        "output": "4"
      },
      {
        "input": "nums = [4,6,9,11,14,16,19,21,25,27,30,32]",
        "output": "0"
      },
      {
        "input": "nums = [100,121,144,169,196,225,256,289,324,361,400,441]",
        "output": "0"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10,11]",
        "output": "0"
      },
      {
        "input": "nums = [2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156]",
        "output": "0"
      },
      {
        "input": "nums = [10, 15, 21, 26, 30, 35, 40]",
        "output": "0"
      },
      {
        "input": "nums = [16, 9, 0, 4, 25, 1]",
        "output": "0"
      },
      {
        "input": "nums = [25, 36, 49, 64, 81, 100, 121]",
        "output": "0"
      },
      {
        "input": "nums = [4,6,9,10,15,21,30,36,45,55]",
        "output": "0"
      },
      {
        "input": "nums = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144]",
        "output": "0"
      },
      {
        "input": "nums = [0,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "output": "0"
      },
      {
        "input": "nums = [4,9,16,25,36,49,64,81,100,121,144,169]",
        "output": "0"
      },
      {
        "input": "nums = [18, 20, 22, 24, 26, 28, 30, 32, 34, 36]",
        "output": "0"
      },
      {
        "input": "nums = [4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66]",
        "output": "0"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21]",
        "output": "0"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10,100]",
        "output": "0"
      },
      {
        "input": "nums = [8,18,28,38,48,58,68,78,88,98]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,5,6,7,8,9,10,11,12,13]",
        "output": "0"
      },
      {
        "input": "nums = [0,0,1,1,2,2,3,3,4,4,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [10,15,20,25,30,35,40,45,50,55,60]",
        "output": "0"
      },
      {
        "input": "nums = [5, 13, 29, 34, 37, 41, 50, 53, 61, 65, 72, 74]",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 6, 11, 15, 20]",
        "output": "0"
      },
      {
        "input": "nums = [0, 2, 8, 18, 32, 50, 72, 98, 128, 162, 200, 242]",
        "output": "0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,31,37]",
        "output": "0"
      },
      {
        "input": "nums = [4, 1, 3, 0, 9, 16, 25, 36, 49]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "0"
      },
      {
        "input": "nums = [25,36,49,64,81,100,121,144,169,196,225,256]",
        "output": "0"
      },
      {
        "input": "nums = [2,7,11,15,20,25]",
        "output": "0"
      },
      {
        "input": "nums = [81,180,144,121,100,25,0]",
        "output": "0"
      },
      {
        "input": "nums = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66]",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 3, 6, 10, 15, 21]",
        "output": "0"
      },
      {
        "input": "nums = [81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,121]",
        "output": "0"
      },
      {
        "input": "nums = [2, 8, 14, 20, 26, 32, 38, 44, 50, 56, 62, 68]",
        "output": "0"
      },
      {
        "input": "nums = [8, 17, 28, 39, 50, 61, 72, 83]",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 6, 7, 8, 15, 21, 30, 35, 42, 48, 55]",
        "output": "0"
      },
      {
        "input": "nums = [5,7,8,12,13,16,17,24,25,28,32,33]",
        "output": "0"
      },
      {
        "input": "nums = [1,16,81,144,121,100,25]",
        "output": "0"
      },
      {
        "input": "nums = [50,100,150,200,250,300,350,400,450,500,550,600]",
        "output": "0"
      },
      {
        "input": "nums = [1,16,9,4,0,36,25,10]",
        "output": "0"
      },
      {
        "input": "nums = [49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82]",
        "output": "0"
      },
      {
        "input": "nums = [4, 6, 9, 10, 15, 21, 25]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256]",
        "output": "0"
      },
      {
        "input": "nums = [0,0,1,1,4,4,9,9,16,16,25,25]",
        "output": "0"
      },
      {
        "input": "nums = [4, 6, 9, 13, 15, 17, 21, 25, 27, 31]",
        "output": "0"
      },
      {
        "input": "nums = [5, 13, 25, 41, 61, 85, 113, 145, 181, 221, 265]",
        "output": "0"
      },
      {
        "input": "nums = [8,15,18,23,26,32,35,38,41]",
        "output": "0"
      },
      {
        "input": "nums = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121]",
        "output": "0"
      },
      {
        "input": "nums = [2,3,6,5,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [8, 7, 15, 1, 28, 25, 24]",
        "output": "0"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 2, 3, 6, 10]",
        "output": "0"
      },
      {
        "input": "nums = [144, 169, 196, 225, 256, 289, 324, 361]",
        "output": "0"
      },
      {
        "input": "nums = [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]",
        "output": "0"
      },
      {
        "input": "nums = [8,18,28,38,48,58,68,78,88,98,108,118]",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78]",
        "output": "12"
      },
      {
        "input": "nums = [1, 4, 9, 16, 25, 36, 49]",
        "output": "0"
      },
      {
        "input": "nums = [8,7,3,12,5,13,25,16,9]",
        "output": "0"
      },
      {
        "input": "nums = [16,9,4,1,0,25,36,49,64,81]",
        "output": "0"
      },
      {
        "input": "nums = [0, 1, 4, 9, 16, 25, 36, 49]",
        "output": "0"
      },
      {
        "input": "nums = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]",
        "output": "0"
      },
      {
        "input": "nums = [36,100,144,196,256,324,400,484,576,676,784,900]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,120]",
        "output": "0"
      },
      {
        "input": "nums = [0,0,1,1,2,2,3,3,4,4]",
        "output": "0"
      },
      {
        "input": "nums = [4,6,9,10,13,15,16,18,19,20,25,28]",
        "output": "0"
      },
      {
        "input": "nums = [1,4,9,16,25,36,49,64,81,100,121,144]",
        "output": "0"
      },
      {
        "input": "nums = [3, 12, 27, 48, 75, 108, 147, 192, 243, 300, 363, 432]",
        "output": "0"
      },
      {
        "input": "nums = [49,36,25,16,9,4,1,0,81,64,49,36]",
        "output": "0"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24]",
        "output": "0"
      },
      {
        "input": "nums = [10, 21, 35, 51, 70, 92, 117, 144, 173, 204, 237]",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 6, 11, 19, 20]",
        "output": "0"
      },
      {
        "input": "nums = [8, 15, 24, 35, 46, 57, 68, 79, 90, 101, 112, 123]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45]",
        "output": "0"
      },
      {
        "input": "nums = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "output": "0"
      },
      {
        "input": "nums = [1,4,9,16,25,36,49,64,81]",
        "output": "0"
      },
      {
        "input": "nums = [1,4,9,16,25,36,49,64,81,100]",
        "output": "0"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "1"
      },
      {
        "input": "nums = [1,17,8,2,18,20,32,50,33,6]",
        "output": "0"
      },
      {
        "input": "nums = [1, 10, 19, 28, 37, 46, 55, 64, 73, 82, 91, 100]",
        "output": "0"
      },
      {
        "input": "nums = [50, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324]",
        "output": "0"
      },
      {
        "input": "nums = [10, 15, 21, 26, 35, 40, 51, 56, 65, 70, 85, 90]",
        "output": "0"
      },
      {
        "input": "nums = [0,1,4,9,16,25,36,49]",
        "output": "0"
      },
      {
        "input": "nums = [1,3,6,10,15,21,28,36,45,55,66,78]",
        "output": "12"
      }
    ]
  },
  {
    "id": 1998,
    "difficulty": "Hard",
    "tags": [
      "Union Find",
      "Array",
      "Math",
      "Number Theory",
      "Sorting"
    ],
    "problemDescription": "You are given an integer array nums, and you can perform the following operation any number of times on nums:\n\nSwap the positions of two elements nums[i] and nums[j] if gcd(nums[i], nums[j]) > 1 where gcd(nums[i], nums[j]) is the greatest common divisor of nums[i] and nums[j].\n\nReturn true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.\n\u00a0\nExample 1:\n\nInput: nums = [7,21,3]\nOutput: true\nExplanation: We can sort [7,21,3] by performing the following operations:\n- Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3]\n- Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21]\n\nExample 2:\n\nInput: nums = [5,2,6,2]\nOutput: false\nExplanation: It is impossible to sort the array because 5 cannot be swapped with any other element.\n\nExample 3:\n\nInput: nums = [10,5,9,3,15]\nOutput: true\nWe can sort [10,5,9,3,15] by performing the following operations:\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10]\n- Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10]\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 3 * 104\n2 <= nums[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def gcdSort(self, nums: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "nums = [12,15,18,20,25]",
        "output": "True"
      },
      {
        "input": "nums = [7,21,3]",
        "output": "True"
      },
      {
        "input": "nums = [8,4,12,6]",
        "output": "True"
      },
      {
        "input": "nums = [2,3,5,7,11]",
        "output": "True"
      },
      {
        "input": "nums = [2,4,6,8,10]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "True"
      },
      {
        "input": "nums = [18,9,27,3,6]",
        "output": "True"
      },
      {
        "input": "nums = [3,9,6,18,27]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "True"
      },
      {
        "input": "nums = [37,49,111,143,169]",
        "output": "True"
      },
      {
        "input": "nums = [100,200,400,800,1600]",
        "output": "True"
      },
      {
        "input": "nums = [22,44,11,66,33]",
        "output": "True"
      },
      {
        "input": "nums = [100,200,300,400,500]",
        "output": "True"
      },
      {
        "input": "nums = [83,97,101,103,107]",
        "output": "True"
      },
      {
        "input": "nums = [100000,99998,99999,99997,99996]",
        "output": "False"
      },
      {
        "input": "nums = [10,5,9,3,15]",
        "output": "True"
      },
      {
        "input": "nums = [105,70,30,210,42]",
        "output": "True"
      },
      {
        "input": "nums = [30,42,70,105,35]",
        "output": "True"
      },
      {
        "input": "nums = [5,2,6,2]",
        "output": "False"
      },
      {
        "input": "nums = [56, 72, 88, 104, 120, 136, 152]",
        "output": "True"
      },
      {
        "input": "nums = [121, 132, 143, 154, 165, 176, 187, 198, 209]",
        "output": "True"
      },
      {
        "input": "nums = [48, 64, 80, 96, 112]",
        "output": "True"
      },
      {
        "input": "nums = [17, 34, 51, 68, 85, 102, 119]",
        "output": "True"
      },
      {
        "input": "nums = [210, 315, 420, 525, 630, 735]",
        "output": "True"
      },
      {
        "input": "nums = [105, 45, 63, 21, 315]",
        "output": "True"
      },
      {
        "input": "nums = [100, 50, 25, 125, 200, 150]",
        "output": "True"
      },
      {
        "input": "nums = [91, 182, 273, 364, 455]",
        "output": "True"
      },
      {
        "input": "nums = [121, 132, 143, 154, 165, 176]",
        "output": "True"
      },
      {
        "input": "nums = [16, 32, 48, 64, 80, 96, 112, 128, 144]",
        "output": "True"
      },
      {
        "input": "nums = [70, 35, 28, 56, 14, 18]",
        "output": "True"
      },
      {
        "input": "nums = [14, 21, 28, 35, 42, 49, 56, 63, 70]",
        "output": "True"
      },
      {
        "input": "nums = [32, 48, 64, 80, 96, 112]",
        "output": "True"
      },
      {
        "input": "nums = [31, 62, 93, 124, 155, 186, 217, 248, 279, 310]",
        "output": "True"
      },
      {
        "input": "nums = [30, 25, 20, 15, 10, 5]",
        "output": "True"
      },
      {
        "input": "nums = [30, 45, 60, 75, 90, 105]",
        "output": "True"
      },
      {
        "input": "nums = [44, 55, 66, 77, 88, 99, 110, 121]",
        "output": "True"
      },
      {
        "input": "nums = [15, 20, 25, 30, 35]",
        "output": "True"
      },
      {
        "input": "nums = [33, 66, 99, 132, 165]",
        "output": "True"
      },
      {
        "input": "nums = [49, 14, 7, 98, 28]",
        "output": "True"
      },
      {
        "input": "nums = [6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "True"
      },
      {
        "input": "nums = [21, 42, 63, 84, 105, 126, 147, 168, 189]",
        "output": "True"
      },
      {
        "input": "nums = [49, 42, 28, 35, 70]",
        "output": "True"
      },
      {
        "input": "nums = [123, 246, 369, 492, 615, 738, 861, 984]",
        "output": "True"
      },
      {
        "input": "nums = [84, 126, 168, 210, 252, 294, 336, 378, 420]",
        "output": "True"
      },
      {
        "input": "nums = [84, 28, 42, 70, 56]",
        "output": "True"
      },
      {
        "input": "nums = [101, 202, 303, 404, 505, 606]",
        "output": "True"
      },
      {
        "input": "nums = [56, 14, 28, 7, 98, 49]",
        "output": "True"
      },
      {
        "input": "nums = [45, 30, 60, 90, 120, 150]",
        "output": "True"
      },
      {
        "input": "nums = [100, 50, 75, 25, 150]",
        "output": "True"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65]",
        "output": "True"
      },
      {
        "input": "nums = [23, 46, 69, 92, 115, 138, 161, 184]",
        "output": "True"
      },
      {
        "input": "nums = [121, 221, 143, 169, 13]",
        "output": "True"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500]",
        "output": "True"
      },
      {
        "input": "nums = [462, 882, 924, 1092, 1260]",
        "output": "True"
      },
      {
        "input": "nums = [360, 720, 1080, 1440, 1800, 2160]",
        "output": "True"
      },
      {
        "input": "nums = [1000, 500, 250, 125, 625]",
        "output": "True"
      },
      {
        "input": "nums = [48, 120, 180, 240, 300]",
        "output": "True"
      },
      {
        "input": "nums = [16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240]",
        "output": "True"
      },
      {
        "input": "nums = [210, 70, 35, 14, 105]",
        "output": "True"
      },
      {
        "input": "nums = [1024, 2048, 512, 256, 128]",
        "output": "True"
      },
      {
        "input": "nums = [56, 112, 168, 224, 280]",
        "output": "True"
      },
      {
        "input": "nums = [100, 25, 50, 20, 40]",
        "output": "True"
      },
      {
        "input": "nums = [24, 36, 48, 12, 60]",
        "output": "True"
      },
      {
        "input": "nums = [99, 33, 66, 22, 11, 132]",
        "output": "True"
      },
      {
        "input": "nums = [21, 42, 63, 84, 105]",
        "output": "True"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78]",
        "output": "True"
      },
      {
        "input": "nums = [30, 45, 60, 75, 90]",
        "output": "True"
      },
      {
        "input": "nums = [77, 154, 231, 308, 385]",
        "output": "True"
      },
      {
        "input": "nums = [91, 130, 169, 182, 273, 338]",
        "output": "True"
      },
      {
        "input": "nums = [22, 15, 45, 33, 10, 55]",
        "output": "True"
      },
      {
        "input": "nums = [18, 27, 36, 45, 54, 63, 72, 81, 90]",
        "output": "True"
      },
      {
        "input": "nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]",
        "output": "True"
      },
      {
        "input": "nums = [171, 342, 513, 684, 855]",
        "output": "True"
      },
      {
        "input": "nums = [33, 55, 66, 88, 110, 121, 132, 143]",
        "output": "True"
      },
      {
        "input": "nums = [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]",
        "output": "True"
      },
      {
        "input": "nums = [45, 90, 135, 180, 225]",
        "output": "True"
      },
      {
        "input": "nums = [20, 40, 60, 80, 100, 120, 140, 160, 180]",
        "output": "True"
      },
      {
        "input": "nums = [100, 50, 25, 20, 125]",
        "output": "True"
      },
      {
        "input": "nums = [18, 24, 30, 36, 42]",
        "output": "True"
      },
      {
        "input": "nums = [1000, 250, 500, 200, 750, 125, 375, 625, 875, 1250]",
        "output": "True"
      },
      {
        "input": "nums = [102, 136, 170, 204, 238, 272, 306, 340, 374]",
        "output": "True"
      },
      {
        "input": "nums = [19, 38, 57, 76, 95, 114, 133, 152, 171, 190]",
        "output": "True"
      },
      {
        "input": "nums = [27, 54, 81, 108, 135, 162, 189, 216]",
        "output": "True"
      },
      {
        "input": "nums = [119, 238, 357, 476, 595]",
        "output": "True"
      },
      {
        "input": "nums = [81, 27, 54, 162, 324, 486]",
        "output": "True"
      },
      {
        "input": "nums = [84, 12, 14, 21, 63]",
        "output": "True"
      },
      {
        "input": "nums = [15, 30, 45, 60, 75, 90, 105]",
        "output": "True"
      },
      {
        "input": "nums = [18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108]",
        "output": "True"
      },
      {
        "input": "nums = [49, 63, 77, 91, 105, 119, 133, 147, 161, 175, 189, 203, 217]",
        "output": "True"
      },
      {
        "input": "nums = [72, 108, 144, 180, 216, 252, 288, 324, 360, 396]",
        "output": "True"
      },
      {
        "input": "nums = [225, 150, 100, 50, 25, 75]",
        "output": "True"
      },
      {
        "input": "nums = [121, 110, 99, 88, 77, 66, 55, 44, 33, 22, 11]",
        "output": "True"
      },
      {
        "input": "nums = [22, 44, 66, 88, 110, 132, 154, 176, 198]",
        "output": "True"
      },
      {
        "input": "nums = [1000, 500, 250, 125, 2000]",
        "output": "True"
      },
      {
        "input": "nums = [135, 90, 45, 60, 30]",
        "output": "True"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45, 54]",
        "output": "True"
      },
      {
        "input": "nums = [17, 34, 51, 68, 85]",
        "output": "True"
      },
      {
        "input": "nums = [105, 15, 35, 21, 63]",
        "output": "True"
      },
      {
        "input": "nums = [81, 135, 207, 279, 351, 423]",
        "output": "True"
      },
      {
        "input": "nums = [36, 48, 60, 72, 84, 96]",
        "output": "True"
      },
      {
        "input": "nums = [180, 120, 90, 60, 45, 30, 20, 15, 10, 5]",
        "output": "True"
      },
      {
        "input": "nums = [28, 14, 42, 70, 98]",
        "output": "True"
      },
      {
        "input": "nums = [17, 19, 23, 29, 31, 37]",
        "output": "True"
      },
      {
        "input": "nums = [81, 27, 54, 108, 162]",
        "output": "True"
      },
      {
        "input": "nums = [121, 11, 22, 33, 44, 55]",
        "output": "True"
      },
      {
        "input": "nums = [165, 330, 495, 660, 825]",
        "output": "True"
      },
      {
        "input": "nums = [49, 98, 147, 196, 245]",
        "output": "True"
      },
      {
        "input": "nums = [121, 44, 88, 22, 176]",
        "output": "True"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85]",
        "output": "True"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 105]",
        "output": "True"
      },
      {
        "input": "nums = [17, 19, 23, 29, 31]",
        "output": "True"
      },
      {
        "input": "nums = [315, 105, 35, 7, 14, 21, 42, 63, 84]",
        "output": "True"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "output": "True"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65]",
        "output": "True"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55]",
        "output": "True"
      },
      {
        "input": "nums = [1001, 10010, 100100, 1001000, 10010000]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [7, 49, 343, 2401, 16807]",
        "output": "True"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "True"
      },
      {
        "input": "nums = [19, 38, 57, 76, 95, 114, 133, 152]",
        "output": "True"
      },
      {
        "input": "nums = [14, 21, 35, 49, 70]",
        "output": "True"
      },
      {
        "input": "nums = [33, 66, 99, 132, 165, 198]",
        "output": "True"
      },
      {
        "input": "nums = [18, 24, 30, 36, 42, 48]",
        "output": "True"
      },
      {
        "input": "nums = [22, 44, 66, 88, 110]",
        "output": "True"
      },
      {
        "input": "nums = [84, 56, 28, 14, 7, 49, 35]",
        "output": "True"
      },
      {
        "input": "nums = [48, 64, 80, 96, 112, 128]",
        "output": "True"
      },
      {
        "input": "nums = [1024, 2048, 4096, 8192, 16384, 32768]",
        "output": "True"
      },
      {
        "input": "nums = [56, 63, 70, 77, 84, 91]",
        "output": "True"
      },
      {
        "input": "nums = [99, 33, 66, 132, 264]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 50000, 25000, 12500, 6250]",
        "output": "True"
      },
      {
        "input": "nums = [77, 91, 143, 1001, 1001, 143]",
        "output": "True"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700]",
        "output": "True"
      },
      {
        "input": "nums = [77, 55, 99, 110, 132]",
        "output": "True"
      },
      {
        "input": "nums = [30, 45, 60, 15, 90]",
        "output": "True"
      },
      {
        "input": "nums = [72, 24, 16, 8, 40]",
        "output": "True"
      },
      {
        "input": "nums = [42, 21, 7, 14, 28]",
        "output": "True"
      },
      {
        "input": "nums = [77, 143, 169, 187, 209, 221, 247, 299, 323, 341]",
        "output": "True"
      },
      {
        "input": "nums = [15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "True"
      },
      {
        "input": "nums = [121, 143, 169, 187, 209]",
        "output": "True"
      },
      {
        "input": "nums = [14, 21, 28, 35, 42, 49, 56, 63]",
        "output": "True"
      },
      {
        "input": "nums = [14, 21, 28, 35, 42, 49]",
        "output": "True"
      },
      {
        "input": "nums = [49, 147, 245, 343, 441, 539]",
        "output": "True"
      },
      {
        "input": "nums = [22, 15, 10, 18, 30]",
        "output": "True"
      },
      {
        "input": "nums = [64, 32, 16, 8, 4, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [101, 103, 107, 109, 113, 127, 131, 137, 139, 149]",
        "output": "True"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45, 54, 63, 72, 81]",
        "output": "True"
      },
      {
        "input": "nums = [16, 32, 64, 128, 256, 512, 1024]",
        "output": "True"
      },
      {
        "input": "nums = [102, 204, 306, 408, 510]",
        "output": "True"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000]",
        "output": "True"
      },
      {
        "input": "nums = [60, 120, 180, 240, 300, 360]",
        "output": "True"
      },
      {
        "input": "nums = [42, 28, 70, 14, 35]",
        "output": "True"
      },
      {
        "input": "nums = [22, 33, 44, 55, 66]",
        "output": "True"
      },
      {
        "input": "nums = [77, 49, 35, 21, 14, 7]",
        "output": "True"
      },
      {
        "input": "nums = [23, 46, 69, 92, 115]",
        "output": "True"
      },
      {
        "input": "nums = [16, 8, 4, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [101, 202, 303, 404, 505]",
        "output": "True"
      },
      {
        "input": "nums = [102, 68, 34, 17, 51, 85]",
        "output": "True"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78, 91, 104, 117]",
        "output": "True"
      },
      {
        "input": "nums = [100, 105, 140, 210, 70]",
        "output": "True"
      },
      {
        "input": "nums = [11, 22, 33, 44, 55, 66]",
        "output": "True"
      },
      {
        "input": "nums = [17, 34, 51, 68, 85, 102, 119, 136, 153]",
        "output": "True"
      },
      {
        "input": "nums = [256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "True"
      },
      {
        "input": "nums = [1000, 500, 250, 125, 2000, 10000, 2500]",
        "output": "True"
      },
      {
        "input": "nums = [30, 45, 60, 75, 90, 105, 120]",
        "output": "True"
      },
      {
        "input": "nums = [12, 18, 24, 30, 36, 42]",
        "output": "True"
      },
      {
        "input": "nums = [25, 45, 65, 85, 105]",
        "output": "True"
      },
      {
        "input": "nums = [100, 200, 150, 300, 250]",
        "output": "True"
      },
      {
        "input": "nums = [14, 28, 42, 56, 70]",
        "output": "True"
      },
      {
        "input": "nums = [81, 135, 225, 315, 405, 525, 675]",
        "output": "True"
      },
      {
        "input": "nums = [121, 132, 220, 110, 55]",
        "output": "True"
      }
    ]
  },
  {
    "id": 220,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Bucket Sort",
      "Ordered Set",
      "Sorting",
      "Sliding Window"
    ],
    "problemDescription": "You are given an integer array nums and two integers indexDiff and valueDiff.\nFind a pair of indices (i, j) such that:\n\ni != j,\nabs(i - j) <= indexDiff.\nabs(nums[i] - nums[j]) <= valueDiff, and\n\nReturn true if such pair exists or false otherwise.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\nOutput: true\nExplanation: We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --> 0 != 3\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\nabs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0\n\nExample 2:\n\nInput: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\nOutput: false\nExplanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 105\n-109 <= nums[i] <= 109\n1 <= indexDiff <= nums.length\n0 <= valueDiff <= 109\n\n",
    "starterCode": "class Solution:\n    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "nums = [1,3,1,3,1,3], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,2,0,1,4,1,3], indexDiff = 5, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [10,10,10,10,10,10], indexDiff = 3, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5], indexDiff = 1, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [8,7,15,1,6,1,9,15], indexDiff = 1, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [2,1,2,3,1,5], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,1], indexDiff = 3, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [2147483647,-2147483647], indexDiff = 1, valueDiff = 2147483647",
        "output": "False"
      },
      {
        "input": "nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3",
        "output": "False"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 5, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,2,0,1,0,1], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], indexDiff = 4, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [10,10,10,10], indexDiff = 2, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5], indexDiff = 2, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [-1,2147483647], indexDiff = 1, valueDiff = 2147483647",
        "output": "False"
      },
      {
        "input": "nums = [4,1,2], indexDiff = 1, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], indexDiff = 1, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,10,20,30,40,50,60,70,80,90], indexDiff = 2, valueDiff = 20",
        "output": "True"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], indexDiff = 5, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1000000000], indexDiff = 3, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000], indexDiff = 4, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,1,2,3,4,5,6,7,8,9,10], indexDiff = 8, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], indexDiff = 1, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], indexDiff = 10, valueDiff = 10",
        "output": "True"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], indexDiff = 5, valueDiff = 10",
        "output": "True"
      },
      {
        "input": "nums = [1000000,2000000,3000000,4000000,5000000,6000000,7000000,8000000,9000000,10000000], indexDiff = 9, valueDiff = 3000000",
        "output": "True"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], indexDiff = 1, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 3, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], indexDiff = 8, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [-1000000000, 1000000000, -999999999, 999999999, -1000000001, 1000000001], indexDiff = 5, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5], indexDiff = 5, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], indexDiff = 1, valueDiff = 19",
        "output": "True"
      },
      {
        "input": "nums = [-10,-20,-30,-40,-50,-60,-70,-80,-90,-100], indexDiff = 5, valueDiff = 10",
        "output": "True"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], indexDiff = 10, valueDiff = 10",
        "output": "True"
      },
      {
        "input": "nums = [1000000000,-1000000000,1000000000,-1000000000], indexDiff = 3, valueDiff = 2000000000",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], indexDiff = 10, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119], indexDiff = 10, valueDiff = 10",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], indexDiff = 10, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], indexDiff = 4, valueDiff = 25",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 1, 3, 1, 3, 1, 3], indexDiff = 2, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], indexDiff = 10, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], indexDiff = 7, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [1000000000, -1000000000, 1000000000, -1000000000], indexDiff = 3, valueDiff = 2000000000",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 2, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], indexDiff = 19, valueDiff = 10",
        "output": "True"
      },
      {
        "input": "nums = [1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10], indexDiff = 2, valueDiff = 9",
        "output": "True"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], indexDiff = 10, valueDiff = 9",
        "output": "True"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], indexDiff = 1, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], indexDiff = 20, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], indexDiff = 4, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], indexDiff = 10000, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], indexDiff = 7, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], indexDiff = 2, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004], indexDiff = 3, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [0, 1000000000, 2000000000, 3000000000, 4000000000, 5000000000, 6000000000, 7000000000, 8000000000, 9000000000], indexDiff = 10, valueDiff = 1000000000",
        "output": "True"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], indexDiff = 5, valueDiff = 50",
        "output": "False"
      },
      {
        "input": "nums = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10], indexDiff = 2, valueDiff = 8",
        "output": "True"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0], indexDiff = 5, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1, 5, 9, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64, 69], indexDiff = 6, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], indexDiff = 5, valueDiff = 150",
        "output": "True"
      },
      {
        "input": "nums = [1000000000, 999999999, 1000000001, 999999998, 1000000002], indexDiff = 4, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10], indexDiff = 7, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], indexDiff = 15, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [0,1000000000,-1000000000,1000000000,0,-1000000000,1000000000,0,-1000000000,1000000000], indexDiff = 4, valueDiff = 500000000",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], indexDiff = 20, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], indexDiff = 5, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], indexDiff = 25, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21], indexDiff = 2, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], indexDiff = 5, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 4, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], indexDiff = 10, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [-1000000000, 1000000000, -1000000000, 1000000000, 0], indexDiff = 4, valueDiff = 2000000000",
        "output": "True"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95], indexDiff = 10, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2], indexDiff = 2, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,3,1,5,9,10,7,6,4,2], indexDiff = 5, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], indexDiff = 5, valueDiff = 100",
        "output": "True"
      },
      {
        "input": "nums = [1, 1000000000, 2, 1000000001, 3, 1000000002, 4, 1000000003], indexDiff = 7, valueDiff = 999999999",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], indexDiff = 10, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20], indexDiff = 12, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [2147483647,-2147483648,2147483646,-2147483647], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 5, 6, 7, 8, 9], indexDiff = 4, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], indexDiff = 15, valueDiff = 10",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], indexDiff = 1, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], indexDiff = 10, valueDiff = 10",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 5, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], indexDiff = 10, valueDiff = 15",
        "output": "True"
      },
      {
        "input": "nums = [10,1,9,2,8,3,7,4,6,5], indexDiff = 3, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], indexDiff = 19, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], indexDiff = 10, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10], indexDiff = 5, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], indexDiff = 20, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 10, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [0, 1000000000, 0, 1000000000, 0], indexDiff = 2, valueDiff = 1000000000",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], indexDiff = 1, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1, 1000000000, 1, 1000000000, 1, 1000000000, 1, 1000000000], indexDiff = 6, valueDiff = 999999999",
        "output": "True"
      },
      {
        "input": "nums = [1000,100,10,1,0,1,10,100,1000,10000], indexDiff = 9, valueDiff = 9900",
        "output": "True"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], indexDiff = 10, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], indexDiff = 5, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], indexDiff = 2, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 6, 8, 12, 15, 20, 22, 25, 28, 30], indexDiff = 4, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], indexDiff = 1, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], indexDiff = 5, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], indexDiff = 10, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,1000000000,-1000000000,2,1000000000,-1000000000], indexDiff = 5, valueDiff = 1999999999",
        "output": "True"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], indexDiff = 2, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], indexDiff = 10, valueDiff = 999999999",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], indexDiff = 100, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 10, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 1, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], indexDiff = 4, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], indexDiff = 6, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], indexDiff = 10, valueDiff = 9",
        "output": "True"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000], indexDiff = 5, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], indexDiff = 10, valueDiff = 15",
        "output": "True"
      },
      {
        "input": "nums = [-1000000000, -999999999, -999999998, -999999997, -999999996, -999999995, -999999994, -999999993, -999999992, -999999991], indexDiff = 10, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], indexDiff = 5, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [-1, 2147483647, -2147483648, 2147483647, -1, 2147483647, -2147483648, 2147483647, -1, 2147483647], indexDiff = 3, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], indexDiff = 10, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,10,1,10,1,10,1,10,1,10], indexDiff = 3, valueDiff = 9",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], indexDiff = 3, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], indexDiff = 4, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], indexDiff = 10, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [8, 7, 15, 1, 6, 1, 9, 15], indexDiff = 2, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 4, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [-1,-1,-1,-1,-1,-1,-1,-1], indexDiff = 1, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,2,3,4,5,6,7,8,9,10], indexDiff = 2, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [2,1,2,1], indexDiff = 1, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], indexDiff = 2, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1], indexDiff = 2, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [2147483647,-1,2147483647,-1], indexDiff = 1, valueDiff = 2147483647",
        "output": "False"
      },
      {
        "input": "nums = [1], indexDiff = 1, valueDiff = 1",
        "output": "False"
      },
      {
        "input": "nums = [10,100,1000,10,100,1000], indexDiff = 2, valueDiff = 899",
        "output": "True"
      },
      {
        "input": "nums = [1,0,1,1], indexDiff = 1, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], indexDiff = 5, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,2,3,4,5,6,7,8,9,10], indexDiff = 1, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5], indexDiff = 5, valueDiff = 10",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,1,2,3], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,1], indexDiff = 1, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 5, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0], indexDiff = 10, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [-1,-1,-1,-3,-2,0,-4,-2,-2,-2,-2,-2,-2,-2,-2], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 8, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,2,1,2], indexDiff = 1, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,2,0,14], indexDiff = 1, valueDiff = 1",
        "output": "False"
      },
      {
        "input": "nums = [1,2,3,4,5], indexDiff = 5, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 2, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1000000000,-1000000000,1000000000,-1000000000], indexDiff = 2, valueDiff = 1000000000",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,2,0,14,1,1,10,9,8,7,9,3,1], indexDiff = 2, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,2,0,14,1,1,10,23], indexDiff = 4, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [8,2,23,4,25,36,7,45,8,9,45], indexDiff = 2, valueDiff = 5",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], indexDiff = 1, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [8,2,4,2,0,2,0,4,2,2], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [5,4,3,2,1], indexDiff = 2, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], indexDiff = 3, valueDiff = 15",
        "output": "True"
      },
      {
        "input": "nums = [2147483647,-2147483647], indexDiff = 1, valueDiff = 4294967294",
        "output": "True"
      },
      {
        "input": "nums = [0,1,1,1], indexDiff = 1, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1000000000, -1000000000, 1000000000, -1000000000], indexDiff = 2, valueDiff = 1999999999",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,1], indexDiff = 8, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,2,0,14,1,1,10,9], indexDiff = 1, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [2147483647,-2147483648,2147483647,-2147483648], indexDiff = 1, valueDiff = 4294967295",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,1], indexDiff = 7, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [10,10,10,10,10], indexDiff = 1, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,1,2,5,5,1,2,5], indexDiff = 2, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 4, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [1, 5, 9, 1, 5, 9], indexDiff = 2, valueDiff = 3",
        "output": "False"
      },
      {
        "input": "nums = [1000000000,-1000000000,1000000000,-1000000000], indexDiff = 2, valueDiff = 1999999999",
        "output": "True"
      },
      {
        "input": "nums = [10,100,1000,10000], indexDiff = 3, valueDiff = 5000",
        "output": "True"
      },
      {
        "input": "nums = [8,2,2,2,5,3,9,8,2,8], indexDiff = 4, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,0,1,1], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,1], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5], indexDiff = 1, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [0,10,20,30,40,50], indexDiff = 3, valueDiff = 10",
        "output": "True"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], indexDiff = 4, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [0,0,0,0,0], indexDiff = 1, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 9, valueDiff = 9",
        "output": "True"
      },
      {
        "input": "nums = [1,3,1,3,1,3,1,3,1,3,1,3], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 1], indexDiff = 3, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [2147483647,-2147483648,2147483647,-2147483648], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [0,2147483647], indexDiff = 1, valueDiff = 2147483647",
        "output": "True"
      },
      {
        "input": "nums = [1,3,1,3,1,3,1,3], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [8,7,6,5,4,3,2,1], indexDiff = 4, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,1,2,3], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [7,1,3,6,5,10,12,8], indexDiff = 5, valueDiff = 8",
        "output": "True"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2], indexDiff = 2, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,2,0,14,1], indexDiff = 1, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [7,1,3,6,5,10,12,8], indexDiff = 5, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [999999999,999999999,999999999,999999999], indexDiff = 3, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2], indexDiff = 0, valueDiff = 1",
        "output": "False"
      },
      {
        "input": "nums = [1,2,1,2,1,2], indexDiff = 2, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,5,0,1,7,9], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,3,1,3,1,3], indexDiff = 2, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,0,1,1], indexDiff = 1, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [10,100,10,1000,100,10], indexDiff = 1, valueDiff = 90",
        "output": "True"
      },
      {
        "input": "nums = [10,100,1000,10000,100000], indexDiff = 4, valueDiff = 90000",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,2,0,14,1,1,10,6,11,7,10,3,4,7,13,1,3,15,5], indexDiff = 2, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 1, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [2,0,-2,2], indexDiff = 2, valueDiff = 1",
        "output": "False"
      },
      {
        "input": "nums = [2,1,2,1], indexDiff = 1, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [8,2,4,2,0,14,1], indexDiff = 1, valueDiff = 1",
        "output": "False"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1], indexDiff = 11, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,3,1,2], indexDiff = 3, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], indexDiff = 4, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], indexDiff = 4, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], indexDiff = 10, valueDiff = 9",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,2,0,14,21], indexDiff = 2, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [-1,2147483647,-1,2147483647], indexDiff = 1, valueDiff = 2147483647",
        "output": "False"
      },
      {
        "input": "nums = [8, 7, 15, 1, 6, 1, 9, 15], indexDiff = 1, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], indexDiff = 5, valueDiff = 4",
        "output": "True"
      },
      {
        "input": "nums = [1000000000, -1000000000, 1000000000, -1000000000], indexDiff = 2, valueDiff = 2000000000",
        "output": "True"
      },
      {
        "input": "nums = [1000000000,1000000000], indexDiff = 0, valueDiff = 0",
        "output": "False"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000,1000000,10000000], indexDiff = 7, valueDiff = 9999999",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], indexDiff = 3, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,5,0,1,9,3], indexDiff = 3, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 2",
        "output": "False"
      },
      {
        "input": "nums = [-1, 2147483647], indexDiff = 1, valueDiff = 2147483647",
        "output": "False"
      },
      {
        "input": "nums = [8,2,4,2,0,14,1,13], indexDiff = 5, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [10,10,10,10,10,10], indexDiff = 1, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2], indexDiff = 1, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [0,21233,15334453,123345], indexDiff = 3, valueDiff = 3",
        "output": "False"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], indexDiff = 5, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0], indexDiff = 2, valueDiff = 0",
        "output": "True"
      },
      {
        "input": "nums = [10,100,1000,10000,100000], indexDiff = 5, valueDiff = 90000",
        "output": "True"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], indexDiff = 5, valueDiff = 1",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,5,0,7,9], indexDiff = 1, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], indexDiff = 5, valueDiff = 2",
        "output": "True"
      },
      {
        "input": "nums = [8,2,4,5,0,1,9,3], indexDiff = 2, valueDiff = 3",
        "output": "True"
      },
      {
        "input": "nums = [1,2], indexDiff = 1, valueDiff = 0",
        "output": "False"
      }
    ]
  },
  {
    "id": 2911,
    "difficulty": "Hard",
    "tags": [
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "problemDescription": "Given a string s and an integer k, partition s into k substrings such that the letter changes needed to make each substring a semi-palindrome\u00a0are minimized.\nReturn the minimum number of letter changes required.\nA semi-palindrome is a special type of string that can be divided into palindromes based on a repeating pattern. To check if a string is a semi-palindrome:\u200b\n\nChoose a positive divisor d of the string's length. d can range from 1 up to, but not including, the string's length. For a string of length 1, it does not have a valid divisor as per this definition, since the only divisor is its length, which is not allowed.\nFor a given divisor d, divide the string into groups where each group contains characters from the string that follow a repeating pattern of length d. Specifically, the first group consists of characters at positions 1, 1 + d, 1 + 2d, and so on; the second group includes characters at positions 2, 2 + d, 2 + 2d, etc.\nThe string is considered a semi-palindrome if each of these groups forms a palindrome.\n\nConsider the string \"abcabc\":\n\nThe length of \"abcabc\" is 6. Valid divisors are 1, 2, and 3.\nFor d = 1: The entire string \"abcabc\" forms one group. Not a palindrome.\nFor d = 2:\n\t\nGroup 1 (positions 1, 3, 5): \"acb\"\nGroup 2 (positions 2, 4, 6): \"bac\"\nNeither group forms a palindrome.\n\n\nFor d = 3:\n\t\nGroup 1 (positions 1, 4): \"aa\"\nGroup 2 (positions 2, 5): \"bb\"\nGroup 3 (positions 3, 6): \"cc\"\nAll groups form palindromes. Therefore, \"abcabc\" is a semi-palindrome.\n\n\n\n\u00a0\nExample 1: \n\nInput:   s = \"abcac\", k = 2 \nOutput:   1 \nExplanation:  Divide s into \"ab\" and \"cac\". \"cac\" is already semi-palindrome. Change \"ab\" to \"aa\", it becomes semi-palindrome with d = 1.\n\nExample 2: \n\nInput:   s = \"abcdef\", k = 2 \nOutput:   2 \nExplanation:  Divide s into substrings \"abc\" and \"def\". Each\u00a0needs one change to become semi-palindrome.\n\nExample 3: \n\nInput:   s = \"aabbaa\", k = 3 \nOutput:   0 \nExplanation:  Divide s into substrings \"aa\", \"bb\" and \"aa\".\u00a0All are already semi-palindromes.\n\n\u00a0\nConstraints:\n\n2 <= s.length <= 200\n1 <= k <= s.length / 2\ns contains only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"aabbcc\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"abccba\", k = 2",
        "output": "2"
      },
      {
        "input": "s = \"aabbccdd\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"abcabcabc\", k = 4",
        "output": "4"
      },
      {
        "input": "s = \"aaaaaa\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"abcabcabcabc\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"abccba\", k = 1",
        "output": "0"
      },
      {
        "input": "s = \"aabbaa\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"racecar\", k = 1",
        "output": "0"
      },
      {
        "input": "s = \"abcac\", k = 2",
        "output": "1"
      },
      {
        "input": "s = \"zzzzzz\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"abcdabc\", k = 2",
        "output": "2"
      },
      {
        "input": "s = \"abcdefg\", k = 2",
        "output": "3"
      },
      {
        "input": "s = \"abcdcba\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"abcdefg\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"abcabcabc\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"aaaa\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"abcdabc\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"abcabc\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"abcdef\", k = 2",
        "output": "2"
      },
      {
        "input": "s = \"abccba\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"ababab\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"qwertyuiopqwertyuiopqwertyuiop\", k = 6",
        "output": "5"
      },
      {
        "input": "s = \"aabbccddeeaabbccddeeaabbccdd\", k = 6",
        "output": "2"
      },
      {
        "input": "s = \"abcdefedcbafedcba\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcd\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"abcdabcdabcdabcd\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"xyzxyzxyzxyz\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyz\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\", k = 5",
        "output": "4"
      },
      {
        "input": "s = \"abcdeabcdeabcde\", k = 4",
        "output": "5"
      },
      {
        "input": "s = \"level\", k = 1",
        "output": "0"
      },
      {
        "input": "s = \"banana\", k = 2",
        "output": "1"
      },
      {
        "input": "s = \"aabbaabbaabbaabb\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmlloo\", k = 5",
        "output": "6"
      },
      {
        "input": "s = \"abccbaabccbaabccba\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"abracadabraabracadabra\", k = 4",
        "output": "5"
      },
      {
        "input": "s = \"redder\", k = 2",
        "output": "2"
      },
      {
        "input": "s = \"repaper\", k = 2",
        "output": "3"
      },
      {
        "input": "s = \"abababaabab\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghij\", k = 2",
        "output": "4"
      },
      {
        "input": "s = \"abcdefabcdef\", k = 4",
        "output": "4"
      },
      {
        "input": "s = \"abcdefghiabcdefghiabcdefghi\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyz\", k = 5",
        "output": "4"
      },
      {
        "input": "s = \"aabbaaabbbaa\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"aaabbbcccdddaaa\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"abcdefgabcdefg\", k = 4",
        "output": "5"
      },
      {
        "input": "s = \"xyxzyxzyxzyxzyxzyx\", k = 4",
        "output": "1"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxy\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"aaaaabbbbbcccc\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"ababababababab\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghabcdefghabcdefgh\", k = 6",
        "output": "5"
      },
      {
        "input": "s = \"mississippi\", k = 2",
        "output": "2"
      },
      {
        "input": "s = \"abccbaabccba\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"abcdefabcdefabcdef\", k = 6",
        "output": "6"
      },
      {
        "input": "s = \"abcdefggfedcba\", k = 2",
        "output": "5"
      },
      {
        "input": "s = \"noonnoonnoon\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijj\", k = 5",
        "output": "4"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnoopp\", k = 6",
        "output": "8"
      },
      {
        "input": "s = \"aaabaaabaaabaaab\", k = 5",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeff\", k = 3",
        "output": "4"
      },
      {
        "input": "s = \"abcdefgabcdefg\", k = 2",
        "output": "5"
      },
      {
        "input": "s = \"racecar\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"abababab\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"ababababababab\", k = 5",
        "output": "1"
      },
      {
        "input": "s = \"abcabcabcabcabcabc\", k = 6",
        "output": "5"
      },
      {
        "input": "s = \"mnopqrnopqr\", k = 3",
        "output": "4"
      },
      {
        "input": "s = \"deified\", k = 1",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghij\", k = 5",
        "output": "4"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabc\", k = 7",
        "output": "6"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", k = 7",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghij\", k = 5",
        "output": "5"
      },
      {
        "input": "s = \"noon\", k = 1",
        "output": "0"
      },
      {
        "input": "s = \"aaaaaaaaaa\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghijklnmopqrstuvwxyz\", k = 5",
        "output": "9"
      },
      {
        "input": "s = \"abcdefghij\", k = 3",
        "output": "4"
      },
      {
        "input": "s = \"racecar\", k = 2",
        "output": "3"
      },
      {
        "input": "s = \"rotor\", k = 1",
        "output": "0"
      },
      {
        "input": "s = \"abracadabraabracadabra\", k = 5",
        "output": "4"
      },
      {
        "input": "s = \"xyzyxzyxzyx\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"aaaaabbbbccccdddd\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"aaabbbcccdddeeefffggg\", k = 5",
        "output": "3"
      },
      {
        "input": "s = \"aaaabbbbccccdddd\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabc\", k = 6",
        "output": "3"
      },
      {
        "input": "s = \"ababababab\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"aabaaabaaabaaa\", k = 4",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeffgg\", k = 4",
        "output": "4"
      },
      {
        "input": "s = \"aaaaabbbbcccc\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"mnopqrsmnopqrsmno\", k = 3",
        "output": "6"
      },
      {
        "input": "s = \"aabbccddeeffgg\", k = 6",
        "output": "2"
      },
      {
        "input": "s = \"zzzaaaabbbccc\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 10",
        "output": "10"
      },
      {
        "input": "s = \"abababababababab\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"mnopqrspqrspqr\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"abacabadaba\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"mississippi\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"abacabadabacaba\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"abacabadabacaba\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"zzzzzyzzzzzz\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"xyxyxyxyxyxy\", k = 6",
        "output": "6"
      },
      {
        "input": "s = \"abcdeedcba\", k = 2",
        "output": "4"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcd\", k = 4",
        "output": "1"
      },
      {
        "input": "s = \"abcdefedcba\", k = 5",
        "output": "4"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaa\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"zzzzzyzzzzz\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"abcabcabcabcabc\", k = 5",
        "output": "4"
      },
      {
        "input": "s = \"abcdefabcdef\", k = 2",
        "output": "1"
      },
      {
        "input": "s = \"abcdefabcdefabcdefabcdef\", k = 5",
        "output": "3"
      },
      {
        "input": "s = \"anana\", k = 1",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", k = 5",
        "output": "7"
      },
      {
        "input": "s = \"aaaabbbb\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"xyzyzyzyz\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"mnopqrstuvwx\", k = 4",
        "output": "4"
      },
      {
        "input": "s = \"zzzzzzyyyzzzzzyyy\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"reviled\", k = 2",
        "output": "3"
      },
      {
        "input": "s = \"aaabbbbccccaaa\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"abacabadabacaba\", k = 4",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeff\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyz\", k = 4",
        "output": "3"
      }
    ]
  },
  {
    "id": 2792,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Divide and Conquer",
      "Binary Tree"
    ],
    "problemDescription": "You are given a root to a binary tree and an integer k. A node of this tree is called great enough if the followings hold:\n\nIts subtree has at least k nodes.\nIts value is greater than the value of at least k nodes in its subtree.\n\nReturn the number of nodes in this tree that are great enough.\nThe node u is in the subtree of the node\u00a0v, if u == v\u00a0or\u00a0v\u00a0is an\u00a0ancestor of u.\n\u00a0\nExample 1:\n\nInput: root = [7,6,5,4,3,2,1], k = 2\nOutput: 3\nExplanation: Number the nodes from 1 to 7.\nThe values in the subtree of node 1: {1,2,3,4,5,6,7}. Since node.val == 7, there are 6 nodes having a smaller value than its value. So it's great enough.\nThe values in the subtree of node 2: {3,4,6}. Since node.val == 6, there are 2 nodes having a smaller value than its value. So it's great enough.\nThe values in the subtree of node 3: {1,2,5}. Since node.val == 5, there are 2 nodes having a smaller value than its value. So it's great enough.\nIt can be shown that other nodes are not great enough.\nSee the picture below for a better understanding.\n\nExample 2:\n\nInput: root = [1,2,3], k = 1\nOutput: 0\nExplanation: Number the nodes from 1 to 3.\nThe values in the subtree of node 1: {1,2,3}. Since node.val == 1, there are no nodes having a smaller value than its value. So it's not great enough.\nThe values in the subtree of node 2: {2}. Since node.val == 2, there are no nodes having a smaller value than its value. So it's not great enough.\nThe values in the subtree of node 3: {3}. Since node.val == 3, there are no nodes having a smaller value than its value. So it's not great enough.\nSee the picture below for a better understanding.\n\nExample 3:\n\nInput: root = [3,2,2], k = 2\nOutput: 1\nExplanation: Number the nodes from 1 to 3.\nThe values in the subtree of node 1: {2,2,3}. Since node.val == 3, there are 2 nodes having a smaller value than its value. So it's great enough.\nThe values in the subtree of node 2: {2}. Since node.val == 2, there are no nodes having a smaller value than its value. So it's not great enough.\nThe values in the subtree of node 3: {2}. Since node.val == 2, there are no nodes having a smaller value than its value. So it's not great enough.\nSee the picture below for a better understanding.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range\u00a0[1, 104].\u00a0\n1 <= Node.val <= 104\n1 <= k <= 10\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countGreatEnoughNodes(self, root: Optional[TreeNode], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [5,3,9,1,4,7,10], k = 2",
        "output": "1"
      },
      {
        "input": "root = [5,3,8,2,4,7,9], k = 2",
        "output": "1"
      },
      {
        "input": "root = [3,2,2], k = 2",
        "output": "1"
      },
      {
        "input": "root = [4,2,7,1,3,6,9], k = 2",
        "output": "1"
      },
      {
        "input": "root = [5,3,6,2,4,null,7], k = 2",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,4,6,8,11,14,17,19], k = 3",
        "output": "3"
      },
      {
        "input": "root = [7,6,5,4,3,2,1], k = 2",
        "output": "3"
      },
      {
        "input": "root = [1,2,3], k = 1",
        "output": "0"
      },
      {
        "input": "root = [10,5,15,3,7,null,18], k = 1",
        "output": "2"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,4,6,8,12,14,17,19], k = 3",
        "output": "3"
      },
      {
        "input": "root = [5,3,6,2,4,null,null,1], k = 2",
        "output": "2"
      },
      {
        "input": "root = [1], k = 1",
        "output": "0"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "0"
      },
      {
        "input": "root = [10,5,15,3,7,12,18,1,4,6,8,11,13,17,19], k = 3",
        "output": "3"
      },
      {
        "input": "root = [5,3,6,2,4,null,null,1], k = 3",
        "output": "1"
      },
      {
        "input": "root = [9,4,11,3,6,10,12,1,5,7,null,null,null,8], k = 2",
        "output": "3"
      },
      {
        "input": "root = [3,2,3,1,2,null,null,null,3], k = 2",
        "output": "1"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,7,12,18,22,27,32,38], k = 4",
        "output": "1"
      },
      {
        "input": "root = [8,3,10,1,6,null,14,null,null,4,7,13], k = 2",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,3,7,12,18,1,4,6,8,11,13,16,19], k = 3",
        "output": "3"
      },
      {
        "input": "root = [15,10,20,5,12,18,25,3,7,11,14,16,19,23,28], k = 3",
        "output": "3"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,7,12,18,22,28,32,40,0,3,6,8,11,13,16,19,21,23,26,29,31,33,37,39,41], k = 8",
        "output": "1"
      },
      {
        "input": "root = [8,5,12,3,7,10,14,1,4,6,8,9,11,13,15], k = 4",
        "output": "1"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37], k = 5",
        "output": "1"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,12,18,22,28,32,38,45], k = 6",
        "output": "1"
      },
      {
        "input": "root = [9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 2",
        "output": "9"
      },
      {
        "input": "root = [15,7,20,3,9,18,22,2,5,8,11,17,19,21,23,1,4,6,null,null,null,null,null,10,12,13,14,16,null,null,null,null,null,null,null,null], k = 4",
        "output": "4"
      },
      {
        "input": "root = [7,5,10,3,6,8,12,2,4,9,11,13,14], k = 2",
        "output": "2"
      },
      {
        "input": "root = [15,10,20,8,12,17,25,6,9,11,13,16,19,23,27], k = 5",
        "output": "1"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15], k = 2",
        "output": "3"
      },
      {
        "input": "root = [7,3,11,1,5,9,13,0,2,4,6,8,10,12,14], k = 7",
        "output": "1"
      },
      {
        "input": "root = [7,3,11,2,5,8,13,1,4,6,9,10,12,14,15,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null], k = 3",
        "output": "2"
      },
      {
        "input": "root = [50,25,75,12,37,56,92,6,18,29,41,52,67,85,95,3,9,15,21,26,31,35,45,53,61,70,73,80,87,90,93,98], k = 10",
        "output": "1"
      },
      {
        "input": "root = [40,20,60,10,30,50,70,5,15,25,35,45,55,65,75], k = 5",
        "output": "1"
      },
      {
        "input": "root = [7,3,8,1,5,6,10,0,2,null,null,null,null,null,9,11], k = 4",
        "output": "1"
      },
      {
        "input": "root = [7,3,10,1,5,8,12,0,2,4,6,7,9,11,13], k = 2",
        "output": "3"
      },
      {
        "input": "root = [4,2,6,1,3,5,7,0,1,2,3,4,5,6,7], k = 2",
        "output": "3"
      },
      {
        "input": "root = [25,10,35,5,15,28,40,1,7,12,18,23,30,36,45], k = 6",
        "output": "1"
      },
      {
        "input": "root = [12,6,18,3,9,15,21,1,5,8,11,13,17,19,23], k = 3",
        "output": "3"
      },
      {
        "input": "root = [60,30,90,15,45,75,105,10,20,40,50,70,80,100,110], k = 3",
        "output": "3"
      },
      {
        "input": "root = [15,10,20,5,12,18,25,2,7,11,13,16,19,22,27], k = 5",
        "output": "1"
      },
      {
        "input": "root = [5,3,8,1,4,7,9,0,2,3,5,6,8,10,11], k = 3",
        "output": "2"
      },
      {
        "input": "root = [5,3,7,2,4,6,8,1,null,null,null,null,null,null,9], k = 2",
        "output": "2"
      },
      {
        "input": "root = [80,40,120,20,60,100,140,10,30,50,70,90,110,130,150], k = 8",
        "output": "0"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,12,18,23,27,32,37,1,4,6,8,11,13,17,19,22,24,26,28,31,33,36,38], k = 5",
        "output": "3"
      },
      {
        "input": "root = [8,5,10,2,6,9,11,1,3,4,7,8,12], k = 2",
        "output": "3"
      },
      {
        "input": "root = [25,10,35,5,15,30,40,3,7,12,18,28,33,37,45], k = 4",
        "output": "1"
      },
      {
        "input": "root = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], k = 2",
        "output": "0"
      },
      {
        "input": "root = [10,9,8,7,6,5,4,3,2,1], k = 1",
        "output": "5"
      },
      {
        "input": "root = [8,5,12,4,6,10,14,3,7,9,11,13,15], k = 3",
        "output": "1"
      },
      {
        "input": "root = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 2",
        "output": "0"
      },
      {
        "input": "root = [50,25,75,10,35,60,90,5,15,30,40,55,65,85,100], k = 4",
        "output": "1"
      },
      {
        "input": "root = [12,6,18,3,9,15,21,1,5,7,11,13,17,19,23], k = 5",
        "output": "1"
      },
      {
        "input": "root = [8,5,11,3,6,9,12,1,4,7,8,10,11,13,14], k = 4",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,4,6,8,12,14,17,20], k = 4",
        "output": "1"
      },
      {
        "input": "root = [7,3,11,1,5,9,13,0,2,4,6,8,10,12,14], k = 2",
        "output": "3"
      },
      {
        "input": "root = [7,3,11,1,5,9,13,0,2,4,6,8,10,12,14], k = 3",
        "output": "3"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,4,6,8,12,14,17,19,0,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null], k = 5",
        "output": "2"
      },
      {
        "input": "root = [20,15,25,10,17,22,30,5,12,16,18,21,23,28,32], k = 6",
        "output": "1"
      },
      {
        "input": "root = [7,3,11,2,5,8,13,1,4,6,9,10,12,14,15], k = 4",
        "output": "1"
      },
      {
        "input": "root = [5,2,8,1,3,7,9,0,4,6,10,12,15,18,20], k = 3",
        "output": "1"
      },
      {
        "input": "root = [15,10,20,5,12,17,25,3,7,11,13,16,19,23,27], k = 5",
        "output": "1"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,6,9,12,18,22,28,33], k = 5",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,4,6,8,11,13,18,25], k = 3",
        "output": "3"
      },
      {
        "input": "root = [6,3,8,1,4,7,9,null,2,null,5,null,null,null,null,null,null], k = 2",
        "output": "2"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37,1,4,6,8,12,14,16,18,22,24,26,28,32,34,36,38], k = 4",
        "output": "3"
      },
      {
        "input": "root = [15,10,20,8,12,16,25,5,9,11,13,14,17,18,21,23,26,null,null,null,null,null,null,null,null,null,19,22,24,null,null,null,27], k = 5",
        "output": "2"
      },
      {
        "input": "root = [6,3,8,1,4,7,9,2,5,6,7,8,9,10,11], k = 3",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,3,7,12,18,1,4,6,8,11,13,17,20], k = 3",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10",
        "output": "0"
      },
      {
        "input": "root = [17,11,23,7,13,19,27,5,9,12,15,18,21,25,29], k = 3",
        "output": "3"
      },
      {
        "input": "root = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 1",
        "output": "0"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,40,60,80,110,140,160,180,5,15,30,45,55,65,70,85,90,105,115,130,135,145,155,165,170,185,190,200], k = 5",
        "output": "4"
      },
      {
        "input": "root = [1,2,2,3,3,3,3,4,4,4,4,4,4,4,4], k = 3",
        "output": "0"
      },
      {
        "input": "root = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 5",
        "output": "0"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,22,28,33,37], k = 2",
        "output": "3"
      },
      {
        "input": "root = [9,4,15,2,6,12,18,1,3,5,7,11,13,17,19], k = 2",
        "output": "3"
      },
      {
        "input": "root = [11,7,19,3,9,15,23,1,5,8,10,13,17,20,25], k = 4",
        "output": "1"
      },
      {
        "input": "root = [8,3,10,1,5,9,12,0,2,4,6,7,11,13,14], k = 4",
        "output": "1"
      },
      {
        "input": "root = [3,1,5,0,2,4,6,-1,-1,-1,-1,-1,-1,7,8], k = 2",
        "output": "6"
      },
      {
        "input": "root = [6,2,8,1,3,7,9,null,null,null,5], k = 1",
        "output": "3"
      },
      {
        "input": "root = [14,8,20,4,10,16,24,2,6,9,12,14,18,22,26], k = 4",
        "output": "1"
      },
      {
        "input": "root = [5,4,6,3,null,7,8,2,null,null,null,null,9], k = 2",
        "output": "2"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,18,25,35,42,48,55], k = 4",
        "output": "1"
      }
    ]
  },
  {
    "id": 871,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Dynamic Programming",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "A car travels from a starting position to a destination which is target miles east of the starting position.\nThere are gas stations along the way. The gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.\nThe car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\nReturn the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.\nNote that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.\n\u00a0\nExample 1:\n\nInput: target = 1, startFuel = 1, stations = []\nOutput: 0\nExplanation: We can reach the target without refueling.\n\nExample 2:\n\nInput: target = 100, startFuel = 1, stations = [[10,100]]\nOutput: -1\nExplanation: We can not reach the target (or even the first gas station).\n\nExample 3:\n\nInput: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\nOutput: 2\nExplanation: We start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2.\n\n\u00a0\nConstraints:\n\n1 <= target, startFuel <= 109\n0 <= stations.length <= 500\n1 <= positioni < positioni+1 < target\n1 <= fueli < 109\n\n",
    "starterCode": "class Solution:\n    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "target = 100, startFuel = 100, stations = [[10,10],[20,20],[30,30],[40,40],[50,50]]",
        "output": "0"
      },
      {
        "input": "target = 150, startFuel = 50, stations = [[25,25],[50,50],[75,25]]",
        "output": "3"
      },
      {
        "input": "target = 150, startFuel = 50, stations = [[10,60],[20,30],[30,30],[60,40],[80,50]]",
        "output": "2"
      },
      {
        "input": "target = 1, startFuel = 1, stations = []",
        "output": "0"
      },
      {
        "input": "target = 100, startFuel = 1, stations = [[10,100]]",
        "output": "-1"
      },
      {
        "input": "target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]",
        "output": "2"
      },
      {
        "input": "target = 150, startFuel = 50, stations = [[25,25],[50,25],[75,50],[100,100]]",
        "output": "3"
      },
      {
        "input": "target = 1000, startFuel = 500, stations = [[100,100],[200,100],[300,100],[400,100],[500,100],[600,100],[700,100],[800,100],[900,100]]",
        "output": "5"
      },
      {
        "input": "target = 100, startFuel = 50, stations = [[25,25],[50,25],[75,25]]",
        "output": "2"
      },
      {
        "input": "target = 50, startFuel = 1, stations = [[10,10],[20,20],[30,30],[40,40]]",
        "output": "-1"
      },
      {
        "input": "target = 200, startFuel = 25, stations = [[10,60],[20,30],[30,30],[60,40],[80,50],[100,25]]",
        "output": "4"
      },
      {
        "input": "target = 50, startFuel = 50, stations = [[10,20],[20,30],[30,40],[40,50]]",
        "output": "0"
      },
      {
        "input": "target = 150, startFuel = 50, stations = [[10, 20], [30, 50], [50, 10], [60, 20], [80, 30], [110, 40]]",
        "output": "3"
      },
      {
        "input": "target = 75, startFuel = 25, stations = [[20,20], [30,30], [50,10], [60,20]]",
        "output": "2"
      },
      {
        "input": "target = 300, startFuel = 50, stations = [[50,150],[100,150],[150,150],[200,150],[250,150]]",
        "output": "2"
      },
      {
        "input": "target = 500, startFuel = 100, stations = [[25, 10], [50, 20], [75, 30], [100, 40], [125, 50], [150, 60]]",
        "output": "-1"
      },
      {
        "input": "target = 1200, startFuel = 200, stations = [[100, 50], [200, 100], [300, 150], [400, 200], [500, 250], [600, 300], [700, 350], [800, 400], [900, 450], [1000, 500]]",
        "output": "5"
      },
      {
        "input": "target = 500, startFuel = 50, stations = [[50,50],[100,100],[150,50],[200,150],[250,50],[300,50],[350,50],[400,50],[450,50]]",
        "output": "6"
      },
      {
        "input": "target = 200, startFuel = 50, stations = [[25,30],[50,50],[75,20],[100,100],[150,50]]",
        "output": "2"
      },
      {
        "input": "target = 500, startFuel = 100, stations = [[25,100],[100,50],[150,150],[300,100],[400,200]]",
        "output": "4"
      },
      {
        "input": "target = 1500, startFuel = 500, stations = [[100,50],[200,100],[300,200],[400,250],[500,300],[600,400],[700,350],[800,400],[900,300],[1000,200],[1100,150],[1200,100],[1300,50],[1400,250]]",
        "output": "3"
      },
      {
        "input": "target = 1000, startFuel = 300, stations = [[100, 100], [200, 100], [300, 100], [400, 100], [500, 100], [600, 100], [700, 100], [800, 100], [900, 100]]",
        "output": "7"
      },
      {
        "input": "target = 1000, startFuel = 500, stations = [[250,100],[500,200],[750,300],[1000,400]]",
        "output": "3"
      },
      {
        "input": "target = 1000, startFuel = 1, stations = [[10,100], [20,150], [30,200], [40,50], [50,50], [60,50], [70,50], [80,50], [90,50], [100,50], [110,50], [120,50], [130,50], [140,50], [150,50], [160,50], [170,50], [180,50], [190,50], [200,50]]",
        "output": "-1"
      },
      {
        "input": "target = 500, startFuel = 200, stations = [[150, 50], [250, 100], [350, 100], [450, 150]]",
        "output": "4"
      },
      {
        "input": "target = 350, startFuel = 20, stations = [[20,100],[40,80],[60,70],[80,60],[100,50],[120,40],[140,30],[160,20],[180,10]]",
        "output": "5"
      },
      {
        "input": "target = 100, startFuel = 50, stations = [[25, 25], [50, 25], [75, 25], [100, 25]]",
        "output": "2"
      },
      {
        "input": "target = 800, startFuel = 200, stations = [[50,300],[100,200],[150,100],[200,50],[250,300],[300,200],[350,150],[400,100],[450,50],[500,200],[550,300],[600,150],[650,200],[700,50],[750,300],[800,100]]",
        "output": "2"
      },
      {
        "input": "target = 600, startFuel = 100, stations = [[20,50],[40,100],[60,150],[80,200],[100,250],[120,300],[140,350],[160,400],[180,450],[200,500],[220,550],[240,600],[260,650],[280,700],[300,750],[320,800],[340,850],[360,900],[380,950],[400,1000],[420,1050],[440,1100],[460,1150],[480,1200],[500,1250],[520,1300],[540,1350],[560,1400],[580,1450]]",
        "output": "2"
      },
      {
        "input": "target = 1000, startFuel = 100, stations = [[100, 200], [200, 150], [300, 50], [400, 100], [500, 250], [600, 100], [700, 200], [800, 50], [900, 100]]",
        "output": "5"
      },
      {
        "input": "target = 1000, startFuel = 300, stations = [[50,100],[150,50],[250,200],[350,100],[450,150],[550,50],[650,200],[750,100],[850,150],[950,50]]",
        "output": "4"
      },
      {
        "input": "target = 150, startFuel = 100, stations = [[50, 30], [100, 20]]",
        "output": "2"
      },
      {
        "input": "target = 500, startFuel = 100, stations = [[100,150],[200,100],[300,100],[400,200]]",
        "output": "4"
      },
      {
        "input": "target = 600, startFuel = 100, stations = [[150, 50], [250, 100], [450, 150], [550, 100]]",
        "output": "-1"
      },
      {
        "input": "target = 1200, startFuel = 50, stations = [[50,100],[100,200],[150,150],[200,100],[250,50],[300,200],[350,150],[400,100],[450,50],[500,200],[550,100],[600,150],[650,200],[700,50],[750,200],[800,100],[850,150],[900,200],[950,50],[1000,200],[1050,150],[1100,100]]",
        "output": "7"
      },
      {
        "input": "target = 600, startFuel = 200, stations = [[50,50],[100,100],[150,150],[200,200],[250,250],[300,300],[350,350],[400,400],[450,450],[500,500],[550,500]]",
        "output": "2"
      },
      {
        "input": "target = 200, startFuel = 100, stations = [[50,50],[100,100],[150,100],[180,50]]",
        "output": "1"
      },
      {
        "input": "target = 1000, startFuel = 500, stations = [[200, 100], [300, 150], [500, 200], [600, 300]]",
        "output": "2"
      },
      {
        "input": "target = 300, startFuel = 20, stations = [[10,40], [20,30], [30,50], [40,20], [50,60], [60,10], [70,70], [80,25], [90,25], [100,20], [110,20], [120,20], [130,20], [140,20], [150,20], [160,20], [170,20], [180,20], [190,20], [200,20], [210,20], [220,20], [230,20], [240,20], [250,20], [260,20], [270,20], [280,20], [290,20]]",
        "output": "7"
      },
      {
        "input": "target = 1000, startFuel = 500, stations = [[150, 300], [300, 250], [700, 150]]",
        "output": "2"
      },
      {
        "input": "target = 750, startFuel = 250, stations = [[100,50],[200,150],[300,100],[400,50],[500,200],[600,300],[700,100]]",
        "output": "4"
      },
      {
        "input": "target = 1000, startFuel = 150, stations = [[100, 50], [200, 100], [300, 200], [400, 300], [500, 400], [600, 500], [700, 600], [800, 700], [900, 800]]",
        "output": "5"
      },
      {
        "input": "target = 300, startFuel = 100, stations = [[10,60],[50,50],[100,40],[150,30],[200,20],[250,10]]",
        "output": "5"
      },
      {
        "input": "target = 1000, startFuel = 200, stations = [[50, 100], [150, 100], [250, 100], [350, 100], [450, 100], [550, 100], [650, 100], [750, 100], [850, 100], [950, 100]]",
        "output": "8"
      },
      {
        "input": "target = 150, startFuel = 10, stations = [[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100]]",
        "output": "3"
      },
      {
        "input": "target = 450, startFuel = 100, stations = [[20,100],[40,120],[60,140],[80,160],[100,180],[120,200],[140,220],[160,240],[180,260],[200,280],[220,300],[240,320],[260,340],[280,360],[300,380],[320,400],[340,420],[360,440]]",
        "output": "2"
      },
      {
        "input": "target = 400, startFuel = 20, stations = [[10,30],[30,40],[50,50],[70,60],[90,70],[110,80],[130,90],[150,100],[170,110],[190,120]]",
        "output": "5"
      },
      {
        "input": "target = 600, startFuel = 200, stations = [[50, 10], [100, 10], [150, 10], [200, 10], [250, 10], [300, 10], [350, 10], [400, 10], [450, 10], [500, 10], [550, 400]]",
        "output": "-1"
      },
      {
        "input": "target = 1000, startFuel = 500, stations = [[50,50],[100,100],[150,150],[200,200],[250,250],[300,300],[350,350],[400,400],[450,450],[500,500],[550,550],[600,600],[650,650],[700,700],[750,750],[800,800],[850,850],[900,900],[950,950]]",
        "output": "1"
      },
      {
        "input": "target = 500, startFuel = 150, stations = [[50, 50], [150, 200], [250, 100], [350, 50], [450, 30]]",
        "output": "3"
      },
      {
        "input": "target = 1000, startFuel = 1000, stations = [[100, 100], [200, 100], [300, 100], [400, 100], [500, 100], [600, 100], [700, 100], [800, 100], [900, 100]]",
        "output": "0"
      },
      {
        "input": "target = 300, startFuel = 40, stations = [[20,100],[40,50],[60,30],[100,20],[150,50],[250,75]]",
        "output": "5"
      },
      {
        "input": "target = 700, startFuel = 100, stations = [[100, 50], [200, 75], [300, 100], [400, 125], [500, 150], [600, 175]]",
        "output": "-1"
      },
      {
        "input": "target = 500, startFuel = 100, stations = [[100, 100], [200, 100], [300, 100], [400, 100]]",
        "output": "4"
      },
      {
        "input": "target = 500, startFuel = 25, stations = [[25,25],[50,50],[75,75],[100,100],[125,125],[150,150],[175,175],[200,200],[225,225],[250,250],[275,275],[300,300],[325,325],[350,350],[375,375],[400,400],[425,425],[450,450],[475,475]]",
        "output": "5"
      },
      {
        "input": "target = 600, startFuel = 100, stations = [[50,100],[150,100],[250,100],[350,100],[450,100],[550,100]]",
        "output": "5"
      },
      {
        "input": "target = 1000, startFuel = 1, stations = [[10, 100], [20, 200], [30, 300], [40, 400], [50, 500], [60, 600], [70, 700], [80, 800], [90, 900]]",
        "output": "-1"
      },
      {
        "input": "target = 200, startFuel = 50, stations = [[25, 30], [50, 10], [75, 20], [100, 50], [150, 40]]",
        "output": "5"
      },
      {
        "input": "target = 1500, startFuel = 400, stations = [[200, 100], [300, 200], [500, 150], [700, 50], [1200, 300], [1400, 100]]",
        "output": "-1"
      },
      {
        "input": "target = 500, startFuel = 1, stations = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 49], [51, 50], [53, 51], [55, 52], [57, 53], [59, 54], [61, 55], [63, 56], [65, 57], [67, 58], [69, 59], [71, 60], [73, 61], [75, 62], [77, 63], [79, 64], [81, 65], [83, 66], [85, 67], [87, 68], [89, 69], [91, 70], [93, 71], [95, 72], [97, 73], [99, 74], [101, 75], [103, 76], [105, 77], [107, 78], [109, 79], [111, 80], [113, 81], [115, 82], [117, 83], [119, 84], [121, 85], [123, 86], [125, 87], [127, 88], [129, 89], [131, 90], [133, 91], [135, 92], [137, 93], [139, 94], [141, 95], [143, 96], [145, 97], [147, 98], [149, 99], [151, 100], [153, 101], [155, 102], [157, 103], [159, 104], [161, 105], [163, 106], [165, 107], [167, 108], [169, 109], [171, 110], [173, 111], [175, 112], [177, 113], [179, 114], [181, 115], [183, 116], [185, 117], [187, 118], [189, 119], [191, 120], [193, 121], [195, 122], [197, 123], [199, 124], [201, 125], [203, 126], [205, 127], [207, 128], [209, 129], [211, 130], [213, 131], [215, 132], [217, 133], [219, 134], [221, 135], [223, 136], [225, 137], [227, 138], [229, 139], [231, 140], [233, 141], [235, 142], [237, 143], [239, 144], [241, 145], [243, 146], [245, 147], [247, 148], [249, 149], [251, 150], [253, 151], [255, 152], [257, 153], [259, 154], [261, 155], [263, 156], [265, 157], [267, 158], [269, 159], [271, 160], [273, 161], [275, 162], [277, 163], [279, 164], [281, 165], [283, 166], [285, 167], [287, 168], [289, 169], [291, 170], [293, 171], [295, 172], [297, 173], [299, 174], [301, 175], [303, 176], [305, 177], [307, 178], [309, 179], [311, 180], [313, 181], [315, 182], [317, 183], [319, 184], [321, 185], [323, 186], [325, 187], [327, 188], [329, 189], [331, 190], [333, 191], [335, 192], [337, 193], [339, 194], [341, 195], [343, 196], [345, 197], [347, 198], [349, 199], [351, 200], [353, 201], [355, 202], [357, 203], [359, 204], [361, 205], [363, 206], [365, 207], [367, 208], [369, 209], [371, 210], [373, 211], [375, 212], [377, 213], [379, 214], [381, 215], [383, 216], [385, 217], [387, 218], [389, 219], [391, 220], [393, 221], [395, 222], [397, 223], [399, 224], [401, 225], [403, 226], [405, 227], [407, 228], [409, 229], [411, 230], [413, 231], [415, 232], [417, 233], [419, 234], [421, 235], [423, 236], [425, 237], [427, 238], [429, 239], [431, 240], [433, 241], [435, 242], [437, 243], [439, 244], [441, 245], [443, 246], [445, 247], [447, 248], [449, 249], [451, 250], [453, 251], [455, 252], [457, 253], [459, 254], [461, 255], [463, 256], [465, 257], [467, 258], [469, 259], [471, 260], [473, 261], [475, 262], [477, 263], [479, 264], [481, 265], [483, 266], [485, 267], [487, 268], [489, 269], [491, 270], [493, 271], [495, 272], [497, 273], [499, 274]]",
        "output": "9"
      },
      {
        "input": "target = 800, startFuel = 200, stations = [[150, 80], [300, 100], [450, 120], [600, 140], [750, 160]]",
        "output": "-1"
      },
      {
        "input": "target = 1500, startFuel = 100, stations = [[100,300],[200,200],[300,100],[400,50],[500,200],[600,300],[700,150],[800,200],[900,50],[1000,300],[1100,200],[1200,150],[1300,100],[1400,50]]",
        "output": "6"
      },
      {
        "input": "target = 200, startFuel = 100, stations = [[50,50], [100,50], [150,50], [175,25]]",
        "output": "2"
      },
      {
        "input": "target = 500, startFuel = 250, stations = [[100, 100], [200, 150], [300, 200]]",
        "output": "2"
      },
      {
        "input": "target = 1000, startFuel = 100, stations = [[100,200],[200,150],[300,100],[400,250],[500,200]]",
        "output": "5"
      },
      {
        "input": "target = 1000, startFuel = 200, stations = [[100,100],[200,150],[300,200],[400,250],[500,300],[600,400]]",
        "output": "4"
      },
      {
        "input": "target = 400, startFuel = 30, stations = [[20,10],[30,20],[40,30],[50,40],[60,50],[70,60],[80,70],[90,80],[100,90]]",
        "output": "7"
      },
      {
        "input": "target = 2000, startFuel = 200, stations = [[100,150],[200,100],[300,50],[400,200],[500,250],[600,150],[700,100],[800,200],[900,250],[1000,150],[1100,100],[1200,200],[1300,250],[1400,150],[1500,100],[1600,200],[1700,250],[1800,150],[1900,100]]",
        "output": "9"
      },
      {
        "input": "target = 1500, startFuel = 300, stations = [[100, 100], [200, 150], [300, 200], [400, 250], [500, 300], [600, 350], [700, 400], [800, 450], [900, 500]]",
        "output": "4"
      },
      {
        "input": "target = 1200, startFuel = 50, stations = [[50,50],[150,50],[250,50],[350,50],[450,50],[550,50],[650,50],[750,50],[850,50],[950,50],[1050,50],[1150,50]]",
        "output": "-1"
      },
      {
        "input": "target = 1000, startFuel = 100, stations = [[100,200],[200,100],[300,50],[400,300],[500,200],[600,100],[700,500],[800,100],[900,100]]",
        "output": "4"
      },
      {
        "input": "target = 1500, startFuel = 400, stations = [[300, 300], [600, 300], [900, 300], [1200, 300]]",
        "output": "4"
      },
      {
        "input": "target = 250, startFuel = 50, stations = [[20,40],[40,40],[60,30],[80,20],[100,50],[150,30],[200,20]]",
        "output": "6"
      },
      {
        "input": "target = 1000, startFuel = 100, stations = [[50, 30], [100, 50], [150, 100], [200, 150], [250, 200], [300, 250], [350, 300], [400, 350], [450, 400], [500, 450], [550, 500], [600, 550], [650, 600], [700, 650], [750, 700], [800, 750], [850, 800], [900, 850], [950, 900]]",
        "output": "5"
      },
      {
        "input": "target = 3000, startFuel = 250, stations = [[100,100],[200,150],[300,200],[400,250],[500,300],[600,350],[700,400],[800,450],[900,500],[1000,550],[1100,600],[1200,650],[1300,700],[1400,750],[1500,800],[1600,850],[1700,900],[1800,950],[1900,1000],[2000,1050],[2100,1100],[2200,1150],[2300,1200],[2400,1250],[2500,1300],[2600,1350],[2700,1400],[2800,1450],[2900,1500]]",
        "output": "6"
      },
      {
        "input": "target = 1200, startFuel = 200, stations = [[200, 300], [400, 200], [600, 400], [800, 100], [1000, 200]]",
        "output": "4"
      },
      {
        "input": "target = 2000, startFuel = 300, stations = [[100, 500], [300, 500], [500, 500], [700, 500], [900, 500], [1100, 500], [1300, 500], [1500, 500], [1700, 500], [1900, 500]]",
        "output": "4"
      },
      {
        "input": "target = 500, startFuel = 10, stations = [[10,50],[20,100],[30,50],[40,30],[50,40],[60,50],[70,100],[80,40],[90,10],[100,200]]",
        "output": "5"
      },
      {
        "input": "target = 800, startFuel = 400, stations = [[100,100], [200,150], [300,100], [400,50], [500,300], [600,200], [700,100]]",
        "output": "2"
      },
      {
        "input": "target = 150, startFuel = 50, stations = [[10,20],[30,30],[50,50],[100,100]]",
        "output": "2"
      },
      {
        "input": "target = 2000, startFuel = 100, stations = [[100,100],[200,100],[300,100],[400,100],[500,100],[600,100],[700,100],[800,100],[900,100],[1000,100],[1100,100],[1200,100],[1300,100],[1400,100],[1500,100],[1600,100],[1700,100],[1800,100],[1900,100]]",
        "output": "19"
      },
      {
        "input": "target = 500, startFuel = 100, stations = [[50,200],[100,50],[150,150],[200,100],[300,200],[400,150]]",
        "output": "2"
      },
      {
        "input": "target = 1000, startFuel = 50, stations = [[50,200],[150,150],[250,100],[350,50],[450,200],[550,100],[650,150],[750,100],[850,50],[950,200]]",
        "output": "7"
      },
      {
        "input": "target = 1000, startFuel = 500, stations = [[100,200], [300,300], [450,250], [600,400], [800,100]]",
        "output": "2"
      },
      {
        "input": "target = 1000, startFuel = 500, stations = [[200, 100], [300, 150], [400, 50], [800, 200]]",
        "output": "4"
      },
      {
        "input": "target = 800, startFuel = 100, stations = [[100, 50], [200, 50], [300, 50], [400, 50], [500, 50], [600, 50], [700, 50]]",
        "output": "-1"
      },
      {
        "input": "target = 100, startFuel = 90, stations = [[10,10],[20,10],[30,10],[40,10],[50,10],[60,10],[70,10],[80,10],[90,10]]",
        "output": "1"
      },
      {
        "input": "target = 2500, startFuel = 500, stations = [[100,200],[200,100],[300,150],[400,100],[500,150],[600,200],[700,250],[800,300],[900,350],[1000,400],[1100,450],[1200,500],[1300,550],[1400,600],[1500,650],[1600,700],[1700,750],[1800,800],[1900,850],[2000,900],[2100,950],[2200,1000],[2300,1050],[2400,1100]]",
        "output": "5"
      },
      {
        "input": "target = 400, startFuel = 20, stations = [[20,50],[40,60],[60,70],[80,80],[100,90],[120,100],[140,110],[160,120],[180,130]]",
        "output": "5"
      },
      {
        "input": "target = 2000, startFuel = 100, stations = [[100,150],[200,200],[300,100],[400,50],[500,300],[600,250],[700,150],[800,200],[900,100],[1000,150],[1100,200],[1200,50],[1300,250],[1400,150],[1500,50],[1600,100],[1700,200],[1800,150],[1900,50]]",
        "output": "10"
      },
      {
        "input": "target = 200, startFuel = 10, stations = [[10,60],[40,20],[70,10],[150,50]]",
        "output": "-1"
      },
      {
        "input": "target = 100, startFuel = 25, stations = [[10,20],[20,10],[30,10],[60,50]]",
        "output": "4"
      },
      {
        "input": "target = 600, startFuel = 150, stations = [[50,250],[100,100],[150,100],[200,100],[250,100],[300,100],[350,100],[400,100],[450,100],[500,100]]",
        "output": "3"
      },
      {
        "input": "target = 300, startFuel = 100, stations = [[50, 50], [100, 30], [150, 70], [200, 20], [250, 30]]",
        "output": "5"
      },
      {
        "input": "target = 600, startFuel = 150, stations = [[150, 200], [200, 250], [300, 300], [400, 350], [500, 400]]",
        "output": "2"
      },
      {
        "input": "target = 500, startFuel = 100, stations = [[50,100], [150,100], [250,50], [350,50], [450,50]]",
        "output": "-1"
      }
    ]
  },
  {
    "id": 2561,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Hash Table"
    ],
    "problemDescription": "You have two fruit baskets containing n fruits each. You are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. You want to make both baskets equal. To do so, you can use the following operation as many times as you want:\n\nChose two indices i and j, and swap the ith\u00a0fruit of basket1 with the jth\u00a0fruit of basket2.\nThe cost of the swap is min(basket1[i],basket2[j]).\n\nTwo baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.\nReturn the minimum cost to make both the baskets equal or -1 if impossible.\n\u00a0\nExample 1:\n\nInput: basket1 = [4,2,2,2], basket2 = [1,4,1,2]\nOutput: 1\nExplanation: Swap index 1 of basket1 with index 0 of basket2, which has cost 1. Now basket1 = [4,1,2,2] and basket2 = [2,4,1,2]. Rearranging both the arrays makes them equal.\n\nExample 2:\n\nInput: basket1 = [2,3,4,1], basket2 = [3,2,5,1]\nOutput: -1\nExplanation: It can be shown that it is impossible to make both the baskets equal.\n\n\u00a0\nConstraints:\n\nbasket1.length == basket2.length\n1 <= basket1.length <= 105\n1 <= basket1[i],basket2[i]\u00a0<= 109\n\n",
    "starterCode": "class Solution:\n    def minCost(self, basket1: List[int], basket2: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "basket1 = [1000000000, 1000000000], basket2 = [1000000000, 1000000000]",
        "output": "0"
      },
      {
        "input": "basket1 = [2,3,4,1], basket2 = [3,2,5,1]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1,1,2,2], basket2 = [2,2,1,1]",
        "output": "0"
      },
      {
        "input": "basket1 = [5,7,10,15], basket2 = [15,10,7,5]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,2,3], basket2 = [3,2,1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,2,3,4,5], basket2 = [5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,3,5,7,9], basket2 = [2,4,6,8,10]",
        "output": "-1"
      },
      {
        "input": "basket1 = [4,2,2,2], basket2 = [1,4,1,2]",
        "output": "1"
      },
      {
        "input": "basket1 = [10,10,10,10], basket2 = [10,10,10,10]",
        "output": "0"
      },
      {
        "input": "basket1 = [100,200,300,400], basket2 = [400,500,600,700]",
        "output": "-1"
      },
      {
        "input": "basket1 = [5,7,9,11], basket2 = [11,9,7,5]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,3,5,7], basket2 = [2,4,6,8]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1,2,3,4], basket2 = [4,3,2,1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,1,2,3], basket2 = [1,1,3,2]",
        "output": "0"
      },
      {
        "input": "basket1 = [10,10,10,10], basket2 = [1,1,1,1]",
        "output": "2"
      },
      {
        "input": "basket1 = [5,5,5,5], basket2 = [5,5,5,5]",
        "output": "0"
      },
      {
        "input": "basket1 = [10,20,30,40], basket2 = [40,30,20,10]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,1,1,1], basket2 = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 3, 5, 7, 9, 11, 13, 15], basket2 = [15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [100, 200, 300, 400, 500], basket2 = [500, 400, 300, 200, 100]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5], basket2 = [5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [3, 5, 7, 9, 11], basket2 = [9, 11, 5, 7, 3]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 1, 1, 2, 2, 2, 3, 3, 4], basket2 = [1, 1, 2, 2, 2, 2, 3, 3, 4, 4]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 2, 2, 3, 3, 4, 5, 5, 5, 6], basket2 = [6, 5, 5, 4, 3, 3, 2, 2, 1, 1]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1000000000, 999999999, 1, 2], basket2 = [1000000000, 999999999, 3, 4]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], basket2 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "10"
      },
      {
        "input": "basket1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], basket2 = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], basket2 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], basket2 = [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 3, 5, 7, 9, 11], basket2 = [2, 4, 6, 8, 10, 12]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], basket2 = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], basket2 = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 2, 3, 4, 5, 6, 7, 8], basket2 = [8, 7, 6, 5, 4, 3, 2, 1, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], basket2 = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], basket2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]",
        "output": "-1"
      },
      {
        "input": "basket1 = [3, 5, 6, 7, 8, 9], basket2 = [9, 8, 7, 6, 5, 3]",
        "output": "0"
      },
      {
        "input": "basket1 = [1000000000, 1000000000, 1, 1], basket2 = [1, 1, 1000000000, 1000000000]",
        "output": "0"
      },
      {
        "input": "basket1 = [3, 3, 3, 3, 3, 3], basket2 = [1, 1, 1, 1, 1, 1]",
        "output": "3"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5], basket2 = [6, 7, 8, 9, 10]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6], basket2 = [6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 3, 5, 7, 9], basket2 = [9, 7, 5, 3, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], basket2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 2, 3, 4, 5], basket2 = [5, 4, 3, 2, 2, 6]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 2, 2, 3, 3, 4, 4, 5, 5, 5], basket2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], basket2 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "5"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], basket2 = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 1, 2, 2, 3], basket2 = [1, 1, 1, 2, 2, 3]",
        "output": "0"
      },
      {
        "input": "basket1 = [5, 5, 5, 5, 5], basket2 = [5, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "basket1 = [2,2,2,2,3,3,3,3], basket2 = [1,1,1,1,4,4,4,4]",
        "output": "6"
      },
      {
        "input": "basket1 = [9, 7, 5, 3, 1], basket2 = [1, 3, 5, 7, 9]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 2, 3, 4, 5], basket2 = [5, 4, 3, 2, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], basket2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], basket2 = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 1, 2, 3, 4, 5], basket2 = [2, 3, 4, 5, 5, 5]",
        "output": "1"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], basket2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "0"
      },
      {
        "input": "basket1 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], basket2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "basket1 = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], basket2 = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]",
        "output": "0"
      },
      {
        "input": "basket1 = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], basket2 = [10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000]",
        "output": "0"
      },
      {
        "input": "basket1 = [5, 7, 9, 11, 13, 15], basket2 = [15, 13, 11, 9, 7, 5]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], basket2 = [4, 4, 4, 4, 3, 3, 3, 2, 2, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], basket2 = [5, 5, 4, 4, 3, 3, 2, 2, 1, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3], basket2 = [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,1,2,2,3,3,4,4,5,5], basket2 = [5,5,4,4,3,3,2,2,1,1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], basket2 = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "basket1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], basket2 = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 3, 5, 7, 9, 11, 13, 15], basket2 = [2, 4, 6, 8, 10, 12, 14, 16]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6], basket2 = [6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], basket2 = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [5,5,5,5,5,5,5,5,5,5], basket2 = [5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], basket2 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "0"
      },
      {
        "input": "basket1 = [5, 10, 15, 20, 25, 30, 35, 40], basket2 = [40, 35, 30, 25, 20, 15, 10, 5]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], basket2 = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], basket2 = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6], basket2 = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], basket2 = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], basket2 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "basket1 = [3, 6, 8, 8, 10], basket2 = [10, 8, 6, 3, 8]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9], basket2 = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5], basket2 = [5,5,5,4,4,4,3,3,3,2,2,2,1,1,1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], basket2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1,2,3,4,5,6,7,8,9,10], basket2 = [11,12,13,14,15,16,17,18,19,20]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3], basket2 = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 3, 5, 7, 9, 11, 13], basket2 = [13, 11, 9, 7, 5, 3, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1000000000, 1000000000, 1000000000, 1000000000], basket2 = [1, 1, 1, 1]",
        "output": "2"
      },
      {
        "input": "basket1 = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], basket2 = [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], basket2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 11]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], basket2 = [1, 1, 1, 1, 1, 10, 10, 10, 10, 10]",
        "output": "-1"
      },
      {
        "input": "basket1 = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], basket2 = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,2,3,4,5,6,7,8], basket2 = [8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "basket1 = [10, 20, 30, 40, 50, 60], basket2 = [60, 50, 40, 30, 20, 10]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 2, 3, 4, 5, 5, 6], basket2 = [6, 5, 5, 4, 3, 2, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], basket2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1,3,5,7,9,11,13,15], basket2 = [15,13,11,9,7,5,3,1]",
        "output": "0"
      },
      {
        "input": "basket1 = [5, 10, 15, 20, 25], basket2 = [25, 20, 15, 10, 5]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], basket2 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "-1"
      },
      {
        "input": "basket1 = [10, 20, 30, 40, 50], basket2 = [50, 40, 30, 20, 10]",
        "output": "0"
      },
      {
        "input": "basket1 = [1000000000, 1000000000, 1000000000], basket2 = [1, 1, 1]",
        "output": "-1"
      },
      {
        "input": "basket1 = [2, 2, 3, 3, 4, 4], basket2 = [4, 4, 3, 3, 2, 2]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], basket2 = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], basket2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], basket2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3], basket2 = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]",
        "output": "0"
      },
      {
        "input": "basket1 = [7, 7, 7, 8, 9], basket2 = [9, 8, 7, 7, 7]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], basket2 = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [1, 1, 1, 2, 2, 3], basket2 = [1, 1, 1, 2, 3, 3]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 3, 5, 7, 9], basket2 = [2, 4, 6, 8, 10]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 1, 2, 3, 4, 5, 6, 7], basket2 = [7, 6, 5, 4, 3, 2, 1, 1]",
        "output": "0"
      },
      {
        "input": "basket1 = [10,20,30,40,50], basket2 = [5,15,25,35,45]",
        "output": "-1"
      },
      {
        "input": "basket1 = [1, 2, 2, 3, 4], basket2 = [1, 2, 2, 3, 4]",
        "output": "0"
      }
    ]
  },
  {
    "id": 1439,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Matrix",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k.\nYou are allowed to choose exactly one element from each row to form an array.\nReturn the kth smallest array sum among all possible arrays.\n\u00a0\nExample 1:\n\nInput: mat = [[1,3,11],[2,4,6]], k = 5\nOutput: 7\nExplanation: Choosing one element from each row, the first k smallest sum are:\n[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.\n\nExample 2:\n\nInput: mat = [[1,3,11],[2,4,6]], k = 9\nOutput: 17\n\nExample 3:\n\nInput: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7\nOutput: 9\nExplanation: Choosing one element from each row, the first k smallest sum are:\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.  \n\n\u00a0\nConstraints:\n\nm == mat.length\nn == mat.length[i]\n1 <= m, n <= 40\n1 <= mat[i][j] <= 5000\n1 <= k <= min(200, nm)\nmat[i] is a non-decreasing array.\n\n",
    "starterCode": "class Solution:\n    def kthSmallest(self, mat: List[List[int]], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7",
        "output": "9"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6]], k = 9",
        "output": "9"
      },
      {
        "input": "mat = [[1,3,11],[2,4,6]], k = 5",
        "output": "7"
      },
      {
        "input": "mat = [[1,3,11],[2,4,6]], k = 9",
        "output": "17"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6]], k = 1",
        "output": "5"
      },
      {
        "input": "mat = [[1,5,9],[10,11,13],[12,13,15]], k = 8",
        "output": "27"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40]], k = 100",
        "output": "69"
      },
      {
        "input": "mat = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], k = 100",
        "output": "4"
      },
      {
        "input": "mat = [[1,7,10,15],[2,8,12,16],[3,9,13,17],[4,10,14,18]], k = 15",
        "output": "22"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16]], k = 100",
        "output": "68"
      },
      {
        "input": "mat = [[1,1,1,1],[2,2,2,2],[3,3,3,3],[4,4,4,4],[5,5,5,5]], k = 160",
        "output": "15"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]], k = 180",
        "output": "42"
      },
      {
        "input": "mat = [[1,3,5,7,9,11,13,15,17,19],[2,4,6,8,10,12,14,16,18,20],[3,5,7,9,11,13,15,17,19,21]], k = 200",
        "output": "24"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 100",
        "output": "33"
      },
      {
        "input": "mat = [[500,1000,1500],[550,1050,1550],[600,1100,1600],[650,1150,1650]], k = 10",
        "output": "3300"
      },
      {
        "input": "mat = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]], k = 200",
        "output": "10"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5], [10, 11, 12, 13, 14], [20, 21, 22, 23, 24], [30, 31, 32, 33, 34]], k = 50",
        "output": "65"
      },
      {
        "input": "mat = [[1,3,5,7,9],[2,4,6,8,10],[3,5,7,9,11]], k = 100",
        "output": "22"
      },
      {
        "input": "mat = [[10,20,30],[15,25,35],[20,30,40],[25,35,45],[30,40,50]], k = 50",
        "output": "130"
      },
      {
        "input": "mat = [[5,10,15],[6,11,16],[7,12,17],[8,13,18]], k = 25",
        "output": "41"
      },
      {
        "input": "mat = [[5,10,15,20,25],[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19]], k = 100",
        "output": "32"
      },
      {
        "input": "mat = [[100,200,300,400,500],[101,201,301,401,501],[102,202,302,402,502],[103,203,303,403,503]], k = 20",
        "output": "706"
      },
      {
        "input": "mat = [[1,100,200],[5,150,250],[9,190,290],[13,230,330]], k = 80",
        "output": "970"
      },
      {
        "input": "mat = [[1,3,5,7,9,11],[2,4,6,8,10,12],[3,5,7,9,11,13],[4,6,8,10,12,14]], k = 50",
        "output": "18"
      },
      {
        "input": "mat = [[1,3,5,7,9],[2,4,6,8,10],[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], k = 150",
        "output": "27"
      },
      {
        "input": "mat = [[10,20,30,40,50],[5,15,25,35,45],[1,11,21,31,41],[6,16,26,36,46]], k = 50",
        "output": "62"
      },
      {
        "input": "mat = [[5,8,12,18],[1,3,7,11],[2,4,6,10],[9,13,15,17]], k = 100",
        "output": "33"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], k = 250",
        "output": "61"
      },
      {
        "input": "mat = [[1,2,3,4,5],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19]], k = 50",
        "output": "35"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24]], k = 150",
        "output": "46"
      },
      {
        "input": "mat = [[1,5,9,12],[2,6,10,13],[3,7,11,14],[4,8,15,16]], k = 15",
        "output": "21"
      },
      {
        "input": "mat = [[5,10,15,20],[25,30,35,40],[45,50,55,60]], k = 15",
        "output": "90"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10,11],[3,4,5,6,7,8,9,10,11,12],[4,5,6,7,8,9,10,11,12,13]], k = 150",
        "output": "16"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]], k = 30",
        "output": "25"
      },
      {
        "input": "mat = [[5, 9, 14], [4, 12, 18], [2, 8, 10], [1, 3, 6]], k = 25",
        "output": "26"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]], k = 50",
        "output": "102"
      },
      {
        "input": "mat = [[100,200,300,400,500],[50,100,150,200,250],[25,50,75,100,125],[1,2,3,4,5]], k = 80",
        "output": "328"
      },
      {
        "input": "mat = [[10,20,30,40,50],[11,22,33,44,55],[12,24,36,48,60],[13,26,39,52,65]], k = 100",
        "output": "104"
      },
      {
        "input": "mat = [[500,1000,1500],[100,200,300],[250,500,750],[50,100,150],[200,400,600]], k = 60",
        "output": "1800"
      },
      {
        "input": "mat = [[1,10,100],[1,4,50],[2,3,60]], k = 20",
        "output": "107"
      },
      {
        "input": "mat = [[1,3,5,7,9],[11,13,15,17,19],[21,23,25,27,29],[31,33,35,37,39]], k = 175",
        "output": "76"
      },
      {
        "input": "mat = [[2,4,6,8,10],[12,14,16,18,20],[22,24,26,28,30],[32,34,36,38,40]], k = 30",
        "output": "74"
      },
      {
        "input": "mat = [[2,6,10,14],[1,5,9,13],[3,7,11,15],[4,8,12,16]], k = 15",
        "output": "18"
      },
      {
        "input": "mat = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]], k = 50",
        "output": "4"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]], k = 50",
        "output": "38"
      },
      {
        "input": "mat = [[1,1000,2000,3000,4000],[2,2000,3000,4000,5000],[3,3000,4000,5000,6000],[4,4000,5000,6000,7000]], k = 120",
        "output": "9005"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]], k = 300",
        "output": "11"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]], k = 199",
        "output": "10"
      },
      {
        "input": "mat = [[1,1,1,1],[1,2,2,2],[1,2,3,3],[1,2,3,4]], k = 20",
        "output": "5"
      },
      {
        "input": "mat = [[1,1000,5000],[500,2000,4000],[100,3000,4500],[200,2500,3500]], k = 100",
        "output": "17000"
      },
      {
        "input": "mat = [[1,5,9,13],[2,6,10,14],[3,7,11,15],[4,8,12,16],[5,9,13,17]], k = 200",
        "output": "35"
      },
      {
        "input": "mat = [[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,7]], k = 120",
        "output": "16"
      },
      {
        "input": "mat = [[1,3,5,7,9,11,13],[2,4,6,8,10,12,14],[3,5,7,9,11,13,15],[4,6,8,10,12,14,16]], k = 70",
        "output": "18"
      },
      {
        "input": "mat = [[1000,2000,3000,4000],[500,1500,2500,3500],[100,1100,2100,3100],[50,1050,2050,3050]], k = 10",
        "output": "3650"
      },
      {
        "input": "mat = [[100,200,300,400,500],[600,700,800,900,1000],[1100,1200,1300,1400,1500]], k = 18",
        "output": "2100"
      },
      {
        "input": "mat = [[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12]], k = 60",
        "output": "27"
      },
      {
        "input": "mat = [[100,200,300],[50,150,250],[10,110,210],[5,105,205],[1,101,201]], k = 80",
        "output": "566"
      },
      {
        "input": "mat = [[1,1000,2000,3000],[2,2000,3000,4000],[3,3000,4000,5000],[4,4000,5000,6000]], k = 160",
        "output": "12001"
      },
      {
        "input": "mat = [[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3],[4,4,4,4,4],[5,5,5,5,5]], k = 125",
        "output": "15"
      },
      {
        "input": "mat = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]], k = 10",
        "output": "8"
      },
      {
        "input": "mat = [[1,3,5,7,9,11,13],[2,4,6,8,10,12,14],[15,17,19,21,23,25,27],[29,31,33,35,37,39,41]], k = 180",
        "output": "59"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]], k = 150",
        "output": "11"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30]], k = 120",
        "output": "69"
      },
      {
        "input": "mat = [[1, 7, 12, 22], [5, 8, 9, 13], [6, 12, 15, 18]], k = 15",
        "output": "24"
      },
      {
        "input": "mat = [[3,6,9,12],[2,5,8,11],[1,4,7,10]], k = 24",
        "output": "18"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], k = 60",
        "output": "39"
      },
      {
        "input": "mat = [[5,10,15,20,25],[6,11,16,21,26],[7,12,17,22,27],[8,13,18,23,28],[9,14,19,24,29]], k = 50",
        "output": "50"
      },
      {
        "input": "mat = [[1,5,9,13,17],[2,6,10,14,18],[3,7,11,15,19],[4,8,12,16,20]], k = 150",
        "output": "34"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], k = 120",
        "output": "40"
      },
      {
        "input": "mat = [[1,3,5,7,9],[2,4,6,8,10],[3,6,9,12,15]], k = 60",
        "output": "20"
      },
      {
        "input": "mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]], k = 100",
        "output": "55"
      },
      {
        "input": "mat = [[1,100,500,1000],[2,200,600,1100],[3,300,700,1200],[4,400,800,1300]], k = 120",
        "output": "1904"
      },
      {
        "input": "mat = [[10,20,30,40],[11,22,33,44],[12,24,36,48],[13,26,39,52]], k = 150",
        "output": "121"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], k = 150",
        "output": "60"
      },
      {
        "input": "mat = [[1, 3, 7, 9], [2, 4, 6, 8], [0, 5, 10, 12], [1, 6, 11, 13]], k = 20",
        "output": "13"
      },
      {
        "input": "mat = [[5,5,5,5,5],[5,5,5,5,5],[5,5,5,5,5],[5,5,5,5,5],[5,5,5,5,5],[5,5,5,5,5]], k = 32",
        "output": "30"
      },
      {
        "input": "mat = [[1,2,3,4,5],[5,6,7,8,9],[9,10,11,12,13]], k = 50",
        "output": "20"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], k = 100",
        "output": "59"
      },
      {
        "input": "mat = [[1,3,5,7,9,11,13,15],[2,4,6,8,10,12,14,16],[3,5,7,9,11,13,15,17],[4,6,8,10,12,14,16,18]], k = 100",
        "output": "20"
      },
      {
        "input": "mat = [[5,10,15,20,25],[4,9,14,19,24],[3,8,13,18,23],[2,7,12,17,22],[1,6,11,16,21]], k = 50",
        "output": "30"
      },
      {
        "input": "mat = [[1,100,200,300,400],[2,200,300,400,500],[3,300,400,500,600],[4,400,500,600,700],[5,500,600,700,800]], k = 150",
        "output": "910"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]], k = 200",
        "output": "41"
      },
      {
        "input": "mat = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], k = 100",
        "output": "5"
      },
      {
        "input": "mat = [[1,100,1000],[2,200,2000],[3,300,3000]], k = 20",
        "output": "3201"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]], k = 200",
        "output": "42"
      }
    ]
  },
  {
    "id": 42,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Monotonic Stack"
    ],
    "problemDescription": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n\u00a0\nExample 1:\n\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n\nExample 2:\n\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n\n\u00a0\nConstraints:\n\nn == height.length\n1 <= n <= 2 * 104\n0 <= height[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "height = [3,1,2,1,4,3,2,1,5]",
        "output": "11"
      },
      {
        "input": "height = [3,0,1,3,0,1,3]",
        "output": "10"
      },
      {
        "input": "height = [5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "height = [1]",
        "output": "0"
      },
      {
        "input": "height = [2,0,2]",
        "output": "2"
      },
      {
        "input": "height = [0,0,1,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "height = [1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "height = [1,0,2,0,1,0,3,0,1,0,1,2]",
        "output": "12"
      },
      {
        "input": "height = [1,2,1,0,1,0,1,0,1,2,1]",
        "output": "10"
      },
      {
        "input": "height = [0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "height = [1,2,3,4,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "height = [0,0,0,0]",
        "output": "0"
      },
      {
        "input": "height = [5,4,1,2]",
        "output": "1"
      },
      {
        "input": "height = [3,0,1,3,0,1,1,3,2,1,2,1]",
        "output": "13"
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9"
      },
      {
        "input": "height = [3,0,0,2,0,4]",
        "output": "10"
      },
      {
        "input": "height = [5,4,3,2,1,2,3,4,5]",
        "output": "16"
      },
      {
        "input": "height = [1,0,2,0,1,0,3,1,0,1,2]",
        "output": "10"
      },
      {
        "input": "height = [0,2,0,2,0]",
        "output": "2"
      },
      {
        "input": "height = [1,0,0,0,1]",
        "output": "3"
      },
      {
        "input": "height = [3,0,1,3,0,1,2,1,2,1]",
        "output": "9"
      },
      {
        "input": "height = [0,5,0,5,0]",
        "output": "5"
      },
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6"
      },
      {
        "input": "height = [1,0,1,0,1]",
        "output": "2"
      },
      {
        "input": "height = [1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "height = [2,1,0,2]",
        "output": "3"
      },
      {
        "input": "height = [10,1,1,1,1,1,1,1,1,1,10]",
        "output": "81"
      },
      {
        "input": "height = [0,1,2,3,4,5,6,5,4,3,2,1,0,1,2,3,4,5,6,0]",
        "output": "36"
      },
      {
        "input": "height = [10,0,10,0,10,0,10,0,10,0,10,0,10]",
        "output": "60"
      },
      {
        "input": "height = [6,4,2,0,3,2,0,3,1,4,5,3,2,7,5,3,0,1,2,1,2,1,1,1,2,1,2,1,2,1]",
        "output": "52"
      },
      {
        "input": "height = [10,0,10,0,10,0,10,0,10]",
        "output": "40"
      },
      {
        "input": "height = [1,2,3,4,5,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "25"
      },
      {
        "input": "height = [100,80,60,40,20,0,20,40,60,80,100]",
        "output": "500"
      },
      {
        "input": "height = [2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "6"
      },
      {
        "input": "height = [0,1,0,2,0,1,0,3,0,1,0,2,0,1]",
        "output": "12"
      },
      {
        "input": "height = [10,9,8,7,6,5,6,7,8,9,10]",
        "output": "25"
      },
      {
        "input": "height = [1,2,3,4,5,6,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "height = [0,0,0,0,10,0,0,0,0,0,10,0,0,0,0]",
        "output": "50"
      },
      {
        "input": "height = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "8"
      },
      {
        "input": "height = [1,2,0,2,1,0,1,3,2,1,2,1,0,3,2,1,2,1,5]",
        "output": "21"
      },
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1,4,3,2,1,2,1,0,1]",
        "output": "13"
      },
      {
        "input": "height = [6,5,4,3,2,1,2,3,4,5,6]",
        "output": "25"
      },
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "19"
      },
      {
        "input": "height = [0,1,2,1,0,1,3,1,0,1,2,1,0]",
        "output": "8"
      },
      {
        "input": "height = [10,1,1,1,1,1,1,1,1,10]",
        "output": "72"
      },
      {
        "input": "height = [0,1,2,3,4,5,0,5,4,3,2,1,0]",
        "output": "5"
      },
      {
        "input": "height = [1,2,3,4,5,5,4,3,2,1,0,0,0,1,2,3,4,5]",
        "output": "35"
      },
      {
        "input": "height = [0,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "0"
      },
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1,4,2,1,3,2,1,2,1]",
        "output": "15"
      },
      {
        "input": "height = [10,9,8,7,6,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "25"
      },
      {
        "input": "height = [5,2,1,2,1,5,1,2,1,5,1,2,1,2,1,5]",
        "output": "43"
      },
      {
        "input": "height = [2,1,0,1,2]",
        "output": "4"
      },
      {
        "input": "height = [10,0,10,0,10,0,10]",
        "output": "30"
      },
      {
        "input": "height = [1,2,3,4,3,2,1,2,3,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "height = [1,0,2,0,1,0,1,3,2,1,2,1,0,2,1,0,1,3,2,1,2,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "42"
      },
      {
        "input": "height = [2,8,5,5,5,9,8,9,2]",
        "output": "10"
      },
      {
        "input": "height = [1,7,8,8,6,4,3,1,1,0,1,7,6,5,4,3,2,1,0,1,0,1,2,1,1,1,1,1,1,1]",
        "output": "40"
      },
      {
        "input": "height = [1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "height = [1,2,3,4,3,2,1,0,1,0,1,2,3,2,1]",
        "output": "14"
      },
      {
        "input": "height = [5,0,1,0,2,0,1,0,3,0,1,0]",
        "output": "18"
      },
      {
        "input": "height = [4,2,0,6,2,3,8,0,4,4,1,2,2,2,3,3,4,0,1,0,1,2,1,2,1,1,1,2,1,2]",
        "output": "39"
      },
      {
        "input": "height = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "height = [2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0]",
        "output": "18"
      },
      {
        "input": "height = [1,2,3,0,1,2,0,1,2,0,1,2]",
        "output": "9"
      },
      {
        "input": "height = [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "23"
      },
      {
        "input": "height = [0,5,4,3,2,1,2,3,4,5,0,5,4,3,2,1,2,3,4,5]",
        "output": "37"
      },
      {
        "input": "height = [2,1,0,1,2,1,0,1,2,1]",
        "output": "8"
      },
      {
        "input": "height = [0,1,2,3,2,1,0,1,2,1,0]",
        "output": "4"
      },
      {
        "input": "height = [1,2,1,0,1,2,1,0,1,2,1,0,1,2,1,0,1,2,1,0]",
        "output": "16"
      },
      {
        "input": "height = [9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "81"
      },
      {
        "input": "height = [3,0,1,3,0,1,2,0,2]",
        "output": "10"
      },
      {
        "input": "height = [5,0,3,0,0,0,2,0,4,0,0,1,0,0,5]",
        "output": "55"
      },
      {
        "input": "height = [3,0,3,0,3,0,3,0,3,0]",
        "output": "12"
      },
      {
        "input": "height = [0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5]",
        "output": "50"
      },
      {
        "input": "height = [1,2,3,4,5,6,7,8,9,0,9,8,7,6,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "height = [0,2,0,2,0,3,0,3,0,2,0,2]",
        "output": "11"
      },
      {
        "input": "height = [3,0,1,0,2,0,1,0,3,0,2,0,1,0]",
        "output": "20"
      },
      {
        "input": "height = [5,2,1,2,1,5,1,2,1,2,1,5,1,2,1,2,1,5,1,2,1,2,1,5,1,2,1,2,1,5]",
        "output": "86"
      },
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1,0,1,2,1,0,2,1,0]",
        "output": "13"
      },
      {
        "input": "height = [1,2,1,2,1,2,1,2,1,2]",
        "output": "4"
      },
      {
        "input": "height = [0,1,2,0,2,1,0,1,3,2,1,2,1,0,3,2,1,2,1,0,5,0,4]",
        "output": "28"
      },
      {
        "input": "height = [0,2,0,2,0,3,0,3,0,4]",
        "output": "10"
      },
      {
        "input": "height = [5,4,3,2,1,0,1,2,3,4,5,0,5,4,3,2,1]",
        "output": "30"
      },
      {
        "input": "height = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,0,1,2,3,4,5,6,7,8,9]",
        "output": "52"
      },
      {
        "input": "height = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "6"
      },
      {
        "input": "height = [4,2,0,3,2,5,0,5,2,3,0,2,4,0,5]",
        "output": "33"
      },
      {
        "input": "height = [0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0]",
        "output": "5"
      },
      {
        "input": "height = [3,2,1,2,3]",
        "output": "4"
      },
      {
        "input": "height = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "7"
      },
      {
        "input": "height = [1,8,6,2,5,4,8,3,7,9,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "35"
      },
      {
        "input": "height = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "9"
      },
      {
        "input": "height = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "12"
      },
      {
        "input": "height = [4,2,3,0,3,5,3,2,1,5,3,0,3,5,3,0,3,5,2,1]",
        "output": "35"
      },
      {
        "input": "height = [1,0,1,0,1,0,1,0,1,0,1]",
        "output": "5"
      },
      {
        "input": "height = [7,6,5,4,3,2,1,2,3,4,5,6,7]",
        "output": "36"
      },
      {
        "input": "height = [3,2,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "6"
      },
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1,4,2,1,0,1,3]",
        "output": "19"
      },
      {
        "input": "height = [1,0,2,0,1,0,3,0,1,0,2,0,1]",
        "output": "12"
      },
      {
        "input": "height = [1,2,3,0,1,0,2,0,3,0,2,0,1,0,3]",
        "output": "24"
      },
      {
        "input": "height = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "height = [1,2,3,4,5,6,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7]",
        "output": "49"
      },
      {
        "input": "height = [10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "100"
      },
      {
        "input": "height = [3,0,1,0,2,0,4,0,3,0,5,0]",
        "output": "21"
      },
      {
        "input": "height = [5,0,5,0,5,0,5,0,5,0,5,0,5,0,5]",
        "output": "35"
      },
      {
        "input": "height = [5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1,0,3,2,1,2,1]",
        "output": "15"
      },
      {
        "input": "height = [1,2,3,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1,0,1,0,1,3,2,1,2,1]",
        "output": "22"
      },
      {
        "input": "height = [2,1,0,1,2,0,1,2,0,1,2,0,1,2]",
        "output": "13"
      },
      {
        "input": "height = [1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "6"
      },
      {
        "input": "height = [5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5]",
        "output": "60"
      },
      {
        "input": "height = [1,3,2,4,1,3,1,4,5,2,2,1]",
        "output": "8"
      },
      {
        "input": "height = [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1]",
        "output": "12"
      },
      {
        "input": "height = [5,5,5,5,5,1,5,5,5,5,5]",
        "output": "4"
      },
      {
        "input": "height = [5,2,1,2,1,5]",
        "output": "14"
      },
      {
        "input": "height = [0,2,0,2,1,0,1,3,2,1,2,1]",
        "output": "7"
      },
      {
        "input": "height = [1,2,3,4,5,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "height = [2,0,2,0,2,0,2]",
        "output": "6"
      },
      {
        "input": "height = [0,1,2,0,2,1,0,1,3,2,1,2,1]",
        "output": "7"
      },
      {
        "input": "height = [0,2,0,2,0,3,0,3,0,2,0,2,0]",
        "output": "11"
      },
      {
        "input": "height = [5,5,1,1,1,5,1,1,1,5,1,1,1,5,5]",
        "output": "36"
      },
      {
        "input": "height = [3,3,3,3,2,2,2,2,1,1,1,1,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "height = [6,4,2,0,3,0,1,4,6,2,3,5,1,0,5,4,3,2,1,0]",
        "output": "42"
      },
      {
        "input": "height = [5,0,3,0,0,5,0,0,2,4]",
        "output": "27"
      },
      {
        "input": "height = [3,1,1,3,1,1,3,1,1,3,1,1,3,1,1]",
        "output": "16"
      },
      {
        "input": "height = [5,5,1,7,1,1,5,2,7,6]",
        "output": "23"
      },
      {
        "input": "height = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "9"
      },
      {
        "input": "height = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      }
    ]
  },
  {
    "id": 2172,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Dynamic Programming",
      "Bitmask"
    ],
    "problemDescription": "You are given an integer array nums of length n and an integer numSlots such that 2 * numSlots >= n. There are numSlots slots numbered from 1 to numSlots.\nYou have to place all n integers into the slots such that each slot contains at most two numbers. The AND sum of a given placement is the sum of the bitwise AND of every number with its respective slot number.\n\nFor example, the AND sum of placing the numbers [1, 3] into slot 1 and [4, 6] into slot 2 is equal to (1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4.\n\nReturn the maximum possible AND sum of nums given numSlots slots.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3,4,5,6], numSlots = 3\nOutput: 9\nExplanation: One possible placement is [1, 4] into slot 1, [2, 6] into slot 2, and [3, 5] into slot 3. \nThis gives the maximum AND sum of (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9.\n\nExample 2:\n\nInput: nums = [1,3,10,4,7,1], numSlots = 9\nOutput: 24\nExplanation: One possible placement is [1, 1] into slot 1, [3] into slot 3, [4] into slot 4, [7] into slot 7, and [10] into slot 9.\nThis gives the maximum AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.\nNote that slots 2, 5, 6, and 8 are empty which is permitted.\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= numSlots <= 9\n1 <= n <= 2 * numSlots\n1 <= nums[i] <= 15\n\n",
    "starterCode": "class Solution:\n    def maximumANDSum(self, nums: List[int], numSlots: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,1,1], numSlots = 2",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3], numSlots = 2",
        "output": "5"
      },
      {
        "input": "nums = [15,15,15,15,15,15,15,15], numSlots = 8",
        "output": "52"
      },
      {
        "input": "nums = [15,15,15], numSlots = 2",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6], numSlots = 3",
        "output": "9"
      },
      {
        "input": "nums = [7,11,4,1,3,10,4,9], numSlots = 5",
        "output": "23"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], numSlots = 8",
        "output": "8"
      },
      {
        "input": "nums = [1,2], numSlots = 1",
        "output": "1"
      },
      {
        "input": "nums = [4,10,7,6,9,8,3,9,8,1,2,6,8,7,8], numSlots = 9",
        "output": "72"
      },
      {
        "input": "nums = [1,1,1,1,1,1], numSlots = 3",
        "output": "4"
      },
      {
        "input": "nums = [15,15,15,15,15,15,15,15,15,15,15,15], numSlots = 6",
        "output": "42"
      },
      {
        "input": "nums = [1,3,10,4,7,1], numSlots = 9",
        "output": "24"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], numSlots = 8",
        "output": "8"
      },
      {
        "input": "nums = [7,11,4,1], numSlots = 3",
        "output": "7"
      },
      {
        "input": "nums = [1,2,3], numSlots = 3",
        "output": "6"
      },
      {
        "input": "nums = [1], numSlots = 1",
        "output": "1"
      },
      {
        "input": "nums = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15], numSlots = 10",
        "output": "110"
      },
      {
        "input": "nums = [15,10,5,1,14,9,4,2,13,8,3,6,12,7,11], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], numSlots = 9",
        "output": "84"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,1,3,5,7,9,11,13,15], numSlots = 9",
        "output": "84"
      },
      {
        "input": "nums = [15, 10, 5, 3, 8, 2, 7, 1, 14, 12, 9, 13, 4, 6, 11], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], numSlots = 7",
        "output": "56"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], numSlots = 10",
        "output": "10"
      },
      {
        "input": "nums = [15, 7, 8, 9, 10, 11, 12, 13, 14, 1, 2, 3, 4, 5, 6, 15, 1, 2], numSlots = 9",
        "output": "90"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], numSlots = 7",
        "output": "49"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], numSlots = 9",
        "output": "84"
      },
      {
        "input": "nums = [8, 5, 6, 7, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [11, 5, 7, 3, 14, 10, 9, 8], numSlots = 4",
        "output": "19"
      },
      {
        "input": "nums = [15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3], numSlots = 9",
        "output": "90"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1], numSlots = 9",
        "output": "85"
      },
      {
        "input": "nums = [12, 6, 7, 10, 5, 11, 4, 8, 15, 14, 2, 13, 3, 9, 1], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], numSlots = 9",
        "output": "86"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6], numSlots = 9",
        "output": "84"
      },
      {
        "input": "nums = [8, 3, 15, 2, 12, 6, 1, 7, 4, 14, 10, 13, 9, 5, 11], numSlots = 7",
        "output": "53"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], numSlots = 9",
        "output": "84"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [14, 3, 5, 7, 10, 2, 8, 13], numSlots = 4",
        "output": "19"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8], numSlots = 5",
        "output": "29"
      },
      {
        "input": "nums = [7, 5, 2, 9, 1, 12, 3, 8, 6, 11, 14, 15], numSlots = 6",
        "output": "40"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], numSlots = 9",
        "output": "87"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3], numSlots = 8",
        "output": "72"
      },
      {
        "input": "nums = [14,13,12,11,10,9,8,7,6,5,4,3,2,1], numSlots = 7",
        "output": "49"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], numSlots = 7",
        "output": "7"
      },
      {
        "input": "nums = [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], numSlots = 8",
        "output": "64"
      },
      {
        "input": "nums = [14, 7, 9, 12, 11, 8, 5, 10, 3, 2, 15, 6, 1, 4, 13], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [13, 9, 7, 5, 3, 1], numSlots = 4",
        "output": "16"
      },
      {
        "input": "nums = [15, 13, 11, 9, 7, 5, 3, 1], numSlots = 4",
        "output": "20"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], numSlots = 9",
        "output": "90"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [8,7,6,5,4,3,2,1,15,14,13,12,11,10,9], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [14, 14, 14, 14, 14, 14, 14, 14, 14, 14], numSlots = 5",
        "output": "24"
      },
      {
        "input": "nums = [2, 5, 7, 9, 1, 3, 6, 8, 10, 12, 14, 15, 11, 4, 13], numSlots = 7",
        "output": "51"
      },
      {
        "input": "nums = [8, 6, 4, 2, 10, 14, 12, 1], numSlots = 5",
        "output": "21"
      },
      {
        "input": "nums = [15,8,7,1,2,3,14,9,10,11,12,13,4,5,6], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [3, 5, 15, 7, 9, 11, 13, 14, 12, 10], numSlots = 6",
        "output": "39"
      },
      {
        "input": "nums = [10, 14, 7, 11, 8, 12, 13, 9, 6, 4, 5, 2, 3, 15, 1], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [8, 9, 10, 11, 12, 13, 14], numSlots = 7",
        "output": "21"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], numSlots = 9",
        "output": "90"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], numSlots = 8",
        "output": "40"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 2, 4, 6, 8, 10, 12, 14], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], numSlots = 6",
        "output": "39"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 15], numSlots = 8",
        "output": "72"
      },
      {
        "input": "nums = [1, 13, 5, 9, 11, 15, 3, 7, 14, 12, 2, 6, 10, 4, 8], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [14, 7, 13, 5, 11, 6, 2, 9], numSlots = 4",
        "output": "20"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], numSlots = 5",
        "output": "29"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8], numSlots = 8",
        "output": "72"
      },
      {
        "input": "nums = [9, 6, 11, 12, 14, 15, 7, 8, 10], numSlots = 5",
        "output": "26"
      },
      {
        "input": "nums = [6, 12, 10, 14, 1, 5, 11, 13, 7, 9, 3, 8, 2, 4, 15], numSlots = 7",
        "output": "49"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 6, 8, 7, 15, 14, 13, 12, 11, 10, 9], numSlots = 9",
        "output": "84"
      },
      {
        "input": "nums = [7, 13, 11, 1, 15, 5, 9, 3, 14, 12, 8, 10, 6, 2, 4], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [8, 7, 6, 5, 4, 3, 2, 1], numSlots = 4",
        "output": "19"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16], numSlots = 4",
        "output": "16"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 15, 14, 13, 12, 11], numSlots = 10",
        "output": "110"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56], numSlots = 4",
        "output": "19"
      },
      {
        "input": "nums = [7, 11, 13, 17, 19, 23, 29, 31, 37, 41], numSlots = 5",
        "output": "30"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18], numSlots = 9",
        "output": "46"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], numSlots = 8",
        "output": "40"
      },
      {
        "input": "nums = [14, 12, 10, 8, 6, 4, 2, 15, 13, 11, 9, 7, 5, 3, 1], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [8, 7, 6, 5, 4, 3, 2, 1, 15, 14, 13, 12, 11, 10, 9], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [3, 5, 7, 11, 13, 17], numSlots = 3",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], numSlots = 9",
        "output": "84"
      },
      {
        "input": "nums = [15, 1, 7, 15, 9, 7, 3, 10, 2, 14, 11, 13, 5, 4, 6, 8], numSlots = 9",
        "output": "87"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,1,3,5,7,9,11,13,15], numSlots = 9",
        "output": "86"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7], numSlots = 10",
        "output": "62"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], numSlots = 5",
        "output": "22"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 18], numSlots = 10",
        "output": "102"
      },
      {
        "input": "nums = [15, 9, 6, 11, 13, 7, 12, 1, 5, 3, 2, 4, 8, 14, 10], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [10, 15, 9, 4, 14, 8, 13, 7, 12, 2, 3, 11, 6, 5, 1], numSlots = 8",
        "output": "71"
      },
      {
        "input": "nums = [5, 14, 12, 3, 7, 9, 1, 13, 11, 8, 6, 4, 2, 15, 10], numSlots = 8",
        "output": "71"
      }
    ]
  },
  {
    "id": 233,
    "difficulty": "Hard",
    "tags": [
      "Recursion",
      "Math",
      "Dynamic Programming"
    ],
    "problemDescription": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n\u00a0\nExample 1:\n\nInput: n = 13\nOutput: 6\n\nExample 2:\n\nInput: n = 0\nOutput: 0\n\n\u00a0\nConstraints:\n\n0 <= n <= 109\n\n",
    "starterCode": "class Solution:\n    def countDigitOne(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 0",
        "output": "0"
      },
      {
        "input": "n = 987654321",
        "output": "891632373"
      },
      {
        "input": "n = 100000",
        "output": "50001"
      },
      {
        "input": "n = 999999999",
        "output": "900000000"
      },
      {
        "input": "n = 999",
        "output": "300"
      },
      {
        "input": "n = 1000000",
        "output": "600001"
      },
      {
        "input": "n = 501",
        "output": "201"
      },
      {
        "input": "n = 9999",
        "output": "4000"
      },
      {
        "input": "n = 100",
        "output": "21"
      },
      {
        "input": "n = 1000000000",
        "output": "900000001"
      },
      {
        "input": "n = 1000",
        "output": "301"
      },
      {
        "input": "n = 55",
        "output": "16"
      },
      {
        "input": "n = 50000000",
        "output": "45000000"
      },
      {
        "input": "n = 13",
        "output": "6"
      },
      {
        "input": "n = 99999",
        "output": "50000"
      },
      {
        "input": "n = 210",
        "output": "142"
      },
      {
        "input": "n = 1010",
        "output": "313"
      },
      {
        "input": "n = 500000005",
        "output": "500000001"
      },
      {
        "input": "n = 12345",
        "output": "8121"
      },
      {
        "input": "n = 50123",
        "output": "30057"
      },
      {
        "input": "n = 2147483647",
        "output": "2971027783"
      },
      {
        "input": "n = 909090909",
        "output": "826446281"
      },
      {
        "input": "n = 202020202",
        "output": "262218141"
      },
      {
        "input": "n = 111",
        "output": "36"
      },
      {
        "input": "n = 213456789",
        "output": "273589849"
      },
      {
        "input": "n = 111000111",
        "output": "99600372"
      },
      {
        "input": "n = 2000000000",
        "output": "2800000000"
      },
      {
        "input": "n = 123000000",
        "output": "129800001"
      },
      {
        "input": "n = 56789",
        "output": "33059"
      },
      {
        "input": "n = 110",
        "output": "33"
      },
      {
        "input": "n = 3000000000",
        "output": "3700000000"
      },
      {
        "input": "n = 807060504",
        "output": "745234201"
      },
      {
        "input": "n = 300",
        "output": "160"
      },
      {
        "input": "n = 10001",
        "output": "4003"
      },
      {
        "input": "n = 100100100",
        "output": "80150223"
      },
      {
        "input": "n = 10999",
        "output": "5300"
      },
      {
        "input": "n = 99",
        "output": "20"
      },
      {
        "input": "n = 876543210",
        "output": "803978042"
      },
      {
        "input": "n = 1001",
        "output": "303"
      },
      {
        "input": "n = 808080808",
        "output": "745842261"
      },
      {
        "input": "n = 5001",
        "output": "2501"
      },
      {
        "input": "n = 1101101101",
        "output": "1082954833"
      },
      {
        "input": "n = 101010101",
        "output": "81624329"
      },
      {
        "input": "n = 200000000",
        "output": "260000000"
      },
      {
        "input": "n = 303030303",
        "output": "342822161"
      },
      {
        "input": "n = 800000000",
        "output": "740000000"
      },
      {
        "input": "n = 101",
        "output": "23"
      },
      {
        "input": "n = 10000000",
        "output": "7000001"
      },
      {
        "input": "n = 10000000000",
        "output": "10000000001"
      },
      {
        "input": "n = 432109876",
        "output": "453263855"
      },
      {
        "input": "n = 2020",
        "output": "1612"
      },
      {
        "input": "n = 10101",
        "output": "4125"
      },
      {
        "input": "n = 600000000",
        "output": "580000000"
      },
      {
        "input": "n = 1023",
        "output": "337"
      },
      {
        "input": "n = 555555555",
        "output": "549382716"
      },
      {
        "input": "n = 1000000001",
        "output": "900000003"
      },
      {
        "input": "n = 50001",
        "output": "30001"
      },
      {
        "input": "n = 111111111",
        "output": "100000008"
      },
      {
        "input": "n = 1010101010",
        "output": "917253346"
      },
      {
        "input": "n = 888888888",
        "output": "812345679"
      },
      {
        "input": "n = 50005",
        "output": "30001"
      },
      {
        "input": "n = 654321098",
        "output": "628668419"
      },
      {
        "input": "n = 700000000",
        "output": "660000000"
      },
      {
        "input": "n = 200",
        "output": "140"
      },
      {
        "input": "n = 98765",
        "output": "49657"
      },
      {
        "input": "n = 500000000",
        "output": "500000000"
      },
      {
        "input": "n = 400000000",
        "output": "420000000"
      },
      {
        "input": "n = 100100",
        "output": "50122"
      },
      {
        "input": "n = 123456789",
        "output": "130589849"
      },
      {
        "input": "n = 1999999999",
        "output": "2800000000"
      },
      {
        "input": "n = 100001",
        "output": "50003"
      },
      {
        "input": "n = 199",
        "output": "140"
      },
      {
        "input": "n = 1111111111",
        "output": "1111111120"
      },
      {
        "input": "n = 800000008",
        "output": "740000001"
      },
      {
        "input": "n = 100010001",
        "output": "80014005"
      },
      {
        "input": "n = 100000000",
        "output": "80000001"
      }
    ]
  },
  {
    "id": 1610,
    "difficulty": "Hard",
    "tags": [
      "Geometry",
      "Array",
      "Math",
      "Sorting",
      "Sliding Window"
    ],
    "problemDescription": "You are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the X-Y plane.\nInitially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, posx and posy cannot be changed. Your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. Let d be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2].\n\nYour browser does not support the video tag or this video format.\n\nYou can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.\nThere can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.\nReturn the maximum number of points you can see.\n\u00a0\nExample 1:\n\n\nInput: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]\nOutput: 3\nExplanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight.\n\nExample 2:\n\nInput: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]\nOutput: 4\nExplanation: All points can be made visible in your field of view, including the one at your location.\n\nExample 3:\n\n\nInput: points = [[1,0],[2,1]], angle = 13, location = [1,1]\nOutput: 1\nExplanation: You can only see one of the two points, as shown above.\n\n\u00a0\nConstraints:\n\n1 <= points.length <= 105\npoints[i].length == 2\nlocation.length == 2\n0 <= angle < 360\n0 <= posx, posy, xi, yi <= 100\n\n",
    "starterCode": "class Solution:\n    def visiblePoints(self, points: List[List[int]], angle: int, location: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "points = [[1,0],[0,1],[-1,0],[0,-1]], angle = 90, location = [0,0]",
        "output": "2"
      },
      {
        "input": "points = [[100,100],[100,99],[99,100],[99,99]], angle = 45, location = [100,100]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[5,5],[10,10]], angle = 90, location = [0,0]",
        "output": "3"
      },
      {
        "input": "points = [[2,2],[3,3],[4,4],[1,1]], angle = 45, location = [2,2]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[0,1],[1,0],[1,1]], angle = 0, location = [0,0]",
        "output": "2"
      },
      {
        "input": "points = [[1,0],[2,1]], angle = 13, location = [1,1]",
        "output": "1"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5]], angle = 45, location = [1,1]",
        "output": "4"
      },
      {
        "input": "points = [[1,2],[2,2],[3,2],[4,2],[5,2]], angle = 90, location = [3,2]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3]], angle = 0, location = [0,0]",
        "output": "4"
      },
      {
        "input": "points = [[50,50],[51,50],[52,50]], angle = 1, location = [50,50]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[50,50]], angle = 90, location = [25,25]",
        "output": "1"
      },
      {
        "input": "points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]",
        "output": "3"
      },
      {
        "input": "points = [[100,100]], angle = 360, location = [100,100]",
        "output": "1"
      },
      {
        "input": "points = [[0,0],[100,100]], angle = 1, location = [50,50]",
        "output": "1"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1]], angle = 180, location = [1,1]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1],[1,1],[1,1]], angle = 360, location = [1,1]",
        "output": "5"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5]], angle = 180, location = [3,3]",
        "output": "5"
      },
      {
        "input": "points = [[10,10],[11,10],[12,10],[13,10],[14,10]], angle = 45, location = [10,10]",
        "output": "5"
      },
      {
        "input": "points = [[1,1],[2,2],[1,2],[2,1]], angle = 45, location = [1,1]",
        "output": "3"
      },
      {
        "input": "points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[0,1],[1,0],[1,1]], angle = 90, location = [0,0]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[0,0],[0,0]], angle = 180, location = [0,0]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1]], angle = 360, location = [1,1]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1],[2,2],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]], angle = 360, location = [1,1]",
        "output": "17"
      },
      {
        "input": "points = [[1,0],[0,1],[-1,0],[0,-1],[2,0],[0,2],[-2,0],[0,-2]], angle = 45, location = [0,0]",
        "output": "2"
      },
      {
        "input": "points = [[10,10],[10,20],[20,10],[20,20],[15,15],[5,5],[25,25],[5,25],[25,5],[15,5],[5,15],[25,15],[15,25]], angle = 120, location = [15,15]",
        "output": "6"
      },
      {
        "input": "points = [[5,5],[10,5],[15,5],[20,5],[25,5],[5,10],[10,10],[15,10],[20,10],[25,10]], angle = 45, location = [15,15]",
        "output": "5"
      },
      {
        "input": "points = [[0,0],[10,0],[20,0],[30,0],[40,0],[50,0],[60,0],[70,0],[80,0],[90,0]], angle = 10, location = [50,0]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], angle = 30, location = [5,5]",
        "output": "5"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9]], angle = 10, location = [1,5]",
        "output": "5"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1],[1,1],[1,1],[2,2],[2,2],[3,3],[3,3],[4,4]], angle = 180, location = [1,1]",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1],[2,2],[2,2],[2,2],[3,3],[3,3],[3,3],[4,4],[4,4],[4,4]], angle = 180, location = [2,2]",
        "output": "12"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[10,2]], angle = 30, location = [5,1]",
        "output": "10"
      },
      {
        "input": "points = [[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5],[10,5]], angle = 30, location = [5,5]",
        "output": "6"
      },
      {
        "input": "points = [[2,1],[1,2],[3,1],[1,3],[2,2]], angle = 90, location = [2,1]",
        "output": "4"
      },
      {
        "input": "points = [[10,0],[20,0],[30,0],[40,0],[50,0]], angle = 180, location = [25,25]",
        "output": "5"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]], angle = 359, location = [1,1]",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], angle = 180, location = [5,5]",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[1,5],[5,1]], angle = 90, location = [3,3]",
        "output": "4"
      },
      {
        "input": "points = [[100,100],[50,50],[50,100],[100,50],[75,75],[25,25],[75,25],[25,75]], angle = 45, location = [50,50]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]], angle = 90, location = [4,4]",
        "output": "5"
      },
      {
        "input": "points = [[2,3],[3,2],[4,5],[5,4],[6,5],[5,6]], angle = 45, location = [4,4]",
        "output": "2"
      },
      {
        "input": "points = [[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[5,6],[6,5],[5,4],[4,5]], angle = 90, location = [5,5]",
        "output": "8"
      },
      {
        "input": "points = [[2,1],[3,4],[5,5],[4,2],[1,2],[3,1]], angle = 45, location = [3,3]",
        "output": "2"
      },
      {
        "input": "points = [[2,0],[2,2],[1,3],[3,3],[0,2]], angle = 60, location = [2,1]",
        "output": "3"
      },
      {
        "input": "points = [[5,5],[6,5],[7,5],[8,5],[9,5],[5,6],[5,7],[5,8],[5,9],[5,10]], angle = 10, location = [5,5]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[5,5],[5,6],[5,7],[5,8],[5,9]], angle = 90, location = [5,1]",
        "output": "11"
      },
      {
        "input": "points = [[10,10],[10,9],[9,10],[9,11],[11,10],[11,11],[8,8],[8,9],[9,8],[11,9]], angle = 45, location = [10,10]",
        "output": "4"
      },
      {
        "input": "points = [[1,2],[2,1],[3,4],[4,3],[5,6],[6,5],[7,8],[8,7],[9,10],[10,9]], angle = 30, location = [5,5]",
        "output": "4"
      },
      {
        "input": "points = [[1,2],[2,2],[4,5],[5,4],[3,3]], angle = 45, location = [3,3]",
        "output": "3"
      },
      {
        "input": "points = [[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[0,1],[2,1],[0,2],[2,2],[0,3],[2,3],[0,4],[2,4],[0,5],[2,5]], angle = 90, location = [1,1]",
        "output": "17"
      },
      {
        "input": "points = [[10,10],[20,20],[30,30],[40,40],[50,50]], angle = 45, location = [25,25]",
        "output": "3"
      },
      {
        "input": "points = [[5,5],[5,10],[5,15],[5,20],[5,25]], angle = 90, location = [5,15]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5]], angle = 30, location = [3,3]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]], angle = 90, location = [5,1]",
        "output": "6"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], angle = 30, location = [5,5]",
        "output": "4"
      },
      {
        "input": "points = [[10,10],[10,20],[20,10],[20,20],[15,15],[5,5],[25,25]], angle = 90, location = [15,15]",
        "output": "4"
      },
      {
        "input": "points = [[0,1],[1,0],[0,-1],[-1,0],[0,0],[1,1],[-1,-1],[1,-1],[-1,1]], angle = 90, location = [0,0]",
        "output": "4"
      },
      {
        "input": "points = [[5,5],[5,6],[6,5],[6,6],[7,7],[8,8],[9,9]], angle = 45, location = [5,5]",
        "output": "6"
      },
      {
        "input": "points = [[50,50],[50,40],[50,30],[50,20],[50,10],[50,0],[50,-10],[50,-20],[50,-30],[50,-40]], angle = 120, location = [50,50]",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[1,2],[2,2],[3,2],[1,3],[2,3],[3,3]], angle = 60, location = [2,2]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1],[2,2],[2,2],[2,2],[3,3],[3,3],[3,3],[4,4],[4,4],[4,4],[5,5],[5,5],[5,5]], angle = 90, location = [3,3]",
        "output": "9"
      },
      {
        "input": "points = [[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5],[10,5]], angle = 45, location = [5,5]",
        "output": "6"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], angle = 30, location = [0,0]",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]], angle = 60, location = [5,1]",
        "output": "6"
      },
      {
        "input": "points = [[10,10],[10,20],[10,30],[10,40],[10,50],[10,60],[10,70]], angle = 15, location = [10,10]",
        "output": "7"
      },
      {
        "input": "points = [[10,10],[20,20],[30,30],[40,40],[50,50]], angle = 30, location = [25,25]",
        "output": "3"
      },
      {
        "input": "points = [[100,0],[0,100],[100,100],[50,50],[25,25],[75,75]], angle = 60, location = [50,50]",
        "output": "3"
      },
      {
        "input": "points = [[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9],[10,10]], angle = 180, location = [10,5]",
        "output": "10"
      },
      {
        "input": "points = [[1,0],[0,1],[-1,0],[0,-1],[0,0]], angle = 90, location = [0,0]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[11,0]], angle = 90, location = [5,0]",
        "output": "7"
      },
      {
        "input": "points = [[10,10],[20,10],[30,10],[40,10],[50,10]], angle = 15, location = [25,10]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[1,2],[2,1],[2,2],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2]], angle = 90, location = [3,2]",
        "output": "6"
      },
      {
        "input": "points = [[10,10],[20,20],[30,30],[40,40],[50,50]], angle = 90, location = [30,30]",
        "output": "3"
      },
      {
        "input": "points = [[1,0],[0,1],[1,1],[0,0],[2,2],[3,3],[4,4],[5,5]], angle = 90, location = [1,1]",
        "output": "5"
      },
      {
        "input": "points = [[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[5,9],[5,10]], angle = 60, location = [5,5]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], angle = 10, location = [5,5]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1]], angle = 10, location = [5,1]",
        "output": "5"
      },
      {
        "input": "points = [[10,10],[11,11],[10,11],[9,10],[10,9],[9,9],[9,11],[11,9]], angle = 60, location = [10,10]",
        "output": "3"
      },
      {
        "input": "points = [[0,1],[1,0],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]], angle = 60, location = [3,3]",
        "output": "5"
      },
      {
        "input": "points = [[5,5],[5,6],[6,5],[6,6],[10,10],[10,11],[11,10],[11,11]], angle = 90, location = [8,8]",
        "output": "4"
      },
      {
        "input": "points = [[10,10],[10,20],[20,10],[20,20],[15,15]], angle = 45, location = [15,15]",
        "output": "2"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,4],[1,4],[1,4],[1,5],[1,5],[1,5],[1,1],[1,1],[1,1]], angle = 10, location = [1,3]",
        "output": "12"
      },
      {
        "input": "points = [[100,0],[0,100],[0,0],[100,100],[50,50]], angle = 90, location = [50,50]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], angle = 10, location = [5,5]",
        "output": "6"
      },
      {
        "input": "points = [[5,5],[5,6],[6,5],[6,6],[7,7],[7,8],[8,7],[8,8]], angle = 90, location = [6,6]",
        "output": "5"
      },
      {
        "input": "points = [[50,50],[50,49],[50,51],[49,50],[51,50],[49,49],[51,51],[52,52],[48,48]], angle = 30, location = [50,50]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]], angle = 5, location = [1,5]",
        "output": "6"
      },
      {
        "input": "points = [[2,0],[0,2],[2,2],[1,1],[0,0],[1,0]], angle = 45, location = [1,1]",
        "output": "3"
      },
      {
        "input": "points = [[10,0],[0,10],[10,10],[5,5],[2,2],[8,8]], angle = 30, location = [5,5]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[2,1],[2,2],[3,1],[3,2],[3,3],[4,1],[4,2],[4,3],[4,4]], angle = 45, location = [3,3]",
        "output": "6"
      },
      {
        "input": "points = [[1,2],[2,1],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]], angle = 120, location = [1,1]",
        "output": "10"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], angle = 90, location = [0,0]",
        "output": "10"
      },
      {
        "input": "points = [[100,100],[100,99],[99,100],[99,98],[101,100],[100,101]], angle = 10, location = [100,100]",
        "output": "2"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[1,1],[2,2],[3,3],[4,4],[5,5]], angle = 90, location = [1,1]",
        "output": "15"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], angle = 45, location = [5,5]",
        "output": "5"
      },
      {
        "input": "points = [[10,10],[20,10],[15,20],[10,15],[15,15]], angle = 30, location = [15,15]",
        "output": "2"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], angle = 90, location = [5,5]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], angle = 360, location = [5,5]",
        "output": "15"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], angle = 360, location = [3,4]",
        "output": "11"
      },
      {
        "input": "points = [[10,10],[10,11],[11,10],[11,11],[10,9],[9,10],[9,9],[9,11],[11,9]], angle = 60, location = [10,10]",
        "output": "3"
      },
      {
        "input": "points = [[0,1],[1,0],[1,2],[2,1],[2,3],[3,2],[3,4],[4,3]], angle = 10, location = [2,2]",
        "output": "1"
      },
      {
        "input": "points = [[10,0],[0,10],[10,10],[0,0],[5,5]], angle = 60, location = [5,5]",
        "output": "2"
      },
      {
        "input": "points = [[50,50],[50,40],[50,60],[40,50],[60,50],[40,40],[60,60],[40,60],[60,40],[50,30],[50,70],[30,50],[70,50]], angle = 60, location = [50,50]",
        "output": "4"
      },
      {
        "input": "points = [[10,10],[9,10],[8,10],[7,10],[6,10],[5,10],[4,10],[3,10],[2,10],[1,10]], angle = 5, location = [5,10]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]], angle = 20, location = [1,5]",
        "output": "6"
      },
      {
        "input": "points = [[90,90],[91,90],[90,91],[91,91],[100,100]], angle = 10, location = [90,90]",
        "output": "3"
      },
      {
        "input": "points = [[10,1],[9,2],[8,3],[7,4],[6,5],[5,6],[4,7],[3,8],[2,9],[1,10]], angle = 30, location = [5,5]",
        "output": "4"
      },
      {
        "input": "points = [[10,1],[1,10],[10,9],[9,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]], angle = 60, location = [5,5]",
        "output": "5"
      },
      {
        "input": "points = [[5,0],[5,10],[10,5],[0,5]], angle = 180, location = [5,5]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1],[1,2],[1,2],[1,2],[1,3],[1,3],[1,3],[1,4],[1,4],[1,4],[1,5],[1,5],[1,5]], angle = 10, location = [1,3]",
        "output": "9"
      },
      {
        "input": "points = [[10,10],[10,20],[10,30],[10,40],[10,50],[10,60],[10,70],[10,80],[10,90]], angle = 10, location = [10,50]",
        "output": "5"
      },
      {
        "input": "points = [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0]], angle = 10, location = [5,0]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1],[2,2],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]], angle = 180, location = [1,1]",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1]], angle = 5, location = [5,1]",
        "output": "5"
      },
      {
        "input": "points = [[1,10],[2,20],[3,30],[4,40],[5,50],[6,60],[7,70],[8,80],[9,90],[10,100]], angle = 30, location = [5,50]",
        "output": "6"
      },
      {
        "input": "points = [[5,0],[0,5],[5,5],[0,0],[2,2],[3,3],[1,1],[4,4]], angle = 90, location = [2,2]",
        "output": "5"
      },
      {
        "input": "points = [[1,0],[2,1],[3,0],[4,1],[5,0],[6,1],[7,0],[8,1],[9,0],[10,1]], angle = 15, location = [5,0]",
        "output": "4"
      },
      {
        "input": "points = [[5,5],[5,6],[6,5],[6,6],[7,7]], angle = 45, location = [5,5]",
        "output": "4"
      },
      {
        "input": "points = [[10,10],[10,20],[10,30],[20,10],[20,20],[20,30],[30,10],[30,20],[30,30]], angle = 30, location = [20,20]",
        "output": "2"
      },
      {
        "input": "points = [[1,0],[2,1],[1,2],[0,1],[0,2],[1,1],[2,0],[2,2],[0,0]], angle = 45, location = [1,1]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0]], angle = 90, location = [2,0]",
        "output": "4"
      },
      {
        "input": "points = [[50,50],[51,50],[52,50],[53,50],[54,50],[55,50]], angle = 5, location = [52,50]",
        "output": "4"
      },
      {
        "input": "points = [[10,10],[20,10],[10,20],[20,20],[10,30],[20,30],[10,40],[20,40]], angle = 180, location = [15,15]",
        "output": "7"
      },
      {
        "input": "points = [[100,0],[0,100],[50,50],[25,25],[75,75]], angle = 45, location = [50,50]",
        "output": "2"
      },
      {
        "input": "points = [[1,2],[2,2],[4,5],[5,4],[3,3],[2,1]], angle = 45, location = [3,3]",
        "output": "4"
      },
      {
        "input": "points = [[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0]], angle = 180, location = [5,0]",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1]], angle = 180, location = [5,1]",
        "output": "9"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]], angle = 90, location = [1,5]",
        "output": "6"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0]], angle = 1, location = [5,0]",
        "output": "6"
      },
      {
        "input": "points = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90],[100,100]], angle = 40, location = [50,50]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]], angle = 45, location = [1,5]",
        "output": "6"
      },
      {
        "input": "points = [[5,5],[10,10],[15,15],[20,20],[25,25],[30,30],[35,35],[40,40]], angle = 90, location = [20,20]",
        "output": "5"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[1,2],[2,2],[3,2],[4,2],[5,2]], angle = 90, location = [3,1]",
        "output": "6"
      },
      {
        "input": "points = [[5,5],[5,6],[6,5],[6,6],[7,7],[8,8],[9,9]], angle = 60, location = [5,5]",
        "output": "6"
      },
      {
        "input": "points = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90]], angle = 45, location = [50,50]",
        "output": "5"
      },
      {
        "input": "points = [[5,5],[5,6],[6,5],[6,6],[7,7],[8,8],[9,9],[5,4],[4,5],[4,4],[6,4],[4,6],[7,6],[6,7],[8,6],[6,8]], angle = 45, location = [5,5]",
        "output": "8"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], angle = 30, location = [1,1]",
        "output": "10"
      },
      {
        "input": "points = [[5,5],[5,6],[5,7],[5,8],[5,9],[5,10]], angle = 10, location = [5,5]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[1,1],[1,1],[2,1],[2,1],[2,1],[3,1],[3,1],[3,1],[4,1],[4,1],[4,1],[5,1],[5,1],[5,1]], angle = 90, location = [3,1]",
        "output": "9"
      },
      {
        "input": "points = [[10,10],[20,20],[30,30],[10,10],[10,10]], angle = 45, location = [15,15]",
        "output": "3"
      },
      {
        "input": "points = [[2,2],[3,2],[4,2],[2,3],[3,3],[4,3],[2,4],[3,4],[4,4]], angle = 45, location = [3,3]",
        "output": "3"
      }
    ]
  },
  {
    "id": 2876,
    "difficulty": "Hard",
    "tags": [
      "Graph",
      "Memoization",
      "Dynamic Programming"
    ],
    "problemDescription": "There is a directed graph consisting of n nodes numbered from 0 to n - 1 and n directed edges.\nYou are given a 0-indexed array edges where edges[i] indicates that there is an edge from node i to node edges[i].\nConsider the following process on the graph:\n\nYou start from a node x and keep visiting other nodes through edges until you reach a node that you have already visited before on this same process.\n\nReturn an array answer where answer[i] is the number of different nodes that you will visit if you perform the process starting from node i.\n\u00a0\nExample 1:\n\n\nInput: edges = [1,2,0,0]\nOutput: [3,3,3,4]\nExplanation: We perform the process starting from each node in the following way:\n- Starting from node 0, we visit the nodes 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 3.\n- Starting from node 1, we visit the nodes 1 -> 2 -> 0 -> 1. The number of different nodes we visit is 3.\n- Starting from node 2, we visit the nodes 2 -> 0 -> 1 -> 2. The number of different nodes we visit is 3.\n- Starting from node 3, we visit the nodes 3 -> 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 4.\n\nExample 2:\n\n\nInput: edges = [1,2,3,4,0]\nOutput: [5,5,5,5,5]\nExplanation: Starting from any node we can visit every node in the graph in the process.\n\n\u00a0\nConstraints:\n\nn == edges.length\n2 <= n <= 105\n0 <= edges[i] <= n - 1\nedges[i] != i\n\n",
    "starterCode": "class Solution:\n    def countVisitedNodes(self, edges: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "edges = [3,5,5,3,4,3]",
        "output": "[2, 3, 3, 1, 1, 2]"
      },
      {
        "input": "edges = [1,0]",
        "output": "[2, 2]"
      },
      {
        "input": "edges = [1,1,1,1,1,1]",
        "output": "[2, 1, 2, 2, 2, 2]"
      },
      {
        "input": "edges = [3,3,4,2,3]",
        "output": "[4, 4, 3, 3, 3]"
      },
      {
        "input": "edges = [1,2,0,0]",
        "output": "[3, 3, 3, 4]"
      },
      {
        "input": "edges = [5,4,0,3,1,3]",
        "output": "[3, 2, 4, 1, 2, 2]"
      },
      {
        "input": "edges = [2,0,1,4,5,3,1]",
        "output": "[3, 3, 3, 3, 3, 3, 4]"
      },
      {
        "input": "edges = [1,3,0,5,4,3]",
        "output": "[4, 3, 5, 2, 1, 2]"
      },
      {
        "input": "edges = [2,0,1,4,3]",
        "output": "[3, 3, 3, 2, 2]"
      },
      {
        "input": "edges = [2,2,3,1]",
        "output": "[4, 3, 3, 3]"
      },
      {
        "input": "edges = [2,0,1,4,5,3,2,0]",
        "output": "[3, 3, 3, 3, 3, 3, 4, 4]"
      },
      {
        "input": "edges = [1,2,3,4,0]",
        "output": "[5, 5, 5, 5, 5]"
      },
      {
        "input": "edges = [5,4,0,2,0,4,1]",
        "output": "[3, 4, 4, 5, 3, 3, 5]"
      },
      {
        "input": "edges = [1,0,0,4,1]",
        "output": "[2, 2, 3, 4, 3]"
      },
      {
        "input": "edges = [1,0,0,0,0]",
        "output": "[2, 2, 3, 3, 3]"
      },
      {
        "input": "edges = [5,4,5,4,3,6,2]",
        "output": "[4, 3, 3, 2, 2, 3, 3]"
      },
      {
        "input": "edges = [2,0,1,4,5,3]",
        "output": "[3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "edges = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [9,8,7,6,5,4,3,2,1,0]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "edges = [2,0,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15,18,17,19]",
        "output": "[3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]"
      },
      {
        "input": "edges = [1,2,0,1,3,4,2,5,6,7,8,9,10]",
        "output": "[3, 3, 3, 4, 5, 6, 4, 7, 5, 8, 6, 9, 7]"
      },
      {
        "input": "edges = [1,2,3,4,5,0,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,0]",
        "output": "[6, 6, 6, 6, 6, 6, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7]"
      },
      {
        "input": "edges = [1,3,0,5,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[4, 3, 5, 3, 1, 3, 6, 4, 2, 4, 7, 5, 3, 5, 8, 6, 4, 6, 9, 7]"
      },
      {
        "input": "edges = [3,0,4,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]",
        "output": "[3, 3, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [1,2,3,0,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[4, 4, 4, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [2,1,3,0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,0]",
        "output": "[3, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4]"
      },
      {
        "input": "edges = [3,8,10,5,3,4,7,9,6,2,1,5,8,11,6,0,12,13,14,2,9]",
        "output": "[4, 7, 7, 3, 3, 3, 7, 7, 7, 7, 7, 4, 8, 5, 8, 5, 9, 6, 9, 8, 8]"
      },
      {
        "input": "edges = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0,1]",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,15]",
        "output": "[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 5, 5, 5, 5]"
      },
      {
        "input": "edges = [5,6,2,0,1,4,3]",
        "output": "[6, 6, 1, 6, 6, 6, 6]"
      },
      {
        "input": "edges = [4,3,0,5,3,5]",
        "output": "[4, 3, 5, 2, 3, 1]"
      },
      {
        "input": "edges = [2,3,4,5,6,7,8,9,0,1]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "edges = [7,1,1,3,7,6,5,0]",
        "output": "[2, 1, 2, 1, 3, 2, 2, 2]"
      },
      {
        "input": "edges = [1,3,2,1,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,21,20,23,22,25,24,27,26,29,28,31,30,33,32,35,34,37,36,39,38,41,40,43,42,45,44,47,46,49,48,51,50,53,52,55,54,57,56,59,58,61,60,63,62,65,64,67,66,69,68,71,70,73,72,75,74,77,76,79,78,81,80,83,82,85,84,87,86,89,88,91,90,93,92,95,94,97,96,99,98]",
        "output": "[3, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,0]",
        "output": "[50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]"
      },
      {
        "input": "edges = [3,4,0,1,2,0,3,5,6,7]",
        "output": "[5, 5, 5, 5, 5, 6, 6, 7, 7, 8]"
      },
      {
        "input": "edges = [4,3,0,5,3,1,4]",
        "output": "[5, 3, 6, 3, 4, 3, 5]"
      },
      {
        "input": "edges = [1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,21,20,23,22,25,24,27,26,29,28,31,30,33,32,35,34,37,36,39,38,41,40,43,42,45,44,47,46,49,48,51,50,53,52,55,54,57,56,59,58,61,60,63,62,65,64,67,66,69,68,71,70,73,72,75,74,77,76,79,78,81,80,83,82,85,84,87,86,89,88,91,90,93,92,95,94,97,96,99,98,0]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3]"
      },
      {
        "input": "edges = [5,6,0,5,1,3,4,2,7]",
        "output": "[3, 3, 4, 2, 3, 2, 3, 5, 6]"
      },
      {
        "input": "edges = [7,0,1,2,3,4,5,6]",
        "output": "[8, 8, 8, 8, 8, 8, 8, 8]"
      },
      {
        "input": "edges = [5,4,3,2,1,0]",
        "output": "[2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,0]",
        "output": "[31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]"
      },
      {
        "input": "edges = [1,3,2,0,5,6,4,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "[3, 3, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[2, 1, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "edges = [2,3,1,0,2]",
        "output": "[4, 4, 4, 4, 5]"
      },
      {
        "input": "edges = [4,1,2,0,5,3]",
        "output": "[4, 1, 1, 4, 4, 4]"
      },
      {
        "input": "edges = [3,0,1,4,2,5,6,7,8,9,5]",
        "output": "[5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 2]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,0]",
        "output": "[9, 9, 9, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "edges = [3,1,0,5,4,3]",
        "output": "[3, 1, 4, 2, 1, 2]"
      },
      {
        "input": "edges = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,0]",
        "output": "[3, 2, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4]"
      },
      {
        "input": "edges = [8,5,5,5,5,0,5,5,2]",
        "output": "[4, 5, 4, 5, 5, 4, 5, 5, 4]"
      },
      {
        "input": "edges = [3,3,3,3]",
        "output": "[2, 2, 2, 1]"
      },
      {
        "input": "edges = [1,2,3,4,5,0,1,2,3,4]",
        "output": "[6, 6, 6, 6, 6, 6, 7, 7, 7, 7]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [1,2,0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,3,4]",
        "output": "[3, 3, 3, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,0]",
        "output
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,0]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "edges = [10,9,8,7,6,5,4,3,2,1,0]",
        "output": "[2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2]"
      },
      {
        "input": "edges = [1,2,0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0]",
        "output": "[3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0]",
        "output": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16]"
      },
      {
        "input": "edges = [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,0,1,2]",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,0]",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "edges = [1,2,0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]",
        "output": "[3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [2,3,4,5,6,7,8,9,10,1,0,11,12,13,14,15,16,17,18,19]",
        "output": "[6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,0]",
        "output": "[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]"
      },
      {
        "input": "edges = [2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]",
        "output": "[2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "edges = [3,3,3,1]",
        "output": "[3, 2, 3, 2]"
      },
      {
        "input": "edges = [3,1,0,2,4,5,3]",
        "output": "[3, 1, 3, 3, 1, 1, 4]"
      },
      {
        "input": "edges = [5,1,4,4,5,6,6,6,6,7]",
        "output": "[3, 1, 4, 4, 3, 2, 1, 2, 2, 3]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,0]",
        "output": "[25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]"
      },
      {
        "input": "edges = [6,7,8,9,10,11,12,0,1,2,3,4,5]",
        "output": "[13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]"
      },
      {
        "input": "edges = [1,2,0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,0]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [2,2,3,4,5,6,7,8,9,10,11,0,1]",
        "output": "[11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13]"
      },
      {
        "input": "edges = [1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,0]",
        "output": "[3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4]"
      },
      {
        "input": "edges = [5,0,1,6,5,2,3,4,8,9,7]",
        "output": "[4, 4, 4, 2, 5, 4, 2, 6, 1, 1, 7]"
      },
      {
        "input": "edges = [3,0,0,0]",
        "output": "[2, 3, 3, 2]"
      },
      {
        "input": "edges = [1,2,3,4,0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,5]",
        "output": "[5, 5, 5, 5, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]"
      },
      {
        "input": "edges = [1,3,0,5,0,6,0,6,6,8,8]",
        "output": "[5, 5, 6, 5, 6, 5, 5, 6, 6, 7, 7]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,0]",
        "output": "[30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]"
      },
      {
        "input": "edges = [6,5,5,3,4,0,0,7,5,7]",
        "output": "[2, 4, 4, 1, 1, 3, 2, 1, 4, 2]"
      },
      {
        "input": "edges = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,0]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [5,5,5,5,5,5]",
        "output": "[2, 2, 2, 2, 2, 1]"
      },
      {
        "input": "edges = [5,6,7,8,9,4,5,6,7,8]",
        "output": "[7, 7, 7, 7, 6, 6, 6, 6, 6, 6]"
      },
      {
        "input": "edges = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,0,0]",
        "output": "[2, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,50]",
        "output": "[100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]"
      },
      {
        "input": "edges = [2,3,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,0]",
        "output
      },
      {
        "input": "edges = [99,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,0]",
        "output
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,10]",
        "output": "[16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 6, 6, 6, 6, 6]"
      },
      {
        "input": "edges = [2,3,1,4,6,5,7,0]",
        "output": "[7, 7, 7, 7, 7, 1, 7, 7]"
      },
      {
        "input": "edges = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,0,1,2,3,4]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "edges = [3,0,0,2,1,5,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,0]",
        "output": "[3, 4, 3, 3, 5, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 4]"
      },
      {
        "input": "edges = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,0]",
        "output": "[40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40]"
      },
      {
        "input": "edges = [6,3,0,2,1,4,5,8,7,9,10,11,12,13,14,15,16,17,18,19,10]",
        "output": "[7, 7, 7, 7, 7, 7, 7, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]"
      },
      {
        "input": "edges = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [2,1,5,3,4,7,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,0]",
        "output": "[46, 1, 46, 1, 1, 46, 1, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46]"
      },
      {
        "input": "edges = [2,1,3,4,5,6,7,8,9,0]",
        "output": "[9, 1, 9, 9, 9, 9, 9, 9, 9, 9]"
      }
    ]
  },
  {
    "id": 818,
    "difficulty": "Hard",
    "tags": [
      "Dynamic Programming"
    ],
    "problemDescription": "Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):\n\nWhen you get an instruction 'A', your car does the following:\n\n\t\nposition += speed\nspeed *= 2\n\n\nWhen you get an instruction 'R', your car does the following:\n\t\nIf your speed is positive then speed = -1\notherwise speed = 1\n\n\tYour position stays the same.\n\nFor example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.\nGiven a target position target, return the length of the shortest sequence of instructions to get there.\n\u00a0\nExample 1:\n\nInput: target = 3\nOutput: 2\nExplanation: \nThe shortest instruction sequence is \"AA\".\nYour position goes from 0 --> 1 --> 3.\n\nExample 2:\n\nInput: target = 6\nOutput: 5\nExplanation: \nThe shortest instruction sequence is \"AAARA\".\nYour position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.\n\n\u00a0\nConstraints:\n\n1 <= target <= 104\n\n",
    "starterCode": "class Solution:\n    def racecar(self, target: int) -> int:\n        ",
    "testCases": [
      {
        "input": "target = 3",
        "output": "2"
      },
      {
        "input": "target = 6",
        "output": "5"
      },
      {
        "input": "target = 4",
        "output": "5"
      },
      {
        "input": "target = 10",
        "output": "7"
      },
      {
        "input": "target = 1",
        "output": "1"
      },
      {
        "input": "target = 100",
        "output": "19"
      },
      {
        "input": "target = 15",
        "output": "4"
      },
      {
        "input": "target = 1000",
        "output": "23"
      },
      {
        "input": "target = 999",
        "output": "20"
      },
      {
        "input": "target = 16383",
        "output": "14"
      },
      {
        "input": "target = 5000",
        "output": "41"
      },
      {
        "input": "target = 8",
        "output": "6"
      },
      {
        "input": "target = 6553",
        "output": "53"
      },
      {
        "input": "target = 65535",
        "output": "16"
      },
      {
        "input": "target = 25",
        "output": "11"
      },
      {
        "input": "target = 5120",
        "output": "29"
      },
      {
        "input": "target = 200",
        "output": "22"
      },
      {
        "input": "target = 32767",
        "output": "15"
      },
      {
        "input": "target = 29",
        "output": "10"
      },
      {
        "input": "target = 2047",
        "output": "11"
      },
      {
        "input": "target = 31",
        "output": "5"
      },
      {
        "input": "target = 3000",
        "output": "33"
      },
      {
        "input": "target = 2000",
        "output": "26"
      },
      {
        "input": "target = 123",
        "output": "13"
      },
      {
        "input": "target = 8192",
        "output": "16"
      },
      {
        "input": "target = 40",
        "output": "15"
      },
      {
        "input": "target = 8191",
        "output": "13"
      },
      {
        "input": "target = 17",
        "output": "9"
      },
      {
        "input": "target = 20",
        "output": "12"
      },
      {
        "input": "target = 10000",
        "output": "45"
      },
      {
        "input": "target = 500",
        "output": "20"
      },
      {
        "input": "target = 750",
        "output": "25"
      },
      {
        "input": "target = 9999",
        "output": "43"
      },
      {
        "input": "target = 250",
        "output": "16"
      },
      {
        "input": "target = 63",
        "output": "6"
      },
      {
        "input": "target = 65536",
        "output": "19"
      },
      {
        "input": "target = 7",
        "output": "3"
      },
      {
        "input": "target = 32768",
        "output": "18"
      },
      {
        "input": "target = 1023",
        "output": "10"
      },
      {
        "input": "target = 42",
        "output": "15"
      },
      {
        "input": "target = 1024",
        "output": "13"
      },
      {
        "input": "target = 50",
        "output": "16"
      },
      {
        "input": "target = 30",
        "output": "7"
      },
      {
        "input": "target = 4096",
        "output": "15"
      },
      {
        "input": "target = 4095",
        "output": "12"
      },
      {
        "input": "target = 16",
        "output": "7"
      },
      {
        "input": "target = 99",
        "output": "16"
      },
      {
        "input": "target = 2048",
        "output": "14"
      },
      {
        "input": "target = 5432",
        "output": "45"
      }
    ]
  },
  {
    "id": 2163,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums consisting of 3 * n elements.\nYou are allowed to remove any subsequence of elements of size exactly n from nums. The remaining 2 * n elements will be divided into two equal parts:\n\nThe first n elements belonging to the first part and their sum is sumfirst.\nThe next n elements belonging to the second part and their sum is sumsecond.\n\nThe difference in sums of the two parts is denoted as sumfirst - sumsecond.\n\nFor example, if sumfirst = 3 and sumsecond = 2, their difference is 1.\nSimilarly, if sumfirst = 2 and sumsecond = 3, their difference is -1.\n\nReturn the minimum difference possible between the sums of the two parts after the removal of n elements.\n\u00a0\nExample 1:\n\nInput: nums = [3,1,2]\nOutput: -1\nExplanation: Here, nums has 3 elements, so n = 1. \nThus we have to remove 1 element from nums and divide the array into two equal parts.\n- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.\n- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.\n- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.\nThe minimum difference between sums of the two parts is min(-1,1,2) = -1. \n\nExample 2:\n\nInput: nums = [7,9,5,8,1,3]\nOutput: 1\nExplanation: Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.\nIf we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.\nTo obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.\nIt can be shown that it is not possible to obtain a difference smaller than 1.\n\n\u00a0\nConstraints:\n\nnums.length == 3 * n\n1 <= n <= 105\n1 <= nums[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def minimumDifference(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30,40,50,60]",
        "output": "-80"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90]",
        "output": "-180"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9]",
        "output": "-18"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17]",
        "output": "-36"
      },
      {
        "input": "nums = [1,2,3,100,100,100]",
        "output": "-197"
      },
      {
        "input": "nums = [1,2,3,4,5,6]",
        "output": "-8"
      },
      {
        "input": "nums = [100000,1,100000,1,100000,1]",
        "output": "-99999"
      },
      {
        "input": "nums = [3,1,2]",
        "output": "-1"
      },
      {
        "input": "nums = [7,9,5,8,1,3]",
        "output": "1"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "50"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [10,1,20,2,30,3,40,4,50,5,60,6]",
        "output": "-147"
      },
      {
        "input": "nums = [5, 3, 8, 1, 4, 7, 2, 6, 9]",
        "output": "-14"
      },
      {
        "input": "nums = [1000,2000,3000,4000,5000,6000,7000,8000,9000]",
        "output": "-18000"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,10,11,12]",
        "output": "-20"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60]",
        "output": "-80"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "0"
      },
      {
        "input": "nums = [120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "160"
      },
      {
        "input": "nums = [2, 1, 3, 2, 1, 3, 2, 1, 3]",
        "output": "-4"
      },
      {
        "input": "nums = [3, 3, 3, 2, 2, 2, 1, 1, 1]",
        "output": "3"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9]",
        "output": "-54"
      },
      {
        "input": "nums = [1, 2, 3, 100, 200, 300, 4, 5, 6]",
        "output": "-594"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "9"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 2, 4, 6, 8]",
        "output": "-12"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3]",
        "output": "-12"
      },
      {
        "input": "nums = [1, 100000, 1, 2, 100000, 2, 3, 100000, 3, 4, 100000, 4]",
        "output": "-200002"
      },
      {
        "input": "nums = [3, 5, 2, 8, 1, 9]",
        "output": "-12"
      },
      {
        "input": "nums = [6, 1, 5, 2, 4, 3]",
        "output": "-4"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "-100"
      },
      {
        "input": "nums = [99999, 99999, 99999, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 1, 9, 0, 11, 13]",
        "output": "-24"
      },
      {
        "input": "nums = [3,2,1,6,5,4,9,8,7]",
        "output": "-18"
      },
      {
        "input": "nums = [1, 1, 1, 1, 100000, 100000, 100000, 100000, 100000]",
        "output": "-299997"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1]",
        "output": "2"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 1, 2, 3]",
        "output": "9"
      },
      {
        "input": "nums = [100000, 1, 2, 3, 100000, 4, 5, 6, 100000]",
        "output": "-200000"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "-50"
      },
      {
        "input": "nums = [1,3,5,7,9,2,4,6,8,10,12,14]",
        "output": "-34"
      },
      {
        "input": "nums = [50000,50000,50000,50000,50000,50000,50000,50000,50000]",
        "output": "0"
      },
      {
        "input": "nums = [8, 6, 7, 5, 3, 0, 9, 1, 4, 2, 7, 6]",
        "output": "-12"
      },
      {
        "input": "nums = [100000, 100000, 100000, 1, 1, 1, 100000, 100000, 100000]",
        "output": "-299997"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900]",
        "output": "-1800"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "-3"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 11, 13, 15, 17, 19, 21, 23]",
        "output": "-64"
      },
      {
        "input": "nums = [100000, 100000, 1, 100000, 1, 100000, 1, 100000, 1]",
        "output": "-99999"
      },
      {
        "input": "nums = [200, 100, 200, 100, 200, 100, 200, 100, 200, 100, 200, 100]",
        "output": "-200"
      },
      {
        "input": "nums = [99999,1,99998,2,99997,3,99996,4,99995]",
        "output": "-199989"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000,1,10,100]",
        "output": "-110889"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "-32"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 2, 4, 6, 8, 10, 12]",
        "output": "-26"
      },
      {
        "input": "nums = [1, 2, 100000, 3, 100000, 4, 5, 100000, 6]",
        "output": "-200000"
      },
      {
        "input": "nums = [1, 100000, 1, 100000, 1, 100000, 1, 100000, 1]",
        "output": "-199998"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900]",
        "output": "-1800"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000,1,10,100,1000,10000,100000]",
        "output": "-218889"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 2, 4, 6]",
        "output": "-18"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]",
        "output": "-16"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "-36"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]",
        "output": "-162"
      },
      {
        "input": "nums = [1,100000,2,99999,3,99998,4,99997,5]",
        "output": "-199994"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]",
        "output": "-3200"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "output": "-180"
      },
      {
        "input": "nums = [100, 200, 100, 200, 100, 200, 100, 200, 100]",
        "output": "-200"
      },
      {
        "input": "nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88]",
        "output": "16"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 9, 1, 5, 3, 8]",
        "output": "-13"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "-50"
      },
      {
        "input": "nums = [10,20,10,20,10,20,10,20,10,20,10,20]",
        "output": "-30"
      },
      {
        "input": "nums = [30000,20000,10000,50000,40000,60000,90000,80000,70000]",
        "output": "-180000"
      },
      {
        "input": "nums = [1, 1, 1, 100000, 100000, 100000, 1, 1, 1]",
        "output": "-299997"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 100000, 100000, 100000]",
        "output": "-299997"
      },
      {
        "input": "nums = [1,1,1,1,1,1,100000,100000,100000]",
        "output": "-299997"
      },
      {
        "input": "nums = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96, 6, 95]",
        "output": "-284"
      },
      {
        "input": "nums = [100, 200, 100, 200, 100, 200, 100, 200, 100, 200, 100, 200]",
        "output": "-300"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "-320"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130]",
        "output": "-360"
      },
      {
        "input": "nums = [100000,200000,300000,400000,500000,600000,1,2,3]",
        "output": "-900000"
      },
      {
        "input": "nums = [99999, 99998, 99997, 1, 2, 3, 4, 5, 6]",
        "output": "-9"
      },
      {
        "input": "nums = [1, 2, 3, 100000, 100000, 100000]",
        "output": "-199997"
      },
      {
        "input": "nums = [100000,99999,99998,99997,99996,99995,99994,99993,99992]",
        "output": "9"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]",
        "output": "-16"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1]",
        "output": "-2"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]",
        "output": "-10"
      },
      {
        "input": "nums = [12345, 67890, 54321, 98765, 43210, 87654, 32109, 76543, 21098]",
        "output": "-128406"
      },
      {
        "input": "nums = [9, 3, 6, 3, 9, 3, 6, 3, 9, 3, 6, 3, 9, 3, 6, 3, 9, 3, 6, 3, 9, 3, 6, 3]",
        "output": "-21"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 1, 2, 3, 4, 5, 6]",
        "output": "199976"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 9, 1]",
        "output": "-10"
      },
      {
        "input": "nums = [50, 50, 50, 1, 1, 1, 100, 100, 100]",
        "output": "-297"
      },
      {
        "input": "nums = [50, 25, 100, 75, 150, 125, 200, 175, 225]",
        "output": "-450"
      },
      {
        "input": "nums = [100000, 1, 100000, 1, 100000, 1, 100000, 1, 100000]",
        "output": "-199998"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9]",
        "output": "-20"
      },
      {
        "input": "nums = [50000, 40000, 30000, 20000, 10000, 90000, 80000, 70000, 60000]",
        "output": "-180000"
      },
      {
        "input": "nums = [5,4,3,2,1,9,8,7,6]",
        "output": "-18"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]",
        "output": "-72"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 8, 7, 9, 3, 2, 3, 8, 4, 6, 2, 6, 4, 3, 3, 8, 3, 2, 7, 9, 5, 0, 2, 8, 8, 4, 1, 9, 7, 1, 7, 2, 8, 1, 5, 9, 7, 6, 3, 128, 256, 128]",
        "output": "-563"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20]",
        "output": "90"
      },
      {
        "input": "nums = [99999, 1, 99998, 2, 99997, 3, 99996, 4, 99995]",
        "output": "-199989"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "-18"
      },
      {
        "input": "nums = [7, 3, 5, 1, 9, 4, 6, 8, 2, 10, 12, 11]",
        "output": "-28"
      },
      {
        "input": "nums = [1, 3, 5, 2, 4, 6]",
        "output": "-7"
      },
      {
        "input": "nums = [1,3,5,7,9,2,4,6,8]",
        "output": "-15"
      },
      {
        "input": "nums = [3,1,2,5,4,6,9,7,8]",
        "output": "-18"
      },
      {
        "input": "nums = [5, 1, 9, 3, 7, 2, 8, 4, 6]",
        "output": "-12"
      },
      {
        "input": "nums = [100000, 100000, 1, 1, 100000, 100000, 1, 1, 100000]",
        "output": "-199998"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2]",
        "output": "10"
      },
      {
        "input": "nums = [1, 100000, 2, 99999, 3, 99998, 4, 99997, 5, 99996, 6, 99995]",
        "output": "-299984"
      },
      {
        "input": "nums = [100, 1, 200, 2, 300, 3, 400, 4, 500, 5, 600, 6]",
        "output": "-1497"
      },
      {
        "input": "nums = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "16"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18]",
        "output": "-36"
      },
      {
        "input": "nums = [6, 2, 8, 4, 10, 12, 1, 3, 5, 7, 9, 11]",
        "output": "-22"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 1, 2, 3]",
        "output": "-900"
      },
      {
        "input": "nums = [100000, 200000, 300000, 400000, 500000, 600000, 1, 2, 3, 4, 5, 6]",
        "output": "-100011"
      },
      {
        "input": "nums = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]",
        "output": "0"
      }
    ]
  },
  {
    "id": 3229,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Greedy",
      "Array",
      "Dynamic Programming",
      "Monotonic Stack"
    ],
    "problemDescription": "You are given two positive integer arrays nums and target, of the same length.\nIn a single operation, you can select any subarray of nums and increment each element within that subarray by 1 or decrement each element within that subarray by 1.\nReturn the minimum number of operations required to make nums equal to the array target.\n\u00a0\nExample 1:\n\nInput: nums = [3,5,1,2], target = [4,6,2,4]\nOutput: 2\nExplanation:\nWe will perform the following operations to make nums equal to target:\n- Increment\u00a0nums[0..3] by 1, nums = [4,6,2,3].\n- Increment\u00a0nums[3..3] by 1, nums = [4,6,2,4].\n\nExample 2:\n\nInput: nums = [1,3,2], target = [2,1,4]\nOutput: 5\nExplanation:\nWe will perform the following operations to make nums equal to target:\n- Increment\u00a0nums[0..0] by 1, nums = [2,3,2].\n- Decrement\u00a0nums[1..1] by 1, nums = [2,2,2].\n- Decrement\u00a0nums[1..1] by 1, nums = [2,1,2].\n- Increment\u00a0nums[2..2] by 1, nums = [2,1,3].\n- Increment\u00a0nums[2..2] by 1, nums = [2,1,4].\n\n\u00a0\nConstraints:\n\n1 <= nums.length == target.length <= 105\n1 <= nums[i], target[i] <= 108\n\n",
    "starterCode": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,100000000,1], target = [100000000,1,100000000]",
        "output": "299999997"
      },
      {
        "input": "nums = [1,3,2], target = [2,1,4]",
        "output": "5"
      },
      {
        "input": "nums = [3,5,1,2], target = [4,6,2,4]",
        "output": "2"
      },
      {
        "input": "nums = [100000000, 100000000, 100000000], target = [1, 1, 1]",
        "output": "99999999"
      },
      {
        "input": "nums = [1,1,1,1], target = [2,2,2,2]",
        "output": "1"
      },
      {
        "input": "nums = [10, 20, 30], target = [15, 25, 25]",
        "output": "10"
      },
      {
        "input": "nums = [10,20,30], target = [15,25,35]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3], target = [4,5,6]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [10,9,8,7,6,5,4,3,2,1]",
        "output": "18"
      },
      {
        "input": "nums = [5,5,5,5,5], target = [5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "nums = [5,5,5,5,5], target = [3,4,5,6,7]",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 3], target = [4, 5, 6]",
        "output": "3"
      },
      {
        "input": "nums = [5,5,5,5,5], target = [1,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,1], target = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], target = [2,2,2,2,2,2,2,2,2,2]",
        "output": "1"
      },
      {
        "input": "nums = [100000000], target = [100000000]",
        "output": "0"
      },
      {
        "input": "nums = [100,200,300,400], target = [400,300,200,100]",
        "output": "600"
      },
      {
        "input": "nums = [100000000, 100000000], target = [1, 1]",
        "output": "99999999"
      },
      {
        "input": "nums = [1,2,3,4,5], target = [5,4,3,2,1]",
        "output": "8"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = [5, 5, 4, 4, 3, 3, 2, 2, 1, 1]",
        "output": "8"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], target = [100,90,80,70,60,50,40,30,20,10]",
        "output": "180"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = [30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10], target = [1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], target = [1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], target = [19,17,15,13,11,9,7,5,3,1]",
        "output": "36"
      },
      {
        "input": "nums = [1,2,3,4,5], target = [2,3,4,5,6]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [1,2,3,4,5,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "38"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [1,2,3,4,5,10,9,8,7,6]",
        "output": "8"
      },
      {
        "input": "nums = [1,1,1,1,1], target = [2,2,2,2,2]",
        "output": "1"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29], target = [31,37,41,43,47,53,59,61,67,71]",
        "output": "44"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "99"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "9"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], target = [10,30,50,70,90,110,130,150,170,190]",
        "output": "90"
      },
      {
        "input": "nums = [1,1,2,2,3,3], target = [3,3,2,2,1,1]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5], target = [5,1,5,1,5]",
        "output": "10"
      },
      {
        "input": "nums = [1,3,5,7,9], target = [2,4,6,8,10]",
        "output": "1"
      },
      {
        "input": "nums = [1,10,100,1000,10000], target = [10000,1000,100,10,1]",
        "output": "19998"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2], target = [1,2,3,4,5,4,3,2,1,2]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], target = [2,3,4,5,6,7,8,9,10,11]",
        "output": "10"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], target = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "19"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], target = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "28"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1], target = [9, 8, 7, 6, 5, 6, 7, 8, 9]",
        "output": "16"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], target = [5,15,25,35,45,55,65,75,85,95]",
        "output": "5"
      },
      {
        "input": "nums = [10,10,10,10,10], target = [1,2,3,4,5]",
        "output": "9"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1], target = [1, 1, 1, 1, 100000000]",
        "output": "99999999"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [1,1,1,1,1,10,10,10,10,10]",
        "output": "8"
      },
      {
        "input": "nums = [5,4,3,2,1], target = [1,2,3,4,5]",
        "output": "8"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], target = [1000,900,800,700,600,500,400,300,200,100]",
        "output": "1800"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4], target = [4, 4, 3, 3, 2, 2, 1, 1]",
        "output": "6"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9], target = [9, 7, 5, 3, 1]",
        "output": "16"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000], target = [10000, 1000, 100, 10, 1]",
        "output": "19998"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], target = [9,9,9,9,9,9,9,9,9,9]",
        "output": "18"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20], target = [1,3,5,7,9,11,13,15,17,19]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], target = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,30]",
        "output": "29"
      },
      {
        "input": "nums = [10,20,30,40,50], target = [1,2,3,4,5]",
        "output": "45"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], target = [2,4,6,8,10,12,14,16,18,20]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4], target = [4,4,4,4,3,3,3,2,2,1]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "38"
      },
      {
        "input": "nums = [1, 100, 10000, 1000000], target = [1000000, 10000, 100, 1]",
        "output": "1999998"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], target = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "9"
      },
      {
        "input": "nums = [10,20,30,40,50], target = [50,40,30,20,10]",
        "output": "80"
      },
      {
        "input": "nums = [100000000, 99999999, 99999998, 99999997, 99999996], target = [1, 2, 3, 4, 5]",
        "output": "99999999"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4], target = [4,4,3,3,2,2,1,1]",
        "output": "6"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], target = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "18"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10], target = [5,6,7,8,9,10,9,8,7,6]",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], target = [9,9,9,9,9,9,9,9,9,9]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5], target = [10,10,10,10,10]",
        "output": "9"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], target = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,1,1], target = [10,10,10,10,10]",
        "output": "9"
      },
      {
        "input": "nums = [9,9,9,9,9], target = [1,2,3,4,5]",
        "output": "8"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], target = [1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = [100000000, 100000000, 100000000, 100000000, 100000000, 100000000, 100000000, 100000000, 100000000, 100000000, 100000000, 100000000, 100000000, 100000000, 100000000]",
        "output": "99999999"
      },
      {
        "input": "nums = [2,4,6,8,10], target = [1,3,5,7,9]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [20,19,18,17,16,15,14,13,12,11]",
        "output": "19"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], target = [1,2,3,4,5,6,7,8,9,10]",
        "output": "90"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], target = [50, 40, 30, 20, 10]",
        "output": "80"
      },
      {
        "input": "nums = [9,9,9,9,9,9,9,9,9,9], target = [1,3,5,7,9,11,13,15,17,19]",
        "output": "18"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], target = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "9"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], target = [50,45,40,35,30,25,20,15,10,5]",
        "output": "90"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [2,4,6,8,10,12,14,16,18,20]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3], target = [3,3,3,3,2,2,2,2,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], target = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "900"
      },
      {
        "input": "nums = [3,5,2,8,4], target = [6,8,7,4,3]",
        "output": "9"
      },
      {
        "input": "nums = [100,200,300,400,500], target = [500,400,300,200,100]",
        "output": "800"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "18"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [2,3,4,5,6,7,8,9,10,11]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], target = [10,10,10,10,10,10,10,10,10,10]",
        "output": "9"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], target = [5,10,15,20,25,30,35,40,45,50]",
        "output": "0"
      },
      {
        "input": "nums = [5,10,15,20,25], target = [25,20,15,10,5]",
        "output": "40"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [10,1,10,1,10,1,10,1,10,1]",
        "output": "50"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], target = [4, 4, 4, 4, 3, 3, 3, 2, 2, 1]",
        "output": "6"
      },
      {
        "input": "nums = [10,20,30,40,50], target = [15,25,35,45,55]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], target = [10,9,8,7,6,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20], target = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [5,5,5,5,5,5,5,5,5,5]",
        "output": "9"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], target = [5,5,5,5,5,5,5,5,5,5]",
        "output": "4"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], target = [1,2,3,4,5,6,7,8,9]",
        "output": "16"
      },
      {
        "input": "nums = [10,10,10,10,10], target = [1,1,1,1,1]",
        "output": "9"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], target = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [1,3,5,7,9,11,13,15,17,19]",
        "output": "9"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], target = [1,3,5,7,9,11,13,15,17,19]",
        "output": "18"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], target = [1,1,1,1,1,1,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "nums = [1,3,5,7,9], target = [9,7,5,3,1]",
        "output": "16"
      },
      {
        "input": "nums = [100000000, 90000000, 80000000, 70000000, 60000000], target = [10000000, 20000000, 30000000, 40000000, 50000000]",
        "output": "90000000"
      },
      {
        "input": "nums = [5,5,5,5,5], target = [10,9,8,7,6]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = [10,10,10,10,10,10,10,10,10,10]",
        "output": "9"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], target = [10,10,10,10,10,10,10,10,10,10]",
        "output": "5"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5], target = [10, 5, 10, 5, 10]",
        "output": "15"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13], target = [13,11,9,7,5,3,1]",
        "output": "24"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = [19, 17, 15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "36"
      },
      {
        "input": "nums = [10,20,30,40,50], target = [5,15,25,35,45]",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = [10, 9, 8, 7, 6, 5, 4, 3, 2, 100000000]",
        "output": "100000006"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], target = [5,5,4,4,3,3,2,2,1,1]",
        "output": "8"
      }
    ]
  },
  {
    "id": 1938,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Depth-First Search",
      "Trie",
      "Array",
      "Hash Table"
    ],
    "problemDescription": "There is a rooted tree consisting of n nodes numbered 0 to n - 1. Each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). The genetic difference between two genetic values is defined as the bitwise-XOR of their values. You are given the integer array parents, where parents[i] is the parent for node i. If node x is the root of the tree, then parents[x] == -1.\nYou are also given the array queries where queries[i] = [nodei, vali]. For each query i, find the maximum genetic difference between vali and pi, where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root). More formally, you want to maximize vali XOR pi.\nReturn an array ans where ans[i] is the answer to the ith query.\n\u00a0\nExample 1:\n\n\nInput: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]\nOutput: [2,3,7]\nExplanation: The queries are processed as follows:\n- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.\n- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.\n- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.\n\nExample 2:\n\n\nInput: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]\nOutput: [6,14,7]\nExplanation: The queries are processed as follows:\n- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.\n- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.\n- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.\n\n\u00a0\nConstraints:\n\n2 <= parents.length <= 105\n0 <= parents[i] <= parents.length - 1 for every node i that is not the root.\nparents[root] == -1\n1 <= queries.length <= 3 * 104\n0 <= nodei <= parents.length - 1\n0 <= vali <= 2 * 105\n\n",
    "starterCode": "class Solution:\n    def maxGeneticDifference(self, parents: List[int], queries: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "parents = [-1,0,0,1,1], queries = [[0,3],[2,1],[3,4],[4,5]]",
        "output": "[3, 3, 7, 5]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3], queries = [[4,5],[7,10],[2,15]]",
        "output": "[5, 13, 15]"
      },
      {
        "input": "parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]",
        "output": "[6, 14, 7]"
      },
      {
        "input": "parents = [0,0,0,1,1,2,2,3,3], queries = [[0,10],[1,20],[2,30],[3,40],[4,50],[5,60],[6,70],[7,80],[8,90]]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2], queries = [[0,10],[1,20],[2,30],[3,40],[4,50],[5,60],[6,70]]",
        "output": "[10, 21, 30, 43, 54, 62, 70]"
      },
      {
        "input": "parents = [-1,0,0,1,1], queries = [[2,3],[4,4],[3,5]]",
        "output": "[3, 5, 6]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7], queries = [[8,1],[7,2],[6,3],[5,4],[4,5],[3,6],[2,7],[1,8],[0,9]]",
        "output": "[9, 7, 7, 7, 7, 7, 7, 9, 9]"
      },
      {
        "input": "parents = [-1,0,1,1,3,3], queries = [[0,10],[5,15],[3,20]]",
        "output": "[10, 15, 23]"
      },
      {
        "input": "parents = [-1,0,0,1,1], queries = [[0,3],[1,2],[2,1],[3,4],[4,5]]",
        "output": "[3, 3, 3, 7, 5]"
      },
      {
        "input": "parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]",
        "output": "[2, 3, 7]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6], queries = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "[1, 3, 3, 7, 7, 7, 7]"
      },
      {
        "input": "parents = [-1,0,0,1], queries = [[0,3],[2,5],[3,4]]",
        "output": "[3, 7, 7]"
      },
      {
        "input": "parents = [-1,0,1,2,3], queries = [[4,1],[1,2],[2,3],[3,4]]",
        "output": "[5, 3, 3, 7]"
      },
      {
        "input": "parents = [3,3,-1,0,0], queries = [[4,100000],[3,100001],[2,100002],[1,100003],[0,100004]]",
        "output": "[0, 0, 100000, 0, 0]"
      },
      {
        "input": "parents = [-1,0,0,1,1,1,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9], queries = [[0,25],[1,50],[2,75],[3,100],[4,125],[5,150],[6,175],[7,200],[8,225],[9,250],[10,275],[11,300],[12,325],[13,350],[14,375],[15,400],[16,425],[17,450],[18,475],[19,500],[20,525],[21,550],[22,575],[23,600],[24,625],[25,650],[26,675],[27,700]]",
        "output": "[25, 51, 75, 103, 125, 151, 175, 207, 233, 251, 281, 301, 329, 351, 377, 415, 441, 467, 477, 502, 537, 563, 575, 603, 633, 659, 697, 703]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20], queries = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39]]",
        "output": "[1, 3, 3, 7, 5, 6, 7, 15, 10, 14, 15, 14, 15, 14, 15, 31, 22, 26, 27, 29, 28, 28, 29, 29, 28, 31, 30, 30, 31, 30, 31, 63, 46, 50, 51, 53, 52, 52, 53]"
      },
      {
        "input": "parents = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9], queries = [[0,10],[1,20],[2,30],[3,40],[4,50],[5,60],[6,70],[7,80],[8,90],[9,100],[10,110],[11,120],[12,130],[13,140],[14,150],[15,160],[16,170],[17,180],[18,190],[19,200],[20,210],[21,220],[22,230],[23,240],[24,250],[25,260],[26,270],[27,280],[28,290],[29,300]]",
        "output": "[10, 21, 30, 43, 54, 61, 71, 87, 90, 109, 110, 123, 142, 141, 152, 175, 186, 181, 191, 219, 212, 221, 240, 247, 253, 285, 276, 282, 318, 305]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19], queries = [[0,100000],[1,50000],[2,25000],[3,12500],[4,6250],[5,3125],[6,1562],[7,781],[8,390],[9,195],[10,97],[11,48],[12,24],[13,12],[14,6],[15,3],[16,1],[17,0],[18,0],[19,0],[0,100000]]",
        "output": "[100000, 50001, 25002, 12503, 6254, 3127, 1564, 782, 398, 202, 107, 59, 29, 14, 8, 12, 17, 17, 18, 19, 100000]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49], queries = [[0,10000],[1,20000],[2,30000],[3,40000],[4,50000],[5,60000],[6,70000],[7,80000],[8,90000],[9,100000],[10,110000],[11,120000],[12,130000],[13,140000],[14,150000],[15,160000],[16,170000],[17,180000],[18,190000],[19,200000],[20,210000],[21,220000],[22,230000],[23,240000],[24,250000],[25,260000],[26,270000],[27,280000],[28,290000],[29,300000],[30,310000],[31,320000],[32,330000],[33,340000],[34,350000],[35,360000],[36,370000],[37,380000],[38,390000],[39,400000],[40,410000],[41,420000],[42,430000],[43,440000],[44,450000],[45,460000],[46,470000],[47,480000],[48,490000],[49,500000]]",
        "output": "[10000, 20001, 30002, 40003, 50004, 60005, 70006, 80007, 90008, 100009, 110010, 120011, 130012, 140013, 150014, 160015, 170015, 180017, 190015, 200019, 210015, 220021, 230015, 240023, 250015, 260025, 7871, 17883, 27871, 37885, 47871, 57887, 67888, 77887, 87871, 97891, 107892, 117887, 127871, 137895, 147896, 157887, 167871, 177899, 187900, 197887, 207871, 217903, 227903, 237887]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24], queries = [[0,10101],[1,10102],[2,10103],[3,10104],[4,10105],[5,10106],[6,10107],[7,10108],[8,10109],[9,10110],[10,10111],[11,10112],[12,10113],[13,10114],[14,10115],[15,10116],[16,10117],[17,10118],[18,10119],[19,10120],[20,10121],[21,10122],[22,10123],[23,10124],[24,10125],[25,10126],[26,10127],[27,10128],[28,10129],[29,10130],[30,10131],[31,10132],[32,10133],[33,10134],[34,10135],[35,10136],[36,10137],[37,10138],[38,10139],[39,10140]]",
        "output": "[10101, 10103, 10103, 10107, 10109, 10111, 10109, 10111, 10110, 10111, 10111, 10123, 10125, 10127, 10125, 10123, 10133, 10135, 10133, 10139, 10141, 10143, 10141, 10139, 10133, 10135, 10133, 10141, 10140, 10140, 10141, 10139, 10165, 10167, 10165, 10171, 10173, 10175, 10173, 10171]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39], queries = [[39,1],[38,2],[37,3],[36,4],[35,5],[34,6],[33,7],[32,8],[31,9],[30,10],[29,11],[28,12],[27,13],[26,14],[25,15],[24,16],[23,17],[22,18],[21,19],[20,20],[19,21],[18,22],[17,23],[16,24],[15,25],[14,26],[13,27],[12,28],[11,29],[10,30],[9,31],[8,32],[7,33],[6,34],[5,35],[4,36],[3,37],[2,38],[1,39],[0,40]]",
        "output": "[38, 36, 38, 32, 38, 36, 38, 40, 22, 20, 22, 16, 22, 20, 22, 27, 26, 24, 25, 29, 28, 30, 31, 31, 30, 28, 29, 30, 31, 31, 31, 40, 38, 36, 38, 37, 38, 38, 39, 40]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15], queries = [[0,1],[1,3],[2,7],[3,15],[4,31],[5,63],[6,127],[7,255],[8,511],[9,1023],[10,2047],[11,4095],[12,8191],[13,16383],[14,32767],[15,65535]]",
        "output": "[1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535]"
      },
      {
        "input": "parents = [-1,0,0,1,1,3,3,4,4,5,5], queries = [[0,100],[1,200],[2,300],[3,400],[4,500],[5,600],[6,700],[7,800],[8,900],[9,1000],[10,1100]]",
        "output": "[100, 201, 302, 403, 501, 605, 703, 807, 908, 1005, 1103]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29], queries = [[0,5000],[1,5001],[2,5002],[3,5003],[4,5004],[5,5005],[6,5006],[7,5007],[8,5008],[9,5009],[10,5010],[11,5011],[12,5012],[13,5013],[14,5014],[15,5015],[16,5016],[17,5017],[18,5018],[19,5019],[20,5020],[21,5021],[22,5022],[23,5023],[24,5024],[25,5025],[26,5026],[27,5027],[28,5028],[29,5029],[30,5030],[31,5031],[32,5032],[33,5033],[34,5034],[35,5035],[36,5036],[37,5037],[38,5038],[39,5039]]",
        "output": "[5000, 5001, 5002, 5003, 5005, 5007, 5006, 5007, 5016, 5016, 5016, 5016, 5016, 5016, 5016, 5016, 5023, 5018, 5019, 5023, 5021, 5021, 5023, 5023, 5048, 5048, 5048, 5048, 5048, 5048, 5048, 5048, 5039, 5049, 5050, 5050, 5053, 5055, 5052, 5052]"
      },
      {
        "input": "parents = [-1,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25], queries = [[i, 10*i] for i in range(27)]",
        "output": "Error: Solution.maxGeneticDifference() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20], queries = [[0,1000],[1,2000],[2,3000],[3,4000],[4,5000],[5,6000],[6,7000],[7,8000],[8,9000],[9,10000],[10,11000],[11,12000],[12,13000],[13,14000],[14,15000],[15,16000],[16,17000],[17,18000],[18,19000],[19,20000],[20,21000],[21,22000],[22,23000],[23,24000],[24,25000],[25,26000],[26,27000],[27,28000],[28,29000],[29,30000],[30,31000],[31,32000]]",
        "output": "[1000, 2001, 3002, 4003, 5004, 6005, 7006, 8007, 9003, 10009, 11004, 12011, 13005, 14013, 15006, 16015, 17016, 18008, 19003, 20019, 21020, 22010, 23004, 24023, 25008, 26012, 27005, 28027, 29012, 30014, 31006, 32031]"
      },
      {
        "input": "parents = [-1,0,0,0,1,1,2,2,3,3,4,4], queries = [[0,123],[1,456],[2,789],[3,101],[4,202],[5,303],[6,404],[7,505],[8,606],[9,707],[10,808],[11,909]]",
        "output": "[123, 457, 791, 102, 206, 303, 406, 510, 606, 714, 812, 909]"
      },
      {
        "input": "parents = [-1,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7], queries = [[0,100],[1,200],[2,300],[3,400],[4,500],[5,600],[6,700],[7,800],[8,900],[9,1000],[10,1100],[11,1200],[12,1300],[13,1400],[14,1500],[15,1600],[16,1700],[17,1800]]",
        "output": "[100, 201, 302, 403, 501, 605, 702, 807, 908, 1003, 1101, 1211, 1304, 1405, 1502, 1615, 1716, 1817]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], queries = [[0,500],[1,1000],[2,1500],[3,2000],[4,2500],[5,3000],[6,3500],[7,4000],[8,4500],[9,5000],[10,5500],[11,6000],[12,6500],[13,7000],[14,7500],[15,8000],[16,8500],[17,9000],[18,9500],[19,10000],[20,10500],[21,11000],[22,11500],[23,12000],[24,12500],[25,13000],[26,13500],[27,14000],[28,14500],[29,15000]]",
        "output": "[500, 1001, 1502, 2003, 2501, 3005, 3502, 4007, 4508, 5004, 5501, 6011, 6504, 7006, 7502, 8015, 8503, 9017, 9503, 10009, 10512, 11004, 11514, 12023, 12511, 13009, 13502, 14013, 14520, 15006]"
      },
      {
        "input": "parents = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15], queries = [[0,30],[1,60],[2,90],[3,120],[4,150],[5,180],[6,210],[7,240],[8,270],[9,300],[10,330],[11,360],[12,390],[13,420],[14,450],[15,480],[16,510],[17,540],[18,570],[19,600],[20,630],[21,660],[22,690],[23,720],[24,750],[25,780],[26,810],[27,840],[28,870],[29,900],[30,930],[31,960],[32,990],[33,1020],[34,1050],[35,1080],[36,1110],[37,1140],[38,1170],[39,1200],[40,1230],[41,1260],[42,1290],[43,1320],[44,1350],[45,1380],[46,1410],[47,1440],[48,1470],[49,1500]]",
        "output": "[30, 61, 90, 123, 151, 181, 212, 247, 270, 302, 330, 363, 394, 425, 460, 495, 511, 541, 575, 606, 631, 661, 693, 727, 758, 789, 816, 851, 890, 921, 956, 991, 1022, 1023, 1080, 1083, 1138, 1144, 1204, 1212, 1254, 1261, 1312, 1324, 1386, 1386, 1452, 1455, 1471, 0]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], queries = [[0,100],[1,200],[2,300],[3,400],[4,500],[5,600],[6,700],[7,800],[8,900],[9,1000],[10,1100],[11,1200],[12,1300],[13,1400],[14,1500],[15,1600],[16,1700],[17,1800],[18,1900]]",
        "output": "[100, 201, 302, 403, 503, 605, 703, 807, 908, 1007, 1103, 1211, 1311, 1407, 1503, 1615, 1716, 1817, 1918]"
      },
      {
        "input": "parents = [-1,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6], queries = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]]",
        "output": "[1, 3, 3, 7, 5, 7, 7, 15, 11, 11, 11, 15, 13, 15, 15, 31, 20, 23, 21, 22]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59], queries = [[0,100000],[1,200000],[2,300000],[3,400000],[4,500000],[5,600000],[6,700000],[7,800000],[8,900000],[9,1000000],[10,1100000],[11,1200000],[12,1300000],[13,1400000],[14,1500000],[15,1600000],[16,1700000],[17,1800000],[18,1900000],[19,2000000],[20,2100000],[21,2200000],[22,2300000],[23,2400000],[24,2500000],[25,2600000],[26,2700000],[27,2800000],[28,2900000],[29,3000000],[30,3100000],[31,3200000],[32,3300000],[33,3400000],[34,3500000],[35,3600000],[36,3700000],[37,3800000],[38,3900000],[39,4000000],[40,4100000],[41,4200000],[42,4300000],[43,4400000],[44,4500000],[45,4600000],[46,4700000],[47,4800000],[48,4900000],[49,5000000],[50,5100000],[51,5200000],[52,5300000],[53,5400000],[54,5500000],[55,5600000],[56,5700000],[57,5800000],[58,5900000],[59,6000000]]",
        "output": "[100000, 200001, 37858, 137859, 237860, 75717, 175718, 13575, 113576, 213577, 51434, 151435, 251436, 89293, 189294, 27151, 127152, 227153, 65010, 165011, 2868, 102869, 202870, 40727, 140728, 240729, 78586, 178587, 16444, 116445, 216446, 54303, 154303, 254305, 92159, 192163, 30015, 130021, 230015, 67879, 167871, 5737, 105727, 205739, 43583, 143597, 243583, 81455, 181439, 19313, 119295, 219315, 57151, 157173, 257151, 95031, 195007, 32889, 132863, 232891]"
      },
      {
        "input": "parents = [-1,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], queries = [[0,100],[1,200],[2,300],[3,400],[4,500],[5,600],[6,700],[7,800],[8,900],[9,1000],[10,1100],[11,1200],[12,1300],[13,1400],[14,1500],[15,1600],[16,1700],[17,1800],[18,1900],[19,2000],[20,2100],[21,2200]]",
        "output": "[100, 201, 302, 403, 501, 605, 702, 807, 908, 1003, 1101, 1211, 1304, 1405, 1502, 1615, 1716, 1817, 1918, 2008, 2109, 2203]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], queries = [[0,10],[1,20],[2,30],[3,40],[4,50],[5,60],[6,70],[7,80],[8,90],[9,100],[10,110],[11,120],[12,130],[13,140],[14,150],[15,160],[16,170],[17,180],[18,190],[19,200],[20,210],[21,220],[22,230],[23,240],[24,250],[25,260],[26,270],[27,280],[28,290],[29,300]]",
        "output": "[10, 21, 30, 43, 54, 62, 70, 87, 91, 109, 111, 125, 142, 142, 152, 175, 186, 188, 191, 219, 219, 221, 240, 251, 255, 285, 276, 286, 318, 305]"
      },
      {
        "input": "parents = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11], queries = [[0,100],[1,200],[2,300],[3,400],[4,500],[5,600],[6,700],[7,800],[8,900],[9,1000],[10,1100],[11,1200],[12,1300],[13,1400],[14,1500],[15,1600],[16,1700],[17,1800],[18,1900],[19,2000],[20,2100],[21,2200],[22,2300],[23,2400],[24,2500],[25,2600],[26,2700],[27,2800],[28,2900],[29,3000],[30,3100],[31,3200],[32,3300],[33,3400],[34,3500],[35,3600],[36,3700],[37,3800],[38,3900],[39,4000]]",
        "output": "[100, 201, 302, 403, 500, 605, 701, 807, 908, 1002, 1102, 1211, 1304, 1403, 1503, 1615, 1716, 1817, 1918, 2004, 2100, 2205, 2301, 2423, 2524, 2609, 2710, 2806, 2901, 3007, 3101, 3231, 3301, 3433, 3501, 3635, 3708, 3837, 3902, 4009]"
      },
      {
        "input": "parents = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7], queries = [[0,100],[1,200],[2,300],[3,400],[4,500],[5,600],[6,700],[7,800],[8,900],[9,1000],[10,1100],[11,1200],[12,1300],[13,1400],[14,1500],[15,1600]]",
        "output": "[100, 201, 302, 403, 502, 605, 703, 807, 908, 1004, 1102, 1211, 1304, 1406, 1503, 1615]"
      },
      {
        "input": "parents = [-1,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], queries = [[0,101],[1,102],[2,103],[3,104],[4,105],[5,106],[6,107],[7,108],[8,109],[9,110],[10,111],[11,112],[12,113],[13,114],[14,115],[15,116],[16,117],[17,118],[18,119],[19,120]]",
        "output": "[101, 103, 103, 107, 109, 111, 109, 111, 111, 111, 111, 123, 125, 127, 125, 123, 125, 126, 126, 124]"
      },
      {
        "input": "parents = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29], queries = [[0,1000],[1,2000],[2,3000],[3,4000],[4,5000],[5,6000],[6,7000],[7,8000],[8,9000],[9,10000],[10,11000],[11,12000],[12,13000],[13,14000],[14,15000],[15,16000],[16,17000],[17,18000],[18,19000],[19,20000],[20,21000],[21,22000],[22,23000],[23,24000],[24,25000],[25,26000],[26,27000],[27,28000],[28,29000],[29,30000],[30,31000],[31,32000],[32,33000],[33,34000],[34,35000],[35,36000],[36,37000],[37,38000],[38,39000],[39,40000],[40,41000],[41,42000],[42,43000],[43,44000],[44,45000],[45,46000],[46,47000],[47,48000],[48,49000],[49,50000],[50,51000],[51,52000],[52,53000],[53,54000],[54,55000],[55,56000],[56,57000],[57,58000],[58,59000],[59,60000]]",
        "output": "[1000, 2001, 3002, 4003, 5004, 6005, 7006, 8007, 9002, 10009, 11003, 12011, 13003, 14013, 15004, 16015, 17016, 18005, 19005, 20019, 21020, 22006, 23007, 24023, 25008, 26008, 27002, 28027, 29012, 30009, 31002, 32031, 33003, 34033, 35003, 36011, 37036, 38012, 39038, 40039, 41004, 42041, 43004, 44014, 45028, 46014, 47030, 48047, 49004, 50017, 51005, 52016, 53052, 54005, 55022, 56055, 57018, 58025, 59006, 60019]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], queries = [[0,1024],[1,512],[2,256],[3,128],[4,64],[5,32],[6,16],[7,8],[8,4],[9,2],[10,1],[11,513],[12,257],[13,129],[14,65],[15,33]]",
        "output": "[1024, 513, 258, 131, 68, 37, 22, 15, 12, 11, 11, 523, 269, 141, 79, 47]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49], queries = [[0,3000],[1,4000],[2,5000],[3,6000],[4,7000],[5,8000],[6,9000],[7,10000],[8,11000],[9,12000],[10,13000],[11,14000],[12,15000],[13,16000],[14,17000],[15,18000],[16,19000],[17,20000],[18,21000],[19,22000],[20,23000],[21,24000],[22,25000],[23,26000],[24,27000],[25,28000],[26,29000],[27,30000],[28,31000],[29,32000],[30,33000],[31,34000],[32,35000],[33,36000],[34,37000],[35,38000],[36,39000],[37,40000],[38,41000],[39,42000],[40,43000],[41,44000],[42,45000],[43,46000],[44,47000],[45,48000],[46,49000],[47,50000],[48,51000],[49,52000],[50,53000],[51,54000],[52,55000],[53,56000],[54,57000],[55,58000],[56,59000],[57,60000],[58,61000],[59,62000],[60,63000],[61,64000],[62,65000],[63,66000],[64,67000],[65,68000],[66,69000],[67,70000],[68,71000],[69,72000],[70,73000],[71,74000],[72,75000],[73,76000],[74,77000],[75,78000],[76,79000],[77,80000],[78,81000],[79,82000],[80,83000],[81,84000],[82,85000],[83,86000],[84,87000],[85,88000],[86,89000],[87,90000],[88,91000],[89,92000],[90,93000],[91,94000],[92,95000],[93,96000],[94,97000],[95,98000],[96,99000],[97,100000],[98,101000],[99,102000]]",
        "output": "[3000, 4001, 5002, 6003, 7004, 8005, 9006, 10007, 11003, 12009, 13004, 14011, 15005, 16013, 17006, 18015, 19007, 20017, 21018, 22009, 23004, 24021, 25022, 26011, 27005, 28025, 29010, 30013, 31006, 32029, 33014, 34015, 35007, 36016, 37034, 38008, 39036, 40037, 41018, 42039, 43004, 44020, 45026, 46010, 47028, 48045, 49022, 50047, 51005, 52024, 53050, 54012, 55020, 56053, 57010, 58023, 59006, 60028, 61042, 62014, 63012, 64061, 65014, 66031, 67064, 68065, 69066, 70007, 71033, 72034, 73070, 74071, 75003, 76017, 77036, 78075, 79060, 80077, 81018, 82039, 83048, 84081, 85082, 86009, 87025, 88042, 89086, 90055, 91004, 92021, 93028, 94059, 95044, 96093, 97022, 98047, 99032, 100033, 101098, 102011]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], queries = [[0,255],[1,511],[2,1023],[3,2047],[4,4095],[5,8191],[6,16383],[7,32767],[8,65535],[9,131071],[10,262143],[11,524287],[12,1048575],[13,2097151],[14,4194303],[15,8388607],[16,16777215],[17,33554431],[18,67108863],[19,134217727],[20,268435455],[21,536870911],[22,1073741823],[23,2147483647],[24,4294967295],[25,8589934591],[26,17179869183],[27,34359738367],[28,68719476735],[29,137438953471]]",
        "output": "[255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143, 262143]"
      },
      {
        "input": "parents = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17], queries = [[i, 1000 - i] for i in range(43)]",
        "output": "Error: Solution.maxGeneticDifference() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9], queries = [[0,100],[1,200],[2,300],[3,400],[4,500],[5,600],[6,700],[7,800],[8,900],[9,1000],[10,1100],[11,1200],[12,1300],[13,1400],[14,1500],[15,1600],[16,1700],[17,1800],[18,1900],[19,2000]]",
        "output": "[100, 201, 302, 403, 501, 605, 702, 807, 908, 1004, 1101, 1211, 1304, 1406, 1502, 1615, 1716, 1817, 1918, 2009]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49], queries = [[0,2000],[1,3000],[2,4000],[3,5000],[4,6000],[5,7000],[6,8000],[7,9000],[8,10000],[9,11000],[10,12000],[11,13000],[12,14000],[13,15000],[14,16000],[15,17000],[16,18000],[17,19000],[18,20000],[19,21000],[20,22000],[21,23000],[22,24000],[23,25000],[24,26000],[25,27000],[26,28000],[27,29000],[28,30000],[29,31000],[30,32000],[31,33000],[32,34000],[33,35000],[34,36000],[35,37000],[36,38000],[37,39000],[38,40000],[39,41000],[40,42000],[41,43000],[42,44000],[43,45000],[44,46000],[45,47000],[46,48000],[47,49000],[48,50000],[49,51000]]",
        "output": "[2000, 3001, 4002, 5003, 6004, 7005, 8006, 9007, 10008, 11007, 12010, 13007, 14012, 15007, 16014, 17007, 18015, 19007, 20018, 21019, 22015, 23007, 24022, 25023, 26015, 27007, 28026, 29023, 30015, 31007, 32030, 33023, 34032, 35007, 36031, 37035, 38015, 39037, 40038, 41023, 42040, 43007, 44031, 45039, 46015, 47039, 48046, 49023, 50047, 51007]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30], queries = [[i, (2**i) ^ 12345] for i in range(33)]",
        "output": "Error: Solution.maxGeneticDifference() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "parents = [-1,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8], queries = [[0,255],[1,512],[2,1024],[3,2048],[4,4096],[5,8192],[6,16384],[7,32768],[8,65536],[9,131072],[10,262144],[11,524288],[12,1048576],[13,2097152],[14,4194304],[15,8388608],[16,16777216],[17,33554432],[18,67108864],[19,134217728]]",
        "output": "[255, 513, 1026, 2051, 4100, 8197, 16390, 32775, 65544, 131081, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30], queries = [[0,50],[1,100],[2,150],[3,200],[4,250],[5,300],[6,350],[7,400],[8,450],[9,500],[10,550],[11,600],[12,650],[13,700],[14,750],[15,800],[16,850],[17,900],[18,950],[19,1000],[20,1050],[21,1100],[22,1150],[23,1200],[24,1250],[25,1300],[26,1350],[27,1400],[28,1450],[29,1500],[30,1550],[31,1600],[32,1650],[33,1700],[34,1750],[35,1800],[36,1850],[37,1900],[38,1950],[39,2000],[40,2050],[41,2100],[42,2150],[43,2200],[44,2250],[45,2300],[46,2350],[47,2400],[48,2450],[49,2500]]",
        "output": "[50, 101, 150, 203, 254, 302, 350, 407, 458, 509, 556, 605, 655, 702, 750, 815, 853, 917, 958, 1019, 1054, 1113, 1151, 1211, 1274, 1304, 1372, 1406, 1462, 1502, 1552, 1631, 1661, 1716, 1780, 1835, 1851, 1918, 1976, 2039, 2090, 2109, 2162, 2227, 2278, 2301, 2360, 2423, 2466, 2549]"
      },
      {
        "input": "parents = [-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10], queries = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51]]",
        "output": "[1, 3, 3, 7, 5, 6, 7, 15, 9, 11, 11, 14, 15, 14, 15, 31, 18, 18, 19, 23, 22, 22, 23, 28, 29, 30, 30, 28, 29, 30, 31, 63, 39, 36, 37, 37, 37, 39, 39, 47, 46, 43, 43, 45, 45, 47, 47, 57, 56, 59, 58]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14], queries = [[0,1000],[1,2000],[2,3000],[3,4000],[4,5000],[5,6000],[6,7000],[7,8000],[8,9000],[9,10000],[10,11000],[11,12000],[12,13000],[13,14000],[14,15000]]",
        "output": "[1000, 2001, 3002, 4003, 5004, 6005, 7006, 8007, 9007, 10009, 11007, 12011, 13007, 14013, 15007]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99], queries = [[0,3000],[1,4000],[2,5000],[3,6000],[4,7000],[5,8000],[6,9000],[7,10000],[8,11000],[9,12000],[10,13000],[11,14000],[12,15000],[13,16000],[14,17000],[15,18000],[16,19000],[17,20000],[18,21000],[19,22000],[20,23000],[21,24000],[22,25000],[23,26000],[24,27000],[25,28000],[26,29000],[27,30000],[28,31000],[29,32000],[30,33000],[31,34000],[32,35000],[33,36000],[34,37000],[35,38000],[36,39000],[37,40000],[38,41000],[39,42000],[40,43000],[41,44000],[42,45000],[43,46000],[44,47000],[45,48000],[46,49000],[47,50000],[48,51000],[49,52000],[50,53000],[51,54000],[52,55000],[53,56000],[54,57000],[55,58000],[56,59000],[57,60000],[58,61000],[59,62000],[60,63000],[61,64000],[62,65000],[63,66000],[64,67000],[65,68000],[66,69000],[67,70000],[68,71000],[69,72000],[70,73000],[71,74000],[72,75000],[73,76000],[74,77000],[75,78000],[76,79000],[77,80000],[78,81000],[79,82000],[80,83000],[81,84000],[82,85000],[83,86000],[84,87000],[85,88000],[86,89000],[87,90000],[88,91000],[89,92000],[90,93000],[91,94000],[92,95000],[93,96000],[94,97000],[95,98000],[96,99000],[97,100000],[98,101000],[99,102000]]",
        "output": "[3000, 4001, 5002, 6003, 7004, 8005, 9006, 10007, 11007, 12009, 13007, 14011, 15007, 16013, 17007, 18015, 19007, 20017, 21018, 22015, 23007, 24021, 25022, 26015, 27007, 28025, 29023, 30015, 31007, 32029, 33023, 34015, 35007, 36031, 37034, 38015, 39036, 40037, 41023, 42039, 43007, 44031, 45039, 46015, 47039, 48045, 49023, 50047, 51007, 52031, 53050, 54015, 55039, 56053, 57023, 58047, 59007, 60031, 61055, 62015, 63039, 64061, 65023, 66047, 67064, 68065, 69066, 70015, 71039, 72063, 73070, 74071, 75007, 76031, 77055, 78075, 79071, 80077, 81023, 82047, 83071, 84081, 85082, 86015, 87039, 88063, 89086, 90079, 91007, 92031, 93055, 94079, 95071, 96093, 97023, 98047, 99071, 100095, 101098, 102015]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99], queries = [[0,100000],[1,100001],[2,100002],[3,100003],[4,100004],[5,100005],[6,100006],[7,100007],[8,100008],[9,100009],[10,100010],[11,100011],[12,100012],[13,100013],[14,100014],[15,100015],[16,100016],[17,100017],[18,100018],[19,100019],[20,100020],[21,100021],[22,100022],[23,100023],[24,100024],[25,100025],[26,100026],[27,100027],[28,100028],[29,100029],[30,100030],[31,100031],[32,100032],[33,100033],[34,100034],[35,100035],[36,100036],[37,100037],[38,100038],[39,100039],[40,100040],[41,100041],[42,100042],[43,100043],[44,100044],[45,100045],[46,100046],[47,100047],[48,100048],[49,100049],[50,100050],[51,100051],[52,100052],[53,100053],[54,100054],[55,100055],[56,100056],[57,100057],[58,100058],[59,100059],[60,100060],[61,100061],[62,100062],[63,100063],[64,100064],[65,100065],[66,100066],[67,100067],[68,100068],[69,100069],[70,100070],[71,100071],[72,100072],[73,100073],[74,100074],[75,100075],[76,100076],[77,100077],[78,100078],[79,100079],[80,100080],[81,100081],[82,100082],[83,100083],[84,100084],[85,100085],[86,100086],[87,100087],[88,100088],[89,100089],[90,100090],[91,100091],[92,100092],[93,100093],[94,100094],[95,100095],[96,100096],[97,100097],[98,100098],[99,100099]]",
        "output": "[100000, 100001, 100003, 100003, 100007, 100007, 100007, 100007, 100015, 100015, 100015, 100015, 100015, 100015, 100015, 100015, 100031, 100031, 100031, 100031, 100031, 100031, 100031, 100031, 100031, 100031, 100031, 100031, 100031, 100031, 100031, 100031, 100064, 100065, 100067, 100067, 100071, 100071, 100071, 100071, 100079, 100079, 100079, 100079, 100079, 100079, 100079, 100079, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100095, 100192, 100193, 100195, 100195]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], queries = [[0,100000],[1,50000],[2,25000],[3,12500],[4,6250],[5,3125],[6,1562],[7,781],[8,390],[9,195],[10,97],[11,48],[12,24],[13,12],[14,6],[15,3],[16,1],[17,513],[18,257],[19,129],[20,65],[21,32],[22,16],[23,8],[24,4],[25,2],[26,1],[27,513],[28,257],[29,129],[30,65]]",
        "output": "[100000, 50001, 25002, 12503, 6254, 3127, 1567, 783, 398, 203, 107, 59, 31, 15, 15, 15, 17, 529, 275, 147, 85, 53, 31, 31, 28, 27, 27, 539, 285, 157, 95]"
      },
      {
        "input": "parents = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], queries = [[0,2000],[1,2001],[2,2002],[3,2003],[4,2004],[5,2005],[6,2006],[7,2007],[8,2008],[9,2009],[10,2010],[11,2011],[12,2012],[13,2013],[14,2014],[15,2015],[16,2016],[17,2017],[18,2018],[19,2019],[20,2020],[21,2021],[22,2022],[23,2023],[24,2024],[25,2025],[26,2026],[27,2027],[28,2028],[29,2029]]",
        "output": "[2000, 2001, 2002, 2003, 2006, 2007, 2007, 2007, 2012, 2013, 2015, 2014, 2015, 2014, 2015, 2015, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032]"
      },
      {
        "input": "parents = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8], queries = [[0,101],[1,202],[2,303],[3,404],[4,505],[5,606],[6,707],[7,808],[8,909],[9,1010],[10,1111],[11,1212],[12,1313],[13,1414],[14,1515],[15,1616],[16,1717],[17,1818]]",
        "output": "[101, 203, 303, 407, 509, 606, 709, 815, 911, 1019, 1117, 1214, 1325, 1419, 1516, 1631, 1725, 1822]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19], queries = [[19,2],[18,5],[17,10],[16,20],[15,40],[14,80],[13,160],[12,320],[11,640],[10,1280],[9,2560],[8,5120],[7,10240],[6,20480],[5,40960],[4,81920],[3,163840],[2,327680],[1,655360],[0,1310720]]",
        "output": "[17, 23, 27, 23, 47, 94, 173, 332, 651, 1290, 2569, 5128, 10247, 20486, 40965, 81924, 163843, 65538, 131073, 0]"
      },
      {
        "input": "parents = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], queries = [[i, 2**i] for i in range(31)]",
        "output": "Error: Solution.maxGeneticDifference() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "parents = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10], queries = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30]]",
        "output": "[1, 3, 3, 7, 5, 7, 7, 15, 11, 10, 11, 15, 14, 15, 15, 31, 20, 23, 22, 21, 21, 23, 23, 31, 30, 26, 27, 30, 31, 30]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4], queries = [[0,15],[1,30],[2,45],[3,60],[4,75],[5,90],[6,105],[7,120],[8,135],[9,150]]",
        "output": "[15, 31, 47, 63, 79, 95, 111, 127, 143, 159]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], queries = [[0,10000],[1,20000],[2,30000],[3,40000],[4,50000],[5,60000],[6,70000],[7,80000],[8,90000],[9,100000],[10,110000],[11,120000],[12,130000],[13,140000],[14,150000],[15,160000],[16,170000],[17,180000],[18,190000],[19,200000],[20,210000],[21,220000],[22,230000],[23,240000],[24,250000],[25,260000],[26,270000],[27,280000],[28,290000],[29,300000]]",
        "output": "[10000, 20001, 30002, 40003, 50004, 60005, 70006, 80007, 90008, 100009, 110010, 120011, 130012, 140013, 150014, 160015, 170007, 180017, 190008, 200019, 210009, 220021, 230010, 240023, 250011, 260025, 7868, 17883, 27869, 37885]"
      },
      {
        "input": "parents = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14], queries = [[0,65535],[1,65534],[2,65533],[3,65532],[4,65531],[5,65530],[6,65529],[7,65528],[8,65527],[9,65526],[10,65525],[11,65524],[12,65523],[13,65522],[14,65521],[15,65520],[16,65519],[17,65518],[18,65517],[19,65516],[20,65515],[21,65514],[22,65513],[23,65512],[24,65511],[25,65510],[26,65509],[27,65508],[28,65507],[29,65506],[30,65505],[31,65504],[32,65503],[33,65502],[34,65501],[35,65500],[36,65499],[37,65498],[38,65497],[39,65496],[40,65495],[41,65494],[42,65493],[43,65492],[44,65491],[45,65490],[46,65489],[47,65488],[48,65487],[49,65486]]",
        "output": "[65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15], queries = [[0,65536],[1,32768],[2,16384],[3,8192],[4,4096],[5,2048],[6,1024],[7,512],[8,256],[9,128],[10,64],[11,32],[12,16],[13,8],[14,4],[15,2],[14,1],[13,3],[12,7],[11,15],[10,31],[9,63],[8,127],[7,255],[6,511],[5,1023],[4,2047],[3,4095],[2,8191],[1,16383],[0,32767]]",
        "output": "[65536, 32769, 16386, 8195, 4100, 2053, 1030, 519, 264, 137, 74, 43, 28, 14, 10, 13, 15, 14, 11, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767]"
      },
      {
        "input": "parents = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15], queries = [[15,65535],[14,32767],[13,16383],[12,8191],[11,4095],[10,2047],[9,1023],[8,511],[7,255],[6,127],[5,63],[4,31],[3,15],[2,7],[1,3],[0,1]]",
        "output": "[65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]"
      }
    ]
  },
  {
    "id": 1153,
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "String"
    ],
    "problemDescription": "Given two strings str1 and str2 of the same length, determine whether you can transform str1 into str2 by doing zero or more conversions.\nIn one conversion you can convert all occurrences of one character in str1 to any other lowercase English character.\nReturn true if and only if you can transform str1 into str2.\n\u00a0\nExample 1:\n\nInput: str1 = \"aabcc\", str2 = \"ccdee\"\nOutput: true\nExplanation: Convert 'c' to 'e' then 'b' to 'd' then 'a' to 'c'. Note that the order of conversions matter.\n\nExample 2:\n\nInput: str1 = \"leetcode\", str2 = \"codeleet\"\nOutput: false\nExplanation: There is no way to transform str1 to str2.\n\n\u00a0\nConstraints:\n\n1 <= str1.length == str2.length <= 104\nstr1 and str2 contain only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def canConvert(self, str1: str, str2: str) -> bool:\n        ",
    "testCases": [
      {
        "input": "str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"bcdefghijklmnopqrstuvwxyza\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"bcadefghijklmnopqrstuvwxzy\"",
        "output": "False"
      },
      {
        "input": "str1 = \"leetcode\", str2 = \"codeleet\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aaa\", str2 = \"aaa\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aabcc\", str2 = \"ccdee\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abc\", str2 = \"abc\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aabbcc\", str2 = \"bbccdd\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abc\", str2 = \"bcd\"",
        "output": "True"
      },
      {
        "input": "str1 = \"zzzz\", str2 = \"aaaa\"",
        "output": "True"
      },
      {
        "input": "str1 = \"zzz\", str2 = \"aaa\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abac\", str2 = \"bcbd\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcd\", str2 = \"abcf\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcd\", str2 = \"dddd\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcabcabcabcabc\", str2 = \"defdefdefdefdef\"",
        "output": "True"
      },
      {
        "input": "str1 = \"xyzz\", str2 = \"zzxy\"",
        "output": "False"
      },
      {
        "input": "str1 = \"exampleexample\", str2 = \"fyemplyfyemply\"",
        "output": "False"
      },
      {
        "input": "str1 = \"aaaabbbbccccdddd\", str2 = \"bbbbccccddddeeee\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aaaabbbb\", str2 = \"ccccdddd\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcdefg\", str2 = \"ghijklm\"",
        "output": "True"
      },
      {
        "input": "str1 = \"mississippi\", str2 = \"nittinnttin\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdefghijklnopqrstuvwxyz\", str2 = \"bcdefghijklnopqrstuvwxyza\"",
        "output": "True"
      },
      {
        "input": "str1 = \"mississippi\", str2 = \"bbbbbbbbbba\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcabcabcabc\", str2 = \"defdefdefdef\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcdefghij\", str2 = \"jihgfedcba\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcdefghij\", str2 = \"abcdefghij\"",
        "output": "True"
      },
      {
        "input": "str1 = \"transform\", str2 = \"formtrans\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abacabadabacaba\", str2 = \"xyxyxyxyxyxyxyx\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aabbcc\", str2 = \"aabbcc\"",
        "output": "True"
      },
      {
        "input": "str1 = \"thisisatest\", str2 = \"thisisbtest\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcdefghijklmnop\", str2 = \"bcadefghijklmnop\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abacabadabacaba\", str2 = \"xyzxyzxyzxyzxyz\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdabcd\", str2 = \"dcbaabdc\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdabcd\", str2 = \"dcbaabcd\"",
        "output": "False"
      },
      {
        "input": "str1 = \"ababababab\", str2 = \"bababababa\"",
        "output": "True"
      },
      {
        "input": "str1 = \"character\", str2 = \"haracteerc\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdef\", str2 = \"fedcba\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aaaaaaaaaaaaaaaaaaaa\", str2 = \"bbbbbbbbbbbbbbbbbbbb\"",
        "output": "True"
      },
      {
        "input": "str1 = \"uniquestring\", str2 = \"stringunique\"",
        "output": "False"
      },
      {
        "input": "str1 = \"ababab\", str2 = \"xyzxyz\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcde\", str2 = \"fghij\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aabbccddeeff\", str2 = \"bbccddeeffgg\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcdefgh\", str2 = \"abcdefgh\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcabcabc\", str2 = \"defdefdef\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abacabadabacaba\", str2 = \"xyzxyxzyxzyxzzy\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcabcabcabcabcabc\", str2 = \"xyzxyzxyzxyzxyzxyz\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcabcabcabcabcabcabc\", str2 = \"xyzxyzxyzxyzxyzxyzxyz\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", str2 = \"zzxxwwvvuuttssrrqqlloonnmmkkjjiihhggffeeddccbaa\"",
        "output": "False"
      },
      {
        "input": "str1 = \"circular\", str2 = \"ircularc\"",
        "output": "False"
      },
      {
        "input": "str1 = \"aabcc\", str2 = \"bbaad\"",
        "output": "False"
      },
      {
        "input": "str1 = \"thisisatest\", str2 = \"tististest\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdefghijabcdefghij\", str2 = \"jihgfedcbajihgfedcba\"",
        "output": "True"
      },
      {
        "input": "str1 = \"xyzz\", str2 = \"zzzx\"",
        "output": "False"
      },
      {
        "input": "str1 = \"multipleoccurrences\", str2 = \"llliiuuutececcurren\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdefghij\", str2 = \"jabcdefghi\"",
        "output": "True"
      },
      {
        "input": "str1 = \"transform\", str2 = \"transfrme\"",
        "output": "False"
      },
      {
        "input": "str1 = \"qwertyuiop\", str2 = \"poiuytrewq\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcdabcdabcdabcd\", str2 = \"xyzaxyzaxyzaxyza\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abababab\", str2 = \"babababa\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aabbccddeeff\", str2 = \"ffeeddccbaaa\"",
        "output": "False"
      },
      {
        "input": "str1 = \"sameple\", str2 = \"samplee\"",
        "output": "False"
      },
      {
        "input": "str1 = \"xyzxyzxyz\", str2 = \"zyxzyxzyx\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aaaaabbbbcccccdddddeeeee\", str2 = \"eeeeeaaaaabbbbcccccdddd\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abacabadabacabad\", str2 = \"xyzxyzxyzxyz\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdefghijklmnopqrstuvwxyza\", str2 = \"bcdefghijklmnopqrstuvwxyza\"",
        "output": "False"
      },
      {
        "input": "str1 = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", str2 = \"zzxxwwvvuuttrrssqqppoonnmmllkkjjiihhggffeeddccbbaa\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abababab\", str2 = \"acacacac\"",
        "output": "True"
      },
      {
        "input": "str1 = \"mississippi\", str2 = \"ssissippi\"",
        "output": "False"
      },
      {
        "input": "str1 = \"samelettereverywhere\", str2 = \"samelettereverywhere\"",
        "output": "True"
      },
      {
        "input": "str1 = \"transform\", str2 = \"convert\"",
        "output": "True"
      },
      {
        "input": "str1 = \"repeated\", str2 = \"prepearde\"",
        "output": "False"
      },
      {
        "input": "str1 = \"aaaaaaabbbbbbbcccccc\", str2 = \"ccccccccdddddddddddd\"",
        "output": "False"
      },
      {
        "input": "str1 = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", str2 = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "False"
      },
      {
        "input": "str1 = \"transform\", str2 = \"formation\"",
        "output": "True"
      },
      {
        "input": "str1 = \"almostthere\", str2 = \"almoszthere\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abacabadabacaba\", str2 = \"xyzxyzxyxzyzxzy\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdefghijklmnopqrstuvwxyz\", str2 = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdefghijabcdefghij\", str2 = \"abcdefghijabcdefghij\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abacabadabacaba\", str2 = \"xyzxyxzyxzyxzyxzy\"",
        "output": "False"
      },
      {
        "input": "str1 = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", str2 = \"zzyyxxwwvvuuttrrssqqppoonnmmllkkjjiihhggffeeddccbbaa\"",
        "output": "False"
      },
      {
        "input": "str1 = \"allcharacters\", str2 = \"llcharactera\"",
        "output": "False"
      },
      {
        "input": "str1 = \"conversionexample\", str2 = \"exampleremnoscvoi\"",
        "output": "False"
      },
      {
        "input": "str1 = \"transformable\", str2 = \"formabletra\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abababab\", str2 = \"bcbcbcbc\"",
        "output": "True"
      },
      {
        "input": "str1 = \"unique\", str2 = \"euinque\"",
        "output": "False"
      },
      {
        "input": "str1 = \"xyzxyzxyzxyz\", str2 = \"zyxzyxzyxzyxzyxzyx\"",
        "output": "True"
      },
      {
        "input": "str1 = \"conversion\", str2 = \"conversions\"",
        "output": "True"
      },
      {
        "input": "str1 = \"mnopqr\", str2 = \"nopqrm\"",
        "output": "True"
      },
      {
        "input": "str1 = \"allcharacters\", str2 = \"llcharactersa\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdefgh\", str2 = \"hgfedcba\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aabbccddeeffgg\", str2 = \"hhiggeeffdccbbaa\"",
        "output": "False"
      },
      {
        "input": "str1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", str2 = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "False"
      },
      {
        "input": "str1 = \"verylongstringthatweneedmorecomplexity\", str2 = \"vyerlongstrngthatweneedmorecmplxty\"",
        "output": "False"
      },
      {
        "input": "str1 = \"almostthesame\", str2 = \"almostthesame\"",
        "output": "True"
      },
      {
        "input": "str1 = \"mississippi\", str2 = \"ppississippi\"",
        "output": "False"
      },
      {
        "input": "str1 = \"uniquestring\", str2 = \"uniqegstring\"",
        "output": "False"
      },
      {
        "input": "str1 = \"mnopqr\", str2 = \"nopqrs\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aaaabbbbccccdddd\", str2 = \"wwwwxxxyyyyzzzz\"",
        "output": "False"
      },
      {
        "input": "str1 = \"transformation\", str2 = \"artifomncstion\"",
        "output": "False"
      },
      {
        "input": "str1 = \"unconvertible\", str2 = \"convertiblenu\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abacabadaba\", str2 = \"acacacacaca\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcabcabcabc\", str2 = \"xyzxyzxyzxyz\"",
        "output": "True"
      },
      {
        "input": "str1 = \"zyxwvutsrqponmlkjihgfedcba\", str2 = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "False"
      },
      {
        "input": "str1 = \"puzzling\", str2 = \"uzzlingp\"",
        "output": "False"
      },
      {
        "input": "str1 = \"allcharactersareunique\", str2 = \"quenihartseacrrulaaa\"",
        "output": "False"
      },
      {
        "input": "str1 = \"mississippi\", str2 = \"ppiimssissi\"",
        "output": "False"
      },
      {
        "input": "str1 = \"aaaaaaaaaa\", str2 = \"bbbbbbbbbb\"",
        "output": "True"
      },
      {
        "input": "str1 = \"samestrings\", str2 = \"samestrings\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcdabcdabcdabcd\", str2 = \"wxyzwxyzwxyzwxyz\"",
        "output": "True"
      },
      {
        "input": "str1 = \"conversion\", str2 = \"onversionc\"",
        "output": "False"
      },
      {
        "input": "str1 = \"mississippi\", str2 = \"hhhhhhhhhii\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdeabcde\", str2 = \"edcbaedcba\"",
        "output": "True"
      },
      {
        "input": "str1 = \"zzzzzzzz\", str2 = \"yyyyyyzz\"",
        "output": "False"
      },
      {
        "input": "str1 = \"abcdefghijklmnopqrstuvwxyzz\", str2 = \"bcdefghijklmnopqrstuvwxyzz\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcdefgabcdefg\", str2 = \"gfedcbagfedcba\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", str2 = \"bbaacceeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "True"
      },
      {
        "input": "str1 = \"abcdabcd\", str2 = \"xyzaxyzaxyza\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aaaaaabbbbbbccccccdddddd\", str2 = \"eeeeeeffffffgggggg\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aaaabbbbcccc\", str2 = \"ddddeeeeffff\"",
        "output": "True"
      },
      {
        "input": "str1 = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", str2 = \"abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\"",
        "output": "False"
      },
      {
        "input": "str1 = \"repeatedconversions\", str2 = \"eevnorseducepntr\"",
        "output": "False"
      },
      {
        "input": "str1 = \"aabbbcccddeefffgghhiijjkkklllmmmnnnnoopppqqqqrrrrsstttuuuuvvvvwwwwxxxxyyyyzzzz\", str2 = \"zzzyyxxxwwwwvvvvuuuuuuuuuuuuttttrrrrrqqqqppppoonnnnmmmlllkkkjjjiiihhhgggffffffeeecccbbaaa\"",
        "output": "False"
      },
      {
        "input": "str1 = \"samecharacters\", str2 = \"amecharacterss\"",
        "output": "False"
      },
      {
        "input": "str1 = \"justonechar\", str2 = \"different\"",
        "output": "True"
      }
    ]
  },
  {
    "id": 992,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Counting",
      "Sliding Window"
    ],
    "problemDescription": "Given an integer array nums and an integer k, return the number of good subarrays of nums.\nA good array is an array where the number of different integers in that array is exactly k.\n\nFor example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.\n\nA subarray is a contiguous part of an array.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,1,2,3], k = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]\n\nExample 2:\n\nInput: nums = [1,2,1,3,4], k = 3\nOutput: 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 2 * 104\n1 <= nums[i], k <= nums.length\n\n",
    "starterCode": "class Solution:\n    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [4,2,4,5,6], k = 2",
        "output": "5"
      },
      {
        "input": "nums = [1,2,1,3,4], k = 3",
        "output": "3"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 1",
        "output": "55"
      },
      {
        "input": "nums = [1,2,2,1,1,3], k = 2",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6], k = 3",
        "output": "4"
      },
      {
        "input": "nums = [1,2], k = 1",
        "output": "2"
      },
      {
        "input": "nums = [1,2,2,1,2,3,3,4], k = 3",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 3",
        "output": "3"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "6"
      },
      {
        "input": "nums = [1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [1,2,1,2,3], k = 2",
        "output": "7"
      },
      {
        "input": "nums = [5,5,5,5,5], k = 1",
        "output": "15"
      },
      {
        "input": "nums = [1,2,2,1,1], k = 2",
        "output": "8"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], k = 5",
        "output": "6"
      },
      {
        "input": "nums = [1,2,2,1,3], k = 2",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,1], k = 1",
        "output": "15"
      },
      {
        "input": "nums = [1,2,2,1,2], k = 2",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1], k = 2",
        "output": "11"
      },
      {
        "input": "nums = [1,1,2,2,3,3], k = 2",
        "output": "8"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], k = 4",
        "output": "7"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 1",
        "output": "55"
      },
      {
        "input": "nums = [1,2,3,2,2,3,1,2,3], k = 3",
        "output": "22"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3], k = 2",
        "output": "18"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 1",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "253"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1], k = 4",
        "output": "21"
      },
      {
        "input": "nums = [1,2,2,1,2,3,4,5,5,4,3,2,1,2,3,4,5,5,4,3,2,1,6,7,8,9], k = 5",
        "output": "143"
      },
      {
        "input": "nums = [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5], k = 5",
        "output": "11"
      },
      {
        "input": "nums = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4], k = 4",
        "output": "91"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 1",
        "output": "210"
      },
      {
        "input": "nums = [1,2,2,1,3,1,4,2], k = 3",
        "output": "9"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "26"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2], k = 2",
        "output": "13"
      },
      {
        "input": "nums = [1,2,1,3,2,1,4,3,2,1,5,4,3,2,1], k = 3",
        "output": "18"
      },
      {
        "input": "nums = [5,4,3,2,1,1,2,3,4,5,5,4,3,2,1], k = 3",
        "output": "19"
      },
      {
        "input": "nums = [5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1], k = 3",
        "output": "35"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5], k = 2",
        "output": "36"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "66"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 10",
        "output": "237"
      },
      {
        "input": "nums = [1,2,2,1,2,2,1,2,2,1], k = 2",
        "output": "42"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20], k = 10",
        "output": "44"
      },
      {
        "input": "nums = [1,2,2,1,3,3,4], k = 2",
        "output": "9"
      },
      {
        "input": "nums = [1,2,1,3,2,4,3,5,2,3,1,4], k = 3",
        "output": "14"
      },
      {
        "input": "nums = [1,2,1,3,2,4,2,1,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1], k = 4",
        "output": "29"
      },
      {
        "input": "nums = [10,20,30,40,50,10,20,30,40,50], k = 4",
        "output": "7"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 5",
        "output": "6"
      },
      {
        "input": "nums = [1,1,2,3,2,3,3,4,4,4,4,4], k = 3",
        "output": "23"
      },
      {
        "input": "nums = [1,2,3,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3], k = 4",
        "output": "18"
      },
      {
        "input": "nums = [1,2,2,1,3,4,3,2,1], k = 2",
        "output": "11"
      },
      {
        "input": "nums = [1,2,2,1,2,2,1,2,2,1,2,2,1,2,2], k = 2",
        "output": "100"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,1,2,3,1,2,3], k = 2",
        "output": "14"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,3,2,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "75"
      },
      {
        "input": "nums = [10,20,10,30,20,40,30,50,20,30,10,40], k = 3",
        "output": "14"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], k = 3",
        "output": "8"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,1,2,3,4,5], k = 7",
        "output": "24"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3], k = 3",
        "output": "100"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "16"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7], k = 4",
        "output": "36"
      },
      {
        "input": "nums = [10,20,30,10,20,30,10,20,30], k = 2",
        "output": "8"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "136"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5], k = 4",
        "output": "7"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9], k = 3",
        "output": "63"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 4",
        "output": "28"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 20",
        "output": "1"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2], k = 2",
        "output": "378"
      },
      {
        "input": "nums = [1,2,3,2,1,1,2,3,2,1,1,2,3,2,1], k = 2",
        "output": "21"
      },
      {
        "input": "nums = [1,2,1,2,3,3,4,4,5,5], k = 3",
        "output": "12"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2], k = 2",
        "output": "120"
      },
      {
        "input": "nums = [5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "253"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "136"
      },
      {
        "input": "nums = [1,2,2,1,1,3,4,3,2,1], k = 2",
        "output": "15"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2], k = 2",
        "output": "190"
      },
      {
        "input": "nums = [5,4,3,2,1,1,2,3,4,5], k = 3",
        "output": "11"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8], k = 4",
        "output": "20"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], k = 2",
        "output": "16"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "190"
      },
      {
        "input": "nums = [1,1,2,2,3,3,1,1,2,2,3,3,1,1,2,2], k = 2",
        "output": "28"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], k = 3",
        "output": "28"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 20",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,1,3,2,4,5,3], k = 3",
        "output": "10"
      },
      {
        "input": "nums = [1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8], k = 3",
        "output": "48"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5], k = 2",
        "output": "36"
      },
      {
        "input": "nums = [1,2,3,2,2,3,1,1,2,3,3,3,2,1], k = 2",
        "output": "22"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 3",
        "output": "13"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 5",
        "output": "24"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1], k = 4",
        "output": "17"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "66"
      },
      {
        "input": "nums = [4,2,4,4,2,2,3,1,1,4], k = 2",
        "output": "19"
      },
      {
        "input": "nums = [1,2,3,4,5,5,4,3,2,1,1,2,3,4,5], k = 4",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,2,1,4,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1], k = 5",
        "output": "93"
      },
      {
        "input": "nums = [1,2,2,1,2,3,4,5,5,4,3,2,1,2,3,4,5,5,4,3,2,1], k = 4",
        "output": "30"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 5",
        "output": "16"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 2",
        "output": "29"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12], k = 5",
        "output": "32"
      },
      {
        "input": "nums = [1,2,2,1,2,3,3,2,1], k = 2",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 4",
        "output": "22"
      },
      {
        "input": "nums = [1,2,2,1,3,3,3,2,1,4,4,5,5,5,5,5], k = 3",
        "output": "27"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "55"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], k = 3",
        "output": "12"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 3",
        "output": "8"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10",
        "output": "11"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,1,1,2,2,3,3], k = 4",
        "output": "72"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10], k = 3",
        "output": "72"
      },
      {
        "input": "nums = [5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5], k = 5",
        "output": "106"
      },
      {
        "input": "nums = [1,2,2,3,3,3,2,1,1,1,1,1,1,1,2,3,3,3,2,1,1,1], k = 3",
        "output": "162"
      },
      {
        "input": "nums = [1,2,2,1,3,3,2,1,4,4,3,2,1], k = 2",
        "output": "16"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1], k = 5",
        "output": "80"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], k = 4",
        "output": "24"
      },
      {
        "input": "nums = [10,10,20,30,40,50,60,70,80,90], k = 5",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6], k = 3",
        "output": "36"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2], k = 2",
        "output": "45"
      },
      {
        "input": "nums = [1,2,2,1,3,3,2,1,4,4,3,2,1,5,5,4,3,2,1,6,6,5,4,3,2,1,7,7,6,5,4,3,2,1,8,8,7,6,5,4,3,2,1,9,9,8,7,6,5,4,3,2,1,10,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "541"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "21"
      },
      {
        "input": "nums = [1,2,3,2,1,4,5,4,3,2,1,2], k = 3",
        "output": "13"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5], k = 5",
        "output": "21"
      }
    ]
  },
  {
    "id": 2503,
    "difficulty": "Hard",
    "tags": [
      "Breadth-First Search",
      "Union Find",
      "Array",
      "Two Pointers",
      "Matrix",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an m x n integer matrix grid and an array queries of size k.\nFind an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:\n\nIf queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.\nOtherwise, you do not get any points, and you end this process.\n\nAfter the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.\nReturn the resulting array answer.\n\u00a0\nExample 1:\n\n\nInput: grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]\nOutput: [5,8,1]\nExplanation: The diagrams above show which cells we visit to get points for each query.\nExample 2:\n\n\nInput: grid = [[5,2,1],[1,1,2]], queries = [3]\nOutput: [0]\nExplanation: We can not get any points because the value of the top left cell is already greater than or equal to 3.\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n2 <= m, n <= 1000\n4 <= m * n <= 105\nk == queries.length\n1 <= k <= 104\n1 <= grid[i][j], queries[i] <= 106\n\n",
    "starterCode": "class Solution:\n    def maxPoints(self, grid: List[List[int]], queries: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "grid = [[1,1,1],[1,1,1],[1,1,1]], queries = [2,3]",
        "output": "[9, 9]"
      },
      {
        "input": "grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]",
        "output": "[5, 8, 1]"
      },
      {
        "input": "grid = [[1,1,1],[1,1,1],[1,1,1]], queries = [1,2,3]",
        "output": "[0, 9, 9]"
      },
      {
        "input": "grid = [[10,20,30],[40,50,60],[70,80,90]], queries = [15,25,35,45,55,65,75,85,95]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "grid = [[3,3,3],[3,3,3],[3,3,3]], queries = [2,4,6]",
        "output": "[0, 9, 9]"
      },
      {
        "input": "grid = [[1,10],[10,1]], queries = [5,15]",
        "output": "[1, 4]"
      },
      {
        "input": "grid = [[5,5,5],[5,5,5],[5,5,5]], queries = [4,5,6]",
        "output": "[0, 0, 9]"
      },
      {
        "input": "grid = [[4,5,6],[7,8,9],[10,11,12]], queries = [10,15,20]",
        "output": "[6, 9, 9]"
      },
      {
        "input": "grid = [[5,2,1],[1,1,2]], queries = [3]",
        "output": "[0]"
      },
      {
        "input": "grid = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]], queries = [1,2,3]",
        "output": "[0, 16, 16]"
      },
      {
        "input": "grid = [[10,20,30],[40,50,60],[70,80,90]], queries = [15,45,75]",
        "output": "[1, 4, 7]"
      },
      {
        "input": "grid = [[4,4,4],[4,4,4],[4,4,4]], queries = [4]",
        "output": "[0]"
      },
      {
        "input": "grid = [[1,1,1,1],[1,1,1,1],[1,1,1,1]], queries = [2,2,2]",
        "output": "[12, 12, 12]"
      },
      {
        "input": "grid = [[10,20,30],[40,50,60],[70,80,90]], queries = [15,35,65,95]",
        "output": "[1, 3, 6, 9]"
      },
      {
        "input": "grid = [[1,1,1],[1,1,1],[1,1,1]], queries = [2]",
        "output": "[9]"
      },
      {
        "input": "grid = [[1000000,1000000],[1000000,1000000]], queries = [1000000,999999]",
        "output": "[0, 0]"
      },
      {
        "input": "grid = [[1,5,9,13,17],[2,6,10,14,18],[3,7,11,15,19],[4,8,12,16,20]], queries = [10,15,20]",
        "output": "[9, 14, 19]"
      },
      {
        "input": "grid = [[100000,1,100000,1,100000],[1,100000,1,100000,1],[100000,1,100000,1,100000],[1,100000,1,100000,1],[100000,1,100000,1,100000]], queries = [1,100000,100001]",
        "output": "[0, 0, 25]"
      },
      {
        "input": "grid = [[1000000,1000000,1000000],[1000000,1,1000000],[1000000,1000000,1000000]], queries = [1000000,999999]",
        "output": "[0, 0]"
      },
      {
        "input": "grid = [[9,8,7,6],[2,1,3,4],[5,10,11,12],[13,14,15,16]], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "grid = [[1000000]], queries = [500000, 1000000, 1500000]",
        "output": "[0, 0, 1]"
      },
      {
        "input": "grid = [[9,8,7,6,5,4,3,2,1],[8,7,6,5,4,3,2,1,9],[7,6,5,4,3,2,1,9,8],[6,5,4,3,2,1,9,8,7],[5,4,3,2,1,9,8,7,6],[4,3,2,1,9,8,7,6,5],[3,2,1,9,8,7,6,5,4],[2,1,9,8,7,6,5,4,3],[1,9,8,7,6,5,4,3,2]], queries = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90]",
        "output": "[0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]], queries = [1,5,10,15,20,25,30]",
        "output": "[0, 4, 9, 14, 19, 24, 29]"
      },
      {
        "input": "grid = [[1,2,3],[2,5,7],[3,5,1],[1,2,3],[2,5,7]], queries = [5,6,2,8,10]",
        "output": "[10, 13, 1, 15, 15]"
      },
      {
        "input": "grid = [[5,5,5,5],[5,1,1,5],[5,1,1,5],[5,5,5,5]], queries = [1,2,3,4,5,6]",
        "output": "[0, 0, 0, 0, 0, 16]"
      },
      {
        "input": "grid = [[1,3,1,3,1],[3,1,3,1,3],[1,3,1,3,1],[3,1,3,1,3],[1,3,1,3,1]], queries = [2,4,6]",
        "output": "[1, 25, 25]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50]], queries = [5,10,15,20,25,30,35,40,45,50]",
        "output": "[4, 9, 14, 19, 24, 29, 34, 39, 44, 49]"
      },
      {
        "input": "grid = [[50,40,30,20,10],[51,41,31,21,11],[52,42,32,22,12],[53,43,33,23,13],[54,44,34,24,14]], queries = [25,35,45,55]",
        "output": "[0, 0, 0, 25]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50]], queries = [15,25,35,45,55,65,75,85,95,105]",
        "output": "[14, 24, 34, 44, 50, 50, 50, 50, 50, 50]"
      },
      {
        "input": "grid = [[2,1,3,1,2],[1,2,1,2,1],[3,1,2,1,3],[1,2,1,2,1],[2,1,3,1,2]], queries = [1,2,3,4]",
        "output": "[0, 0, 21, 25]"
      },
      {
        "input": "grid = [[5,10,15,20],[25,30,35,40],[45,50,55,60],[65,70,75,80]], queries = [25,50,75,100]",
        "output": "[4, 9, 14, 16]"
      },
      {
        "input": "grid = [[9,8,7],[6,5,4],[3,2,1]], queries = [5,10,15]",
        "output": "[0, 9, 9]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[10,9,8,7,6],[11,12,13,14,15],[20,19,18,17,16],[21,22,23,24,25]], queries = [1,5,10,15,20,25]",
        "output": "[0, 4, 9, 14, 19, 24]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[6,5,4,3,2,1],[1,2,3,4,5,6],[6,5,4,3,2,1]], queries = [3,4,5,6]",
        "output": "[2, 3, 16, 20]"
      },
      {
        "input": "grid = [[2,2,2,2,2,2,2],[2,1,1,1,1,1,2],[2,1,2,2,2,1,2],[2,1,2,1,2,1,2],[2,1,2,2,2,1,2],[2,1,1,1,1,1,2],[2,2,2,2,2,2,2]], queries = [1,2,3]",
        "output": "[0, 0, 49]"
      },
      {
        "input": "grid = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[0, 1, 3, 6, 9, 12, 14, 15, 15, 15]"
      },
      {
        "input": "grid = [[1,3,1,4,2],[3,2,4,1,3],[1,4,2,3,1],[2,3,1,2,4]], queries = [5,3,6,2]",
        "output": "[20, 1, 20, 1]"
      },
      {
        "input": "grid = [[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9]], queries = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 3, 6, 9, 12, 15, 18, 21, 24, 27]"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9]], queries = [1, 3, 5, 7, 9]",
        "output": "[0, 3, 10, 19, 24]"
      },
      {
        "input": "grid = [[10,10,10,10,10],[10,9,9,9,10],[10,9,8,9,10],[10,9,9,9,10],[10,10,10,10,10]], queries = [10,9,8,7]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "grid = [[5,6,7,8],[4,3,2,1],[12,13,14,15],[9,10,11,16]], queries = [3,5,7,9,11,13,15,17]",
        "output": "[0, 0, 6, 8, 8, 12, 14, 16]"
      },
      {
        "input": "grid = [[10,20,30,40,50],[5,15,25,35,45],[1,11,21,31,41],[6,16,26,36,46],[11,21,31,41,51]], queries = [10,20,30,40,50,60]",
        "output": "[0, 8, 13, 18, 23, 25]"
      },
      {
        "input": "grid = [[5,2,1,4,3,2,1],[4,3,2,1,4,3,2],[3,2,1,2,3,2,1],[2,1,2,3,2,1,2],[1,2,3,2,1,2,3]], queries = [3,4,5,6]",
        "output": "[0, 0, 0, 35]"
      },
      {
        "input": "grid = [[9,9,9,9,9],[9,1,2,3,9],[9,4,5,6,9],[9,7,8,9,9],[9,9,9,9,9]], queries = [1,5,10]",
        "output": "[0, 0, 25]"
      },
      {
        "input": "grid = [[10,20,30,40,50],[50,40,30,20,10],[10,20,30,40,50],[50,40,30,20,10],[10,20,30,40,50]], queries = [25,35,45,55]",
        "output": "[2, 15, 20, 25]"
      },
      {
        "input": "grid = [[7,7,7,7,7],[7,7,7,7,7],[7,7,7,7,7],[7,7,7,7,7],[7,7,7,7,7]], queries = [6,7,8]",
        "output": "[0, 0, 25]"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,2,2,2,1],[1,2,3,2,1],[1,2,2,2,1],[1,1,1,1,1]], queries = [1,2,3,4]",
        "output": "[0, 16, 24, 25]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9]], queries = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[25, 24, 22, 19, 15, 10, 6, 3, 1, 0]"
      },
      {
        "input": "grid = [[7,7,7,7],[7,7,7,7],[7,7,7,7],[7,7,7,7]], queries = [5,6,8]",
        "output": "[0, 0, 16]"
      },
      {
        "input": "grid = [[9,8,7,6,5],[4,3,2,1,0],[1,2,3,4,5],[6,7,8,9,10]], queries = [15,10,5,1]",
        "output": "[20, 19, 0, 0]"
      },
      {
        "input": "grid = [[9, 8, 7, 6, 5], [8, 7, 6, 5, 4], [7, 6, 5, 4, 3], [6, 5, 4, 3, 2], [5, 4, 3, 2, 1]], queries = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[25, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "grid = [[50,40,30,20,10],[45,35,25,15,5],[40,30,20,10,0],[35,25,15,5,45],[30,20,10,0,50]], queries = [10,25,40,50]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "grid = [[1, 1, 1], [1, 10, 1], [1, 1, 1]], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,2,2,1],[1,2,3,3,3,3,3,3,2,1],[1,2,3,4,4,4,4,3,2,1],[1,2,3,4,5,5,4,3,2,1],[1,2,3,4,5,6,5,4,3,1],[1,2,3,4,5,6,7,6,3,1],[1,2,3,4,5,6,7,8,3,1],[1,2,3,4,5,6,7,6,5,1],[1,2,3,4,3,2,3,4,5,1]], queries = [2,3,5,7,8,10]",
        "output": "[28, 47, 81, 96, 99, 100]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[10,9,8,7,6],[2,3,4,5,1],[6,7,8,9,10]], queries = [1,3,5,7,9,11]",
        "output": "[0, 2, 4, 12, 16, 20]"
      },
      {
        "input": "grid = [[2, 3, 2], [3, 2, 3], [2, 3, 2], [3, 2, 3], [2, 3, 2]], queries = [2, 3, 4, 5, 6, 7]",
        "output": "[0, 1, 15, 15, 15, 15]"
      },
      {
        "input": "grid = [[3,3,3,3],[3,1,1,3],[3,1,1,3],[3,3,3,3]], queries = [1,2,4,5]",
        "output": "[0, 0, 16, 16]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8],[5,6,7,8,9]], queries = [10,5,1,15]",
        "output": "[25, 10, 0, 25]"
      },
      {
        "input": "grid = [[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7]], queries = [1,2,3,4,5,6,7,8]",
        "output": "[0, 1, 3, 6, 9, 12, 14, 15]"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], queries = [10,15,20]",
        "output": "[9, 14, 15]"
      },
      {
        "input": "grid = [[1000000,999999],[999998,1000000],[999997,999996]], queries = [1000000,999999,999998,999997]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]], queries = [5,10,15,20]",
        "output": "[4, 9, 14, 15]"
      },
      {
        "input": "grid = [[5,4,3,2,1],[6,5,4,3,2],[7,6,5,4,3],[8,7,6,5,4],[9,8,7,6,5]], queries = [5,10,15,20]",
        "output": "[0, 25, 25, 25]"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], queries = [2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]",
        "output": "[25, 0, 25, 0, 25, 0, 25, 0, 25, 0, 25, 0, 25, 0, 25, 0]"
      },
      {
        "input": "grid = [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]], queries = [1,2,3]",
        "output": "[0, 30, 30]"
      },
      {
        "input": "grid = [[5,1,2,3,4],[4,5,6,7,8],[3,4,5,6,7],[2,3,4,5,6],[1,2,3,4,5]], queries = [6,5,4,3,2,1]",
        "output": "[19, 0, 0, 0, 0, 0]"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,3,3,3,3,3,3,3,3,3,3,3,2,1],[1,2,3,4,4,4,4,4,4,4,4,3,2,1,1],[1,2,3,4,5,5,5,5,5,4,3,2,1,1,1],[1,2,3,4,5,6,6,6,5,4,3,2,1,1,1],[1,2,3,4,5,6,7,6,5,4,3,2,1,1,1],[1,2,3,4,5,6,6,6,5,4,3,2,1,1,1],[1,2,3,4,5,5,5,5,5,4,3,2,1,1,1],[1,2,3,4,4,4,4,4,4,4,3,2,1,1,1],[1,2,3,3,3,3,3,3,3,3,3,2,1,1,1],[1,2,2,2,2,2,2,2,2,2,2,2,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]], queries = [1,2,3,4,5,6,7]",
        "output": "[0, 69, 111, 145, 170, 186, 194]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9,10]], queries = [5,10,15]",
        "output": "[4, 27, 30]"
      },
      {
        "input": "grid = [[1,2,1,2,1,2],[2,1,2,1,2,1],[1,2,1,2,1,2],[2,1,2,1,2,1],[1,2,1,2,1,2],[2,1,2,1,2,1]], queries = [1,2,3]",
        "output": "[0, 1, 36]"
      },
      {
        "input": "grid = [[1,3,2,4,3],[2,4,3,5,4],[3,5,4,6,5],[4,6,5,7,6],[5,7,6,8,7]], queries = [2,3,4,5,6,7,8,9]",
        "output": "[1, 2, 6, 12, 17, 21, 24, 25]"
      },
      {
        "input": "grid = [[1,3,5,7,9],[2,4,6,8,10],[1,3,5,7,9],[2,4,6,8,10]], queries = [6,10,15,20]",
        "output": "[10, 18, 20, 20]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[10,9,8,7,6],[11,12,13,14,15],[20,19,18,17,16]], queries = [5,10,15,20]",
        "output": "[4, 9, 14, 19]"
      },
      {
        "input": "grid = [[1,3,1,4,1],[2,2,4,2,4],[3,5,3,5,3],[4,4,5,4,4],[1,1,1,1,1]], queries = [2,5,7,10]",
        "output": "[1, 22, 25, 25]"
      },
      {
        "input": "grid = [[1,2,3],[2,1,2],[3,2,1],[2,1,2],[1,2,3]], queries = [2,3,4]",
        "output": "[1, 12, 15]"
      },
      {
        "input": "grid = [[5,2,1,2,5],[1,5,2,5,1],[2,1,5,1,2],[5,2,1,2,5]], queries = [3,4,6,7]",
        "output": "[0, 0, 20, 20]"
      },
      {
        "input": "grid = [[1,5,3,8,7],[2,6,4,9,8],[3,7,5,10,9],[4,8,6,11,10],[5,9,7,12,11]], queries = [1,4,7,10,13]",
        "output": "[0, 3, 11, 20, 25]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[10,9,8,7,6],[11,12,13,14,15],[20,19,18,17,16],[21,22,23,24,25]], queries = [5,15,25,30]",
        "output": "[4, 14, 24, 25]"
      },
      {
        "input": "grid = [[1,3,5,7,9],[2,4,6,8,10],[1,3,5,7,9],[2,4,6,8,10],[1,3,5,7,9]], queries = [6,12,18]",
        "output": "[13, 25, 25]"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,2,2,2,1],[1,2,3,2,1],[1,2,2,2,1],[1,1,1,1,1]], queries = [2,3,4]",
        "output": "[16, 24, 25]"
      },
      {
        "input": "grid = [[1,3,1,3,1],[3,1,3,1,3],[1,3,1,3,1],[3,1,3,1,3],[1,3,1,3,1]], queries = [2,4,6,8,10]",
        "output": "[1, 25, 25, 25, 25]"
      },
      {
        "input": "grid = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]], queries = [1,2,3,4,5,6,7,8,9,10,11]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "grid = [[1,1,1,1,1,1],[1,2,2,2,2,1],[1,2,3,3,2,1],[1,2,3,3,2,1],[1,2,2,2,2,1],[1,1,1,1,1,1]], queries = [2,3,4]",
        "output": "[20, 32, 36]"
      },
      {
        "input": "grid = [[1,2,3,4],[4,3,2,1],[1,2,3,4],[4,3,2,1]], queries = [2,4,6,8,10]",
        "output": "[1, 12, 16, 16, 16]"
      },
      {
        "input": "grid = [[1, 3, 5, 7], [2, 4, 6, 8], [3, 5, 7, 9], [4, 6, 8, 10]], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[0, 1, 2, 4, 6, 8, 10, 12, 14, 15]"
      },
      {
        "input": "grid = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]], queries = [2, 4, 6, 8]",
        "output": "[1, 6, 11, 12]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30]], queries = [15,25,35]",
        "output": "[14, 24, 30]"
      },
      {
        "input": "grid = [[1, 1, 1, 1], [1, 1000000, 1, 1], [1, 1, 1000000, 1], [1, 1, 1, 1]], queries = [1, 1000000, 1000001]",
        "output": "[0, 14, 16]"
      },
      {
        "input": "grid = [[9,8,7,6,5],[4,3,2,1,0],[5,6,7,8,9],[0,1,2,3,4],[9,8,7,6,5]], queries = [5,10,15]",
        "output": "[0, 25, 25]"
      },
      {
        "input": "grid = [[3,1,4,1,5,9,2,6,5,3,5,9,1,4,1,5,9,2,6,5,3,5,9,1,4,1,5,9,2,6,5],[2,7,1,8,2,8,1,8,2,8,4,5,9,0,4,5,2,3,5,3,9,7,9,3,2,3,8,4,6,2,6],[3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1,6,9,3,9,9,3,7,5,1,0,5,8,2,0]], queries = [10,20,30,40,50]",
        "output": "[93, 93, 93, 93, 93]"
      },
      {
        "input": "grid = [[5, 3, 8, 6], [3, 4, 1, 5], [6, 1, 4, 3], [8, 5, 3, 7]], queries = [4, 6, 8, 10]",
        "output": "[0, 11, 14, 16]"
      },
      {
        "input": "grid = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]], queries = [1,2,3,4]",
        "output": "[0, 0, 0, 25]"
      },
      {
        "input": "grid = [[1,1,1,1000],[1,1,1000,1],[1,1000,1,1],[1000,1,1,1]], queries = [500,1001]",
        "output": "[6, 16]"
      },
      {
        "input": "grid = [[1,10,100],[10,100,1000],[100,1000,10000]], queries = [500,50,5]",
        "output": "[6, 3, 1]"
      },
      {
        "input": "grid = [[1,3,5,7,9],[2,4,6,8,10],[3,5,7,9,11],[4,6,8,10,12],[5,7,9,11,13]], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[0, 1, 2, 4, 6, 9, 11, 14, 16, 19, 21, 23, 24, 25, 25]"
      },
      {
        "input": "grid = [[100,99,98,97,96],[95,94,93,92,91],[90,89,88,87,86],[85,84,83,82,81],[80,79,78,77,76]], queries = [90,80,70]",
        "output": "[0, 0, 0]"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[2,2,2,2,2,2,2,2,2,2],[3,3,3,3,3,3,3,3,3,3],[4,4,4,4,4,4,4,4,4,4]], queries = [1,2,3,4,5]",
        "output": "[0, 10, 20, 30, 40]"
      },
      {
        "input": "grid = [[1,10,3,10,5],[10,9,8,7,10],[6,10,2,10,4],[10,10,10,10,10],[5,10,7,10,9]], queries = [1,5,10,15]",
        "output": "[0, 1, 1, 25]"
      },
      {
        "input": "grid = [[1,3,5,7,9],[2,4,6,8,10],[1,3,5,7,9],[2,4,6,8,10],[1,3,5,7,9]], queries = [5,10,15]",
        "output": "[10, 23, 25]"
      },
      {
        "input": "grid = [[1000000,999999,999998],[999997,999996,999995],[999994,999993,999992]], queries = [999999,999998,999997,999996,999995,999994]",
        "output": "[0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "grid = [[3,2,2,3],[3,1,1,3],[3,2,2,3],[3,3,3,3]], queries = [2,4,6,8]",
        "output": "[0, 16, 16, 16]"
      },
      {
        "input": "grid = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]], queries = [1,2,3]",
        "output": "[0, 40, 40]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40]], queries = [5,15,25,35]",
        "output": "[4, 14, 24, 34]"
      },
      {
        "input": "grid = [[3,1,4,1,5,9],[2,6,5,3,5,9],[5,8,9,7,9,3],[2,8,8,4,1,9]], queries = [10,20,30,40,50]",
        "output": "[24, 24, 24, 24, 24]"
      }
    ]
  },
  {
    "id": 968,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Dynamic Programming",
      "Binary Tree"
    ],
    "problemDescription": "You are given the root of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.\nReturn the minimum number of cameras needed to monitor all nodes of the tree.\n\u00a0\nExample 1:\n\n\nInput: root = [0,0,null,0,0]\nOutput: 1\nExplanation: One camera is enough to monitor all nodes if placed as shown.\n\nExample 2:\n\n\nInput: root = [0,0,null,0,null,0,null,null,0]\nOutput: 2\nExplanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 1000].\nNode.val == 0\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minCameraCover(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [0,null,0,null,0]",
        "output": "1"
      },
      {
        "input": "root = [0,0,0,null,null,0,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,null,0,0]",
        "output": "1"
      },
      {
        "input": "root = [0,0,null,0,null,0,null,null,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,0]",
        "output": "2"
      },
      {
        "input": "root = [0]",
        "output": "1"
      },
      {
        "input": "root = [0,null,0,null,0,null,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,0,0,null,null,0,null,0,null,0,0,null,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,null,0,0,null,null,null,0,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,0,0,null,null,0,null,null,null,null,0]",
        "output": "2"
      },
      {
        "input": "root = [0,null,0,0,0,0,0,0,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,null,0,0,null,0,0,0,null,null,0,0,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,null,0,0,null,null,0,0,null,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,null,0,null,null,null,0,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,null,null,0,0,null,0,null,null,0,null,0,null,0,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,null,null]",
        "output": "8"
      },
      {
        "input": "root = [0,0,0,null,0,0,null,0,0,null,null,0,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "9"
      },
      {
        "input": "root = [0,0,0,null,0,0,null,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,0]",
        "output": "7"
      },
      {
        "input": "root = [0,null,0,0,0,0,0,0,0,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "7"
      },
      {
        "input": "root = [0,0,0,0,0,0,null,null,0,null,0,null,0,0,0,0,0,null,null,0,null,0,null,0]",
        "output": "6"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,0,0,null,null,0,0,null,null,0,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,0,0,0,null,null,null]",
        "output": "4"
      },
      {
        "input": "root = [0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,null,0,0,0,0,0,null,null,0,0,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,null,0,0,0,null,null,null,0,0,0,null,null,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,0,0,0,null,0,0,null,null,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,0,0,null,null,null,0,0,null]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,0,0,0,0,null,null,null,null]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,null,0,0,0,null,0,0,0,null,0,0,0,null,0,0,0,null,0,0,0]",
        "output": "6"
      },
      {
        "input": "root = [0,0,0,null,null,0,0,0,null,null,0,0,null,null,0,0,null,null,0,0,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,null,null,null,null,null,null,0,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,null,0,null,null,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,null,0,0,null,null,0,0,null,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,null,null,0,0,0,null,null,0,0,0,null,null]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,0,0,0,0,0,0,null,null,0,0,0,0,0,0,null,null,0,0,0,null,null,0]",
        "output": "8"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,null,null,0,0,null,null,0,0,null,null,0,0,null,null,0,0,null,null,0,0,0,0,0,0,0,0,0,0]",
        "output": "10"
      },
      {
        "input": "root = [0,null,0,null,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,null,0,0,0,0,0,null,null,null,0,0,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,null,0,0,0,0,0,null,0,0,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,null,0,0,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,0,0]",
        "output": "6"
      },
      {
        "input": "root = [0,0,null,0,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "8"
      },
      {
        "input": "root = [0,0,0,null,null,0,0,null,null,0,0,null,null,0,0,null,null,0,0,null,null]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,0,null,null,0,null,null,0,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,0,null,0,0,null,0,0,null,0,null,0,null,0,0,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,0,null,0,0,0,null,0,0,0,null,0,null,0,null,0,null,0,0,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "8"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "10"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "15"
      },
      {
        "input": "root = [0,0,0,0,null,null,0,0,0,0,0,0,0,0,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,null,null,0,0,null,null,0,0,null,null,0,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,null,0,null,0,null,null,0,null,0,null,null,0,null]",
        "output": "3"
      },
      {
        "input": "root = [0,null,0,null,0,null,0,null,0,null,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,null,null,0,null,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,0,null,null,0,0,null,null,null,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,0,null,null,0,0,0,null,null,0,0,0,0,0,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "7"
      },
      {
        "input": "root = [0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,null,0,0,0,null,null,0,0,0,null,null,0,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,null,0,0,null,null,null,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,0,0,0,null,0,0,0,null,0,0,0,0,0,0,0,null,null,0,0]",
        "output": "6"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,null,null,0,0,0,0,0,0,null,null,null,null,0,0,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,null,0,null,0,null,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "8"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,null,null,0,0,null,null,0,0,null,null]",
        "output": "5"
      },
      {
        "input": "root = [0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,0,0,0,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,0,null,0,0,0,null,0,0,0,0,0,0,0,null,0,null,0,0,0,null,0,null,0,null,0,null,0,0,0,null,0]",
        "output": "10"
      },
      {
        "input": "root = [0,null,0,0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,null,null,null]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,null,0,null,0,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,0,0]",
        "output": "11"
      },
      {
        "input": "root = [0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,0,0]",
        "output": "6"
      },
      {
        "input": "root = [0,0,0,0,0,0,null,null,null,0,0,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,null,0,0,0,0,null,null,null,null,null,null,null,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0]",
        "output": "7"
      },
      {
        "input": "root = [0,0,0,0,null,0,null,null,0,null,0,0,null,0,null]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,null,null,null,null,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,null,null,null,null]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0]",
        "output": "2"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,null,0,0,0,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,null,0,0,0,0,null,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,null,0,null,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,null,0,null,null,null,null,0,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,0,0,null,null,0,0,0,0,null,null,0,0,null,null]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,null,0,0,null,null,0,null,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,0,0,null,null,0,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,null,0,0,null,0,0,0,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,null,0,0,null,0,0,null,0,null,0,null,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "6"
      },
      {
        "input": "root = [0,0,0,0,0,null,null,0,0,0,null,0,0,null,null,0,0,0,null,0,0,0,null,0,0,0,null,null,0,0]",
        "output": "8"
      },
      {
        "input": "root = [0,0,0,0,0,null,0,0,0,null,null,0,null,null,null]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,null,0,0,0,0,0,null,null,0,0,null,0,null,0,null,0,null,0,null,null,0,null,0]",
        "output": "6"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "10"
      },
      {
        "input": "root = [0,0,0,0,0,0,null,0,0,0,0,0,0,null,null,0,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,null,0,null,null,null,0,0,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,null,0,0,0,null,null,0,0,null,null,0,0]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,null,0,null,0,null,null,0,0,null,0]",
        "output": "3"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "5"
      },
      {
        "input": "root = [0,0,0,0,0,null,0,0,0,null,0,null,null,0,0,0,null]",
        "output": "4"
      },
      {
        "input": "root = [0,0,0,0,0,0,null,0,0,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0]",
        "output": "7"
      }
    ]
  },
  {
    "id": 1575,
    "difficulty": "Hard",
    "tags": [
      "Memoization",
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given an array of distinct positive integers locations where locations[i] represents the position of city i. You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.\nAt each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. Please notice that |x| denotes the absolute value of x.\nNotice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).\nReturn the count of all possible routes from start to finish. Since the answer may be too large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\nInput: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\nOutput: 4\nExplanation: The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3\n\nExample 2:\n\nInput: locations = [4,3,1], start = 1, finish = 0, fuel = 6\nOutput: 5\nExplanation: The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5\n\nExample 3:\n\nInput: locations = [5,2,1], start = 0, finish = 2, fuel = 3\nOutput: 0\nExplanation: It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.\n\n\u00a0\nConstraints:\n\n2 <= locations.length <= 100\n1 <= locations[i] <= 109\nAll integers in locations are distinct.\n0 <= start, finish < locations.length\n1 <= fuel <= 200\n\n",
    "starterCode": "class Solution:\n    def countRoutes(self, locations: List[int], start: int, finish: int, fuel: int) -> int:\n        ",
    "testCases": [
      {
        "input": "locations = [4,3,1], start = 1, finish = 0, fuel = 6",
        "output": "5"
      },
      {
        "input": "locations = [1,10,100,1000,10000], start = 0, finish = 4, fuel = 5000",
        "output": "0"
      },
      {
        "input": "locations = [1,2,3,4,5], start = 0, finish = 4, fuel = 10",
        "output": "1208"
      },
      {
        "input": "locations = [5,2,1], start = 0, finish = 2, fuel = 3",
        "output": "0"
      },
      {
        "input": "locations = [10,20,30,40], start = 0, finish = 3, fuel = 50",
        "output": "16"
      },
      {
        "input": "locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5",
        "output": "4"
      },
      {
        "input": "locations = [1,2,3], start = 0, finish = 2, fuel = 3",
        "output": "2"
      },
      {
        "input": "locations = [10,20,30,40,50], start = 0, finish = 4, fuel = 100",
        "output": "1208"
      },
      {
        "input": "locations = [2, 8, 14, 20, 26, 32, 38, 44, 50, 56, 62], start = 2, finish = 9, fuel = 100",
        "output": "549504"
      },
      {
        "input": "locations = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100], start = 1, finish = 99, fuel = 4950",
        "output": "Error: list index out of range"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80, 90], start = 3, finish = 8, fuel = 150",
        "output": "461824"
      },
      {
        "input": "locations = [10, 25, 40, 55, 70, 85, 100, 115, 130, 145, 160, 175, 190], start = 0, finish = 12, fuel = 300",
        "output": "23453696"
      },
      {
        "input": "locations = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], start = 20, finish = 0, fuel = 300",
        "output": "984041497"
      },
      {
        "input": "locations = [10,25,35,45,55], start = 0, finish = 4, fuel = 80",
        "output": "40"
      },
      {
        "input": "locations = [5,15,25,35,45,55,65,75,85,95], start = 4, finish = 0, fuel = 150",
        "output": "179664"
      },
      {
        "input": "locations = [5, 6, 8, 9, 11, 12, 14, 15, 17, 18], start = 0, finish = 9, fuel = 20",
        "output": "28672"
      },
      {
        "input": "locations = [5, 10, 15, 20, 25, 30, 35, 40, 45], start = 0, finish = 8, fuel = 120",
        "output": "838699257"
      },
      {
        "input": "locations = [1, 5, 9, 12, 18, 23], start = 0, finish = 5, fuel = 40",
        "output": "464"
      },
      {
        "input": "locations = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550], start = 1, finish = 9, fuel = 1000",
        "output": "78931328"
      },
      {
        "input": "locations = [5,10,15,20,25,30,35,40,45,50], start = 0, finish = 9, fuel = 100",
        "output": "11616768"
      },
      {
        "input": "locations = [1, 3, 5, 7, 9, 11, 13], start = 0, finish = 6, fuel = 15",
        "output": "32"
      },
      {
        "input": "locations = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000], start = 15, finish = 0, fuel = 2500",
        "output": "886790116"
      },
      {
        "input": "locations = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], start = 0, finish = 9, fuel = 20",
        "output": "256"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], start = 0, finish = 14, fuel = 150",
        "output": "8192"
      },
      {
        "input": "locations = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60], start = 0, finish = 19, fuel = 150",
        "output": "505021546"
      },
      {
        "input": "locations = [1, 10, 100, 1000, 10000, 100000, 1000000], start = 0, finish = 6, fuel = 1000000",
        "output": "32"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], start = 0, finish = 19, fuel = 1000",
        "output": "762710068"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80], start = 2, finish = 5, fuel = 100",
        "output": "1952"
      },
      {
        "input": "locations = [3, 7, 12, 18, 23, 29, 34, 39, 44], start = 1, finish = 8, fuel = 100",
        "output": "11186944"
      },
      {
        "input": "locations = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], start = 0, finish = 9, fuel = 1000",
        "output": "256"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], start = 0, finish = 19, fuel = 200",
        "output": "262144"
      },
      {
        "input": "locations = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], start = 6, finish = 11, fuel = 200",
        "output": "460940892"
      },
      {
        "input": "locations = [1, 3, 5, 7, 9, 11, 13, 15], start = 7, finish = 0, fuel = 15",
        "output": "64"
      },
      {
        "input": "locations = [5, 20, 15, 40, 25, 35, 10], start = 2, finish = 6, fuel = 80",
        "output": "225320"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], start = 0, finish = 19, fuel = 1800",
        "output": "387985368"
      },
      {
        "input": "locations = [2, 15, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], start = 1, finish = 17, fuel = 100",
        "output": "524288"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500], start = 49, finish = 0, fuel = 2000",
        "output": "430143451"
      },
      {
        "input": "locations = [10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], start = 9, finish = 18, fuel = 300",
        "output": "279596282"
      },
      {
        "input": "locations = [100, 200, 300, 400, 500], start = 1, finish = 3, fuel = 600",
        "output": "76"
      },
      {
        "input": "locations = [1,5,10,15,20,25,30], start = 0, finish = 6, fuel = 40",
        "output": "224"
      },
      {
        "input": "locations = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], start = 0, finish = 9, fuel = 150",
        "output": "892249801"
      },
      {
        "input": "locations = [10, 30, 50, 70, 90, 110, 130, 150, 170, 190, 210, 230, 250, 270, 290, 310, 330, 350, 370, 390, 410, 430, 450, 470, 490], start = 0, finish = 24, fuel = 1200",
        "output": "765380918"
      },
      {
        "input": "locations = [7, 15, 22, 30, 35, 40, 45], start = 1, finish = 4, fuel = 70",
        "output": "12736"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], start = 10, finish = 19, fuel = 150",
        "output": "290816"
      },
      {
        "input": "locations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], start = 0, finish = 9, fuel = 25",
        "output": "563971037"
      },
      {
        "input": "locations = [10, 30, 50, 70, 90, 110, 130, 150, 170, 190, 210, 230, 250, 270, 290, 310, 330, 350, 370, 390, 410, 430, 450, 470, 490], start = 0, finish = 24, fuel = 1500",
        "output": "191567701"
      },
      {
        "input": "locations = [8, 16, 24, 32, 40, 48, 56, 64, 72, 80], start = 0, finish = 9, fuel = 150",
        "output": "1469184"
      },
      {
        "input": "locations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], start = 1, finish = 13, fuel = 40",
        "output": "344143577"
      },
      {
        "input": "locations = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], start = 1, finish = 13, fuel = 100",
        "output": "569120129"
      },
      {
        "input": "locations = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], start = 9, finish = 10, fuel = 50",
        "output": "43"
      },
      {
        "input": "locations = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], start = 4, finish = 9, fuel = 1023",
        "output": "16"
      },
      {
        "input": "locations = [1, 5, 10, 15, 20, 25, 30], start = 0, finish = 6, fuel = 30",
        "output": "32"
      },
      {
        "input": "locations = [1,10,100,1000,10000,100000], start = 0, finish = 5, fuel = 200000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "locations = [100,200,300,400,500,600,700,800,900,1000], start = 0, finish = 9, fuel = 500",
        "output": "0"
      },
      {
        "input": "locations = [1, 10, 100, 1000, 10000, 100000, 1000000], start = 1, finish = 5, fuel = 1111099",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "locations = [1, 10, 100, 1000, 10000, 100000, 1000000], start = 0, finish = 6, fuel = 1111111",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], start = 5, finish = 9, fuel = 150",
        "output": "179664"
      },
      {
        "input": "locations = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000], start = 0, finish = 19, fuel = 9900",
        "output": "762710068"
      },
      {
        "input": "locations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], start = 29, finish = 0, fuel = 50",
        "output": "593376807"
      },
      {
        "input": "locations = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], start = 1, finish = 8, fuel = 15",
        "output": "64"
      },
      {
        "input": "locations = [5, 8, 12, 18, 25, 30, 35, 40, 45, 50, 55, 60], start = 11, finish = 0, fuel = 100",
        "output": "15490048"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110], start = 5, finish = 10, fuel = 150",
        "output": "500736"
      },
      {
        "input": "locations = [1000,1005,1010,1015,1020,1025,1030,1035,1040,1045,1050,1055,1060,1065,1070,1075,1080,1085,1090,1095,1100], start = 10, finish = 20, fuel = 600",
        "output": "512001622"
      },
      {
        "input": "locations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], start = 0, finish = 20, fuel = 300",
        "output": "652750206"
      },
      {
        "input": "locations = [100, 200, 300, 400, 500, 600, 700, 800], start = 1, finish = 7, fuel = 1500",
        "output": "116544"
      },
      {
        "input": "locations = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], start = 15, finish = 0, fuel = 100",
        "output": "802029339"
      },
      {
        "input": "locations = [10, 25, 40, 55, 70, 85, 100, 115, 130, 145], start = 0, finish = 9, fuel = 500",
        "output": "216449452"
      },
      {
        "input": "locations = [1, 5, 10, 20, 30, 40], start = 0, finish = 5, fuel = 60",
        "output": "208"
      },
      {
        "input": "locations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300], start = 0, finish = 29, fuel = 300",
        "output": "268435456"
      },
      {
        "input": "locations = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155], start = 7, finish = 15, fuel = 300",
        "output": "343225957"
      },
      {
        "input": "locations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], start = 0, finish = 20, fuel = 190",
        "output": "0"
      },
      {
        "input": "locations = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288], start = 0, finish = 19, fuel = 524288",
        "output": "262144"
      },
      {
        "input": "locations = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], start = 10, finish = 0, fuel = 150",
        "output": "759294305"
      },
      {
        "input": "locations = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210], start = 19, finish = 0, fuel = 210",
        "output": "262144"
      },
      {
        "input": "locations = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], start = 0, finish = 49, fuel = 2401",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "locations = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200], start = 0, finish = 39, fuel = 500",
        "output": "319204339"
      },
      {
        "input": "locations = [3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151], start = 0, finish = 19, fuel = 2097150",
        "output": "262144"
      },
      {
        "input": "locations = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], start = 0, finish = 10, fuel = 2000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "locations = [1,3,5,7,9,11,13,15,17,19], start = 4, finish = 8, fuel = 30",
        "output": "277680"
      },
      {
        "input": "locations = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140], start = 0, finish = 14, fuel = 500",
        "output": "6482820"
      },
      {
        "input": "locations = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150], start = 0, finish = 29, fuel = 150",
        "output": "268435456"
      },
      {
        "input": "locations = [1, 5, 10, 15, 20, 25], start = 0, finish = 5, fuel = 40",
        "output": "112"
      },
      {
        "input": "locations = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288], start = 0, finish = 19, fuel = 524287",
        "output": "262144"
      },
      {
        "input": "locations = [100, 200, 300, 400, 500, 600], start = 0, finish = 5, fuel = 1500",
        "output": "149696"
      },
      {
        "input": "locations = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], start = 7, finish = 14, fuel = 120",
        "output": "5760"
      },
      {
        "input": "locations = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], start = 0, finish = 9, fuel = 1500",
        "output": "183296"
      },
      {
        "input": "locations = [1, 5, 10, 20, 50, 100, 200, 500, 1000, 2000], start = 0, finish = 9, fuel = 3000",
        "output": "149308961"
      },
      {
        "input": "locations = [5, 15, 25, 35, 45, 55, 65], start = 0, finish = 6, fuel = 150",
        "output": "71872"
      },
      {
        "input": "locations = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], start = 9, finish = 0, fuel = 100",
        "output": "11616768"
      },
      {
        "input": "locations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], start = 0, finish = 19, fuel = 18",
        "output": "0"
      },
      {
        "input": "locations = [100, 200, 300, 400, 500, 600], start = 5, finish = 0, fuel = 1500",
        "output": "149696"
      },
      {
        "input": "locations = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60], start = 0, finish = 11, fuel = 100",
        "output": "9483264"
      },
      {
        "input": "locations = [1, 3, 5, 7, 9, 11, 13], start = 0, finish = 6, fuel = 20",
        "output": "1536"
      },
      {
        "input": "locations = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], start = 0, finish = 9, fuel = 100",
        "output": "256"
      },
      {
        "input": "locations = [5,10,15,20,25,30], start = 0, finish = 5, fuel = 50",
        "output": "592"
      },
      {
        "input": "locations = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], start = 0, finish = 9, fuel = 1800",
        "output": "1469184"
      },
      {
        "input": "locations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], start = 0, finish = 29, fuel = 150",
        "output": "996660885"
      },
      {
        "input": "locations = [5,15,25,35,45,55,65,75,85,95,105,115,125,135,145,155,165,175,185,195,205,215,225,235,245,255,265,275,285,295], start = 29, finish = 0, fuel = 1500",
        "output": "996660885"
      },
      {
        "input": "locations = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40], start = 10, finish = 0, fuel = 50",
        "output": "636086244"
      },
      {
        "input": "locations = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], start = 0, finish = 10, fuel = 2048",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "locations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], start = 0, finish = 14, fuel = 50",
        "output": "928900893"
      },
      {
        "input": "locations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], start = 0, finish = 19, fuel = 190",
        "output": "533148385"
      },
      {
        "input": "locations = [100,200,300,400,500,600,700,800,900], start = 0, finish = 8, fuel = 2000",
        "output": "32131968"
      }
    ]
  },
  {
    "id": 2472,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Two Pointers",
      "String",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given a string s and a positive integer k.\nSelect a set of non-overlapping substrings from the string s that satisfy the following conditions:\n\nThe length of each substring is at least k.\nEach substring is a palindrome.\n\nReturn the maximum number of substrings in an optimal selection.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nExample 1:\n\nInput: s = \"abaccdbbd\", k = 3\nOutput: 2\nExplanation: We can select the substrings underlined in s = \"abaccdbbd\". Both \"aba\" and \"dbbd\" are palindromes and have a length of at least k = 3.\nIt can be shown that we cannot find a selection with more than two valid substrings.\n\nExample 2:\n\nInput: s = \"adbcda\", k = 2\nOutput: 0\nExplanation: There is no palindrome substring of length at least 2 in the string.\n\n\u00a0\nConstraints:\n\n1 <= k <= s.length <= 2000\ns consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def maxPalindromes(self, s: str, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"racecar\", k = 2",
        "output": "1"
      },
      {
        "input": "s = \"mnoonm\", k = 2",
        "output": "1"
      },
      {
        "input": "s = \"zzzzzz\", k = 1",
        "output": "6"
      },
      {
        "input": "s = \"abcde\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"abcdeedcba\", k = 2",
        "output": "1"
      },
      {
        "input": "s = \"zz\", k = 1",
        "output": "2"
      },
      {
        "input": "s = \"adbcda\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"\", k = 1",
        "output": "0"
      },
      {
        "input": "s = \"abcde\", k = 1",
        "output": "5"
      },
      {
        "input": "s = \"aaaaa\", k = 2",
        "output": "2"
      },
      {
        "input": "s = \"racecar\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"abbaeaeabba\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"abbaabba\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"noonhighnoon\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"abacdfgdcaba\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"aaaa\", k = 2",
        "output": "2"
      },
      {
        "input": "s = \"a\", k = 1",
        "output": "1"
      },
      {
        "input": "s = \"abcdedcba\", k = 5",
        "output": "1"
      },
      {
        "input": "s = \"racecarannakayak\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"abcba\", k = 5",
        "output": "1"
      },
      {
        "input": "s = \"abaccdbbd\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"abbaeae\", k = 2",
        "output": "2"
      },
      {
        "input": "s = \"z\", k = 1",
        "output": "1"
      },
      {
        "input": "s = \"aaabaaaabaaaa\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"levellevellevel\", k = 5",
        "output": "3"
      },
      {
        "input": "s = \"abcabcabcabc\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"ababababa\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"abcbaabccba\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"level\", k = 5",
        "output": "1"
      },
      {
        "input": "s = \"xyxxyxyxyx\", k = 1",
        "output": "10"
      },
      {
        "input": "s = \"aabbaaabbbaaaa\", k = 2",
        "output": "6"
      },
      {
        "input": "s = \"ababababababab\", k = 2",
        "output": "4"
      },
      {
        "input": "s = \"rotorreferredder\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"popopopopopop\", k = 3",
        "output": "4"
      },
      {
        "input": "s = \"abaaaaba\", k = 4",
        "output": "1"
      },
      {
        "input": "s = \"xyxzyzyzyxzyx\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"madamimadam\", k = 2",
        "output": "3"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaa\", k = 10",
        "output": "1"
      },
      {
        "input": "s = \"abbaabbaabba\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"aabbccddeeff\", k = 2",
        "output": "6"
      },
      {
        "input": "s = \"rotor\", k = 5",
        "output": "1"
      },
      {
        "input": "s = \"abcddcbaabcddcba\", k = 6",
        "output": "2"
      },
      {
        "input": "s = \"palindromemordnilap\", k = 6",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeefffggghhhiii\", k = 4",
        "output": "0"
      },
      {
        "input": "s = \"xyxzyzyzxzyxzyx\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"aaaaaaaabaaaa\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"levelracecaraabba\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"racecarannakayak\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"abccbaabccba\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabc\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"abcdedcbaedcbba\", k = 5",
        "output": "1"
      },
      {
        "input": "s = \"noonnoonnoon\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"abbaaccddccaaabbbcccdd\", k = 3",
        "output": "5"
      },
      {
        "input": "s = \"abcbabcba\", k = 5",
        "output": "1"
      },
      {
        "input": "s = \"aabbabbaaabbabba\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"abbaaccddccbaabba\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"abbaacccbaaabbcc\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"civiccivic\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"aaabaaaacaaaaaa\", k = 3",
        "output": "4"
      },
      {
        "input": "s = \"abracadabra\", k = 3",
        "output": "1"
      },
      {
        "input": "s = \"abcdcbaabcdcba\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"xyzyzyzyzyzyzyzy\", k = 2",
        "output": "5"
      },
      {
        "input": "s = \"madamracecarlevel\", k = 5",
        "output": "3"
      },
      {
        "input": "s = \"xyxzyzyzyzxzyzyx\", k = 3",
        "output": "5"
      },
      {
        "input": "s = \"bananaabacaxxx\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"noonnoonnoon\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"abcdefghij\", k = 3",
        "output": "0"
      },
      {
        "input": "s = \"zzzzyyyyxxxx\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"aaaabbbbccccdddd\", k = 4",
        "output": "4"
      },
      {
        "input": "s = \"civicracecardeified\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"aabbccddeeffgg\", k = 2",
        "output": "7"
      },
      {
        "input": "s = \"madamimadam\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"aaaabaaaabaaaaabaaabaaa\", k = 2",
        "output": "9"
      },
      {
        "input": "s = \"racecar\", k = 6",
        "output": "1"
      },
      {
        "input": "s = \"xyxxyxyxyxyx\", k = 2",
        "output": "4"
      },
      {
        "input": "s = \"abcbabcba\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"abcabcabcabc\", k = 1",
        "output": "12"
      },
      {
        "input": "s = \"abcdefgfedcba\", k = 7",
        "output": "1"
      },
      {
        "input": "s = \"mamadadadadammadam\", k = 3",
        "output": "5"
      },
      {
        "input": "s = \"madamimadam\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"babaddabba\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"aabbabaaaabbabaab\", k = 3",
        "output": "4"
      },
      {
        "input": "s = \"babbbabbbab\", k = 3",
        "output": "3"
      },
      {
        "input": "s = \"aabaaaabbbaaa\", k = 3",
        "output": "4"
      },
      {
        "input": "s = \"aabbaabbaaabbbaabbaab\", k = 3",
        "output": "4"
      },
      {
        "input": "s = \"abccbaabc\", k = 4",
        "output": "1"
      },
      {
        "input": "s = \"abracadabra\", k = 5",
        "output": "0"
      },
      {
        "input": "s = \"abbaabbaabba\", k = 2",
        "output": "5"
      },
      {
        "input": "s = \"aaaaaabbbbbbaaaaaabbbbb\", k = 5",
        "output": "4"
      },
      {
        "input": "s = \"abcbaabababaabcba\", k = 3",
        "output": "4"
      },
      {
        "input": "s = \"abcabcabc\", k = 2",
        "output": "0"
      },
      {
        "input": "s = \"abccbaabcabcabcabcba\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"abccbaabcba\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"mississippi\", k = 3",
        "output": "2"
      },
      {
        "input": "s = \"abbaabbabbaabb\", k = 2",
        "output": "6"
      },
      {
        "input": "s = \"abcdefedcba\", k = 5",
        "output": "1"
      },
      {
        "input": "s = \"abcdefghihgfedcba\", k = 7",
        "output": "1"
      },
      {
        "input": "s = \"noonmoonnoonmoon\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"abcdefedcbafedcbabcdef\", k = 5",
        "output": "2"
      },
      {
        "input": "s = \"abbaabba\", k = 2",
        "output": "3"
      },
      {
        "input": "s = \"deeeeinedede\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"abcdedcba\", k = 4",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeeffgg\", k = 2",
        "output": "7"
      },
      {
        "input": "s = \"abcdedcbaabacdfgdcaba\", k = 5",
        "output": "1"
      },
      {
        "input": "s = \"zzzzyyyxxxwwvvuuttssrrqqppoonnmmlkkjjiihhggffeeddccbbaaa\", k = 4",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 2",
        "output": "26"
      },
      {
        "input": "s = \"aaaaabbbaaaaa\", k = 4",
        "output": "3"
      },
      {
        "input": "s = \"abacabadabacaba\", k = 4",
        "output": "2"
      },
      {
        "input": "s = \"madamimadam\", k = 4",
        "output": "2"
      }
    ]
  },
  {
    "id": 3113,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Array",
      "Binary Search",
      "Monotonic Stack"
    ],
    "problemDescription": "You are given an array of positive integers nums.\nReturn the number of subarrays of nums, where the first and the last elements of the subarray are equal to the largest element in the subarray.\n\u00a0\nExample 1:\n\nInput: nums = [1,4,3,3,2]\nOutput: 6\nExplanation:\nThere are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:\n\nsubarray [1,4,3,3,2], with its largest element 1. The first element is 1 and the last element is also 1.\nsubarray [1,4,3,3,2], with its largest element 4. The first element is 4 and the last element is also 4.\nsubarray [1,4,3,3,2], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [1,4,3,3,2], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [1,4,3,3,2], with its largest element 2. The first element is 2 and the last element is also 2.\nsubarray [1,4,3,3,2], with its largest element 3. The first element is 3 and the last element is also 3.\n\nHence, we return 6.\n\nExample 2:\n\nInput: nums = [3,3,3]\nOutput: 6\nExplanation:\nThere are 6 subarrays which have the first and the last elements equal to the largest element of the subarray:\n\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\nsubarray [3,3,3], with its largest element 3. The first element is 3 and the last element is also 3.\n\nHence, we return 6.\n\nExample 3:\n\nInput: nums = [1]\nOutput: 1\nExplanation:\nThere is a single subarray of nums which is [1], with its largest element 1. The first element is 1 and the last element is also 1.\nHence, we return 1.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def numberOfSubarrays(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,4,5,4,5]",
        "output": "8"
      },
      {
        "input": "nums = [2,1,2,1,2]",
        "output": "8"
      },
      {
        "input": "nums = [1,3,2,3,1,3]",
        "output": "9"
      },
      {
        "input": "nums = [1,2,2,1]",
        "output": "5"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7]",
        "output": "55"
      },
      {
        "input": "nums = [5,1,5,2,5,5]",
        "output": "12"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [2,1,2]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [10,20,10,30,20,10]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "55"
      },
      {
        "input": "nums = [1,2,2,2,1]",
        "output": "8"
      },
      {
        "input": "nums = [2,1,2,3,2,1,2]",
        "output": "9"
      },
      {
        "input": "nums = [1,4,3,3,2]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "nums = [1,3,5,7,9,11,9,7,5,3,1]",
        "output": "11"
      },
      {
        "input": "nums = [3,3,3]",
        "output": "6"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "5"
      },
      {
        "input": "nums = [2,2,1,2,2]",
        "output": "11"
      },
      {
        "input": "nums = [2,2,1,1,2,2,1,1,2,2]",
        "output": "27"
      },
      {
        "input": "nums = [1,3,2,3,1,3,1]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,2,1]",
        "output": "5"
      },
      {
        "input": "nums = [7,1,5,3,6,4,7]",
        "output": "8"
      },
      {
        "input": "nums = [10,10,10,10,10]",
        "output": "15"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "496"
      },
      {
        "input": "nums = [5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5]",
        "output": "84"
      },
      {
        "input": "nums = [15, 10, 15, 5, 15, 20, 15, 5, 15, 10, 15, 25, 15, 5, 15, 10, 15]",
        "output": "26"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "37"
      },
      {
        "input": "nums = [8,5,8,9,8,5,8,9,8]",
        "output": "12"
      },
      {
        "input": "nums = [1,10,1,10,1,10,1,10,1,10,1]",
        "output": "21"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,4,4,3,3,2,2,1,1]",
        "output": "27"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "100"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,2,3,2,1]",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "19"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1]",
        "output": "21"
      },
      {
        "input": "nums = [2,4,6,8,10,8,6,4,2]",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,2,1,1,1,1,3,1,1,1,1,2,1,1,1,1,1]",
        "output": "48"
      },
      {
        "input": "nums = [2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]",
        "output": "135"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]",
        "output": "210"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5]",
        "output": "30"
      },
      {
        "input": "nums = [7,8,9,9,8,7,9,8,7]",
        "output": "12"
      },
      {
        "input": "nums = [1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1]",
        "output": "40"
      },
      {
        "input": "nums = [3,5,2,5,3,3,5,2,3,5,5,5,5,5,3,2,5,3,5,5,3,2,3,5,3,5,5,3,2,3]",
        "output": "124"
      },
      {
        "input": "nums = [2,2,3,3,3,3,3,2,2,2]",
        "output": "24"
      },
      {
        "input": "nums = [1,2,3,2,1,3,2,1,3,2,1,3,2,1]",
        "output": "20"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80]",
        "output": "21"
      },
      {
        "input": "nums = [2,1,4,4,4,1,4,2,4,1]",
        "output": "20"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,1,1,1]",
        "output": "60"
      },
      {
        "input": "nums = [9,10,11,10,10,9,11,10,9]",
        "output": "11"
      },
      {
        "input": "nums = [5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5]",
        "output": "26"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "30"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "39"
      },
      {
        "input": "nums = [1,2,1,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1]",
        "output": "21"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2]",
        "output": "13"
      },
      {
        "input": "nums = [5,6,5,7,5,6,5,8,5,9,5,10,5,11,5,12,5,13,5,14,5]",
        "output": "21"
      },
      {
        "input": "nums = [1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5]",
        "output": "97"
      },
      {
        "input": "nums = [7,2,7,3,7,7,7,3,7,2,7]",
        "output": "32"
      },
      {
        "input": "nums = [100,90,80,70,60,70,80,90,100]",
        "output": "13"
      },
      {
        "input": "nums = [5,5,1,5,5,2,5,5,3,5,5,4,5,5,5]",
        "output": "70"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "55"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "27"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1]",
        "output": "57"
      },
      {
        "input": "nums = [100, 200, 100, 300, 200, 100, 400, 300, 200, 100, 500, 400, 300, 200, 100]",
        "output": "15"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]",
        "output": "136"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,90,80,70,60,50,40,30,20,10,100,90,80,70,60,50,40,30,20,10]",
        "output": "30"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "33"
      },
      {
        "input": "nums = [1,2,3,4,3,2,1,4,3,2,1,4,3,2,1]",
        "output": "18"
      },
      {
        "input": "nums = [7,5,7,8,7,5,7,8,7]",
        "output": "12"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "210"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5]",
        "output": "63"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 8, 6, 4, 2, 12, 2, 4, 6, 8, 10, 8, 6, 4, 2, 12]",
        "output": "21"
      },
      {
        "input": "nums = [1,2,3,4,5,6,5,4,3,2,1]",
        "output": "11"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9]",
        "output": "58"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "33"
      },
      {
        "input": "nums = [8, 1, 8, 9, 8, 9, 8, 10, 8, 9, 8, 1]",
        "output": "14"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "47"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "77"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10,20,30,40,50,60,70,80,90,100]",
        "output": "28"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "58"
      },
      {
        "input": "nums = [1,2,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1]",
        "output": "27"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "33"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,3,3,3,2,2,1]",
        "output": "30"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "21"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "43"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10]",
        "output": "42"
      },
      {
        "input": "nums = [6,1,6,6,6,1,6,1,6]",
        "output": "24"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10]",
        "output": "39"
      },
      {
        "input": "nums = [2,3,2,2,3,2,3,2,2,3,2,3,2,2,3,2,3,2,2,3,2,3,2,2,3,2,3,2,2,3,2]",
        "output": "103"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]",
        "output": "21"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9]",
        "output": "27"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "30"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "210"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "528"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "33"
      },
      {
        "input": "nums = [1,2,1,3,1,2,1,4,1,2,1,3,1,2,1]",
        "output": "15"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7]",
        "output": "36"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9,2,6,5,3,5,9,2,6,5,3,5,9,2,6,5,3,5,9]",
        "output": "44"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9]",
        "output": "25"
      },
      {
        "input": "nums = [1,2,1,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1]",
        "output": "36"
      },
      {
        "input": "nums = [7,8,8,7,9,8,7,8,7]",
        "output": "11"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10,10,20,30,40,50,60,70,80,90,100]",
        "output": "30"
      },
      {
        "input": "nums = [2,1,4,4,4,1,2]",
        "output": "10"
      },
      {
        "input": "nums = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]",
        "output": "465"
      },
      {
        "input": "nums = [1,2,2,1,2,1,1,1,2,2,2,1,2,1,2,2,2,2,2,1]",
        "output": "89"
      },
      {
        "input": "nums = [100,200,300,400,500,400,300,200,100,200,300,400,500,400,300,200,100]",
        "output": "21"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "120"
      },
      {
        "input": "nums = [1,9,2,8,3,7,4,6,5,5,6,4,7,3,8,2,9,1]",
        "output": "23"
      },
      {
        "input": "nums = [3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]",
        "output": "50"
      }
    ]
  },
  {
    "id": 862,
    "difficulty": "Hard",
    "tags": [
      "Queue",
      "Array",
      "Binary Search",
      "Prefix Sum",
      "Sliding Window",
      "Monotonic Queue",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.\nA subarray is a contiguous part of an array.\n\u00a0\nExample 1:\nInput: nums = [1], k = 1\nOutput: 1\nExample 2:\nInput: nums = [1,2], k = 4\nOutput: -1\nExample 3:\nInput: nums = [2,-1,2], k = 3\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-105 <= nums[i] <= 105\n1 <= k <= 109\n\n",
    "starterCode": "class Solution:\n    def shortestSubarray(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [-1,2,-3,4,-5], k = 3",
        "output": "1"
      },
      {
        "input": "nums = [-1,2], k = 2",
        "output": "1"
      },
      {
        "input": "nums = [2,-1,2], k = 3",
        "output": "3"
      },
      {
        "input": "nums = [2,1,5,1,3,2], k = 7",
        "output": "3"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5], k = 3",
        "output": "-1"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 25",
        "output": "5"
      },
      {
        "input": "nums = [2, -2, 2, -4, 3, -1, 2, -1, 2, -4, 3, -1], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [5,4,3,2,1], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [5,1,3,5,10,7,4,9,2,8], k = 15",
        "output": "2"
      },
      {
        "input": "nums = [-1,2,-3,4,-5,6,-7,8,-9,10], k = 15",
        "output": "-1"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 16",
        "output": "-1"
      },
      {
        "input": "nums = [48,99,37,4,-31], k = 140",
        "output": "2"
      },
      {
        "input": "nums = [10,20,30,40,50], k = 100",
        "output": "3"
      },
      {
        "input": "nums = [8], k = 8",
        "output": "1"
      },
      {
        "input": "nums = [8,2,4,-6,7,-4,3,5], k = 10",
        "output": "2"
      },
      {
        "input": "nums = [1,2], k = 4",
        "output": "-1"
      },
      {
        "input": "nums = [2, -2, 2, 2, -2, 2, 2, -2, 2, 2], k = 4",
        "output": "2"
      },
      {
        "input": "nums = [8], k = 10",
        "output": "-1"
      },
      {
        "input": "nums = [2,-1,2], k = 2",
        "output": "1"
      },
      {
        "input": "nums = [5], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 15",
        "output": "5"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 250",
        "output": "3"
      },
      {
        "input": "nums = [10, 5, 2, 7], k = 15",
        "output": "2"
      },
      {
        "input": "nums = [10, -2, 5, -1, 3, -1, -2, 4, 7, -5, 2], k = 10",
        "output": "1"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 55",
        "output": "10"
      },
      {
        "input": "nums = [100000, 100000, 100000, 100000, 100000, 100000], k = 500000",
        "output": "5"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = -15",
        "output": "1"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], k = 5",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, -1, 2, -1, 2, -1, 2, -1], k = 3",
        "output": "2"
      },
      {
        "input": "nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 150",
        "output": "10"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 550",
        "output": "10"
      },
      {
        "input": "nums = [8, 2, 4, -2, 3, 1, 5], k = 10",
        "output": "2"
      },
      {
        "input": "nums = [100, -25, 100, -25, 100, -25, 100, -25, 100, -25], k = 200",
        "output": "5"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 25",
        "output": "3"
      },
      {
        "input": "nums = [10,20,-30,40,50,-60,70,-80], k = 150",
        "output": "-1"
      },
      {
        "input": "nums = [-1, 2, 3, 4, -10, 5, 6], k = 10",
        "output": "2"
      },
      {
        "input": "nums = [10000, 20000, -30000, 40000, 50000, -60000, 70000, -80000], k = 100000",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 20",
        "output": "3"
      },
      {
        "input": "nums = [10, -1, -2, 3, 4, -5, 6, -7, 8, -9], k = 15",
        "output": "7"
      },
      {
        "input": "nums = [100000, -50000, 50000, -25000, 25000, -12500, 12500, 6250], k = 250000",
        "output": "-1"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], k = 1500",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 55",
        "output": "5"
      },
      {
        "input": "nums = [100000, -50000, 200000, -150000, 300000], k = 600000",
        "output": "-1"
      },
      {
        "input": "nums = [1, 0, 1, 1, 1, 0, 1, -1, 1, 1, 1], k = 4",
        "output": "5"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10], k = 90",
        "output": "2"
      },
      {
        "input": "nums = [100000, -100000, 100000, -100000, 100000], k = 100000",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 10",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 55",
        "output": "10"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], k = 55",
        "output": "10"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1], k = -15",
        "output": "1"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 100",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "10"
      },
      {
        "input": "nums = [8, 2, -4, 1, 6, -5, 4], k = 10",
        "output": "2"
      },
      {
        "input": "nums = [10, -10, 10, -10, 10], k = 20",
        "output": "-1"
      },
      {
        "input": "nums = [100000, -50000, 50000, -25000, 25000, -12500, 12500], k = 100000",
        "output": "1"
      },
      {
        "input": "nums = [5, -1, 5, -1, 5, -1, 5, -1, 5, -1], k = 15",
        "output": "7"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000], k = 4000000000",
        "output": "4"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 5",
        "output": "-1"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 500",
        "output": "8"
      },
      {
        "input": "nums = [100000,-99999,100000,-99999,100000], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [-1, -2, -3, 10, -5, 2, -1, 3], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [84, -37, 32, 40, 95], k = 167",
        "output": "3"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], k = 150",
        "output": "5"
      },
      {
        "input": "nums = [5, -1, 5, -1, 5, -1], k = 10",
        "output": "5"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], k = 1500",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 15",
        "output": "2"
      },
      {
        "input": "nums = [1,2,-3,4,-5,6,-7,8,-9,10], k = 7",
        "output": "1"
      },
      {
        "input": "nums = [-100, 150, -200, 250, -300, 350, -400, 450, -500, 550], k = 1500",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5], k = 9",
        "output": "2"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 100",
        "output": "6"
      },
      {
        "input": "nums = [3, -2, 5, -1, 2, -3, 1, 4], k = 7",
        "output": "5"
      },
      {
        "input": "nums = [8, 2, -5, 7, 11, -10, 15, 1], k = 15",
        "output": "1"
      },
      {
        "input": "nums = [3,4,5,1,2,7,8,9,10,1], k = 25",
        "output": "3"
      },
      {
        "input": "nums = [-10, 20, -30, 40, -50, 60, -70, 80, -90, 100], k = 100",
        "output": "1"
      },
      {
        "input": "nums = [8, 2, 4, -1, 0, 5, -3, 2], k = 16",
        "output": "6"
      },
      {
        "input": "nums = [5, 1, 3, 5, 2, 4, 6, 1, 7, 8], k = 20",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 15",
        "output": "2"
      },
      {
        "input": "nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10], k = 15",
        "output": "-1"
      },
      {
        "input": "nums = [3, -2, 5, -1, 4], k = 6",
        "output": "3"
      },
      {
        "input": "nums = [1,-1,2,-2,3,-3,4,-4,5,-5], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [10, 20, 30, -10, -20, -30, 40, 50, 60], k = 100",
        "output": "2"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 5",
        "output": "-1"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "10"
      },
      {
        "input": "nums = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [5, -2, 4, 6, -1, 3, -3, 2, 7, -8], k = 12",
        "output": "4"
      },
      {
        "input": "nums = [5, 1, -1, 5, 10, -10, 20, -20, 30, -30], k = 15",
        "output": "1"
      },
      {
        "input": "nums = [1, -1, 5, -2, 3], k = 3",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 75",
        "output": "6"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 50",
        "output": "3"
      },
      {
        "input": "nums = [10, 20, 30, -10, -20, -30, 40, 50, -40, -50, 60, 70], k = 100",
        "output": "2"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 5500",
        "output": "10"
      },
      {
        "input": "nums = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0], k = 10",
        "output": "5"
      },
      {
        "input": "nums = [5, 2, 3, -2, 4, 5, 1, -1, 2, -3, 6, 7, 8, -4, 5, 6], k = 20",
        "output": "3"
      },
      {
        "input": "nums = [100, -25, 25, -25, 25, -25, 25, -25, 25], k = 50",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 120",
        "output": "15"
      },
      {
        "input": "nums = [2, -2, 2, -2, 2, -2, 2, -2, 2, -2], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [8,2,-3,7,2,-4,6,-8], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [1,-1,1,-1,1,-1,1,-1,1,-1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10], k = 5",
        "output": "1"
      },
      {
        "input": "nums = [1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], k = 1",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 90",
        "output": "8"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 100",
        "output": "-1"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], k = 10",
        "output": "-1"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 25",
        "output": "5"
      },
      {
        "input": "nums = [5, -2, 3, 8, -4, 7], k = 10",
        "output": "2"
      },
      {
        "input": "nums = [10, -1, 20, -2, 30, -3, 40, -4, 50, -5], k = 100",
        "output": "5"
      },
      {
        "input": "nums = [-1, 1, 1, -1, 1, 1, 1, -1, 1], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [100000], k = 100000",
        "output": "1"
      },
      {
        "input": "nums = [10, -20, 30, -40, 50, -60, 70, -80, 90, -100], k = 50",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 100",
        "output": "6"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 45",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 55",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], k = 15",
        "output": "5"
      },
      {
        "input": "nums = [5, -2, 5, -2, 5, -2, 5, -2, 5, -2], k = 10",
        "output": "5"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5], k = 1",
        "output": "-1"
      },
      {
        "input": "nums = [-100000, -100000, -100000, -100000, -100000], k = 100000",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 3, -6, 4, 5, -3, 2, 1, 0, -1, 2, 3, -5, 6, 7], k = 15",
        "output": "9"
      },
      {
        "input": "nums = [8, 2, -3, 4, 6, -5, 2, 7], k = 15",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 100",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 100",
        "output": "-1"
      },
      {
        "input": "nums = [5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5], k = 20",
        "output": "5"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 550",
        "output": "10"
      }
    ]
  },
  {
    "id": 135,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array"
    ],
    "problemDescription": "There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:\n\nEach child must have at least one candy.\nChildren with a higher rating get more candies than their neighbors.\n\nReturn the minimum number of candies you need to have to distribute the candies to the children.\n\u00a0\nExample 1:\n\nInput: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n\nExample 2:\n\nInput: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n\n\u00a0\nConstraints:\n\nn == ratings.length\n1 <= n <= 2 * 104\n0 <= ratings[i] <= 2 * 104\n\n",
    "starterCode": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "ratings = [50,40,30,20,10]",
        "output": "15"
      },
      {
        "input": "ratings = [1]",
        "output": "1"
      },
      {
        "input": "ratings = [1,3,4,5,2]",
        "output": "11"
      },
      {
        "input": "ratings = [1,1,1,1]",
        "output": "4"
      },
      {
        "input": "ratings = [1,2,3,2,1,2,3,4,3,2,1]",
        "output": "24"
      },
      {
        "input": "ratings = [5,4,3,2,1]",
        "output": "15"
      },
      {
        "input": "ratings = [10,20,30,40,50,45,35,25,15,5]",
        "output": "31"
      },
      {
        "input": "ratings = [10,9,8,7,6,5,4,3,2,1,0]",
        "output": "66"
      },
      {
        "input": "ratings = [1,3,2,2,3,1]",
        "output": "8"
      },
      {
        "input": "ratings = [1,3,4,3,2]",
        "output": "9"
      },
      {
        "input": "ratings = [1,6,10,8,7,3,2]",
        "output": "18"
      },
      {
        "input": "ratings = [10,20,30,40,50]",
        "output": "15"
      },
      {
        "input": "ratings = [1,3,2,1,2,3,4,3,2,1]",
        "output": "22"
      },
      {
        "input": "ratings = [1,1,1,1,1]",
        "output": "5"
      },
      {
        "input": "ratings = [10,9,8,7,6,5,4,3,2,1]",
        "output": "55"
      },
      {
        "input": "ratings = [1,3,2,4,5,6]",
        "output": "13"
      },
      {
        "input": "ratings = [1,2,2]",
        "output": "4"
      },
      {
        "input": "ratings = [1,2,3,4,5,6,7,8,9,10]",
        "output": "55"
      },
      {
        "input": "ratings = [1,3,2,2,1]",
        "output": "7"
      },
      {
        "input": "ratings = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "100"
      },
      {
        "input": "ratings = [10,20,15,10,15,20,10]",
        "output": "13"
      },
      {
        "input": "ratings = [1,2,3,4,5]",
        "output": "15"
      },
      {
        "input": "ratings = [1,0,2]",
        "output": "5"
      },
      {
        "input": "ratings = [1, 2, 3, 4, 5, 4, 3, 2, 1, 0]",
        "output": "31"
      },
      {
        "input": "ratings = [1,2,2,3,3,4,5,5,6]",
        "output": "15"
      },
      {
        "input": "ratings = [1,6,10,8,7,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "123"
      },
      {
        "input": "ratings = [1, 2, 2, 2, 1, 2, 3, 2, 1]",
        "output": "15"
      },
      {
        "input": "ratings = [1,3,2,4,3,5,4,6,5,7,6]",
        "output": "16"
      },
      {
        "input": "ratings = [1,2,3,4,5,6,7,8,9,10,11]",
        "output": "66"
      },
      {
        "input": "ratings = [10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10]",
        "output": "109"
      },
      {
        "input": "ratings = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "19"
      },
      {
        "input": "ratings = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "55"
      },
      {
        "input": "ratings = [1,2,2,3,2,2,3,2,2,1,2,2,3,2,2,1,2,2]",
        "output": "26"
      },
      {
        "input": "ratings = [10, 10, 10, 10, 10]",
        "output": "5"
      },
      {
        "input": "ratings = [1,2,1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,8]",
        "output": "31"
      },
      {
        "input": "ratings = [1,2,3,2,1,2,3,4,5,4,3,2,1,2,3,4,3,2,1]",
        "output": "48"
      },
      {
        "input": "ratings = [1, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]",
        "output": "84"
      },
      {
        "input": "ratings = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "15"
      },
      {
        "input": "ratings = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "259"
      },
      {
        "input": "ratings = [1,2,2,2,1]",
        "output": "7"
      },
      {
        "input": "ratings = [1,3,2,2,3,1,2,3,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "47"
      },
      {
        "input": "ratings = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "33"
      },
      {
        "input": "ratings = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10]",
        "output": "28"
      },
      {
        "input": "ratings = [1, 3, 2, 2, 3, 1, 2, 3, 4, 3, 2, 1]",
        "output": "23"
      },
      {
        "input": "ratings = [1,2,3,4,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "124"
      },
      {
        "input": "ratings = [1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "ratings = [1,2,3,4,5,5,4,3,2,1,1,2,3,4,5]",
        "output": "45"
      },
      {
        "input": "ratings = [5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5]",
        "output": "60"
      },
      {
        "input": "ratings = [1, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]",
        "output": "57"
      },
      {
        "input": "ratings = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "100"
      },
      {
        "input": "ratings = [3,3,3,3,3,2,1,1,2,3,3,3,3,3,4,5,4,3,2,1]",
        "output": "37"
      },
      {
        "input": "ratings = [10,20,10,50,20,30,10]",
        "output": "10"
      },
      {
        "input": "ratings = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10]",
        "output": "154"
      },
      {
        "input": "ratings = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "210"
      },
      {
        "input": "ratings = [5, 3, 8, 6, 7, 2, 4, 1]",
        "output": "12"
      },
      {
        "input": "ratings = [1,2,3,4,3,2,3,4,3,2,3,4,3,2,3,4,3,2,3,4,3,2,3,4,3,2,3,4,3,2,3,4]",
        "output": "66"
      },
      {
        "input": "ratings = [1,2,2,3,3,3,2,1]",
        "output": "13"
      },
      {
        "input": "ratings = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "20"
      },
      {
        "input": "ratings = [20,19,20,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "193"
      },
      {
        "input": "ratings = [10,9,8,7,6,5,6,7,8,9,10]",
        "output": "41"
      },
      {
        "input": "ratings = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "110"
      },
      {
        "input": "ratings = [1, 2, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 4, 3]",
        "output": "90"
      },
      {
        "input": "ratings = [5, 2, 3, 1, 4, 6, 1]",
        "output": "12"
      },
      {
        "input": "ratings = [10,9,8,7,6,5,4,3,2,1,2,3,4,5]",
        "output": "69"
      },
      {
        "input": "ratings = [1,2,2,3,3,4,4,3,2,1,1,2,3,3,4,4]",
        "output": "29"
      },
      {
        "input": "ratings = [3,3,3,2,1,2,3,3,3]",
        "output": "15"
      },
      {
        "input": "ratings = [1,2,3,4,3,2,3,4,5,6,7]",
        "output": "33"
      },
      {
        "input": "ratings = [5,3,8,6,7,2,4,1]",
        "output": "12"
      },
      {
        "input": "ratings = [1,3,2,2,3,1,2,3,4,5,6,5,4,3,2,1]",
        "output": "43"
      },
      {
        "input": "ratings = [1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1]",
        "output": "46"
      },
      {
        "input": "ratings = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "210"
      },
      {
        "input": "ratings = [3,2,1,4,3,5,4,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "66"
      },
      {
        "input": "ratings = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14]",
        "output": "22"
      },
      {
        "input": "ratings = [1,2,2,3,3,3,2,1,2,3,4,4,3,2,1]",
        "output": "32"
      },
      {
        "input": "ratings = [5,4,3,2,1,2,3,4,5]",
        "output": "29"
      },
      {
        "input": "ratings = [1,2,2,3,4,5,5,4,3,2,1]",
        "output": "28"
      },
      {
        "input": "ratings = [1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "49"
      },
      {
        "input": "ratings = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "109"
      },
      {
        "input": "ratings = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "225"
      },
      {
        "input": "ratings = [1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "9"
      },
      {
        "input": "ratings = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2]",
        "output": "21"
      },
      {
        "input": "ratings = [7,3,5,4,6,5,4,3,5,6,7]",
        "output": "25"
      },
      {
        "input": "ratings = [1,3,2,2,3,1,4,3,2,1,2,3,4,5,6,7,8,9,10]",
        "output": "72"
      },
      {
        "input": "ratings = [5,3,8,6,7,9,2]",
        "output": "12"
      },
      {
        "input": "ratings = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "400"
      },
      {
        "input": "ratings = [1, 2, 2, 2, 3, 4, 4, 3, 2, 1]",
        "output": "20"
      },
      {
        "input": "ratings = [1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,1]",
        "output": "38"
      },
      {
        "input": "ratings = [10,20,15,10,5,10,20,30,25,20,15,10,5]",
        "output": "37"
      },
      {
        "input": "ratings = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11,10]",
        "output": "28"
      },
      {
        "input": "ratings = [1,2,3,4,3,2,3,4,5,6,5,4,5,6,7,8,7,6,7,8,9]",
        "output": "56"
      },
      {
        "input": "ratings = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3]",
        "output": "38"
      },
      {
        "input": "ratings = [1,2,3,4,5,6,5,4,3,2,1]",
        "output": "36"
      },
      {
        "input": "ratings = [3, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]",
        "output": "41"
      },
      {
        "input": "ratings = [1,2,2,3,4,5,6,7,8,9,10,10,10,10,10,9,8,7,6,5,4,3,2,1]",
        "output": "106"
      },
      {
        "input": "ratings = [1,2,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4]",
        "output": "34"
      },
      {
        "input": "ratings = [1,2,2,3,3,3,4,4,5,5,5,5]",
        "output": "16"
      },
      {
        "input": "ratings = [1,3,2,3,1,5,2,4,1]",
        "output": "13"
      },
      {
        "input": "ratings = [2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1]",
        "output": "21"
      },
      {
        "input": "ratings = [5,3,4,2,1,6,7,8,9,1]",
        "output": "24"
      },
      {
        "input": "ratings = [1,10,2,9,3,8,4,7,5,6]",
        "output": "15"
      },
      {
        "input": "ratings = [3,3,3,3,3,3,3,3,3,3]",
        "output": "10"
      },
      {
        "input": "ratings = [1,2,3,4,5,6,7,8,9,10,1]",
        "output": "56"
      },
      {
        "input": "ratings = [1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1]",
        "output": "60"
      },
      {
        "input": "ratings = [1,1,2,2,3,3,4,4,5,5,4,4,3,3,2,2,1,1]",
        "output": "26"
      },
      {
        "input": "ratings = [1,2,3,2,1,2,3,4,3,2,1,2,3]",
        "output": "29"
      },
      {
        "input": "ratings = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "29"
      },
      {
        "input": "ratings = [5,3,1,2,5,4,3,2,1]",
        "output": "23"
      },
      {
        "input": "ratings = [1,2,3,2,1,2,3,4,3,2,1,2,3,4,5,4,3,2,1]",
        "output": "48"
      },
      {
        "input": "ratings = [1,2,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "207"
      },
      {
        "input": "ratings = [3,2,1,4,5,6,5,4,3,2,1]",
        "output": "32"
      },
      {
        "input": "ratings = [1,2,3,4,5,4,3,2,1]",
        "output": "25"
      },
      {
        "input": "ratings = [1,2,2,2,2,2,2,2,2,1]",
        "output": "12"
      }
    ]
  },
  {
    "id": 972,
    "difficulty": "Hard",
    "tags": [
      "Math",
      "String"
    ],
    "problemDescription": "Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.\nA rational number can be represented using up to three parts: , , and a . The number will be represented in one of the following three ways:\n\n\n\nFor example, 12, 0, and 123.\n\n\n<.>\n\nFor example, 0.5, 1., 2.12, and 123.0001.\n\n\n<.><(><)>\n\nFor example, 0.1(6), 1.(9), 123.00(1212).\n\n\n\nThe repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:\n\n1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66).\n\n\u00a0\nExample 1:\n\nInput: s = \"0.(52)\", t = \"0.5(25)\"\nOutput: true\nExplanation: Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number.\n\nExample 2:\n\nInput: s = \"0.1666(6)\", t = \"0.166(66)\"\nOutput: true\n\nExample 3:\n\nInput: s = \"0.9(9)\", t = \"1.\"\nOutput: true\nExplanation: \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.]\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\".\n\n\u00a0\nConstraints:\n\nEach part consists only of digits.\nThe  does not have leading zeros (except for the zero itself).\n1 <= .length <= 4\n0 <= .length <= 4\n1 <= .length <= 4\n\n",
    "starterCode": "class Solution:\n    def isRationalEqual(self, s: str, t: str) -> bool:\n        ",
    "testCases": [
      {
        "input": "s = \"0.123\", t = \"0.123\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(9)\", t = \"1\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0(0)\", t = \"0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.9(99)\", t = \"1.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.00(1)\", t = \"0.01\"",
        "output": "False"
      },
      {
        "input": "s = \"0.\", t = \"0.(0)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(52)\", t = \"0.5(25)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.5\", t = \"0.5\"",
        "output": "True"
      },
      {
        "input": "s = \"1.0(0)\", t = \"1.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.1666(6)\", t = \"0.166(66)\"",
        "output": "True"
      },
      {
        "input": "s = \"123.\", t = \"123\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(123)\", t = \"0.123123\"",
        "output": "False"
      },
      {
        "input": "s = \"0.5\", t = \"0.50000\"",
        "output": "True"
      },
      {
        "input": "s = \"123.456\", t = \"123.456(0)\"",
        "output": "True"
      },
      {
        "input": "s = \"3.(14)\", t = \"3.141414\"",
        "output": "False"
      },
      {
        "input": "s = \"0.\", t = \"0.0(0)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.1(1)\", t = \"0.1111\"",
        "output": "False"
      },
      {
        "input": "s = \"3.14159\", t = \"3.14159\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0(1)\", t = \"0.0101\"",
        "output": "False"
      },
      {
        "input": "s = \"0.9(9)\", t = \"1.\"",
        "output": "True"
      },
      {
        "input": "s = \"2.5(0)\", t = \"2.5\"",
        "output": "True"
      },
      {
        "input": "s = \"1.\", t = \"1.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(1)\", t = \"0.1111(1)\"",
        "output": "True"
      },
      {
        "input": "s = \"123.0001\", t = \"123.0(001)\"",
        "output": "False"
      },
      {
        "input": "s = \"0.1(9)\", t = \"0.2\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0(5)\", t = \"0.050505\"",
        "output": "False"
      },
      {
        "input": "s = \"0.(123)\", t = \"0.123(123)\"",
        "output": "True"
      },
      {
        "input": "s = \"1(0)\", t = \"1.0\"",
        "output": "True"
      },
      {
        "input": "s = \"3.(3)\", t = \"3.333333(3)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(999)\", t = \"1\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(0)\", t = \"0.000000000000000000000000000000000000000000000000000000000000000000000\"",
        "output": "True"
      },
      {
        "input": "s = \"0.3333(3)\", t = \"1/3\"",
        "output": "Error: could not convert string to float: '1/3'"
      },
      {
        "input": "s = \"0.(111)\", t = \"0.111111111111111\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(111)\", t = \"0.111(111)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(123456789)\", t = \"0.123456789(123456789)\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"5.0(00)\", t = \"5.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(12)\", t = \"0.121212121212\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(1)\", t = \"0.11111111111111111111\"",
        "output": "True"
      },
      {
        "input": "s = \"999.(9)\", t = \"1000\"",
        "output": "True"
      },
      {
        "input": "s = \"3.14159(26)\", t = \"3.1415926(26)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.00001(0)\", t = \"0.00001\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0(0001)\", t = \"0.0001(0001)\"",
        "output": "False"
      },
      {
        "input": "s = \"0.0(0)\", t = \"0.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.1(234)\", t = \"0.1234234\"",
        "output": "False"
      },
      {
        "input": "s = \"999999.(9)\", t = \"1000000.\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0001(00001)\", t = \"0.000100001(00001)\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.(012)\", t = \"0.012012012\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(0123456789)\", t = \"0.0123456789(0123456789)\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"3.141592653589(793238462643)\", t = \"3.141592653589793238462643793238462643\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.0(9)\", t = \"0.1\"",
        "output": "True"
      },
      {
        "input": "s = \"4.5(00)\", t = \"4.5\"",
        "output": "True"
      },
      {
        "input": "s = \"999.999(9)\", t = \"1000.0\"",
        "output": "True"
      },
      {
        "input": "s = \"123.123(123)\", t = \"123.123123123\"",
        "output": "True"
      },
      {
        "input": "s = \"2.345(678)\", t = \"2.345678678\"",
        "output": "True"
      },
      {
        "input": "s = \"2.5(9)\", t = \"2.6\"",
        "output": "True"
      },
      {
        "input": "s = \"123456789.999(9)\", t = \"123456790.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(1)\", t = \"0.1111111111111111\"",
        "output": "True"
      },
      {
        "input": "s = \"0.123456(789)\", t = \"0.123456789789\"",
        "output": "True"
      },
      {
        "input": "s = \"0.000(999)\", t = \"0.001\"",
        "output": "True"
      },
      {
        "input": "s = \"123.4567(8901)\", t = \"123.45678901(8901)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(001)\", t = \"0.001001\"",
        "output": "False"
      },
      {
        "input": "s = \"0.1(01)\", t = \"0.101(01)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.00001(0)\", t = \"0.00001(00)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.111(1)\", t = \"0.1111(1)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0(123)\", t = \"0.0123123123\"",
        "output": "True"
      },
      {
        "input": "s = \"0.1(2)\", t = \"0.121212\"",
        "output": "False"
      },
      {
        "input": "s = \"0.123(456)\", t = \"0.123456456456\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(1234)\", t = \"0.123412341234\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(01)\", t = \"0.010101\"",
        "output": "False"
      },
      {
        "input": "s = \"12.(34)\", t = \"12.3434(34)\"",
        "output": "True"
      },
      {
        "input": "s = \"999.999(9)\", t = \"1000\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(111)\", t = \"0.1111(111)\"",
        "output": "True"
      },
      {
        "input": "s = \"1.0(0)\", t = \"1\"",
        "output": "True"
      },
      {
        "input": "s = \"100.(001)\", t = \"100.001001001\"",
        "output": "True"
      },
      {
        "input": "s = \"0.123456789(123456789)\", t = \"0.123456789123456789(123456789)\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.0(000001)\", t = \"0.000001(000001)\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.(0)\", t = \"0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.123(456)\", t = \"0.123456456\"",
        "output": "True"
      },
      {
        "input": "s = \"0.12(345)\", t = \"0.12345(345)\"",
        "output": "True"
      },
      {
        "input": "s = \"100.(0)\", t = \"100\"",
        "output": "True"
      },
      {
        "input": "s = \"1000.0001(0)\", t = \"1000.0001\"",
        "output": "True"
      },
      {
        "input": "s = \"0.000(001)\", t = \"0.000001001001001001001001001001001001001001001001001001001001001\"",
        "output": "True"
      },
      {
        "input": "s = \"0.1(2345)\", t = \"0.123452345\"",
        "output": "True"
      },
      {
        "input": "s = \"1.23(456)\", t = \"1.23456456\"",
        "output": "False"
      },
      {
        "input": "s = \"3.14159(265359)\", t = \"3.14159265359(265359)\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.5555(5)\", t = \"0.5556(5)\"",
        "output": "False"
      },
      {
        "input": "s = \"0.(999)\", t = \"1.0\"",
        "output": "True"
      },
      {
        "input": "s = \"123456789.000(0001)\", t = \"123456789.0000001000100010001\"",
        "output": "True"
      },
      {
        "input": "s = \"123.(456)\", t = \"123.456456\"",
        "output": "False"
      },
      {
        "input": "s = \"0.9(99)\", t = \"1\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(999)\", t = \"1.000\"",
        "output": "True"
      },
      {
        "input": "s = \"5.0(5)\", t = \"5.05(5)\"",
        "output": "True"
      },
      {
        "input": "s = \"1.(0)\", t = \"1\"",
        "output": "True"
      },
      {
        "input": "s = \"0.1(1)\", t = \"0.1111111111111111\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(12)\", t = \"0.1212121212121212\"",
        "output": "True"
      },
      {
        "input": "s = \"0.1234(567)\", t = \"0.1234567567\"",
        "output": "True"
      },
      {
        "input": "s = \"123456789.000000(000000)\", t = \"123456789.0\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.1(0)\", t = \"0.1\"",
        "output": "True"
      },
      {
        "input": "s = \"0.000(0)\", t = \"0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.5(0)\", t = \"0.5\"",
        "output": "True"
      },
      {
        "input": "s = \"0.000(009)\", t = \"0.000009009\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(5)\", t = \"0.5(5)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(3)\", t = \"0.333(3)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(1)\", t = \"0.111111111111111111111111111111111111111111111111111111111111111111111\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0000001(0)\", t = \"0.0000001\"",
        "output": "True"
      },
      {
        "input": "s = \"0.00(123)\", t = \"0.00123123123\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0(999)\", t = \"0.1\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(01)\", t = \"0.01010101\"",
        "output": "True"
      },
      {
        "input": "s = \"0.1(2345)\", t = \"0.12345(2345)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.1(3)\", t = \"0.133333333333333333333333333333333333333333333333333333333333333333333\"",
        "output": "True"
      },
      {
        "input": "s = \"999.(9)\", t = \"1000.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.12345678(9)\", t = \"0.12345678989\"",
        "output": "True"
      },
      {
        "input": "s = \"10.0(000)\", t = \"10.0\"",
        "output": "True"
      },
      {
        "input": "s = \"123.(0)\", t = \"123\"",
        "output": "True"
      },
      {
        "input": "s = \"100.0001(0)\", t = \"100.0001\"",
        "output": "True"
      },
      {
        "input": "s = \"0.9(9)\", t = \"1\"",
        "output": "True"
      },
      {
        "input": "s = \"3.14159(26535)\", t = \"3.1415926535(26535)\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.999(999)\", t = \"1.000\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0000(1)\", t = \"0.0001\"",
        "output": "False"
      },
      {
        "input": "s = \"1.000(0)\", t = \"1\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0(000)\", t = \"0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(111)\", t = \"0.11111111\"",
        "output": "False"
      },
      {
        "input": "s = \"0.0(001)\", t = \"0.0001(001)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.00(1)\", t = \"0.001(0)\"",
        "output": "False"
      },
      {
        "input": "s = \"42.(0)\", t = \"42.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.000(9)\", t = \"0.001\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0000(0001)\", t = \"0.000000010001\"",
        "output": "True"
      },
      {
        "input": "s = \"0.000(00001)\", t = \"0.00000000001\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.1(6)\", t = \"0.166666666666\"",
        "output": "True"
      },
      {
        "input": "s = \"3.0000(0)\", t = \"3.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.000(001)\", t = \"0.000001(001)\"",
        "output": "True"
      },
      {
        "input": "s = \"1.9(9)\", t = \"2.0\"",
        "output": "True"
      },
      {
        "input": "s = \"123.456(789)\", t = \"123.456789789789\"",
        "output": "True"
      },
      {
        "input": "s = \"0.12(34)\", t = \"0.12343434\"",
        "output": "False"
      },
      {
        "input": "s = \"0.(00009)\", t = \"0.00009(00009)\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.5(00)\", t = \"0.5\"",
        "output": "True"
      },
      {
        "input": "s = \"0.999(9)\", t = \"1.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.999(9)\", t = \"0.999999(999)\"",
        "output": "True"
      },
      {
        "input": "s = \"123.456(789012)\", t = \"123.456789012789012\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.999(9)\", t = \"1\"",
        "output": "True"
      },
      {
        "input": "s = \"1.0(0)\", t = \"1.00(0)\"",
        "output": "True"
      },
      {
        "input": "s = \"123.456(789)\", t = \"123.456789789\"",
        "output": "True"
      },
      {
        "input": "s = \"1.234(567)\", t = \"1.234567(567)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(010)\", t = \"0.0101010\"",
        "output": "False"
      },
      {
        "input": "s = \"0.1234(5678)\", t = \"0.12345678(5678)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.000(1)\", t = \"0.0001(0)\"",
        "output": "False"
      },
      {
        "input": "s = \"0.0001(0001)\", t = \"0.000100010001\"",
        "output": "True"
      },
      {
        "input": "s = \"123.456(7890)\", t = \"123.45678907890\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(01)\", t = \"0.0101010101\"",
        "output": "True"
      },
      {
        "input": "s = \"0.999999(9)\", t = \"1.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(001)\", t = \"0.001(001)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(12)\", t = \"0.121212\"",
        "output": "False"
      },
      {
        "input": "s = \"0.0(99)\", t = \"0.1\"",
        "output": "True"
      },
      {
        "input": "s = \"12.(34)\", t = \"12.34(34)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.00(9)\", t = \"0.01\"",
        "output": "True"
      },
      {
        "input": "s = \"0.9(999)\", t = \"1\"",
        "output": "True"
      },
      {
        "input": "s = \"0.1(234)\", t = \"0.1234(234)\"",
        "output": "True"
      },
      {
        "input": "s = \"5.000(0)\", t = \"5.0\"",
        "output": "True"
      },
      {
        "input": "s = \"100.0000(9)\", t = \"100.0001\"",
        "output": "True"
      },
      {
        "input": "s = \"1234.5678(9)\", t = \"1234.5679(0)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.5(5)\", t = \"0.55(55)\"",
        "output": "True"
      },
      {
        "input": "s = \"1.234(5678)\", t = \"1.23456785678\"",
        "output": "True"
      },
      {
        "input": "s = \"123.456(789)\", t = \"123.456789(789)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.(0)\", t = \"0.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.00(000)\", t = \"0.0\"",
        "output": "True"
      },
      {
        "input": "s = \"0.123(456)\", t = \"0.123456(456)\"",
        "output": "True"
      },
      {
        "input": "s = \"0.0000(00001)\", t = \"0.0000000010000100001000010000100001000010000100001000010000100001\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "s = \"0.001(002)\", t = \"0.001002(002)\"",
        "output": "True"
      },
      {
        "input": "s = \"2.4(9)\", t = \"2.5\"",
        "output": "True"
      }
    ]
  },
  {
    "id": 2791,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Tree",
      "Depth-First Search",
      "Dynamic Programming",
      "Bitmask"
    ],
    "problemDescription": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.\n\u00a0\nExample 1:\n\n\nInput: parent = [-1,0,0,1,1,2], s = \"acaabc\"\nOutput: 8\nExplanation: The valid pairs are:\n- All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome.\n- The pair (2,3) result in the string \"aca\" which is a palindrome.\n- The pair (1,5) result in the string \"cac\" which is a palindrome.\n- The pair (3,5) result in the string \"acac\" which can be rearranged into the palindrome \"acca\".\n\nExample 2:\n\nInput: parent = [-1,0,0,0,0], s = \"aaaaa\"\nOutput: 10\nExplanation: Any pair of nodes (u,v) where u < v is valid.\n\n\u00a0\nConstraints:\n\nn == parent.length == s.length\n1 <= n <= 105\n0 <= parent[i] <= n - 1 for all i >= 1\nparent[0] == -1\nparent represents a valid tree.\ns consists of only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def countPalindromePaths(self, parent: List[int], s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3], s = \"abacabadaba\"",
        "output": "15"
      },
      {
        "input": "parent = [-1,0,1,2,3,2], s = \"abcba\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2], s = \"acaabc\"",
        "output": "8"
      },
      {
        "input": "parent = [-1,0,0,0,1,2,3,4], s = \"aabbccdd\"",
        "output": "10"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4], s = \"abcdefghij\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,1,2,3], s = \"abcabc\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1], s = \"abac\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,0], s = \"aaaaa\"",
        "output": "10"
      },
      {
        "input": "parent = [-1,0,0,1,2], s = \"aabb\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5], s = \"abcdefg\"",
        "output": "6"
      },
      {
        "input": "parent = [-1,0,1,2,3], s = \"abcde\"",
        "output": "4"
      },
      {
        "input": "parent = [-1,0,0,1,2,2,3,4], s = \"aabbccdd\"",
        "output": "10"
      },
      {
        "input": "parent = [-1,0,0,0,1,2,3,3,4,4,5,5,6,6,7,7,8,8], s = \"abacabadabacabada\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "20"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,0,20,21,22,23,24,25,26,27,28,29,0,31,32,33,34,35,36,37,38,39,40], s = \"aaabbbcccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmttttnnnnooooppppqqqqrrrrssssvvvvwwwwxxxyyyyzzzz\"",
        "output": "296"
      },
      {
        "input": "parent = [-1,0,1,0,2,3,1,3,1,4,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24], s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "496"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacab\"",
        "output": "258"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], s = \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\"",
        "output": "3851"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14], s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacab\"",
        "output": "684"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"abcdefghijabcdefghijabcdefghij\"",
        "output": "29"
      },
      {
        "input": "parent = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "65"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,3,3,4,4,5,5], s = \"abacabadabacaba\"",
        "output": "31"
      },
      {
        "input": "parent = [-1,0,0,1,1,1,1,2,2,2,3,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"abacabadabacabadabacaba\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], s = \"abacabadabacabadabacabadabac\"",
        "output": "62"
      },
      {
        "input": "parent = [-1,0,0,1,2,2,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], s = \"abcdefghijklmnopqrstuvwxyzabcdefghij\"",
        "output": "20"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8], s = \"abcdefghij\"",
        "output": "9"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "58"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"aaaaaaaaaabbbbbbbbbbcccccccccc\"",
        "output": "145"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23], s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "52"
      },
      {
        "input": "parent = [-1,0,0,1,1,1,2,2,3,3,4,4,5,5,6,6], s = \"abacabadabacaba\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "28"
      },
      {
        "input": "parent = [-1,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9], s = \"abacabadabacabadabacaba\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,0,20,21,22,23,24,25,26,27,28,29], s = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "30"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100], s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "266"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "23"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "36"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "43"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21], s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabad\"",
        "output": "393"
      },
      {
        "input": "parent = [-1,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5], s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "15"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23], s = \"abacabadabacabadabacabadabacabadabacaba\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30], s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "2202"
      },
      {
        "input": "parent = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"abcdefghabcdefgh\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "40"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "65"
      },
      {
        "input": "parent = [-1,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"aabbaabbccdd\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35], s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "2628"
      },
      {
        "input": "parent = [-1,0,1,1,2,3,3,3,4,4,5,6,6,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22], s = \"abacabadabacabadabacabadabacabadabacabad\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "30"
      },
      {
        "input": "parent = [-1,0,0,1,2,2,3,3,4,4], s = \"aabbaabbcc\"",
        "output": "29"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "47"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19], s = \"zyxwvutsrqponmlkjihgfedcbaabcdefghijklmnopqrstuvwxyz\"",
        "output": "41"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "1001"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "126"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24], s = \"abcdefghigklmnopqrstuvwxyzabcdefghigklmnopqrstuvwxyzabcdefghigklmnopqrstuvwxyzabcdefghigklmnopqrstuvwxyz\"",
        "output": "55"
      },
      {
        "input": "parent = [-1,0,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"abacabadabacabadabacab\"",
        "output": "88"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "20"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19], s = \"abacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabadabacabad\"",
        "output": "319"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"abacabadabacabadaba\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,3,4,5,6,7,8,9], s = \"abcdefghijk\"",
        "output": "Error: string index out of range"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20], s = \"abacabadabacabadabacabadabacabadabacabadabacabadaba\"",
        "output": "358"
      },
      {
        "input": "parent = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], s = \"zyxwvutsrqponmlkjihgfedcbazyxwvu\"",
        "output": "20"
      },
      {
        "input": "parent = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,0,20,21,22,23,24,25,26,27,28,29,0,31,32,33,34,35,36,37,38,39,40,0,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89], s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "99"
      },
      {
        "input": "parent = [-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz\"",
        "output": "46"
      },
      {
        "input": "parent = [-1,0,0,1,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20], s = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "44"
      },
      {
        "input": "parent = [-1,0,0,0,1,2,3,3,4,4], s = \"ababababa\"",
        "output": "Error: string index out of range"
      }
    ]
  },
  {
    "id": 1548,
    "difficulty": "Hard",
    "tags": [
      "Graph",
      "Dynamic Programming"
    ],
    "problemDescription": "We have n cities and m bi-directional roads where roads[i] = [ai, bi] connects city ai with city bi. Each city has a name consisting of exactly three upper-case English letters given in the string array names. Starting at any city x, you can reach any city y where y != x (i.e., the cities and the roads are forming an undirected connected graph).\nYou will be given a string array targetPath. You should find a path in the graph of the same length and with the minimum edit distance to targetPath.\nYou need to return the order of the nodes in the path with the minimum edit distance. The\u00a0path should be of the same length of targetPath and should be valid (i.e., there should be a direct road between ans[i] and ans[i + 1]). If there are multiple answers return any one of them.\nThe edit distance is defined as follows:\n\n\u00a0\nExample 1:\n\n\nInput: n = 5, roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]], names = [\"ATL\",\"PEK\",\"LAX\",\"DXB\",\"HND\"], targetPath = [\"ATL\",\"DXB\",\"HND\",\"LAX\"]\nOutput: [0,2,4,2]\nExplanation: [0,2,4,2], [0,3,0,2] and [0,3,1,2] are accepted answers.\n[0,2,4,2] is equivalent to [\"ATL\",\"LAX\",\"HND\",\"LAX\"] which has edit distance = 1 with targetPath.\n[0,3,0,2] is equivalent to [\"ATL\",\"DXB\",\"ATL\",\"LAX\"] which has edit distance = 1 with targetPath.\n[0,3,1,2] is equivalent to [\"ATL\",\"DXB\",\"PEK\",\"LAX\"] which has edit distance = 1 with targetPath.\n\nExample 2:\n\n\nInput: n = 4, roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]], names = [\"ATL\",\"PEK\",\"LAX\",\"DXB\"], targetPath = [\"ABC\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQR\",\"STU\",\"VWX\"]\nOutput: [0,1,0,1,0,1,0,1]\nExplanation: Any path in this graph has edit distance = 8 with targetPath.\n\nExample 3:\n\n\nInput: n = 6, roads = [[0,1],[1,2],[2,3],[3,4],[4,5]], names = [\"ATL\",\"PEK\",\"LAX\",\"ATL\",\"DXB\",\"HND\"], targetPath = [\"ATL\",\"DXB\",\"HND\",\"DXB\",\"ATL\",\"LAX\",\"PEK\"]\nOutput: [3,4,5,4,3,2,1]\nExplanation: [3,4,5,4,3,2,1] is the only path with edit distance = 0 with targetPath.\nIt's equivalent to [\"ATL\",\"DXB\",\"HND\",\"DXB\",\"ATL\",\"LAX\",\"PEK\"]\n\n\u00a0\nConstraints:\n\n2 <= n <= 100\nm == roads.length\nn - 1 <= m <= (n * (n - 1) / 2)\n0 <= ai, bi <= n - 1\nai != bi\nThe graph is guaranteed to be connected and each pair of nodes may have at most one direct road.\nnames.length == n\nnames[i].length == 3\nnames[i] consists of upper-case English letters.\nThere can be two cities with the same name.\n1 <= targetPath.length <= 100\ntargetPath[i].length == 3\ntargetPath[i] consists of upper-case English letters.\n\n\u00a0\nFollow up: If each node can be visited only once in the path, What should you change in your solution?\n",
    "starterCode": "class Solution:\n    def mostSimilar(self, n: int, roads: List[List[int]], names: List[str], targetPath: List[str]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "n = 6, roads = [[0,1],[1,2],[2,3],[3,4],[4,5]], names = [\"ATL\",\"PEK\",\"LAX\",\"ATL\",\"DXB\",\"HND\"], targetPath = [\"ATL\",\"DXB\",\"HND\",\"DXB\",\"ATL\",\"LAX\",\"PEK\"]",
        "output": "[3, 4, 5, 4, 3, 2, 1]"
      },
      {
        "input": "n = 5, roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]], names = [\"ATL\",\"PEK\",\"LAX\",\"DXB\",\"HND\"], targetPath = [\"ATL\",\"DXB\",\"HND\",\"LAX\"]",
        "output": "[0, 3, 0, 2]"
      },
      {
        "input": "n = 4, roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]], names = [\"ATL\",\"PEK\",\"LAX\",\"DXB\"], targetPath = [\"ABC\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQR\",\"STU\",\"VWX\"]",
        "output": "[1, 0, 1, 0, 1, 0, 1, 0]"
      },
      {
        "input": "n = 20, roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,16],[13,17],[14,18],[15,19],[16,19],[17,19],[18,19]], names = [\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"ORD\",\"SLC\",\"JFK\",\"PDX\",\"EWR\",\"BOS\",\"MIA\",\"SFO\",\"IAD\",\"PHL\",\"MDW\",\"DFW\",\"LAX\"], targetPath = [\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"ORD\",\"SLC\",\"JFK\",\"PDX\",\"EWR\",\"BOS\",\"MIA\",\"SFO\",\"IAD\",\"PHL\",\"MDW\",\"DFW\",\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"ORD\",\"SLC\",\"JFK\",\"PDX\",\"EWR\"]",
        "output": "[0, 1, 0, 1, 4, 1, 3, 7, 3, 1, 4, 8, 12, 16, 19, 15, 11, 7, 3, 1, 0, 2, 0, 2, 5, 2, 0, 2, 6, 10, 6]"
      },
      {
        "input": "n = 15, roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,12],[11,13],[12,14],[13,14]], names = [\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"ORD\",\"SLC\",\"JFK\",\"PDX\",\"EWR\",\"BOS\",\"MIA\",\"SFO\"], targetPath = [\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"ORD\",\"SLC\",\"JFK\",\"PDX\",\"EWR\",\"BOS\",\"MIA\",\"SFO\",\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\"]",
        "output": "[0, 1, 0, 1, 4, 1, 0, 2, 5, 9, 13, 11, 7, 3, 1, 0, 1, 0, 1, 4]"
      },
      {
        "input": "n = 10, roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,5],[1,6],[2,7],[3,8],[4,9]], names = [\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\"], targetPath = [\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\",\"XYZ\"]",
        "output": "[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]"
      },
      {
        "input": "n = 7, roads = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[3,6],[4,6],[5,6]], names = [\"LAX\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"ORD\",\"JFK\"], targetPath = [\"LAX\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"ORD\",\"JFK\",\"LAX\",\"ATL\",\"DFW\"]",
        "output": "[0, 1, 0, 3, 6, 5, 1, 0, 1, 0]"
      },
      {
        "input": "n = 12, roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,0],[0,6],[1,7],[2,8],[3,9],[4,10],[5,11]], names = [\"XYZ\",\"ABC\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQR\",\"STU\",\"VWX\",\"YZA\",\"BCD\",\"EFG\"], targetPath = [\"XYZ\",\"ABC\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQR\",\"STU\",\"VWX\",\"YZA\",\"BCD\",\"EFG\",\"XYZ\",\"ABC\"]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1]"
      },
      {
        "input": "n = 8, roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,7],[5,7],[6,7]], names = [\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"JFK\"], targetPath = [\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"JFK\",\"JFK\",\"JFK\",\"JFK\",\"JFK\"]",
        "output": "[0, 1, 0, 1, 4, 7, 6, 7, 3, 7, 3, 7]"
      },
      {
        "input": "n = 8, roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7]], names = [\"XYZ\",\"ABC\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQR\",\"STU\"], targetPath = [\"XYZ\",\"ABC\",\"XYZ\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQR\",\"STU\"]",
        "output": "[0, 1, 0, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "n = 15, roads = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0],[0,7],[1,8],[2,9],[3,10],[4,11],[5,12],[6,13],[7,14]], names = [\"XYZ\",\"ABC\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQR\",\"STU\",\"VWX\",\"YZA\",\"BCD\",\"EFG\",\"HIJ\",\"KLM\",\"NOP\"], targetPath = [\"XYZ\",\"ABC\",\"DEF\",\"GHI\",\"JKL\",\"MNO\",\"PQR\",\"STU\",\"VWX\",\"YZA\",\"BCD\",\"EFG\",\"HIJ\",\"KLM\",\"NOP\",\"XYZ\",\"ABC\",\"DEF\",\"GHI\",\"JKL\"]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4]"
      },
      {
        "input": "n = 12, roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,11],[9,11],[10,11]], names = [\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"ORD\",\"SLC\",\"JFK\",\"PDX\",\"EWR\"], targetPath = [\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"ORD\",\"SLC\",\"JFK\",\"PDX\",\"EWR\",\"LAX\",\"HOU\",\"ATL\"]",
        "output": "[0, 1, 0, 1, 4, 1, 3, 7, 11, 9, 5, 2, 0, 1, 0]"
      },
      {
        "input": "n = 10, roads = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,7],[7,8],[8,9]], names = [\"LAX\",\"HOU\",\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"ORD\",\"SLC\",\"JFK\"], targetPath = [\"ATL\",\"DFW\",\"DEN\",\"PHX\",\"SEA\",\"ORD\",\"SLC\",\"JFK\",\"HOU\",\"LAX\"]",
        "output": "[0, 1, 4, 1, 3, 7, 8, 4, 1, 0]"
      }
    ]
  },
  {
    "id": 312,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\nReturn the maximum coins you can collect by bursting the balloons wisely.\n\u00a0\nExample 1:\n\nInput: nums = [3,1,5,8]\nOutput: 167\nExplanation:\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\nExample 2:\n\nInput: nums = [1,5]\nOutput: 10\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= n <= 300\n0 <= nums[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "110"
      },
      {
        "input": "nums = [1,5]",
        "output": "10"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [7,9,8,0,7,1,3,5,5,2,3]",
        "output": "1654"
      },
      {
        "input": "nums = [7,9,8,0,7,1,3,5,5,7,4,5,5,5,4]",
        "output": "2886"
      },
      {
        "input": "nums = [3,1,5,8]",
        "output": "167"
      },
      {
        "input": "nums = [0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [9,76,66,18,49,79,11,31,2,83,45,12,50,88,67,34,73,39,100,87,30,6,41,72,84,17,29,63,52,75,58,92,37,35,61,43,89,64,55,19,32,62,57,90,91,33,44,27,3,76,65,68,42,8,54,60,10,80,70,12,3,5,82,46,30,81,13,26,93,14,20,78,86,25,56,1,36,59,74,15,95,16,4,7,22,69,51,38,85,23,40,94,48,6,97,24,53,9,96,21,47,77,99,31,28,45,32]",
        "output": "35112384"
      },
      {
        "input": "nums = [10,10,10,10]",
        "output": "2110"
      },
      {
        "input": "nums = [100]",
        "output": "100"
      },
      {
        "input": "nums = [9,76,64,21,97,60]",
        "output": "1086136"
      },
      {
        "input": "nums = [8,3,8,3,8]",
        "output": "968"
      },
      {
        "input": "nums = [0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "110"
      },
      {
        "input": "nums = [7,9,8,0,7,1,3,5,5,7,3]",
        "output": "2107"
      },
      {
        "input": "nums = [35,16,83,87,52,15,24,91,36,80,59,27,9,81,33,17,5,74,40,85,23,47,89,69]",
        "output": "6802248"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "5700600"
      },
      {
        "input": "nums = [1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10]",
        "output": "10120"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "2420"
      },
      {
        "input": "nums = [5, 8, 6, 2, 3, 7, 4, 1, 9]",
        "output": "1704"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "32339900"
      },
      {
        "input": "nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 99]",
        "output": "474000"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2, 6, 4, 3, 3, 8, 3, 2, 7, 9, 5, 0, 2, 8, 8, 4, 1, 9, 7, 1, 6, 9, 3, 9, 9, 3, 7, 5, 1, 0, 5, 8, 2, 0, 9, 7, 4, 9, 4, 4, 5, 9, 2, 3, 0, 7, 8, 1, 6, 4, 0, 6, 2, 8, 6, 2, 0, 4, 9, 0, 3, 0, 1]",
        "output": "23783"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "2427280"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000]",
        "output": "1010101200000"
      },
      {
        "input": "nums = [8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15]",
        "output": "15717"
      },
      {
        "input": "nums = [1, 3, 1, 5, 1, 7, 1, 9, 1, 11]",
        "output": "1510"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 5, 2, 1, 2, 5, 10, 20, 30, 40, 50]",
        "output": "309374"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81]",
        "output": "14636200"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "243660"
      },
      {
        "input": "nums = [3, 2, 1, 4, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]",
        "output": "43888"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "4830"
      },
      {
        "input": "nums = [1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100]",
        "output": "13150200"
      },
      {
        "input": "nums = [5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1]",
        "output": "2010"
      },
      {
        "input": "nums = [9, 75, 1, 99, 2, 98, 3, 97, 4, 96, 5]",
        "output": "2737551"
      },
      {
        "input": "nums = [100,1,100,1,100,1,100,1,100]",
        "output": "3050100"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "13680"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80]",
        "output": "15284100"
      },
      {
        "input": "nums = [99, 1, 98, 2, 97, 3, 96, 4, 95, 5]",
        "output": "2906611"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "741"
      },
      {
        "input": "nums = [50, 20, 30, 10, 40, 60, 70, 80, 90, 10]",
        "output": "1428550"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "30"
      },
      {
        "input": "nums = [50, 25, 75, 40, 60, 10, 80, 30, 90]",
        "output": "1779840"
      },
      {
        "input": "nums = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]",
        "output": "72420"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 2, 4, 6, 8, 10]",
        "output": "2100"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200]",
        "output": "98801200"
      },
      {
        "input": "nums = [50,25,75,20,80,15,85,10,90,5,95,40,60,35,65,30,70,45,55,2]",
        "output": "4854150"
      },
      {
        "input": "nums = [82, 9, 60, 27, 69, 64, 53, 80, 74, 97, 22, 5, 35, 46, 91, 16, 51, 86, 58, 3, 53, 29, 37, 24, 36, 72, 39, 68, 55, 76, 59, 79, 85, 43, 87, 66, 89, 25, 47, 20, 90, 83, 33, 38, 92, 48, 57, 93, 95, 70, 56, 88, 45, 26, 75, 98, 65, 4, 42, 77, 18, 23, 31, 19, 94, 49, 32, 21, 100, 30, 17, 28, 40, 11, 63, 67, 7, 62, 13, 73, 12, 14, 78, 2, 54, 71, 15, 6, 41, 81, 52, 96, 34, 44, 99, 84, 50, 8, 39]",
        "output": "35359128"
      },
      {
        "input": "nums = [2, 3, 2, 4, 2, 3, 2]",
        "output": "120"
      },
      {
        "input": "nums = [1, 3, 1, 5, 1, 3]",
        "output": "90"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300]",
        "output": "243603300"
      },
      {
        "input": "nums = [25,50,75,100,125,150,175,200,225,250,275,300]",
        "output": "82507800"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "2401100"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "2420"
      },
      {
        "input": "nums = [9,7,6,5,4,3,2,1]",
        "output": "1026"
      },
      {
        "input": "nums = [10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "940"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1]",
        "output": "495"
      },
      {
        "input": "nums = [10, 100, 1000, 10000]",
        "output": "1010110000"
      },
      {
        "input": "nums = [30,20,10,5,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "88180"
      },
      {
        "input": "nums = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "243660"
      },
      {
        "input": "nums = [99, 1, 100, 1, 99, 1, 100]",
        "output": "2019700"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "2401100"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "5820"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "13680"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "2420"
      },
      {
        "input": "nums = [100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50]",
        "output": "13005100"
      },
      {
        "input": "nums = [23,11,77,32,45,62,88,12,56,78,91,29,48,50,65,73,82,90,18,27]",
        "output": "5732245"
      },
      {
        "input": "nums = [50,24,31,29,96,9,18,45,32,27,95,38,57,47,52,56,83,40,87,91,30,72,4,36,66,6,1,49,59,27,9,81,33,17,5,74,40,85,23,47,89,69,35,16,83,87,52,15,24,91,36,80,59,27,9,81,33,17,5,74]",
        "output": "17249443"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "45602200"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "15220"
      },
      {
        "input": "nums = [2,3,7,5,4,1,9,6,8,2]",
        "output": "1723"
      },
      {
        "input": "nums = [1, 3, 1, 5, 1, 7, 1, 9, 1]",
        "output": "617"
      },
      {
        "input": "nums = [30, 20, 10, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "49060"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "45640"
      },
      {
        "input": "nums = [20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "2382100"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "2670380"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "10"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10]",
        "output": "5820"
      },
      {
        "input": "nums = [1,10,1,10,1,10,1,10,1,10]",
        "output": "3520"
      },
      {
        "input": "nums = [50,20,50,20,50,20,50,20,50,20,50,20,50,20,50,20,50,20,50,20,50,20]",
        "output": "1676050"
      },
      {
        "input": "nums = [2, 5, 1, 3, 4, 6, 8, 7, 10, 9, 12, 11, 14, 13, 15]",
        "output": "13653"
      },
      {
        "input": "nums = [50, 24, 30, 98, 99, 5, 91, 41, 72, 7, 42, 62, 95, 69, 32, 24, 38, 80, 44, 79, 9, 26, 6, 47, 93, 64, 39, 87, 63, 77, 85, 48, 52, 82, 35, 73, 12, 23, 59, 3, 78, 54, 75, 94, 19, 13, 71, 68, 28, 31, 5, 46, 89, 37, 90, 8, 60, 25, 97, 10, 30, 67, 49, 81, 20, 76, 61, 34, 14, 88, 17, 22, 4, 51, 15, 70, 18, 43, 40, 96, 36, 65, 83, 29, 57, 56, 21, 53, 92, 27, 33, 84, 45, 86, 16, 58, 74]",
        "output": "33856230"
      },
      {
        "input": "nums = [9, 7, 5, 8, 6, 4, 2, 1, 3, 10]",
        "output": "2474"
      },
      {
        "input": "nums = [100,0,100,0,100,0,100,0,100,0,100,0,100,0,100,0,100,0,100,0]",
        "output": "8010100"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 9, 1, 4, 7, 10, 11, 13, 12, 15, 14]",
        "output": "13102"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "9530"
      },
      {
        "input": "nums = [5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1]",
        "output": "1260"
      },
      {
        "input": "nums = [23, 45, 67, 89, 12, 34, 56, 78, 90, 11, 33, 55, 77, 22, 44, 66, 88, 10, 30, 50]",
        "output": "5055964"
      },
      {
        "input": "nums = [30, 20, 40, 50, 10]",
        "output": "99330"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "2401100"
      },
      {
        "input": "nums = [10, 1, 100, 5, 10]",
        "output": "16110"
      },
      {
        "input": "nums = [30, 20, 10, 5, 1, 2, 3, 4, 5, 10, 20, 30]",
        "output": "37940"
      },
      {
        "input": "nums = [9,7,3,4,6,1,2,8,5]",
        "output": "1614"
      },
      {
        "input": "nums = [10, 1, 9, 2, 8, 3, 7, 4, 6, 5]",
        "output": "2630"
      },
      {
        "input": "nums = [9,7,3,1,8,6,5,4,2]",
        "output": "1677"
      }
    ]
  },
  {
    "id": 51,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Backtracking"
    ],
    "problemDescription": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n\u00a0\nExample 1:\n\n\nInput: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n\nExample 2:\n\nInput: n = 1\nOutput: [[\"Q\"]]\n\n\u00a0\nConstraints:\n\n1 <= n <= 9\n\n",
    "starterCode": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        ",
    "testCases": [
      {
        "input": "n = 8",
        "output": "[['Q.......', '....Q...', '.......Q', '.....Q..', '..Q.....', '......Q.', '.Q......', '...Q....'], ['Q.......', '.....Q..', '.......Q', '..Q.....', '......Q.', '...Q....', '.Q......', '....Q...'], ['Q.......', '......Q.', '...Q....', '.....Q..', '.......Q', '.Q......', '....Q...', '..Q.....'], ['Q.......', '......Q.', '....Q...', '.......Q', '.Q......', '...Q....', '.....Q..', '..Q.....'], ['.Q......', '...Q....', '.....Q..', '.......Q', '..Q.....', 'Q.......', '......Q.', '....Q...'], ['.Q......', '....Q...', '......Q.', 'Q.......', '..Q.....', '.......Q', '.....Q..', '...Q....'], ['.Q......', '....Q...', '......Q.', '...Q....', 'Q.......', '.......Q', '.....Q..', '..Q.....'], ['.Q......', '.....Q..', 'Q.......', '......Q.', '...Q....', '.......Q', '..Q.....', '....Q...'], ['.Q......', '.....Q..', '.......Q', '..Q.....', 'Q.......', '...Q....', '......Q.', '....Q...'], ['.Q......', '......Q.', '..Q.....', '.....Q..', '.......Q', '....Q...', 'Q.......', '...Q....'], ['.Q......', '......Q.', '....Q...', '.......Q', 'Q.......', '...Q....', '.....Q..', '..Q.....'], ['.Q......', '.......Q', '.....Q..', 'Q.......', '..Q.....', '....Q...', '......Q.', '...Q....'], ['..Q.....', 'Q.......', '......Q.', '....Q...', '.......Q', '.Q......', '...Q....', '.....Q..'], ['..Q.....', '....Q...', '.Q......', '.......Q', 'Q.......', '......Q.', '...Q....', '.....Q..'], ['..Q.....', '....Q...', '.Q......', '.......Q', '.....Q..', '...Q....', '......Q.', 'Q.......'], ['..Q.....', '....Q...', '......Q.', 'Q.......', '...Q....', '.Q......', '.......Q', '.....Q..'], ['..Q.....', '....Q...', '.......Q', '...Q....', 'Q.......', '......Q.', '.Q......', '.....Q..'], ['..Q.....', '.....Q..', '.Q......', '....Q...', '.......Q', 'Q.......', '......Q.', '...Q....'], ['..Q.....', '.....Q..', '.Q......', '......Q.', 'Q.......', '...Q....', '.......Q', '....Q...'], ['..Q.....', '.....Q..', '.Q......', '......Q.', '....Q...', 'Q.......', '.......Q', '...Q....'], ['..Q.....', '.....Q..', '...Q....', 'Q.......', '.......Q', '....Q...', '......Q.', '.Q......'], ['..Q.....', '.....Q..', '...Q....', '.Q......', '.......Q', '....Q...', '......Q.', 'Q.......'], ['..Q.....', '.....Q..', '.......Q', 'Q.......', '...Q....', '......Q.', '....Q...', '.Q......'], ['..Q.....', '.....Q..', '.......Q', 'Q.......', '....Q...', '......Q.', '.Q......', '...Q....'], ['..Q.....', '.....Q..', '.......Q', '.Q......', '...Q....', 'Q.......', '......Q.', '....Q...'], ['..Q.....', '......Q.', '.Q......', '.......Q', '....Q...', 'Q.......', '...Q....', '.....Q..'], ['..Q.....', '......Q.', '.Q......', '.......Q', '.....Q..', '...Q....', 'Q.......', '....Q...'], ['..Q.....', '.......Q', '...Q....', '......Q.', 'Q.......', '.....Q..', '.Q......', '....Q...'], ['...Q....', 'Q.......', '....Q...', '.......Q', '.Q......', '......Q.', '..Q.....', '.....Q..'], ['...Q....', 'Q.......', '....Q...', '.......Q', '.....Q..', '..Q.....', '......Q.', '.Q......'], ['...Q....', '.Q......', '....Q...', '.......Q', '.....Q..', 'Q.......', '..Q.....', '......Q.'], ['...Q....', '.Q......', '......Q.', '..Q.....', '.....Q..', '.......Q', 'Q.......', '....Q...'], ['...Q....', '.Q......', '......Q.', '..Q.....', '.....Q..', '.......Q', '....Q...', 'Q.......'], ['...Q....', '.Q......', '......Q.', '....Q...', 'Q.......', '.......Q', '.....Q..', '..Q.....'], ['...Q....', '.Q......', '.......Q', '....Q...', '......Q.', 'Q.......', '..Q.....', '.....Q..'], ['...Q....', '.Q......', '.......Q', '.....Q..', 'Q.......', '..Q.....', '....Q...', '......Q.'], ['...Q....', '.....Q..', 'Q.......', '....Q...', '.Q......', '.......Q', '..Q.....', '......Q.'], ['...Q....', '.....Q..', '.......Q', '.Q......', '......Q.', 'Q.......', '..Q.....', '....Q...'], ['...Q....', '.....Q..', '.......Q', '..Q.....', 'Q.......', '......Q.', '....Q...', '.Q......'], ['...Q....', '......Q.', 'Q.......', '.......Q', '....Q...', '.Q......', '.....Q..', '..Q.....'], ['...Q....', '......Q.', '..Q.....', '.......Q', '.Q......', '....Q...', 'Q.......', '.....Q..'], ['...Q....', '......Q.', '....Q...', '.Q......', '.....Q..', 'Q.......', '..Q.....', '.......Q'], ['...Q....', '......Q.', '....Q...', '..Q.....', 'Q.......', '.....Q..', '.......Q', '.Q......'], ['...Q....', '.......Q', 'Q.......', '..Q.....', '.....Q..', '.Q......', '......Q.', '....Q...'], ['...Q....', '.......Q', 'Q.......', '....Q...', '......Q.', '.Q......', '.....Q..', '..Q.....'], ['...Q....', '.......Q', '....Q...', '..Q.....', 'Q.......', '......Q.', '.Q......', '.....Q..'], ['....Q...', 'Q.......', '...Q....', '.....Q..', '.......Q', '.Q......', '......Q.', '..Q.....'], ['....Q...', 'Q.......', '.......Q', '...Q....', '.Q......', '......Q.', '..Q.....', '.....Q..'], ['....Q...', 'Q.......', '.......Q', '.....Q..', '..Q.....', '......Q.', '.Q......', '...Q....'], ['....Q...', '.Q......', '...Q....', '.....Q..', '.......Q', '..Q.....', 'Q.......', '......Q.'], ['....Q...', '.Q......', '...Q....', '......Q.', '..Q.....', '.......Q', '.....Q..', 'Q.......'], ['....Q...', '.Q......', '.....Q..', 'Q.......', '......Q.', '...Q....', '.......Q', '..Q.....'], ['....Q...', '.Q......', '.......Q', 'Q.......', '...Q....', '......Q.', '..Q.....', '.....Q..'], ['....Q...', '..Q.....', 'Q.......', '.....Q..', '.......Q', '.Q......', '...Q....', '......Q.'], ['....Q...', '..Q.....', 'Q.......', '......Q.', '.Q......', '.......Q', '.....Q..', '...Q....'], ['....Q...', '..Q.....', '.......Q', '...Q....', '......Q.', 'Q.......', '.....Q..', '.Q......'], ['....Q...', '......Q.', 'Q.......', '..Q.....', '.......Q', '.....Q..', '...Q....', '.Q......'], ['....Q...', '......Q.', 'Q.......', '...Q....', '.Q......', '.......Q', '.....Q..', '..Q.....'], ['....Q...', '......Q.', '.Q......', '...Q....', '.......Q', 'Q.......', '..Q.....', '.....Q..'], ['....Q...', '......Q.', '.Q......', '.....Q..', '..Q.....', 'Q.......', '...Q....', '.......Q'], ['....Q...', '......Q.', '.Q......', '.....Q..', '..Q.....', 'Q.......', '.......Q', '...Q....'], ['....Q...', '......Q.', '...Q....', 'Q.......', '..Q.....', '.......Q', '.....Q..', '.Q......'], ['....Q...', '.......Q', '...Q....', 'Q.......', '..Q.....', '.....Q..', '.Q......', '......Q.'], ['....Q...', '.......Q', '...Q....', 'Q.......', '......Q.', '.Q......', '.....Q..', '..Q.....'], ['.....Q..', 'Q.......', '....Q...', '.Q......', '.......Q', '..Q.....', '......Q.', '...Q....'], ['.....Q..', '.Q......', '......Q.', 'Q.......', '..Q.....', '....Q...', '.......Q', '...Q....'], ['.....Q..', '.Q......', '......Q.', 'Q.......', '...Q....', '.......Q', '....Q...', '..Q.....'], ['.....Q..', '..Q.....', 'Q.......', '......Q.', '....Q...', '.......Q', '.Q......', '...Q....'], ['.....Q..', '..Q.....', 'Q.......', '.......Q', '...Q....', '.Q......', '......Q.', '....Q...'], ['.....Q..', '..Q.....', 'Q.......', '.......Q', '....Q...', '.Q......', '...Q....', '......Q.'], ['.....Q..', '..Q.....', '....Q...', '......Q.', 'Q.......', '...Q....', '.Q......', '.......Q'], ['.....Q..', '..Q.....', '....Q...', '.......Q', 'Q.......', '...Q....', '.Q......', '......Q.'], ['.....Q..', '..Q.....', '......Q.', '.Q......', '...Q....', '.......Q', 'Q.......', '....Q...'], ['.....Q..', '..Q.....', '......Q.', '.Q......', '.......Q', '....Q...', 'Q.......', '...Q....'], ['.....Q..', '..Q.....', '......Q.', '...Q....', 'Q.......', '.......Q', '.Q......', '....Q...'], ['.....Q..', '...Q....', 'Q.......', '....Q...', '.......Q', '.Q......', '......Q.', '..Q.....'], ['.....Q..', '...Q....', '.Q......', '.......Q', '....Q...', '......Q.', 'Q.......', '..Q.....'], ['.....Q..', '...Q....', '......Q.', 'Q.......', '..Q.....', '....Q...', '.Q......', '.......Q'], ['.....Q..', '...Q....', '......Q.', 'Q.......', '.......Q', '.Q......', '....Q...', '..Q.....'], ['.....Q..', '.......Q', '.Q......', '...Q....', 'Q.......', '......Q.', '....Q...', '..Q.....'], ['......Q.', 'Q.......', '..Q.....', '.......Q', '.....Q..', '...Q....', '.Q......', '....Q...'], ['......Q.', '.Q......', '...Q....', 'Q.......', '.......Q', '....Q...', '..Q.....', '.....Q..'], ['......Q.', '.Q......', '.....Q..', '..Q.....', 'Q.......', '...Q....', '.......Q', '....Q...'], ['......Q.', '..Q.....', 'Q.......', '.....Q..', '.......Q', '....Q...', '.Q......', '...Q....'], ['......Q.', '..Q.....', '.......Q', '.Q......', '....Q...', 'Q.......', '.....Q..', '...Q....'], ['......Q.', '...Q....', '.Q......', '....Q...', '.......Q', 'Q.......', '..Q.....', '.....Q..'], ['......Q.', '...Q....', '.Q......', '.......Q', '.....Q..', 'Q.......', '..Q.....', '....Q...'], ['......Q.', '....Q...', '..Q.....', 'Q.......', '.....Q..', '.......Q', '.Q......', '...Q....'], ['.......Q', '.Q......', '...Q....', 'Q.......', '......Q.', '....Q...', '..Q.....', '.....Q..'], ['.......Q', '.Q......', '....Q...', '..Q.....', 'Q.......', '......Q.', '...Q....', '.....Q..'], ['.......Q', '..Q.....', 'Q.......', '.....Q..', '.Q......', '....Q...', '......Q.', '...Q....'], ['.......Q', '...Q....', 'Q.......', '..Q.....', '.....Q..', '.Q......', '......Q.', '....Q...']]"
      },
      {
        "input": "n = 3",
        "output": "[]"
      },
      {
        "input": "n = 4",
        "output": "[['.Q..', '...Q', 'Q...', '..Q.'], ['..Q.', 'Q...', '...Q', '.Q..']]"
      },
      {
        "input": "n = 9",
        "output": "Execution timed out"
      },
      {
        "input": "n = 6",
        "output": "[['.Q....', '...Q..', '.....Q', 'Q.....', '..Q...', '....Q.'], ['..Q...', '.....Q', '.Q....', '....Q.', 'Q.....', '...Q..'], ['...Q..', 'Q.....', '....Q.', '.Q....', '.....Q', '..Q...'], ['....Q.', '..Q...', 'Q.....', '.....Q', '...Q..', '.Q....']]"
      },
      {
        "input": "n = 2",
        "output": "[]"
      },
      {
        "input": "n = 1",
        "output": "[['Q']]"
      },
      {
        "input": "n = 7",
        "output
      },
      {
        "input": "n = 5",
        "output": "[['Q....', '..Q..', '....Q', '.Q...', '...Q.'], ['Q....', '...Q.', '.Q...', '....Q', '..Q..'], ['.Q...', '...Q.', 'Q....', '..Q..', '....Q'], ['.Q...', '....Q', '..Q..', 'Q....', '...Q.'], ['..Q..', 'Q....', '...Q.', '.Q...', '....Q'], ['..Q..', '....Q', '.Q...', '...Q.', 'Q....'], ['...Q.', 'Q....', '..Q..', '....Q', '.Q...'], ['...Q.', '.Q...', '....Q', '..Q..', 'Q....'], ['....Q', '.Q...', '...Q.', 'Q....', '..Q..'], ['....Q', '..Q..', 'Q....', '...Q.', '.Q...']]"
      },
      {
        "input": "n = 10",
        "output": "Execution timed out"
      }
    ]
  },
  {
    "id": 2499,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Hash Table",
      "Counting"
    ],
    "problemDescription": "You are given two 0-indexed integer arrays nums1 and nums2, of equal length n.\nIn one operation, you can swap the values of any two indices of nums1. The cost of this operation is the sum of the indices.\nFind the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations.\nReturn the minimum total cost such that nums1 and nums2 satisfy the above condition. In case it is not possible, return -1.\n\u00a0\nExample 1:\n\nInput: nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]\nOutput: 10\nExplanation: \nOne of the ways we can perform the operations is:\n- Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5]\n- Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5].\n- Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4].\nWe can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10.\nNote that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10.\n\nExample 2:\n\nInput: nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]\nOutput: 10\nExplanation: \nOne of the ways we can perform the operations is:\n- Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3].\n- Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2].\nThe total cost needed here is 10, which is the minimum possible.\n\nExample 3:\n\nInput: nums1 = [1,2,2], nums2 = [1,2,2]\nOutput: -1\nExplanation: \nIt can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform.\nHence, we return -1.\n\n\u00a0\nConstraints:\n\nn == nums1.length == nums2.length\n1 <= n <= 105\n1 <= nums1[i], nums2[i] <= n\n\n",
    "starterCode": "class Solution:\n    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [50,40,30,20,10]",
        "output": "2"
      },
      {
        "input": "nums1 = [10,9,8,7,6], nums2 = [6,7,8,9,10]",
        "output": "2"
      },
      {
        "input": "nums1 = [1,2,2], nums2 = [1,2,2]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1,1,1,1,1], nums2 = [2,2,2,2,2]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2], nums2 = [2,1]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,1,1], nums2 = [1,2,3,4,5]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1,1,1,1], nums2 = [1,1,1,1]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1,1,1,2,2,2], nums2 = [1,1,1,2,2,2]",
        "output": "15"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3], nums2 = [1,1,2,2,3,3]",
        "output": "15"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [3,2,1]",
        "output": "1"
      },
      {
        "input": "nums1 = [1,1,1,1], nums2 = [2,2,2,2]",
        "output": "0"
      },
      {
        "input": "nums1 = [5,1,3,2,4], nums2 = [4,2,1,3,5]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1]",
        "output": "2"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1]",
        "output": "-1"
      },
      {
        "input": "nums1 = [5,3,1], nums2 = [4,3,2]",
        "output": "1"
      },
      {
        "input": "nums1 = [5,3,2,4,1], nums2 = [5,4,1,3,2]",
        "output": "1"
      },
      {
        "input": "nums1 = [1,1,2,2], nums2 = [2,2,1,1]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,2,2,3], nums2 = [1,1,2,2,3]",
        "output": "10"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]",
        "output": "10"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [9,7,5,3,1]",
        "output": "2"
      },
      {
        "input": "nums1 = [5,4,3,2,1], nums2 = [1,2,3,4,5]",
        "output": "2"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [3,1,2]",
        "output": "0"
      },
      {
        "input": "nums1 = [5,3,3,2,1], nums2 = [5,4,4,1,2]",
        "output": "1"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [4,5,6]",
        "output": "0"
      },
      {
        "input": "nums1 = [1], nums2 = [1]",
        "output": "-1"
      },
      {
        "input": "nums1 = [10,9,8,7,6,5,4,3,2,1], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,1,1], nums2 = [1,1,1,1,1]",
        "output": "-1"
      },
      {
        "input": "nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]",
        "output": "10"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5], nums2 = [1,2,1,2,3,4,3,4,5,6]",
        "output": "22"
      },
      {
        "input": "nums1 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], nums2 = [2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 10]",
        "output": "18"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [3, 2, 1, 6, 5, 4, 9, 8, 11, 10]",
        "output": "21"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9], nums2 = [9,8,7,6,5,4,3,2,1]",
        "output": "4"
      },
      {
        "input": "nums1 = [3,1,2,3,1,2,3,1,2,3], nums2 = [1,3,2,1,3,2,1,3,2,1]",
        "output": "19"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2], nums2 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "-1"
      },
      {
        "input": "nums1 = [2,2,2,2,3,3,3,3,4,4,4,4], nums2 = [1,2,3,4,2,3,4,5,3,4,5,6]",
        "output": "15"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "7"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], nums2[9] = 10",
        "output": "Error: Solution.minimumTotalCost() missing 1 required positional argument: 'nums2'"
      },
      {
        "input": "nums1 = [1,2,1,2,1,2,1,2,1,2], nums2 = [2,1,2,1,2,1,2,1,2,1]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]",
        "output": "36"
      },
      {
        "input": "nums1 = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3], nums2 = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3]",
        "output": "105"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "105"
      },
      {
        "input": "nums1 = [1,1,1,1,2,2,2,2,3,3,3,3], nums2 = [2,2,2,2,1,1,1,1,3,3,3,3]",
        "output": "44"
      },
      {
        "input": "nums1 = [1,1,1,2,2,2,3,3,3], nums2 = [2,2,2,1,1,1,3,3,3]",
        "output": "24"
      },
      {
        "input": "nums1 = [3,3,3,3,3,3,3,3,3,3], nums2 = [3,3,3,3,3,3,3,3,3,3]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,2,2,2,3,3,3,4,4,4], nums2 = [1,1,2,2,2,3,3,3,4,4,4,5]",
        "output": "40"
      },
      {
        "input": "nums1 = [1,2,2,3,3,3,4,4,4,4], nums2 = [1,1,2,2,3,3,4,4,4,4]",
        "output": "41"
      },
      {
        "input": "nums1 = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2], nums2 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "-1"
      },
      {
        "input": "nums1 = [2,3,4,5,6,1], nums2 = [6,1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], nums2 = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 1, 9]",
        "output": "28"
      },
      {
        "input": "nums1 = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6], nums2 = [2, 3, 3, 4, 4, 5, 5, 6, 6, 7]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,3,2,5,4,6,7,8,9,10], nums2 = [2,1,3,4,5,6,7,8,9,10]",
        "output": "35"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "105"
      },
      {
        "input": "nums1 = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5], nums2 = [1,1,2,2,3,3,4,4,4,4,5,5,5,5,5]",
        "output": "101"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,1,2,3,4,5,6,7,8,9]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [2, 1, 4, 3, 6, 5, 8, 7, 10, 9]",
        "output": "0"
      },
      {
        "input": "nums1 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], nums2[0] = 10, nums2[9] = 1",
        "output": "Error: Solution.minimumTotalCost() missing 1 required positional argument: 'nums2'"
      },
      {
        "input": "nums1 = [5,1,3,2,4,6,7,8,9,10], nums2 = [10,5,4,3,2,1,8,7,6,9]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19], nums2 = [2,4,6,8,10,12,14,16,18,20]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "-1"
      },
      {
        "input": "nums1 = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,2]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [3,4,5,6,7,8,9,10,1,2]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], nums2 = [10, 10, 9, 9, 8, 8, 7, 7, 6, 6]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [1,3,5,7,9,2,4,6,8,10]",
        "output": "9"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,2,3,3,4,4], nums2 = [1,3,3,2,2,5,5]",
        "output": "1"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "45"
      },
      {
        "input": "nums1 = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6], nums2 = [6, 2, 1, 3, 3, 4, 4, 5, 5, 1]",
        "output": "34"
      },
      {
        "input": "nums1 = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "-1"
      },
      {
        "input": "nums1 = [7,6,5,4,3,2,1], nums2 = [1,2,3,4,5,6,7]",
        "output": "3"
      },
      {
        "input": "nums1 = [1,3,2,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]",
        "output": "9"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], nums2 = [1, 2, 1, 2, 3, 4, 3, 4, 5, 6]",
        "output": "22"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5], nums2 = [1,1,2,2,3,3,4,4,5,5]",
        "output": "45"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5,5], nums2 = [5,5,5,5,5,5,5,5,5,5]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1,2,2,3,3,4,4,5,5,6,6], nums2 = [6,2,2,6,6,2,2,6,6,2,2]",
        "output": "6"
      },
      {
        "input": "nums1 = [1,1,1,1,2,2,2,2,3,3,3,3], nums2 = [1,1,1,1,2,2,2,2,3,3,3,3]",
        "output": "66"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5], nums2 = [5,5,4,4,3,3,2,2,1,1]",
        "output": "10"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "45"
      },
      {
        "input": "nums1 = [3,3,3,3,3,3,3,3,3,3], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "-1"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "0"
      },
      {
        "input": "nums1 = [7,7,8,8,9,9,10,10], nums2 = [8,8,7,7,10,10,9,9]",
        "output": "0"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5,5], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], nums2 = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]",
        "output": "12"
      },
      {
        "input": "nums1 = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4], nums2 = [4, 4, 4, 3, 3, 3, 2, 2, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 11]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,2,3,3,4,4,5,5,6], nums2 = [1,1,2,2,3,3,4,4,5,5]",
        "output": "20"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], nums2 = [5, 5, 4, 4, 3, 3, 2, 2, 1, 1]",
        "output": "10"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], nums2 = [2, 2, 1, 1, 4, 4, 3, 3, 5, 5]",
        "output": "18"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10], nums2 = [1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10]",
        "output": "511"
      },
      {
        "input": "nums1 = [1,3,2,4,5,6,7,8,9,10], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "42"
      },
      {
        "input": "nums1 = [10,10,10,10,10,10,10,10,10,10], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,2,3,4,5,6,7,8,9,1]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,2]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2], nums2 = [2, 2, 2, 2, 2, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums1 = [4, 5, 4, 3, 2, 1, 6, 7, 8, 9], nums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "0"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3], nums2 = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3]",
        "output": "45"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], nums2 = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "190"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], nums2 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "45"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 10, 9]",
        "output": "28"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [2,1,4,3,6,5,8,7,10,9]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6], nums2 = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6]",
        "output": "45"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 3, 2, 5, 4, 7, 6, 9, 8, 10]",
        "output": "9"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1]",
        "output": "36"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5], nums2 = [5,5,5,5,5,5,5,5,5]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [5,6,7,8,9,10,1,2,3,4]",
        "output": "0"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], nums2 = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "19"
      },
      {
        "input": "nums1 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], nums2 = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "-1"
      },
      {
        "input": "nums1 = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], nums2 = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]",
        "output": "90"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [2,2,2,2,2,2,2,2,2,2]",
        "output": "0"
      }
    ]
  },
  {
    "id": 2519,
    "difficulty": "Hard",
    "tags": [
      "Binary Indexed Tree",
      "Segment Tree",
      "Array",
      "Binary Search",
      "Divide and Conquer",
      "Ordered Set",
      "Merge Sort"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums and a positive integer k.\nWe call an index i k-big if the following conditions are satisfied:\n\nThere exist at least k different indices idx1 such that idx1 < i and nums[idx1] < nums[i].\nThere exist at least k different indices idx2 such that idx2 > i and nums[idx2] < nums[i].\n\nReturn the number of k-big indices.\n\u00a0\nExample 1:\n\nInput: nums = [2,3,6,5,2,3], k = 2\nOutput: 2\nExplanation: There are only two 2-big indices in nums:\n- i = 2 --> There are two valid idx1: 0 and 1. There are three valid idx2: 2, 3, and 4.\n- i = 3 --> There are two valid idx1: 0 and 1. There are two valid idx2: 3 and 4.\n\nExample 2:\n\nInput: nums = [1,1,1], k = 3\nOutput: 0\nExplanation: There are no 3-big indices in nums.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i], k <= nums.length\n\n",
    "starterCode": "class Solution:\n    def kBigIndices(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,1,1], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10], k = 4",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [5,4,3,2,1], k = 1",
        "output": "0"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 4",
        "output": "0"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5], k = 3",
        "output": "2"
      },
      {
        "input": "nums = [2,3,6,5,2,3], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], k = 7",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 7",
        "output": "0"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6,11,20,12,19,13,18,14,17,15,16], k = 5",
        "output": "2"
      },
      {
        "input": "nums = [5,8,1,4,7,2,6,3,9,0], k = 3",
        "output": "Execution timed out"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], k = 5",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [5, 1, 3, 4, 2, 6, 7, 8, 9, 10], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 20, 11, 19, 12, 18, 13, 17, 14, 16, 15], k = 5",
        "output": "3"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [2,1,3,1,2,1,3,1,2,1], k = 2",
        "output": "3"
      },
      {
        "input": "nums = [7,2,5,3,10,1,8,9,4,6], k = 2",
        "output": "3"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 10",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14], k = 5",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4], k = 3",
        "output": "8"
      },
      {
        "input": "nums = [7,3,5,8,4,6,2,9,1,10,11,12,13,14,15,16,17,18,19,20], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], k = 15",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], k = 5",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0], k = 4",
        "output": "Execution timed out"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,10], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 4",
        "output": "0"
      },
      {
        "input": "nums = [7,3,5,1,6,4,2,8,10,9,12,11,14,13], k = 4",
        "output": "0"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [5,6,7,8,9,1,2,3,4,10], k = 3",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 15",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5], k = 6",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [10,10,9,9,8,8,7,7,6,6,5,5], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,20], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10,100,90,80,70,60,50,40,30,20,10], k = 5",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "10"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14], k = 4",
        "output": "0"
      },
      {
        "input": "nums = [7,1,5,3,6,4,2,8,9,0], k = 3",
        "output": "Execution timed out"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [8,1,6,3,7,4,2,5,10,9,12,11,14,13,15], k = 4",
        "output": "0"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], k = 7",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27], k = 7",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [5,2,6,1,3,4,9,8,7,10], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3], k = 2",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5], k = 3",
        "output": "17"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,2,3,4,5], k = 10",
        "output": "0"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,20,19,18,17,16,15,14,13,12,11], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [5,1,9,1,5,9,2,6,5,3,5,8,7,6,5,4,3,2,1,0], k = 4",
        "output": "Execution timed out"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], k = 2",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 1",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 5",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [1,3,5,7,9,2,4,6,8,10,1,3,5,7,9,2,4,6,8,10], k = 3",
        "output": "8"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 10",
        "output": "0"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [2,4,6,8,10,9,7,5,3,1], k = 4",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,3,2,4,6,5,8,7,10,9,12,11,14,13,15], k = 4",
        "output": "0"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91], k = 2",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 7",
        "output": "0"
      },
      {
        "input": "nums = [1,5,2,4,3,6,9,8,7,10], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8], k = 7",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [3, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15, 14], k = 4",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 11, 21, 12, 22, 13, 23, 14, 24, 15, 25, 16, 26, 17, 27, 18, 28, 19, 30, 29], k = 5",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [150,140,130,120,110,100,90,80,70,60,50,40,30,20,10], k = 6",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [5,1,5,1,5,1,5,1,5,1], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4], k = 2",
        "output": "10"
      },
      {
        "input": "nums = [7,1,5,3,6,4,2,8,9,0], k = 2",
        "output": "Execution timed out"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], k = 6",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [2,5,6,3,8,7,1,4,10,9], k = 2",
        "output": "3"
      },
      {
        "input": "nums = [5,3,8,6,2,7,4,9,1,10], k = 2",
        "output": "3"
      },
      {
        "input": "nums = [5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 12",
        "output": "0"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], k = 4",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], k = 7",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 6",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 7",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 3",
        "output": "7"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 15",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [2, 5, 3, 8, 1, 9, 4, 7, 6, 10], k = 2",
        "output": "2"
      },
      {
        "input": "nums = [1,3,2,4,6,5,8,7,10,9], k = 3",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 5",
        "output": "0"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], k = 1",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15], k = 4",
        "output": "0"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 2",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 10",
        "output": "0"
      },
      {
        "input": "nums = [5,1,9,2,8,3,7,4,6,10], k = 3",
        "output": "1"
      },
      {
        "input": "nums = [7,10,4,3,20,15], k = 2",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [7,8,9,1,2,3,4,5,6,10], k = 3",
        "output": "0"
      }
    ]
  },
  {
    "id": 857,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.\nWe want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:\n\nEvery worker in the paid group must be paid at least their minimum wage expectation.\nIn the group, each worker's pay must be directly proportional to their quality. This means if a worker\u2019s quality is double that of another worker in the group, then they must be paid twice as much as the other worker.\n\nGiven the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.\n\u00a0\nExample 1:\n\nInput: quality = [10,20,5], wage = [70,50,30], k = 2\nOutput: 105.00000\nExplanation: We pay 70 to 0th worker and 35 to 2nd worker.\n\nExample 2:\n\nInput: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\nOutput: 30.66667\nExplanation: We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.\n\n\u00a0\nConstraints:\n\nn == quality.length == wage.length\n1 <= k <= n <= 104\n1 <= quality[i], wage[i] <= 104\n\n",
    "starterCode": "class Solution:\n    def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:\n        ",
    "testCases": [
      {
        "input": "quality = [1,2,3,4,5], wage = [5,4,3,2,1], k = 3",
        "output": "12.0"
      },
      {
        "input": "quality = [1,1,1,1,1], wage = [1,1,1,1,1], k = 2",
        "output": "2.0"
      },
      {
        "input": "quality = [100,200,300,400,500], wage = [1000,2000,3000,4000,5000], k = 4",
        "output": "10000.0"
      },
      {
        "input": "quality = [1,1,1,1], wage = [1,2,3,4], k = 2",
        "output": "4.0"
      },
      {
        "input": "quality = [100,200,300,400,500], wage = [500,400,300,200,100], k = 2",
        "output": "450.0"
      },
      {
        "input": "quality = [10,10,10,10], wage = [10,10,10,10], k = 4",
        "output": "40.0"
      },
      {
        "input": "quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3",
        "output": "30.666666666666664"
      },
      {
        "input": "quality = [1,2,3,4,5], wage = [1,2,3,4,5], k = 4",
        "output": "10.0"
      },
      {
        "input": "quality = [10,10,10,10,10], wage = [10,10,10,10,10], k = 5",
        "output": "50.0"
      },
      {
        "input": "quality = [4,1,3,2], wage = [20,10,30,20], k = 2",
        "output": "30.0"
      },
      {
        "input": "quality = [6,12,10,10], wage = [48,48,30,60], k = 3",
        "output": "192.0"
      },
      {
        "input": "quality = [10,20,5], wage = [70,50,30], k = 2",
        "output": "105.0"
      },
      {
        "input": "quality = [15, 10, 25, 5, 30, 20, 35, 40], wage = [150, 100, 250, 50, 300, 200, 350, 400], k = 4",
        "output": "500.0"
      },
      {
        "input": "quality = [100, 200, 300, 400, 500], wage = [500, 1000, 1500, 2000, 2500], k = 2",
        "output": "1500.0"
      },
      {
        "input": "quality = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], wage = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 6",
        "output": "36.0"
      },
      {
        "input": "quality = [100,200,300,400,500], wage = [500,1000,1500,2000,2500], k = 4",
        "output": "5000.0"
      },
      {
        "input": "quality = [7,5,3,8,2], wage = [70,50,30,80,20], k = 2",
        "output": "50.0"
      },
      {
        "input": "quality = [12,15,18,21,24,27,30], wage = [60,75,90,105,120,135,150], k = 4",
        "output": "330.0"
      },
      {
        "input": "quality = [50, 40, 30, 20, 10], wage = [200, 160, 120, 80, 40], k = 2",
        "output": "120.0"
      },
      {
        "input": "quality = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], wage = [20, 30, 40, 50, 60, 70, 80, 90, 100, 110], k = 6",
        "output": "420.0"
      },
      {
        "input": "quality = [15, 20, 5, 10, 30], wage = [105, 150, 30, 70, 210], k = 3",
        "output": "210.0"
      },
      {
        "input": "quality = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], wage = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 5",
        "output": "250.0"
      },
      {
        "input": "quality = [9,18,27,36,45,54,63], wage = [81,162,243,324,405,486,567], k = 5",
        "output": "1215.0"
      },
      {
        "input": "quality = [8,8,8,8,8,8,8,8,8,8], wage = [32,32,32,32,32,32,32,32,32,32], k = 5",
        "output": "160.0"
      },
      {
        "input": "quality = [5, 15, 25, 35, 45, 55], wage = [35, 105, 175, 245, 315, 385], k = 4",
        "output": "560.0"
      },
      {
        "input": "quality = [20, 10, 30, 40, 50, 60, 70, 80, 90, 100], wage = [140, 70, 210, 280, 350, 420, 490, 560, 630, 700], k = 6",
        "output": "1470.0"
      },
      {
        "input": "quality = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], wage = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], k = 5",
        "output": "15000.0"
      },
      {
        "input": "quality = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], wage = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 10",
        "output": "100.0"
      },
      {
        "input": "quality = [1,3,2,5,4,6], wage = [1,9,4,25,16,36], k = 5",
        "output": "75.0"
      },
      {
        "input": "quality = [15,20,5,10,25], wage = [120,160,40,80,200], k = 5",
        "output": "600.0"
      },
      {
        "input": "quality = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], wage = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 8",
        "output": "360.0"
      },
      {
        "input": "quality = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], wage = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225], k = 7",
        "output": "196.0"
      },
      {
        "input": "quality = [1,1,1,1,1,1,1,1,1,1], wage = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "25.0"
      },
      {
        "input": "quality = [1, 3, 5, 7, 9, 11, 13], wage = [2, 6, 10, 14, 18, 22, 26], k = 5",
        "output": "50.0"
      },
      {
        "input": "quality = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], wage = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 7",
        "output": "49.0"
      },
      {
        "input": "quality = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], wage = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 8",
        "output": "3600.0"
      },
      {
        "input": "quality = [100,200,300,400,500,600,700,800,900,1000], wage = [100,200,300,400,500,600,700,800,900,1000], k = 5",
        "output": "1500.0"
      },
      {
        "input": "quality = [1, 3, 5, 7, 9, 11, 13], wage = [2, 6, 10, 14, 18, 22, 26], k = 4",
        "output": "32.0"
      },
      {
        "input": "quality = [4,7,2,5,6], wage = [32,56,16,40,48], k = 2",
        "output": "48.0"
      },
      {
        "input": "quality = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], wage = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5",
        "output": "25.0"
      },
      {
        "input": "quality = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], wage = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60], k = 9",
        "output": "270.0"
      },
      {
        "input": "quality = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], wage = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], k = 3",
        "output": "6.0"
      },
      {
        "input": "quality = [4, 5, 1, 2, 3], wage = [40, 50, 10, 20, 30], k = 2",
        "output": "30.0"
      },
      {
        "input": "quality = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], wage = [25, 50, 75, 100, 125, 150, 175, 200, 225, 250], k = 7",
        "output": "700.0"
      },
      {
        "input": "quality = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], wage = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 5",
        "output": "1500.0"
      },
      {
        "input": "quality = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], wage = [50,100,150,200,250,300,350,400,450,500,550,600,650,700,750], k = 8",
        "output": "1800.0"
      },
      {
        "input": "quality = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], wage = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 7",
        "output": "28.0"
      },
      {
        "input": "quality = [10, 12, 14, 16, 18, 20], wage = [70, 84, 98, 112, 126, 140], k = 5",
        "output": "490.0"
      },
      {
        "input": "quality = [2, 3, 5, 7, 11, 13], wage = [14, 21, 35, 49, 77, 91], k = 4",
        "output": "119.0"
      },
      {
        "input": "quality = [30, 10, 40, 20, 50], wage = [90, 30, 120, 60, 150], k = 3",
        "output": "180.0"
      },
      {
        "input": "quality = [2,4,6,8,10], wage = [10,20,30,40,50], k = 3",
        "output": "60.0"
      },
      {
        "input": "quality = [100, 200, 300, 400, 500], wage = [1000, 2000, 3000, 4000, 5000], k = 4",
        "output": "10000.0"
      },
      {
        "input": "quality = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], wage = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 5",
        "output": "25.0"
      },
      {
        "input": "quality = [4, 5, 6, 7, 8, 9], wage = [24, 30, 36, 42, 48, 54], k = 4",
        "output": "132.0"
      },
      {
        "input": "quality = [4,3,2,1], wage = [16,12,8,4], k = 2",
        "output": "12.0"
      },
      {
        "input": "quality = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], wage = [19, 17, 15, 13, 11, 9, 7, 5, 3, 1], k = 4",
        "output": "34.46153846153846"
      },
      {
        "input": "quality = [20, 30, 10, 40, 50], wage = [100, 150, 50, 200, 250], k = 4",
        "output": "500.0"
      },
      {
        "input": "quality = [15, 25, 35, 45, 55], wage = [105, 175, 245, 315, 385], k = 3",
        "output": "525.0"
      },
      {
        "input": "quality = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], wage = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 3",
        "output": "30.0"
      },
      {
        "input": "quality = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], wage = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], k = 5",
        "output": "27.0"
      },
      {
        "input": "quality = [7, 14, 21, 28, 35, 42, 49, 56, 63], wage = [14, 28, 42, 56, 70, 84, 98, 112, 126], k = 6",
        "output": "294.0"
      },
      {
        "input": "quality = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], wage = [70, 140, 210, 280, 350, 420, 490, 560, 630, 700], k = 7",
        "output": "1960.0"
      },
      {
        "input": "quality = [10,20,30,40,50], wage = [50,40,30,20,10], k = 3",
        "output": "120.0"
      },
      {
        "input": "quality = [4, 2, 8, 5, 10, 7], wage = [40, 20, 80, 50, 100, 70], k = 4",
        "output": "180.0"
      },
      {
        "input": "quality = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], wage = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], k = 3",
        "output": "33.75"
      },
      {
        "input": "quality = [10,20,30,40,50,60], wage = [50,100,150,200,250,300], k = 6",
        "output": "1050.0"
      },
      {
        "input": "quality = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], wage = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 6",
        "output": "210.0"
      },
      {
        "input": "quality = [5,3,8,6,2], wage = [45,30,60,48,12], k = 3",
        "output": "100.0"
      },
      {
        "input": "quality = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], wage = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 5",
        "output": "25.0"
      },
      {
        "input": "quality = [5, 10, 15, 20, 25, 30, 35], wage = [50, 100, 150, 200, 250, 300, 350], k = 4",
        "output": "500.0"
      },
      {
        "input": "quality = [1, 1, 1, 1, 1, 1, 1, 1], wage = [1, 2, 3, 4, 5, 6, 7, 8], k = 5",
        "output": "25.0"
      },
      {
        "input": "quality = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], wage = [700, 1400, 2100, 2800, 3500, 4200, 4900, 5600, 6300, 7000], k = 7",
        "output": "19600.0"
      },
      {
        "input": "quality = [15, 30, 45, 60, 75, 90, 105], wage = [45, 90, 135, 180, 225, 270, 315], k = 5",
        "output": "675.0"
      },
      {
        "input": "quality = [5,2,10,15,20,1], wage = [100,60,200,300,400,50], k = 3",
        "output": "400.0"
      },
      {
        "input": "quality = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], wage = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 7",
        "output": "2800.0"
      },
      {
        "input": "quality = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], wage = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000], k = 5",
        "output": "3000.0"
      },
      {
        "input": "quality = [100,200,150,50,250], wage = [500,1000,750,250,1250], k = 3",
        "output": "1500.0"
      },
      {
        "input": "quality = [1,2,3,4,5,6,7,8,9,10], wage = [10,20,30,40,50,60,70,80,90,100], k = 7",
        "output": "280.0"
      },
      {
        "input": "quality = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], wage = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 5",
        "output": "150.0"
      },
      {
        "input": "quality = [1,3,5,7,9,11,13,15,17,19], wage = [5,15,25,35,45,55,65,75,85,95], k = 6",
        "output": "180.0"
      },
      {
        "input": "quality = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], wage = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 8",
        "output": "360.0"
      },
      {
        "input": "quality = [1, 3, 2, 4, 5], wage = [3, 9, 6, 12, 15], k = 3",
        "output": "18.0"
      },
      {
        "input": "quality = [3, 6, 15, 20, 12], wage = [9, 18, 45, 60, 36], k = 3",
        "output": "63.0"
      },
      {
        "input": "quality = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], wage = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 3",
        "output": "9.0"
      },
      {
        "input": "quality = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], wage = [14, 28, 42, 56, 70, 84, 98, 112, 126, 140, 154, 168, 182, 196, 210], k = 7",
        "output": "392.0"
      },
      {
        "input": "quality = [5,15,10,20,25], wage = [75,225,150,300,375], k = 3",
        "output": "450.0"
      },
      {
        "input": "quality = [2,4,6,8,10], wage = [10,20,30,40,50], k = 4",
        "output": "100.0"
      },
      {
        "input": "quality = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], wage = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500], k = 6",
        "output": "1050.0"
      },
      {
        "input": "quality = [1, 2, 4, 8, 16, 32, 64], wage = [1, 2, 4, 8, 16, 32, 64], k = 4",
        "output": "15.0"
      },
      {
        "input": "quality = [3,6,9,12,15,18,21,24,27,30], wage = [6,12,18,24,30,36,42,48,54,60], k = 6",
        "output": "126.0"
      },
      {
        "input": "quality = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], wage = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145], k = 6",
        "output": "180.0"
      },
      {
        "input": "quality = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], wage = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], k = 5",
        "output": "31.0"
      },
      {
        "input": "quality = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], wage = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 10",
        "output": "100.0"
      },
      {
        "input": "quality = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41], wage = [4, 6, 10, 14, 22, 26, 34, 38, 46, 58, 62, 74, 82], k = 8",
        "output": "154.0"
      },
      {
        "input": "quality = [5, 8, 12, 15, 20, 25, 30], wage = [10, 16, 24, 30, 40, 50, 60], k = 3",
        "output": "50.0"
      },
      {
        "input": "quality = [15, 10, 5, 25, 20], wage = [90, 60, 30, 150, 120], k = 3",
        "output": "180.0"
      },
      {
        "input": "quality = [15, 25, 10, 40, 30], wage = [105, 175, 70, 280, 210], k = 3",
        "output": "350.0"
      },
      {
        "input": "quality = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60], wage = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120], k = 8",
        "output": "432.0"
      },
      {
        "input": "quality = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], wage = [10, 40, 90, 160, 250, 360, 490, 640, 810, 1000], k = 6",
        "output": "1260.0"
      },
      {
        "input": "quality = [8,6,4,2,10], wage = [96,72,48,24,120], k = 4",
        "output": "240.0"
      },
      {
        "input": "quality = [7,14,3,11,9], wage = [28,56,12,44,36], k = 4",
        "output": "120.0"
      },
      {
        "input": "quality = [100, 200, 300, 400, 500, 600, 700], wage = [700, 1400, 2100, 2800, 3500, 4200, 4900], k = 5",
        "output": "10500.0"
      },
      {
        "input": "quality = [3, 5, 2, 8, 7], wage = [6, 10, 4, 16, 14], k = 3",
        "output": "20.0"
      },
      {
        "input": "quality = [5,3,10,2,4], wage = [50,30,100,20,40], k = 3",
        "output": "90.0"
      }
    ]
  },
  {
    "id": 1063,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Array",
      "Monotonic Stack"
    ],
    "problemDescription": "Given an integer array nums, return the number of non-empty subarrays with the leftmost element of the subarray\u00a0not larger than other elements in the subarray.\nA subarray is a contiguous part of an array.\n\u00a0\nExample 1:\n\nInput: nums = [1,4,2,5,3]\nOutput: 11\nExplanation: There are 11 valid subarrays: [1],[4],[2],[5],[3],[1,4],[2,5],[1,4,2],[2,5,3],[1,4,2,5],[1,4,2,5,3].\n\nExample 2:\n\nInput: nums = [3,2,1]\nOutput: 3\nExplanation: The 3 valid subarrays are: [3],[2],[1].\n\nExample 3:\n\nInput: nums = [2,2,2]\nOutput: 6\nExplanation: There are 6 valid subarrays: [2],[2],[2],[2,2],[2,2],[2,2,2].\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 5 * 104\n0 <= nums[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def validSubarrays(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [10,5,10,4,15]",
        "output": "7"
      },
      {
        "input": "nums = [0,1,2,3,4,5]",
        "output": "21"
      },
      {
        "input": "nums = [1,2,2,1]",
        "output": "8"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [2,2,2]",
        "output": "6"
      },
      {
        "input": "nums = [0,0,0,0,0]",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "15"
      },
      {
        "input": "nums = [10,5,8,3,9,4,6]",
        "output": "12"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "15"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,0,5]",
        "output": "25"
      },
      {
        "input": "nums = [3,2,1]",
        "output": "3"
      },
      {
        "input": "nums = [1,3,2,4,3]",
        "output": "11"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "5"
      },
      {
        "input": "nums = [100000,0,100000,0,100000]",
        "output": "9"
      },
      {
        "input": "nums = [5,4,3,2,1,0]",
        "output": "6"
      },
      {
        "input": "nums = [1,3,5,7,9,7,5,3,1]",
        "output": "29"
      },
      {
        "input": "nums = [1,0,2,0,3,0]",
        "output": "12"
      },
      {
        "input": "nums = [1,4,2,5,3]",
        "output": "11"
      },
      {
        "input": "nums = [10,5,9,2,3,1]",
        "output": "8"
      },
      {
        "input": "nums = [100000,99999,99998,99997,99996]",
        "output": "5"
      },
      {
        "input": "nums = [50,45,40,35,30,25,20,15,10,5]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]",
        "output": "35"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "55"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "20"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "210"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,0]",
        "output": "11"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]",
        "output": "30"
      },
      {
        "input": "nums = [5,6,7,8,9,5,6,7,8,9]",
        "output": "35"
      },
      {
        "input": "nums = [1,2,2,2,2,2,2,2]",
        "output": "36"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5]",
        "output": "35"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]",
        "output": "60"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1]",
        "output": "41"
      },
      {
        "input": "nums = [1, 1, 1, 1, 2, 2, 2, 3, 3, 4]",
        "output": "55"
      },
      {
        "input": "nums = [7, 8, 9, 10, 5, 6, 2, 3, 4, 1]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1]",
        "output": "29"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "120"
      },
      {
        "input": "nums = [100000,99999,99998,99997,99996,99995,99994,99993,99992,99991]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,2]",
        "output": "55"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50]",
        "output": "55"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "109"
      },
      {
        "input": "nums = [5,4,3,2,1,5,4,3,2,1]",
        "output": "15"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "55"
      },
      {
        "input": "nums = [10,20,10,20,10,20,10,20,10,20]",
        "output": "35"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]",
        "output": "15"
      },
      {
        "input": "nums = [5,3,5,3,5,3,5,3,5,3]",
        "output": "30"
      },
      {
        "input": "nums = [1,3,2,4,3,5,4,6,5,7]",
        "output": "35"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1,2,3,4,5]",
        "output": "87"
      },
      {
        "input": "nums = [7,1,5,2,6,3,4,8,9,10,1]",
        "output": "36"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0]",
        "output": "55"
      },
      {
        "input": "nums = [10, 20, 10, 30, 20, 40, 30, 50, 40, 60]",
        "output": "35"
      },
      {
        "input": "nums = [100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0]",
        "output": "30"
      },
      {
        "input": "nums = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8]",
        "output": "71"
      },
      {
        "input": "nums = [10, 10, 10, 10, 1, 1, 1, 1, 1, 10]",
        "output": "31"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7]",
        "output": "55"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5]",
        "output": "265"
      },
      {
        "input": "nums = [0, 0, 1, 1, 0, 1, 0, 1, 0, 0]",
        "output": "37"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10,0]",
        "output": "11"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5]",
        "output": "55"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "210"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]",
        "output": "10"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10]",
        "output": "109"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "55"
      },
      {
        "input": "nums = [5,5,4,4,3,3,2,2,1,1]",
        "output": "15"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "55"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "210"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2]",
        "output": "35"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,10]",
        "output": "11"
      },
      {
        "input": "nums = [10,1,20,2,30,3,40,4,50,5,60,6,70,7,80,8,90,9,100,10]",
        "output": "110"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 2, 4, 6, 8, 10]",
        "output": "25"
      },
      {
        "input": "nums = [5, 3, 5, 3, 5, 3, 5, 3, 5, 3]",
        "output": "30"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3]",
        "output": "78"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]",
        "output": "35"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]",
        "output": "11"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2]",
        "output": "29"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10]",
        "output": "47"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2]",
        "output": "96"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "92"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "55"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "63"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "210"
      },
      {
        "input": "nums = [100,200,150,300,250,400,350,500,450,600,550,700]",
        "output": "48"
      },
      {
        "input": "nums = [4, 3, 2, 1, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
        "output": "45"
      },
      {
        "input": "nums = [5, 5, 4, 4, 3, 3, 2, 2, 1, 1]",
        "output": "15"
      },
      {
        "input": "nums = [5,4,4,4,3,3,2,2,2,1,1]",
        "output": "19"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1]",
        "output": "91"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9]",
        "output": "89"
      },
      {
        "input": "nums = [1,3,2,4,3,5,4,6,5,7,1,3,2,4,3,5,4,6,5,7]",
        "output": "80"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "nums = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]",
        "output": "210"
      },
      {
        "input": "nums = [1,3,2,3,4,2,1,5,6,7,8]",
        "output": "35"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "10"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
        "output": "35"
      },
      {
        "input": "nums = [1,3,5,2,4,6,7,8,9,10]",
        "output": "41"
      },
      {
        "input": "nums = [100,50,100,50,100,50,100,50,100,50,100,50,100,50,100,50,100,50,100,50]",
        "output": "110"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "76"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "76"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "120"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "55"
      },
      {
        "input": "nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "46"
      },
      {
        "input": "nums = [2,1,2,1,2,1,2,1,2,1]",
        "output": "30"
      },
      {
        "input": "nums = [5,3,5,2,5,1,4,3]",
        "output": "12"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0]",
        "output": "10"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1]",
        "output": "30"
      },
      {
        "input": "nums = [10,20,30,40,50,10,20,30,40,50,10,20,30,40,50]",
        "output": "60"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "120"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]",
        "output": "35"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11]",
        "output": "66"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6]",
        "output": "35"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]",
        "output": "35"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "75"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10,1,3,2,4,5,6,7,8,9,10]",
        "output": "104"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]",
        "output": "120"
      },
      {
        "input": "nums = [4,4,4,4,4,4,4,4,4,4]",
        "output": "55"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]",
        "output": "60"
      },
      {
        "input": "nums = [1, 1, 2, 2, 1, 1, 3, 3, 2, 2]",
        "output": "39"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "55"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "120"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "210"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "35"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "120"
      },
      {
        "input": "nums = [100, 100, 99, 99, 98, 98, 97, 97, 96, 96]",
        "output": "15"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "55"
      },
      {
        "input": "nums = [5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1]",
        "output": "30"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12]",
        "output": "120"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "120"
      },
      {
        "input": "nums = [5,5,4,4,3,3,2,2,1,1,1,2,2,3,3,4,4,5,5]",
        "output": "78"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "55"
      },
      {
        "input": "nums = [19,17,15,13,11,9,7,5,3,1]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,1,1,2,2]",
        "output": "73"
      },
      {
        "input": "nums = [5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]",
        "output": "64"
      },
      {
        "input": "nums = [5, 3, 6, 7, 2, 4, 1, 8, 9, 0]",
        "output": "17"
      },
      {
        "input": "nums = [100,200,150,300,250,400,350,500,450,600,100,200,150,300]",
        "output": "47"
      },
      {
        "input": "nums = [7,6,5,4,3,2,1,2,3,4]",
        "output": "16"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]",
        "output": "125"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2,3,2,1]",
        "output": "43"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "120"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2]",
        "output": "29"
      }
    ]
  },
  {
    "id": 2781,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "problemDescription": "You are given a string word and an array of strings forbidden.\nA string is called valid if none of its substrings are present in forbidden.\nReturn the length of the longest valid substring of the string word.\nA substring is a contiguous sequence of characters in a string, possibly empty.\n\u00a0\nExample 1:\n\nInput: word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]\nOutput: 4\nExplanation: There are 11 valid substrings in word: \"c\", \"b\", \"a\", \"ba\", \"aa\", \"bc\", \"baa\", \"aab\", \"ab\", \"abc\" and \"aabc\". The length of the longest valid substring is 4. \nIt can be shown that all other substrings contain either \"aaa\" or \"cb\" as a substring. \nExample 2:\n\nInput: word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]\nOutput: 4\nExplanation: There are 11 valid substrings in word: \"l\", \"t\", \"c\", \"o\", \"d\", \"tc\", \"co\", \"od\", \"tco\", \"cod\", and \"tcod\". The length of the longest valid substring is 4.\nIt can be shown that all other substrings contain either \"de\", \"le\", or \"e\" as a substring. \n\n\u00a0\nConstraints:\n\n1 <= word.length <= 105\nword consists only of lowercase English letters.\n1 <= forbidden.length <= 105\n1 <= forbidden[i].length <= 10\nforbidden[i] consists only of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:\n        ",
    "testCases": [
      {
        "input": "word = \"zzzzzzzzzz\", forbidden = [\"zz\"]",
        "output": "1"
      },
      {
        "input": "word = \"abacab\", forbidden = [\"ba\",\"ca\"]",
        "output": "2"
      },
      {
        "input": "word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]",
        "output": "4"
      },
      {
        "input": "word = \"abcde\", forbidden = [\"fgh\"]",
        "output": "5"
      },
      {
        "input": "word = \"aaaaaaa\", forbidden = [\"aa\"]",
        "output": "1"
      },
      {
        "input": "word = \"aaaabaaa\", forbidden = [\"aa\"]",
        "output": "3"
      },
      {
        "input": "word = \"abcde\", forbidden = [\"fgh\",\"ijk\"]",
        "output": "5"
      },
      {
        "input": "word = \"xyz\", forbidden = [\"xy\",\"yz\"]",
        "output": "1"
      },
      {
        "input": "word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]",
        "output": "4"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyz\", forbidden = [\"abc\",\"xyz\"]",
        "output": "24"
      },
      {
        "input": "word = \"abcd\", forbidden = [\"a\",\"b\",\"c\",\"d\"]",
        "output": "0"
      },
      {
        "input": "word = \"abacaba\", forbidden = [\"ba\",\"ca\"]",
        "output": "2"
      },
      {
        "input": "word = \"abcde\", forbidden = [\"ab\",\"bc\",\"cd\",\"de\"]",
        "output": "1"
      },
      {
        "input": "word = \"aaabbbcccddd\", forbidden = [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"abc\"]",
        "output": "4"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyz\", forbidden = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"]",
        "output": "4"
      },
      {
        "input": "word = \"pppppppppppppppppppppppppppppppppp\", forbidden = [\"pp\", \"p\"]",
        "output": "0"
      },
      {
        "input": "word = \"abcdefghijabcdefghij\", forbidden = [\"abc\", \"def\", \"ghi\", \"jij\", \"fed\", \"cba\"]",
        "output": "5"
      },
      {
        "input": "word = \"abcdefghijabcdefghij\", forbidden = [\"abcdefghij\", \"abc\", \"def\", \"ghi\", \"jih\", \"ihg\", \"fed\", \"cba\"]",
        "output": "5"
      },
      {
        "input": "word = \"xyxzyzyxzyzyzxzyzx\", forbidden = [\"xyz\", \"zyx\", \"xzy\"]",
        "output": "7"
      },
      {
        "input": "word = \"hellothere\", forbidden = [\"he\", \"lo\", \"th\", \"er\", \"ere\"]",
        "output": "3"
      },
      {
        "input": "word = \"xyzxyzxyzxyz\", forbidden = [\"xy\", \"yz\", \"zx\", \"xyz\"]",
        "output": "1"
      },
      {
        "input": "word = \"abcdefghij\", forbidden = [\"abc\", \"def\", \"ghi\", \"j\"]",
        "output": "4"
      },
      {
        "input": "word = \"abcdeabcdeabcde\", forbidden = [\"abc\", \"cde\", \"dea\", \"bcd\"]",
        "output": "3"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyz\", forbidden = [\"abc\",\"bcd\",\"cde\",\"def\",\"efg\",\"fgh\",\"ghi\",\"hij\",\"ijk\",\"jkl\",\"klm\",\"lmn\",\"mno\",\"nop\",\"opq\",\"pqr\",\"qrs\",\"rst\",\"stu\",\"tuv\",\"uvw\",\"vwx\",\"wxy\",\"xyz\"]",
        "output": "2"
      },
      {
        "input": "word = \"pneumonoultramicroscopicsilicovolcanoconiosis\", forbidden = [\"pneumo\", \"ultra\", \"micro\", \"scopic\", \"silico\", \"volcano\", \"conio\", \"osis\", \"pneumonoultramicro\", \"microscopic\", \"scopicsilico\", \"silicovolcano\", \"volcanoconi\", \"conoosis\"]",
        "output": "11"
      },
      {
        "input": "word = \"qwertyuiopasdfghjklzxcvbnm\", forbidden = [\"qwe\", \"ert\", \"rty\", \"tyu\", \"yui\", \"uio\", \"iop\", \"asd\", \"sdf\", \"dfg\", \"fgh\", \"ghj\", \"hjk\", \"jkl\", \"klz\", \"lzx\", \"zxc\", \"xcv\", \"cvb\", \"vbn\", \"bnm\"]",
        "output": "4"
      },
      {
        "input": "word = \"mississippi\", forbidden = [\"iss\", \"sip\", \"issi\", \"ippi\"]",
        "output": "4"
      },
      {
        "input": "word = \"abcabcabcabc\", forbidden = [\"abcabc\", \"bcab\", \"cababc\"]",
        "output": "5"
      },
      {
        "input": "word = \"aaaaaaaaaabbbbbbbbbb\", forbidden = [\"aaa\", \"bbb\", \"ab\", \"ba\", \"aab\", \"bba\"]",
        "output": "2"
      },
      {
        "input": "word = \"banana\", forbidden = [\"na\", \"an\", \"ba\", \"baa\", \"nan\", \"ban\", \"anan\"]",
        "output": "1"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyz\", forbidden = [\"xyz\", \"uvw\", \"rst\", \"qpo\", \"lmn\", \"fed\", \"cba\"]",
        "output": "13"
      },
      {
        "input": "word = \"banana\", forbidden = [\"ana\", \"nan\", \"ba\", \"na\", \"an\"]",
        "output": "1"
      },
      {
        "input": "word = \"qwertyuiopasdfghjklzxcvbnm\", forbidden = [\"qwe\", \"rty\", \"uiop\", \"asdf\", \"ghjk\", \"lzx\", \"cvb\", \"nm\"]",
        "output": "6"
      },
      {
        "input": "word = \"xyzxyzxyzxyz\", forbidden = [\"xy\", \"yz\", \"zx\"]",
        "output": "1"
      },
      {
        "input": "word = \"aaaaabbbbbcccccc\", forbidden = [\"aaaa\",\"bbbb\",\"cccc\",\"ab\",\"bc\",\"ca\"]",
        "output": "3"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", forbidden = [\"aabb\", \"bbcc\", \"ccdd\", \"ddee\", \"eefg\", \"fghi\", \"ghij\", \"hijk\", \"ijkl\", \"jklm\", \"klmn\", \"lmno\", \"mnop\", \"nopq\", \"opqr\", \"pqr\", \"qrs\", \"rst\", \"stu\", \"tuv\", \"uvw\", \"vwx\", \"wxy\", \"xyz\", \"zyz\"]",
        "output": "45"
      },
      {
        "input": "word = \"abcabcabcabc\", forbidden = [\"abc\", \"cab\", \"bca\"]",
        "output": "2"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyz\", forbidden = [\"abc\", \"xyz\", \"mnop\", \"qrst\"]",
        "output": "14"
      },
      {
        "input": "word = \"ababababab\", forbidden = [\"aba\", \"bab\", \"aaa\"]",
        "output": "2"
      },
      {
        "input": "word = \"mississippi\", forbidden = [\"issi\",\"iss\",\"ss\",\"ssip\",\"ippi\"]",
        "output": "4"
      },
      {
        "input": "word = \"xyzxyzxyz\", forbidden = [\"xyz\", \"xy\", \"yz\"]",
        "output": "2"
      },
      {
        "input": "word = \"abcabcabcabcabc\", forbidden = [\"abc\", \"bca\", \"cab\"]",
        "output": "2"
      },
      {
        "input": "word = \"abababababababab\", forbidden = [\"aba\", \"bab\", \"abb\"]",
        "output": "2"
      },
      {
        "input": "word = \"hellohellohellohello\", forbidden = [\"he\", \"el\", \"ll\", \"lo\", \"oh\"]",
        "output": "1"
      },
      {
        "input": "word = \"xyxyxyxyxyxyxyxy\", forbidden = [\"xyx\",\"yxy\",\"xyxy\"]",
        "output": "2"
      },
      {
        "input": "word = \"abacabadabacaba\", forbidden = [\"aba\", \"abc\", \"bac\"]",
        "output": "5"
      },
      {
        "input": "word = \"mississippi\", forbidden = [\"issi\", \"iss\", \"is\", \"mp\", \"ss\", \"pp\"]",
        "output": "3"
      },
      {
        "input": "word = \"abcdefghij\", forbidden = [\"abc\", \"bcd\", \"cde\", \"def\", \"efg\", \"fgh\", \"ghi\", \"hij\", \"ijk\", \"jkl\"]",
        "output": "2"
      },
      {
        "input": "word = \"mississippi\", forbidden = [\"iss\", \"issi\", \"ippi\", \"issipp\", \"missi\", \"sissi\", \"ssippi\"]",
        "output": "5"
      },
      {
        "input": "word = \"nolongerforbidden\", forbidden = [\"for\", \"bidden\", \"no\", \"longer\"]",
        "output": "7"
      },
      {
        "input": "word = \"qwertypoiuytrewq\", forbidden = [\"qw\", \"we\", \"er\", \"rt\", \"ty\", \"yu\", \"ui\", \"io\", \"op\"]",
        "output": "11"
      },
      {
        "input": "word = \"banana\", forbidden = [\"na\", \"ba\", \"an\"]",
        "output": "1"
      },
      {
        "input": "word = \"thisthisthisthisthis\", forbidden = [\"thi\", \"hist\", \"isth\", \"histh\", \"thist\"]",
        "output": "3"
      },
      {
        "input": "word = \"mississippi\", forbidden = [\"iss\", \"issi\", \"ippi\"]",
        "output": "5"
      },
      {
        "input": "word = \"abababababababab\", forbidden = [\"aba\", \"bab\", \"aab\", \"bba\"]",
        "output": "2"
      },
      {
        "input": "word = \"qwertyuiopasdfghjklzxcvbnm\", forbidden = [\"qw\", \"er\", \"ty\", \"ui\", \"op\", \"as\", \"df\", \"gh\", \"jk\", \"kl\", \"zx\", \"cv\", \"vb\", \"bn\", \"nm\"]",
        "output": "2"
      },
      {
        "input": "word = \"abcdabcdabcdabcdabcdabcd\", forbidden = [\"abcd\", \"bcda\", \"cdab\", \"dabc\"]",
        "output": "3"
      },
      {
        "input": "word = \"abacaxabcd\", forbidden = [\"ab\", \"ca\", \"bc\", \"d\"]",
        "output": "3"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", forbidden = [\"aa\", \"bb\", \"cc\", \"zz\", \"yy\"]",
        "output": "44"
      },
      {
        "input": "word = \"banana\", forbidden = [\"ana\", \"nan\", \"ban\", \"ana\", \"naa\"]",
        "output": "2"
      },
      {
        "input": "word = \"mississippi\", forbidden = [\"issi\", \"iss\", \"is\", \"i\", \"s\", \"p\", \"mp\"]",
        "output": "1"
      },
      {
        "input": "word = \"abracadabra\", forbidden = [\"abr\", \"rac\", \"ada\", \"bra\", \"cab\", \"cad\"]",
        "output": "3"
      },
      {
        "input": "word = \"abcdefghij\", forbidden = [\"abcdefghij\",\"abcdefghi\",\"bcdefgh\",\"cdefgh\",\"defgh\",\"efgh\",\"fgh\",\"gh\",\"h\",\"ij\"]",
        "output": "7"
      },
      {
        "input": "word = \"abacabadabacaba\", forbidden = [\"aba\", \"bad\", \"cab\", \"abc\"]",
        "output": "4"
      },
      {
        "input": "word = \"aaaaaaaaaa\", forbidden = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]",
        "output": "0"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", forbidden = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\"]",
        "output": "2"
      },
      {
        "input": "word = \"mnopqrstuvwxyzabcdefghijkl\", forbidden = [\"mnop\", \"qrst\", \"uvwx\", \"yzab\", \"cdef\", \"ghij\", \"klmn\", \"opqr\", \"stuv\", \"wxyz\"]",
        "output": "6"
      },
      {
        "input": "word = \"aabbccddeeff\", forbidden = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"]",
        "output": "2"
      },
      {
        "input": "word = \"abcabcabcabcabcabcabc\", forbidden = [\"abcabc\", \"bcabc\", \"cabc\", \"abca\", \"bca\", \"cab\", \"abc\"]",
        "output": "2"
      },
      {
        "input": "word = \"abacabadabacaba\", forbidden = [\"aba\", \"aca\", \"bad\"]",
        "output": "4"
      },
      {
        "input": "word = \"thisisaverylongwordthatneedstobecut\", forbidden = [\"this\", \"is\", \"very\", \"long\", \"word\", \"that\", \"needs\", \"to\", \"be\", \"cut\"]",
        "output": "7"
      },
      {
        "input": "word = \"abacabacabacaba\", forbidden = [\"aba\", \"aca\", \"bab\"]",
        "output": "3"
      },
      {
        "input": "word = \"abacabadabacaba\", forbidden = [\"aba\",\"abc\",\"bac\"]",
        "output": "5"
      },
      {
        "input": "word = \"thisisateststring\", forbidden = [\"test\",\"string\",\"is\",\"a\",\"this\"]",
        "output": "8"
      },
      {
        "input": "word = \"mississippi\", forbidden = [\"issi\", \"sip\", \"iss\", \"ippi\", \"ppi\"]",
        "output": "4"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyz\", forbidden = [\"abc\", \"xyz\", \"mnop\"]",
        "output": "14"
      }
    ]
  },
  {
    "id": 2719,
    "difficulty": "Hard",
    "tags": [
      "Math",
      "String",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given two numeric strings num1 and num2 and two integers max_sum and min_sum. We denote an integer x to be good if:\n\nnum1 <= x <= num2\nmin_sum <= digit_sum(x) <= max_sum.\n\nReturn the number of good integers. Since the answer may be large, return it modulo 109 + 7.\nNote that digit_sum(x) denotes the sum of the digits of x.\n\u00a0\nExample 1:\n\nInput: num1 = \"1\", num2 = \"12\", min_sum = 1, max_sum = 8\nOutput: 11\nExplanation: There are 11 integers whose sum of digits lies between 1 and 8 are 1,2,3,4,5,6,7,8,10,11, and 12. Thus, we return 11.\n\nExample 2:\n\nInput: num1 = \"1\", num2 = \"5\", min_sum = 1, max_sum = 5\nOutput: 5\nExplanation: The 5 integers whose sum of digits lies between 1 and 5 are 1,2,3,4, and 5. Thus, we return 5.\n\n\u00a0\nConstraints:\n\n1 <= num1 <= num2 <= 1022\n1 <= min_sum <= max_sum <= 400\n\n",
    "starterCode": "class Solution:\n    def count(self, num1: str, num2: str, min_sum: int, max_sum: int) -> int:\n        ",
    "testCases": [
      {
        "input": "num1 = \"1\", num2 = \"5\", min_sum = 1, max_sum = 5",
        "output": "5"
      },
      {
        "input": "num1 = \"1\", num2 = \"1000000000000000000000000000000\", min_sum = 300, max_sum = 400",
        "output": "0"
      },
      {
        "input": "num1 = \"999999999999999999999999999999\", num2 = \"1000000000000000000000000000000\", min_sum = 1, max_sum = 400",
        "output": "2"
      },
      {
        "input": "num1 = \"123456789012345678901234567890\", num2 = \"987654321098765432109876543210\", min_sum = 100, max_sum = 200",
        "output": "559200081"
      },
      {
        "input": "num1 = \"1\", num2 = \"1000000000000000000000000000000\", min_sum = 1, max_sum = 1",
        "output": "31"
      },
      {
        "input": "num1 = \"10\", num2 = \"100\", min_sum = 2, max_sum = 10",
        "output": "53"
      },
      {
        "input": "num1 = \"999999999999999999999999999999\", num2 = \"999999999999999999999999999999\", min_sum = 81, max_sum = 81",
        "output": "0"
      },
      {
        "input": "num1 = \"1000\", num2 = \"2000\", min_sum = 10, max_sum = 20",
        "output": "715"
      },
      {
        "input": "num1 = \"50\", num2 = \"150\", min_sum = 5, max_sum = 20",
        "output": "91"
      },
      {
        "input": "num1 = \"1000\", num2 = \"2000\", min_sum = 10, max_sum = 30",
        "output": "835"
      },
      {
        "input": "num1 = \"50\", num2 = \"150\", min_sum = 5, max_sum = 15",
        "output": "85"
      },
      {
        "input": "num1 = \"1\", num2 = \"12\", min_sum = 1, max_sum = 8",
        "output": "11"
      },
      {
        "input": "num1 = \"999999999999999999999999999999\", num2 = \"1000000000000000000000000000000\", min_sum = 100, max_sum = 200",
        "output": "0"
      },
      {
        "input": "num1 = \"11111111111111111111111111111\", num2 = \"22222222222222222222222222222\", min_sum = 30, max_sum = 60",
        "output": "182368529"
      },
      {
        "input": "num1 = \"1000000000000000000000000000000\", num2 = \"999999999999999999999999999999\", min_sum = 1, max_sum = 400",
        "output": "0"
      },
      {
        "input": "num1 = \"500000000000000000000000000000\", num2 = \"500000000000000000000000000001\", min_sum = 50, max_sum = 50",
        "output": "0"
      },
      {
        "input": "num1 = \"100000000000000000000000000000\", num2 = \"200000000000000000000000000000\", min_sum = 150, max_sum = 250",
        "output": "752538386"
      },
      {
        "input": "num1 = \"1\", num2 = \"100000000000000000000000000000\", min_sum = 1, max_sum = 100",
        "output": "663692512"
      },
      {
        "input": "num1 = \"1000000000000000000000000000000000000000\", num2 = \"1000000000000000000000000000000000000010\", min_sum = 1, max_sum = 10",
        "output": "11"
      },
      {
        "input": "num1 = \"1\", num2 = \"1000000000000000000000000000000\", min_sum = 1, max_sum = 200",
        "output": "48265017"
      },
      {
        "input": "num1 = \"1010101010101010101010101010101\", num2 = \"9090909090909090909090909090909\", min_sum = 50, max_sum = 150",
        "output": "762258132"
      },
      {
        "input": "num1 = \"111111111111111111111111111110\", num2 = \"111111111111111111111111111119\", min_sum = 5, max_sum = 50",
        "output": "10"
      },
      {
        "input": "num1 = \"555555555555555555555555555555\", num2 = \"666666666666666666666666666666\", min_sum = 120, max_sum = 130",
        "output": "562403818"
      },
      {
        "input": "num1 = \"100000000000000000000000000000\", num2 = \"200000000000000000000000000000\", min_sum = 10, max_sum = 20",
        "output": "81870141"
      },
      {
        "input": "num1 = \"200000000000000000000000000000\", num2 = \"200000000000000000000000000005\", min_sum = 5, max_sum = 15",
        "output": "3"
      },
      {
        "input": "num1 = \"1234567890\", num2 = \"9876543210\", min_sum = 1, max_sum = 99",
        "output": "641975265"
      },
      {
        "input": "num1 = \"1000000000\", num2 = \"10000000000000000000\", min_sum = 1, max_sum = 400",
        "output": "498"
      },
      {
        "input": "num1 = \"999999999999999999999999999990\", num2 = \"999999999999999999999999999999\", min_sum = 81, max_sum = 89",
        "output": "0"
      },
      {
        "input": "num1 = \"2000000000000000000000000000000\", num2 = \"2999999999999999999999999999999\", min_sum = 100, max_sum = 200",
        "output": "648249887"
      },
      {
        "input": "num1 = \"1000000000000000000000000000000\", num2 = \"1000000000000000000000000000001\", min_sum = 1, max_sum = 1",
        "output": "1"
      },
      {
        "input": "num1 = \"1000000000000000000000000000000000000000\", num2 = \"2000000000000000000000000000000000000000\", min_sum = 100, max_sum = 200",
        "output": "416584880"
      },
      {
        "input": "num1 = \"100000000000000000000000000000000000000000000000000000000000\", num2 = \"100000000000000000000000000000000000000000000000000000000001\", min_sum = 1, max_sum = 1",
        "output": "1"
      },
      {
        "input": "num1 = \"123456789012345678901234567890\", num2 = \"987654321098765432109876543210\", min_sum = 180, max_sum = 220",
        "output": "514957697"
      },
      {
        "input": "num1 = \"1234567890123456789012345678901\", num2 = \"9876543210987654321098765432109\", min_sum = 100, max_sum = 300",
        "output": "216561067"
      },
      {
        "input": "num1 = \"111111111111111111111111111111\", num2 = \"999999999999999999999999999999\", min_sum = 200, max_sum = 300",
        "output": "838989111"
      },
      {
        "input": "num1 = \"500000000000000000000000000000\", num2 = \"600000000000000000000000000000\", min_sum = 150, max_sum = 250",
        "output": "690064938"
      },
      {
        "input": "num1 = \"99999999999999999999999999999\", num2 = \"999999999999999999999999999999\", min_sum = 250, max_sum = 350",
        "output": "470298279"
      },
      {
        "input": "num1 = \"500000000000000000000000000000\", num2 = \"500000000000000000000000000001\", min_sum = 100, max_sum = 100",
        "output": "0"
      },
      {
        "input": "num1 = \"11111111111111111111\", num2 = \"22222222222222222222\", min_sum = 20, max_sum = 30",
        "output": "14575096"
      },
      {
        "input": "num1 = \"555555555555555555555555555555\", num2 = \"555555555555555555555555555560\", min_sum = 150, max_sum = 250",
        "output": "5"
      },
      {
        "input": "num1 = \"999999999999999999999999999999\", num2 = \"1000000000000000000000000000000\", min_sum = 200, max_sum = 300",
        "output": "1"
      },
      {
        "input": "num1 = \"123456789012345678901234567890\", num2 = \"123456789012345678901234567890\", min_sum = 45, max_sum = 45",
        "output": "0"
      },
      {
        "input": "num1 = \"111111111111111111111111111111\", num2 = \"888888888888888888888888888888\", min_sum = 200, max_sum = 300",
        "output": "785167291"
      },
      {
        "input": "num1 = \"1234567890123456789012345678901234567890\", num2 = \"9876543210987654321098765432109876543210\", min_sum = 150, max_sum = 250",
        "output": "254920565"
      },
      {
        "input": "num1 = \"3000000000000000000000000000000\", num2 = \"3100000000000000000000000000000\", min_sum = 30, max_sum = 60",
        "output": "62608771"
      },
      {
        "input": "num1 = \"111111111111111111111111111111\", num2 = \"222222222222222222222222222222\", min_sum = 36, max_sum = 72",
        "output": "886258813"
      },
      {
        "input": "num1 = \"900000000000000000000000000000\", num2 = \"9000000000000000000000000000001\", min_sum = 18, max_sum = 18",
        "output": "792480562"
      },
      {
        "input": "num1 = \"9999999999999999999999999999999999999999\", num2 = \"9999999999999999999999999999999999999999\", min_sum = 180, max_sum = 200",
        "output": "0"
      },
      {
        "input": "num1 = \"123456789\", num2 = \"987654321\", min_sum = 10, max_sum = 50",
        "output": "748923377"
      },
      {
        "input": "num1 = \"500000000000000000000000000000\", num2 = \"500000000000000000000000000001\", min_sum = 25, max_sum = 50",
        "output": "0"
      },
      {
        "input": "num1 = \"999999999999999999999999999999\", num2 = \"1000000000000000000000000000000\", min_sum = 1, max_sum = 9",
        "output": "1"
      },
      {
        "input": "num1 = \"100000000000000000000000000000\", num2 = \"999999999999999999999999999999\", min_sum = 1, max_sum = 400",
        "output": "999691307"
      },
      {
        "input": "num1 = \"500000000000000000000000000000\", num2 = \"599999999999999999999999999999\", min_sum = 200, max_sum = 250",
        "output": "121684856"
      },
      {
        "input": "num1 = \"1000000000000000000000000000000\", num2 = \"1000000000000000000000000000001\", min_sum = 1, max_sum = 9",
        "output": "2"
      },
      {
        "input": "num1 = \"500000000000000000000000000000\", num2 = \"600000000000000000000000000000\", min_sum = 100, max_sum = 120",
        "output": "792681732"
      },
      {
        "input": "num1 = \"50000000000000000000\", num2 = \"50000000000000000005\", min_sum = 25, max_sum = 35",
        "output": "0"
      },
      {
        "input": "num1 = \"100000000000000000000000000000\", num2 = \"110000000000000000000000000000\", min_sum = 1, max_sum = 10",
        "output": "124403621"
      },
      {
        "input": "num1 = \"999999999999999999999999999999\", num2 = \"1000000000000000000000000000000\", min_sum = 81, max_sum = 81",
        "output": "0"
      },
      {
        "input": "num1 = \"99999999999999999999\", num2 = \"100000000000000000000\", min_sum = 90, max_sum = 100",
        "output": "0"
      },
      {
        "input": "num1 = \"111111111111111111111111111111\", num2 = \"222222222222222222222222222222\", min_sum = 10, max_sum = 20",
        "output": "605921476"
      },
      {
        "input": "num1 = \"100000000000000000000000000000\", num2 = \"100000000000000000000000000010\", min_sum = 1, max_sum = 10",
        "output": "11"
      },
      {
        "input": "num1 = \"123456789012345678901234567890123456789012345678901234567890\", num2 = \"987654321098765432109876543210987654321098765432109876543210\", min_sum = 150, max_sum = 250",
        "output": "623296612"
      },
      {
        "input": "num1 = \"999999999999999999999999999990\", num2 = \"999999999999999999999999999999\", min_sum = 270, max_sum = 280",
        "output": "1"
      },
      {
        "input": "num1 = \"123456789012345678901234567890\", num2 = \"123456789012345678901234567891\", min_sum = 1, max_sum = 400",
        "output": "2"
      },
      {
        "input": "num1 = \"100000000000000000000000000000\", num2 = \"200000000000000000000000000000\", min_sum = 1, max_sum = 1",
        "output": "1"
      },
      {
        "input": "num1 = \"100000000000000000000000000001\", num2 = \"100000000000000000000000000010\", min_sum = 1, max_sum = 10",
        "output": "10"
      },
      {
        "input": "num1 = \"111111111111111111111111111111\", num2 = \"222222222222222222222222222222\", min_sum = 33, max_sum = 66",
        "output": "780304934"
      },
      {
        "input": "num1 = \"999999999999999999999999999999\", num2 = \"1000000000000000000000000000000\", min_sum = 150, max_sum = 250",
        "output": "0"
      },
      {
        "input": "num1 = \"222222222222222222222222222222\", num2 = \"333333333333333333333333333333\", min_sum = 44, max_sum = 66",
        "output": "688650163"
      },
      {
        "input": "num1 = \"999999999999999999999999999999\", num2 = \"1000000000000000000000000000000\", min_sum = 270, max_sum = 271",
        "output": "1"
      },
      {
        "input": "num1 = \"100000000000000000000000000000\", num2 = \"200000000000000000000000000000\", min_sum = 50, max_sum = 150",
        "output": "113411552"
      },
      {
        "input": "num1 = \"1111111111111111111111111111111111111111\", num2 = \"1111111111111111111111111111111111111111\", min_sum = 36, max_sum = 36",
        "output": "0"
      },
      {
        "input": "num1 = \"111111111111111111111111111111\", num2 = \"222222222222222222222222222222\", min_sum = 50, max_sum = 150",
        "output": "531163588"
      },
      {
        "input": "num1 = \"987654321098765432109876543210\", num2 = \"987654321098765432109876543211\", min_sum = 1, max_sum = 400",
        "output": "2"
      },
      {
        "input": "num1 = \"111111111111111111111111111111\", num2 = \"222222222222222222222222222222\", min_sum = 15, max_sum = 30",
        "output": "312163769"
      },
      {
        "input": "num1 = \"123456789\", num2 = \"987654321\", min_sum = 50, max_sum = 150",
        "output": "138991812"
      },
      {
        "input": "num1 = \"123456789012345678901234567891\", num2 = \"987654321098765432109876543211\", min_sum = 150, max_sum = 250",
        "output": "442169096"
      },
      {
        "input": "num1 = \"1\", num2 = \"1000000000000000000000000000000000000000\", min_sum = 1, max_sum = 400",
        "output": "2401000"
      },
      {
        "input": "num1 = \"900000000000000000000000000000\", num2 = \"900000000000000000000000000010\", min_sum = 100, max_sum = 150",
        "output": "0"
      },
      {
        "input": "num1 = \"123456789012345678901234567890\", num2 = \"234567890123456789012345678901\", min_sum = 50, max_sum = 100",
        "output": "518837468"
      },
      {
        "input": "num1 = \"1000000000000000000000000000000\", num2 = \"1000000000000000000000000000000\", min_sum = 1, max_sum = 99",
        "output": "1"
      },
      {
        "input": "num1 = \"123456789012345678901234567890\", num2 = \"123456789012345678901234567891\", min_sum = 45, max_sum = 45",
        "output": "0"
      },
      {
        "input": "num1 = \"111111111111111111111111111111\", num2 = \"222222222222222222222222222222\", min_sum = 150, max_sum = 160",
        "output": "662198333"
      },
      {
        "input": "num1 = \"888888888888888888888888888888\", num2 = \"999999999999999999999999999999\", min_sum = 250, max_sum = 260",
        "output": "162413701"
      },
      {
        "input": "num1 = \"100000000000000000000000000000\", num2 = \"100000000000000000000000000001\", min_sum = 1, max_sum = 1",
        "output": "1"
      }
    ]
  },
  {
    "id": 76,
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "String",
      "Sliding Window"
    ],
    "problemDescription": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.\n\u00a0\nExample 1:\n\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n\nExample 2:\n\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n\nExample 3:\n\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.\n\n\u00a0\nConstraints:\n\nm == s.length\nn == t.length\n1 <= m, n <= 105\ns and t consist of uppercase and lowercase English letters.\n\n\u00a0\nFollow up: Could you find an algorithm that runs in O(m + n) time?\n",
    "starterCode": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"acbbaca\", t = \"aba\"",
        "output": "baca"
      },
      {
        "input": "s = \"aabbcc\", t = \"abc\"",
        "output": "abbc"
      },
      {
        "input": "s = \"aaaaaaa\", t = \"aa\"",
        "output": "aa"
      },
      {
        "input": "s = \"a\", t = \"aa\"",
        "output": ""
      },
      {
        "input": "s = \"abcd\", t = \"bd\"",
        "output": "bcd"
      },
      {
        "input": "s = \"ab\", t = \"b\"",
        "output": "b"
      },
      {
        "input": "s = \"aa\", t = \"aa\"",
        "output": "aa"
      },
      {
        "input": "s = \"ADOBECODEBANC\", t = \"ABC\"",
        "output": "BANC"
      },
      {
        "input": "s = \"fgrheahtfeqcrha\", t = \"harf\"",
        "output": "fgrhea"
      },
      {
        "input": "s = \"aaaaaaaaaaaabbbbbcdd\", t = \"abcdd\"",
        "output": "abbbbbcdd"
      },
      {
        "input": "s = \"abcde\", t = \"f\"",
        "output": ""
      },
      {
        "input": "s = \"ab\", t = \"a\"",
        "output": "a"
      },
      {
        "input": "s = \"abababab\", t = \"abab\"",
        "output": "abab"
      },
      {
        "input": "s = \"a\", t = \"a\"",
        "output": "a"
      },
      {
        "input": "s = \"aafffrbb\", t = \"ffab\"",
        "output": "afffrb"
      },
      {
        "input": "s = \"bba\", t = \"ab\"",
        "output": "ba"
      },
      {
        "input": "s = \"cbbbaaaaabbbcccccbbaa\", t = \"aaabbbccc\"",
        "output": "aaabbbccc"
      },
      {
        "input": "s = \"abcabcabc\", t = \"abc\"",
        "output": "abc"
      },
      {
        "input": "s = \"cabwefgewcwaefgcf\", t = \"cae\"",
        "output": "cwae"
      },
      {
        "input": "s = \"abcabcabc\", t = \"aaa\"",
        "output": "abcabca"
      },
      {
        "input": "s = \"abc\", t = \"abc\"",
        "output": "abc"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", t = \"aaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "aaaaaaaaaaaaaaaaaaaaaaaaa"
      },
      {
        "input": "s = \"zjwsxeyrhtlnejzjwsxeyrhtlnej\", t = \"nejxyz\"",
        "output": "nejzjwsxey"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"jihgfedcba\"",
        "output": "abcdefghij"
      },
      {
        "input": "s = \"abacabadabacaba\", t = \"abc\"",
        "output": "bac"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\", t = \"cba\"",
        "output": "abc"
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", t = \"abcdefghi\"",
        "output": "abbccddeeffgghhi"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbcccccc\", t = \"abc\"",
        "output": "abbbbbbc"
      },
      {
        "input": "s = \"mississippi\", t = \"issip\"",
        "output": "issip"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzz\", t = \"zzz\"",
        "output": "zzz"
      },
      {
        "input": "s = \"xyxzyxzyxzyxzyx\", t = \"xzy\"",
        "output": "yxz"
      },
      {
        "input": "s = \"abcdefg\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyz"
      },
      {
        "input": "s = \"xyzxzyzxzyzzyzyxzyzyxzyzyx\", t = \"xyzzyxzyzyzx\"",
        "output": "xyzxzyzxzyzzy"
      },
      {
        "input": "s = \"aaabbbaaabbbccc\", t = \"aabbcc\"",
        "output": "aabbbcc"
      },
      {
        "input": "s = \"zzzzzzzzzzz\", t = \"z\"",
        "output": "z"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", t = \"abcdef\"",
        "output": "abbccddeef"
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", t = \"aabbccddeeffgghhii\"",
        "output": "aabbccddeeffgghhii"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabc\", t = \"aabbcc\"",
        "output": "abcabc"
      },
      {
        "input": "s = \"bbaabbbbbaabbbbaaabbbbaaabbababababab\", t = \"bbbbaaaa\"",
        "output": "aabbbbaa"
      },
      {
        "input": "s = \"mississippi\", t = \"issi\"",
        "output": "issi"
      },
      {
        "input": "s = \"aaabbcccccccdddeee\", t = \"abcde\"",
        "output": "abbcccccccddde"
      },
      {
        "input": "s = \"zxcvbnmasdfghjklqwertyuiop\", t = \"opq\"",
        "output": "qwertyuiop"
      },
      {
        "input": "s = \"aaaaaaaaaaaabbbbbbcccccccc\", t = \"abc\"",
        "output": "abbbbbbc"
      },
      {
        "input": "s = \"abcabcabcabcabcabc\", t = \"cba\"",
        "output": "abc"
      },
      {
        "input": "s = \"xyzzxyzzxyzz\", t = \"xyz\"",
        "output": "xyz"
      },
      {
        "input": "s = \"aaaaaaaaaaaabbbbbbbbbbbcccccccccc\", t = \"abc\"",
        "output": "abbbbbbbbbbbc"
      },
      {
        "input": "s = \"xyzzzyxzyxzyxzyxzy\", t = \"zyxzyxz\"",
        "output": "xyzzzyx"
      },
      {
        "input": "s = \"ababababababab\", t = \"abba\"",
        "output": "abab"
      },
      {
        "input": "s = \"abcdabcdeabcdf\", t = \"abcfed\"",
        "output": "eabcdf"
      },
      {
        "input": "s = \"abababababababababab\", t = \"aabbcc\"",
        "output": ""
      },
      {
        "input": "s = \"abcdefg\", t = \"xyz\"",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", t = \"aabbcc\"",
        "output": "aabbcc"
      },
      {
        "input": "s = \"ababcabcabcabcabcabcabcabcabcabcabcabc\", t = \"abcabcabc\"",
        "output": "abcabcabc"
      },
      {
        "input": "s = \"hellohellohello\", t = \"lle\"",
        "output": "ell"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"sadjhasjhdjahsjdhasjhadsjhsahjdahjdsjahjdhasjdhajsdhasjdhajsdjasdhasjdhsa\", t = \"hasjdh\"",
        "output": "hasjhd"
      },
      {
        "input": "s = \"bancbbancbbanc\", t = \"abc\"",
        "output": "banc"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzzzzzzzzzzz\", t = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "abbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyz"
      },
      {
        "input": "s = \"thisisaverylongstringthatweneedtolookinto\", t = \"tin\"",
        "output": "int"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", t = \"zzzzzzzz\"",
        "output": "zzzzzzzz"
      },
      {
        "input": "s = \"bbaaaaaaabbbbcccc\", t = \"aabbbccc\"",
        "output": "aabbbbccc"
      },
      {
        "input": "s = \"abababababababab\", t = \"abab\"",
        "output": "abab"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", t = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", t = \"mnopqrstuvwxyz\"",
        "output": "mnnooppqqrrssttuuvvwwxxyyz"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm\", t = \"qwertyuiopzxcvbnm\"",
        "output": "zxcvbnmqwertyuiop"
      },
      {
        "input": "s = \"xyzzyxzyzyxzyzxzyzxzyxzyzyxzyx\", t = \"xyz\"",
        "output": "xyz"
      },
      {
        "input": "s = \"abcbacbacbacbacbacbacbacbacbacbacbacbacbacbac\", t = \"acbcba\"",
        "output": "abcbac"
      },
      {
        "input": "s = \"abccbaacz\", t = \"abc\"",
        "output": "abc"
      },
      {
        "input": "s = \"abracadabra\", t = \"rac\"",
        "output": "rac"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbcccccccccc\", t = \"abc\"",
        "output": "abbbbbbbbbbc"
      },
      {
        "input": "s = \"bbaaacccaaaabbbccc\", t = \"aabbbccc\"",
        "output": "aabbbccc"
      },
      {
        "input": "s = \"bancancode\", t = \"abc\"",
        "output": "banc"
      },
      {
        "input": "s = \"abcdefgabcdefg\", t = \"abcd\"",
        "output": "abcd"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnm\", t = \"qwertyuiop\"",
        "output": "qwertyuiop"
      },
      {
        "input": "s = \"aaaaaaaaaa\", t = \"aaa\"",
        "output": "aaa"
      },
      {
        "input": "s = \"ababababababababababababababababababab\", t = \"aba\"",
        "output": "aba"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccccccccccccccccc\", t = \"abc\"",
        "output": "abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc"
      },
      {
        "input": "s = \"abcdeffeghijk\", t = \"efg\"",
        "output": "feg"
      },
      {
        "input": "s = \"abcabcabcabcabc\", t = \"cba\"",
        "output": "abc"
      }
    ]
  },
  {
    "id": 1510,
    "difficulty": "Hard",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "problemDescription": "Alice and Bob take turns playing a game, with Alice starting first.\nInitially, there are n stones in a pile. On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.\nAlso, if a player cannot make a move, he/she loses the game.\nGiven a positive integer n, return true if and only if Alice wins the game otherwise return false, assuming both players play optimally.\n\u00a0\nExample 1:\n\nInput: n = 1\nOutput: true\nExplanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.\nExample 2:\n\nInput: n = 2\nOutput: false\nExplanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).\n\nExample 3:\n\nInput: n = 4\nOutput: true\nExplanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).\n\n\u00a0\nConstraints:\n\n1 <= n <= 105\n\n",
    "starterCode": "class Solution:\n    def winnerSquareGame(self, n: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "n = 101",
        "output": "True"
      },
      {
        "input": "n = 3",
        "output": "True"
      },
      {
        "input": "n = 100000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 100",
        "output": "True"
      },
      {
        "input": "n = 30",
        "output": "True"
      },
      {
        "input": "n = 5",
        "output": "False"
      },
      {
        "input": "n = 4",
        "output": "True"
      },
      {
        "input": "n = 200",
        "output": "True"
      },
      {
        "input": "n = 17",
        "output": "False"
      },
      {
        "input": "n = 10000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 2",
        "output": "False"
      },
      {
        "input": "n = 20",
        "output": "False"
      },
      {
        "input": "n = 1",
        "output": "True"
      },
      {
        "input": "n = 1000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 7",
        "output": "False"
      },
      {
        "input": "n = 10",
        "output": "False"
      },
      {
        "input": "n = 25",
        "output": "True"
      },
      {
        "input": "n = 54756",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 9801",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 99999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 12345",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 900",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 50000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 50",
        "output": "True"
      },
      {
        "input": "n = 10002",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 300",
        "output": "True"
      },
      {
        "input": "n = 10001",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 123",
        "output": "True"
      },
      {
        "input": "n = 3456",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 6789",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 64",
        "output": "True"
      },
      {
        "input": "n = 16",
        "output": "True"
      },
      {
        "input": "n = 1300",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 784",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 31250",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 1024",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 700",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10004",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 65432",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 2048",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 8192",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10101",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 6561",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 3600",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 65536",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 169",
        "output": "True"
      },
      {
        "input": "n = 5000",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 9999",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10003",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 5625",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 81",
        "output": "True"
      },
      {
        "input": "n = 150",
        "output": "False"
      },
      {
        "input": "n = 1100",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10201",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 32101",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 98765",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 82437",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 3125",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 750",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10005",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 78910",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 500",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 55",
        "output": "True"
      },
      {
        "input": "n = 180",
        "output": "False"
      },
      {
        "input": "n = 25000",
        "output": "Error: maximum recursion depth exceeded"
      }
    ]
  },
  {
    "id": 2463,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "problemDescription": "There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.\nThe positions of each robot are unique. The positions of each factory are also unique. Note that a robot can be in the same position as a factory initially.\nAll the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.\nAt any moment, you can set the initial direction of moving for some robot. Your target is to minimize the total distance traveled by all the robots.\nReturn the minimum total distance traveled by all the robots. The test cases are generated such that all the robots can be repaired.\nNote that\n\nAll robots move at the same speed.\nIf two robots move in the same direction, they will never collide.\nIf two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.\nIf a robot passes by a factory that reached its limits, it crosses it as if it does not exist.\nIf the robot moved from a position x to a position y, the distance it moved is |y - x|.\n\n\u00a0\nExample 1:\n\n\nInput: robot = [0,4,6], factory = [[2,2],[6,2]]\nOutput: 4\nExplanation: As shown in the figure:\n- The first robot at position 0 moves in the positive direction. It will be repaired at the first factory.\n- The second robot at position 4 moves in the negative direction. It will be repaired at the first factory.\n- The third robot at position 6 will be repaired at the second factory. It does not need to move.\nThe limit of the first factory is 2, and it fixed 2 robots.\nThe limit of the second factory is 2, and it fixed 1 robot.\nThe total distance is |2 - 0| + |2 - 4| + |6 - 6| = 4. It can be shown that we cannot achieve a better total distance than 4.\n\nExample 2:\n\n\nInput: robot = [1,-1], factory = [[-2,1],[2,1]]\nOutput: 2\nExplanation: As shown in the figure:\n- The first robot at position 1 moves in the positive direction. It will be repaired at the second factory.\n- The second robot at position -1 moves in the negative direction. It will be repaired at the first factory.\nThe limit of the first factory is 1, and it fixed 1 robot.\nThe limit of the second factory is 1, and it fixed 1 robot.\nThe total distance is |2 - 1| + |(-2) - (-1)| = 2. It can be shown that we cannot achieve a better total distance than 2.\n\n\u00a0\nConstraints:\n\n1 <= robot.length, factory.length <= 100\nfactory[j].length == 2\n-109 <= robot[i], positionj <= 109\n0 <= limitj <= robot.length\nThe input will be generated such that it is always possible to repair every robot.\n\n",
    "starterCode": "class Solution:\n    def minimumTotalDistance(self, robot: List[int], factory: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "robot = [5,1,3], factory = [[2,3]]",
        "output": "5"
      },
      {
        "input": "robot = [5,5,5,5], factory = [[5,4]]",
        "output": "0"
      },
      {
        "input": "robot = [-3,0,3], factory = [[-2,1],[2,1],[5,2]]",
        "output": "5"
      },
      {
        "input": "robot = [-1, -3, 2, 4, 5], factory = [[-2, 1], [2, 2], [6, 2]]",
        "output": "7"
      },
      {
        "input": "robot = [-5,-2,0,2,5], factory = [[-3,2],[1,3]]",
        "output": "9"
      },
      {
        "input": "robot = [5,8,15], factory = [[10,2],[16,1]]",
        "output": "8"
      },
      {
        "input": "robot = [10,20,30,40], factory = [[5,2],[15,2],[25,2]]",
        "output": "30"
      },
      {
        "input": "robot = [-10,0,10], factory = [[-5,1],[0,2],[5,1]]",
        "output": "10"
      },
      {
        "input": "robot = [5, 2, -5], factory = [[-2, 2], [2, 2]]",
        "output": "6"
      },
      {
        "input": "robot = [10, -10, 0], factory = [[0, 3]]",
        "output": "20"
      },
      {
        "input": "robot = [0,4,6], factory = [[2,2],[6,2]]",
        "output": "4"
      },
      {
        "input": "robot = [3,7,12,15], factory = [[2,3],[10,2]]",
        "output": "13"
      },
      {
        "input": "robot = [-3,0,3], factory = [[-2,1],[2,2]]",
        "output": "4"
      },
      {
        "input": "robot = [1,-1], factory = [[-2,1],[2,1]]",
        "output": "2"
      },
      {
        "input": "robot = [-20, -10, 0, 10, 20], factory = [[-15, 2], [0, 1], [15, 2]]",
        "output": "20"
      },
      {
        "input": "robot = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100], factory = [[-5, 2], [-15, 2], [-25, 2], [-35, 2], [-45, 2], [-55, 2], [-65, 2], [-75, 2], [-85, 2], [-95, 2]]",
        "output": "50"
      },
      {
        "input": "robot = [-15, -10, -5, 0, 5, 10, 15], factory = [[-12, 2], [-7, 2], [-2, 2], [3, 2], [8, 2], [13, 2]]",
        "output": "15"
      },
      {
        "input": "robot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], factory = [[5, 3], [10, 4], [15, 3]]",
        "output": "45"
      },
      {
        "input": "robot = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], factory = [[2, 2], [5, 2], [8, 2]]",
        "output": "inf"
      },
      {
        "input": "robot = [-1, -2, -3, -4, -5], factory = [[-10, 3], [0, 2], [10, 1]]",
        "output": "21"
      },
      {
        "input": "robot = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140], factory = [[5, 3], [15, 3], [25, 3], [35, 3], [45, 3], [55, 3], [65, 3], [75, 3], [85, 3], [95, 3], [105, 3], [115, 3], [125, 3], [135, 3]]",
        "output": "75"
      },
      {
        "input": "robot = [0, 2, 4, 6, 8, 10], factory = [[1, 1], [3, 1], [5, 1], [7, 1], [9, 1], [11, 1]]",
        "output": "6"
      },
      {
        "input": "robot = [100, 200, 300, 400, 500], factory = [[50, 1], [150, 2], [250, 2], [350, 2], [450, 1], [550, 1]]",
        "output": "250"
      },
      {
        "input": "robot = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], factory = [[0, 2], [6, 3], [12, 3], [18, 2]]",
        "output": "16"
      },
      {
        "input": "robot = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], factory = [[0, 5], [5, 5]]",
        "output": "20"
      },
      {
        "input": "robot = [-1, 1, -2, 2, -3, 3, -4, 4, -5, 5], factory = [[-3, 3], [0, 4], [3, 3]]",
        "output": "12"
      },
      {
        "input": "robot = [-10, -5, 0, 5, 10, 15, 20, 25, 30, 35], factory = [[-7, 2], [2, 3], [17, 2], [32, 2]]",
        "output": "inf"
      },
      {
        "input": "robot = [-5, 0, 5, 10, 15, 20, 25, 30, 35, 40], factory = [[-10, 2], [5, 3], [20, 3], [35, 2]]",
        "output": "50"
      },
      {
        "input": "robot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], factory = [[0, 2], [4, 2], [8, 2], [12, 2]]",
        "output": "inf"
      },
      {
        "input": "robot = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], factory = [[5, 3], [15, 3], [25, 3]]",
        "output": "inf"
      },
      {
        "input": "robot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], factory = [[0, 3], [5, 4], [10, 3]]",
        "output": "13"
      },
      {
        "input": "robot = [-100, -50, 0, 50, 100], factory = [[-75, 2], [-25, 1], [25, 1], [75, 2]]",
        "output": "125"
      },
      {
        "input": "robot = [10, 20, 30, 40, 50, 60, 70, 80, 90], factory = [[0, 3], [10, 3], [20, 3], [30, 3], [40, 3], [50, 3], [60, 3], [70, 3], [80, 3], [90, 3]]",
        "output": "0"
      },
      {
        "input": "robot = [-2, -1, 0, 1, 2, 3, 4], factory = [[-3, 2], [0, 3], [3, 2]]",
        "output": "7"
      },
      {
        "input": "robot = [-2, -1, 0, 1, 2], factory = [[-3, 1], [-1, 1], [1, 1], [3, 1]]",
        "output": "inf"
      },
      {
        "input": "robot = [-10, -5, 0, 5, 10, 15, 20], factory = [[-20, 1], [-10, 2], [0, 3], [10, 2], [20, 1]]",
        "output": "15"
      },
      {
        "input": "robot = [-100, -50, 0, 50, 100], factory = [[-75, 2], [0, 2], [75, 2]]",
        "output": "100"
      },
      {
        "input": "robot = [-100, -50, 0, 50, 100, 150], factory = [[-75, 3], [25, 2], [125, 2]]",
        "output": "150"
      },
      {
        "input": "robot = [-100, -50, 0, 50, 100, 150, 200], factory = [[-75, 2], [-25, 2], [25, 2], [75, 2], [125, 2], [175, 2]]",
        "output": "175"
      },
      {
        "input": "robot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], factory = [[0, 5], [5, 5], [10, 5], [15, 5]]",
        "output": "60"
      },
      {
        "input": "robot = [-20, -10, 0, 10, 20], factory = [[-15, 1], [-5, 2], [5, 3], [15, 1]]",
        "output": "25"
      },
      {
        "input": "robot = [1, 2, 3, 4, 5, 6, 7, 8, 9], factory = [[2, 3], [5, 3], [8, 3]]",
        "output": "6"
      },
      {
        "input": "robot = [-20, -10, 0, 10, 20], factory = [[-15, 2], [0, 3], [15, 2]]",
        "output": "20"
      },
      {
        "input": "robot = [100, 200, 300, 400, 500], factory = [[50, 2], [150, 1], [250, 2], [350, 1], [450, 1]]",
        "output": "250"
      },
      {
        "input": "robot = [1, 3, 5, 7, 9, 11], factory = [[2, 2], [6, 2], [10, 2]]",
        "output": "6"
      },
      {
        "input": "robot = [1, 3, 5, 7, 9], factory = [[2, 2], [4, 2], [6, 2], [8, 2], [10, 1]]",
        "output": "5"
      },
      {
        "input": "robot = [10, 20, 30, 40, 50, 60], factory = [[15, 2], [35, 2], [55, 2]]",
        "output": "30"
      },
      {
        "input": "robot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], factory = [[2, 3], [6, 3], [10, 3], [14, 3]]",
        "output": "inf"
      },
      {
        "input": "robot = [-20, -10, 0, 10, 20], factory = [[-15, 2], [-5, 3], [5, 2], [15, 1]]",
        "output": "25"
      },
      {
        "input": "robot = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], factory = [[0, 10]]",
        "output": "10"
      },
      {
        "input": "robot = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10], factory = [[-105, 2], [-95, 2], [-85, 2], [-75, 2], [-65, 2], [-55, 2], [-45, 2], [-35, 2], [-25, 2], [-15, 2]]",
        "output": "50"
      },
      {
        "input": "robot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], factory = [[0, 10]]",
        "output": "55"
      },
      {
        "input": "robot = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], factory = [[10, 2], [20, 2], [30, 2], [40, 2]]",
        "output": "inf"
      },
      {
        "input": "robot = [10, 20, 30, 40], factory = [[15, 2], [25, 2], [35, 2]]",
        "output": "20"
      },
      {
        "input": "robot = [-10, -5, 0, 5, 10, 15, 20], factory = [[-7, 2], [-2, 2], [3, 2], [8, 2]]",
        "output": "35"
      },
      {
        "input": "robot = [-20, -10, 0, 10, 20], factory = [[-15, 2], [0, 3], [15, 1]]",
        "output": "25"
      },
      {
        "input": "robot = [-20, -15, -10, -5, 0, 5, 10, 15, 20], factory = [[-15, 2], [-10, 2], [-5, 2], [0, 2], [5, 2], [10, 2], [15, 2]]",
        "output": "10"
      },
      {
        "input": "robot = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], factory = [[-6, 3], [0, 5], [6, 3]]",
        "output": "18"
      },
      {
        "input": "robot = [1, 3, 5, 7, 9], factory = [[2, 1], [4, 1], [6, 1], [8, 1]]",
        "output": "inf"
      },
      {
        "input": "robot = [-5, -3, -1, 1, 3, 5], factory = [[-10, 1], [-5, 2], [0, 3], [5, 2], [10, 1]]",
        "output": "6"
      },
      {
        "input": "robot = [-5, -3, -1, 1, 3, 5, 7, 9], factory = [[-4, 1], [0, 3], [4, 2]]",
        "output": "inf"
      },
      {
        "input": "robot = [1, 3, 5, 7, 9], factory = [[0, 2], [4, 2], [8, 2]]",
        "output": "5"
      },
      {
        "input": "robot = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28], factory = [[3, 3], [9, 3], [15, 3], [21, 3]]",
        "output": "25"
      },
      {
        "input": "robot = [10, 10, 10, 10], factory = [[10, 1], [10, 1], [10, 1], [10, 1]]",
        "output": "0"
      },
      {
        "input": "robot = [1, 4, 7, 10, 13, 16, 19, 22, 25], factory = [[3, 3], [9, 3], [15, 3], [21, 3]]",
        "output": "16"
      },
      {
        "input": "robot = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], factory = [[5, 2], [15, 2], [25, 2], [35, 2], [45, 2], [55, 2], [65, 2], [75, 2], [85, 2], [95, 2]]",
        "output": "50"
      },
      {
        "input": "robot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], factory = [[0, 2], [5, 3], [10, 5]]",
        "output": "16"
      },
      {
        "input": "robot = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], factory = [[150, 3], [500, 4], [850, 3]]",
        "output": "900"
      },
      {
        "input": "robot = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], factory = [[-5, 5], [0, 5], [5, 5]]",
        "output": "25"
      },
      {
        "input": "robot = [-5, 0, 5, 10, 15, 20], factory = [[-10, 1], [0, 3], [10, 2], [20, 1]]",
        "output": "15"
      },
      {
        "input": "robot = [-50, -25, 0, 25, 50], factory = [[-75, 3], [0, 2], [75, 1]]",
        "output": "125"
      },
      {
        "input": "robot = [-10, -5, 0, 5, 10], factory = [[-15, 2], [-10, 1], [0, 3], [10, 2], [15, 1]]",
        "output": "10"
      },
      {
        "input": "robot = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], factory = [[0, 5], [5, 5], [10, 5], [15, 5]]",
        "output": "40"
      },
      {
        "input": "robot = [-100, -200, -300, -400, -500], factory = [[-50, 2], [-150, 1], [-250, 2], [-350, 1], [-450, 1]]",
        "output": "250"
      },
      {
        "input": "robot = [-100, -50, 0, 50, 100], factory = [[-75, 1], [-25, 1], [25, 1], [75, 1]]",
        "output": "inf"
      },
      {
        "input": "robot = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10], factory = [[-95, 2], [-85, 2], [-75, 2], [-65, 2], [-55, 2], [-45, 2], [-35, 2], [-25, 2], [-15, 2], [-5, 2]]",
        "output": "50"
      },
      {
        "input": "robot = [-100, -50, 0, 50, 100], factory = [[-75, 2], [-25, 2], [25, 2], [75, 1]]",
        "output": "125"
      },
      {
        "input": "robot = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], factory = [[-10, 6], [0, 5]]",
        "output": "60"
      },
      {
        "input": "robot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], factory = [[0, 5], [10, 5]]",
        "output": "25"
      },
      {
        "input": "robot = [-10, -5, 0, 5, 10, 15, 20, 25], factory = [[-15, 2], [0, 3], [15, 3], [25, 1]]",
        "output": "25"
      },
      {
        "input": "robot = [100, 200, 300, 400, 500], factory = [[50, 1], [150, 2], [250, 2], [350, 1], [450, 1]]",
        "output": "250"
      },
      {
        "input": "robot = [-10, -5, 0, 5, 10, 15], factory = [[-8, 2], [2, 3], [12, 2]]",
        "output": "15"
      },
      {
        "input": "robot = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], factory = [[-5, 5], [5, 5]]",
        "output": "50"
      },
      {
        "input": "robot = [0, 10, 20, 30, 40, 50, 60], factory = [[5, 3], [15, 3], [25, 3], [35, 3], [45, 3]]",
        "output": "45"
      },
      {
        "input": "robot = [-1, 0, 1], factory = [[-2, 1], [2, 1], [0, 1]]",
        "output": "2"
      },
      {
        "input": "robot = [-9, -6, -3, 0, 3, 6, 9], factory = [[-8, 2], [-2, 2], [2, 2], [8, 1]]",
        "output": "12"
      },
      {
        "input": "robot = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], factory = [[0, 5], [10, 5], [20, 5]]",
        "output": "26"
      },
      {
        "input": "robot = [0, 10, 20, 30, 40, 50, 60], factory = [[5, 1], [15, 2], [25, 2], [35, 1], [45, 2], [55, 1]]",
        "output": "35"
      },
      {
        "input": "robot = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], factory = [[-4, 3], [2, 4], [7, 3], [11, 3]]",
        "output": "22"
      },
      {
        "input": "robot = [-1, -2, -3, -4, -5], factory = [[-3, 3], [0, 2]]",
        "output": "6"
      },
      {
        "input": "robot = [0, 2, 4, 6, 8, 10, 12], factory = [[1, 2], [5, 2], [9, 2], [13, 1]]",
        "output": "7"
      },
      {
        "input": "robot = [100, 200, 300, 400, 500], factory = [[50, 1], [150, 1], [250, 1], [350, 1], [450, 1]]",
        "output": "250"
      },
      {
        "input": "robot = [-5, -3, -1, 1, 3, 5], factory = [[-10, 1], [-6, 2], [-2, 2], [2, 2], [6, 1]]",
        "output": "6"
      },
      {
        "input": "robot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], factory = [[5, 5], [15, 5]]",
        "output": "45"
      },
      {
        "input": "robot = [-20, -10, 0, 10, 20], factory = [[-25, 2], [-15, 3], [-5, 2], [5, 3], [15, 2], [25, 1]]",
        "output": "25"
      },
      {
        "input": "robot = [-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50], factory = [[-60, 3], [-40, 4], [-20, 4], [0, 4], [20, 4], [40, 3]]",
        "output": "60"
      },
      {
        "input": "robot = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], factory = [[0, 2], [4, 2], [8, 2], [12, 2], [16, 2]]",
        "output": "20"
      },
      {
        "input": "robot = [1, 3, 5, 7, 9], factory = [[0, 3], [6, 2], [12, 1]]",
        "output": "9"
      },
      {
        "input": "robot = [-100, -50, 0, 50, 100], factory = [[-150, 2], [-100, 2], [-50, 2], [0, 2], [50, 2], [100, 2], [150, 2]]",
        "output": "0"
      },
      {
        "input": "robot = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], factory = [[0, 2], [5, 2], [10, 2], [15, 2], [20, 2]]",
        "output": "14"
      }
    ]
  },
  {
    "id": 2565,
    "difficulty": "Hard",
    "tags": [
      "Two Pointers",
      "String",
      "Binary Search"
    ],
    "problemDescription": "You are given two strings s and t.\nYou are allowed to remove any number of characters from the string t.\nThe score of the string is 0 if no characters are removed from the string t, otherwise:\n\nLet left be the minimum index among all removed characters.\nLet right be the maximum index among all removed characters.\n\nThen the score of the string is right - left + 1.\nReturn the minimum possible score to make t\u00a0a subsequence of s.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n\u00a0\nExample 1:\n\nInput: s = \"abacaba\", t = \"bzaa\"\nOutput: 1\nExplanation: In this example, we remove the character \"z\" at index 1 (0-indexed).\nThe string t becomes \"baa\" which is a subsequence of the string \"abacaba\" and the score is 1 - 1 + 1 = 1.\nIt can be proven that 1 is the minimum score that we can achieve.\n\nExample 2:\n\nInput: s = \"cde\", t = \"xyz\"\nOutput: 3\nExplanation: In this example, we remove characters \"x\", \"y\" and \"z\" at indices 0, 1, and 2 (0-indexed).\nThe string t becomes \"\" which is a subsequence of the string \"cde\" and the score is 2 - 0 + 1 = 3.\nIt can be proven that 3 is the minimum score that we can achieve.\n\n\u00a0\nConstraints:\n\n1 <= s.length, t.length <= 105\ns and t consist of only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def minimumScore(self, s: str, t: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"abcd\", t = \"abcde\"",
        "output": "1"
      },
      {
        "input": "s = \"hello\", t = \"world\"",
        "output": "5"
      },
      {
        "input": "s = \"abcdefghij\", t = \"fihgjedcba\"",
        "output": "8"
      },
      {
        "input": "s = \"abcde\", t = \"edcba\"",
        "output": "4"
      },
      {
        "input": "s = \"aaaaa\", t = \"aa\"",
        "output": "0"
      },
      {
        "input": "s = \"testcase\", t = \"ttccasse\"",
        "output": "3"
      },
      {
        "input": "s = \"programming\", t = \"gnimmargorp\"",
        "output": "9"
      },
      {
        "input": "s = \"abcd\", t = \"dbca\"",
        "output": "3"
      },
      {
        "input": "s = \"xyz\", t = \"abc\"",
        "output": "3"
      },
      {
        "input": "s = \"minimum\", t = \"imumin\"",
        "output": "2"
      },
      {
        "input": "s = \"abcd\", t = \"dcba\"",
        "output": "3"
      },
      {
        "input": "s = \"abcdefg\", t = \"xyz\"",
        "output": "3"
      },
      {
        "input": "s = \"programming\", t = \"gaming\"",
        "output": "0"
      },
      {
        "input": "s = \"abacaba\", t = \"bzaa\"",
        "output": "1"
      },
      {
        "input": "s = \"cde\", t = \"xyz\"",
        "output": "3"
      },
      {
        "input": "s = \"abcde\", t = \"ace\"",
        "output": "0"
      },
      {
        "input": "s = \"hello\", t = \"olelh\"",
        "output": "4"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyz\", t = \"zyzyzyzyzyzyzyzyzyz\"",
        "output": "9"
      },
      {
        "input": "s = \"testcase\", t = \"tttttttt\"",
        "output": "6"
      },
      {
        "input": "s = \"abcde\", t = \"abcdxyzef\"",
        "output": "5"
      },
      {
        "input": "s = \"hello world\", t = \"worldhello\"",
        "output": "5"
      },
      {
        "input": "s = \"abacabadabacaba\", t = \"zabacabadabacabaz\"",
        "output": "17"
      },
      {
        "input": "s = \"abababab\", t = \"bababa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaaaaaaaa\", t = \"aaaaaaaaaab\"",
        "output": "1"
      },
      {
        "input": "s = \"abcdexyz\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "25"
      },
      {
        "input": "s = \"aabbaabbaabb\", t = \"bbbb\"",
        "output": "0"
      },
      {
        "input": "s = \"abacabadabacaba\", t = \"aaaaabaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"longstringwithmanypatterns\", t = \"stringwithpatternsstring\"",
        "output": "6"
      },
      {
        "input": "s = \"thisisaverylongstringfortesting\", t = \"stringfortestingthisisaverylong\"",
        "output": "15"
      },
      {
        "input": "s = \"abcdefghij\", t = \"bcdefghia\"",
        "output": "1"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", t = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "84"
      },
      {
        "input": "s = \"abcabcabcabc\", t = \"cccc\"",
        "output": "0"
      },
      {
        "input": "s = \"mississippi\", t = \"pi\"",
        "output": "0"
      },
      {
        "input": "s = \"hellotherehellotherehellotherehellothere\", t = \"herehellotherehellotherehellotherehellotherehello\"",
        "output": "14"
      },
      {
        "input": "s = \"abracadabra\", t = \"acraabdbrac\"",
        "output": "6"
      },
      {
        "input": "s = \"xyzxyzxyz\", t = \"zyxzyxzyx\"",
        "output": "5"
      },
      {
        "input": "s = \"abcdabcdabcd\", t = \"dcbaabdcba\"",
        "output": "7"
      },
      {
        "input": "s = \"sequence\", t = \"enqueseq\"",
        "output": "5"
      },
      {
        "input": "s = \"abracadabra\", t = \"rac\"",
        "output": "0"
      },
      {
        "input": "s = \"repeatedcharactersarehere\", t = \"tareeere\"",
        "output": "0"
      },
      {
        "input": "s = \"aabbccddeeffgg\", t = \"fedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "31"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghijabcdefghij\"",
        "output": "10"
      },
      {
        "input": "s = \"bananaananabayananabananabananabanana\", t = \"nananananananananananananananananan\"",
        "output": "11"
      },
      {
        "input": "s = \"abcde\", t = \"edcbaa\"",
        "output": "5"
      },
      {
        "input": "s = \"longstringwithseveralcharacters\", t = \"characterswithseveralstringlong\"",
        "output": "21"
      },
      {
        "input": "s = \"thisisaverylongstringwithmanysimilarcharacters\", t = \"similarcharacters\"",
        "output": "0"
      },
      {
        "input": "s = \"hellohellohello\", t = \"ollhll\"",
        "output": "0"
      },
      {
        "input": "s = \"longestsubstring\", t = \"strolng\"",
        "output": "2"
      },
      {
        "input": "s = \"solvingproblems\", t = \"problemsolving\"",
        "output": "6"
      },
      {
        "input": "s = \"banana\", t = \"bananabananabanana\"",
        "output": "12"
      },
      {
        "input": "s = \"ababababababababababababababababa\", t = \"bababababababababababababababababa\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeffgghhii\", t = \"ihgfedcba\"",
        "output": "8"
      },
      {
        "input": "s = \"abcdefghij\", t = \"ihgfedcbaj\"",
        "output": "8"
      },
      {
        "input": "s = \"hellohellohello\", t = \"lllllooohehe\"",
        "output": "5"
      },
      {
        "input": "s = \"aaaaaa\", t = \"bbbbbb\"",
        "output": "6"
      },
      {
        "input": "s = \"aaaaaabbbbbbcccccc\", t = \"cccccccbaaaaa\"",
        "output": "7"
      },
      {
        "input": "s = \"quickbrownfoxjumpsoverthelazydog\", t = \"dogzyxvutwrofsjpmnklobq\"",
        "output": "20"
      },
      {
        "input": "s = \"aaaaaaaaaa\", t = \"aaaaaaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"programmingisfun\", t = \"misnpfrmigong\"",
        "output": "9"
      },
      {
        "input": "s = \"complexproblem\", t = \"problemcomplex\"",
        "output": "7"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", t = \"zzzyyxxwwvvuuttssrrqppoonnmmllkkjjiihhhgggffeeedddccbbaa\"",
        "output": "54"
      },
      {
        "input": "s = \"abracadabra\", t = \"raac\"",
        "output": "1"
      },
      {
        "input": "s = \"findingthesolution\", t = \"solutionfinding\"",
        "output": "7"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", t = \"hgfedcbajihgfedcbaj\"",
        "output": "16"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghij\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "23"
      },
      {
        "input": "s = \"aaaaabbbbbccccc\", t = \"abcabcabcabc\"",
        "output": "8"
      },
      {
        "input": "s = \"abcdabcdabcd\", t = \"ddddccbbbaaa\"",
        "output": "9"
      },
      {
        "input": "s = \"racecar\", t = \"racecarracecar\"",
        "output": "7"
      },
      {
        "input": "s = \"mississippi\", t = \"ississipisipismiss\"",
        "output": "9"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", t = \"zzzzyyyyxxxwwvvuuttssrrqqppoonnmmllkkjjiihhggffeeddccbaaabbaa\"",
        "output": "59"
      },
      {
        "input": "s = \"mississippi\", t = \"ppiisimiss\"",
        "output": "6"
      },
      {
        "input": "s = \"samestring\", t = \"samestring\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdexyzabcdexyz\", t = \"zyxwvutzyxwvutzyxwvut\"",
        "output": "19"
      },
      {
        "input": "s = \"abcde\", t = \"bcdea\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeff\", t = \"fedcba\"",
        "output": "5"
      },
      {
        "input": "s = \"uniquecharacters\", t = \"charactersunique\"",
        "output": "6"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", t = \"fihgjedcbafihgjedcbafihg\"",
        "output": "21"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", t = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "50"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "25"
      },
      {
        "input": "s = \"quickbrownfox\", t = \"brownfoxquick\"",
        "output": "5"
      },
      {
        "input": "s = \"dynamicprogramming\", t = \"ymnpgmcratidnodpmg\"",
        "output": "13"
      },
      {
        "input": "s = \"abababababab\", t = \"bababababa\"",
        "output": "0"
      },
      {
        "input": "s = \"aaaaaabbbbbccccc\", t = \"ccccbbbaaaaa\"",
        "output": "7"
      },
      {
        "input": "s = \"abacaxbadacabacaba\", t = \"bacabaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghijk\"",
        "output": "1"
      },
      {
        "input": "s = \"longstringthatcontainscharactersrepeatedly\", t = \"characterscharacterscharacters\"",
        "output": "18"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcd\", t = \"dddddddddd\"",
        "output": "4"
      },
      {
        "input": "s = \"thisisaverylongstring\", t = \"stringisaverylong\"",
        "output": "5"
      },
      {
        "input": "s = \"mississippi\", t = \"issississississississsissississississsississississs\"",
        "output": "44"
      },
      {
        "input": "s = \"qzxtqzxtqzxt\", t = \"xtzxtzxtzxtzxtzxtzxtzxtzxtzxtzxtzxtzxtzxtzxt\"",
        "output": "35"
      },
      {
        "input": "s = \"abacabadabacaba\", t = \"bzaaazza\"",
        "output": "6"
      },
      {
        "input": "s = \"repeatedcharacters\", t = \"eedaaeerereeeddperrrrttt\"",
        "output": "18"
      },
      {
        "input": "s = \"pythonprogramming\", t = \"ptyhnonrpgmaminnorgm\"",
        "output": "14"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", t = \"zzzyyxxwwvvuutssrrqqppoonnllkkjjiihhhgggffeeeddccbaab\"",
        "output": "50"
      },
      {
        "input": "s = \"mississippi\", t = \"ppisissam\"",
        "output": "6"
      },
      {
        "input": "s = \"thisisatest\", t = \"ttttt\"",
        "output": "2"
      },
      {
        "input": "s = \"mississippi\", t = \"ssssii\"",
        "output": "0"
      },
      {
        "input": "s = \"abcabcabcabcabcabc\", t = \"cccbbbbaaabbbcccbbbbaaabbb\"",
        "output": "19"
      },
      {
        "input": "s = \"thisisalongstring\", t = \"thisstringislong\"",
        "output": "6"
      },
      {
        "input": "s = \"xyzxyzxyzxyz\", t = \"zzzzyyyyxxxxyyyyzzzz\"",
        "output": "15"
      },
      {
        "input": "s = \"thisisaverylongstring\", t = \"gnirtsylonlavraesiisthis\"",
        "output": "20"
      },
      {
        "input": "s = \"abcdefghij\", t = \"aabbccddeeffgghhiijj\"",
        "output": "18"
      },
      {
        "input": "s = \"optimization\", t = \"ttttiiiooonnnssss\"",
        "output": "15"
      },
      {
        "input": "s = \"abacabadabacaba\", t = \"dabacabad\"",
        "output": "1"
      },
      {
        "input": "s = \"abcdeabcdeabcde\", t = \"ecbedcab\"",
        "output": "4"
      },
      {
        "input": "s = \"abacabadabacaba\", t = \"abadab\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdabcdabcd\", t = \"dddd\"",
        "output": "1"
      },
      {
        "input": "s = \"hello\", t = \"hhheeelllllooooo\"",
        "output": "14"
      },
      {
        "input": "s = \"thisisaverylongstring\", t = \"tsring\"",
        "output": "0"
      },
      {
        "input": "s = \"abacabadabacaba\", t = \"aaabbbccc\"",
        "output": "3"
      },
      {
        "input": "s = \"pythonprogramming\", t = \"notapysubsequence\"",
        "output": "15"
      },
      {
        "input": "s = \"abacabadabacaba\", t = \"aaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"mississippi\", t = \"ssissip\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", t = \"jihgfedcbajihgfedcba\"",
        "output": "18"
      },
      {
        "input": "s = \"abcdefabcdefabcdef\", t = \"fedcba\"",
        "output": "3"
      },
      {
        "input": "s = \"abcdefg\", t = \"gfedcbaacdefg\"",
        "output": "7"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\", t = \"dcbaabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "3"
      },
      {
        "input": "s = \"mississippi\", t = \"msssssssssssss\"",
        "output": "9"
      },
      {
        "input": "s = \"abababababababab\", t = \"babababababababa\"",
        "output": "1"
      },
      {
        "input": "s = \"abacabadabacaba\", t = \"abacabacaba\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghijabcdefghij\", t = \"jihgfedcbajihgfedcbajihgfedcbajihgfedcba\"",
        "output": "36"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "25"
      },
      {
        "input": "s = \"nestednestednested\", t = \"nns\"",
        "output": "0"
      },
      {
        "input": "s = \"abacabadabacaba\", t = \"zzzzzzzzzzzzzzz\"",
        "output": "15"
      },
      {
        "input": "s = \"aaaaabbbbbcccccdddddeeeee\", t = \"bbbbbeeecdddd\"",
        "output": "3"
      },
      {
        "input": "s = \"mississippi\", t = \"ppisss\"",
        "output": "2"
      },
      {
        "input": "s = \"aaaaaabbbbbbbccccccdddddeeeeefffff\", t = \"ffffeeeeeddccccbbbaaaa\"",
        "output": "18"
      },
      {
        "input": "s = \"longwordhere\", t = \"helloworld\"",
        "output": "8"
      },
      {
        "input": "s = \"aaaaaaa\", t = \"aaaaaaa\"",
        "output": "0"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghijxyz\"",
        "output": "3"
      }
    ]
  },
  {
    "id": 2872,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search"
    ],
    "problemDescription": "There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node, and an integer k.\nA valid split of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by k, where the value of a connected component is the sum of the values of its nodes.\nReturn the maximum number of components in any valid split.\n\u00a0\nExample 1:\n\n\nInput: n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6\nOutput: 2\nExplanation: We remove the edge connecting node 1 with 2. The resulting split is valid because:\n- The value of the component containing nodes 1 and 3 is values[1] + values[3] = 12.\n- The value of the component containing nodes 0, 2, and 4 is values[0] + values[2] + values[4] = 6.\nIt can be shown that no other valid split has more than 2 connected components.\nExample 2:\n\n\nInput: n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3\nOutput: 3\nExplanation: We remove the edge connecting node 0 with 2, and the edge connecting node 0 with 1. The resulting split is valid because:\n- The value of the component containing node 0 is values[0] = 3.\n- The value of the component containing nodes 2, 5, and 6 is values[2] + values[5] + values[6] = 9.\n- The value of the component containing nodes 1, 3, and 4 is values[1] + values[3] + values[4] = 6.\nIt can be shown that no other valid split has more than 3 connected components.\n\n\u00a0\nConstraints:\n\n1 <= n <= 3 * 104\nedges.length == n - 1\nedges[i].length == 2\n0 <= ai, bi < n\nvalues.length == n\n0 <= values[i] <= 109\n1 <= k <= 109\nSum of values is divisible by k.\nThe input is generated such that edges represents a valid tree.\n\n",
    "starterCode": "class Solution:\n    def maxKDivisibleComponents(self, n: int, edges: List[List[int]], values: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]], values = [2,10,5,1,1,1], k = 5",
        "output": "2"
      },
      {
        "input": "n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6",
        "output": "2"
      },
      {
        "input": "n = 3, edges = [[0,1],[0,2]], values = [1,1,1], k = 2",
        "output": "0"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[1,3]], values = [4,6,5,9], k = 3",
        "output": "2"
      },
      {
        "input": "n = 3, edges = [[0,1],[1,2]], values = [3,9,12], k = 3",
        "output": "3"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[1,3]], values = [5,5,5,5], k = 5",
        "output": "4"
      },
      {
        "input": "n = 4, edges = [[0,1],[2,3],[1,2]], values = [4,4,4,4], k = 4",
        "output": "4"
      },
      {
        "input": "n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3",
        "output": "3"
      },
      {
        "input": "n = 3, edges = [[0,1],[0,2]], values = [3,0,6], k = 3",
        "output": "3"
      },
      {
        "input": "n = 3, edges = [[0,1],[0,2]], values = [1,2,3], k = 1",
        "output": "3"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[0,3],[1,4],[1,5]], values = [12,6,6,6,6,6], k = 12",
        "output": "0"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[0,3],[3,4],[3,5]], values = [15,15,15,15,15,15], k = 15",
        "output": "6"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[1,3]], values = [4,4,4,4], k = 4",
        "output": "4"
      },
      {
        "input": "n = 6, edges = [[0,1],[0,2],[1,3],[1,4],[2,5]], values = [6,6,6,6,6,6], k = 6",
        "output": "6"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]], values = [6,3,9,1,12,15,3,9,6,6], k = 3",
        "output": "7"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24]], values = [9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225], k = 9",
        "output": "25"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], values = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], k = 2",
        "output": "20"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], values = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 1",
        "output": "20"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[6,19],[7,20],[7,21],[8,22],[8,23],[9,24]], values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 1",
        "output": "25"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], values = [6,12,18,3,3,6,9,3,6,6], k = 3",
        "output": "10"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], values = [3,6,9,12,15,18,21,24,27,30,33,36], k = 3",
        "output": "12"
      },
      {
        "input": "n = 50, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[6,19],[7,20],[7,21],[8,22],[8,23],[9,24],[9,25],[10,26],[10,27],[11,28],[11,29],[12,30],[12,31],[12,32],[13,33],[13,34],[14,35],[14,36],[15,37],[15,38],[16,39],[16,40],[17,41],[17,42],[18,43],[18,44],[19,45],[19,46],[20,47],[20,48],[21,49]], values = [11,22,33,44,55,66,77,88,99,110,121,132,143,154,165,176,187,198,209,220,231,242,253,264,275,286,297,308,319,330,341,352,363,374,385,396,407,418,429,440,451,462,473,484,495,506,517,528,539,550], k = 11",
        "output": "50"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], values = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15], k = 15",
        "output": "25"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[3,7],[3,8],[3,9]], values = [10,15,20,25,30,5,3,4,2,1], k = 5",
        "output": "4"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7]], values = [10,20,30,40,50,60,70,80], k = 10",
        "output": "8"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], values = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45], k = 3",
        "output": "15"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], values = [1,2,3,4,5,6,7,8,9,10,11,12], k = 2",
        "output": "7"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], values = [3,6,9,12,15,18,21,24,27,30], k = 3",
        "output": "10"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], values = [1,2,3,4,5,6,7,8,9,10], k = 3",
        "output": "4"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], values = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75], k = 3",
        "output": "25"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], values = [6,12,18,24,30,36,42,48,54,60,66,72,78,84,90,96,102,108,114,120], k = 6",
        "output": "20"
      },
      {
        "input": "n = 9, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8]], values = [1,2,3,4,5,6,7,8,9], k = 1",
        "output": "9"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], values = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 5",
        "output": "15"
      },
      {
        "input": "n = 9, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8]], values = [7,7,7,7,7,7,7,7,7], k = 7",
        "output": "9"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], values = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], k = 5",
        "output": "20"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[11,27],[11,28],[12,29]], values = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 1",
        "output": "30"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[6,19]], values = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], k = 2",
        "output": "20"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11]], values = [9,9,9,9,9,9,9,9,9,9,9,9], k = 9",
        "output": "12"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9]], values = [12,15,3,6,9,18,21,12,15,9], k = 3",
        "output": "10"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], values = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], k = 5",
        "output": "20"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11]], values = [9,9,9,9,9,9,9,9,9,9,9,9], k = 3",
        "output": "12"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], values = [7,14,21,28,35,42,49,56,63,70,77,84], k = 7",
        "output": "12"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], values = [5,10,15,5,10,15,5,10,15,5,10,15,5,10,15,5,10,15,5,5], k = 5",
        "output": "20"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7]], values = [7,14,21,28,35,42,49,56], k = 7",
        "output": "8"
      },
      {
        "input": "n = 11, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,10]], values = [11,22,33,11,22,33,11,22,33,11,11], k = 11",
        "output": "11"
      },
      {
        "input": "n = 9, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8]], values = [1,1,1,1,1,1,1,1,1], k = 2",
        "output": "2"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], values = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], k = 10",
        "output": "20"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14]], values = [6,12,18,24,30,36,42,48,54,60,66,72,78,84,90], k = 6",
        "output": "15"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[6,19],[7,20],[7,21],[8,22],[8,23],[9,24]], values = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125], k = 5",
        "output": "25"
      },
      {
        "input": "n = 9, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8]], values = [25,50,75,100,125,150,175,200,225], k = 25",
        "output": "9"
      },
      {
        "input": "n = 12, edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11]], values = [1,2,3,4,5,6,7,8,9,10,11,12], k = 3",
        "output": "4"
      },
      {
        "input": "n = 18, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[8,16],[9,17]], values = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 1",
        "output": "18"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11]], values = [8,16,24,32,40,48,56,64,72,80,88,96], k = 8",
        "output": "12"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29]], values = [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20], k = 20",
        "output": "30"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11],[6,12],[7,13],[8,14]], values = [6,3,9,12,15,18,21,24,27,30,33,36,39,42,45], k = 3",
        "output": "15"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], values = [7,14,21,28,35,42,49,56,63,70], k = 7",
        "output": "10"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], values = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], k = 10",
        "output": "20"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], values = [3,3,3,3,3,3,3,3,3,3], k = 3",
        "output": "10"
      },
      {
        "input": "n = 30, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[6,19],[7,20],[7,21],[8,22],[8,23],[9,24],[9,25],[10,26],[10,27],[11,28],[11,29]], values = [7,14,21,28,35,42,49,56,63,70,77,84,91,98,105,112,119,126,133,140,147,154,161,168,175,182,189,196,203,210], k = 7",
        "output": "30"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19]], values = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], k = 10",
        "output": "20"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9]], values = [1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "1"
      },
      {
        "input": "n = 18, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[9,18],[10,19],[11,20],[12,21],[13,22],[14,23],[15,24],[16,25],[17,26]], values = [6,12,18,24,30,36,42,48,54,60,66,72,78,84,90,96,102,108,114,120,126,132,138,144,150,156,162,168], k = 6",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7]], values = [8,8,8,8,8,8,8,8], k = 8",
        "output": "8"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19]], values = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], k = 4",
        "output": "12"
      },
      {
        "input": "n = 16, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15]], values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], k = 3",
        "output": "5"
      },
      {
        "input": "n = 9, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8]], values = [6,12,18,24,30,36,42,48,54], k = 18",
        "output": "4"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], values = [3,0,6,1,5,2,1,4,3,2,1,0,5,4,3], k = 3",
        "output": "4"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], values = [6,12,18,24,30,36,42,48,54,60,66,72,78,84,90], k = 6",
        "output": "15"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], values = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75], k = 5",
        "output": "15"
      },
      {
        "input": "n = 8, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7]], values = [2,4,6,8,10,12,14,16], k = 4",
        "output": "5"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], values = [15,30,45,10,10,30,45,10,10,30,10,10,30,10,10], k = 15",
        "output": "4"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], values = [1,2,3,4,5,6,7,8,9,10,11,12], k = 3",
        "output": "5"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 5",
        "output": "4"
      },
      {
        "input": "n = 18, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17]], values = [6,12,18,24,30,36,42,48,54,60,66,72,78,84,90,96,102,108], k = 6",
        "output": "18"
      },
      {
        "input": "n = 25, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24]], values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 5",
        "output": "11"
      },
      {
        "input": "n = 35, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12],[4,13],[4,14],[5,15],[5,16],[6,17],[6,18],[7,19],[7,20],[8,21],[8,22],[9,23],[9,24],[10,25],[10,26],[11,27],[11,28],[12,29],[12,30],[13,31],[13,32],[14,33],[14,34]], values = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114], k = 3",
        "output": "35"
      },
      {
        "input": "n = 14, edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[6,13]], values = [12,24,36,48,60,72,84,96,108,120,132,144,156,168], k = 12",
        "output": "14"
      },
      {
        "input": "n = 16, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15]], values = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], k = 5",
        "output": "16"
      },
      {
        "input": "n = 12, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11]], values = [5,10,15,20,25,30,35,40,45,50,55,60], k = 10",
        "output": "7"
      }
    ]
  },
  {
    "id": 3041,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sorting"
    ],
    "problemDescription": "You are given a 0-indexed array nums consisting of positive integers.\nInitially, you can increase the value of any element in the array by at most 1.\nAfter that, you need to select one or more elements from the final array such that those elements are consecutive when sorted in increasing order. For example, the elements [3, 4, 5] are consecutive while [3, 4, 6] and [1, 1, 2, 3] are not.\nReturn the maximum number of elements that you can select.\n\u00a0\nExample 1:\n\nInput: nums = [2,1,5,1,1]\nOutput: 3\nExplanation: We can increase the elements at indices 0 and 3. The resulting array is nums = [3,1,5,2,1].\nWe select the elements [3,1,5,2,1] and we sort them to obtain [1,2,3], which are consecutive.\nIt can be shown that we cannot select more than 3 consecutive elements.\nExample 2:\n\nInput: nums = [1,4,7,10]\nOutput: 1\nExplanation: The maximum consecutive elements that we can select is 1.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 106\n\n",
    "starterCode": "class Solution:\n    def maxSelectedElements(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,1000000]",
        "output": "1"
      },
      {
        "input": "nums = [2,2,2,3,3,3,4,4,4,5,5,5]",
        "output": "5"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "nums = [1,3,5,7,9]",
        "output": "2"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [1000000,999999,999998,999997,999996]",
        "output": "5"
      },
      {
        "input": "nums = [1000000, 999999, 999998, 1, 2]",
        "output": "3"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5]",
        "output": "6"
      },
      {
        "input": "nums = [5,5,5,5,5]",
        "output": "2"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "2"
      },
      {
        "input": "nums = [5,4,3,2,1,1,2,3,4,5]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [10,9,8,7,6]",
        "output": "5"
      },
      {
        "input": "nums = [1,4,7,10]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "nums = [1,3,5,4,7,9,8,11,13,12]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,2,3,4,5,5,6]",
        "output": "7"
      },
      {
        "input": "nums = [1000000, 999999, 999998, 999997, 999996]",
        "output": "5"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [2,1,5,1,1]",
        "output": "3"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,5]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,4,6,8,10,12,14,16,18]",
        "output": "3"
      },
      {
        "input": "nums = [1000000]",
        "output": "1"
      },
      {
        "input": "nums = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9, 9, 10, 11, 12, 12, 12, 12, 13, 14, 15, 16, 16, 16, 17, 18, 19, 20, 20, 20, 20, 21, 22, 23, 24, 25, 25, 25, 25, 26, 27, 28, 29, 30]",
        "output": "31"
      },
      {
        "input": "nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "3"
      },
      {
        "input": "nums = [1, 2, 3, 6, 7, 8, 10, 11, 12, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26]",
        "output": "7"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "1"
      },
      {
        "input": "nums = [1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000]",
        "output": "2"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "2"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3]",
        "output": "2"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "26"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [1,1000000,2,999999,3,999998,4,999997,5,999996,6,999995,7,999994,8,999993,9,999992,10,999991]",
        "output": "10"
      },
      {
        "input": "nums = [100,101,102,99,98,97,96,95,94,93,92,91,90]",
        "output": "13"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "100"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14]",
        "output": "15"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]",
        "output": "6"
      },
      {
        "input": "nums = [100000, 99999, 99998, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "9"
      },
      {
        "input": "nums = [1000000, 1000000, 1000000, 999999, 999999, 999999, 999998, 999998, 999998, 999997, 999997, 999997]",
        "output": "5"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7]",
        "output": "8"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "2"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "2"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "2"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "2"
      },
      {
        "input": "nums = [1,10,11,12,20,21,22,30,31,32,40,41,42,50,51,52,60,61,62,70,71,72,80,81,82,90,91,92]",
        "output": "3"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "30"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60]",
        "output": "2"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59]",
        "output": "2"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,4,4,4,5,5,6,6,6,7,7,8,8,9,9,10,10]",
        "output": "11"
      },
      {
        "input": "nums = [2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]",
        "output": "3"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "11"
      },
      {
        "input": "nums = [10,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "12"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "15"
      },
      {
        "input": "nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29, 30, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "40"
      },
      {
        "input": "nums = [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29]",
        "output": "5"
      },
      {
        "input": "nums = [3,1,2,4,6,5,7,9,8,10,12,11,13,15,14,16,18,17,19,20]",
        "output": "20"
      },
      {
        "input": "nums = [5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11]",
        "output": "8"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "22"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4]",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "11"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "11"
      },
      {
        "input": "nums = [2,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "nums = [1,1,2,3,3,3,4,4,5,5,5,5,6,6,6,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,10]",
        "output": "11"
      },
      {
        "input": "nums = [5,5,5,5,5,6,6,6,6,7,7,7,7]",
        "output": "4"
      },
      {
        "input": "nums = [100, 200, 101, 201, 102, 202, 103, 203, 104, 204, 105, 205]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,12,13,14,15,17,18,19,20,22,23,24,25]",
        "output": "14"
      },
      {
        "input": "nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "40"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,3,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,8]",
        "output": "9"
      },
      {
        "input": "nums = [1, 10, 19, 28, 37, 46, 55, 64, 73, 82, 91, 100, 109, 118, 127, 136, 145, 154, 163, 172, 181, 190, 199]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "11"
      },
      {
        "input": "nums = [1, 2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60]",
        "output": "11"
      },
      {
        "input": "nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10]",
        "output": "11"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "11"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "30"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14]",
        "output": "15"
      },
      {
        "input": "nums = [10, 2, 10, 10, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15, 14, 16]",
        "output": "17"
      },
      {
        "input": "nums = [1,3,6,10,15,21,28,36,45,55]",
        "output": "2"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "10"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "2"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [1000000, 1000000, 1000000, 1000000, 1000000]",
        "output": "2"
      },
      {
        "input": "nums = [100, 101, 102, 200, 201, 202, 300, 301, 302, 400, 401, 402, 500, 501, 502]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,3,10,11,12,20,21,22,30,31,32,40,41,42,50,51,52,60,61,62,70,71,72,80,81,82,90,91,92,93,94,95]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,2,3,4,5,6,7,8,9,10,10,11,12,13,14,15,16,17,18,19,20,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "31"
      },
      {
        "input": "nums = [2, 1, 5, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "31"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,11,12,13,14,15,16,17,18,19,20,20,21,22,23,24,25,26,27,28,29,30,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "41"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]",
        "output": "11"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]",
        "output": "21"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]",
        "output": "10"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,4,5,7,8,10,11,13,14,16,17,19,20,22,23]",
        "output": "4"
      },
      {
        "input": "nums = [500000,500001,500002,500003,500004,500005,500006,500007,500008,500009,500010]",
        "output": "11"
      },
      {
        "input": "nums = [1,2,2,3,4,5,5,5,6,7,8,9,9,10,10,10,10,11,12,13]",
        "output": "14"
      },
      {
        "input": "nums = [5, 1, 3, 2, 4, 6, 8, 7, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "30"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28]",
        "output": "29"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]",
        "output": "20"
      },
      {
        "input": "nums = [5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8]",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,3,3,3,3,4,4,5,5,5,6,6,6,6,6,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "2"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "1"
      },
      {
        "input": "nums = [1000000,999999,999998,999997,999996,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,10,11,11,12,12,12,13,13,14,14,14,15,15,16,16,17,17,18,18,19,19,20,20]",
        "output": "21"
      },
      {
        "input": "nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991, 999990, 999989, 999988, 999987, 999986, 999985, 999984, 999983, 999982, 999981]",
        "output": "20"
      },
      {
        "input": "nums = [1, 3, 2, 4, 6, 5, 7, 8, 10, 9, 11, 12, 14, 13, 15, 16, 18, 17, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,5,6,7,9,10,11,13,14,15,17,18,19,21,22,23]",
        "output": "6"
      },
      {
        "input": "nums = [1000000,999999,999998,999997,999996,999995,999994,999993,999992,999991]",
        "output": "10"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "1"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "2"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "16"
      },
      {
        "input": "nums = [1,1,1,2,3,4,5,5,5,6,7,8,8,8,9,10,11,11,11,12,13,14,14,14,15,16,17,17,17]",
        "output": "18"
      },
      {
        "input": "nums = [5,3,1,4,2,6,8,7,9,10,12,11]",
        "output": "12"
      },
      {
        "input": "nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]",
        "output": "3"
      },
      {
        "input": "nums = [10, 21, 32, 43, 54, 65, 76, 87, 98, 109]",
        "output": "1"
      },
      {
        "input": "nums = [50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]",
        "output": "31"
      },
      {
        "input": "nums = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20]",
        "output": "4"
      }
    ]
  },
  {
    "id": 2897,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Bit Manipulation",
      "Array",
      "Hash Table"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums and a positive integer k.\nYou can do the following operation on the array any number of times:\n\nChoose any two distinct indices i and j and simultaneously update the values of nums[i] to (nums[i] AND nums[j]) and nums[j] to (nums[i] OR nums[j]). Here, OR denotes the bitwise OR operation, and AND denotes the bitwise AND operation.\n\nYou have to choose k elements from the final array and calculate the sum of their squares.\nReturn the maximum sum of squares you can achieve.\nSince the answer can be very large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\nInput: nums = [2,6,5,8], k = 2\nOutput: 261\nExplanation: We can do the following operations on the array:\n- Choose i = 0 and j = 3, then change nums[0] to (2 AND 8) = 0 and nums[3] to (2 OR 8) = 10. The resulting array is nums = [0,6,5,10].\n- Choose i = 2 and j = 3, then change nums[2] to (5 AND 10) = 0 and nums[3] to (5 OR 10) = 15. The resulting array is nums = [0,6,0,15].\nWe can choose the elements 15 and 6 from the final array. The sum of squares is 152 + 62 = 261.\nIt can be shown that this is the maximum value we can get.\n\nExample 2:\n\nInput: nums = [4,5,4,7], k = 3\nOutput: 90\nExplanation: We do not need to apply any operations.\nWe can choose the elements 7, 5, and 4 with a sum of squares: 72 + 52 + 42 = 90.\nIt can be shown that this is the maximum value we can get.\n\n\u00a0\nConstraints:\n\n1 <= k <= nums.length <= 105\n1 <= nums[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def maxSum(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,3,4,5], k = 5",
        "output": "99"
      },
      {
        "input": "nums = [10,10,10,10], k = 4",
        "output": "400"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000], k = 2",
        "output": "98"
      },
      {
        "input": "nums = [10,10,10,10], k = 2",
        "output": "200"
      },
      {
        "input": "nums = [1,1,1,1], k = 4",
        "output": "4"
      },
      {
        "input": "nums = [3,3,3,3,3,3], k = 3",
        "output": "27"
      },
      {
        "input": "nums = [2,6,5,8], k = 2",
        "output": "261"
      },
      {
        "input": "nums = [4,5,4,7], k = 3",
        "output": "90"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 10",
        "output": "10"
      },
      {
        "input": "nums = [1000000000,999999999,888888888,777777777], k = 2",
        "output": "976625502"
      },
      {
        "input": "nums = [1,2,3,4,5], k = 1",
        "output": "49"
      },
      {
        "input": "nums = [1,1,1,1,1,1], k = 6",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 20",
        "output": "20"
      },
      {
        "input": "nums = [999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999], k = 20",
        "output": "1280"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], k = 10",
        "output": "73676282"
      },
      {
        "input": "nums = [123456789, 987654321, 234567890, 876543210, 456789012, 765432109, 654321098, 543210987, 432109876, 321098765], k = 10",
        "output": "686045577"
      },
      {
        "input": "nums = [999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937, 999999937], k = 5",
        "output": "24500"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000], k = 3",
        "output": "147"
      },
      {
        "input": "nums = [134217728, 268435456, 536870912, 1073741824, 67108864, 134217728, 268435456, 536870912, 1073741824, 67108864], k = 10",
        "output": "214664351"
      },
      {
        "input": "nums = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73], k = 20",
        "output": "65732"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 7",
        "output": "64660"
      },
      {
        "input": "nums = [2**30, 2**29, 2**28, 2**27, 2**26, 2**25, 2**24, 2**23, 2**22, 2**21], k = 10",
        "output": "Error: Solution.maxSum() missing 1 required positional argument: 'nums'"
      },
      {
        "input": "nums = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 1024, 2048, 4096, 8192, 16384], k = 15",
        "output": "74023771"
      },
      {
        "input": "nums = [1, 1, 2, 2, 4, 4, 8, 8, 16, 16, 32, 32], k = 6",
        "output": "7938"
      },
      {
        "input": "nums = [123456789, 987654321, 111222333, 333222111, 444555666], k = 4",
        "output": "54499332"
      },
      {
        "input": "nums = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17], k = 16",
        "output": "4624"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288], k = 15",
        "output": "509522932"
      },
      {
        "input": "nums = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 11",
        "output": "4190209"
      },
      {
        "input": "nums = [31, 31, 31, 31, 31, 31, 31, 31, 31, 31], k = 10",
        "output": "9610"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], k = 10",
        "output": "4186116"
      },
      {
        "input": "nums = [999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999], k = 10",
        "output": "640"
      },
      {
        "input": "nums = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17], k = 10",
        "output": "2890"
      },
      {
        "input": "nums = [8, 4, 2, 1, 16, 32, 64, 128, 256, 512], k = 10",
        "output": "1046529"
      },
      {
        "input": "nums = [1000000000, 999999999, 888888888, 777777777, 666666666, 555555555, 444444444, 333333333, 222222222, 111111111], k = 5",
        "output": "847975472"
      },
      {
        "input": "nums = [31, 15, 7, 3, 1, 128, 64, 32, 16, 8], k = 10",
        "output": "66221"
      },
      {
        "input": "nums = [23456789, 987654321, 34567890, 876543210, 45678901, 765432109], k = 3",
        "output": "500137909"
      },
      {
        "input": "nums = [123456789, 987654321, 111111111, 222222222, 333333333, 444444444, 555555555, 666666666, 777777777, 888888888], k = 10",
        "output": "10971971"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288], k = 10",
        "output": "509522932"
      },
      {
        "input": "nums = [31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31], k = 25",
        "output": "24025"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 10",
        "output": "242976"
      },
      {
        "input": "nums = [2147483647,2147483646,2147483645,2147483644,2147483643], k = 3",
        "output": "551856212"
      },
      {
        "input": "nums = [314159, 271828, 161803, 414159, 926535, 897932, 384626, 433832, 795028, 841971], k = 5",
        "output": "410299793"
      },
      {
        "input": "nums = [256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728], k = 10",
        "output": "94637808"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 5",
        "output": "5"
      },
      {
        "input": "nums = [999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991, 999999990], k = 5",
        "output": "320"
      },
      {
        "input": "nums = [233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233], k = 20",
        "output": "1085780"
      },
      {
        "input": "nums = [500000000,500000001,500000002,500000003,500000004,500000005], k = 4",
        "output": "43"
      },
      {
        "input": "nums = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575], k = 15",
        "output": "11297913"
      },
      {
        "input": "nums = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000], k = 10",
        "output": "790321908"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "10"
      },
      {
        "input": "nums = [256, 128, 64, 32, 16, 8, 4, 2, 1], k = 9",
        "output": "261121"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288], k = 20",
        "output": "509522932"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "10"
      },
      {
        "input": "nums = [1000000000, 500000000, 250000000, 125000000, 62500000, 31250000, 15625000, 7812500, 3906250, 1953125], k = 10",
        "output": "351846767"
      },
      {
        "input": "nums = [65535,65534,65533,65532,65531,65530,65529,65528,65527,65526,65525,65524,65523,65522,65521], k = 10",
        "output": "944430306"
      },
      {
        "input": "nums = [2147483647, 1073741824, 536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608, 4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 10",
        "output": "701237477"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 20",
        "output": "20"
      },
      {
        "input": "nums = [31, 17, 15, 13, 11, 7, 5, 3, 2], k = 5",
        "output": "2421"
      },
      {
        "input": "nums = [1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 21",
        "output": "42286015"
      },
      {
        "input": "nums = [2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647], k = 10",
        "output": "506187364"
      },
      {
        "input": "nums = [123456789,987654321,111111111,222222222,333333333,444444444,555555555,666666666,777777777,888888888], k = 5",
        "output": "108685633"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 10",
        "output": "10"
      },
      {
        "input": "nums = [2147483647, 2147483646, 2147483645, 2147483644], k = 4",
        "output": "632671383"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], k = 7",
        "output": "57663"
      },
      {
        "input": "nums = [1000000000, 900000000, 800000000, 700000000, 600000000, 500000000, 400000000, 300000000, 200000000, 100000000], k = 5",
        "output": "757777593"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180], k = 15",
        "output": "420002"
      },
      {
        "input": "nums = [1000000,1000001,1000002,1000003,1000004,1000005,1000006,1000007,1000008,1000009], k = 5",
        "output": "89965549"
      },
      {
        "input": "nums = [1024, 2048, 4096, 8192, 16384], k = 3",
        "output": "7681529"
      },
      {
        "input": "nums = [100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000], k = 5",
        "output": "216111556"
      },
      {
        "input": "nums = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90], k = 5",
        "output": "53085"
      },
      {
        "input": "nums = [123456789, 987654321, 135792468, 246813579, 864204680, 975318642, 789456123, 654321987, 321654987, 456789123], k = 5",
        "output": "103639635"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000], k = 5",
        "output": "245"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113], k = 30",
        "output": "192245"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000], k = 6",
        "output": "785975284"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], k = 20",
        "output": "500"
      },
      {
        "input": "nums = [1023,2047,3071,4095,5119,6143,7167,8191], k = 8",
        "output": "272556040"
      },
      {
        "input": "nums = [2147483647, 2147483646, 2147483645, 2147483644, 2147483643, 2147483642, 2147483641, 2147483640, 2147483639, 2147483638, 2147483637], k = 11",
        "output": "133607314"
      },
      {
        "input": "nums = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], k = 8",
        "output": "1394008"
      },
      {
        "input": "nums = [2147483647, 2147483647, 2147483647, 2147483647, 2147483647], k = 2",
        "output": "701237477"
      },
      {
        "input": "nums = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17], k = 5",
        "output": "1445"
      },
      {
        "input": "nums = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000], k = 5",
        "output": "245"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], k = 5",
        "output": "3461"
      },
      {
        "input": "nums = [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25], k = 10",
        "output": "6250"
      },
      {
        "input": "nums = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1], k = 5",
        "output": "1392773"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], k = 5",
        "output": "704657727"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536], k = 8",
        "output": "179344781"
      },
      {
        "input": "nums = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 11",
        "output": "8380418"
      },
      {
        "input": "nums = [123456789, 987654321, 123456789, 987654321, 123456789, 987654321, 123456789, 987654321, 123456789, 987654321], k = 5",
        "output": "925171582"
      },
      {
        "input": "nums = [1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048], k = 5",
        "output": "460740093"
      },
      {
        "input": "nums = [13,27,39,45,51,63,75,87,99,111,123,135,147,159,171], k = 10",
        "output": "286506"
      },
      {
        "input": "nums = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 67, 71, 75, 79], k = 10",
        "output": "80842"
      },
      {
        "input": "nums = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047], k = 5",
        "output": "5579013"
      },
      {
        "input": "nums = [1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024], k = 10",
        "output": "10485760"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824], k = 30",
        "output": "850618742"
      },
      {
        "input": "nums = [31, 15, 7, 3, 1, 0], k = 4",
        "output": "1244"
      },
      {
        "input": "nums = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], k = 15",
        "output": "2535"
      },
      {
        "input": "nums = [31, 62, 124, 248, 496, 992, 1984, 3968, 7936, 15872], k = 5",
        "output": "357400917"
      },
      {
        "input": "nums = [2147483647, 2147483647, 2147483647, 2147483647], k = 4",
        "output": "402474947"
      },
      {
        "input": "nums = [1024, 2048, 4096, 8192, 16384, 32768, 65536], k = 7",
        "output": "912482192"
      }
    ]
  },
  {
    "id": 2197,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Array",
      "Math",
      "Number Theory"
    ],
    "problemDescription": "You are given an array of integers nums. Perform the following steps:\n\nFind any two adjacent numbers in nums that are non-coprime.\nIf no such numbers are found, stop the process.\nOtherwise, delete the two numbers and replace them with their LCM (Least Common Multiple).\nRepeat this process as long as you keep finding two adjacent non-coprime numbers.\n\nReturn the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will lead to the same result.\nThe test cases are generated such that the values in the final array are less than or equal to 108.\nTwo values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.\n\u00a0\nExample 1:\n\nInput: nums = [6,4,3,2,7,6,2]\nOutput: [12,7,6]\nExplanation: \n- (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = [12,3,2,7,6,2].\n- (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = [12,2,7,6,2].\n- (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = [12,7,6,2].\n- (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = [12,7,6].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [12,7,6].\nNote that there are other ways to obtain the same resultant array.\n\nExample 2:\n\nInput: nums = [2,2,1,1,3,3,3]\nOutput: [2,1,1,3]\nExplanation: \n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3,3].\n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3].\n- (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = [2,1,1,3].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [2,1,1,3].\nNote that there are other ways to obtain the same resultant array.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 105\nThe test cases are generated such that the values in the final array are less than or equal to 108.\n\n",
    "starterCode": "class Solution:\n    def replaceNonCoprimes(self, nums: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [4,6,8,10,12]",
        "output": "[120]"
      },
      {
        "input": "nums = [100000, 100000, 100000, 100000]",
        "output": "[100000]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [2,2,1,1,3,3,3]",
        "output": "[2, 1, 1, 3]"
      },
      {
        "input": "nums = [9,27,81,243,729]",
        "output": "[729]"
      },
      {
        "input": "nums = [42,56,70,84,98]",
        "output": "[5880]"
      },
      {
        "input": "nums = [7,3,5,2,8,6]",
        "output": "[7, 3, 5, 24]"
      },
      {
        "input": "nums = [9,3,6,12,24,48]",
        "output": "[144]"
      },
      {
        "input": "nums = [100,200,300,400,500]",
        "output": "[6000]"
      },
      {
        "input": "nums = [7,11,13,17,19]",
        "output": "[7, 11, 13, 17, 19]"
      },
      {
        "input": "nums = [7,3,5,2,11]",
        "output": "[7, 3, 5, 2, 11]"
      },
      {
        "input": "nums = [5,10,15,20,25]",
        "output": "[300]"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29]",
        "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"
      },
      {
        "input": "nums = [9,9,9,9,9,9,9,9,9,9]",
        "output": "[9]"
      },
      {
        "input": "nums = [5,10,15,20]",
        "output": "[60]"
      },
      {
        "input": "nums = [60,45,30,15,5]",
        "output": "[180]"
      },
      {
        "input": "nums = [6,4,3,2,7,6,2]",
        "output": "[12, 7, 6]"
      },
      {
        "input": "nums = [8,12,18,24,30]",
        "output": "[360]"
      },
      {
        "input": "nums = [3,5,7,11,13,17,19,23,29,31]",
        "output": "[3, 5, 7, 11, 13, 17, 19, 23, 29, 31]"
      },
      {
        "input": "nums = [4,6,8,10,12,14,16]",
        "output": "[1680]"
      },
      {
        "input": "nums = [2,3,5,6,9,15,20,30,45]",
        "output": "[180]"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]",
        "output": "[17640]"
      },
      {
        "input": "nums = [225, 315, 405, 15, 21, 27, 33, 39, 45]",
        "output": "[2027025]"
      },
      {
        "input": "nums = [31, 32, 34, 38, 44, 46, 52, 58, 62, 68]",
        "output": "[30561598496]"
      },
      {
        "input": "nums = [100000, 50000, 25000, 12500, 6250, 3125]",
        "output": "[100000]"
      },
      {
        "input": "nums = [9, 3, 27, 81, 243, 729, 2187]",
        "output": "[2187]"
      },
      {
        "input": "nums = [9, 15, 18, 24, 30, 36, 45]",
        "output": "[360]"
      },
      {
        "input": "nums = [210, 154, 110, 77, 49, 35, 21, 7]",
        "output": "[16170]"
      },
      {
        "input": "nums = [360, 420, 480, 12, 15, 18, 21, 24, 27]",
        "output": "[30240]"
      },
      {
        "input": "nums = [25, 15, 10, 20, 12, 30, 18]",
        "output": "[900]"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
        "output": "[1024]"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70,77,84,91,98]",
        "output": "[2522520]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "nums = [9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42]",
        "output": "[1081080]"
      },
      {
        "input": "nums = [14, 21, 35, 56, 98, 112]",
        "output": "[11760]"
      },
      {
        "input": "nums = [72, 48, 32, 16, 8, 4, 2]",
        "output": "[288]"
      },
      {
        "input": "nums = [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "[720720]"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30, 35, 40]",
        "output": "[4200]"
      },
      {
        "input": "nums = [525, 630, 735, 15, 21, 27, 33, 39, 45]",
        "output": "[9459450]"
      },
      {
        "input": "nums = [12, 18, 24, 30, 36, 42, 48, 54, 60]",
        "output": "[15120]"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49]",
        "output": "[2940]"
      },
      {
        "input": "nums = [21, 28, 35, 42, 49, 56, 63, 70, 77, 84]",
        "output": "[194040]"
      },
      {
        "input": "nums = [204, 260, 312, 13, 17, 21, 23, 29, 31]",
        "output": "[185640, 23, 29, 31]"
      },
      {
        "input": "nums = [45, 63, 81, 99, 117, 135, 153, 171, 189, 207]",
        "output": "[3011753745]"
      },
      {
        "input": "nums = [18, 24, 30, 12, 15, 20, 25, 35, 40]",
        "output": "[12600]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[12600]"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78, 91, 104, 117, 130]",
        "output": "[32760]"
      },
      {
        "input": "nums = [15, 10, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[12600]"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
        "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]"
      },
      {
        "input": "nums = [1000, 1250, 1500, 1750, 2000, 2250, 2500]",
        "output": "[630000]"
      },
      {
        "input": "nums = [100, 150, 200, 250, 300, 350, 400, 450, 500]",
        "output": "[126000]"
      },
      {
        "input": "nums = [9,15,21,27,33,39,45,51,57,63]",
        "output": "[43648605]"
      },
      {
        "input": "nums = [256, 192, 128, 64, 32, 16, 8, 4, 2]",
        "output": "[768]"
      },
      {
        "input": "nums = [110, 154, 198, 11, 14, 18, 22, 26, 30]",
        "output": "[90090]"
      },
      {
        "input": "nums = [123456, 987654, 111111, 222222, 333333, 444444, 555555]",
        "output": "[11289971323350720]"
      },
      {
        "input": "nums = [2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768]",
        "output": "[32768]"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105]",
        "output": "[72747675]"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "[72747675]"
      },
      {
        "input": "nums = [210, 273, 330, 21, 27, 33, 39, 45, 51]",
        "output": "[4594590]"
      },
      {
        "input": "nums = [18, 27, 36, 45, 54, 63, 72, 81, 90, 99]",
        "output": "[249480]"
      },
      {
        "input": "nums = [11,22,33,44,55,66,77,88,99,110,121,132,143,154,165]",
        "output": "[3963960]"
      },
      {
        "input": "nums = [101, 102, 103, 104, 105, 106, 107, 108, 109, 110]",
        "output": "[101, 102, 103, 104, 105, 106, 107, 108, 109, 110]"
      },
      {
        "input": "nums = [100,150,200,250,300,350,400,450,500]",
        "output": "[126000]"
      },
      {
        "input": "nums = [84, 140, 196, 252, 308, 364, 420, 476, 532, 588, 644]",
        "output": "[9369900540]"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70]",
        "output": "[17640]"
      },
      {
        "input": "nums = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60]",
        "output": "[138600]"
      },
      {
        "input": "nums = [12, 15, 20, 25, 30, 35]",
        "output": "[2100]"
      },
      {
        "input": "nums = [495, 595, 693, 11, 13, 17, 19, 23, 29]",
        "output": "[58905, 13, 17, 19, 23, 29]"
      },
      {
        "input": "nums = [4,8,16,32,64,128,256,512,1024]",
        "output": "[1024]"
      },
      {
        "input": "nums = [100, 25, 50, 20, 40, 80, 160]",
        "output": "[800]"
      },
      {
        "input": "nums = [4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "[720720]"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]",
        "output": "[138600]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [101,202,303,404,505,606,707,808,909,1010]",
        "output": "[254520]"
      },
      {
        "input": "nums = [100, 50, 25, 125, 200, 80]",
        "output": "[2000]"
      },
      {
        "input": "nums = [11, 22, 33, 44, 55, 66, 77, 88, 99, 110]",
        "output": "[27720]"
      },
      {
        "input": "nums = [123456, 234567, 345678, 456789, 567890]",
        "output": "[24044013243300726813942720]"
      },
      {
        "input": "nums = [8, 4, 2, 1, 2, 4, 8, 16, 32, 64]",
        "output": "[8, 1, 64]"
      },
      {
        "input": "nums = [21,28,35,42,49,56,63,70,77,84,91,98]",
        "output": "[2522520]"
      },
      {
        "input": "nums = [25, 45, 65, 85, 105, 125]",
        "output": "[1740375]"
      },
      {
        "input": "nums = [99,100,101,102,103,104,105,106,107,108,109,110]",
        "output": "[99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]"
      },
      {
        "input": "nums = [63, 77, 91, 14, 18, 22, 26, 30, 34]",
        "output": "[1531530]"
      },
      {
        "input": "nums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "nums = [210, 105, 35, 10, 5, 7, 14, 28, 56]",
        "output": "[840]"
      },
      {
        "input": "nums = [5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560]",
        "output": "[2560]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "[25200]"
      },
      {
        "input": "nums = [3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049]",
        "output": "[59049]"
      },
      {
        "input": "nums = [98, 49, 21, 14, 7, 3, 1]",
        "output": "[294, 1]"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
        "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
      },
      {
        "input": "nums = [100000, 50000, 25000, 12500, 6250, 3125, 1562, 781, 390, 195]",
        "output": "[3045900000]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [6,12,18,24,30,36,42,48,54,60,66,72,78,84,90]",
        "output": "[2162160]"
      },
      {
        "input": "nums = [100, 75, 150, 25, 50, 125, 200]",
        "output": "[3000]"
      },
      {
        "input": "nums = [45,90,135,180,225,270,315,360,405,450,495,540,585,630,675,720,765,810,855,900]",
        "output": "[10475665200]"
      },
      {
        "input": "nums = [121, 143, 169, 11, 13, 17, 19, 23, 29]",
        "output": "[20449, 17, 19, 23, 29]"
      },
      {
        "input": "nums = [210, 330, 450, 570, 690, 810, 930, 1050, 1170]",
        "output": "[54920215350]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[5040]"
      },
      {
        "input": "nums = [98, 42, 56, 28, 14, 7, 1]",
        "output": "[1176, 1]"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [18, 27, 36, 45, 54, 63]",
        "output": "[3780]"
      },
      {
        "input": "nums = [45, 90, 135, 270, 540, 1080, 2160]",
        "output": "[2160]"
      },
      {
        "input": "nums = [10,20,40,80,160,320,640,1280,2560,5120,10240]",
        "output": "[10240]"
      },
      {
        "input": "nums = [25,50,75,100,125,150,175,200,225,250]",
        "output": "[63000]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700]",
        "output": "[42000]"
      },
      {
        "input": "nums = [20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[25200]"
      },
      {
        "input": "nums = [231, 105, 63, 21, 7, 1]",
        "output": "[3465, 1]"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30]",
        "output": "[7560]"
      },
      {
        "input": "nums = [720, 360, 180, 90, 45, 22, 11]",
        "output": "[7920]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "[1163962800]"
      },
      {
        "input": "nums = [49,42,35,28,21,14,7]",
        "output": "[2940]"
      },
      {
        "input": "nums = [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109]",
        "output": "[99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109]"
      },
      {
        "input": "nums = [9, 15, 45, 30, 18, 60, 20]",
        "output": "[180]"
      },
      {
        "input": "nums = [42, 56, 70, 84, 98, 112, 126, 140, 154, 168, 182, 196]",
        "output": "[5045040]"
      },
      {
        "input": "nums = [12345, 67890, 11111, 22222, 33333, 44444, 55555]",
        "output": "[1241620250340]"
      },
      {
        "input": "nums = [6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42]",
        "output": "[1081080]"
      },
      {
        "input": "nums = [42, 56, 98, 14, 28, 49, 7, 35]",
        "output": "[5880]"
      },
      {
        "input": "nums = [12, 18, 24, 30, 36, 42, 48, 54, 60, 66]",
        "output": "[166320]"
      },
      {
        "input": "nums = [24,36,48,60,72,84,96,108,120,132,144,156,168,180,192,204,216,228,240]",
        "output": "[2793510720]"
      },
      {
        "input": "nums = [105, 135, 165, 15, 25, 35, 45, 55, 65]",
        "output": "[675675]"
      },
      {
        "input": "nums = [77, 91, 143, 169, 221, 287, 323, 391, 437]",
        "output": "[3963616657]"
      },
      {
        "input": "nums = [30,60,90,120,150,180,210,240,270,300,330,360,390,420,450,480,510,540,570,600]",
        "output": "[6983776800]"
      },
      {
        "input": "nums = [100, 75, 50, 25, 10, 5, 1]",
        "output": "[300, 1]"
      },
      {
        "input": "nums = [12,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "[1163962800]"
      },
      {
        "input": "nums = [10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120]",
        "output": "[5120]"
      },
      {
        "input": "nums = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "[1024, 1]"
      },
      {
        "input": "nums = [9, 81, 729, 6561, 59049, 531441]",
        "output": "[531441]"
      },
      {
        "input": "nums = [12,18,24,30,36,42,48,54,60,66]",
        "output": "[166320]"
      },
      {
        "input": "nums = [3, 6, 12, 24, 48, 96, 192, 384, 768, 1536]",
        "output": "[1536]"
      },
      {
        "input": "nums = [3,9,27,81,243,729,2187,6561,19683,59049]",
        "output": "[59049]"
      },
      {
        "input": "nums = [18, 24, 30, 42, 54, 66, 78, 90, 102, 114]",
        "output": "[349188840]"
      },
      {
        "input": "nums = [1000, 1500, 2000, 2500, 3000]",
        "output": "[30000]"
      },
      {
        "input": "nums = [144, 180, 216, 12, 15, 18, 21, 24, 27]",
        "output": "[15120]"
      },
      {
        "input": "nums = [100000, 50000, 25000, 12500, 6250, 3125, 15625]",
        "output": "[500000]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "[252000]"
      }
    ]
  },
  {
    "id": 2577,
    "difficulty": "Hard",
    "tags": [
      "Breadth-First Search",
      "Graph",
      "Array",
      "Matrix",
      "Shortest Path",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].\nYou are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\nReturn the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.\n\u00a0\nExample 1:\n\n\nInput: grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]\nOutput: 7\nExplanation: One of the paths that we can take is the following:\n- at t = 0, we are on the cell (0,0).\n- at t = 1, we move to the cell (0,1). It is possible because grid[0][1] <= 1.\n- at t = 2, we move to the cell (1,1). It is possible because grid[1][1] <= 2.\n- at t = 3, we move to the cell (1,2). It is possible because grid[1][2] <= 3.\n- at t = 4, we move to the cell (1,1). It is possible because grid[1][1] <= 4.\n- at t = 5, we move to the cell (1,2). It is possible because grid[1][2] <= 5.\n- at t = 6, we move to the cell (1,3). It is possible because grid[1][3] <= 6.\n- at t = 7, we move to the cell (2,3). It is possible because grid[2][3] <= 7.\nThe final time is 7. It can be shown that it is the minimum time possible.\n\nExample 2:\n\n\nInput: grid = [[0,2,4],[3,2,1],[1,0,4]]\nOutput: -1\nExplanation: There is no path from the top left to the bottom-right cell.\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n2 <= m, n <= 1000\n4 <= m * n <= 105\n0 <= grid[i][j] <= 105\ngrid[0][0] == 0\n\n\u00a0\n\n",
    "starterCode": "class Solution:\n    def minimumTime(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[0,2,4],[3,2,1],[1,0,4]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,0,0],[0,1,0],[0,0,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,0],[0,1]]",
        "output": "2"
      },
      {
        "input": "grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]",
        "output": "7"
      },
      {
        "input": "grid = [[0,1],[2,1]]",
        "output": "2"
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[0,0,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,1,0,1,2],[0,1,0,1,2],[0,1,0,1,2],[0,1,0,1,2]]",
        "output": "7"
      },
      {
        "input": "grid = [[0,100],[101,100]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1],[2,3]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,1,2],[1,1,1],[2,1,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,1,1],[2,2,1],[1,1,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,1,2],[3,4,5],[6,7,8]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,1,2,3,4],[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,1,1,1,0],[0,1,99,1,0],[0,1,1,1,0],[0,0,0,0,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,1,2,3,4,5],[6,7,8,9,10,11],[12,13,14,15,16,17],[18,19,20,21,22,23],[24,25,26,27,28,29]]",
        "output": "29"
      },
      {
        "input": "grid = [[0,10000,10000],[10000,1,10000],[10000,10000,1]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6],[6,5,4,3,2,1,0],[0,1,2,3,4,5,6],[6,5,4,3,2,1,0],[0,1,2,3,4,5,0],[5,4,3,2,1,0,0],[0,0,0,0,0,0,0]]",
        "output": "12"
      },
      {
        "input": "grid = [[0,1,1,1,1],[1,2,2,2,1],[1,2,99,2,1],[1,2,2,2,1],[1,1,1,1,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,1,1,1,1,1],[1,9,9,9,9,1],[1,9,9,9,9,1],[1,9,9,9,9,1],[1,9,9,9,9,1],[1,1,1,1,1,0]]",
        "output": "10"
      },
      {
        "input": "grid = [[0,2,4,6,8],[1,3,5,7,9],[2,4,6,8,10],[3,5,7,9,11]]",
        "output": "11"
      },
      {
        "input": "grid = [[0,99,99,99,99,99,99],[99,99,99,99,99,99,99],[99,99,0,1,1,1,99],[99,99,1,99,99,1,99],[99,99,1,1,1,1,99],[99,99,99,99,99,99,99],[99,99,99,99,99,99,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,10,15],[1,5,20],[2,10,25],[3,15,30]]",
        "output": "31"
      },
      {
        "input": "grid = [[0,1,1,1],[1,99,99,1],[1,1,99,1],[1,1,1,0]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,1,1000,1000,1000,1000,1000,1000,1000,1000],[1,1000,1,1,1,1,1,1,1,1000],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,0]]",
        "output": "18"
      },
      {
        "input": "grid = [[0,1,2,3,4,5],[5,4,3,2,1,0],[0,1,2,3,4,5],[5,4,3,2,1,0],[0,1,2,3,4,0],[4,3,2,1,0,0]]",
        "output": "10"
      },
      {
        "input": "grid = [[0,2,2,1,3],[1,2,3,1,2],[1,2,1,2,1],[2,1,1,3,2]]",
        "output": "7"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[1,1,1,1,1,1,1],[2,2,2,2,2,2,2],[3,3,3,3,3,3,3],[4,4,4,4,4,4,4],[5,5,5,5,5,5,5],[6,6,6,6,6,6,6]]",
        "output": "12"
      },
      {
        "input": "grid = [[0, 2, 5, 7], [2, 5, 7, 9], [7, 9, 2, 5], [9, 2, 5, 0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,2,3,4],[4,3,2,1,0],[0,1,2,3,4],[4,3,2,1,0],[0,1,2,3,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1,0],[0,9,8,7,6,5,4,3,2,0],[9,8,7,6,5,4,3,2,1,0],[0,9,8,7,6,5,4,3,2,0],[9,8,7,6,5,4,3,2,1,0],[0,9,8,7,6,5,4,3,2,0],[9,8,7,6,5,4,3,2,1,0],[0,9,8,7,6,5,4,3,2,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "18"
      },
      {
        "input": "grid = [[0, 10, 20, 30], [15, 5, 25, 35], [10, 30, 10, 40], [5, 20, 30, 1]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,2,3],[10,9,8,7],[2,3,4,5],[11,12,13,6]]",
        "output": "10"
      },
      {
        "input": "grid = [[0, 1, 2, 3, 4, 5], [1, 6, 7, 8, 9, 10], [2, 7, 12, 13, 14, 15], [3, 8, 13, 18, 19, 20], [4, 9, 14, 19, 24, 25], [5, 10, 15, 20, 25, 0]]",
        "output": "26"
      },
      {
        "input": "grid = [[0, 2, 2, 2], [2, 1, 2, 2], [2, 2, 1, 2], [2, 2, 2, 1]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,0,0,0,0],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[0,0,0,0,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,1,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,2,2,1],[1,2,3,3,3,3,3,3,2,1],[1,2,3,4,4,4,4,3,2,1],[1,2,3,4,5,5,4,3,2,1],[1,2,3,4,5,6,5,4,3,1],[1,2,3,4,5,6,7,6,5,1],[1,2,3,4,5,6,7,8,7,1],[1,2,3,4,5,6,7,8,9,1],[1,1,1,1,1,1,1,1,1,1]]",
        "output": "18"
      },
      {
        "input": "grid = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,10000,9999],[10000,9998,10000],[9997,10000,10000]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,100000,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]",
        "output": "38"
      },
      {
        "input": "grid = [[0, 0, 0], [0, 100, 0], [0, 0, 0]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18,19],[20,21,22,23,24,25,26,27,28,29],[30,31,32,33,34,35,36,37,38,39],[40,41,42,43,44,45,46,47,48,49]]",
        "output": "49"
      },
      {
        "input": "grid = [[0, 1, 2, 3, 4, 5], [1, 6, 7, 8, 9, 10], [2, 11, 12, 13, 14, 15], [3, 16, 17, 18, 19, 20], [4, 21, 22, 23, 24, 25], [5, 26, 27, 28, 29, 30]]",
        "output": "30"
      },
      {
        "input": "grid = [[0,1,2],[3,100,5],[6,101,8]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,0]]",
        "output": "18"
      },
      {
        "input": "grid = [[0,1,2,3,4,5],[6,7,8,9,10,11],[12,13,14,15,16,17],[18,19,20,21,22,23],[24,25,26,27,28,0]]",
        "output": "25"
      },
      {
        "input": "grid = [[0,1,3,5,7],[2,4,6,8,10],[3,5,7,9,11],[4,6,8,10,12],[5,7,9,11,13]]",
        "output": "14"
      },
      {
        "input": "grid = [[0,2,5,9,13],[4,5,6,10,14],[7,8,7,11,15],[12,13,14,16,19],[16,17,18,18,20]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,2,1,4],[1,6,1,2],[3,1,5,3],[1,2,3,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,99999,99999,99999,0],[0,99999,99999,99999,0],[0,99999,99999,99999,0],[0,0,0,0,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,1,1,1,1,1,1,1,1,1],[1,99,99,99,99,99,99,99,99,1],[1,99,99,99,99,99,99,99,99,1],[1,99,99,99,99,99,99,99,99,1],[1,99,99,99,99,99,99,99,99,1],[1,99,99,99,99,99,99,99,99,1],[1,99,99,99,99,99,99,99,99,1],[1,99,99,99,99,99,99,99,99,1],[1,99,99,99,99,99,99,99,99,1],[1,1,1,1,1,1,1,1,1,0]]",
        "output": "18"
      },
      {
        "input": "grid = [[0,2,4,5,6],[7,3,8,9,1],[10,11,12,13,14],[15,16,17,18,19],[20,21,22,23,24]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]]",
        "output": "16"
      },
      {
        "input": "grid = [[0, 5, 10, 15], [15, 10, 5, 0], [10, 5, 0, 5], [15, 0, 5, 0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,5,7,8,9],[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,0]]",
        "output": "16"
      },
      {
        "input": "grid = [[0,1,2,3],[1,100000,1,4],[2,1,1,5],[3,4,5,6]]",
        "output": "6"
      },
      {
        "input": "grid = [[0, 1, 3, 2], [5, 8, 2, 5], [4, 3, 8, 6], [7, 6, 9, 0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9, 0]]",
        "output": "10"
      },
      {
        "input": "grid = [[0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,99,99,99,99],[99,99,99,99,99],[99,99,1,99,99],[99,99,1,99,99],[99,99,1,1,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9],[1,3,5,7,9,11,13,15,17,1],[2,4,6,8,10,12,14,16,18,3],[3,5,7,9,11,13,15,17,19,5],[4,6,8,10,12,14,16,18,20,7],[5,7,9,11,13,15,17,19,21,9],[6,8,10,12,14,16,18,20,22,11],[7,9,11,13,15,17,19,21,23,13],[8,10,12,14,16,18,20,22,24,15],[9,1,3,5,7,9,11,13,15,17]]",
        "output": "18"
      },
      {
        "input": "grid = [[0,10,11,12],[1,2,3,4],[5,6,7,8],[9,1,2,1]]",
        "output": "10"
      },
      {
        "input": "grid = [[0,1,2,3,4],[4,3,2,3,4],[4,3,2,3,4],[4,3,2,3,4],[4,3,2,3,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,1,5,3,4,2],[1,0,1,0,1,0],[2,0,2,0,2,0],[1,0,1,0,1,0],[3,2,3,2,3,1]]",
        "output": "9"
      },
      {
        "input": "grid = [[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9,10],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1]]",
        "output": "20"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6],[7,8,9,10,11,12,13],[14,15,16,17,18,19,20],[21,22,23,24,25,26,27],[28,29,30,31,32,33,34],[35,36,37,38,39,40,41],[42,43,44,45,46,47,48]]",
        "output": "48"
      },
      {
        "input": "grid = [[0, 1, 5], [1, 9, 1], [2, 8, 1]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,3,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1]]",
        "output": "8"
      },
      {
        "input": "grid = [[0, 2, 5, 7, 8], [1, 3, 4, 6, 9], [2, 1, 3, 5, 7], [3, 4, 2, 1, 8], [4, 3, 5, 2, 0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,10,10,10],[10,9,9,10],[10,9,8,10],[10,10,10,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,10,5],[20,0,15],[5,15,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0, 1, 2, 3, 4], [9, 8, 7, 6, 5], [4, 3, 2, 1, 0], [5, 6, 7, 8, 9], [0, 1, 2, 3, 4]]",
        "output": "10"
      },
      {
        "input": "grid = [[0,10,15,20],[5,4,3,2],[10,9,8,7],[15,14,13,6]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,1,1,1],[1,9,1,9,1],[1,1,9,1,1],[1,9,1,9,1],[1,1,1,9,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0, 10, 10, 10], [10, 1, 10, 10], [10, 10, 1, 10], [10, 10, 10, 1]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,2,3,5,1],[1,4,3,2,6],[7,3,1,5,8],[6,2,4,1,7],[5,1,2,3,0]]",
        "output": "10"
      },
      {
        "input": "grid = [[0,2,4,6,8],[1,3,5,7,9],[10,12,14,16,18],[19,21,23,25,27],[28,30,32,34,36]]",
        "output": "36"
      },
      {
        "input": "grid = [[0,2,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 10, 0], [0, 0, 0, 0]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,1,2,3,4,5],[5,4,3,2,1,0],[0,1,2,3,4,5],[5,4,3,99,99,99],[0,1,2,99,99,99],[0,0,0,99,99,99]]",
        "output": "102"
      },
      {
        "input": "grid = [[0,5,5,5,5,5],[5,1,1,1,1,1],[5,1,5,5,5,1],[5,1,1,5,1,1],[5,5,5,1,5,5],[5,1,1,1,1,5]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0, 1, 1, 1], [1, 2, 2, 1], [1, 2, 3, 4], [1, 1, 1, 0]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1,0],[0,1,2,3,4,5,6,7,8,0,0],[10,9,8,7,6,5,4,3,2,0,0],[0,1,2,3,4,5,6,7,8,0,0],[10,9,8,7,6,5,4,3,2,0,0],[0,1,2,3,4,5,6,7,8,0,0],[10,9,8,7,6,5,4,3,2,0,0],[0,1,2,3,4,5,6,7,8,0,0],[0,0,0,0,0,0,0,0,0,0,0]]",
        "output": "19"
      },
      {
        "input": "grid = [[0,2,1,4],[3,0,5,2],[1,4,0,3],[2,5,3,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,0,0],[0,10,0],[0,0,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[0, 2, 4, 6, 8], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [3, 5, 7, 9, 11], [4, 6, 8, 10, 12]]",
        "output": "12"
      },
      {
        "input": "grid = [[0,3,1,4],[3,5,7,8],[4,9,6,7],[11,12,5,10]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,2,3],[10,11,12,4],[13,14,15,5],[16,17,18,6]]",
        "output": "6"
      },
      {
        "input": "grid = [[0, 1, 2, 3], [1, 9, 8, 7], [2, 8, 7, 6], [3, 7, 6, 0]]",
        "output": "10"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1,0],[0,1,2,3,4,5,6,7,8,0],[9,8,7,6,5,4,3,2,1,0],[0,1,2,3,4,5,6,7,8,0],[9,8,7,6,5,4,3,2,1,0],[0,1,2,3,4,5,6,7,8,0],[9,8,7,6,5,4,3,2,1,0],[0,1,2,3,4,5,6,7,8,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "18"
      },
      {
        "input": "grid = [[0, 10, 20, 30, 40], [10, 11, 21, 31, 41], [20, 21, 22, 32, 42], [30, 31, 32, 33, 43], [40, 41, 42, 43, 44]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,2,3,4,5],[6,7,8,9,10,1],[2,3,4,5,6,7],[8,9,10,11,12,3],[4,5,6,7,8,9],[10,1,2,3,4,5]]",
        "output": "10"
      },
      {
        "input": "grid = [[0, 1, 3, 5], [9, 1, 2, 4], [8, 7, 6, 5], [1, 3, 5, 7]]",
        "output": "8"
      },
      {
        "input": "grid = [[0, 1, 2, 3, 4], [1, 10, 10, 10, 1], [2, 10, 1, 10, 2], [3, 10, 10, 10, 3], [4, 1, 2, 3, 4]]",
        "output": "8"
      },
      {
        "input": "grid = [[0, 1, 2, 3], [4, 1, 2, 3], [4, 1, 2, 3], [4, 1, 2, 3]]",
        "output": "6"
      },
      {
        "input": "grid = [[0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0], [0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0], [0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0]]",
        "output": "10"
      },
      {
        "input": "grid = [[0,1,10,100,1000],[1,10,100,1000,10000],[10,100,1000,10000,100000],[100,1000,10000,100000,1000000],[1000,10000,100000,1000000,0]]",
        "output": "1000002"
      },
      {
        "input": "grid = [[0,3,4,5,6],[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,0]]",
        "output": "8"
      },
      {
        "input": "grid = [[0,2,2,2,2,2],[2,2,9,9,9,2],[2,9,9,9,9,9],[2,9,9,9,9,9],[2,2,9,9,9,2],[2,2,2,2,2,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,1,5,2,10],[6,3,1,4,7],[8,5,9,1,6],[7,4,8,3,2]]",
        "output": "9"
      },
      {
        "input": "grid = [[0, 5, 10, 15], [20, 25, 30, 35], [40, 45, 50, 55], [60, 65, 70, 75]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0,2,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,0]]",
        "output": "10"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18,19],[20,21,22,23,24,25,26,27,28,29],[30,31,32,33,34,35,36,37,38,39]]",
        "output": "40"
      },
      {
        "input": "grid = [[0,1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1,0],[0,1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1,0],[0,1,2,3,4,5,6,7,8,9]]",
        "output": "13"
      },
      {
        "input": "grid = [[0,1,99,99,99,99,99,99,99,99,99],[1,1,1,1,1,1,1,1,1,1,1],[99,1,99,99,99,99,99,99,99,99,1],[99,1,99,99,99,99,99,99,99,99,1],[99,1,1,1,1,1,1,1,1,1,1],[99,99,99,99,99,99,99,99,99,99,1],[99,99,99,99,99,99,99,99,99,99,1],[99,99,99,99,99,99,99,99,99,99,1],[99,99,99,99,99,99,99,99,99,99,1],[99,99,99,99,99,99,99,99,99,99,1],[99,99,99,99,99,99,99,99,99,99,0]]",
        "output": "20"
      },
      {
        "input": "grid = [[0,2,2,2,2],[2,2,2,2,2],[2,2,1,2,2],[2,2,2,2,2],[2,2,2,2,0]]",
        "output": "-1"
      },
      {
        "input": "grid = [[0, 0, 0, 0], [0, 10, 10, 0], [0, 10, 10, 0], [0, 0, 0, 0]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,2,4,6,8],[1,3,5,7,9],[2,4,6,8,10],[3,5,7,9,11],[4,6,8,10,12]]",
        "output": "12"
      },
      {
        "input": "grid = [[0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0], [0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 0], [0, 1, 2, 3, 4, 5], [5, 4, 3, 2, 3, 0]]",
        "output": "10"
      },
      {
        "input": "grid = [[0,100],[1,101],[2,102],[3,103],[4,104],[5,105]]",
        "output": "106"
      },
      {
        "input": "grid = [[0,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]]",
        "output": "6"
      },
      {
        "input": "grid = [[0,1,2],[3,1,1],[2,1,0]]",
        "output": "4"
      }
    ]
  },
  {
    "id": 2350,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Hash Table"
    ],
    "problemDescription": "You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].\nReturn the length of the shortest sequence of rolls so that there's no such subsequence in rolls.\nA sequence of rolls of length len is the result of rolling a k sided dice len times.\n\u00a0\nExample 1:\n\nInput: rolls = [4,2,1,2,3,3,2,4,1], k = 4\nOutput: 3\nExplanation: Every sequence of rolls of length 1, [1], [2], [3], [4], can be taken from rolls.\nEvery sequence of rolls of length 2, [1, 1], [1, 2], ..., [4, 4], can be taken from rolls.\nThe sequence [1, 4, 2] cannot be taken from rolls, so we return 3.\nNote that there are other sequences that cannot be taken from rolls.\nExample 2:\n\nInput: rolls = [1,1,2,2], k = 2\nOutput: 2\nExplanation: Every sequence of rolls of length 1, [1], [2], can be taken from rolls.\nThe sequence [2, 1] cannot be taken from rolls, so we return 2.\nNote that there are other sequences that cannot be taken from rolls but [2, 1] is the shortest.\n\nExample 3:\n\nInput: rolls = [1,1,3,2,2,2,3,3], k = 4\nOutput: 1\nExplanation: The sequence [4] cannot be taken from rolls, so we return 1.\nNote that there are other sequences that cannot be taken from rolls but [4] is the shortest.\n\n\u00a0\nConstraints:\n\nn == rolls.length\n1 <= n <= 105\n1 <= rolls[i] <= k <= 105\n\n",
    "starterCode": "class Solution:\n    def shortestSequence(self, rolls: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "2"
      },
      {
        "input": "rolls = [1,1,1,1,1], k = 1",
        "output": "6"
      },
      {
        "input": "rolls = [1,2,3,1,2,3,1,2,3], k = 3",
        "output": "4"
      },
      {
        "input": "rolls = [6,5,4,3,2,1,6,5,4,3,2,1], k = 6",
        "output": "3"
      },
      {
        "input": "rolls = [1,1,3,2,2,2,3,3], k = 4",
        "output": "1"
      },
      {
        "input": "rolls = [1,1,2,2], k = 2",
        "output": "2"
      },
      {
        "input": "rolls = [1,1,1,1,1,1,1,1,1,1], k = 1",
        "output": "11"
      },
      {
        "input": "rolls = [1,2,3,4,1,2,3,4], k = 4",
        "output": "3"
      },
      {
        "input": "rolls = [4,2,1,2,3,3,2,4,1], k = 4",
        "output": "3"
      },
      {
        "input": "rolls = [1,2,3,4,1,2,3,4,1,2,3,4], k = 4",
        "output": "4"
      },
      {
        "input": "rolls = [10,10,10,10,10,10,10,10,10,10], k = 10",
        "output": "1"
      },
      {
        "input": "rolls = [3,3,3,3,3,3,3,3,3,3], k = 3",
        "output": "1"
      },
      {
        "input": "rolls = [1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "3"
      },
      {
        "input": "rolls = [1], k = 1",
        "output": "2"
      },
      {
        "input": "rolls = [5,5,5,5,5], k = 5",
        "output": "1"
      },
      {
        "input": "rolls = [5,4,3,2,1], k = 5",
        "output": "2"
      },
      {
        "input": "rolls = [1,2,3,4,5], k = 5",
        "output": "2"
      },
      {
        "input": "rolls = [1,3,2,3,2,1], k = 3",
        "output": "3"
      },
      {
        "input": "rolls = [1,1,1,1,1,1,1,1], k = 1",
        "output": "9"
      },
      {
        "input": "rolls = [5,1,3,4,2,5,1,3,4,2,5,1,3,4,2], k = 5",
        "output": "4"
      },
      {
        "input": "rolls = [1,1,1,2,2,2,3,3,3,1,1,2,2,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "9"
      },
      {
        "input": "rolls = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "5"
      },
      {
        "input": "rolls = [1,2,3,4,2,3,4,5,6,5,4,3,2,1,1,2,3,4,5,6,5,4,3,2,1], k = 6",
        "output": "3"
      },
      {
        "input": "rolls = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "18"
      },
      {
        "input": "rolls = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991], k = 100000",
        "output": "1"
      },
      {
        "input": "rolls = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 10",
        "output": "2"
      },
      {
        "input": "rolls = [1,2,3,4,4,3,2,1,1,2,3,4,4,3,2,1], k = 4",
        "output": "5"
      },
      {
        "input": "rolls = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "8"
      },
      {
        "input": "rolls = [1,2,1,3,2,1,4,2,1,3,4,2,1,3,2,4,1,3,2,4,1,3,2,1,4,2,1,3,4,2,1,3,2,4,1,3,2,4,1,3,2,1,4,2,1,3,4,2,1,3,2,4], k = 4",
        "output": "12"
      },
      {
        "input": "rolls = [3,1,2,1,3,2,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "10"
      },
      {
        "input": "rolls = [5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5], k = 5",
        "output": "5"
      },
      {
        "input": "rolls = [5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "10"
      },
      {
        "input": "rolls = [1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 10",
        "output": "3"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "6"
      },
      {
        "input": "rolls = [1,2,2,1,3,1,2,3,4,2,1,3,4,1,2,3,4,5,1,2,3,4,5,6,1,2,3,4,5,6], k = 6",
        "output": "3"
      },
      {
        "input": "rolls = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4], k = 4",
        "output": "2"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "5"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5], k = 10",
        "output": "3"
      },
      {
        "input": "rolls = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "2"
      },
      {
        "input": "rolls = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,1,1,2,2,3,3,4,4,5,5], k = 10",
        "output": "2"
      },
      {
        "input": "rolls = [5,5,5,5,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "5"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "3"
      },
      {
        "input": "rolls = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "12"
      },
      {
        "input": "rolls = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5], k = 5",
        "output": "2"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "8"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 30",
        "output": "3"
      },
      {
        "input": "rolls = [5,3,1,4,2,5,3,1,4,2,5,3,1,4,2], k = 5",
        "output": "4"
      },
      {
        "input": "rolls = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 1",
        "output": "35"
      },
      {
        "input": "rolls = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5], k = 5",
        "output": "5"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1], k = 15",
        "output": "3"
      },
      {
        "input": "rolls = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "4"
      },
      {
        "input": "rolls = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7], k = 7",
        "output": "2"
      },
      {
        "input": "rolls = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4], k = 4",
        "output": "6"
      },
      {
        "input": "rolls = [1,1,2,2,3,3,4,4,1,1,2,2,3,3,4,4,1,1,2,2,3,3,4,4,1,1,2,2,3,3,4,4], k = 4",
        "output": "6"
      },
      {
        "input": "rolls = [1], k = 100000",
        "output": "1"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], k = 15",
        "output": "4"
      },
      {
        "input": "rolls = [2,3,1,4,2,3,1,4,2,3,1,4,2,3,1,4,2,3,1,4,2,3,1,4,2,3,1,4,2,3,1,4,2,3,1,4,2,3,1,4], k = 4",
        "output": "11"
      },
      {
        "input": "rolls = [5,1,2,3,4,5,1,2,3,4,5,1,2,3,4], k = 5",
        "output": "4"
      },
      {
        "input": "rolls = [1,2,3,1,2,3,4,1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "3"
      },
      {
        "input": "rolls = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "13"
      },
      {
        "input": "rolls = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "16"
      },
      {
        "input": "rolls = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], k = 10",
        "output": "4"
      },
      {
        "input": "rolls = [1,3,2,4,2,1,3,4,1,2,3,4,1,2,3,4,1,2,3,4], k = 4",
        "output": "6"
      },
      {
        "input": "rolls = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2], k = 2",
        "output": "11"
      },
      {
        "input": "rolls = [7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1], k = 7",
        "output": "6"
      },
      {
        "input": "rolls = [1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5], k = 5",
        "output": "7"
      },
      {
        "input": "rolls = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15], k = 15",
        "output": "2"
      },
      {
        "input": "rolls = [1,3,3,1,2,4,4,2,3,1,4,2,3,1,2,4,4,2,3,1,4,2,3,1,2,4,4,2,3,1,4,2,3,1,2,4,4,2,3,1,4,2,3,1,2,4], k = 4",
        "output": "10"
      },
      {
        "input": "rolls = [1,1,2,2,3,3,4,4,5,5,6,6,1,1,2,2,3,3], k = 6",
        "output": "2"
      },
      {
        "input": "rolls = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1], k = 5",
        "output": "5"
      },
      {
        "input": "rolls = [1,2,2,1,3,3,1,2,3,4,4,1,2,3,4,5,5,1,2,3,4,5,6,6,1,2,3,4,5,6,7,7], k = 7",
        "output": "2"
      },
      {
        "input": "rolls = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "3"
      },
      {
        "input": "rolls = [3,1,2,4,3,1,2,4,3,1,2,4,3,1,2,4,3,1,2,4], k = 4",
        "output": "6"
      },
      {
        "input": "rolls = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5], k = 5",
        "output": "2"
      },
      {
        "input": "rolls = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,6], k = 6",
        "output": "2"
      },
      {
        "input": "rolls = [1,2,3,4,5,1,2,3,1,2,3,4,5,1,2,3,4,5,1,2], k = 5",
        "output": "4"
      },
      {
        "input": "rolls = [7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7], k = 7",
        "output": "5"
      },
      {
        "input": "rolls = [10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "4"
      },
      {
        "input": "rolls = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "9"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 20",
        "output": "3"
      },
      {
        "input": "rolls = [1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4], k = 4",
        "output": "2"
      },
      {
        "input": "rolls = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 1",
        "output": "16"
      },
      {
        "input": "rolls = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1], k = 5",
        "output": "12"
      },
      {
        "input": "rolls = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,6,1,2,3,4,5,6], k = 6",
        "output": "3"
      },
      {
        "input": "rolls = [1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5], k = 5",
        "output": "4"
      },
      {
        "input": "rolls = [1,2,2,1,3,3,3,1,2,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "6"
      },
      {
        "input": "rolls = [5,4,3,2,1,5,4,3,2,1,5,4,3,2,1], k = 5",
        "output": "4"
      },
      {
        "input": "rolls = [3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1], k = 3",
        "output": "16"
      },
      {
        "input": "rolls = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4], k = 4",
        "output": "9"
      },
      {
        "input": "rolls = [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4], k = 4",
        "output": "12"
      },
      {
        "input": "rolls = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], k = 3",
        "output": "11"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "4"
      },
      {
        "input": "rolls = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4], k = 4",
        "output": "2"
      },
      {
        "input": "rolls = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "10"
      },
      {
        "input": "rolls = [5,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4], k = 5",
        "output": "5"
      },
      {
        "input": "rolls = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5], k = 5",
        "output": "4"
      },
      {
        "input": "rolls = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,10], k = 20",
        "output": "2"
      }
    ]
  },
  {
    "id": 2867,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Math",
      "Dynamic Programming",
      "Number Theory"
    ],
    "problemDescription": "There is an undirected tree with n nodes labeled from 1 to n. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree.\nReturn the number of valid paths in the tree.\nA path (a, b) is valid if there exists exactly one prime number among the node labels in the path from a to b.\nNote that:\n\nThe path (a, b) is a sequence of distinct nodes starting with node a and ending with node b such that every two adjacent nodes in the sequence share an edge in the tree.\nPath (a, b) and path (b, a) are considered the same and counted only once.\n\n\u00a0\nExample 1:\n\n\nInput: n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]\nOutput: 4\nExplanation: The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2. \n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\nIt can be shown that there are only 4 valid paths.\n\nExample 2:\n\n\nInput: n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]\nOutput: 6\nExplanation: The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2.\n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (1, 6) since the path from 1 to 6 contains prime number 3.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\n- (3, 6) since the path from 3 to 6 contains prime number 3.\nIt can be shown that there are only 6 valid paths.\n\n\u00a0\nConstraints:\n\n1 <= n <= 105\nedges.length == n - 1\nedges[i].length == 2\n1 <= ui, vi <= n\nThe input is generated such that edges represent a valid tree.\n\n",
    "starterCode": "class Solution:\n    def countPaths(self, n: int, edges: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 8, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[6,8]]",
        "output": "8"
      },
      {
        "input": "n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]",
        "output": "6"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]]",
        "output": "18"
      },
      {
        "input": "n = 7, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[2,7]]",
        "output": "7"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[6,8],[6,9],[9,10]]",
        "output": "12"
      },
      {
        "input": "n = 7, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[4,7]]",
        "output": "9"
      },
      {
        "input": "n = 7, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]]",
        "output": "6"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10]]",
        "output": "11"
      },
      {
        "input": "n = 7, edges = [[1,2],[1,3],[1,4],[2,5],[3,6],[4,7]]",
        "output": "9"
      },
      {
        "input": "n = 10, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[5,9],[5,10]]",
        "output": "11"
      },
      {
        "input": "n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]",
        "output": "4"
      },
      {
        "input": "n = 3, edges = [[1,2],[2,3]]",
        "output": "1"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[6,11],[7,12]]",
        "output": "13"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[10,20]]",
        "output": "47"
      },
      {
        "input": "{\"n\": 15, \"edges\": [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[6,12],[7,13],[8,14],[9,15]]}",
        "output": "Error: Solution.countPaths() missing 2 required positional arguments: 'n' and 'edges'"
      },
      {
        "input": "{\"n\": 25, \"edges\": [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[11,21],[11,22],[12,23],[12,24],[13,25]]}",
        "output": "Error: Solution.countPaths() missing 2 required positional arguments: 'n' and 'edges'"
      },
      {
        "input": "n = 25, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25]]",
        "output": "63"
      },
      {
        "input": "n = 50, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39],[20,40],[20,41],[21,42],[21,43],[22,44],[22,45],[23,46],[23,47],[24,48],[24,49],[25,50]]",
        "output": "149"
      },
      {
        "input": "n = 75, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39],[20,40],[20,41],[21,42],[21,43],[22,44],[22,45],[23,46],[23,47],[24,48],[24,49],[25,50],[26,51],[26,52],[27,53],[27,54],[28,55],[28,56],[29,57],[29,58],[30,59],[30,60],[31,61],[31,62],[32,63],[32,64],[33,65],[33,66],[34,67],[34,68],[35,69],[35,70],[36,71],[36,72],[37,73],[37,74],[38,75]]",
        "output": "348"
      },
      {
        "input": "n = 50, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39],[20,40],[20,41],[21,42],[21,43],[22,44],[22,45],[23,46],[23,47],[24,48],[24,49],[25,50]]",
        "output": "202"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[6,12],[7,13],[8,14],[9,15]]",
        "output": "34"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15]]",
        "output": "27"
      },
      {
        "input": "n = 100, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]]",
        "output": "333"
      },
      {
        "input": "{\"n\": 100, \"edges\": [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]]}",
        "output": "Error: Solution.countPaths() missing 2 required positional arguments: 'n' and 'edges'"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15]]",
        "output": "18"
      },
      {
        "input": "n = 12, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12]]",
        "output": "13"
      },
      {
        "input": "n = 20, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20]]",
        "output": "33"
      },
      {
        "input": "{\"n\": 20, \"edges\": [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20]]}",
        "output": "Error: Solution.countPaths() missing 2 required positional arguments: 'n' and 'edges'"
      },
      {
        "input": "n = 40, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39],[20,40]]",
        "output": "120"
      },
      {
        "input": "n = 25, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25]]",
        "output": "41"
      },
      {
        "input": "{\"n\": 50, \"edges\": [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[11,21],[11,22],[12,23],[12,24],[13,25],[13,26],[14,27],[14,28],[15,29],[15,30],[16,31],[16,32],[17,33],[17,34],[18,35],[18,36],[19,37],[19,38],[20,39],[20,40],[21,41],[21,42],[22,43],[22,44],[23,45],[23,46],[24,47],[24,48],[25,49],[25,50]]}",
        "output": "Error: Solution.countPaths() missing 2 required positional arguments: 'n' and 'edges'"
      },
      {
        "input": "n = 100, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39],[20,40],[20,41],[21,42],[21,43],[22,44],[22,45],[23,46],[23,47],[24,48],[24,49],[25,50],[25,51],[26,52],[26,53],[27,54],[27,55],[28,56],[28,57],[29,58],[29,59],[30,60],[30,61],[31,62],[31,63],[32,64],[32,65],[33,66],[33,67],[34,68],[34,69],[35,70],[35,71],[36,72],[36,73],[37,74],[37,75],[38,76],[38,77],[39,78],[39,79],[40,80],[40,81],[41,82],[41,83],[42,84],[42,85],[43,86],[43,87],[44,88],[44,89],[45,90],[45,91],[46,92],[46,93],[47,94],[47,95],[48,96],[48,97],[49,98],[49,99],[50,100]]",
        "output": "499"
      },
      {
        "input": "n = 150, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100],[100,101],[101,102],[102,103],[103,104],[104,105],[105,106],[106,107],[107,108],[108,109],[109,110],[110,111],[111,112],[112,113],[113,114],[114,115],[115,116],[116,117],[117,118],[118,119],[119,120],[120,121],[121,122],[122,123],[123,124],[124,125],[125,126],[126,127],[127,128],[128,129],[129,130],[130,131],[131,132],[132,133],[133,134],[134,135],[135,136],[136,137],[137,138],[138,139],[139,140],[140,141],[141,142],[142,143],[143,144],[144,145],[145,146],[146,147],[147,148],[148,149],[149,150]]",
        "output": "578"
      },
      {
        "input": "n = 15, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[7,13],[7,14],[8,15]]",
        "output": "16"
      },
      {
        "input": "n = 100, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31],[16,32],[16,33],[17,34],[17,35],[18,36],[18,37],[19,38],[19,39],[20,40],[20,41],[21,42],[21,43],[22,44],[22,45],[23,46],[23,47],[24,48],[24,49],[25,50],[26,51],[26,52],[27,53],[27,54],[28,55],[28,56],[29,57],[29,58],[30,59],[30,60],[31,61],[31,62],[32,63],[32,64],[33,65],[33,66],[34,67],[34,68],[35,69],[35,70],[36,71],[36,72],[37,73],[37,74],[38,75],[38,76],[39,77],[39,78],[40,79],[40,80],[41,81],[41,82],[42,83],[42,84],[43,85],[43,86],[44,87],[44,88],[45,89],[45,90],[46,91],[46,92],[47,93],[47,94],[48,95],[48,96],[49,97],[49,98],[50,99],[50,100]]",
        "output": "517"
      },
      {
        "input": "n = 30, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30]]",
        "output": "59"
      },
      {
        "input": "n = 18, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18]]",
        "output": "27"
      },
      {
        "input": "n = 50, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50]]",
        "output": "138"
      },
      {
        "input": "n = 100, edges = [[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,91],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,98],[98,99],[99,100]]",
        "output": "368"
      }
    ]
  },
  {
    "id": 3027,
    "difficulty": "Hard",
    "tags": [
      "Geometry",
      "Array",
      "Math",
      "Enumeration",
      "Sorting"
    ],
    "problemDescription": "You are given a 2D array points of size n x 2 representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].\nWe define the right direction as positive x-axis (increasing x-coordinate) and the left direction as negative x-axis (decreasing x-coordinate). Similarly, we define the up direction as positive y-axis (increasing y-coordinate) and the down direction as negative y-axis (decreasing y-coordinate)\nYou have to place n people, including Alice and Bob, at these points such that there is exactly one person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice's position as the upper left corner and Bob's position as the lower right corner of the fence (Note that the fence might not enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either inside the fence or on the fence, Alice will be sad.\nReturn the number of pairs of points where you can place Alice and Bob, such that Alice does not become sad on building the fence.\nNote that Alice can only build a fence with Alice's position as the upper left corner, and Bob's position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners (1, 1), (1, 3), (3, 1), and (3, 3), because:\n\nWith Alice at (3, 3) and Bob at (1, 1), Alice's position is not the upper left corner and Bob's position is not the lower right corner of the fence.\nWith Alice at (1, 3) and Bob at (1, 1), Bob's position is not the lower right corner of the fence.\n\n\n\u00a0\nExample 1:\n\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 0\nExplanation: There is no way to place Alice and Bob such that Alice can build a fence with Alice's position as the upper left corner and Bob's position as the lower right corner. Hence we return 0. \n\nExample 2:\n\n\nInput: points = [[6,2],[4,4],[2,6]]\nOutput: 2\nExplanation: There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (4, 4) and Bob at (6, 2).\n- Place Alice at (2, 6) and Bob at (4, 4).\nYou cannot place Alice at (2, 6) and Bob at (6, 2) because the person at (4, 4) will be inside the fence.\n\nExample 3:\n\n\nInput: points = [[3,1],[1,3],[1,1]]\nOutput: 2\nExplanation: There are two ways to place Alice and Bob such that Alice will not be sad:\n- Place Alice at (1, 1) and Bob at (3, 1).\n- Place Alice at (1, 3) and Bob at (1, 1).\nYou cannot place Alice at (1, 3) and Bob at (3, 1) because the person at (1, 1) will be on the fence.\nNote that it does not matter if the fence encloses any area, the first and second fences in the image are valid.\n\n\u00a0\nConstraints:\n\n2 <= n <= 1000\npoints[i].length == 2\n-109 <= points[i][0], points[i][1] <= 109\nAll points[i] are distinct.\n\n",
    "starterCode": "class Solution:\n    def numberOfPairs(self, points: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "points = [[3,1],[1,3],[1,1]]",
        "output": "2"
      },
      {
        "input": "points = [[1,1],[2,2],[3,1],[1,3],[2,1],[1,2]]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[2,2],[1,2],[2,1]]",
        "output": "4"
      },
      {
        "input": "points = [[-1,5],[0,0],[2,4],[4,-2]]",
        "output": "4"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[1,5]]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[1,1],[2,0],[2,2],[3,1]]",
        "output": "5"
      },
      {
        "input": "points = [[-1,1],[1,-1],[-2,2],[2,-2]]",
        "output": "3"
      },
      {
        "input": "points = [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5]]",
        "output": "0"
      },
      {
        "input": "points = [[1,10],[2,9],[3,8],[4,7]]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3]]",
        "output": "0"
      },
      {
        "input": "points = [[5,5],[5,4],[5,3],[5,2],[5,1]]",
        "output": "4"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "0"
      },
      {
        "input": "points = [[-10,10],[10,-10],[0,0],[5,5],[-5,-5]]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[1,2],[2,1],[2,2]]",
        "output": "4"
      },
      {
        "input": "points = [[-1,-1],[-2,-2],[-3,-3]]",
        "output": "0"
      },
      {
        "input": "points = [[-1,1],[1,-1],[0,0]]",
        "output": "2"
      },
      {
        "input": "points = [[-1,-1],[0,0],[1,1],[2,2]]",
        "output": "0"
      },
      {
        "input": "points = [[6,2],[4,4],[2,6]]",
        "output": "2"
      },
      {
        "input": "points = [[10,1],[9,2],[8,3],[7,4]]",
        "output": "3"
      },
      {
        "input": "points = [[1,5],[2,5],[3,5],[4,5],[5,5]]",
        "output": "4"
      },
      {
        "input": "points = [[0,0],[1,1],[2,0],[2,2]]",
        "output": "3"
      },
      {
        "input": "points = [[0,0],[1,1],[2,2],[3,3]]",
        "output": "0"
      },
      {
        "input": "points = [[1,1],[2,3],[3,2],[4,4]]",
        "output": "1"
      },
      {
        "input": "points = [[0,10],[10,0],[5,5],[15,15]]",
        "output": "2"
      },
      {
        "input": "points = [[-1,1],[-2,2],[-3,3],[-4,4],[-5,5]]",
        "output": "4"
      },
      {
        "input": "points = [[1,5],[2,3],[3,2],[4,1]]",
        "output": "3"
      },
      {
        "input": "points = [[-1,-1],[1,1],[-2,-2],[2,2]]",
        "output": "0"
      },
      {
        "input": "points = [[1,5],[2,4],[3,3],[4,2],[5,1]]",
        "output": "4"
      },
      {
        "input": "points = [[10,10],[5,5],[0,0],[-5,-5],[-10,-10]]",
        "output": "0"
      },
      {
        "input": "points = [[1,-1],[2,-2],[3,-3],[4,-4],[5,-5]]",
        "output": "4"
      },
      {
        "input": "points = [[10,10],[20,20],[15,15],[5,5]]",
        "output": "0"
      },
      {
        "input": "points = [[1,2],[2,1],[3,4],[4,3],[5,6],[6,5]]",
        "output": "3"
      },
      {
        "input": "points = [[-1000000000,1000000000],[1000000000,-1000000000],[0,0],[1,1],[2,2],[3,3]]",
        "output": "8"
      },
      {
        "input": "points = [[-2,3],[1,1],[0,0],[-1,-1],[2,2],[3,-3],[4,4],[-4,-4],[5,5]]",
        "output": "8"
      },
      {
        "input": "points = [[-1,-1],[-2,-2],[-3,-3],[-1,-3],[-2,-1],[-3,-2]]",
        "output": "7"
      },
      {
        "input": "points = [[5,5],[5,6],[5,7],[6,5],[6,6],[6,7],[7,5],[7,6],[7,7],[8,5],[8,6],[8,7]]",
        "output": "17"
      },
      {
        "input": "points = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "0"
      },
      {
        "input": "points = [[10,10],[10,9],[10,8],[10,7],[10,6],[9,10],[9,9],[9,8],[9,7],[9,6],[8,10],[8,9],[8,8],[8,7],[8,6],[7,10],[7,9],[7,8],[7,7],[7,6],[6,10],[6,9],[6,8],[6,7],[6,6]]",
        "output": "40"
      },
      {
        "input": "points = [[0,0],[100,100],[50,50],[75,25],[25,75],[125,125],[25,25],[75,75],[100,50],[50,100]]",
        "output": "12"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[1,2],[2,2],[3,2],[4,2],[5,2]]",
        "output": "13"
      },
      {
        "input": "points = [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9]]",
        "output": "9"
      },
      {
        "input": "points = [[-1,1],[0,0],[1,-1],[1,1],[-1,-1]]",
        "output": "6"
      },
      {
        "input": "points = [[5,1],[1,5],[3,3],[4,2],[2,4],[6,0],[0,6],[7,1],[1,7]]",
        "output": "8"
      },
      {
        "input": "points = [[1,1],[1,3],[1,5],[1,7],[1,9],[3,1],[3,3],[3,5],[3,7],[3,9]]",
        "output": "13"
      },
      {
        "input": "points = [[1000000000,1000000000],[500000000,500000000],[0,0],[-500000000,-500000000],[-1000000000,-1000000000]]",
        "output": "0"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[1,2],[2,2],[3,2],[4,2],[5,2],[1,3],[2,3],[3,3],[4,3],[5,3],[1,4],[2,4],[3,4],[4,4],[5,4]]",
        "output": "31"
      },
      {
        "input": "points = [[5, 5], [5, 6], [6, 5], [6, 6], [5, 4], [4, 5], [4, 4], [7, 7], [7, 6], [6, 7]]",
        "output": "12"
      },
      {
        "input": "points = [[-1,-1],[1,1],[2,2],[-2,-2],[0,0]]",
        "output": "0"
      },
      {
        "input": "points = [[0,0],[0,1],[0,2],[0,3],[0,4],[1,0],[1,1],[1,2],[1,3],[1,4]]",
        "output": "13"
      },
      {
        "input": "points = [[1,1],[1,2],[2,1],[2,2],[1,3],[2,3],[3,1],[3,2],[3,3],[4,4]]",
        "output": "12"
      },
      {
        "input": "points = [[-1,-1],[-2,-2],[-3,-3],[-1,-2],[-2,-3],[-1,-3],[-3,-1],[-3,-2],[0,0],[0,-1],[0,-2],[0,-3]]",
        "output": "16"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "0"
      },
      {
        "input": "points = [[1000000000,1000000000],[1,1],[500000000,500000000],[2,2],[999999999,999999999]]",
        "output": "0"
      },
      {
        "input": "points = [[10,10],[10,9],[10,8],[9,9],[8,8],[9,8],[8,9]]",
        "output": "8"
      },
      {
        "input": "points = [[100, 100], [90, 90], [80, 80], [70, 70], [60, 60], [50, 50], [40, 40], [30, 30], [20, 20], [10, 10]]",
        "output": "0"
      },
      {
        "input": "points = [[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [6, 5], [7, 4], [8, 3], [9, 2], [10, 1]]",
        "output": "9"
      },
      {
        "input": "points = [[-10, 10], [-9, 9], [-8, 8], [-7, 7], [-6, 6], [-5, 5], [-4, 4], [-3, 3], [-2, 2], [-1, 1]]",
        "output": "9"
      },
      {
        "input": "points = [[1,5],[2,3],[3,2],[4,1],[5,4]]",
        "output": "4"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]",
        "output": "12"
      },
      {
        "input": "points = [[-1,1],[-1,-1],[1,-1],[1,1],[0,0],[0,1],[0,-1],[1,0],[-1,0],[2,2],[-2,-2],[2,-2],[-2,2],[3,3],[-3,-3],[3,-3],[-3,3]]",
        "output": "24"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]]",
        "output": "31"
      },
      {
        "input": "points = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1],[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1],[2,10],[3,9],[4,8],[5,7],[6,6],[7,5],[8,4],[9,3],[10,2],[3,10],[4,9],[5,8],[6,7],[7,6],[8,5],[9,4],[10,3],[4,10],[5,9],[6,8],[7,7],[8,6],[9,5],[10,4],[5,10],[6,9],[7,8],[8,7],[9,6],[10,5],[6,10],[7,9],[8,8],[9,7],[10,6],[7,10],[8,9],[9,8],[10,7],[8,10],[9,9],[10,8],[9,10],[10,9],[10,10]]",
        "output": "108"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[0,1],[1,1],[2,1],[0,2],[1,2],[2,2],[3,0],[3,1],[3,2]]",
        "output": "17"
      },
      {
        "input": "points = [[1,10],[2,10],[3,10],[4,10],[5,10],[1,9],[2,9],[3,9],[4,9],[5,9],[1,8],[2,8],[3,8],[4,8],[5,8]]",
        "output": "22"
      },
      {
        "input": "points = [[-5,-5],[-4,-4],[-3,-3],[-2,-2],[-1,-1],[0,0],[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "0"
      },
      {
        "input": "points = [[10,1],[9,2],[8,3],[7,4],[6,5],[5,6],[4,7],[3,8],[2,9],[1,10],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "26"
      },
      {
        "input": "points = [[10,1],[9,2],[8,3],[7,4],[6,5],[5,6],[4,7],[3,8],[2,9],[1,10]]",
        "output": "9"
      },
      {
        "input": "points = [[-100,100],[0,0],[100,-100],[50,50],[-50,-50],[75,25],[25,75],[25,25],[75,75],[-25,-25],[-75,-75]]",
        "output": "16"
      },
      {
        "input": "points = [[5,5],[6,4],[7,3],[8,2],[9,1],[10,0],[9,0],[8,0],[7,0],[6,0],[5,0],[4,1],[3,2],[2,3],[1,4]]",
        "output": "22"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[1,5],[2,1],[2,2],[2,3],[2,4],[2,5],[3,1],[3,2],[3,3],[3,4],[3,5],[4,1],[4,2],[4,3],[4,4],[4,5]]",
        "output": "31"
      },
      {
        "input": "points = [[0, 1], [1, 0], [2, 3], [3, 2], [4, 5], [5, 4], [6, 7], [7, 6], [8, 9], [9, 8]]",
        "output": "5"
      },
      {
        "input": "points = [[5,5],[5,4],[5,3],[5,2],[5,1],[4,5],[3,5],[2,5],[1,5],[5,0]]",
        "output": "9"
      },
      {
        "input": "points = [[-5,-5],[5,5],[0,0],[3,3],[2,2],[1,1]]",
        "output": "0"
      },
      {
        "input": "points = [[1000000000,-1000000000],[-1000000000,1000000000],[0,0],[500000000,500000000],[-500000000,-500000000]]",
        "output": "6"
      },
      {
        "input": "points = [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5],[-6,-6],[-7,-7],[-8,-8],[-9,-9]]",
        "output": "0"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "0"
      },
      {
        "input": "points = [[-1,-1],[-2,-2],[-3,-3],[-1,-2],[-2,-1],[-1,-3],[-3,-1]]",
        "output": "8"
      },
      {
        "input": "points = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3]]",
        "output": "8"
      },
      {
        "input": "points = [[1,5],[2,5],[3,5],[1,4],[2,4],[3,4],[1,3],[2,3],[3,3],[1,2],[2,2],[3,2],[1,1],[2,1],[3,1]]",
        "output": "22"
      },
      {
        "input": "points = [[1,10],[10,1],[3,3],[5,5],[2,8],[8,2]]",
        "output": "6"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[2,1],[2,2],[2,3],[2,4],[3,1],[3,2],[3,3],[3,4],[4,1],[4,2],[4,3],[4,4]]",
        "output": "24"
      },
      {
        "input": "points = [[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1]]",
        "output": "8"
      },
      {
        "input": "points = [[100,100],[200,200],[300,300],[400,400],[500,500],[600,600],[700,700],[800,800],[900,900]]",
        "output": "0"
      },
      {
        "input": "points = [[10,20],[10,19],[10,18],[9,20],[9,19],[9,18],[8,20],[8,19],[8,18],[7,20],[7,19],[7,18]]",
        "output": "17"
      },
      {
        "input": "points = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
        "output": "0"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1]]",
        "output": "25"
      },
      {
        "input": "points = [[-1,1],[-2,2],[-3,3],[-4,4],[-5,5],[-6,6],[-7,7],[-8,8],[-9,9],[-1,9],[-2,8],[-3,7],[-4,6],[-5,5],[-6,4],[-7,3],[-8,2],[-9,1]]",
        "output": "25"
      },
      {
        "input": "points = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]",
        "output": "0"
      },
      {
        "input": "points = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1]]",
        "output": "9"
      },
      {
        "input": "points = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]]",
        "output": "9"
      },
      {
        "input": "points = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2]]",
        "output": "13"
      },
      {
        "input": "points = [[1,1],[2,2],[2,1],[3,3],[3,2],[3,1],[4,4],[4,3],[4,2],[4,1]]",
        "output": "12"
      },
      {
        "input": "points = [[1,5],[1,4],[1,3],[1,2],[1,1],[2,5],[2,4],[2,3],[2,2],[2,1]]",
        "output": "13"
      },
      {
        "input": "points = [[1000000000,1000000000],[999999999,999999999],[999999998,999999998],[999999997,999999997],[999999996,999999996],[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "0"
      },
      {
        "input": "points = [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7], [-8, -8], [-9, -9], [-10, -10]]",
        "output": "0"
      },
      {
        "input": "points = [[1,1],[2,1],[1,2],[2,2],[3,1],[3,2],[3,3],[2,3],[1,3],[1,4],[2,4],[3,4]]",
        "output": "17"
      },
      {
        "input": "points = [[1,5],[5,1],[3,3],[2,4],[4,2],[1,3],[3,1],[2,3],[3,2],[4,1],[5,2],[2,5]]",
        "output": "14"
      },
      {
        "input": "points = [[1,5],[5,1],[3,3],[2,4],[4,2]]",
        "output": "4"
      },
      {
        "input": "points = [[1,5],[3,7],[5,9],[2,3],[4,6],[6,8]]",
        "output": "3"
      },
      {
        "input": "points = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "0"
      },
      {
        "input": "points = [[-10,10],[10,-10],[0,0],[5,5],[-5,-5],[7,3],[3,7]]",
        "output": "8"
      },
      {
        "input": "points = [[10, 10], [10, 9], [10, 8], [10, 7], [10, 6], [10, 5], [10, 4], [10, 3], [10, 2], [10, 1]]",
        "output": "9"
      },
      {
        "input": "points = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10]]",
        "output": "9"
      },
      {
        "input": "points = [[1,2],[2,1],[1,3],[3,1],[2,3],[3,2],[1,4],[4,1],[2,4],[4,2],[3,3]]",
        "output": "15"
      },
      {
        "input": "points = [[1,2],[2,1],[3,4],[4,3],[5,6],[6,5],[7,8],[8,7],[9,10],[10,9]]",
        "output": "5"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "9"
      },
      {
        "input": "points = [[1,10],[3,9],[5,8],[7,7],[9,6],[11,5],[13,4],[15,3],[17,2],[19,1]]",
        "output": "9"
      },
      {
        "input": "points = [[-10,10],[10,-10],[0,0],[5,5],[-5,-5],[3,3],[-3,-3]]",
        "output": "10"
      },
      {
        "input": "points = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90],[100,100]]",
        "output": "0"
      },
      {
        "input": "points = [[5,5],[5,10],[10,5],[10,10],[7,7],[8,8],[3,3],[3,8],[8,3]]",
        "output": "16"
      },
      {
        "input": "points = [[-5,5],[0,0],[5,-5],[10,-10],[5,0],[0,5]]",
        "output": "5"
      },
      {
        "input": "points = [[-5,5],[-4,4],[-3,3],[-2,2],[-1,1],[1,-1],[2,-2],[3,-3],[4,-4],[5,-5]]",
        "output": "9"
      },
      {
        "input": "points = [[1000000000,1000000000],[-1000000000,-1000000000],[0,0],[500000000,500000000],[-500000000,-500000000]]",
        "output": "0"
      },
      {
        "input": "points = [[-10, -10], [10, 10], [0, 0], [5, 5], [-5, -5], [5, -5], [-5, 5]]",
        "output": "6"
      },
      {
        "input": "points = [[5,10],[10,5],[15,0],[20,5],[25,10],[30,5],[35,0],[40,5],[45,10]]",
        "output": "10"
      },
      {
        "input": "points = [[1,1],[1,2],[1,3],[1,4],[1,5],[2,1],[2,2],[2,3],[2,4],[2,5],[3,1],[3,2],[3,3],[3,4],[3,5],[4,1],[4,2],[4,3],[4,4],[4,5],[5,1],[5,2],[5,3],[5,4],[5,5]]",
        "output": "40"
      },
      {
        "input": "points = [[-100,-100],[-200,-200],[-300,-300],[-400,-400],[-500,-500],[-600,-600],[-700,-700],[-800,-800],[-900,-900]]",
        "output": "0"
      },
      {
        "input": "points = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2]]",
        "output": "27"
      },
      {
        "input": "points = [[10,10],[11,11],[12,12],[9,12],[8,13],[7,14],[6,15],[5,16],[4,17],[3,18],[2,19],[1,20]]",
        "output": "11"
      },
      {
        "input": "points = [[5,5],[5,6],[5,7],[5,8],[5,9],[6,5],[6,6],[6,7],[6,8],[6,9],[7,5],[7,6],[7,7],[7,8],[7,9],[8,5],[8,6],[8,7],[8,8],[8,9],[9,5],[9,6],[9,7],[9,8],[9,9]]",
        "output": "40"
      }
    ]
  },
  {
    "id": 1697,
    "difficulty": "Hard",
    "tags": [
      "Union Find",
      "Graph",
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. Note that there may be multiple edges between two nodes.\nGiven an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj .\nReturn a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.\n\u00a0\nExample 1:\n\n\nInput: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]\nOutput: [false,true]\nExplanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.\n\nExample 2:\n\n\nInput: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]\nOutput: [true,false]\nExplanation: The above figure shows the given graph.\n\n\u00a0\nConstraints:\n\n2 <= n <= 105\n1 <= edgeList.length, queries.length <= 105\nedgeList[i].length == 3\nqueries[j].length == 3\n0 <= ui, vi, pj, qj <= n - 1\nui != vi\npj != qj\n1 <= disi, limitj <= 109\nThere may be multiple edges between two nodes.\n\n",
    "starterCode": "class Solution:\n    def distanceLimitedPathsExist(self, n: int, edgeList: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        ",
    "testCases": [
      {
        "input": "n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]",
        "output": "[False, True]"
      },
      {
        "input": "n = 7, edgeList = [[0,1,5],[1,2,7],[2,3,10],[3,4,3],[4,5,2],[5,6,6],[6,0,1]], queries = [[0,6,8],[3,5,4]]",
        "output": "[True, True]"
      },
      {
        "input": "n = 6, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5]], queries = [[0,5,6],[0,5,10],[0,5,3]]",
        "output": "[True, True, False]"
      },
      {
        "input": "n = 7, edgeList = [[0,1,9],[0,2,3],[1,3,2],[2,3,8],[2,4,6],[3,4,5],[3,5,7],[4,5,1]], queries = [[0,4,8],[1,2,4],[3,5,6]]",
        "output": "[True, False, True]"
      },
      {
        "input": "n = 6, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5]], queries = [[0,5,6],[1,4,5],[2,3,4]]",
        "output": "[True, True, True]"
      },
      {
        "input": "n = 4, edgeList = [[0,1,5],[1,2,10],[2,3,15],[3,0,20]], queries = [[0,3,15],[1,2,8]]",
        "output": "[False, False]"
      },
      {
        "input": "n = 2, edgeList = [[0,1,1]], queries = [[0,1,2],[0,1,1]]",
        "output": "[True, False]"
      },
      {
        "input": "n = 6, edgeList = [[0,1,4],[1,2,3],[2,3,1],[3,4,5],[4,5,6]], queries = [[0,5,10],[1,4,8]]",
        "output": "[True, True]"
      },
      {
        "input": "n = 4, edgeList = [[0,1,1],[1,2,1],[2,3,1],[3,0,1]], queries = [[0,3,2],[1,2,1]]",
        "output": "[True, False]"
      },
      {
        "input": "n = 4, edgeList = [[0,1,3],[1,2,1],[2,3,2],[3,0,4]], queries = [[0,2,4],[1,3,5]]",
        "output": "[True, True]"
      },
      {
        "input": "n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]",
        "output": "[True, False]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[0,9,5]], queries = [[0,9,4],[0,9,5],[0,9,6],[0,9,7],[0,9,8]]",
        "output": "[False, False, True, True, True]"
      },
      {
        "input": "n = 12, edgeList = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,6,600],[6,7,700],[7,8,800],[8,9,900],[9,10,1000],[10,11,1100],[11,0,1200],[0,2,150],[2,4,250],[4,6,350],[6,8,450],[8,10,550],[10,1,650],[1,3,750],[3,5,850],[5,7,950],[7,9,1050],[9,11,1150],[11,3,1250]], queries = [[0,11,700],[2,10,550],[4,8,400],[6,0,250]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "n = 6, edgeList = [[0,1,5],[1,2,5],[2,3,5],[3,4,5],[4,5,5],[5,0,5],[0,2,10],[1,3,10],[2,4,10],[3,5,10],[4,0,10],[5,1,10]], queries = [[0,3,6],[1,4,7],[2,5,8]]",
        "output": "[True, True, True]"
      },
      {
        "input": "n = 50, edgeList = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,6,600],[6,7,700],[7,8,800],[8,9,900],[9,10,1000],[10,11,1100],[11,12,1200],[12,13,1300],[13,14,1400],[14,15,1500],[15,16,1600],[16,17,1700],[17,18,1800],[18,19,1900],[19,20,2000],[20,21,2100],[21,22,2200],[22,23,2300],[23,24,2400],[24,25,2500],[25,26,2600],[26,27,2700],[27,28,2800],[28,29,2900],[29,30,3000],[30,31,3100],[31,32,3200],[32,33,3300],[33,34,3400],[34,35,3500],[35,36,3600],[36,37,3700],[37,38,3800],[38,39,3900],[39,40,4000],[40,41,4100],[41,42,4200],[42,43,4300],[43,44,4400],[44,45,4500],[45,46,4600],[46,47,4700],[47,48,4800],[48,49,4900],[49,0,5000]], queries = [[0,49,5010],[1,48,5020],[2,47,5030],[3,46,5040],[4,45,5050],[5,44,5060],[6,43,5070],[7,42,5080],[8,41,5090],[9,40,5100],[10,39,5110],[11,38,5120],[12,37,5130],[13,36,5140],[14,35,5150],[15,34,5160],[16,33,5170],[17,32,5180],[18,31,5190],[19,30,5200],[20,29,5210],[21,28,5220],[22,27,5230],[23,26,5240],[24,25,5250],[0,25,2600],[1,24,2700],[2,23,2800],[3,22,2900],[4,21,3000],[5,20,3100],[6,19,3200],[7,18,3300],[8,17,3400],[9,16,3500],[10,15,3600],[11,14,3700],[12,13,3800]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 30, edgeList = [[i,(i+1)%30,i+1] for i in range(30)], queries = [[i,(i+1)%30,i+1] for i in range(30)] + [[0,15,15]]",
        "output": "Error: Solution.distanceLimitedPathsExist() missing 2 required positional arguments: 'edgeList' and 'queries'"
      },
      {
        "input": "n = 20, edgeList = [[0,1,2],[1,2,4],[2,3,6],[3,4,8],[4,5,10],[5,6,12],[6,7,14],[7,8,16],[8,9,18],[9,10,20],[10,11,22],[11,12,24],[12,13,26],[13,14,28],[14,15,30],[15,16,32],[16,17,34],[17,18,36],[18,19,38]], queries = [[0,19,40],[1,18,39],[2,17,38],[3,16,37],[4,15,36],[5,14,35],[6,13,34],[7,12,33],[8,11,32],[9,10,31]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 15, edgeList = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,6,600],[6,7,700],[7,8,800],[8,9,900],[9,10,1000],[10,11,1100],[11,12,1200],[12,13,1300],[13,14,1400],[14,0,1500]], queries = [[0,14,1200],[1,13,1100],[2,12,1000],[3,11,900],[4,10,800]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 6, edgeList = [[0,1,100],[0,2,200],[1,3,300],[2,3,400],[1,4,500],[2,5,600],[3,5,700]], queries = [[0,5,800],[0,5,400],[0,3,350],[0,4,600]]",
        "output": "[True, False, True, True]"
      },
      {
        "input": "n = 12, edgeList = [[0,1,5],[1,2,10],[2,3,15],[0,4,10],[4,5,20],[5,6,25],[6,7,30],[7,8,35],[8,9,40],[9,10,45],[10,11,50],[0,11,60]], queries = [[0,11,65],[0,11,55],[0,5,25],[5,10,45]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "n = 8, edgeList = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,0,80],[0,3,5],[1,4,15],[2,5,25],[3,6,35],[4,7,45],[5,0,55],[6,1,65],[7,2,75]], queries = [[0,7,40],[2,6,35],[4,0,60],[1,5,75]]",
        "output": "[False, False, True, True]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[0,9,10]], queries = [[0,9,5],[0,9,15],[2,7,6]]",
        "output": "[False, True, False]"
      },
      {
        "input": "n = 8, edgeList = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[0,7,9],[0,6,10],[1,5,11],[2,4,12]], queries = [[0,7,8],[1,5,9],[2,4,10],[3,6,11],[0,5,12],[1,6,13],[2,7,14],[0,4,15],[3,5,16],[0,6,17]]",
        "output": "[False, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,2],[0,2,3],[1,2,4],[2,3,5],[3,4,6],[4,5,7],[5,6,8],[6,7,9],[7,8,10],[8,9,11],[9,0,12]], queries = [[0,9,13],[1,8,15],[2,7,17],[3,6,19],[4,5,21]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9]], queries = [[0,9,10],[0,5,6],[3,7,5]]",
        "output": "[True, True, False]"
      },
      {
        "input": "n = 25, edgeList = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110],[11,12,120],[12,13,130],[13,14,140],[14,15,150],[15,16,160],[16,17,170],[17,18,180],[18,19,190],[19,20,200],[20,21,210],[21,22,220],[22,23,230],[23,24,240],[0,24,250]], queries = [[0,24,200],[0,24,251],[2,23,225],[5,20,160]]",
        "output": "[False, True, False, False]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,0,10]], queries = [[0,9,11],[2,6,6],[1,8,15]]",
        "output": "[True, False, True]"
      },
      {
        "input": "n = 15, edgeList = [[0,1,100],[1,2,200],[2,3,150],[3,4,250],[4,5,300],[5,6,350],[6,7,400],[7,8,450],[8,9,500],[9,10,550],[10,11,600],[11,12,650],[12,13,700],[13,14,750]], queries = [[0,14,800],[1,13,900],[2,12,1000],[3,11,1100],[4,10,1200],[5,9,1300]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10],[9,0,1]], queries = [[0,9,15],[2,6,8],[4,7,12]]",
        "output": "[True, True, True]"
      },
      {
        "input": "n = 20, edgeList = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,10,50],[10,11,55],[11,12,60],[12,13,65],[13,14,70],[14,15,75],[15,16,80],[16,17,85],[17,18,90],[18,19,95],[19,0,100]], queries = [[0,19,200],[5,15,150],[10,15,100]]",
        "output": "[True, True, True]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,0,10],[0,5,11],[5,1,12]], queries = [[0,9,11],[1,8,10],[2,7,9],[3,6,8],[4,5,7]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 11, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[0,10,11]], queries = [[0,10,12],[0,10,6],[0,5,8],[5,10,7],[2,8,9],[3,7,10]]",
        "output": "[True, False, True, False, True, True]"
      },
      {
        "input": "n = 20, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,0,20]], queries = [[0,19,15],[1,18,14],[2,17,13],[3,16,12],[4,15,11]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 50, edgeList = [[0,1,5],[1,2,15],[2,3,25],[3,4,35],[4,5,45],[5,6,55],[6,7,65],[7,8,75],[8,9,85],[9,10,95],[10,11,105],[11,12,115],[12,13,125],[13,14,135],[14,15,145],[15,16,155],[16,17,165],[17,18,175],[18,19,185],[19,20,195],[20,21,205],[21,22,215],[22,23,225],[23,24,235],[24,25,245],[25,26,255],[26,27,265],[27,28,275],[28,29,285],[29,30,295],[30,31,305],[31,32,315],[32,33,325],[33,34,335],[34,35,345],[35,36,355],[36,37,365],[37,38,375],[38,39,385],[39,40,395],[40,41,405],[41,42,415],[42,43,425],[43,44,435],[44,45,445],[45,46,455],[46,47,465],[47,48,475],[48,49,485]], queries = [[0,49,500],[10,30,310],[20,40,410]]",
        "output": "[True, True, True]"
      },
      {
        "input": "n = 20, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[0,19,20]], queries = [[0,19,10],[0,19,21],[2,18,15],[5,15,10]]",
        "output": "[False, True, False, False]"
      },
      {
        "input": "n = 50, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,20,20],[20,21,21],[21,22,22],[22,23,23],[23,24,24],[24,25,25],[25,26,26],[26,27,27],[27,28,28],[28,29,29],[29,30,30],[30,31,31],[31,32,32],[32,33,33],[33,34,34],[34,35,35],[35,36,36],[36,37,37],[37,38,38],[38,39,39],[39,40,40],[40,41,41],[41,42,42],[42,43,43],[43,44,44],[44,45,45],[45,46,46],[46,47,47],[47,48,48],[48,49,49],[0,49,50]], queries = [[0,49,40],[0,49,51],[2,48,45],[5,45,30]]",
        "output": "[False, True, False, False]"
      },
      {
        "input": "n = 15, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,0,15],[0,2,16],[2,4,17],[4,6,18],[6,8,19],[8,10,20],[10,12,21],[12,14,22],[14,1,23],[1,3,24],[3,5,25],[5,7,26],[7,9,27],[9,11,28],[11,13,29],[13,0,30]], queries = [[0,14,15],[2,12,13],[4,10,11],[6,8,9],[8,6,8],[10,4,10],[12,2,16],[14,0,14]]",
        "output": "[True, True, True, True, False, False, True, False]"
      },
      {
        "input": "n = 25, edgeList = [[i,i+1,i+1] for i in range(24)] + [[0,24,100]], queries = [[i,i+1,i+1] for i in range(24)] + [[0,24,99]]",
        "output": "Error: Solution.distanceLimitedPathsExist() missing 2 required positional arguments: 'edgeList' and 'queries'"
      },
      {
        "input": "n = 100, edgeList = [[i,i+1,5*i] for i in range(99)] + [[99,0,495]], queries = [[0,99,500],[25,50,200],[75,85,300]]",
        "output": "Error: Solution.distanceLimitedPathsExist() missing 1 required positional argument: 'edgeList'"
      },
      {
        "input": "n = 20, edgeList = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,6,600],[6,7,700],[7,8,800],[8,9,900],[9,10,1000],[10,11,1100],[11,12,1200],[12,13,1300],[13,14,1400],[14,15,1500],[15,16,1600],[16,17,1700],[17,18,1800],[18,19,1900],[0,19,2000]], queries = [[0,19,1900],[0,19,2000],[1,18,3800],[2,17,5400],[3,16,6900]]",
        "output": "[False, True, True, True, True]"
      },
      {
        "input": "n = 15, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,0,15],[0,7,20],[1,8,21],[2,9,22],[3,10,23],[4,11,24],[5,12,25],[6,13,26],[7,14,27],[8,0,28],[9,1,29],[10,2,30],[11,3,31],[12,4,32],[13,5,33],[14,6,34]], queries = [[0,14,16],[1,13,17],[2,12,18],[3,11,19],[4,10,20],[5,9,21],[6,8,22],[7,0,23],[8,1,24],[9,2,25],[10,3,26],[11,4,27],[12,5,28],[13,6,29],[0,7,35],[1,8,36],[2,9,37],[3,10,38],[4,11,39],[5,12,40],[6,13,41],[7,14,42]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 15, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[0,14,15]], queries = [[0,14,10],[0,14,16],[2,12,8]]",
        "output": "[False, True, False]"
      },
      {
        "input": "n = 50, edgeList = [[i,i+1,1] for i in range(49)] + [[i,i+2,2] for i in range(48)] + [[0,49,100]], queries = [[i,i+1,1] for i in range(49)] + [[0,49,99]]",
        "output": "Error: Solution.distanceLimitedPathsExist() missing 2 required positional arguments: 'edgeList' and 'queries'"
      },
      {
        "input": "n = 10, edgeList = [[0,1,1],[0,2,3],[1,2,2],[3,4,5],[4,5,4],[5,6,6],[6,7,7],[7,8,8],[8,9,9]], queries = [[0,9,10],[2,5,5],[4,7,12],[1,8,15]]",
        "output": "[False, False, True, False]"
      },
      {
        "input": "n = 8, edgeList = [[0,1,1],[0,2,2],[0,3,3],[1,4,4],[1,5,5],[2,6,6],[2,7,7],[3,4,8],[3,5,9],[4,6,10],[5,7,11]], queries = [[0,7,12],[1,6,10],[2,5,9],[3,4,8],[0,4,7]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 15, edgeList = [[0,1,100],[1,2,200],[2,3,300],[3,4,400],[4,5,500],[5,6,600],[6,7,700],[7,8,800],[8,9,900],[9,10,1000],[10,11,1100],[11,12,1200],[12,13,1300],[13,14,1400]], queries = [[0,14,1500],[5,10,800],[3,7,600]]",
        "output": "[True, False, False]"
      },
      {
        "input": "n = 15, edgeList = [[0,1,20],[1,2,30],[2,3,40],[3,4,50],[4,5,60],[5,6,70],[6,7,80],[7,8,90],[8,9,100],[9,10,110],[10,11,120],[11,12,130],[12,13,140],[13,14,150],[14,0,160]], queries = [[0,14,300],[3,7,200],[6,10,150]]",
        "output": "[True, True, True]"
      },
      {
        "input": "n = 15, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,0,15]], queries = [[0,7,8],[1,8,9],[2,9,10],[3,10,11],[4,11,12],[5,12,13],[6,13,14]]",
        "output": "[True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,3],[1,2,2],[2,3,1],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[0,9,10]], queries = [[0,9,9],[0,9,11],[1,8,15],[2,7,20]]",
        "output": "[False, True, True, True]"
      },
      {
        "input": "n = 20, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,0,20]], queries = [[0,10,11],[1,11,12],[2,12,13],[3,13,14],[4,14,15],[5,15,16],[6,16,17],[7,17,18],[8,18,19],[9,19,20]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,1],[1,2,1],[2,3,1],[3,4,1],[4,5,1],[5,6,1],[6,7,1],[7,8,1],[8,9,1],[9,0,1],[0,9,2],[1,8,2],[2,7,2],[3,6,2],[4,5,2]], queries = [[0,4,2],[5,9,2],[3,7,2]]",
        "output": "[True, True, True]"
      },
      {
        "input": "n = 8, edgeList = [[0,1,1],[0,2,2],[1,3,3],[2,3,4],[1,4,5],[2,5,6],[3,6,7],[4,7,8],[5,7,9]], queries = [[0,7,15],[1,6,10],[2,5,7],[3,4,4]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "n = 7, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6]], queries = [[0,6,7],[0,5,6],[0,4,5],[0,3,4],[0,2,3],[0,1,2]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "n = 15, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14]], queries = [[0,14,15],[1,13,25],[2,12,30],[3,11,35],[4,10,40]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 8, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,0,8],[0,2,3],[1,3,4],[2,4,5],[3,5,6],[4,6,7],[5,7,8]], queries = [[0,7,9],[1,6,10],[2,5,11]]",
        "output": "[True, True, True]"
      },
      {
        "input": "n = 12, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,0,12]], queries = [[0,6,7],[1,7,8],[2,8,9],[3,9,10],[4,10,11],[5,11,12]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "n = 9, edgeList = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[0,8,9],[1,7,10],[2,6,11],[3,5,12]], queries = [[0,8,13],[1,7,11],[2,6,9],[3,5,7]]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "n = 12, edgeList = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110],[11,0,120],[0,6,130],[1,7,140],[2,8,150],[3,9,160],[4,10,170],[5,11,180]], queries = [[0,11,125],[1,10,135],[2,9,145],[3,8,155],[4,7,165],[5,6,175],[0,7,185],[1,8,195],[2,11,205],[3,0,215]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 20, edgeList = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110],[11,12,120],[12,13,130],[13,14,140],[14,15,150],[15,16,160],[16,17,170],[17,18,180],[18,19,190],[19,0,200]], queries = [[0,19,210],[1,18,220],[2,17,230],[3,16,240],[4,15,250],[5,14,260],[6,13,270],[7,12,280],[8,11,290],[9,10,300]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,3],[1,2,1],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10],[9,0,2]], queries = [[0,9,15],[2,5,12],[1,8,6]]",
        "output": "[True, True, False]"
      },
      {
        "input": "n = 20, edgeList = [[0,1,10],[1,2,20],[2,3,30],[3,4,40],[4,5,50],[5,6,60],[6,7,70],[7,8,80],[8,9,90],[9,10,100],[10,11,110],[11,12,120],[12,13,130],[13,14,140],[14,15,150],[15,16,160],[16,17,170],[17,18,180],[18,19,190]], queries = [[0,19,200],[5,15,120],[3,10,80]]",
        "output": "[True, False, False]"
      },
      {
        "input": "n = 10, edgeList = [[0,1,2],[1,2,3],[2,3,4],[3,4,5],[4,5,6],[5,6,7],[6,7,8],[7,8,9],[8,9,10]], queries = [[0,9,11],[0,9,5],[0,4,10]]",
        "output": "[True, False, True]"
      },
      {
        "input": "n = 100, edgeList = [[i,i+1,i*10] for i in range(99)] + [[99,0,990]], queries = [[i,i+1,(i+1)*10] for i in range(99)] + [[0,99,1000]]",
        "output": "Error: Solution.distanceLimitedPathsExist() missing 2 required positional arguments: 'edgeList' and 'queries'"
      },
      {
        "input": "n = 10, edgeList = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,0,50],[0,5,55],[5,1,60],[1,6,65],[6,2,70],[2,7,75]], queries = [[0,9,60],[1,8,55],[2,7,50],[3,6,45],[4,5,40]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 18, edgeList = [[0,1,5],[1,2,10],[2,3,15],[3,4,20],[4,5,25],[5,6,30],[6,7,35],[7,8,40],[8,9,45],[9,10,50],[10,11,55],[11,12,60],[12,13,65],[13,14,70],[14,15,75],[15,16,80],[16,17,85],[17,0,90],[0,8,95],[1,9,100],[2,10,105],[3,11,110],[4,12,115],[5,13,120],[6,14,125],[7,15,130],[8,16,135],[9,17,140],[10,0,145],[11,1,150],[12,2,155],[13,3,160],[14,4,165],[15,5,170],[16,6,175],[17,7,180]], queries = [[0,17,175],[1,16,180],[2,15,185],[3,14,190],[4,13,195],[5,12,200],[6,11,205],[7,10,210],[8,9,215],[0,15,220],[1,14,225],[2,13,230],[3,12,235],[4,11,240],[5,10,245],[6,9,250],[7,8,255],[0,14,260],[1,13,265],[2,12,270],[3,11,275],[4,10,280],[5,9,285],[6,8,290],[0,13,295],[1,12,300],[2,11,305],[3,10,310],[4,9,315],[5,8,320],[0,12,325],[1,11,330],[2,10,335],[3,9,340],[4,8,345],[0,11,350],[1,10,355],[2,9,360],[3,8,365],[0,10,370],[1,9,375],[2,8,380],[0,9,385],[1,8,390],[0,8,395]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 15, edgeList = [[0,1,10],[0,2,20],[1,3,30],[2,4,40],[3,5,50],[4,6,60],[5,7,70],[6,8,80],[7,9,90],[8,10,100],[9,11,110],[10,12,120],[11,13,130],[12,14,140]], queries = [[0,14,150],[0,14,75],[0,7,85],[7,14,110]]",
        "output": "[True, False, True, False]"
      },
      {
        "input": "n = 6, edgeList = [[0,1,20],[1,2,30],[2,3,40],[3,4,50],[4,5,60],[5,0,70],[0,2,15],[2,4,25],[4,1,35],[1,3,45],[3,5,55],[5,2,65]], queries = [[0,5,50],[1,4,40],[2,3,30]]",
        "output": "[False, True, False]"
      },
      {
        "input": "n = 50, edgeList = [[i,i+1,i*2] for i in range(49)] + [[49,0,98]], queries = [[0,49,100],[10,20,60],[30,40,120]]",
        "output": "Error: Solution.distanceLimitedPathsExist() missing 1 required positional argument: 'edgeList'"
      }
    ]
  },
  {
    "id": 3203,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Graph"
    ],
    "problemDescription": "There exist two undirected trees with n and m nodes, numbered from 0 to n - 1 and from 0 to m - 1, respectively. You are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree.\nYou must connect one node from the first tree with another node from the second tree with an edge.\nReturn the minimum possible diameter of the resulting tree.\nThe diameter of a tree is the length of the longest path between any two nodes in the tree.\n\u00a0\nExample 1:\n\nInput: edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]\nOutput: 3\nExplanation:\nWe can obtain a tree of diameter 3 by connecting node 0 from the first tree with any node from the second tree.\n\nExample 2:\n\n\nInput: edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]\nOutput: 5\nExplanation:\nWe can obtain a tree of diameter 5 by connecting node 0 from the first tree with node 0 from the second tree.\n\n\u00a0\nConstraints:\n\n1 <= n, m <= 105\nedges1.length == n - 1\nedges2.length == m - 1\nedges1[i].length == edges2[i].length == 2\nedges1[i] = [ai, bi]\n0 <= ai, bi < n\nedges2[i] = [ui, vi]\n0 <= ui, vi < m\nThe input is generated such that edges1 and edges2 represent valid trees.\n\n",
    "starterCode": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "6"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]",
        "output": "3"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]",
        "output": "5"
      },
      {
        "input": "edges1 = [[0,1]], edges2 = [[0,1]]",
        "output": "3"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4]], edges2 = [[0,1],[0,2],[1,3],[2,4]]",
        "output": "5"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "11"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
        "output": "15"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "8"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], edges2 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10]]",
        "output": "6"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "9"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,10]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "10"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "14"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22]]",
        "output": "22"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]]",
        "output": "20"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16]]",
        "output": "17"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30]]",
        "output": "31"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "14"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
        "output": "15"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], edges2 = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7]]",
        "output": "7"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[6,8]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "11"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]]",
        "output": "19"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
        "output": "14"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "10"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8],[5,9],[5,10],[6,11],[6,12],[7,13],[7,14],[8,15],[8,16]], edges2 = [[0,1],[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8],[5,9],[5,10],[6,11],[6,12],[7,13],[7,14],[8,15],[8,16],[9,17],[10,18],[11,19],[12,20]]",
        "output": "8"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8]], edges2 = [[0,1],[0,9],[1,10],[9,11],[10,12],[9,13],[11,14],[12,15],[13,16]]",
        "output": "8"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]]",
        "output": "15"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "13"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[7,8],[8,9],[9,10]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "11"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], edges2 = [[0,1],[1,2],[1,3],[2,4],[3,5],[4,6],[5,7]]",
        "output": "6"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "9"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], edges2 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]]",
        "output": "7"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "14"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7]], edges2 = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[7,8],[8,9],[9,10]]",
        "output": "10"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17]]",
        "output": "17"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "12"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]]",
        "output": "10"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25]]",
        "output": "26"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25]]",
        "output": "25"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[11,23],[12,24],[13,25],[14,26],[15,27],[16,28],[17,29],[18,30],[19,31],[20,32],[21,33],[22,34],[23,35],[24,36],[25,37],[26,38],[27,39],[28,40],[29,41],[30,42],[31,43],[32,44],[33,45]], edges2 = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[11,23],[12,24],[13,25],[14,26],[15,27],[16,28],[17,29],[18,30],[19,31],[20,32],[21,33],[22,34],[23,35],[24,36],[25,37],[26,38],[27,39],[28,40],[29,41],[30,42],[31,43],[32,44],[33,45],[34,46],[35,47],[36,48],[37,49],[38,50],[39,51],[40,52],[41,53],[42,54],[43,55],[44,56],[45,57]]",
        "output": "12"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]]",
        "output": "21"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31]]",
        "output": "31"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[6,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31]]",
        "output": "31"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24]]",
        "output": "24"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35]]",
        "output": "36"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
        "output": "15"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[14,28],[14,29],[15,30],[15,31]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32]]",
        "output": "32"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[7,8],[8,9],[9,10]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
        "output": "14"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "10"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13]]",
        "output": "13"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26]]",
        "output": "27"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], edges2 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8]]",
        "output": "6"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], edges2 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[6,12]]",
        "output": "7"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[6,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]]",
        "output": "20"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27]]",
        "output": "27"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10]], edges2 = [[0,1],[0,2],[0,3],[1,4],[2,5],[3,6],[4,7],[5,8],[6,9],[7,10],[8,11],[9,12],[10,13],[11,14]]",
        "output": "11"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], edges2 = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[11,23],[12,24],[13,25],[14,26],[15,27],[16,28],[17,29],[18,30],[19,31],[20,32],[21,33]]",
        "output": "8"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], edges2 = [[0,1],[0,2],[0,3],[1,4],[2,5],[3,6],[4,7]]",
        "output": "6"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[5,8]], edges2 = [[0,1],[0,2],[1,3],[2,4],[4,5],[4,6],[5,7]]",
        "output": "7"
      },
      {
        "input": "edges1 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,8]]",
        "output": "9"
      },
      {
        "input": "edges1 = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[5,7],[5,8],[6,9],[6,10]], edges2 = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "8"
      }
    ]
  },
  {
    "id": 2076,
    "difficulty": "Hard",
    "tags": [
      "Union Find",
      "Graph"
    ],
    "problemDescription": "You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.\nYou are also given a 0-indexed 2D integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, either directly or indirectly through other people.\nInitially, no one is friends with each other. You are given a list of friend requests as a 0-indexed 2D integer array requests, where requests[j] = [uj, vj] is a friend request between person uj and person vj.\nA friend request is successful if uj and vj can be friends. Each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), and upon a successful request, uj and vj become direct friends for all future friend requests.\nReturn a boolean array result, where each result[j] is true if the jth friend request is successful or false if it is not.\nNote: If uj and vj are already direct friends, the request is still successful.\n\u00a0\nExample 1:\n\nInput: n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]\nOutput: [true,false]\nExplanation:\nRequest 0: Person 0 and person 2 can be friends, so they become direct friends. \nRequest 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0).\n\nExample 2:\n\nInput: n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]\nOutput: [true,false]\nExplanation:\nRequest 0: Person 1 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1).\n\nExample 3:\n\nInput: n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]\nOutput: [true,false,true,false]\nExplanation:\nRequest 0: Person 0 and person 4 can be friends, so they become direct friends.\nRequest 1: Person 1 and person 2 cannot be friends since they are directly restricted.\nRequest 2: Person 3 and person 1 can be friends, so they become direct friends.\nRequest 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1).\n\n\u00a0\nConstraints:\n\n2 <= n <= 1000\n0 <= restrictions.length <= 1000\nrestrictions[i].length == 2\n0 <= xi, yi <= n - 1\nxi != yi\n1 <= requests.length <= 1000\nrequests[j].length == 2\n0 <= uj, vj <= n - 1\nuj != vj\n\n",
    "starterCode": "class Solution:\n    def friendRequests(self, n: int, restrictions: List[List[int]], requests: List[List[int]]) -> List[bool]:\n        ",
    "testCases": [
      {
        "input": "n = 4, restrictions = [[0,2],[1,3]], requests = [[0,1],[2,3],[0,3]]",
        "output": "[True, True, False]"
      },
      {
        "input": "n = 4, restrictions = [], requests = [[0,1],[1,2],[2,3],[3,0]]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "n = 4, restrictions = [[0,2],[1,3]], requests = [[0,1],[2,3],[1,2]]",
        "output": "[True, True, False]"
      },
      {
        "input": "n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]",
        "output": "[True, False, True, False]"
      },
      {
        "input": "n = 6, restrictions = [[1,4],[2,5]], requests = [[0,3],[1,2],[3,4]]",
        "output": "[True, True, True]"
      },
      {
        "input": "n = 6, restrictions = [[0,1],[2,3],[4,5]], requests = [[0,2],[1,3],[2,4],[3,5],[4,0],[5,1]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "n = 6, restrictions = [[0,1],[2,3],[4,5]], requests = [[0,2],[1,3],[4,5],[2,4]]",
        "output": "[True, True, False, True]"
      },
      {
        "input": "n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]",
        "output": "[True, False]"
      },
      {
        "input": "n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]",
        "output": "[True, False]"
      },
      {
        "input": "n = 10, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]], requests = [[0,5],[2,7],[4,9],[1,6]]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "n = 12, restrictions = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]], requests = [[0,2],[1,3],[4,6],[5,7],[8,10],[9,11],[0,5],[2,7],[4,9],[6,11]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 7, restrictions = [[0,6],[1,5],[2,4]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0]]",
        "output": "[True, True, True, False, True, True, False]"
      },
      {
        "input": "n = 20, restrictions = [[0,10],[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[8,18],[9,19]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,10]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 9, restrictions = [[0,3],[1,4],[2,5],[6,8]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,0],[7,1],[8,2]]",
        "output": "[True, True, False, True, True, True, True, False, True, True, False, False, True, True, True, False, False, True]"
      },
      {
        "input": "n = 50, restrictions = [[i,i+1] for i in range(0,49,2)], requests = [[i,i+1] for i in range(1,49,2)] + [[i,i+1] for i in range(0,49,2)]",
        "output": "Error: Solution.friendRequests() missing 2 required positional arguments: 'restrictions' and 'requests'"
      },
      {
        "input": "n = 7, restrictions = [[0,3],[1,4],[2,5],[3,6],[4,0],[5,1],[6,2]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0]]",
        "output": "[True, True, False, True, True, False, False]"
      },
      {
        "input": "n = 10, restrictions = [[0,2],[1,3],[4,6],[5,7],[8,9]], requests = [[0,1],[2,3],[4,5],[6,7],[8,9],[0,9],[1,8],[2,7],[3,6],[4,3],[5,2],[6,1],[7,0],[8,5],[9,4]]",
        "output": "[True, True, True, True, False, True, False, True, True, False, False, False, False, True, False]"
      },
      {
        "input": "n = 15, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0]], requests = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,0],[14,1]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, False, False, False]"
      },
      {
        "input": "n = 8, restrictions = [[0,4],[1,5],[2,6],[3,7]], requests = [[0,1],[2,3],[4,5],[6,7],[0,5]]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "n = 10, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], requests = [[0,9],[1,8],[2,7],[3,6],[4,5]]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "n = 8, restrictions = [[0,7],[1,6],[2,5],[3,4]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0]]",
        "output": "[True, True, True, False, True, True, True, False]"
      },
      {
        "input": "n = 9, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,0],[8,1]], requests = [[0,4],[1,5],[2,6],[3,7],[4,8],[5,0],[6,1],[7,2],[8,3]]",
        "output": "[True, True, True, True, False, False, False, False, False]"
      },
      {
        "input": "n = 12, restrictions = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]], requests = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[0,11],[1,10],[2,9],[3,8],[4,7],[5,6]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False]"
      },
      {
        "input": "n = 15, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,0],[5,6],[6,7],[7,8],[8,5],[9,10],[10,11],[11,12],[12,9],[13,14],[14,13]], requests = [[0,3],[1,4],[2,0],[3,1],[4,2],[5,8],[6,9],[7,10],[8,11],[9,12],[10,5],[11,6],[12,7]]",
        "output": "[True, True, False, False, False, False, True, True, True, False, True, True, True]"
      },
      {
        "input": "n = 12, restrictions = [[0,6],[1,7],[2,8],[3,9],[4,10],[5,11]], requests = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[0,11]]",
        "output": "[True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 8, restrictions = [[0,4],[1,5],[2,6],[3,7]], requests = [[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4],[0,5],[1,6],[2,7],[3,4]]",
        "output": "[True, True, True, True, True, True, True, True, False, False, False, False]"
      },
      {
        "input": "n = 8, restrictions = [[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4]], requests = [[0,4],[1,5],[2,6],[3,7],[0,5],[1,6],[2,7],[3,4]]",
        "output": "[True, True, True, True, False, False, False, False]"
      },
      {
        "input": "n = 8, restrictions = [[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4]], requests = [[0,4],[1,5],[2,6],[3,7]]",
        "output": "[True, True, True, True]"
      },
      {
        "input": "n = 10, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]], requests = [[0,5],[2,7],[4,9],[1,6],[3,8]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 10, restrictions = [[0,1],[2,3],[4,5],[6,7],[8,9]], requests = [[0,2],[1,3],[4,6],[5,7],[8,0],[9,1]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "n = 7, restrictions = [[0,3],[1,4],[2,5],[3,6],[4,0],[5,1],[6,2]], requests = [[0,6],[1,5],[2,4],[3,0],[4,1],[5,2],[6,3]]",
        "output": "[True, False, True, False, False, False, False]"
      },
      {
        "input": "n = 15, restrictions = [[0,5],[1,6],[2,7],[3,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
        "output": "[True, True, True, True, False, True, True, True, True, False, True, True, True, True]"
      },
      {
        "input": "n = 8, restrictions = [[0,2],[1,3],[4,6],[5,7]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,0],[0,3],[1,4],[2,5],[3,6],[4,7],[5,0],[6,1],[7,2]]",
        "output": "[True, False, True, True, True, False, True, True, False, False, True, False, False, False, True, False]"
      },
      {
        "input": "n = 15, restrictions = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,0]], requests = [[0,2],[2,4],[4,6],[6,8],[8,10],[10,12],[12,14],[14,1]]",
        "output": "[True, True, True, True, True, True, False, True]"
      },
      {
        "input": "n = 9, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[0,8]], requests = [[0,8],[1,7],[2,6],[3,5],[4,8],[0,7],[1,6],[2,5],[3,4]]",
        "output": "[False, True, True, True, True, False, False, False, False]"
      },
      {
        "input": "n = 10, restrictions = [[0,9],[1,8],[2,7],[3,6],[4,5]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0],[0,2],[2,4],[4,6],[6,8],[8,0]]",
        "output": "[True, True, True, True, False, True, True, True, True, False, True, True, False, True, False]"
      },
      {
        "input": "n = 10, restrictions = [[0,1],[2,3],[4,5],[6,7],[8,9]], requests = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,0],[9,1]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 15, restrictions = [[0,5],[1,6],[2,7],[3,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0]]",
        "output": "[True, True, True, True, False, True, True, True, True, False, True, True, True, True, True]"
      },
      {
        "input": "n = 7, restrictions = [[0,2],[1,3],[4,6]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0],[0,3],[1,4],[2,5]]",
        "output": "[True, False, True, True, True, False, True, False, False, True]"
      },
      {
        "input": "n = 12, restrictions = [[0,6],[1,7],[2,8],[3,9],[4,10],[5,11]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,0],[6,7],[7,8],[8,9],[9,10],[10,11],[11,6],[0,7],[1,8],[2,9],[3,10],[4,11],[5,6]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False]"
      },
      {
        "input": "n = 10, restrictions = [[0,5],[1,6],[2,7],[3,8],[4,9]], requests = [[0,9],[1,8],[2,7],[3,6],[4,5],[5,0],[6,1],[7,2],[8,3],[9,4]]",
        "output": "[True, True, False, True, True, False, False, False, False, False]"
      },
      {
        "input": "n = 15, restrictions = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,0],[14,1]], requests = [[0,14],[1,13],[2,12],[3,11],[4,10],[5,9],[6,8],[7,0]]",
        "output": "[True, True, True, True, True, True, False, True]"
      },
      {
        "input": "n = 12, restrictions = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[0,11],[1,10],[2,9],[3,8],[4,7],[5,6]], requests = [[0,6],[1,7],[2,8],[3,9],[4,10],[5,11],[6,0],[7,1],[8,2],[9,3],[10,4],[11,5]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 7, restrictions = [[0,2],[1,3],[4,6]], requests = [[0,1],[2,3],[4,5],[5,6],[0,3],[2,5]]",
        "output": "[True, True, True, False, False, True]"
      },
      {
        "input": "n = 9, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0]], requests = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,0],[8,1]]",
        "output": "[True, True, True, True, True, True, False, False, False]"
      },
      {
        "input": "n = 9, restrictions = [[0,1],[2,3],[4,5],[6,7],[8,0]], requests = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,0],[8,1],[0,4]]",
        "output": "[True, True, True, True, True, True, False, False, True, True]"
      },
      {
        "input": "n = 15, restrictions = [[0,14],[1,13],[2,12],[3,11],[4,10],[5,9],[6,8]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0],[0,13],[1,12],[2,11],[3,10],[4,9],[5,8],[6,7]]",
        "output": "[True, True, True, True, True, True, True, False, True, True, True, True, True, True, False, False, False, False, False, False, False, True]"
      },
      {
        "input": "n = 5, restrictions = [[0,2],[1,3]], requests = [[0,1],[2,3],[1,4],[3,4]]",
        "output": "[True, True, True, False]"
      },
      {
        "input": "n = 7, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], requests = [[0,6],[1,5],[2,4],[3,0],[4,1],[5,2],[6,3]]",
        "output": "[True, True, True, True, False, False, True]"
      },
      {
        "input": "n = 20, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,0]], requests = [[0,10],[1,11],[2,12],[3,13],[4,14],[5,15],[6,16],[7,17],[8,18],[9,19],[0,5],[1,6],[2,7],[3,8],[4,9],[10,15],[11,16],[12,17],[13,18],[14,19]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 10, restrictions = [[0,1],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], requests = [[0,9],[1,8],[2,7],[3,6],[4,5]]",
        "output": "[True, True, True, True, False]"
      },
      {
        "input": "n = 8, restrictions = [[0,1],[2,3],[4,5],[5,6],[6,7]], requests = [[0,2],[1,4],[3,5],[5,7],[0,7],[4,6]]",
        "output": "[True, True, True, True, False, True]"
      },
      {
        "input": "n = 15, restrictions = [[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,4],[7,8],[8,9],[9,7],[10,11],[11,12],[12,10],[13,14]], requests = [[0,4],[1,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,0],[12,1],[13,2],[14,3]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, False, False, False, False]"
      },
      {
        "input": "n = 8, restrictions = [[0,2],[1,3],[4,6],[5,7]], requests = [[0,1],[2,3],[4,5],[6,7],[0,2],[1,3],[4,6],[5,7],[0,4],[2,6],[1,5],[3,7],[0,6],[2,4],[1,7],[3,5]]",
        "output": "[True, True, True, True, False, False, False, False, True, True, True, True, False, False, False, False]"
      },
      {
        "input": "n = 7, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0]], requests = [[0,3],[1,4],[2,5],[3,6],[4,0],[5,1],[6,2]]",
        "output": "[True, True, True, False, False, False, False]"
      },
      {
        "input": "n = 10, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]], requests = [[0,9],[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[7,6],[8,7],[9,8]]",
        "output": "[False, False, False, False, False, False, False, False, False, False]"
      },
      {
        "input": "n = 12, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], requests = [[0,6],[1,7],[2,8],[3,9],[4,10],[5,11],[6,0],[7,1],[8,2],[9,3],[10,4],[11,5]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 10, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,0]], requests = [[0,5],[5,6],[6,7],[7,8],[8,9],[9,5]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "n = 10, restrictions = [[0,9],[1,8],[2,7],[3,6],[4,5]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9]]",
        "output": "[True, True, True, True, False, True, True, True, True, False]"
      },
      {
        "input": "n = 8, restrictions = [[0,3],[1,4],[2,5],[3,6],[4,7]], requests = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[0,7],[1,6]]",
        "output": "[True, True, True, True, True, True, False, False]"
      },
      {
        "input": "n = 12, restrictions = [[0,6],[1,7],[2,8],[3,9],[4,10],[5,11]], requests = [[0,5],[1,4],[2,3],[6,11],[7,10],[8,9],[0,11],[1,10],[2,9],[3,8],[4,7],[5,6]]",
        "output": "[True, True, True, True, True, True, False, False, False, False, False, False]"
      },
      {
        "input": "n = 10, restrictions = [[0,9],[1,8],[2,7],[3,6],[4,5]], requests = [[0,1],[1,2],[2,3],[3,4],[4,0],[5,6],[6,7],[7,8],[8,9],[9,5]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 12, restrictions = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]], requests = [[0,2],[1,3],[4,6],[5,7],[8,10],[9,11],[0,11],[1,10],[2,9],[3,8],[4,7],[5,6]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, False, False]"
      },
      {
        "input": "n = 11, restrictions = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], requests = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,0],[10,1]]",
        "output": "[True, True, True, True, True, True, True, True, True, False, False]"
      },
      {
        "input": "n = 20, restrictions = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19]], requests = [[0,2],[1,3],[4,6],[5,7],[8,10],[9,11],[12,14],[13,15],[16,18],[17,19],[0,19],[1,18],[2,17],[3,16],[4,15],[5,14],[6,13],[7,12],[8,11],[9,10]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False]"
      },
      {
        "input": "n = 12, restrictions = [[0,6],[1,7],[2,8],[3,9],[4,10],[5,11]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[0,7],[1,8],[2,9],[3,10],[4,11],[5,6]]",
        "output": "[True, True, True, True, True, False, False, False, False, False, False]"
      },
      {
        "input": "n = 15, restrictions = [[0,7],[1,8],[2,9],[3,10],[4,11],[5,12],[6,13],[7,14]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]]",
        "output": "[True, True, True, True, True, True, False, True, True, True, True, True, True, False]"
      },
      {
        "input": "n = 9, restrictions = [[0,1],[2,3],[4,5],[6,7]], requests = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,0],[8,1],[0,8],[1,7],[2,6],[3,5],[4,3],[5,2],[6,1],[7,0],[8,6],[0,4],[1,5],[2,7],[3,8]]",
        "output": "[True, True, True, True, True, True, True, False, False, True, True, True, True, False, False, False, False, True, True, True, False, False]"
      },
      {
        "input": "n = 12, restrictions = [[0,3],[1,4],[2,5],[6,9],[7,10],[8,11]], requests = [[0,1],[1,2],[3,4],[4,5],[6,7],[7,8],[9,10],[10,11],[0,6],[1,7],[2,8],[3,9],[4,10],[5,11],[0,2],[1,3],[4,6],[5,7],[8,10],[9,11]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, True]"
      },
      {
        "input": "n = 6, restrictions = [[0,1],[2,3],[4,5]], requests = [[0,2],[1,3],[2,4],[3,5],[0,5],[1,4]]",
        "output": "[True, True, True, True, False, False]"
      },
      {
        "input": "n = 10, restrictions = [[0,5],[1,6],[2,7],[3,8],[4,9]], requests = [[0,1],[1,2],[2,3],[3,4],[4,0],[5,6],[6,7],[7,8],[8,9],[9,5]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 10, restrictions = [[0,9],[1,8],[2,7],[3,6],[4,5]], requests = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]]",
        "output": "[True, True, True, True, False, True, True, True, True, False]"
      },
      {
        "input": "n = 8, restrictions = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7]], requests = [[0,3],[1,4],[2,5],[3,6],[4,7],[0,1],[2,3],[4,5],[6,7]]",
        "output": "[True, True, True, True, True, False, False, False, False]"
      }
    ]
  },
  {
    "id": 956,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.\nYou are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.\nReturn the largest possible height of your billboard installation. If you cannot support the billboard, return 0.\n\u00a0\nExample 1:\n\nInput: rods = [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n\nExample 2:\n\nInput: rods = [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n\nExample 3:\n\nInput: rods = [1,2]\nOutput: 0\nExplanation: The billboard cannot be supported, so we return 0.\n\n\u00a0\nConstraints:\n\n1 <= rods.length <= 20\n1 <= rods[i] <= 1000\nsum(rods[i]) <= 5000\n\n",
    "starterCode": "class Solution:\n    def tallestBillboard(self, rods: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "rods = [10,20,30,40]",
        "output": "50"
      },
      {
        "input": "rods = [100,200,300]",
        "output": "300"
      },
      {
        "input": "rods = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "rods = [10,20,30,40,50]",
        "output": "70"
      },
      {
        "input": "rods = [1,3,5,7,9,11,13,15,17,19]",
        "output": "50"
      },
      {
        "input": "rods = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "20"
      },
      {
        "input": "rods = [1,3,5,7,9]",
        "output": "12"
      },
      {
        "input": "rods = [1]",
        "output": "0"
      },
      {
        "input": "rods = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000]",
        "output": "10500"
      },
      {
        "input": "rods = [100,200,300,400,500]",
        "output": "700"
      },
      {
        "input": "rods = [1,2,3,6]",
        "output": "6"
      },
      {
        "input": "rods = [10,10,10,10,10,10,10,10]",
        "output": "40"
      },
      {
        "input": "rods = [3,9,7,3,5,1,100]",
        "output": "14"
      },
      {
        "input": "rods = [5,5,5,5,5,5]",
        "output": "15"
      },
      {
        "input": "rods = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "50"
      },
      {
        "input": "rods = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "105"
      },
      {
        "input": "rods = [1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000]",
        "output": "10000"
      },
      {
        "input": "rods = [1,1,1,1,1,1,1,1,1,1]",
        "output": "5"
      },
      {
        "input": "rods = [1,2]",
        "output": "0"
      },
      {
        "input": "rods = [1,2,3,4,5,6]",
        "output": "10"
      },
      {
        "input": "rods = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73]",
        "output": "355"
      },
      {
        "input": "rods = [10, 21, 32, 43, 54, 65, 76, 87, 98]",
        "output": "238"
      },
      {
        "input": "rods = [500,1500,1000,2000,2500,3000,3500,4000,4500,5000]",
        "output": "13500"
      },
      {
        "input": "rods = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "232"
      },
      {
        "input": "rods = [2,5,10,15,20,25,30,35,40,45,50]",
        "output": "135"
      },
      {
        "input": "rods = [100, 150, 200, 250, 300, 350, 400]",
        "output": "800"
      },
      {
        "input": "rods = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1450, 1500, 1550, 1600, 1650, 1700, 1750, 1800, 1850, 1900, 1950, 2000, 2050, 2100, 2150, 2200, 2250, 2300, 2350, 2400, 2450, 2500]",
        "output": "31850"
      },
      {
        "input": "rods = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "55"
      },
      {
        "input": "rods = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "135"
      },
      {
        "input": "rods = [250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250]",
        "output": "2500"
      },
      {
        "input": "rods = [1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946]",
        "output": "14326"
      },
      {
        "input": "rods = [8, 15, 30, 10, 20, 25, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170]",
        "output": "785"
      },
      {
        "input": "rods = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "1050"
      },
      {
        "input": "rods = [12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96]",
        "output": "396"
      },
      {
        "input": "rods = [999, 1000, 1001, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982]",
        "output": "9915"
      },
      {
        "input": "rods = [100, 200, 300, 400, 500, 600]",
        "output": "1000"
      },
      {
        "input": "rods = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "210"
      },
      {
        "input": "rods = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105]",
        "output": "420"
      },
      {
        "input": "rods = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "162"
      },
      {
        "input": "rods = [5, 25, 45, 65, 85, 105, 125, 145, 165, 185, 205, 225, 245, 265, 285, 305, 325, 345, 365, 385]",
        "output": "1950"
      },
      {
        "input": "rods = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "525"
      },
      {
        "input": "rods = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "6000"
      },
      {
        "input": "rods = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "500"
      },
      {
        "input": "rods = [7, 14, 28, 56, 112, 224, 448, 896, 1792, 3584, 1, 2, 3, 4, 5]",
        "output": "3588"
      },
      {
        "input": "rods = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140, 147, 154, 161, 168, 175, 182, 189, 196, 203, 210, 217, 224, 231, 238, 245, 252, 259, 266, 273, 280, 287, 294, 301, 308, 315]",
        "output": "3619"
      },
      {
        "input": "rods = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]",
        "output": "10500"
      },
      {
        "input": "rods = [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980]",
        "output": "9895"
      },
      {
        "input": "rods = [1, 2, 5, 10, 20, 25]",
        "output": "30"
      },
      {
        "input": "rods = [100, 200, 150, 300, 400, 500, 600, 700]",
        "output": "1400"
      },
      {
        "input": "rods = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "525"
      },
      {
        "input": "rods = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "105"
      },
      {
        "input": "rods = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "0"
      },
      {
        "input": "rods = [1, 10, 100, 1000, 10, 100, 1, 1000, 100, 10]",
        "output": "1111"
      },
      {
        "input": "rods = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "600"
      },
      {
        "input": "rods = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304]",
        "output": "0"
      },
      {
        "input": "rods = [5,10,15,20,25,30,35,40]",
        "output": "90"
      },
      {
        "input": "rods = [10, 21, 32, 43, 54, 65, 76, 87, 98, 109, 120, 131, 142, 153, 164, 175, 186, 197, 208, 219]",
        "output": "1145"
      },
      {
        "input": "rods = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]",
        "output": "0"
      },
      {
        "input": "rods = [33, 66, 99, 132, 165, 198, 231, 264, 297, 330, 363, 396, 429, 462, 495]",
        "output": "1980"
      },
      {
        "input": "rods = [500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519]",
        "output": "5095"
      },
      {
        "input": "rods = [100, 150, 200, 250, 300, 350, 400, 450, 500]",
        "output": "1350"
      },
      {
        "input": "rods = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "2700"
      },
      {
        "input": "rods = [300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200]",
        "output": "12500"
      },
      {
        "input": "rods = [101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367]",
        "output": "5453"
      },
      {
        "input": "rods = [5, 15, 10, 20, 25, 30, 35, 40, 45, 50]",
        "output": "135"
      },
      {
        "input": "rods = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]",
        "output": "0"
      },
      {
        "input": "rods = [23, 37, 41, 53, 67, 89, 97, 101, 113, 131, 139, 149, 151, 163, 173, 181, 191, 193, 197, 199]",
        "output": "1244"
      },
      {
        "input": "rods = [101, 202, 303, 404, 505, 606, 707, 808, 909, 1010, 1111, 1212, 1313, 1414, 1515, 1616, 1717, 1818, 1919, 2020]",
        "output": "10605"
      },
      {
        "input": "rods = [100,90,80,70,60,50,40,30,20,10]",
        "output": "270"
      },
      {
        "input": "rods = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "112"
      },
      {
        "input": "rods = [999, 1000, 998, 1001, 997, 1002, 996, 1003, 995, 1004, 994, 1005, 993, 1006, 992, 1007, 991, 1008, 990, 1009]",
        "output": "9995"
      },
      {
        "input": "rods = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
        "output": "0"
      },
      {
        "input": "rods = [5, 15, 20, 25, 30, 35, 40]",
        "output": "85"
      },
      {
        "input": "rods = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]",
        "output": "30"
      },
      {
        "input": "rods = [100, 200, 150, 50, 300, 400, 250, 100, 50, 150, 400, 300, 200, 100, 50, 150, 250, 300, 400, 100]",
        "output": "2000"
      },
      {
        "input": "rods = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]",
        "output": "195"
      },
      {
        "input": "rods = [17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255, 272, 289, 306, 323, 340]",
        "output": "1785"
      },
      {
        "input": "rods = [50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500]",
        "output": "2575"
      },
      {
        "input": "rods = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]",
        "output": "195"
      },
      {
        "input": "rods = [15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]",
        "output": "300"
      },
      {
        "input": "rods = [10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "135"
      },
      {
        "input": "rods = [5, 5, 10, 10, 20, 20, 30, 30, 40, 40]",
        "output": "105"
      },
      {
        "input": "rods = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "2700"
      },
      {
        "input": "rods = [11,22,33,44,55,66,77,88,99,110,121,132,143,154,165,176,187,198,209,220]",
        "output": "1155"
      },
      {
        "input": "rods = [3, 9, 1, 4, 7, 2, 5, 6, 8, 10]",
        "output": "27"
      },
      {
        "input": "rods = [123,456,789,1011,1213,1415,1617,1819,2021,2223,2425,2627,2829,3031,3233,3435,3637,3839,4041,4243]",
        "output": "21824"
      },
      {
        "input": "rods = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "200"
      },
      {
        "input": "rods = [2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11]",
        "output": "65"
      },
      {
        "input": "rods = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77]",
        "output": "390"
      },
      {
        "input": "rods = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "270"
      },
      {
        "input": "rods = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "75"
      },
      {
        "input": "rods = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "30"
      },
      {
        "input": "rods = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71]",
        "output": "318"
      },
      {
        "input": "rods = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "1050"
      },
      {
        "input": "rods = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 50, 75, 125, 150, 175, 225, 250, 275, 325, 350]",
        "output": "3750"
      },
      {
        "input": "rods = [11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220]",
        "output": "1155"
      },
      {
        "input": "rods = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140]",
        "output": "735"
      },
      {
        "input": "rods = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600]",
        "output": "1950"
      }
    ]
  },
  {
    "id": 980,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Backtracking",
      "Matrix"
    ],
    "problemDescription": "You are given an m x n integer array grid where grid[i][j] could be:\n\n1 representing the starting square. There is exactly one starting square.\n2 representing the ending square. There is exactly one ending square.\n0 representing empty squares we can walk over.\n-1 representing obstacles that we cannot walk over.\n\nReturn the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.\n\u00a0\nExample 1:\n\n\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\nOutput: 2\nExplanation: We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\n\nExample 2:\n\n\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\nOutput: 4\nExplanation: We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\n\nExample 3:\n\n\nInput: grid = [[0,1],[2,0]]\nOutput: 0\nExplanation: There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid.\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 20\n1 <= m * n <= 20\n-1 <= grid[i][j] <= 2\nThere is exactly one starting cell and one ending cell.\n\n",
    "starterCode": "class Solution:\n    def uniquePathsIII(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[0,1],[2,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0],[1,0,0],[0,2,-1]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,-1,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,2],[-1,0,0],[0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,1],[0,0,0],[2,0,0]]",
        "output": "2"
      },
      {
        "input": "grid = [[1,0,0,2],[-1,0,-1,-1],[0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0],[0,0,0],[0,0,2]]",
        "output": "2"
      },
      {
        "input": "grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]",
        "output": "2"
      },
      {
        "input": "grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,0],[0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,-1],[0,0,0],[0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,-1,0],[0,0,0,0],[0,0,2,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,2]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,0,0,2]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0],[0,1,0,0],[0,0,2,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1],[0],[0],[2]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,-1,-1,0],[0,-1,0,0,2],[0,0,0,-1,0],[0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,-1,0,-1,0,-1],[0,0,0,0,0,0],[0,-1,0,-1,0,-1],[0,0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,-1,-1,-1,-1,0,0,0],[0,0,0,-1,0,0,0,0],[0,-1,0,-1,0,-1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,-1,0,0],[0,0,0,0,0],[0,-1,-1,0,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0],[-1,0,0,-1,0],[0,0,0,0,0],[0,-1,0,-1,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,1,0,0],[0,-1,-1,0,0],[0,0,0,0,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,-1,0,0],[0,-1,-1,-1,-1,0],[0,0,0,-1,0,0],[0,0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,2]]",
        "output": "104"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,-1,0,-1,0],[0,0,0,0,0],[0,-1,0,-1,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,0,0,0],[0,0,-1,0,0],[0,0,0,0,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,1],[0,0,0,0,0],[0,-1,0,0,0],[0,0,0,0,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,1,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,2,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]",
        "output": "972"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,-1,0,0],[0,0,0,-1,2,-1,0],[0,0,0,0,-1,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,1,0,0],[0,0,0,-1,2,0],[0,0,0,0,0,0]]",
        "output": "272"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,-1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0,-1,0],[0,0,0,0,0],[0,-1,0,-1,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,-1,0,0],[0,-1,0,-1,0,0],[0,0,0,0,0,2],[0,0,0,-1,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,-1,0,0,0],[0,0,0,-1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,-1,0,0],[0,0,0,0,0],[0,0,0,-1,2]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,2,0],[0,0,0,0,0,0]]",
        "output": "378"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,-1,0,0],[0,0,0,-1,0,0],[0,0,0,0,0,2]]",
        "output": "46"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,2]]",
        "output": "378"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,-1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,-1,0],[0,0,0,0,0],[0,-1,-1,0,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,-1,0,-1,0],[0,0,0,0,0],[0,-1,2,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,0,0,0],[0,0,2,-1,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0,0],[0,1,0,0],[0,0,0,0],[2,-1,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,-1,0],[0,0,0,0,0],[0,-1,0,0,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,-1,-1,-1,-1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,-1,0,0,0],[0,-1,-1,-1,-1,0,0],[0,0,0,-1,0,0,0],[0,0,0,0,0,0,2],[0,0,0,0,0,0,0]]",
        "output": null
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0,-1],[0,0,-1,0],[0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,2,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,-1,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,-1,0,0,0],[0,0,0,-1,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,1],[0,-1,-1,0,0],[0,0,0,0,0],[0,0,2,0,0]]",
        "output": "3"
      },
      {
        "input": "grid = [[1,0,0,0],[0,-1,0,0],[0,0,0,-1],[0,0,2,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,-1,-1,-1,-1],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,2]]",
        "output": "20"
      },
      {
        "input": "grid = [[1,0,0,-1],[0,0,2,0],[0,0,-1,0],[0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0],[0,0,0,-1,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,-1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0,0],[0,1,0,0],[0,0,0,0],[0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,2,0],[0,0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,-1,0],[0,0,0,-1,0],[0,0,0,-1,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,-1,0,-1,0],[0,0,0,0,0],[0,-1,0,-1,0],[0,0,0,0,0],[0,-1,0,-1,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,2]]",
        "output": "378"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,-1,-1,-1,-1,0,0,0],[0,0,0,0,0,0,0,2]]",
        "output": "68"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,2,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,-1,-1,0,0],[0,0,0,0,2,0],[0,0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,1],[0,-1,-1,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,2,0,0]]",
        "output": "11"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,2,-1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]",
        "output": "42"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,-1,0,0],[0,0,0,0,0],[0,-1,0,-1,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,-1,0,0],[0,0,0,0,0],[0,-1,2,-1,0],[0,0,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,-1,0,-1,0],[0,0,2,0,0],[0,-1,0,-1,0],[0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,1,0,0],[0,0,0,0,2,0],[0,0,0,-1,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,-1,0],[0,0,0,0],[0,0,0,0],[0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,2,0]]",
        "output": "4"
      },
      {
        "input": "grid = [[1,0,-1,0,0,0],[0,0,0,0,0,0],[0,0,-1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,-1,0,0],[0,0,0,0,0],[0,0,0,2,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,2,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0],[0,0,-1,0],[0,0,0,0],[0,0,0,2]]",
        "output": "4"
      },
      {
        "input": "grid = [[0,1,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,2,0,0,0]]",
        "output": "1"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,-1,0,0],[0,-1,2,-1,0,0],[0,0,0,-1,0,0],[0,0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,-1,-1,-1,-1,0],[0,0,0,0,0,0],[0,0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,-1,0,0],[0,0,0,0,0],[0,-1,0,-1,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0],[0,0,0,-1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,2]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,-1,0,0,0],[0,0,0,0,2,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,-1],[0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,0,0,0],[0,1,0,0,0],[0,-1,-1,0,0],[0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,-1,-1,0,0],[0,0,0,0,0,0],[0,0,-1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,-1,-1,-1,-1,0],[0,0,0,0,0,2]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,2]]",
        "output": "1670"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,2]]",
        "output": "48"
      },
      {
        "input": "grid = [[1,0,0,0,0,0],[0,0,0,-1,0,0],[0,0,0,0,0,0],[0,0,0,0,2,0],[0,0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,2,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]",
        "output": "Execution timed out"
      },
      {
        "input": "grid = [[1,0,0,0,2],[-1,0,-1,0,-1],[0,0,0,0,0],[0,-1,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0],[0,0,0,0],[0,-1,2,-1],[0,-1,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,2],[0,0,-1,-1,0],[0,-1,0,0,0],[0,0,0,-1,0],[0,0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,0,-1,0,0],[0,0,0,0,0],[0,0,-1,0,0],[0,0,0,0,2]]",
        "output": "0"
      }
    ]
  },
  {
    "id": 1739,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Math",
      "Binary Search"
    ],
    "problemDescription": "You have a cubic storeroom where the width, length, and height of the room are all equal to n units. You are asked to place n boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:\n\nYou can place the boxes anywhere on the floor.\nIf box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall.\n\nGiven an integer n, return the minimum possible number of boxes touching the floor.\n\u00a0\nExample 1:\n\n\nInput: n = 3\nOutput: 3\nExplanation: The figure above is for the placement of the three boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n\nExample 2:\n\n\nInput: n = 4\nOutput: 3\nExplanation: The figure above is for the placement of the four boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n\nExample 3:\n\n\nInput: n = 10\nOutput: 6\nExplanation: The figure above is for the placement of the ten boxes.\nThese boxes are placed in the corner of the room, where the corner is on the back side.\n\u00a0\nConstraints:\n\n1 <= n <= 109\n\n",
    "starterCode": "class Solution:\n    def minimumBoxes(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 8",
        "output": "6"
      },
      {
        "input": "n = 3",
        "output": "3"
      },
      {
        "input": "n = 100",
        "output": "34"
      },
      {
        "input": "n = 15",
        "output": "9"
      },
      {
        "input": "n = 4",
        "output": "3"
      },
      {
        "input": "n = 1000000",
        "output": "16443"
      },
      {
        "input": "n = 20",
        "output": "10"
      },
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 1000000000",
        "output": "1650467"
      },
      {
        "input": "n = 1000",
        "output": "161"
      },
      {
        "input": "n = 10",
        "output": "6"
      },
      {
        "input": "n = 329",
        "output": "75"
      },
      {
        "input": "n = 344",
        "output": "77"
      },
      {
        "input": "n = 729",
        "output": "130"
      },
      {
        "input": "n = 567890",
        "output": "11279"
      },
      {
        "input": "n = 324",
        "output": "75"
      },
      {
        "input": "n = 300",
        "output": "71"
      },
      {
        "input": "n = 333",
        "output": "76"
      },
      {
        "input": "n = 316",
        "output": "74"
      },
      {
        "input": "n = 23",
        "output": "12"
      },
      {
        "input": "n = 303",
        "output": "72"
      },
      {
        "input": "n = 334",
        "output": "76"
      },
      {
        "input": "n = 35",
        "output": "15"
      },
      {
        "input": "n = 347",
        "output": "77"
      },
      {
        "input": "n = 5000",
        "output": "474"
      },
      {
        "input": "n = 567890123",
        "output": "1131581"
      },
      {
        "input": "n = 4913",
        "output": "464"
      },
      {
        "input": "n = 200",
        "output": "53"
      },
      {
        "input": "n = 500000000",
        "output": "1039682"
      },
      {
        "input": "n = 313",
        "output": "73"
      },
      {
        "input": "n = 500",
        "output": "100"
      },
      {
        "input": "n = 317",
        "output": "74"
      },
      {
        "input": "n = 3375",
        "output": "365"
      },
      {
        "input": "n = 897543210",
        "output": "1535456"
      },
      {
        "input": "n = 341",
        "output": "76"
      },
      {
        "input": "n = 216",
        "output": "55"
      },
      {
        "input": "n = 50000",
        "output": "2210"
      },
      {
        "input": "n = 987654",
        "output": "16287"
      },
      {
        "input": "n = 314",
        "output": "73"
      },
      {
        "input": "n = 318",
        "output": "74"
      },
      {
        "input": "n = 100000",
        "output": "3536"
      },
      {
        "input": "n = 25",
        "output": "13"
      },
      {
        "input": "n = 350",
        "output": "77"
      },
      {
        "input": "n = 5000000",
        "output": "48159"
      },
      {
        "input": "n = 325",
        "output": "75"
      },
      {
        "input": "n = 305",
        "output": "72"
      },
      {
        "input": "n = 123456789",
        "output": "408968"
      },
      {
        "input": "n = 999999",
        "output": "16443"
      },
      {
        "input": "n = 308",
        "output": "73"
      },
      {
        "input": "n = 12167",
        "output": "857"
      },
      {
        "input": "n = 342",
        "output": "77"
      },
      {
        "input": "n = 666",
        "output": "120"
      },
      {
        "input": "n = 315",
        "output": "74"
      },
      {
        "input": "n = 999999999",
        "output": "1650467"
      },
      {
        "input": "n = 2000",
        "output": "252"
      },
      {
        "input": "n = 250000000",
        "output": "654763"
      },
      {
        "input": "n = 30",
        "output": "14"
      },
      {
        "input": "n = 23456789",
        "output": "135151"
      },
      {
        "input": "n = 345",
        "output": "77"
      },
      {
        "input": "n = 336",
        "output": "76"
      },
      {
        "input": "n = 9261",
        "output": "719"
      },
      {
        "input": "n = 311",
        "output": "73"
      },
      {
        "input": "n = 310",
        "output": "73"
      },
      {
        "input": "n = 337",
        "output": "76"
      },
      {
        "input": "n = 343",
        "output": "77"
      },
      {
        "input": "n = 339",
        "output": "76"
      },
      {
        "input": "n = 320",
        "output": "74"
      },
      {
        "input": "n = 332",
        "output": "76"
      },
      {
        "input": "n = 987654321",
        "output": "1636751"
      },
      {
        "input": "n = 307",
        "output": "72"
      },
      {
        "input": "n = 309",
        "output": "73"
      },
      {
        "input": "n = 500000",
        "output": "10365"
      },
      {
        "input": "n = 328",
        "output": "75"
      },
      {
        "input": "n = 348",
        "output": "77"
      },
      {
        "input": "n = 304",
        "output": "72"
      },
      {
        "input": "n = 1500",
        "output": "208"
      },
      {
        "input": "n = 2197",
        "output": "272"
      },
      {
        "input": "n = 1331",
        "output": "191"
      },
      {
        "input": "n = 319",
        "output": "74"
      },
      {
        "input": "n = 125",
        "output": "39"
      },
      {
        "input": "n = 321",
        "output": "74"
      },
      {
        "input": "n = 6859",
        "output": "586"
      },
      {
        "input": "n = 50",
        "output": "20"
      },
      {
        "input": "n = 323",
        "output": "75"
      },
      {
        "input": "n = 331",
        "output": "75"
      },
      {
        "input": "n = 40",
        "output": "18"
      },
      {
        "input": "n = 327",
        "output": "75"
      },
      {
        "input": "n = 349",
        "output": "77"
      },
      {
        "input": "n = 10000",
        "output": "756"
      },
      {
        "input": "n = 335",
        "output": "76"
      },
      {
        "input": "n = 302",
        "output": "72"
      },
      {
        "input": "n = 312",
        "output": "73"
      },
      {
        "input": "n = 330",
        "output": "75"
      },
      {
        "input": "n = 322",
        "output": "74"
      },
      {
        "input": "n = 338",
        "output": "76"
      },
      {
        "input": "n = 306",
        "output": "72"
      },
      {
        "input": "n = 326",
        "output": "75"
      },
      {
        "input": "n = 301",
        "output": "71"
      },
      {
        "input": "n = 123456",
        "output": "4068"
      },
      {
        "input": "n = 346",
        "output": "77"
      },
      {
        "input": "n = 340",
        "output": "76"
      }
    ]
  },
  {
    "id": 1235,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming",
      "Sorting"
    ],
    "problemDescription": "We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].\nYou're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\nIf you choose a job that ends at time X you will be able to start another job that starts at time X.\n\u00a0\nExample 1:\n\n\nInput: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n\nExample 2:\n \n\nInput: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\nOutput: 150\nExplanation: The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.\n\nExample 3:\n\n\nInput: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\nOutput: 6\n\n\u00a0\nConstraints:\n\n1 <= startTime.length == endTime.length == profit.length <= 5 * 104\n1 <= startTime[i] < endTime[i] <= 109\n1 <= profit[i] <= 104\n\n",
    "starterCode": "class Solution:\n    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "startTime = [1,10,4,3,8,9], endTime = [2,11,5,7,9,10], profit = [3,1,5,6,4,3]",
        "output": "17"
      },
      {
        "input": "startTime = [1,3,5,6,7], endTime = [3,5,9,8,9], profit = [50,20,60,40,30]",
        "output": "130"
      },
      {
        "input": "startTime = [1,10,100,1000], endTime = [2,20,200,2000], profit = [5,50,500,5000]",
        "output": "5555"
      },
      {
        "input": "startTime = [1,3,6,8], endTime = [2,5,10,12], profit = [50,20,100,80]",
        "output": "170"
      },
      {
        "input": "startTime = [3, 1, 1, 2], endTime = [4, 2, 4, 3], profit = [50, 10, 40, 70]",
        "output": "130"
      },
      {
        "input": "startTime = [3,5,10], endTime = [15,18,19], profit = [20,20,100]",
        "output": "100"
      },
      {
        "input": "startTime = [1], endTime = [2], profit = [5]",
        "output": "5"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10], endTime = [2,3,4,5,6,7,8,9,10,11], profit = [10,20,30,40,50,60,70,80,90,100]",
        "output": "550"
      },
      {
        "input": "startTime = [1, 3, 6, 8, 12, 14], endTime = [4, 5, 10, 11, 14, 15], profit = [5, 6, 8, 3, 10, 4]",
        "output": "28"
      },
      {
        "input": "startTime = [1,2,3,4,5,6], endTime = [2,3,4,5,6,7], profit = [1,2,3,4,5,6]",
        "output": "21"
      },
      {
        "input": "startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]",
        "output": "6"
      },
      {
        "input": "startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]",
        "output": "120"
      },
      {
        "input": "startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]",
        "output": "150"
      },
      {
        "input": "startTime = [5,8,4,1,1], endTime = [6,10,7,8,2], profit = [100,500,100,200,300]",
        "output": "900"
      },
      {
        "input": "startTime = [1,3,6,8], endTime = [5,7,10,12], profit = [50,20,100,200]",
        "output": "250"
      },
      {
        "input": "startTime = [2,5,8,11], endTime = [5,7,10,14], profit = [20,30,40,50]",
        "output": "140"
      },
      {
        "input": "startTime = [5,10,15,20,25], endTime = [10,15,20,25,30], profit = [100,150,200,250,300]",
        "output": "1000"
      },
      {
        "input": "startTime = [100,200,300], endTime = [200,300,400], profit = [1000,2000,3000]",
        "output": "6000"
      },
      {
        "input": "startTime = [1,2,4,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37], endTime = [5,6,9,10,13,14,17,18,21,22,25,26,29,30,33,34,37,38,41,42], profit = [100,200,150,300,100,500,400,300,600,700,800,600,400,300,200,100,900,800,700,600]",
        "output": "3400"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10], endTime = [11,12,13,14,15,16,17,18,19,20], profit = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "1000"
      },
      {
        "input": "startTime = [1,1,1,1,1,1], endTime = [2,3,4,5,6,7], profit = [100,200,300,400,500,600]",
        "output": "600"
      },
      {
        "input": "startTime = [1, 2, 3, 5, 6, 8, 10, 12, 14, 16], endTime = [5, 4, 6, 9, 8, 11, 13, 15, 17, 19], profit = [5, 3, 7, 9, 8, 6, 4, 2, 1, 10]",
        "output": "33"
      },
      {
        "input": "startTime = [1,3,5,7,9,11,13,15,17,19], endTime = [2,4,6,8,10,12,14,16,18,20], profit = [10,15,20,25,30,35,40,45,50,55]",
        "output": "325"
      },
      {
        "input": "startTime = [1, 1, 2, 2, 3, 4, 5, 5, 6, 7], endTime = [3, 4, 4, 5, 6, 7, 7, 8, 9, 10], profit = [50, 40, 30, 20, 60, 10, 20, 100, 5, 45]",
        "output": "155"
      },
      {
        "input": "startTime = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], endTime = [10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105], profit = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "2100"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], endTime = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21], profit = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "20"
      },
      {
        "input": "startTime = [1,5,8,11,13,16,19,22,25,28], endTime = [4,9,12,15,17,20,23,26,29,32], profit = [20,30,40,50,60,70,80,90,100,110]",
        "output": "370"
      },
      {
        "input": "startTime = [3,7,10,12,13,14,15,16,18,20], endTime = [5,8,13,14,15,17,20,21,22,23], profit = [5,8,13,14,15,17,20,21,22,23]",
        "output": "84"
      },
      {
        "input": "startTime = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140], endTime = [5, 14, 24, 34, 44, 54, 64, 74, 84, 94, 104, 114, 124, 134, 144], profit = [50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190]",
        "output": "1800"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], endTime = [25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], profit = [50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1050,1100,1150,1200,1250]",
        "output": "12350"
      },
      {
        "input": "startTime = [1,1,1,1,1,1,1,1,1,1], endTime = [100,200,300,400,500,600,700,800,900,1000], profit = [1000,900,800,700,600,500,400,300,200,100]",
        "output": "1000"
      },
      {
        "input": "startTime = [1,2,3,5,8,11,14,18,22,26,30,34,38,42,46,50], endTime = [4,6,9,13,12,16,20,24,28,32,36,40,44,48,52,56], profit = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600]",
        "output": "6900"
      },
      {
        "input": "startTime = [1,5,10,15,20,25,30], endTime = [4,9,14,19,24,29,34], profit = [100,200,300,400,500,600,700]",
        "output": "2800"
      },
      {
        "input": "startTime = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], endTime = [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100], profit = [30, 40, 20, 50, 35, 45, 25, 55, 40, 50, 30, 60, 45, 25, 55, 40, 60, 30, 50, 45, 25, 55, 40, 60, 30, 50, 45, 25, 55, 40, 60, 30, 50, 45, 25, 55, 40, 60, 30, 50, 45, 25, 55, 40, 60, 30, 50, 45, 25, 55, 40]",
        "output": "Error: list index out of range"
      },
      {
        "input": "startTime = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20], endTime = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22], profit = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]",
        "output": "360"
      },
      {
        "input": "startTime = [1, 3, 6, 8, 12, 15, 18, 20, 25, 30], endTime = [5, 7, 10, 14, 16, 19, 22, 24, 30, 35], profit = [50, 20, 70, 10, 120, 30, 50, 25, 80, 60]",
        "output": "430"
      },
      {
        "input": "startTime = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4], endTime = [2,3,4,5,3,4,5,6,4,5,6,7,5,6,7,8], profit = [10,10,10,10,15,15,15,15,20,20,20,20,25,25,25,25]",
        "output": "70"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], endTime = [11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], profit = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000]",
        "output": "3000"
      },
      {
        "input": "startTime = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16], endTime = [2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24], profit = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "42"
      },
      {
        "input": "startTime = [3,5,8,10,11,12,15,18,20,22], endTime = [4,9,11,13,14,17,19,23,24,25], profit = [20,30,5,10,50,40,70,60,10,20]",
        "output": "190"
      },
      {
        "input": "startTime = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], endTime = [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32], profit = [20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]",
        "output": "720"
      },
      {
        "input": "startTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], endTime = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], profit = [50, 40, 30, 20, 10, 50, 40, 30, 20, 10, 50, 40, 30, 20, 10, 50, 40, 30, 20, 10]",
        "output": "600"
      },
      {
        "input": "startTime = [1,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41], endTime = [6,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48], profit = [30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220]",
        "output": "730"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], endTime = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], profit = [50,100,150,200,250,300,350,400,450,500,550,600,650,700,750]",
        "output": "4600"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], endTime = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], profit = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "1200"
      },
      {
        "input": "startTime = [1,3,6,8,10,13,16,18,20,23], endTime = [4,7,10,12,14,17,20,22,24,27], profit = [500,400,300,200,100,50,75,125,175,225]",
        "output": "1250"
      },
      {
        "input": "startTime = [1000000000,900000000,800000000,700000000,600000000,500000000,400000000,300000000,200000000,100000000], endTime = [1000000001,900000001,800000001,700000001,600000001,500000001,400000001,300000001,200000001,100000001], profit = [1,2,3,4,5,6,7,8,9,10]",
        "output": "55"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], endTime = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], profit = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,13000,14000,15000]",
        "output": "120000"
      },
      {
        "input": "startTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], endTime = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31], profit = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "260"
      },
      {
        "input": "startTime = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], endTime = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], profit = [20, 15, 10, 5, 40, 35, 30, 25, 20, 15, 10, 5, 40, 35, 30]",
        "output": "335"
      },
      {
        "input": "startTime = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31], endTime = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32], profit = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160]",
        "output": "1360"
      },
      {
        "input": "startTime = [1,2,5,6,8,12,15,18,20,25], endTime = [5,5,10,10,13,17,20,22,28,30], profit = [50,20,70,10,30,60,5,40,90,25]",
        "output": "270"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10], endTime = [10,9,8,7,6,5,4,3,2,1], profit = [10,20,30,40,50,60,70,80,90,100]",
        "output": "450"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], endTime = [5,4,8,10,9,11,13,14,16,17,18,19,20,21,22], profit = [100,200,150,300,250,200,400,350,300,250,200,150,100,50,100]",
        "output": "750"
      },
      {
        "input": "startTime = [1, 100, 200, 300, 400, 500, 600, 700, 800, 900], endTime = [900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800], profit = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "100"
      },
      {
        "input": "startTime = [1, 5, 8, 10, 13, 16, 18, 20, 22, 25, 27, 29], endTime = [4, 9, 11, 12, 15, 17, 19, 21, 24, 26, 28, 30], profit = [100, 150, 100, 50, 200, 100, 150, 50, 100, 200, 50, 150]",
        "output": "1300"
      },
      {
        "input": "startTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], endTime = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], profit = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "4500"
      },
      {
        "input": "startTime = [1,3,5,7,9,11,13,15,17,19], endTime = [2,8,6,10,12,14,18,20,22,24], profit = [10,30,20,40,50,70,60,80,90,100]",
        "output": "250"
      },
      {
        "input": "startTime = [1, 3, 4, 5, 6, 8, 9], endTime = [2, 5, 7, 7, 9, 10, 11], profit = [10, 20, 40, 10, 30, 50, 20]",
        "output": "100"
      },
      {
        "input": "startTime = [3,5,9,15,21,27,33,39,45,51,57,63,69,75,81], endTime = [6,12,18,24,30,36,42,48,54,60,66,72,78,84,90], profit = [50,100,150,200,250,300,350,400,450,500,550,600,650,700,750]",
        "output": "3200"
      },
      {
        "input": "startTime = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16], endTime = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], profit = [20, 25, 20, 30, 35, 40, 35, 45, 50, 55, 50, 60, 65, 70, 65, 75, 80, 85, 90, 95]",
        "output": "275"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10], endTime = [11,12,13,14,15,16,17,18,19,20], profit = [10,20,30,40,50,60,70,80,90,100]",
        "output": "100"
      },
      {
        "input": "startTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], endTime = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], profit = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80]",
        "output": "250"
      },
      {
        "input": "startTime = [1000000000,900000000,800000000,700000000,600000000], endTime = [1000000001,900000001,800000001,700000001,600000001], profit = [100,200,300,400,500]",
        "output": "1500"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], endTime = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51], profit = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000]",
        "output": "Error: list index out of range"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], endTime = [3,5,5,7,7,9,9,11,11,13,13,15,15,17,17,19,19,21,21,23], profit = [10,20,10,20,10,20,10,20,10,20,10,20,10,20,10,20,10,20,10,20]",
        "output": "110"
      },
      {
        "input": "startTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], endTime = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], profit = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "50"
      },
      {
        "input": "startTime = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288], endTime = [2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576], profit = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,13000,14000,15000,16000,17000,18000,19000,20000]",
        "output": "210000"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], endTime = [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23], profit = [50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000]",
        "output": "3850"
      },
      {
        "input": "startTime = [1,1,1,1,1,1,1,1,1,1], endTime = [2,3,4,5,6,7,8,9,10,11], profit = [10,20,30,40,50,60,70,80,90,100]",
        "output": "100"
      },
      {
        "input": "startTime = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], endTime = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], profit = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "100"
      },
      {
        "input": "startTime = [1, 5, 7, 8, 9, 10, 12, 15, 16, 19], endTime = [5, 8, 9, 10, 12, 15, 16, 20, 21, 25], profit = [100, 80, 40, 60, 70, 50, 30, 90, 20, 150]",
        "output": "440"
      },
      {
        "input": "startTime = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], endTime = [2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12], profit = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "1010"
      },
      {
        "input": "startTime = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], endTime = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], profit = [20, 40, 30, 60, 50, 80, 70, 100, 90, 120, 110, 140, 130, 160, 150, 180, 170, 200, 190, 220, 210, 240, 230]",
        "output": "750"
      },
      {
        "input": "startTime = [1,2,2,4,6,7,9,10], endTime = [3,3,5,8,7,10,12,15], profit = [50,20,30,40,60,70,80,90]",
        "output": "270"
      },
      {
        "input": "startTime = [3,12,8,4,9,15,18,20,25,30], endTime = [7,16,13,5,11,20,22,23,32,31], profit = [100,150,90,60,120,200,80,40,180,160]",
        "output": "640"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], endTime = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], profit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "465"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], endTime = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], profit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "165"
      },
      {
        "input": "startTime = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18], endTime = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21], profit = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "300"
      },
      {
        "input": "startTime = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], endTime = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], profit = [500, 300, 700, 100, 400, 800, 200, 600, 900, 1000]",
        "output": "5500"
      },
      {
        "input": "startTime = [1,10,20,30,40,50,60,70,80,90,100], endTime = [5,15,25,35,45,55,65,75,85,95,105], profit = [10,50,20,60,30,70,40,80,50,90,60]",
        "output": "560"
      },
      {
        "input": "startTime = [1, 2, 3, 5, 8, 13, 21], endTime = [5, 4, 6, 8, 10, 15, 25], profit = [20, 20, 10, 40, 20, 30, 50]",
        "output": "160"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10], endTime = [10,11,12,13,14,15,16,17,18,19], profit = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "1100"
      },
      {
        "input": "startTime = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], endTime = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], profit = [1000,900,800,700,600,500,400,300,200,100,10,20,30,40,50,60,70,80,90,100]",
        "output": "6050"
      },
      {
        "input": "startTime = [5,7,9,11,13,15,17,19,21,23], endTime = [6,8,10,12,14,16,18,20,22,24], profit = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "5500"
      },
      {
        "input": "startTime = [1,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900], endTime = [2,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000], profit = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000]",
        "output": "21000"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], endTime = [3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79], profit = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "Error: list index out of range"
      },
      {
        "input": "startTime = [1,1,1,1,1,1,1,1,1,1], endTime = [10,20,30,40,50,60,70,80,90,100], profit = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "startTime = [3,15,5,10,20,25], endTime = [10,20,10,15,25,30], profit = [50,70,30,60,100,40]",
        "output": "320"
      },
      {
        "input": "startTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], endTime = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51], profit = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "1275"
      },
      {
        "input": "startTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], endTime = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], profit = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "100"
      },
      {
        "input": "startTime = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], endTime = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], profit = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000]",
        "output": "77000"
      },
      {
        "input": "startTime = [1, 2, 3, 5, 7, 9, 10, 12, 15, 18, 20], endTime = [5, 6, 8, 10, 12, 14, 17, 20, 22, 25, 27], profit = [100, 50, 70, 60, 80, 90, 120, 150, 200, 180, 220]",
        "output": "550"
      },
      {
        "input": "startTime = [10,20,30,40,50,60,70,80,90,100], endTime = [15,25,35,45,55,65,75,85,95,105], profit = [50,100,150,200,250,300,350,400,450,500]",
        "output": "2750"
      },
      {
        "input": "startTime = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], endTime = [9, 14, 19, 24, 29, 34, 39, 44, 49, 54], profit = [100, 150, 200, 250, 300, 350, 400, 450, 500, 550]",
        "output": "3250"
      }
    ]
  },
  {
    "id": 683,
    "difficulty": "Hard",
    "tags": [
      "Binary Indexed Tree",
      "Segment Tree",
      "Queue",
      "Array",
      "Ordered Set",
      "Sliding Window",
      "Monotonic Queue",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You have n bulbs in a row numbered from 1 to n. Initially, all the bulbs are turned off. We turn on exactly one bulb every day until all bulbs are on after n days.\nYou are given an array bulbs\u00a0of length n\u00a0where bulbs[i] = x means that on the (i+1)th day, we will turn on the bulb at position x\u00a0where\u00a0i\u00a0is\u00a00-indexed\u00a0and\u00a0x\u00a0is\u00a01-indexed.\nGiven an integer k, return\u00a0the minimum day number such that there exists two turned on bulbs that have exactly\u00a0k bulbs between them that are all turned off. If there isn't such day, return -1.\n\u00a0\nExample 1:\n\nInput: bulbs = [1,3,2], k = 1\nOutput: 2\nExplanation:\nOn the first day: bulbs[0] = 1, first bulb is turned on: [1,0,0]\nOn the second day: bulbs[1] = 3, third bulb is turned on: [1,0,1]\nOn the third day: bulbs[2] = 2, second bulb is turned on: [1,1,1]\nWe return 2 because on the second day, there were two on bulbs with one off bulb between them.\nExample 2:\n\nInput: bulbs = [1,2,3], k = 1\nOutput: -1\n\n\u00a0\nConstraints:\n\nn == bulbs.length\n1 <= n <= 2 * 104\n1 <= bulbs[i] <= n\nbulbs\u00a0is a permutation of numbers from\u00a01\u00a0to\u00a0n.\n0 <= k <= 2 * 104\n\n",
    "starterCode": "class Solution:\n    def kEmptySlots(self, bulbs: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "bulbs = [1,2,4,3,5,6,7], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,4,3,2], k = 1",
        "output": "3"
      },
      {
        "input": "bulbs = [6,5,8,9,7,1,4,3,2,10], k = 2",
        "output": "7"
      },
      {
        "input": "bulbs = [6,5,8,9,7,1,4,2,3,10], k = 2",
        "output": "7"
      },
      {
        "input": "bulbs = [3,9,2,8,1,6,10,5,4,7], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [2,1,3], k = 1",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,3,5,7,2,6,4,8,10,9], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [6,5,8,9,7,1,10,2,3,4], k = 2",
        "output": "8"
      },
      {
        "input": "bulbs = [1,2,3], k = 1",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,2,3,4,5,6,7,8,9,10], k = 0",
        "output": "2"
      },
      {
        "input": "bulbs = [1,3,5,7,9,2,4,6,8,10], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [3,9,2,8,1,6,10,5,4,7], k = 1",
        "output": "6"
      },
      {
        "input": "bulbs = [1,3,2], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [10,9,8,7,6,5,4,3,2,1], k = 0",
        "output": "2"
      },
      {
        "input": "bulbs = [2,1,3,5,4], k = 1",
        "output": "4"
      },
      {
        "input": "bulbs = [1,6,2,5,3,4,7,8,9,10], k = 2",
        "output": "4"
      },
      {
        "input": "bulbs = [20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], k = 5",
        "output": "15"
      },
      {
        "input": "bulbs = [2,4,6,8,10,12,14,16,18,1,3,5,7,9,11,13,15,17,19,20], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 0",
        "output": "2"
      },
      {
        "input": "bulbs = [5,3,1,2,4], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [8,6,9,7,10,3,5,1,4,2], k = 4",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,3,5,7,9,11,13,15,17,19,2,4,6,8,10,12,14,16,18,20], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [15,1,13,11,14,10,9,6,12,8,7,4,5,3,2], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [3,5,4,1,2,6,8,7], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [1,3,5,7,9,2,4,6,8,10], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [1,4,3,5,2], k = 1",
        "output": "3"
      },
      {
        "input": "bulbs = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 1",
        "output": "-1"
      },
      {
        "input": "bulbs = [7,8,4,3,6,5,2,1,9,10], k = 2",
        "output": "3"
      },
      {
        "input": "bulbs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [3,1,5,4,2], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2], k = 1",
        "output": "15"
      },
      {
        "input": "bulbs = [3,1,5,2,7,4,9,6,11,8,13,10,15,12,17,14,19,16,20,2], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [15,1,2,3,4,5,6,7,8,9,10,11,12,13,14], k = 10",
        "output": "5"
      },
      {
        "input": "bulbs = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 0",
        "output": "2"
      },
      {
        "input": "bulbs = [1,2,4,3,6,5,8,7,10,9], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [15,12,10,14,7,6,13,8,9,11,4,2,3,1,5], k = 4",
        "output": "-1"
      },
      {
        "input": "bulbs = [20,18,16,14,12,10,8,6,4,2,1,3,5,7,9,11,13,15,17,19], k = 9",
        "output": "-1"
      },
      {
        "input": "bulbs = [3,1,2,6,5,4,10,9,8,7], k = 2",
        "output": "4"
      },
      {
        "input": "bulbs = [1,6,2,5,4,3], k = 2",
        "output": "4"
      },
      {
        "input": "bulbs = [11,10,9,8,7,6,5,4,3,2,1], k = 0",
        "output": "2"
      },
      {
        "input": "bulbs = [1, 4, 7, 10, 13, 16, 19, 2, 5, 8, 11, 14, 17, 20, 3, 6, 9, 12, 15, 18], k = 6",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,10,5,3,8,6,7,2,9,4], k = 2",
        "output": "5"
      },
      {
        "input": "bulbs = [7,3,5,1,9,4,8,2,6,10], k = 3",
        "output": "2"
      },
      {
        "input": "bulbs = [3,1,2,5,4,8,7,10,9,6], k = 2",
        "output": "6"
      },
      {
        "input": "bulbs = [3,1,2,5,4,6,8,7,10,9], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [12,1,14,10,15,13,3,2,9,11,5,7,8,4,6], k = 3",
        "output": "11"
      },
      {
        "input": "bulbs = [4,3,2,5,1,7,6,8,9,10], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [5,1,4,3,2], k = 1",
        "output": "4"
      },
      {
        "input": "bulbs = [6,10,1,3,8,5,2,7,9,4], k = 2",
        "output": "4"
      },
      {
        "input": "bulbs = [5,3,8,6,2,7,4,1,10,9], k = 2",
        "output": "3"
      },
      {
        "input": "bulbs = [3,1,2,5,4,6,8,7,9,11,10,12,14,13,15], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [1,10,9,8,7,6,5,4,3,2], k = 4",
        "output": "6"
      },
      {
        "input": "bulbs = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 5",
        "output": "-1"
      },
      {
        "input": "bulbs = [8,1,4,3,7,10,9,2,6,5], k = 2",
        "output": "3"
      },
      {
        "input": "bulbs = [1,6,3,4,7,2,5,8,9,10], k = 2",
        "output": "3"
      },
      {
        "input": "bulbs = [7,5,6,8,1,3,4,2,10,9], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [3, 1, 2, 5, 6, 4, 7, 10, 8, 9], k = 2",
        "output": "8"
      },
      {
        "input": "bulbs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 9",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,4,6,2,7,5,3,8,10,9], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [10,5,1,9,4,2,8,7,3,6], k = 4",
        "output": "2"
      },
      {
        "input": "bulbs = [5,1,2,4,3,6], k = 1",
        "output": "4"
      },
      {
        "input": "bulbs = [2,3,5,4,1,6,7,8,10,9], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [16,14,2,1,3,5,15,6,7,9,4,8,10,12,13,11], k = 5",
        "output": "-1"
      },
      {
        "input": "bulbs = [7,5,3,1,9,11,13,15,2,4,6,8,10,12,14,16], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,14,13,12,11,10,9,8,7,6,5,4,3,2,15], k = 5",
        "output": "9"
      },
      {
        "input": "bulbs = [1,4,2,3,6,5,8,7,10,9], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 5",
        "output": "-1"
      },
      {
        "input": "bulbs = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 5",
        "output": "-1"
      },
      {
        "input": "bulbs = [3,9,2,8,1,6,10,5,4,7], k = 2",
        "output": "6"
      },
      {
        "input": "bulbs = [2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15,18,17,20,19], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [3,1,9,7,5,4,8,6,10,2], k = 4",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,2,4,3,6,5,8,7,10,9,12,11,14,13,16,15,18,17,20,19], k = 1",
        "output": "3"
      },
      {
        "input": "bulbs = [5,4,3,2,1,6,7,8,9,10], k = 4",
        "output": "-1"
      },
      {
        "input": "bulbs = [12,11,10,9,8,7,6,5,4,3,2,1], k = 0",
        "output": "2"
      },
      {
        "input": "bulbs = [1,3,5,7,9,11,13,15,14,12,10,8,6,4,2], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [1, 3, 5, 7, 9, 11, 13, 2, 4, 6, 8, 10, 12], k = 4",
        "output": "-1"
      },
      {
        "input": "bulbs = [5,2,1,3,4], k = 0",
        "output": "3"
      },
      {
        "input": "bulbs = [6,2,3,4,5,1], k = 4",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,4,2,3,6,5], k = 1",
        "output": "3"
      },
      {
        "input": "bulbs = [2,6,1,7,3,5,4,8], k = 2",
        "output": "5"
      },
      {
        "input": "bulbs = [1,5,9,4,6,2,8,3,7,10], k = 3",
        "output": "2"
      },
      {
        "input": "bulbs = [1,10,2,9,3,8,4,7,5,6], k = 4",
        "output": "6"
      },
      {
        "input": "bulbs = [5,4,3,2,1], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [5,4,3,2,1,6,7,8,9,10], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,3,5,7,9,11,2,4,6,8,10], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 0",
        "output": "2"
      },
      {
        "input": "bulbs = [6,2,5,1,3,4], k = 2",
        "output": "3"
      },
      {
        "input": "bulbs = [7,4,6,8,2,1,3,5], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10",
        "output": "-1"
      },
      {
        "input": "bulbs = [4,3,1,5,2], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,5,4,3,2,10,9,8,7,6], k = 4",
        "output": "6"
      },
      {
        "input": "bulbs = [2,1,4,3,6,5], k = 2",
        "output": "-1"
      },
      {
        "input": "bulbs = [5, 3, 1, 2, 4, 6, 8, 7, 9, 10], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [3,5,4,1,6,2], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [1,6,2,7,3,8,4,9,5,10], k = 4",
        "output": "2"
      },
      {
        "input": "bulbs = [8,7,6,5,4,3,2,1], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [10,1,2,3,4,5,6,7,8,9], k = 2",
        "output": "8"
      },
      {
        "input": "bulbs = [14,4,13,2,6,3,10,1,7,5,12,9,11,8], k = 4",
        "output": "-1"
      },
      {
        "input": "bulbs = [3,9,2,8,1,6,5,4,7,10], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [1,5,3,4,2,8,7,6,10,9,13,12,11,15,14,18,17,16,20,19], k = 2",
        "output": "6"
      },
      {
        "input": "bulbs = [3,1,5,4,2], k = 1",
        "output": "2"
      },
      {
        "input": "bulbs = [4,5,6,1,7,3,2,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 4",
        "output": "-1"
      },
      {
        "input": "bulbs = [1, 5, 3, 7, 9, 2, 4, 6, 8, 10], k = 3",
        "output": "2"
      },
      {
        "input": "bulbs = [12,1,13,2,14,3,15,4,5,6,7,8,9,10,11], k = 4",
        "output": "11"
      },
      {
        "input": "bulbs = [16,20,23,11,12,24,2,13,10,17,5,9,25,3,7,18,19,1,14,15,6,4,8,21,22], k = 5",
        "output": "-1"
      },
      {
        "input": "bulbs = [5,4,3,2,1], k = 0",
        "output": "2"
      },
      {
        "input": "bulbs = [20,1,19,2,18,3,17,4,16,5,15,6,14,7,13,8,12,9,11,10], k = 6",
        "output": "14"
      },
      {
        "input": "bulbs = [15,8,2,11,4,13,7,6,3,1,5,12,10,9,14], k = 5",
        "output": "3"
      },
      {
        "input": "bulbs = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 3",
        "output": "-1"
      },
      {
        "input": "bulbs = [2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15,18,17,20,19], k = 1",
        "output": "3"
      },
      {
        "input": "bulbs = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 8",
        "output": "-1"
      },
      {
        "input": "bulbs = [15,1,14,10,4,2,11,5,3,8,6,7,13,12,9], k = 5",
        "output": "5"
      }
    ]
  },
  {
    "id": 770,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Recursion",
      "Hash Table",
      "Math",
      "String"
    ],
    "problemDescription": "Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"]\n\nAn expression alternates chunks and symbols, with a space separating each chunk and symbol.\nA chunk is either an expression in parentheses, a variable, or a non-negative integer.\nA variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like \"2x\" or \"-x\".\n\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\n\nFor example, expression = \"1 + 2 * 3\" has an answer of [\"7\"].\n\nThe format of the output is as follows:\n\nFor each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\n\t\nFor example, we would never write a term like \"b*a*c\", only \"a*b*c\".\n\n\nTerms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n\t\nFor example, \"a*a*b*c\" has degree 4.\n\n\nThe leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.\nAn example of a well-formatted answer is [\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"].\nTerms (including constant terms) with coefficient 0 are not included.\n\t\nFor example, an expression of \"0\" has an output of [].\n\n\n\nNote: You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\n\u00a0\nExample 1:\n\nInput: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\nOutput: [\"-1*a\",\"14\"]\n\nExample 2:\n\nInput: expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]\nOutput: [\"-1*pressure\",\"5\"]\n\nExample 3:\n\nInput: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\nOutput: [\"1*e*e\",\"-64\"]\n\n\u00a0\nConstraints:\n\n1 <= expression.length <= 250\nexpression consists of lowercase English letters, digits, '+', '-', '*', '(', ')', ' '.\nexpression does not contain any leading or trailing spaces.\nAll the tokens in expression are separated by a single space.\n0 <= evalvars.length <= 100\n1 <= evalvars[i].length <= 20\nevalvars[i] consists of lowercase English letters.\nevalints.length == evalvars.length\n-100 <= evalints[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def basicCalculatorIV(self, expression: str, evalvars: List[str], evalints: List[int]) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "expression = \"1 + (2 * 3) + (4 * (5 + 6))\", evalvars = [], evalints = []",
        "output": "['51']"
      },
      {
        "input": "expression = \"10 + 20 * (30 + 40) - 50\", evalvars = [], evalints = []",
        "output": "['1360']"
      },
      {
        "input": "expression = \"(x + y) * (x - y) + (x + z) * (x - z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['-11']"
      },
      {
        "input": "expression = \"a + b * c - d / e + f\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], evalints = [1, 2, 3, 4, 5, 6]",
        "output": "['7']"
      },
      {
        "input": "expression = \"a * (b + c) * (d + e)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\"], evalints = [1, 2, 3, 4, 5]",
        "output": "['45']"
      },
      {
        "input": "expression = \"(x + y) * (x - y) + (x + y) * (x + y)\", evalvars = [\"x\", \"y\"], evalints = [1, 2]",
        "output": "['6']"
      },
      {
        "input": "expression = \"x + y * 2\", evalvars = [\"x\"], evalints = [3]",
        "output": "['2*y', '3']"
      },
      {
        "input": "expression = \"a + b + c + d + e\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, 2, 3]",
        "output": "['1*d', '1*e', '6']"
      },
      {
        "input": "expression = \"a + b * c - d / e\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\"], evalints = [1, 2, 3, 4, 2]",
        "output": "['7']"
      },
      {
        "input": "expression = \"3 * (a + b) - 2 * (a - b)\", evalvars = [\"a\"], evalints = [2]",
        "output": "['5*b', '2']"
      },
      {
        "input": "expression = \"x + y * 2 - (x - y)\", evalvars = [\"x\", \"y\"], evalints = [1, 2]",
        "output": "['6']"
      },
      {
        "input": "expression = \"(a * b) * (c * d)\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 2, 3, 4]",
        "output": "['24']"
      },
      {
        "input": "expression = \"10 + 2 * 6\", evalvars = [], evalints = []",
        "output": "['22']"
      },
      {
        "input": "expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]",
        "output": "['-1*pressure', '5']"
      },
      {
        "input": "expression = \"(x + y) * (x - y) + (x + z) * (x - z)\", evalvars = [], evalints = []",
        "output": "['2*x*x', '-1*y*y', '-1*z*z']"
      },
      {
        "input": "expression = \"100 * ( 2 + 12 )\", evalvars = [], evalints = []",
        "output": "['1400']"
      },
      {
        "input": "expression = \"100 * ( 2 + 12 ) / 14\", evalvars = [], evalints = []",
        "output": "['100']"
      },
      {
        "input": "expression = \"x * y + y * x\", evalvars = [\"x\", \"y\"], evalints = [1, 2]",
        "output": "['4']"
      },
      {
        "input": "expression = \"x * y + z\", evalvars = [\"x\", \"y\"], evalints = [2, 3]",
        "output": "['1*z', '6']"
      },
      {
        "input": "expression = \"(x + y) * (x - y) + z\", evalvars = [\"x\", \"y\", \"z\"], evalints = [3, 4, 5]",
        "output": "['-2']"
      },
      {
        "input": "expression = \"(a + b) * (a - b)\", evalvars = [\"a\", \"b\"], evalints = [3, 2]",
        "output": "['5']"
      },
      {
        "input": "expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]",
        "output": "['-1*a', '14']"
      },
      {
        "input": "expression = \"x * x + 2 * x + 1\", evalvars = [\"x\"], evalints = [1]",
        "output": "['4']"
      },
      {
        "input": "expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []",
        "output": "['1*e*e', '-64']"
      },
      {
        "input": "expression = \"x * (y + z) + w\", evalvars = [\"x\", \"y\", \"z\"], evalints = [2, 3, 4]",
        "output": "['1*w', '14']"
      },
      {
        "input": "expression = \"x + y * (2 + 3) - z\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['8']"
      },
      {
        "input": "expression = \"(a + b) * (a - b)\", evalvars = [\"a\", \"b\"], evalints = [3, 4]",
        "output": "['-7']"
      },
      {
        "input": "expression = \"x + 2 * (y + z)\", evalvars = [\"x\"], evalints = [1]",
        "output": "['2*y', '2*z', '1']"
      },
      {
        "input": "expression = \"(a + b) * (a - b)\", evalvars = [], evalints = []",
        "output": "['1*a*a', '-1*b*b']"
      },
      {
        "input": "expression = \"x * x + y * y + z * z\", evalvars = [], evalints = []",
        "output": "['1*x*x', '1*y*y', '1*z*z']"
      },
      {
        "input": "expression = \"(a + b) + (c + d)\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 2, 3, 4]",
        "output": "['10']"
      },
      {
        "input": "expression = \"(x + y) * (x + y)\", evalvars = [], evalints = []",
        "output": "['1*x*x', '2*x*y', '1*y*y']"
      },
      {
        "input": "expression = \"(x + y) * (x + y)\", evalvars = [\"x\", \"y\"], evalints = [1, 2]",
        "output": "['9']"
      },
      {
        "input": "expression = \"a + b * c + d\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 2, 3, 4]",
        "output": "['11']"
      },
      {
        "input": "expression = \"10 * (x + y) + 5\", evalvars = [\"x\", \"y\"], evalints = [1, 1]",
        "output": "['25']"
      },
      {
        "input": "expression = \"100 * 2 + 12\", evalvars = [], evalints = []",
        "output": "['212']"
      },
      {
        "input": "expression = \"(x + y + z) * (x - y + z) * (x + y - z) * (x - y - z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "[]"
      },
      {
        "input": "expression = \"(a + b) * (c + d + e) * (f + g + h) + (i + j) * (k + l + m) * (n + o + p)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "['31536']"
      },
      {
        "input": "expression = \"(x + y + z) * (x + y + z) * (x + y + z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['216']"
      },
      {
        "input": "expression = \"(x + 2*y + 3*z) * (4*x + 5*y + 6*z) - (7*x + 8*y + 9*z) * (10*x + 11*y + 12*z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, -1, 2]",
        "output": "['-336']"
      },
      {
        "input": "expression = \"((x + 2*y) * (z + 3)) + ((4*x - 5*y) * (z - 6))\", evalvars = [\"x\", \"y\", \"z\"], evalints = [2, 3, 4]",
        "output": "['70']"
      },
      {
        "input": "expression = \"(x + 2 * y + 3 * z + 4 * w) * (x - 2 * y - 3 * z - 4 * w) * (x + 5 * y + 6 * z + 7 * w) + 40\", evalvars = [\"x\", \"y\", \"z\", \"w\"], evalints = [1, 1, 1, 1]",
        "output": "['-1480']"
      },
      {
        "input": "expression = \"(x^2 + 2*x + 1) * (x^2 - 2*x + 1)\", evalvars = [\"x\"], evalints = [2]",
        "output": "['1*x^2*x^2', '2*x^2', '-15']"
      },
      {
        "input": "expression = \"((a + b) * (c - d) + e) * f\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], evalints = [1, 2, 3, 4, 5, 6]",
        "output": "['12']"
      },
      {
        "input": "expression = \"(a + b + c + d) * (a + b + c - d) * (a + b - c + d) * (a + b - c - d) * (a - b + c + d) * (a - b + c - d) * (a - b - c + d) * (a - b - c - d)\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 1, 1, 1]",
        "output": "[]"
      },
      {
        "input": "expression = \"(a + b) * (c + d) * (e + f) + (g + h) * (i + j) * (k + l)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], evalints = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "['16']"
      },
      {
        "input": "expression = \"(1 + x) * (1 - x) * (1 + x * x) + (1 - x * x) * (1 - x * x) * (1 + x * x * x) + 7\", evalvars = [\"x\"], evalints = [0]",
        "output": "['9']"
      },
      {
        "input": "expression = \"(2 * x + 3 * y) * (4 * z + 5) - (6 * w + 7 * v) * (8 * u + 9)\", evalvars = [\"x\", \"y\", \"z\", \"w\", \"v\", \"u\"], evalints = [1, -1, 2, -2, 3, -3]",
        "output": "['122']"
      },
      {
        "input": "expression = \"(a + 2 * b) * (3 * c + 4 * d) - (a - b) * (c - 2 * d)\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 2, 3, 4]",
        "output": "['120']"
      },
      {
        "input": "expression = \"(a + b + c) * (a - b - c)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, 2, 3]",
        "output": "['-24']"
      },
      {
        "input": "expression = \"(a + b + c) * (d + e + f)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], evalints = [1, 2, 3, 4, 5, 6]",
        "output": "['90']"
      },
      {
        "input": "expression = \"((a + b) * (c + d) + (e + f) * (g + h)) * ((i + j) * (k + l) + (m + n) * (o + p))\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "['236964']"
      },
      {
        "input": "expression = \"(a + b) * (c + d) + (e + f) * (g + h)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "['186']"
      },
      {
        "input": "expression = \"((x + y) * (z + w)) * ((x - y) * (z - w))\", evalvars = [\"x\", \"y\", \"z\", \"w\"], evalints = [1, -1, 2, -2]",
        "output": "[]"
      },
      {
        "input": "expression = \"10 * (x + 2 * y + 3 * z) - 5 * (x - 2 * y + 3 * z) + 2 * (x + 2 * y - 3 * z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['102']"
      },
      {
        "input": "expression = \"(x + 2*y + 3*z) * (4*x + 5*y + 6*z) - (7*x + 8*y + 9*z) * (10*x + 11*y + 12*z) + (13*x + 14*y + 15*z) * (16*x + 17*y + 18*z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 1, 1]",
        "output": "['1440']"
      },
      {
        "input": "expression = \"(x + 2*y) * (3*z + 4*w) - (5*v + 6*u) * (7*t + 8*s)\", evalvars = [\"x\", \"y\", \"z\", \"w\", \"v\", \"u\", \"t\", \"s\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "['-6768']"
      },
      {
        "input": "expression = \"(a + b + c + d) * (e + f + g + h)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "['260']"
      },
      {
        "input": "expression = \"(2*x + 3*y + 4*z) * (5*x + 6*y + 7*z) + (8*x + 9*y + 10*z) * (11*x + 12*y + 13*z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 1, 1]",
        "output": "['1134']"
      },
      {
        "input": "expression = \"(a + b + c + d + e) * (a + b + c + d + e) * (a + b + c + d + e)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\"], evalints = [1, 2, 3, 4, 5]",
        "output": "['3375']"
      },
      {
        "input": "expression = \"((x + y + z) * (x - y + z)) * ((x + y - z) * (x - y - z))\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "[]"
      },
      {
        "input": "expression = \"(a + b + c) * (d + e + f) * (g + h + i)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], evalints = [1, -1, 2, -2, 3, -3, 4, -4, 5]",
        "output": "['-20']"
      },
      {
        "input": "expression = \"(a + b) * (a - b) + (a + c) * (a - c) + (b + c) * (b - c)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, 1, 1]",
        "output": "[]"
      },
      {
        "input": "expression = \"((x + y) * (z + w) + (v + u) * (t + s)) * (r + q + p)\", evalvars = [\"x\", \"y\", \"z\", \"w\", \"v\", \"u\", \"t\", \"s\", \"r\", \"q\", \"p\"], evalints = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "['24']"
      },
      {
        "input": "expression = \"(x + 2 * y + 3 * z) * (x - 2 * y - 3 * z) * (x + 4 * y + 5 * z) + 30\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 1, 1]",
        "output": "['-210']"
      },
      {
        "input": "expression = \"(a + b) * (c + d) * (e + f)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], evalints = [1, 2, 3, 4, 5, 6]",
        "output": "['231']"
      },
      {
        "input": "expression = \"(x + 3) * (x - 3) * (x + 2) * (x - 2) + 10\", evalvars = [\"x\"], evalints = [0]",
        "output": "['46']"
      },
      {
        "input": "expression = \"(x * y * z * w) + (x * y + z * w) + (x + y) * (z + w) + (x + y) * (z + w) * (x * y + z * w)\", evalvars = [\"x\", \"y\", \"z\", \"w\"], evalints = [1, 1, 1, 1]",
        "output": "['15']"
      },
      {
        "input": "expression = \"(a + b + c) * (d + e + f) + (a - b - c) * (d - e - f)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], evalints = [1, 2, 3, 4, 5, 6]",
        "output": "['118']"
      },
      {
        "input": "expression = \"((a + b) * (c + d)) + ((a - b) * (c - d))\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 2, 3, 4]",
        "output": "['22']"
      },
      {
        "input": "expression = \"((x + y) * (z + w) + (v + u) * (t + s)) * ((r + q) * (p + o) + (n + m) * (l + k))\", evalvars = [\"x\", \"y\", \"z\", \"w\", \"v\", \"u\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\"], evalints = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "['64']"
      },
      {
        "input": "expression = \"(a + b + c) * (d + e + f) + (g + h + i) * (j + k + l)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "['882']"
      },
      {
        "input": "expression = \"(a + 2*b) * (3*a - 4*b) + (5*a + 6*b) * (7*a - 8*b)\", evalvars = [\"a\", \"b\"], evalints = [1, 1]",
        "output": "['-14']"
      },
      {
        "input": "expression = \"(x + y + z) * (x + y + z) - (x + y) * (x + y)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['27']"
      },
      {
        "input": "expression = \"(x + y + z) * (x - y - z) + (x + y - z) * (x - y + z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['-24']"
      },
      {
        "input": "expression = \"((x + y) * (x - y)) + ((x + z) * (x - z))\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['-11']"
      },
      {
        "input": "expression = \"100 * (x + 2*y) - 50 * (x - 3*y)\", evalvars = [\"x\", \"y\"], evalints = [2, 3]",
        "output": "['1150']"
      },
      {
        "input": "expression = \"(x + y + z) * (x + y - z) * (x - y + z) * (x - y - z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "[]"
      },
      {
        "input": "expression = \"(a + b) * (c + d) + (a - b) * (c - d)\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 2, 3, 4]",
        "output": "['22']"
      },
      {
        "input": "expression = \"(x + y) * (x - y) * (x + y) + (x - y) * (x - y) * (x + y)\", evalvars = [\"x\", \"y\"], evalints = [1, 2]",
        "output": "['-6']"
      },
      {
        "input": "expression = \"x * (y + z) * (y - z) + x * (y + w) * (y - w)\", evalvars = [\"x\", \"y\", \"z\", \"w\"], evalints = [1, 2, 3, 4]",
        "output": "['-17']"
      },
      {
        "input": "expression = \"(e + 8) * (e - 8) + (e + 2) * (e - 2) - (e + 1) * (e - 1)\", evalvars = [\"e\"], evalints = [1]",
        "output": "['-66']"
      },
      {
        "input": "expression = \"(a * b * c + d * e * f) * (g + h + i)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "['3024']"
      },
      {
        "input": "expression = \"(a + b + c) * (a - b - c) * (a + b - c)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, -1, 2]",
        "output": "[]"
      },
      {
        "input": "expression = \"(a * b + c) * (d - e) + f * (g + h)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "['85']"
      },
      {
        "input": "expression = \"(a * b * c * d) + (a * b * c * e) + (a * b * d * e) + (a * c * d * e) + (b * c * d * e)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\"], evalints = [1, 2, 3, 4, 5]",
        "output": "['274']"
      },
      {
        "input": "expression = \"(x + 2*y + 3*z) * (x - y + z) + 2 * (x + y + z) * (x - y + z) + 3 * (x + y) * (x - y + z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 1, 1]",
        "output": "['18']"
      },
      {
        "input": "expression = \"(x + 2 * y + 3 * z) * (x - 2 * y + 3 * z) - (x + 2 * y - 3 * z) * (x - 2 * y - 3 * z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['36']"
      },
      {
        "input": "expression = \"(a + 2*b + 3*c) * (4*d + 5*e + 6*f) + (7*g + 8*h + 9*i) * (10*j + 11*k + 12*l)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "['71888']"
      },
      {
        "input": "expression = \"(a + 2*b) * (3*c + 4*d) + (5*e + 6*f) * (7*g + 8*h)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], evalints = [1, -1, 2, -2, 3, -3, 4, -4]",
        "output": "['14']"
      },
      {
        "input": "expression = \"(x + y + z + w) * (x + y + z + w) * (x + y + z + w) * (x + y + z + w)\", evalvars = [\"x\", \"y\", \"z\", \"w\"], evalints = [1, 1, 1, 1]",
        "output": "['256']"
      },
      {
        "input": "expression = \"(a + b) * (a - b) + (b + c) * (b - c)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, 2, 3]",
        "output": "['-8']"
      },
      {
        "input": "expression = \"(x * y + z) * (w * v + u) - (t * s + r) * (q * p + o)\", evalvars = [\"x\", \"y\", \"z\", \"w\", \"v\", \"u\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "['-7800']"
      },
      {
        "input": "expression = \"x * (y + z) - y * (x + z) + z * (x + y)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 1, 1]",
        "output": "['2']"
      },
      {
        "input": "expression = \"10 * (a + 5 * (b + c)) - 3 * (a - b)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, 2, 3]",
        "output": "['263']"
      },
      {
        "input": "expression = \"(x + y + z) * (x - y - z) + (x + 2 * y + 3 * z) * (x - 2 * y - 3 * z) + 15\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 1, 1]",
        "output": "['-12']"
      },
      {
        "input": "expression = \"3 * (a * b + b * c + c * a) - 2 * (a * a + b * b + c * c) + (a + b + c) * (a + b + c)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, 1, 1]",
        "output": "['12']"
      },
      {
        "input": "expression = \"2 * (x + 3 * (y + 4)) - 5 * (x - y)\", evalvars = [\"x\", \"y\"], evalints = [1, 2]",
        "output": "['43']"
      },
      {
        "input": "expression = \"(a + b + c) * (a - b + c) * (a + b - c) * (a - b - c) + (d + e + f) * (d - e + f) * (d + e - f) * (d - e - f)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], evalints = [1, 2, 3, 4, 5, 6]",
        "output": "['-1575']"
      },
      {
        "input": "expression = \"(a + b) * (a - b) - (a * a - b * b) + (c + d) * (c - d)\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 2, 3, 4]",
        "output": "['-7']"
      },
      {
        "input": "expression = \"(a + b) * (c + d) - (e + f) * (g + h)\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "['-144']"
      },
      {
        "input": "expression = \"(a + b + c + d) * (a - b + c - d) - (a - b - c + d) * (a + b - c - d) + 25\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 1, 1, 1]",
        "output": "['25']"
      },
      {
        "input": "expression = \"(a + 3*b) * (c + 5*d) + (2*a - 4*b) * (6*c + 8*d) - (3*a + 6*b) * (9*c + 12*d)\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 1, 1, 1]",
        "output": "['-193']"
      },
      {
        "input": "expression = \"(a + b + c + d + e) * (a - b + c - d + e) - (a - b - c + d - e) * (a + b - c - d - e) + 35\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\"], evalints = [1, 1, 1, 1, 1]",
        "output": "['39']"
      },
      {
        "input": "expression = \"(a + b) * (a + b) * (a + b) + (c + d) * (c + d) * (c + d)\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 1, 1, 1]",
        "output": "['16']"
      },
      {
        "input": "expression = \"(x - 2*y) * (3*z - 4) + (5*x + 6*y) * (7*z - 8)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['206']"
      },
      {
        "input": "expression = \"(a + b + c + d) * (a - b + c - d) * (a + b - c - d) * (a - b - c + d)\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, 2, 3, 4]",
        "output": "[]"
      },
      {
        "input": "expression = \"(x + 2*y + 3*z) * (4*x + 5*y + 6*z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['448']"
      },
      {
        "input": "expression = \"((x + y) * (x - y)) * ((x + z) * (x - z))\", evalvars = [\"x\", \"y\", \"z\"], evalints = [2, 3, 4]",
        "output": "['60']"
      },
      {
        "input": "expression = \"3 * (x + 2 * y + 3 * z) - 2 * (x - y + z) + 4 * (x - 2 * y + 3 * z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['62']"
      },
      {
        "input": "expression = \"(x + y + z) * (x + y + z) * (x + y + z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 1, 1]",
        "output": "['27']"
      },
      {
        "input": "expression = \"((x + y) * (x - y) + (y + z) * (y - z) + (z + x) * (z - x)) * 2\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 1, 1]",
        "output": "[]"
      },
      {
        "input": "expression = \"(a + b) * (a - b) * (c + d) * (c - d)\", evalvars = [\"a\", \"b\", \"c\", \"d\"], evalints = [1, -1, 2, -2]",
        "output": "[]"
      },
      {
        "input": "expression = \"(a + b + c) * (a + b + c) * (a + b + c) - 3 * (a + b) * (a + b) * (a + b) + 3 * (a + b) * (a + b) * (a + b) - (a + b) * (a + b) * (a + b)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, 1, 1]",
        "output": "['19']"
      },
      {
        "input": "expression = \"(x + 2*y + 3*z) * (4*x + 5*y + 6*z) - (7*x + 8*y + 9*z) * (10*x + 11*y + 12*z)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [1, 2, 3]",
        "output": "['-2952']"
      },
      {
        "input": "expression = \"(a + b) * (a + b) * (a + b) + (a + c) * (a + c) * (a + c) + (b + c) * (b + c) * (b + c)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, 2, 3]",
        "output": "['216']"
      },
      {
        "input": "expression = \"10 * (x + 2 * y) - 5 * (x - 3 * y)\", evalvars = [\"x\", \"y\"], evalints = [1, 2]",
        "output": "['75']"
      },
      {
        "input": "expression = \"(a + b) * (a - b) + (a + b) * (a + b) - (a - b) * (a - b)\", evalvars = [\"a\", \"b\"], evalints = [1, 2]",
        "output": "['5']"
      },
      {
        "input": "expression = \"(2*a + 3*b + 4*c) * (5*a + 6*b + 7*c) - (8*a + 9*b + 10*c) * (11*a + 12*b + 13*c)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, -1, 2]",
        "output": "['-384']"
      },
      {
        "input": "expression = \"(x + 3) * (x - 3) * (x + 3)\", evalvars = [\"x\"], evalints = [2]",
        "output": "['-25']"
      },
      {
        "input": "expression = \"((x + y) * (x - y)) * ((x + z) * (x - z)) + (x * x)\", evalvars = [\"x\", \"y\", \"z\"], evalints = [2, 3, 4]",
        "output": "['64']"
      },
      {
        "input": "expression = \"(x + y + z + w) * (x - y - z - w) + (x + y - z + w) * (x - y + z - w)\", evalvars = [\"x\", \"y\", \"z\", \"w\"], evalints = [1, 2, 3, 4]",
        "output": "['-88']"
      },
      {
        "input": "expression = \"(a + b) * (a - b) + (b + c) * (b - c) + (c + a) * (c - a)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, 1, 1]",
        "output": "[]"
      },
      {
        "input": "expression = \"(a + 2*b + 3*c) * (a - b + c) + 2 * (a + b + c) * (a - b + c)\", evalvars = [\"a\", \"b\", \"c\"], evalints = [1, 1, 1]",
        "output": "['12']"
      },
      {
        "input": "expression = \"(x + 3) * (x - 3) * (x + 5) + 2 * (x + 1) * (x - 1)\", evalvars = [\"x\"], evalints = [2]",
        "output": "['-29']"
      },
      {
        "input": "expression = \"(a + b + c) * (d + e + f) - (g + h + i) * (j + k + l) + 20\", evalvars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], evalints = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "['-682']"
      }
    ]
  },
  {
    "id": 305,
    "difficulty": "Hard",
    "tags": [
      "Union Find",
      "Array",
      "Hash Table"
    ],
    "problemDescription": "You are given an empty 2D binary grid grid of size m x n. The grid represents a map where 0's represent water and 1's represent land. Initially, all the cells of grid are water cells (i.e., all the cells are 0's).\nWe may perform an add land operation which turns the water at position into a land. You are given an array positions where positions[i] = [ri, ci] is the position (ri, ci) at which we should operate the ith operation.\nReturn an array of integers answer where answer[i] is the number of islands after turning the cell (ri, ci) into a land.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\u00a0\nExample 1:\n\n\nInput: m = 3, n = 3, positions = [[0,0],[0,1],[1,2],[2,1]]\nOutput: [1,1,2,3]\nExplanation:\nInitially, the 2d grid is filled with water.\n- Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land. We have 1 island.\n- Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land. We still have 1 island.\n- Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land. We have 2 islands.\n- Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land. We have 3 islands.\n\nExample 2:\n\nInput: m = 1, n = 1, positions = [[0,0]]\nOutput: [1]\n\n\u00a0\nConstraints:\n\n1 <= m, n, positions.length <= 104\n1 <= m * n <= 104\npositions[i].length == 2\n0 <= ri < m\n0 <= ci < n\n\n\u00a0\nFollow up: Could you solve it in time complexity O(k log(mn)), where k == positions.length?\n",
    "starterCode": "class Solution:\n    def numIslands2(self, m: int, n: int, positions: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "m = 5, n = 5, positions = [[0,0],[4,4],[2,2],[3,3],[1,1]]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "m = 4, n = 4, positions = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3]]",
        "output": "[1, 1, 1, 1, 2, 2, 2, 2]"
      },
      {
        "input": "m = 5, n = 4, positions = [[0,0],[4,3],[3,3],[3,2],[2,1],[1,0],[2,0],[3,0],[4,0],[0,3]]",
        "output": "[1, 2, 2, 2, 3, 3, 2, 2, 2, 3]"
      },
      {
        "input": "m = 3, n = 3, positions = [[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 2, n = 2, positions = [[0,0],[1,1],[0,1],[1,0]]",
        "output": "[1, 2, 1, 1]"
      },
      {
        "input": "m = 4, n = 5, positions = [[0,0],[0,1],[1,1],[1,0],[2,2],[2,1],[2,0],[3,3]]",
        "output": "[1, 1, 1, 1, 2, 1, 1, 2]"
      },
      {
        "input": "m = 3, n = 3, positions = [[0,0],[0,1],[1,0],[1,1]]",
        "output": "[1, 1, 1, 1]"
      },
      {
        "input": "m = 3, n = 3, positions = [[0,0],[0,1],[1,0],[2,2]]",
        "output": "[1, 1, 1, 2]"
      },
      {
        "input": "m = 5, n = 5, positions = [[0,0],[4,4],[2,2],[0,4],[4,0],[2,1],[2,3],[3,2],[1,2]]",
        "output": "[1, 2, 3, 4, 5, 5, 5, 5, 5]"
      },
      {
        "input": "m = 4, n = 4, positions = [[0,0],[1,1],[2,2],[3,3]]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "m = 1, n = 1, positions = [[0,0]]",
        "output": "[1]"
      },
      {
        "input": "m = 4, n = 4, positions = [[0,0],[1,1],[2,2],[3,3],[0,1],[1,0],[2,1],[1,2]]",
        "output": "[1, 2, 3, 4, 3, 3, 2, 2]"
      },
      {
        "input": "m = 3, n = 3, positions = [[0,0],[0,1],[1,2],[2,1]]",
        "output": "[1, 1, 2, 3]"
      },
      {
        "input": "m = 2, n = 2, positions = [[0,0],[0,1],[1,0],[1,1]]",
        "output": "[1, 1, 1, 1]"
      },
      {
        "input": "m = 4, n = 5, positions = [[0,0],[0,1],[1,2],[2,1],[2,2],[3,3]]",
        "output": "[1, 1, 2, 3, 2, 3]"
      },
      {
        "input": "m = 8, n = 8, positions = [[3,3],[3,4],[3,5],[4,3],[4,5],[5,3],[5,4],[5,5],[2,2],[2,3],[2,4],[4,2],[4,4],[6,6]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2]"
      },
      {
        "input": "m = 10, n = 5, positions = [[0,0],[0,1],[0,2],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[0,3],[1,3],[2,3],[3,3],[4,3],[5,3],[6,3],[7,3],[8,3],[9,3],[0,4],[1,4],[2,4],[3,4],[4,4],[5,4],[6,4],[7,4],[8,4],[9,4],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 10, n = 10, positions = [[0,0],[9,9],[0,9],[9,0],[4,4],[5,5],[3,3],[5,4],[4,5],[6,6],[3,6],[6,3],[7,7],[2,2],[7,2],[2,7],[8,8],[1,1],[8,1],[1,8],[0,8],[8,0],[1,0],[0,1],[5,3],[3,5],[2,4],[4,2],[6,5],[5,6],[3,4],[4,3],[7,5],[5,7],[2,6],[6,2],[7,4],[4,7],[3,7],[7,3],[4,6],[6,4],[5,2],[2,5],[8,6],[6,8],[7,6],[6,7],[8,7],[7,8],[9,8],[8,9],[9,7],[7,9]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 16, 15, 14, 14, 13, 12, 13, 14, 13, 13, 11, 10, 10, 10, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 8, 7, 6, 6, 5, 5, 5, 5]"
      },
      {
        "input": "m = 5, n = 5, positions = [[0,0],[0,4],[4,0],[4,4],[2,2],[1,1],[1,3],[3,1],[3,3],[2,0],[2,1],[2,3],[2,4],[1,2],[3,2],[0,2],[0,3],[4,2],[4,3],[2,0],[2,1],[2,2],[2,3],[2,4]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 7, 5, 5, 5, 5, 5, 4, 4, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "m = 8, n = 8, positions = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[0,7],[7,0],[0,6],[6,1],[1,6],[6,0],[1,0],[0,1],[6,7],[7,6],[2,7],[7,2],[2,0],[0,2],[7,5],[5,7],[3,0],[0,3],[7,3],[3,7],[4,0],[0,4],[7,4],[4,7],[5,0],[0,5],[7,5],[5,7],[3,6],[6,3],[3,2],[2,3]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 10, 9, 9, 8, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 7, 6, 6, 6, 6, 6, 5, 5]"
      },
      {
        "input": "m = 5, n = 5, positions = [[0,0],[0,1],[1,1],[2,1],[2,2],[2,0],[1,0],[0,2],[3,0],[3,1],[3,2],[3,3],[4,3],[4,2],[4,1],[4,0],[3,4],[2,4],[1,4],[0,4]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 8, n = 8, positions = [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3],[4,4],[4,5],[4,6],[5,4],[5,5],[5,6],[6,4],[6,5],[6,6],[7,7]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3]"
      },
      {
        "input": "m = 10, n = 10, positions = [[0,0],[0,9],[9,0],[9,9],[1,1],[1,8],[8,1],[8,8],[4,4],[5,5],[6,6],[3,3],[2,2],[7,7]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "m = 6, n = 6, positions = [[1,1],[2,2],[3,3],[4,4],[5,5],[0,0],[1,0],[0,1],[5,0],[0,5],[5,4],[4,5]]",
        "output": "[1, 2, 3, 4, 5, 6, 5, 5, 6, 7, 6, 6]"
      },
      {
        "input": "m = 7, n = 7, positions = [[3,3],[2,2],[3,2],[4,2],[3,1],[3,4],[2,1],[2,3],[2,4],[4,1],[4,3],[4,4]]",
        "output": "[1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 10, n = 10, positions = [[5,5],[5,6],[5,4],[6,5],[4,5],[6,6],[4,6],[4,4],[6,4]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 10, n = 10, positions = [[0,0],[9,9],[4,4],[5,5],[6,6],[7,7],[8,8],[1,1],[2,2],[3,3],[4,5],[5,6],[6,7],[7,8],[8,9],[1,0],[2,1],[3,2],[4,3],[5,4],[6,5],[7,6],[8,7],[9,8],[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[0,3],[1,4],[2,5],[3,6],[4,7],[5,8],[6,9],[0,4],[1,5],[2,6],[3,7],[4,8],[5,9],[0,5],[1,6],[2,7],[3,8],[4,9],[0,6],[1,7],[2,8],[3,9],[0,7],[1,8],[2,9],[0,8],[1,9],[0,9]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 9, n = 9, positions = [[1,1],[1,2],[1,3],[2,1],[2,3],[3,1],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5],[6,6],[6,5],[7,7]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 2, 3]"
      },
      {
        "input": "m = 7, n = 7, positions = [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3],[1,0],[1,4],[2,0],[2,4],[3,0],[3,4],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[1,5],[1,6],[2,5],[2,6],[3,5],[3,6],[4,0],[4,1],[4,2],[4,3],[4,4],[4,5],[4,6],[5,0],[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[6,0],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 5, n = 6, positions = [[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2],[3,3],[3,4],[4,4],[4,5],[3,5],[2,5]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "m = 8, n = 8, positions = [[3,3],[3,4],[4,3],[4,4],[2,2],[2,3],[2,4],[3,2],[4,2],[5,2],[5,3],[5,4]]",
        "output": "[1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 6, n = 6, positions = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5]]",
        "output": "[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]"
      },
      {
        "input": "m = 7, n = 7, positions = [[3,3],[2,2],[4,4],[5,5],[1,1],[6,6],[0,0],[6,0],[0,6],[3,4],[4,3],[2,1],[1,2],[5,6],[6,5]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 8, 7, 7, 6, 6]"
      },
      {
        "input": "m = 12, n = 12, positions = [[5,5],[4,4],[6,6],[3,3],[7,7],[2,2],[8,8],[1,1],[9,9],[0,0],[10,10],[11,11],[5,6],[6,5],[5,4],[4,5],[5,3],[3,5],[5,7],[7,5],[5,2],[2,5],[5,8],[8,5]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "m = 6, n = 5, positions = [[0,0],[0,1],[0,2],[0,3],[0,4],[1,0],[1,1],[1,2],[1,3],[1,4],[2,0],[2,1],[2,2],[2,3],[2,4]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 7, n = 7, positions = [[3,3],[3,4],[3,2],[2,3],[2,4],[2,2],[4,3],[4,4],[4,2],[3,5],[3,1],[2,5],[2,1],[4,5],[4,1],[5,3],[5,4],[5,2],[1,3],[1,4],[1,2],[6,3],[6,4],[6,2],[0,3],[0,4],[0,2]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 6, n = 6, positions = [[0,0],[0,1],[0,2],[1,1],[1,2],[2,1],[2,2],[3,3],[3,4],[3,5],[4,3],[4,4],[4,5],[5,3],[5,4],[5,5]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "m = 8, n = 8, positions = [[3,3],[3,4],[3,5],[4,3],[4,4],[4,5],[5,3],[5,4],[5,5],[2,2],[2,3],[2,4],[3,2],[4,2],[5,2],[2,5],[3,6],[4,6],[5,6]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 5, n = 5, positions = [[0,0],[0,1],[0,2],[1,1],[1,2],[2,1],[2,2],[3,3],[3,4],[4,3],[4,4]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2]"
      },
      {
        "input": "m = 10, n = 10, positions = [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 10, n = 10, positions = [[0,0],[0,1],[1,0],[1,1],[1,2],[2,1],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[9,8],[8,9],[7,8],[8,7],[6,8],[7,6],[8,6],[6,7]]",
        "output": "[1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 7, 7, 6, 6, 6, 5, 5, 5]"
      },
      {
        "input": "m = 6, n = 6, positions = [[1,1],[2,2],[3,3],[4,4],[5,5],[0,0],[1,0],[1,2],[2,1],[2,3],[3,2],[3,4],[4,3],[4,5],[5,4],[5,0],[1,5],[0,1],[5,1],[0,5]]",
        "output": "[1, 2, 3, 4, 5, 6, 5, 4, 4, 3, 3, 2, 2, 1, 1, 2, 3, 3, 3, 3]"
      },
      {
        "input": "m = 8, n = 8, positions = [[0,0],[7,7],[3,3],[4,4],[2,2],[5,5],[6,6],[1,1],[0,7],[7,0],[3,4],[4,3],[2,1],[1,2],[5,6],[6,5],[3,5],[4,6]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 9, 8, 8, 7, 7, 7, 7]"
      },
      {
        "input": "m = 7, n = 7, positions = [[0,0],[0,1],[1,0],[1,1],[0,2],[2,0],[2,2],[1,2],[3,3],[3,4],[4,3],[4,4],[5,5],[6,6],[6,5],[5,6]]",
        "output": "[1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 4, 3, 3]"
      },
      {
        "input": "m = 6, n = 6, positions = [[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4]"
      },
      {
        "input": "m = 10, n = 10, positions = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5]]",
        "output": "[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]"
      },
      {
        "input": "m = 8, n = 8, positions = [[0,0],[0,1],[0,2],[0,3],[1,3],[1,2],[1,1],[1,0],[2,0],[2,1],[2,2],[2,3],[3,0],[3,1],[3,2],[3,3],[4,4],[4,5],[4,6],[4,7],[5,4],[5,5],[5,6],[5,7],[6,4],[6,5],[6,6],[6,7],[7,4],[7,5],[7,6],[7,7]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "m = 15, n = 15, positions = [[7,7],[6,6],[8,8],[5,5],[9,9],[4,4],[10,10],[3,3],[11,11],[2,2],[12,12],[1,1],[13,13],[0,0],[14,14],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0],[0,1],[8,7],[7,8],[9,8],[8,9],[10,9],[9,10],[11,10],[10,11],[12,11],[11,12],[13,12],[12,13],[14,12],[13,14]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 12, 11, 10, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 2, 1]"
      },
      {
        "input": "m = 15, n = 15, positions = [[7,7],[6,6],[8,8],[5,5],[9,9],[4,4],[10,10],[3,3],[11,11],[2,2],[12,12],[1,1],[13,13],[0,0],[14,14],[7,6],[7,8],[6,7],[8,7],[7,5],[7,9],[6,6],[8,6],[6,8],[8,8],[7,4],[7,10],[6,5],[6,9],[8,5],[8,9],[7,3],[7,11],[6,4],[6,10],[8,4],[8,10],[7,2],[7,12],[6,3],[6,11],[8,3],[8,11],[7,1],[7,13],[6,2],[6,12],[8,2],[8,12],[7,0],[7,14],[6,1],[6,13],[8,1],[8,13],[9,6],[9,8],[5,6],[5,8],[10,6],[10,8],[4,6],[4,8],[11,6],[11,8],[3,6],[3,8],[12,6],[12,8],[2,6],[2,8],[13,6],[13,8],[1,6],[1,8],[0,6],[0,8],[9,5],[9,7],[9,9],[5,5],[5,7],[5,9],[10,5],[10,7],[10,9],[4,5],[4,7],[4,9],[11,5],[11,7],[11,9],[3,5],[3,7],[3,9],[12,5],[12,7],[12,9],[2,5],[2,7],[2,9],[13,5],[13,7],[13,9],[1,5],[1,7],[1,9],[0,5],[0,7],[0,9]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "m = 6, n = 6, positions = [[0,0],[0,1],[1,0],[1,1],[0,2],[1,2],[2,0],[2,1],[2,2]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 5, n = 5, positions = [[0,0],[0,1],[0,2],[0,3],[0,4],[1,0],[1,1],[1,2],[1,3],[1,4],[2,0],[2,1],[2,2],[2,3],[2,4],[3,0],[3,1],[3,2],[3,3],[3,4],[4,0],[4,1],[4,2],[4,3],[4,4],[2,2],[3,2],[1,2],[0,2],[4,2]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 7, n = 7, positions = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5],[6,6],[6,5]]",
        "output": "[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 3]"
      },
      {
        "input": "m = 7, n = 3, positions = [[0,0],[1,0],[2,0],[0,1],[1,1],[2,1],[0,2],[1,2],[2,2],[1,0],[1,1],[1,2]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 8, n = 2, positions = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 5, n = 5, positions = [[0,0],[0,1],[0,2],[1,1],[2,0],[2,2],[1,2],[1,0],[0,3],[4,4],[3,3],[3,4],[4,3]]",
        "output": "[1, 1, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 2]"
      },
      {
        "input": "m = 9, n = 9, positions = [[4,4],[4,5],[5,4],[5,5],[3,3],[3,4],[3,5],[4,3],[4,6],[5,3],[5,6],[6,3],[6,4],[6,5],[2,2],[2,3],[2,4],[2,5],[3,2],[3,6],[4,2],[4,7],[5,2],[5,7],[6,2],[6,7],[7,2],[7,3],[7,4],[7,5],[8,3],[8,4],[8,5]]",
        "output": "[1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 8, n = 8, positions = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5],[6,6],[6,7],[7,6],[7,7],[1,2],[1,3],[2,1],[2,3],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2],[6,1],[6,2]]",
        "output": "[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "m = 4, n = 7, positions = [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[1,0],[2,0],[3,0],[1,6],[2,6],[3,6],[1,3],[2,3],[3,3]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 10, n = 10, positions = [[0,0],[0,1],[0,2],[0,3],[1,0],[1,3],[2,0],[2,3],[3,0],[3,3],[4,4],[4,5],[5,4],[5,5],[6,6],[6,5],[7,7],[7,8],[8,7],[8,8],[9,9]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 2, 3, 3, 3, 3, 4]"
      },
      {
        "input": "m = 6, n = 6, positions = [[0,0],[0,1],[1,1],[1,0],[2,2],[2,3],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5]]",
        "output": "[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]"
      },
      {
        "input": "m = 5, n = 5, positions = [[0,0],[0,1],[0,2],[0,3],[0,4],[1,4],[2,4],[3,4],[4,4],[4,3],[4,2],[4,1],[4,0],[3,0],[2,0],[1,0],[2,1],[2,2],[2,3],[3,2]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 10, n = 10, positions = [[5,5],[4,4],[6,6],[5,4],[4,5],[5,6],[6,5],[5,3],[4,4],[6,6],[7,7],[8,8],[9,9],[0,0],[1,1],[2,2],[3,3]]",
        "output": "[1, 2, 3, 2, 2, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "m = 7, n = 7, positions = [[3,3],[2,2],[4,4],[1,1],[5,5],[0,0],[6,6],[2,3],[4,3],[3,2],[3,4],[1,2],[5,4],[3,5],[1,3],[5,3],[3,1],[3,6],[1,4],[5,2]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 6, 5, 5, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "m = 6, n = 6, positions = [[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2],[0,3],[1,3],[2,3]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 6, n = 6, positions = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 4, n = 3, positions = [[0,0],[0,1],[0,2],[1,0],[1,1],[1,2],[2,0],[2,1],[2,2],[3,0],[3,1],[3,2]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 8, n = 8, positions = [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5],[6,6],[6,5],[7,7],[7,6],[0,0],[0,7],[7,0],[7,7]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 2, 3, 2, 3, 4, 5, 5]"
      },
      {
        "input": "m = 5, n = 5, positions = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3],[4,4],[0,4],[4,0],[1,3],[3,1],[2,4],[4,2],[2,0],[0,2],[4,3],[3,0],[3,4],[1,4],[4,1],[0,3],[1,2],[2,1],[3,2],[2,3],[1,1],[0,1],[4,4],[4,0],[3,3]]",
        "output": "[1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 4, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 7, n = 7, positions = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3],[4,4],[4,5],[5,4],[5,5],[6,6],[6,5],[3,4],[3,5],[2,4],[2,5],[1,2],[1,3]]",
        "output": "[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 3, 2, 2, 2, 2, 1, 1]"
      },
      {
        "input": "m = 10, n = 10, positions = [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[1,0],[1,9],[2,0],[2,9],[3,0],[3,9],[4,0],[4,9],[5,0],[5,9],[6,0],[6,9],[7,0],[7,9],[8,0],[8,9],[9,0],[9,9]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 5, n = 5, positions = [[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[2,4],[3,2],[3,3],[3,4],[4,2],[4,3],[4,4]]",
        "output": "[1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "m = 6, n = 6, positions = [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[2,0],[2,1],[2,2],[2,3],[2,4],[2,5],[3,0],[3,1],[3,2],[3,3],[3,4],[3,5],[4,0],[4,1],[4,2],[4,3],[4,4],[4,5],[5,0],[5,1],[5,2],[5,3],[5,4],[5,5]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 10, n = 10, positions = [[5,5],[4,4],[6,6],[3,3],[7,7],[2,2],[8,8],[1,1],[9,9],[0,0],[5,6],[6,5],[5,4],[4,5],[5,3],[3,5],[5,7],[7,5]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 9, 8, 8, 8, 8, 8, 8]"
      },
      {
        "input": "m = 5, n = 6, positions = [[0,0],[0,1],[0,2],[1,1],[1,2],[1,3],[2,0],[2,1],[2,2],[2,3],[3,0],[3,1],[4,1],[4,2],[4,3]]",
        "output": "[1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 6, n = 6, positions = [[0,0],[0,1],[1,0],[1,1],[2,2],[3,3],[4,4],[5,5],[0,5],[5,0]]",
        "output": "[1, 1, 1, 1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "m = 7, n = 7, positions = [[3,3],[3,4],[4,3],[4,4],[2,2],[2,3],[2,4],[3,2],[3,5],[4,2],[4,5],[5,2],[5,3],[5,4],[1,1],[1,2],[1,3],[1,4],[1,5],[2,1],[2,5],[3,1],[3,6],[4,1],[4,6],[5,1],[5,5],[5,6],[6,1],[6,2],[6,3],[6,4],[6,5]]",
        "output": "[1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 3, n = 4, positions = [[0,0],[0,1],[0,2],[0,3],[1,0],[1,1],[1,2],[1,3],[2,0],[2,1],[2,2],[2,3]]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 10, n = 10, positions = [[5,5],[4,4],[4,5],[4,6],[5,4],[5,6],[6,4],[6,5],[6,6],[7,7],[8,8],[9,9],[0,0],[1,1],[2,2],[3,3],[1,0],[2,0],[3,0],[4,0]]",
        "output": "[1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 7, 7, 7, 7]"
      },
      {
        "input": "m = 7, n = 7, positions = [[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[5,4],[4,5],[3,6],[6,3],[2,5],[5,2],[1,6],[6,1],[0,6],[6,0]]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 6, 6, 7, 8, 9, 10, 11, 12, 12, 12]"
      },
      {
        "input": "m = 6, n = 6, positions = [[2,2],[2,3],[3,2],[3,3],[1,1],[1,2],[1,3],[2,1],[3,1],[4,2],[4,3],[4,4],[5,3],[5,4]]",
        "output": "[1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "m = 8, n = 8, positions = [[0,0],[0,1],[1,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[7,6],[6,7],[0,7],[7,0],[0,6],[6,0]]",
        "output": "[1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 6, 6, 7, 8, 8, 8]"
      }
    ]
  },
  {
    "id": 3213,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "String",
      "Dynamic Programming",
      "Suffix Array"
    ],
    "problemDescription": "You are given a string target, an array of strings words, and an integer array costs, both arrays of the same length.\nImagine an empty string s.\nYou can perform the following operation any number of times (including zero):\n\nChoose an index i in the range [0, words.length - 1].\nAppend words[i] to s.\nThe cost of operation is costs[i].\n\nReturn the minimum cost to make s equal to target. If it's not possible, return -1.\n\u00a0\nExample 1:\n\nInput: target = \"abcdef\", words = [\"abdef\",\"abc\",\"d\",\"def\",\"ef\"], costs = [100,1,1,10,5]\nOutput: 7\nExplanation:\nThe minimum cost can be achieved by performing the following operations:\n\nSelect index 1 and append \"abc\" to s at a cost of 1, resulting in s = \"abc\".\nSelect index 2 and append \"d\" to s at a cost of 1, resulting in s = \"abcd\".\nSelect index 4 and append \"ef\" to s at a cost of 5, resulting in s = \"abcdef\".\n\n\nExample 2:\n\nInput: target = \"aaaa\", words = [\"z\",\"zz\",\"zzz\"], costs = [1,10,100]\nOutput: -1\nExplanation:\nIt is impossible to make s equal to target, so we return -1.\n\n\u00a0\nConstraints:\n\n1 <= target.length <= 5 * 104\n1 <= words.length == costs.length <= 5 * 104\n1 <= words[i].length <= target.length\nThe total sum of words[i].length is less than or equal to 5 * 104.\ntarget and words[i] consist only of lowercase English letters.\n1 <= costs[i] <= 104\n\n",
    "starterCode": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "target = \"xyz\", words = [\"x\",\"y\",\"z\"], costs = [1,2,3]",
        "output": "6"
      },
      {
        "input": "target = \"abcd\", words = [\"a\",\"b\",\"c\",\"d\"], costs = [1,1,1,1]",
        "output": "4"
      },
      {
        "input": "target = \"zzzz\", words = [\"zz\",\"zzzz\"], costs = [2,1]",
        "output": "1"
      },
      {
        "input": "target = \"programming\", words = [\"pro\",\"gram\",\"ming\"], costs = [10,20,30]",
        "output": "60"
      },
      {
        "input": "target = \"python\", words = [\"py\",\"th\",\"on\"], costs = [5,7,8]",
        "output": "20"
      },
      {
        "input": "target = \"abacaba\", words = [\"a\",\"b\",\"c\"], costs = [1,2,3]",
        "output": "11"
      },
      {
        "input": "target = \"hello\", words = [\"he\",\"ll\",\"o\"], costs = [3,5,2]",
        "output": "10"
      },
      {
        "input": "target = \"abcabc\", words = [\"abc\",\"ab\",\"c\"], costs = [5,3,2]",
        "output": "10"
      },
      {
        "input": "target = \"abc\", words = [\"a\",\"b\",\"c\"], costs = [1,2,3]",
        "output": "6"
      },
      {
        "input": "target = \"hello\", words = [\"h\",\"he\",\"hel\",\"hell\",\"hello\"], costs = [5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "target = \"xyz\", words = [\"xy\",\"y\",\"z\"], costs = [5,3,2]",
        "output": "7"
      },
      {
        "input": "target = \"aabbcc\", words = [\"aa\",\"bb\",\"cc\"], costs = [1,1,1]",
        "output": "3"
      },
      {
        "input": "target = \"abcabcabc\", words = [\"abc\",\"bc\",\"c\"], costs = [3,2,1]",
        "output": "9"
      },
      {
        "input": "target = \"abcde\", words = [\"a\",\"bc\",\"de\"], costs = [2,3,4]",
        "output": "9"
      },
      {
        "input": "target = \"abcabc\", words = [\"abc\",\"ab\",\"c\"], costs = [3,2,1]",
        "output": "6"
      },
      {
        "input": "target = \"zzzzz\", words = [\"z\",\"zz\",\"zzz\"], costs = [1,1,1]",
        "output": "2"
      },
      {
        "input": "target = \"xyz\", words = [\"xy\",\"yz\",\"x\"], costs = [2,3,1]",
        "output": "4"
      },
      {
        "input": "target = \"aaaa\", words = [\"z\",\"zz\",\"zzz\"], costs = [1,10,100]",
        "output": "-1"
      },
      {
        "input": "target = \"world\", words = [\"w\",\"o\",\"r\",\"l\",\"d\"], costs = [2,3,4,5,6]",
        "output": "20"
      },
      {
        "input": "target = \"aabbcc\", words = [\"aa\",\"bb\",\"cc\"], costs = [3,4,5]",
        "output": "12"
      },
      {
        "input": "target = \"abcdef\", words = [\"abdef\",\"abc\",\"d\",\"def\",\"ef\"], costs = [100,1,1,10,5]",
        "output": "7"
      },
      {
        "input": "target = \"ababab\", words = [\"ab\",\"aba\",\"bab\"], costs = [3,4,5]",
        "output": "9"
      },
      {
        "input": "target = \"testcase\", words = [\"tes\",\"t\",\"case\"], costs = [10,2,5]",
        "output": "17"
      },
      {
        "input": "target = \"abcde\", words = [\"a\",\"bc\",\"de\"], costs = [1,2,3]",
        "output": "6"
      },
      {
        "input": "target = \"abcdefgabcdefg\", words = [\"abc\",\"def\",\"g\",\"abcde\",\"fg\"], costs = [6,7,1,5,3]",
        "output": "16"
      },
      {
        "input": "target = \"aaaabbbbcccc\", words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"b\",\"bb\",\"bbb\",\"bbbb\",\"c\",\"cc\",\"ccc\",\"cccc\"], costs = [1,2,3,4,1,2,3,4,1,2,3,4]",
        "output": "12"
      },
      {
        "input": "target = \"xyxxyxyxyx\", words = [\"xy\",\"yx\",\"xxy\",\"xyx\"], costs = [1,2,3,4]",
        "output": "9"
      },
      {
        "input": "target = \"zzzzzzzzzz\", words = [\"z\",\"zz\",\"zzz\",\"zzzz\",\"zzzzz\"], costs = [1,3,5,7,9]",
        "output": "10"
      },
      {
        "input": "target = \"mnopqr\", words = [\"mno\",\"pqr\",\"mnop\",\"qr\",\"qrs\"], costs = [5,6,3,8,2]",
        "output": "11"
      },
      {
        "input": "target = \"xyzxyzxyz\", words = [\"xyz\", \"xy\", \"xz\", \"yz\"], costs = [10, 5, 6, 7]",
        "output": "30"
      },
      {
        "input": "target = \"aaaabbbbccccdddd\", words = [\"aaa\",\"bbb\",\"ccc\",\"ddd\",\"abcd\"], costs = [10,15,20,25,30]",
        "output": "-1"
      },
      {
        "input": "target = \"zzzzzzzzzzzzzzzzzzzz\", words = [\"zz\",\"zzz\",\"zzzz\",\"zzzzz\",\"zzzzzz\"], costs = [1,2,3,4,5]",
        "output": "10"
      },
      {
        "input": "target = \"hellohello\", words = [\"he\",\"ll\",\"o\",\"hello\"], costs = [3,2,1,5]",
        "output": "10"
      },
      {
        "input": "target = \"zzzzzzzzzz\", words = [\"z\", \"zz\", \"zzz\", \"zzzz\"], costs = [1, 3, 6, 10]",
        "output": "10"
      },
      {
        "input": "target = \"helloworld\", words = [\"he\",\"ll\",\"lo\",\"wor\",\"orl\",\"ld\"], costs = [1,2,3,4,5,6]",
        "output": "-1"
      },
      {
        "input": "target = \"zzzzzzzzzzzz\", words = [\"zz\",\"zzz\",\"z\"], costs = [4,2,7]",
        "output": "8"
      },
      {
        "input": "target = \"abcabcabcabc\", words = [\"abc\",\"cab\",\"bca\"], costs = [10,20,30]",
        "output": "40"
      },
      {
        "input": "target = \"abcdabcdabcd\", words = [\"abcd\",\"ab\",\"cd\",\"abc\"], costs = [10,5,3,8]",
        "output": "24"
      },
      {
        "input": "target = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", words = [\"aabb\",\"ccdd\",\"eef\",\"gghh\",\"iijj\",\"kkl\",\"mnoon\",\"popp\",\"qqr\",\"rss\",\"ttu\",\"vvww\",\"xxy\",\"yzz\"], costs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "-1"
      },
      {
        "input": "target = \"abcdefghi\", words = [\"abc\", \"def\", \"ghi\", \"abcd\", \"efgh\", \"hij\", \"abcd\"], costs = [10, 20, 30, 15, 25, 35, 5]",
        "output": "60"
      },
      {
        "input": "target = \"aabbaabbccddcc\", words = [\"aa\",\"bb\",\"cc\",\"dd\"], costs = [1,2,3,4]",
        "output": "16"
      },
      {
        "input": "target = \"xyxyxyxyxyxy\", words = [\"xy\",\"yx\",\"xxyy\"], costs = [10,5,20]",
        "output": "60"
      },
      {
        "input": "target = \"zzzzzzzzzzzz\", words = [\"zzz\",\"zzzz\",\"zz\",\"z\"], costs = [15,10,8,5]",
        "output": "30"
      },
      {
        "input": "target = \"mississippi\", words = [\"mis\",\"issi\",\"ppi\",\"ippi\",\"pi\"], costs = [10,12,5,8,3]",
        "output": "-1"
      },
      {
        "input": "target = \"abcdefghijklmnop\", words = [\"abcdefghijklmno\",\"p\",\"abcdefghijk\",\"lmnop\"], costs = [100,1,50,50]",
        "output": "100"
      },
      {
        "input": "target = \"aaaaaaaaaa\", words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\"], costs = [1,2,3,4,5]",
        "output": "10"
      },
      {
        "input": "target = \"xyzxyzxyz\", words = [\"xy\",\"z\",\"xyz\"], costs = [5,1,3]",
        "output": "9"
      },
      {
        "input": "target = \"alibaba\", words = [\"ali\",\"ba\",\"ba\",\"b\",\"a\"], costs = [5,10,20,1,2]",
        "output": "11"
      },
      {
        "input": "target = \"abracadabra\", words = [\"a\",\"b\",\"r\",\"ac\",\"ad\",\"abra\"], costs = [1,2,3,4,5,6]",
        "output": "21"
      },
      {
        "input": "target = \"bbaaccdd\", words = [\"bb\",\"aa\",\"cc\",\"dd\",\"abcd\"], costs = [5,6,7,8,9]",
        "output": "26"
      },
      {
        "input": "target = \"xylophone\", words = [\"xy\",\"lo\",\"phone\",\"pho\",\"ne\",\"on\"], costs = [3,1,2,5,4,6]",
        "output": "6"
      },
      {
        "input": "target = \"abcabcabcabc\", words = [\"abc\",\"ab\",\"bc\",\"a\",\"b\",\"c\"], costs = [5,2,3,1,1,1]",
        "output": "12"
      },
      {
        "input": "target = \"abcdabcdabcd\", words = [\"ab\",\"bc\",\"cd\",\"abcd\"], costs = [1,2,3,4]",
        "output": "12"
      },
      {
        "input": "target = \"aaaaaaaaaa\", words = [\"a\",\"aa\",\"aaa\",\"aaaa\"], costs = [5,3,2,1]",
        "output": "5"
      },
      {
        "input": "target = \"abcdefghijk\", words = [\"abc\",\"def\",\"gh\",\"ijk\"], costs = [10,20,30,40]",
        "output": "100"
      },
      {
        "input": "target = \"abracadabra\", words = [\"abr\",\"aca\",\"dab\",\"ra\"], costs = [10,20,30,5]",
        "output": "65"
      },
      {
        "input": "target = \"abcdefghij\", words = [\"ab\",\"cde\",\"fgh\",\"ij\"], costs = [2,3,4,1]",
        "output": "10"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyz\", words = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], costs = [10,20,30,40,50,60,70,80,90]",
        "output": "450"
      },
      {
        "input": "target = \"xyzabc\", words = [\"xy\",\"zabc\",\"xyz\",\"ab\",\"c\"], costs = [5,10,3,7,2]",
        "output": "12"
      },
      {
        "input": "target = \"aabbccddeeff\", words = [\"aabb\", \"ccdd\", \"eeff\", \"abcd\"], costs = [10, 15, 20, 25]",
        "output": "45"
      },
      {
        "input": "target = \"zzzzzzzzzzz\", words = [\"zz\",\"zzz\",\"zzzz\"], costs = [2,5,7]",
        "output": "13"
      },
      {
        "input": "target = \"zzzzzzzzzzzzzzzzzzzz\", words = [\"z\",\"zz\",\"zzz\",\"zzzz\"], costs = [1,2,3,4]",
        "output": "20"
      },
      {
        "input": "target = \"xyxzyzyxzyzyxzyx\", words = [\"xyx\",\"zyz\",\"yx\",\"xyz\"], costs = [7,6,5,4]",
        "output": "-1"
      },
      {
        "input": "target = \"aaaaabbbbb\", words = [\"a\",\"b\",\"ab\",\"ba\"], costs = [1,2,3,4]",
        "output": "15"
      },
      {
        "input": "target = \"mississippi\", words = [\"mis\",\"issi\",\"ppi\",\"ss\",\"ippi\",\"s\",\"i\",\"m\"], costs = [1,3,5,1,2,2,1,1]",
        "output": "7"
      },
      {
        "input": "target = \"hellohello\", words = [\"he\",\"llo\",\"ell\",\"o\"], costs = [2,3,1,4]",
        "output": "10"
      },
      {
        "input": "target = \"pppppppppp\", words = [\"p\",\"pp\",\"ppp\"], costs = [10,5,3]",
        "output": "16"
      },
      {
        "input": "target = \"zzzzzzzzzzzzzzzzzzzz\", words = [\"zzz\",\"zz\",\"z\"], costs = [10,5,1]",
        "output": "20"
      },
      {
        "input": "target = \"abcdefghij\", words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"], costs = [10,20,30,40,50,60,70,80,90,100]",
        "output": "550"
      },
      {
        "input": "target = \"zzzzzzzzzz\", words = [\"zz\",\"zzz\",\"z\"], costs = [1,2,10]",
        "output": "5"
      },
      {
        "input": "target = \"aabbccddeeff\", words = [\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"ff\"], costs = [1,2,1,2,1,2]",
        "output": "9"
      },
      {
        "input": "target = \"abcdefghi\", words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"], costs = [1,2,3,4,5,6,7,8,9]",
        "output": "45"
      },
      {
        "input": "target = \"aabbccddeeff\", words = [\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"ff\",\"abcd\",\"ef\",\"fedc\"], costs = [1,2,3,4,5,6,7,8,9]",
        "output": "21"
      },
      {
        "input": "target = \"zzzzzzzzzzzzzzzzzzzz\", words = [\"z\",\"zz\",\"zzz\"], costs = [1,10,100]",
        "output": "20"
      },
      {
        "input": "target = \"mnopqr\", words = [\"m\",\"no\",\"pqr\",\"op\",\"qr\",\"mnop\",\"nopqr\"], costs = [1,2,3,4,5,6,7]",
        "output": "6"
      },
      {
        "input": "target = \"hellohellos\", words = [\"he\",\"llo\",\"hel\",\"los\",\"o\",\"s\"], costs = [1,2,3,4,5,6]",
        "output": "10"
      },
      {
        "input": "target = \"mamamamama\", words = [\"ma\",\"am\"], costs = [2,1]",
        "output": "10"
      },
      {
        "input": "target = \"abcdabcdabcd\", words = [\"abcd\", \"abc\", \"bca\", \"cab\", \"dab\"], costs = [10, 7, 8, 9, 6]",
        "output": "30"
      },
      {
        "input": "target = \"abcdabcdabcd\", words = [\"abcd\",\"abc\",\"cd\",\"d\",\"a\",\"bc\"], costs = [10,20,30,40,50,60]",
        "output": "30"
      },
      {
        "input": "target = \"aaaabbbb\", words = [\"a\",\"aa\",\"aaa\",\"aaaa\"], costs = [4,3,2,1]",
        "output": "-1"
      },
      {
        "input": "target = \"abcdefghijklmnop\", words = [\"a\",\"bc\",\"def\",\"ghij\",\"klmno\",\"p\"], costs = [1,2,3,4,5,6]",
        "output": "21"
      },
      {
        "input": "target = \"banana\", words = [\"ba\",\"an\",\"na\",\"ana\",\"nana\",\"banana\"], costs = [1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyz\", words = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], costs = [3,5,4,7,6,8,9,2,1]",
        "output": "45"
      },
      {
        "input": "target = \"mnopqr\", words = [\"mno\", \"pq\", \"r\", \"mnopq\", \"qrs\"], costs = [10, 7, 5, 20, 8]",
        "output": "22"
      },
      {
        "input": "target = \"aaabbbcccddd\", words = [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"ab\", \"bc\", \"cd\"], costs = [5, 6, 7, 8, 3, 4, 5]",
        "output": "26"
      },
      {
        "input": "target = \"mississippi\", words = [\"mis\",\"is\",\"sip\",\"i\",\"p\"], costs = [1,2,3,4,5]",
        "output": "-1"
      },
      {
        "input": "target = \"abcdefg\", words = [\"abc\", \"def\", \"g\", \"abcd\", \"efg\"], costs = [10, 20, 5, 15, 25]",
        "output": "35"
      },
      {
        "input": "target = \"aabbccddeeff\", words = [\"aab\",\"bcc\",\"dde\",\"eff\"], costs = [6,7,8,9]",
        "output": "30"
      },
      {
        "input": "target = \"aaabbbcccddd\", words = [\"aaa\",\"bbb\",\"ccc\",\"ddd\",\"aab\",\"bcc\",\"dde\"], costs = [10,11,12,13,9,8,7]",
        "output": "46"
      },
      {
        "input": "target = \"abababababab\", words = [\"aba\",\"bab\",\"ab\"], costs = [3,4,1]",
        "output": "6"
      },
      {
        "input": "target = \"optimization\", words = [\"opt\",\"im\",\"iza\",\"tion\"], costs = [10,20,30,40]",
        "output": "100"
      },
      {
        "input": "target = \"xyzxyzxyzxyz\", words = [\"xyz\",\"xy\",\"zxyz\",\"zxy\"], costs = [7,5,10,8]",
        "output": "28"
      },
      {
        "input": "target = \"ababababab\", words = [\"aba\", \"bab\", \"ab\", \"ba\"], costs = [7, 8, 2, 3]",
        "output": "10"
      },
      {
        "input": "target = \"qwertyuiop\", words = [\"qwe\",\"rty\",\"ui\",\"op\"], costs = [7,8,5,6]",
        "output": "26"
      },
      {
        "input": "target = \"aaaabbbbccccdddd\", words = [\"aaaa\",\"bbbb\",\"cccc\",\"dddd\",\"abc\",\"bcd\",\"cde\",\"def\"], costs = [4,5,6,7,8,9,10,11]",
        "output": "22"
      },
      {
        "input": "target = \"abcabcabcabc\", words = [\"abc\",\"bc\",\"ca\"], costs = [1,2,3]",
        "output": "4"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyz\", words = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], costs = [10,15,20,25,30,35,40,45,50]",
        "output": "270"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyz\", words = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], costs = [5,5,5,5,5,5,5,5,5]",
        "output": "45"
      },
      {
        "input": "target = \"xyxyxyxyxy\", words = [\"xy\",\"yx\",\"x\",\"y\"], costs = [4,5,1,2]",
        "output": "15"
      },
      {
        "input": "target = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", words = [\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"ff\",\"gg\",\"hh\",\"ii\",\"jj\",\"kk\",\"ll\",\"mm\",\"nn\",\"oo\",\"pp\",\"qq\",\"rr\",\"ss\",\"tt\",\"uu\",\"vv\",\"ww\",\"xx\",\"yy\",\"zz\"], costs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "351"
      },
      {
        "input": "target = \"abcdefghij\", words = [\"abc\", \"def\", \"ghi\", \"j\", \"abcdefgh\"], costs = [12, 15, 20, 5, 100]",
        "output": "52"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyz\", words = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], costs = [1,2,3,4,5,6,7,8,9]",
        "output": "45"
      },
      {
        "input": "target = \"ababababab\", words = [\"ab\",\"aba\",\"bab\",\"aab\"], costs = [100,200,300,400]",
        "output": "500"
      },
      {
        "input": "target = \"mississippi\", words = [\"i\",\"s\",\"p\",\"is\",\"pi\",\"sis\",\"issi\"], costs = [1,2,3,4,5,6,7]",
        "output": "-1"
      },
      {
        "input": "target = \"ababababab\", words = [\"ab\",\"aba\",\"bab\",\"ba\"], costs = [1,3,2,4]",
        "output": "5"
      },
      {
        "input": "target = \"aabbccddeeff\", words = [\"ab\",\"bc\",\"cd\",\"de\",\"ef\",\"fe\",\"dc\",\"cb\",\"ba\",\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"ff\"], costs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "75"
      },
      {
        "input": "target = \"lmnopqrstu\", words = [\"lmn\",\"opq\",\"rst\",\"u\"], costs = [1,2,3,4]",
        "output": "10"
      },
      {
        "input": "target = \"aabbccddeeffgghhiijj\", words = [\"aa\",\"bb\",\"cc\",\"dd\",\"ee\",\"ff\",\"gg\",\"hh\",\"ii\",\"jj\"], costs = [1,2,3,4,5,6,7,8,9,10]",
        "output": "55"
      },
      {
        "input": "target = \"ababababab\", words = [\"aba\",\"bab\",\"ab\",\"ba\"], costs = [4,5,2,3]",
        "output": "10"
      },
      {
        "input": "target = \"xyxxyxyxyx\", words = [\"xy\",\"xxy\",\"xyx\",\"yxy\"], costs = [5,7,6,8]",
        "output": "22"
      },
      {
        "input": "target = \"mississippi\", words = [\"mis\",\"issi\",\"ppi\",\"i\",\"pi\",\"miss\",\"ippi\"], costs = [3,4,2,1,5,6,7]",
        "output": "12"
      },
      {
        "input": "target = \"aaaaaaaabaaaaaaa\", words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\"], costs = [1,3,5,7,9]",
        "output": "-1"
      },
      {
        "input": "target = \"abcdefghijklmnop\", words = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], costs = [10,20,30,40,50,60,70,80,90]",
        "output": "-1"
      },
      {
        "input": "target = \"ababababab\", words = [\"ab\",\"aba\",\"bab\",\"ba\",\"a\",\"b\"], costs = [2,3,4,1,5,6]",
        "output": "9"
      },
      {
        "input": "target = \"abcdefgabcdefg\", words = [\"abc\",\"def\",\"gh\",\"abcdef\",\"gh\",\"abcdefg\"], costs = [10,20,30,5,50,60]",
        "output": "120"
      },
      {
        "input": "target = \"abcdefghijklmnopqrstuvwxyz\", words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], costs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "-1"
      },
      {
        "input": "target = \"abcabcabcabcabcabc\", words = [\"abc\",\"abca\",\"bcab\",\"cabc\",\"bca\"], costs = [1,2,3,4,5]",
        "output": "6"
      },
      {
        "input": "target = \"abacabadabacaba\", words = [\"aba\",\"cab\",\"abc\",\"bac\"], costs = [3,5,2,4]",
        "output": "-1"
      },
      {
        "input": "target = \"qwertyqwerty\", words = [\"qw\",\"er\",\"ty\",\"rt\",\"yt\"], costs = [1,2,3,4,5]",
        "output": "12"
      },
      {
        "input": "target = \"abcabcabcabcabc\", words = [\"ab\",\"bc\",\"ca\",\"abc\"], costs = [2,1,5,3]",
        "output": "15"
      },
      {
        "input": "target = \"abcabcabcabcabcabc\", words = [\"abc\",\"abcabc\",\"abcabcabc\",\"a\",\"b\",\"c\"], costs = [10,20,30,1,2,3]",
        "output": "36"
      },
      {
        "input": "target = \"qwertyuiopasdfghjklzxcvbnm\", words = [\"qwerty\",\"uiop\",\"asdf\",\"ghjk\",\"lzx\",\"cvbn\",\"m\",\"qwer\",\"tyui\",\"opas\",\"dfgh\",\"jklz\",\"xcvb\",\"bnm\"], costs = [12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "105"
      },
      {
        "input": "target = \"abacabadabacaba\", words = [\"aba\",\"abac\",\"abacaba\",\"abacabad\",\"abacabadaba\"], costs = [5,10,15,20,25]",
        "output": "35"
      }
    ]
  },
  {
    "id": 1924,
    "difficulty": "Hard",
    "tags": [
      "Geometry",
      "Array",
      "Math"
    ],
    "problemDescription": "You are given a 2D integer array trees where trees[i] = [xi, yi] represents the location of the ith tree in the garden.\nYou are asked to fence the entire garden using the minimum length of rope possible. The garden is well-fenced only if all the trees are enclosed and the rope used forms a perfect circle. A tree is considered enclosed if it is inside or on the border of the circle.\nMore formally, you must form a circle using the rope with a center (x, y) and radius r where all trees lie inside or on the circle and r is minimum.\nReturn the center and radius of the circle as a length 3 array [x, y, r].\u00a0Answers within 10-5 of the actual answer will be accepted.\n\u00a0\nExample 1:\n\n\nInput: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\nOutput: [2.00000,2.00000,2.00000]\nExplanation: The fence will have center = (2, 2) and radius = 2\n\nExample 2:\n\n\nInput: trees = [[1,2],[2,2],[4,2]]\nOutput: [2.50000,2.00000,1.50000]\nExplanation: The fence will have center = (2.5, 2) and radius = 1.5\n\n\u00a0\nConstraints:\n\n1 <= trees.length <= 3000\ntrees[i].length == 2\n0 <= xi, yi <= 3000\n\n",
    "starterCode": "class Solution:\n    def outerTrees(self, trees: List[List[int]]) -> List[float]:\n        ",
    "testCases": [
      {
        "input": "trees = [[10,10],[10,20],[20,10],[20,20]]",
        "output": "[15.0, 15.0, 7.0710678118654755]"
      },
      {
        "input": "trees = [[0,0],[2,0],[1,2],[3,2]]",
        "output": "[1.5, 1.0, 1.8027756377319946]"
      },
      {
        "input": "trees = [[5,5],[5,10],[10,5],[10,10],[7,7]]",
        "output": "[7.5, 7.5, 3.5355339059327378]"
      },
      {
        "input": "trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]",
        "output": "[2.0, 2.0, 2.0]"
      },
      {
        "input": "trees = [[0,0],[1,0],[0,1],[1,1]]",
        "output": "[0.5, 0.5, 0.7071067811865476]"
      },
      {
        "input": "trees = [[10,10],[10,15],[15,10],[15,15]]",
        "output": "[12.5, 12.5, 3.5355339059327378]"
      },
      {
        "input": "trees = [[5,5],[5,6],[6,5],[6,6]]",
        "output": "[5.5, 5.5, 0.7071067811865476]"
      },
      {
        "input": "trees = [[1,1],[3,3],[5,5]]",
        "output": "[3.0, 3.0, 2.8284271247461903]"
      },
      {
        "input": "trees = [[10,10],[10,14],[15,10],[10,6]]",
        "output": "[10.9, 10.0, 4.1000000000000005]"
      },
      {
        "input": "trees = [[1,1],[1,2],[2,1],[2,2],[1.5,1.5]]",
        "output": "[1.5, 1.5, 0.7071067811865476]"
      },
      {
        "input": "trees = [[1,2],[2,2],[4,2]]",
        "output": "[2.5, 2.0, 1.5]"
      },
      {
        "input": "trees = [[2,1],[3,1],[4,1],[5,1]]",
        "output": "[3.5, 1.0, 1.5]"
      },
      {
        "input": "trees = [[3000,3000],[0,0],[1500,1500]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[5,5],[6,6],[7,7],[8,8]]",
        "output": "[6.5, 6.5, 2.1213203435596424]"
      },
      {
        "input": "trees = [[0,0],[1,1],[1,0],[0,1]]",
        "output": "[0.5, 0.5, 0.7071067811865476]"
      },
      {
        "input": "trees = [[0,0],[3000,0],[0,3000],[3000,3000],[1500,1500],[1000,1000],[2000,2000],[500,500],[2500,2500],[1000,500],[500,1000],[2500,500],[2500,1000],[1500,1000],[1000,1500],[1500,500],[500,1500],[2000,1000],[1000,2000],[2000,1000]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[50,50],[150,50],[100,150],[250,50],[350,50],[200,150],[250,150],[150,250]]",
        "output": "[200.0, 50.0, 150.0]"
      },
      {
        "input": "trees = [[1000,1000],[2000,2000],[1000,2000],[2000,1000],[1500,1500],[1200,1500],[1800,1500],[1500,1200],[1500,1800]]",
        "output": "[1500.0, 1500.0, 707.1067811865476]"
      },
      {
        "input": "trees = [[500, 500], [2000, 500], [500, 2000], [2000, 2000], [1250, 1250], [1500, 1000], [1000, 1500]]",
        "output": "[1250.0, 1250.0, 1060.6601717798212]"
      },
      {
        "input": "trees = [[100, 100], [200, 100], [150, 200], [100, 300], [200, 300], [150, 250], [100, 250], [200, 250], [150, 300], [150, 100]]",
        "output": "[150.0, 200.0, 111.80339887498948]"
      },
      {
        "input": "trees = [[1000,1000],[2000,1000],[1500,1500],[1500,2000],[1000,1500],[2000,1500],[1500,1000],[1500,1001],[1500,999],[1499,1500],[1501,1500]]",
        "output": "[1500.0, 1000.0, 500.0]"
      },
      {
        "input": "trees = [[1,1],[1,2],[2,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[1,10],[10,1],[5,5],[3,7],[7,3],[2,8],[8,2]]",
        "output": "[5.5, 5.5, 6.363961030678928]"
      },
      {
        "input": "trees = [[2500, 2500], [2400, 2400], [2600, 2400], [2600, 2600], [2400, 2600], [2500, 2300], [2500, 2700], [2300, 2500], [2700, 2500]]",
        "output": "[2500.0, 2500.0, 200.0]"
      },
      {
        "input": "trees = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 1], [1, 10], [10, 10]]",
        "output": "[5.5, 5.5, 6.363961030678928]"
      },
      {
        "input": "trees = [[100,500],[500,100],[500,500],[100,100],[300,300],[700,300],[300,700],[700,700],[500,300],[300,500],[700,500],[500,700],[400,400],[600,400],[500,600],[500,400]]",
        "output": "[400.0, 400.0, 424.26406871192853]"
      },
      {
        "input": "trees = [[0, 0], [0, 1], [1, 0], [1, 1], [0.5, 0.5], [0.3, 0.7], [0.7, 0.3], [0.2, 0.8], [0.8, 0.2], [0.4, 0.6], [0.6, 0.4]]",
        "output": "[0.5, 0.5, 0.7071067811865476]"
      },
      {
        "input": "trees = [[5,5],[5,15],[15,5],[15,15],[10,10],[7,7],[13,13],[12,8],[8,12],[10,7],[7,10],[10,13],[13,10]]",
        "output": "[10.0, 10.0, 7.0710678118654755]"
      },
      {
        "input": "trees = [[500, 500], [1000, 500], [1500, 500], [1000, 1000], [1000, 1500], [1000, 2000], [500, 1000], [1500, 1000], [1000, 0]]",
        "output": "[1000.0, 1000.0, 1000.0]"
      },
      {
        "input": "trees = [[1500, 1500], [1600, 1500], [1700, 1500], [1500, 1600], [1700, 1600], [1500, 1700], [1600, 1700], [1700, 1700], [1600, 1600]]",
        "output": "[1600.0, 1600.0, 141.4213562373095]"
      },
      {
        "input": "trees = [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[0,10],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "[0.5, 5.0, 5.024937810560445]"
      },
      {
        "input": "trees = [[100, 100], [200, 100], [200, 200], [100, 200], [150, 150], [120, 130], [180, 170]]",
        "output": "[150.0, 150.0, 70.71067811865476]"
      },
      {
        "input": "trees = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9]]",
        "output": "[5.0, 5.0, 5.656854249492381]"
      },
      {
        "input": "trees = [[500,500],[1000,1000],[1500,1500],[2000,2000],[2500,2500],[1000,500],[1000,1500],[500,1000],[1500,1000],[1000,2000]]",
        "output": "[1500.0, 1500.0, 1414.213562373095]"
      },
      {
        "input": "trees = [[0,0],[1,1],[2,0],[3,1],[4,0],[5,1],[6,0],[7,1],[8,0],[9,1]]",
        "output": "[4.5, 0.5, 4.527692569068709]"
      },
      {
        "input": "trees = [[1,1],[2,1],[3,1],[4,1],[1,2],[2,2],[3,2],[4,2],[1,3],[2,3],[3,3],[4,3],[1,4],[2,4],[3,4],[4,4],[2,5],[3,5],[5,2],[5,3],[5,4],[5,5],[1,5],[2,5],[3,5],[4,5],[5,1]]",
        "output": "[3.0, 3.0, 2.8284271247461903]"
      },
      {
        "input": "trees = [[0,0],[3000,0],[0,3000],[3000,3000],[1500,0],[0,1500],[1500,1500],[1500,3000],[3000,1500],[1500,1000],[1500,2000],[1000,1500],[2000,1500],[1000,1000],[2000,2000]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[1,1],[1,3],[3,1],[3,3],[2,2],[0,0],[4,4],[2,0],[0,2],[2,4],[4,2]]",
        "output": "[2.0, 2.0, 2.8284271247461903]"
      },
      {
        "input": "trees = [[100, 100], [200, 100], [300, 100], [400, 100], [500, 100], [300, 200], [300, 300], [300, 400], [300, 500], [200, 300], [400, 300]]",
        "output": "[300.0, 100.0, 200.0]"
      },
      {
        "input": "trees = [[0, 0], [3000, 0], [0, 3000], [3000, 3000], [1000, 1000], [2000, 2000], [1500, 1500], [500, 500], [2500, 2500], [1000, 2000]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[500,100],[1000,150],[1500,200],[2000,250],[2500,300],[3000,350],[2500,300],[2000,250],[1500,200],[1000,150]]",
        "output": "[1750.0, 225.0, 1256.2344526401114]"
      },
      {
        "input": "trees = [[100,200],[200,300],[300,400],[400,500],[500,600],[600,700],[700,800],[800,900],[900,1000],[1000,1100],[1100,1200],[1200,1300],[1300,1400],[1400,1500],[1500,1600]]",
        "output": "[800.0, 900.0, 989.9494936611666]"
      },
      {
        "input": "trees = [[3000,0],[0,3000],[1500,1500],[1000,2000],[2000,1000],[500,500],[2500,2500],[1000,500],[500,1000],[2500,500],[2500,1000]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[10,10],[10,20],[20,10],[20,20],[15,15],[15,25],[25,15],[25,25],[30,30],[40,40]]",
        "output": "[25.0, 25.0, 21.213203435596427]"
      },
      {
        "input": "trees = [[100,100],[900,100],[900,900],[100,900],[500,500],[400,400],[600,400],[400,600],[600,600],[700,700],[300,300],[700,300],[300,700],[200,200],[800,200],[200,800],[800,800]]",
        "output": "[500.0, 500.0, 565.685424949238]"
      },
      {
        "input": "trees = [[0,0],[0,3000],[3000,0],[3000,3000],[1500,1500]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[10, 10], [10, 20], [20, 10], [20, 20], [15, 15], [12, 12], [18, 18]]",
        "output": "[15.0, 15.0, 7.0710678118654755]"
      },
      {
        "input": "trees = [[100, 100], [100, 200], [100, 300], [100, 400], [200, 100], [200, 200], [200, 300], [200, 400], [300, 100], [300, 200], [300, 300], [300, 400]]",
        "output": "[200.0, 250.0, 180.27756377319946]"
      },
      {
        "input": "trees = [[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[25,25],[27,27],[29,29]]",
        "output": "[15.0, 15.0, 19.79898987322333]"
      },
      {
        "input": "trees = [[1,1],[1,3],[3,1],[3,3],[2,2],[2,1],[1,2],[3,2],[2,3],[2,4],[4,2],[3,4],[4,3],[4,4]]",
        "output": "[2.5, 2.5, 2.1213203435596424]"
      },
      {
        "input": "trees = [[1000,1000],[1000,2000],[2000,1000],[2000,2000],[1500,1500],[500,500],[2500,2500],[500,2500],[2500,500],[1000,500],[500,1000],[2000,500],[500,2000],[2000,1000],[1500,500],[500,1500],[2000,1500],[1500,1000],[1500,2000]]",
        "output": "[1500.0, 1500.0, 1414.213562373095]"
      },
      {
        "input": "trees = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16]]",
        "output": "[8.0, 9.0, 9.899494936611665]"
      },
      {
        "input": "trees = [[500,500],[1000,500],[500,1000],[1000,1000],[750,750],[250,250],[250,750],[750,250]]",
        "output": "[625.0, 625.0, 530.3300858899106]"
      },
      {
        "input": "trees = [[1500,1500],[1501,1500],[1499,1500],[1500,1501],[1500,1499],[1502,1500],[1500,1502],[1500,1498],[1498,1500],[1502,1502],[1498,1498]]",
        "output": "[1500.0, 1500.0, 2.8284271247461903]"
      },
      {
        "input": "trees = [[1,2],[2,1],[3,4],[4,3],[5,6],[6,5],[7,8],[8,7],[9,10],[10,9]]",
        "output": "[5.5, 5.5, 5.70087712549569]"
      },
      {
        "input": "trees = [[500, 500], [2000, 2000], [1000, 1000], [500, 2500], [2500, 500], [1500, 1500]]",
        "output": "[1500.0, 1500.0, 1414.213562373095]"
      },
      {
        "input": "trees = [[100,100],[200,200],[150,200],[250,100],[200,150],[150,100],[250,200],[300,100],[300,200]]",
        "output": "[200.0, 150.0, 111.80339887498948]"
      },
      {
        "input": "trees = [[1,1],[1,3],[3,1],[3,3],[2,2],[0,0],[4,4],[2,0],[2,4],[0,2],[4,2]]",
        "output": "[2.0, 2.0, 2.8284271247461903]"
      },
      {
        "input": "trees = [[1000,1000],[1000,2000],[2000,1000],[2000,2000],[1500,1500],[1500,1250],[1250,1500],[1750,1500],[1500,1750]]",
        "output": "[1500.0, 1500.0, 707.1067811865476]"
      },
      {
        "input": "trees = [[10, 10], [20, 20], [30, 10], [40, 20], [50, 10], [25, 15], [35, 15], [15, 15], [45, 15], [10, 30], [50, 30]]",
        "output": "[30.0, 20.0, 22.360679774997898]"
      },
      {
        "input": "trees = [[1000,1000],[2000,1000],[1500,2000],[1500,500],[1000,1500],[2000,1500]]",
        "output": "[1500.0, 1250.0, 750.0]"
      },
      {
        "input": "trees = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[5.5, 5.5, 6.363961030678928]"
      },
      {
        "input": "trees = [[500,1500],[1500,2000],[2000,2500],[2500,1500],[1500,500],[500,500],[1000,1000],[2000,1000],[1000,2000],[1500,1000],[1000,1500],[1500,1500]]",
        "output": "[1250.0, 1500.0, 1250.0]"
      },
      {
        "input": "trees = [[1,1],[2,3],[3,1],[2,2],[1,3],[3,3],[2,1],[4,2],[5,1],[5,3],[4,3]]",
        "output": "[3.0, 2.0, 2.23606797749979]"
      },
      {
        "input": "trees = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [5, 1], [5, 9], [1, 5], [9, 5], [3, 7], [7, 3]]",
        "output": "[5.0, 5.0, 5.656854249492381]"
      },
      {
        "input": "trees = [[0,0],[0,3000],[3000,0],[3000,3000],[1500,1500],[1000,1000],[2000,2000],[1500,2500],[2500,1500]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[1, 1], [1, 3], [3, 1], [3, 3], [2, 2], [2, 0], [0, 2], [2, 4], [4, 2], [5, 5]]",
        "output": "[2.875, 2.875, 3.005203820042827]"
      },
      {
        "input": "trees = [[0,0],[0,3000],[3000,0],[3000,3000],[1500,1500],[750,750],[2250,2250]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[10, 10], [10, 20], [20, 10], [20, 20], [15, 15], [12, 18], [18, 12], [14, 14], [16, 16], [13, 13], [17, 17]]",
        "output": "[15.0, 15.0, 7.0710678118654755]"
      },
      {
        "input": "trees = [[500, 1000], [1000, 500], [1500, 1000], [1000, 1500], [1000, 1000], [750, 750], [1250, 750], [750, 1250], [1250, 1250]]",
        "output": "[1000.0, 1000.0, 500.0]"
      },
      {
        "input": "trees = [[10,10],[20,20],[30,30],[40,40],[50,50],[10,30],[30,10],[20,40],[40,20],[30,50]]",
        "output": "[30.0, 30.0, 28.284271247461902]"
      },
      {
        "input": "trees = [[1000,1000],[1001,1001],[999,1001],[1001,999],[999,999],[1500,1500],[500,500],[2000,2000],[0,0],[3000,3000],[1500,0],[0,1500],[3000,1500],[1500,3000]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[0, 0], [3000, 3000], [1500, 0], [1500, 3000], [0, 1500], [3000, 1500]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[100,300],[300,100],[100,700],[700,100],[500,500],[200,500],[800,500],[500,200],[500,800],[300,700],[700,300]]",
        "output": "[400.0, 400.0, 424.26406871192853]"
      },
      {
        "input": "trees = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[5,1],[5,9]]",
        "output": "[5.5, 5.5, 6.363961030678928]"
      },
      {
        "input": "trees = [[10,10],[20,20],[30,10],[20,30],[25,25],[15,25]]",
        "output": "[20.0, 10.0, 10.0]"
      },
      {
        "input": "trees = [[500, 500], [1000, 500], [1000, 1000], [500, 1000], [750, 750], [700, 800], [800, 700]]",
        "output": "[750.0, 750.0, 353.5533905932738]"
      },
      {
        "input": "trees = [[100,100],[200,100],[150,200],[250,200],[300,100],[350,100],[300,200],[250,300],[150,300],[200,200]]",
        "output": "[225.0, 100.0, 125.0]"
      },
      {
        "input": "trees = [[100,100],[200,200],[300,300],[400,400],[500,500],[600,600],[700,700],[800,800],[900,900],[1000,1000]]",
        "output": "[550.0, 550.0, 636.3961030678928]"
      },
      {
        "input": "trees = [[100,100],[1000,100],[100,1000],[1000,1000],[500,500],[500,300],[300,500],[700,500],[500,700],[300,700],[700,300]]",
        "output": "[550.0, 550.0, 636.3961030678928]"
      },
      {
        "input": "trees = [[500,500],[1000,1000],[1500,500],[1000,1500],[750,750],[1250,750]]",
        "output": "[1000.0, 500.0, 500.0]"
      },
      {
        "input": "trees = [[1, 1], [2, 1], [1, 2], [2, 2], [1.5, 1.5], [0.5, 0.5], [2.5, 2.5], [1.5, 2.5], [2.5, 1.5], [1.0, 1.0]]",
        "output": "[1.5, 1.5, 1.4142135623730951]"
      },
      {
        "input": "trees = [[1,1],[1,3],[3,1],[3,3],[2,2],[1,2],[2,1],[2,3],[3,2],[0,0],[0,4],[4,0],[4,4],[2,0],[2,4],[0,2],[4,2],[2,2]]",
        "output": "[2.0, 2.0, 2.8284271247461903]"
      },
      {
        "input": "trees = [[10,10],[10,20],[20,10],[20,20],[15,15],[12,12],[18,18],[14,16],[16,14]]",
        "output": "[15.0, 15.0, 7.0710678118654755]"
      },
      {
        "input": "trees = [[100,100],[200,100],[300,100],[400,100],[500,100],[600,100],[350,200],[450,200]]",
        "output": "[350.0, 100.0, 250.0]"
      },
      {
        "input": "trees = [[100,200],[200,100],[200,300],[300,200],[150,150],[250,250],[100,300],[300,100]]",
        "output": "[200.0, 200.0, 141.4213562373095]"
      },
      {
        "input": "trees = [[100, 200], [200, 300], [300, 200], [200, 100], [250, 150], [150, 250]]",
        "output": "[200.0, 200.0, 100.0]"
      },
      {
        "input": "trees = [[500,500],[1500,1500],[2500,2500],[3000,3000],[1000,1000],[1500,1000],[2000,2000],[2500,1500],[1500,1500],[1000,2000],[2000,1000],[500,1500],[1500,500],[2500,500],[500,2500],[2500,3000],[3000,2500],[3000,1500]]",
        "output": "[1750.0, 1750.0, 1767.7669529663688]"
      },
      {
        "input": "trees = [[500,500],[1000,1000],[1500,1500],[2000,2000],[1500,1000],[1000,500],[500,1000],[1000,1500],[1500,1000]]",
        "output": "[1250.0, 1250.0, 1060.6601717798212]"
      },
      {
        "input": "trees = [[100,100],[200,200],[300,300],[400,400],[500,500],[600,600],[700,700],[800,800],[900,900],[1000,1000],[500,100],[100,500],[500,900],[900,500]]",
        "output": "[550.0, 550.0, 636.3961030678928]"
      },
      {
        "input": "trees = [[250,250],[750,250],[250,750],[750,750],[500,500],[300,300],[600,300],[300,600],[600,600],[500,300],[500,600]]",
        "output": "[500.0, 500.0, 353.5533905932738]"
      },
      {
        "input": "trees = [[0,0],[3000,0],[3000,3000],[0,3000],[1500,1500],[2000,2000],[500,500],[2500,2500]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[100,100],[101,101],[99,101],[101,99],[99,99],[150,150],[50,50],[200,200],[0,0],[3000,3000]]",
        "output": "[1500.0, 1500.0, 2121.3203435596424]"
      },
      {
        "input": "trees = [[1,2],[2,1],[1,3],[3,1],[2,2],[0,0],[4,4],[3,3],[2,3],[3,2],[1,1],[4,2],[2,4],[3,4],[4,3]]",
        "output": "[2.0, 2.0, 2.8284271247461903]"
      },
      {
        "input": "trees = [[500, 1000], [1000, 500], [500, 500], [1000, 1000], [750, 750], [600, 600], [800, 800], [900, 900], [100, 100], [300, 300], [700, 300], [300, 700]]",
        "output": "[550.0, 550.0, 636.3961030678928]"
      },
      {
        "input": "trees = [[500, 500], [500, 1500], [1500, 500], [1500, 1500], [1000, 1000], [750, 750], [1250, 750], [750, 1250], [1250, 1250], [1000, 750], [750, 1000], [1250, 1000]]",
        "output": "[1000.0, 1000.0, 707.1067811865476]"
      },
      {
        "input": "trees = [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [3, 2], [3, 3], [3, 4], [2, 3], [4, 3]]",
        "output": "[3.0, 1.0, 2.0]"
      },
      {
        "input": "trees = [[10,10],[10,30],[20,20],[20,40],[15,15],[15,25],[25,15],[25,25],[30,30],[40,40],[50,50]]",
        "output": "[30.0, 30.0, 28.284271247461902]"
      },
      {
        "input": "trees = [[500,500],[1500,1500],[2500,2500],[500,2500],[2500,500],[1000,1000],[2000,2000],[500,1000],[1000,500],[1500,500],[500,1500]]",
        "output": "[1500.0, 1500.0, 1414.213562373095]"
      },
      {
        "input": "trees = [[1, 2], [2, 1], [2, 3], [3, 2], [4, 2], [5, 2], [3, 1], [3, 3], [2, 4], [2, 0]]",
        "output": "[2.8333333333333335, 2.0, 2.1666666666666665]"
      }
    ]
  },
  {
    "id": 2141,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "You have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.\nInitially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.\nNote that the batteries cannot be recharged.\nReturn the maximum number of minutes you can run all the n computers simultaneously.\n\u00a0\nExample 1:\n\n\nInput: n = 2, batteries = [3,3,3]\nOutput: 4\nExplanation: \nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4.\n\n\nExample 2:\n\n\nInput: n = 2, batteries = [1,1,1,1]\nOutput: 2\nExplanation: \nInitially, insert battery 0 into the first computer and battery 2 into the second computer. \nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. \nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2.\n\n\u00a0\nConstraints:\n\n1 <= n <= batteries.length <= 105\n1 <= batteries[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def maxRunTime(self, n: int, batteries: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 5, batteries = [1,2,3,4,5]",
        "output": "1"
      },
      {
        "input": "n = 4, batteries = [10,10,3,5]",
        "output": "3"
      },
      {
        "input": "n = 2, batteries = [1000000000,1000000000]",
        "output": "1000000000"
      },
      {
        "input": "n = 2, batteries = [9,4,10]",
        "output": "11"
      },
      {
        "input": "n = 3, batteries = [10,20,30,40]",
        "output": "30"
      },
      {
        "input": "n = 3, batteries = [5,8,5]",
        "output": "5"
      },
      {
        "input": "n = 10, batteries = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "1000000000"
      },
      {
        "input": "n = 5, batteries = [9,9,9,9,9,9,9,9,9,9]",
        "output": "18"
      },
      {
        "input": "n = 4, batteries = [1,2,3,4,5]",
        "output": "3"
      },
      {
        "input": "n = 2, batteries = [1,1,1,1]",
        "output": "2"
      },
      {
        "input": "n = 2, batteries = [3,3,3]",
        "output": "4"
      },
      {
        "input": "n = 1, batteries = [5]",
        "output": "5"
      },
      {
        "input": "n = 1, batteries = [100]",
        "output": "100"
      },
      {
        "input": "n = 1, batteries = [10]",
        "output": "10"
      },
      {
        "input": "n = 5, batteries = [1,1,1,1,1,1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "n = 10, batteries = [1,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "n = 3, batteries = [10,10,3,5]",
        "output": "8"
      },
      {
        "input": "n = 3, batteries = [1,2,3,4,5,6]",
        "output": "7"
      },
      {
        "input": "n = 3, batteries = [10,10,10]",
        "output": "10"
      },
      {
        "input": "n = 5, batteries = [1,1,1,1,1000000000]",
        "output": "1"
      },
      {
        "input": "n = 3, batteries = [2,6,4,5]",
        "output": "5"
      },
      {
        "input": "n = 4, batteries = [5,5,5,5,5]",
        "output": "6"
      },
      {
        "input": "n = 5, batteries = [1,2,3,4,5,6,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "n = 3, batteries = [1,2,999999999]",
        "output": "1"
      },
      {
        "input": "n = 2, batteries = [10,20]",
        "output": "10"
      },
      {
        "input": "n = 2, batteries = [2,3,4,5]",
        "output": "7"
      },
      {
        "input": "n = 3, batteries = [5,5,5,5,5]",
        "output": "8"
      },
      {
        "input": "n = 4, batteries = [8,8,8,8,8,8]",
        "output": "12"
      },
      {
        "input": "n = 10, batteries = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "110"
      },
      {
        "input": "n = 5, batteries = [500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "350"
      },
      {
        "input": "n = 10, batteries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "11"
      },
      {
        "input": "n = 50000, batteries = [2] * 100000",
        "output": "Error: Solution.maxRunTime() missing 1 required positional argument: 'batteries'"
      },
      {
        "input": "n = 4, batteries = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "2500000000"
      },
      {
        "input": "n = 5, batteries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "11"
      },
      {
        "input": "n = 15, batteries = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000]",
        "output": "3100"
      },
      {
        "input": "n = 5, batteries = [10,20,30,40,50,60]",
        "output": "30"
      },
      {
        "input": "n = 5000, batteries = [10] * 1000000",
        "output": "Error: Solution.maxRunTime() missing 1 required positional argument: 'batteries'"
      },
      {
        "input": "n = 5, batteries = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "420"
      },
      {
        "input": "n = 4, batteries = [1,2,3,4,5,6,7,8,9,10]",
        "output": "13"
      },
      {
        "input": "n = 10, batteries = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000]",
        "output": "1"
      },
      {
        "input": "n = 4, batteries = [100, 100, 100, 1]",
        "output": "1"
      },
      {
        "input": "n = 5, batteries = [1000000, 2000000, 3000000, 4000000, 5000000]",
        "output": "1000000"
      },
      {
        "input": "n = 3, batteries = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "70"
      },
      {
        "input": "n = 3, batteries = [1000000000, 1000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "13"
      },
      {
        "input": "n = 15, batteries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 100]",
        "output": "3"
      },
      {
        "input": "n = 2, batteries = [1, 1000000000]",
        "output": "1"
      },
      {
        "input": "n = 5, batteries = [10, 20, 30, 40, 50]",
        "output": "10"
      },
      {
        "input": "n = 10, batteries = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "10"
      },
      {
        "input": "n = 10, batteries = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 1]",
        "output": "50"
      },
      {
        "input": "n = 3, batteries = [1000000000, 1000000000, 1000000000, 1]",
        "output": "1000000000"
      },
      {
        "input": "n = 6, batteries = [100, 100, 100, 100, 100, 100, 1]",
        "output": "100"
      },
      {
        "input": "n = 7, batteries = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "1714"
      },
      {
        "input": "n = 4, batteries = [100, 100, 100, 100, 1, 1, 1, 1]",
        "output": "101"
      },
      {
        "input": "n = 5, batteries = [10,10,10,10,10,10,10,10,10,1]",
        "output": "18"
      },
      {
        "input": "n = 5, batteries = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]",
        "output": "18"
      },
      {
        "input": "n = 1, batteries = [1000000000]",
        "output": "1000000000"
      },
      {
        "input": "n = 4, batteries = [2,3,6,6,6,6,6,6,6,6,6,6]",
        "output": "16"
      },
      {
        "input": "n = 2, batteries = [1000000000, 1]",
        "output": "1"
      },
      {
        "input": "n = 4, batteries = [1, 1, 1, 1, 1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "1000000001"
      },
      {
        "input": "n = 4, batteries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "52"
      },
      {
        "input": "n = 8, batteries = [8,7,6,5,4,3,2,1,1,1,1,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "n = 7, batteries = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
        "output": "46"
      },
      {
        "input": "n = 7, batteries = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "2"
      },
      {
        "input": "n = 100000, batteries = [1] * 100000",
        "output": "Error: Solution.maxRunTime() missing 1 required positional argument: 'batteries'"
      },
      {
        "input": "n = 5, batteries = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "110"
      },
      {
        "input": "n = 10, batteries = [10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "n = 5, batteries = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]",
        "output": "2000"
      },
      {
        "input": "n = 10, batteries = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]",
        "output": "500"
      },
      {
        "input": "n = 3, batteries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "108"
      },
      {
        "input": "n = 6, batteries = [100, 100, 100, 100, 100, 100, 1, 1, 1, 1]",
        "output": "100"
      },
      {
        "input": "n = 8, batteries = [8, 16, 32, 64, 128, 256, 512, 1024, 2048]",
        "output": "24"
      },
      {
        "input": "n = 5, batteries = [999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999]",
        "output": "1999999998"
      },
      {
        "input": "n = 4, batteries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "13"
      },
      {
        "input": "n = 1000, batteries = [1] * 1000000",
        "output": "Error: Solution.maxRunTime() missing 1 required positional argument: 'batteries'"
      },
      {
        "input": "n = 5, batteries = [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]",
        "output": "125"
      },
      {
        "input": "n = 3, batteries = [1,2,3,4,5,6,7,8,9,10]",
        "output": "18"
      },
      {
        "input": "n = 15, batteries = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "110"
      },
      {
        "input": "n = 6, batteries = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]",
        "output": "30"
      },
      {
        "input": "n = 8, batteries = [50, 40, 30, 20, 10, 5, 3, 1, 2, 4, 6, 8, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "75"
      },
      {
        "input": "n = 5, batteries = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "200"
      },
      {
        "input": "n = 8, batteries = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "9"
      },
      {
        "input": "n = 4, batteries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "116"
      },
      {
        "input": "n = 9, batteries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "23"
      },
      {
        "input": "n = 10000, batteries = [5] * 1000000",
        "output": "Error: Solution.maxRunTime() missing 1 required positional argument: 'batteries'"
      },
      {
        "input": "n = 3, batteries = [1,1000000000,1]",
        "output": "1"
      },
      {
        "input": "n = 3, batteries = [1000, 1000, 1000, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1002"
      },
      {
        "input": "n = 7, batteries = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "85"
      },
      {
        "input": "n = 2, batteries = [1000000000, 1000000000]",
        "output": "1000000000"
      },
      {
        "input": "n = 5, batteries = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "250"
      },
      {
        "input": "n = 3, batteries = [1000000000, 1000000000, 1000000000, 1000000000, 1]",
        "output": "1333333333"
      },
      {
        "input": "n = 5, batteries = [1, 1, 1, 1, 1, 1000]",
        "output": "1"
      },
      {
        "input": "n = 7, batteries = [50,40,30,20,10,5,1,1,1,1,1,1,1]",
        "output": "6"
      },
      {
        "input": "n = 8, batteries = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "4"
      },
      {
        "input": "n = 5, batteries = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "1100"
      },
      {
        "input": "n = 2, batteries = [1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "2000000000"
      },
      {
        "input": "n = 3, batteries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "18"
      },
      {
        "input": "n = 7, batteries = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "70"
      },
      {
        "input": "n = 4, batteries = [100, 100, 100, 100, 1]",
        "output": "100"
      },
      {
        "input": "n = 6, batteries = [100,100,100,100,100,100,1,1,1,1,1,1]",
        "output": "101"
      },
      {
        "input": "n = 10, batteries = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995, 999999994, 999999993, 999999992, 999999991]",
        "output": "999999991"
      },
      {
        "input": "n = 3, batteries = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]",
        "output": "30"
      },
      {
        "input": "n = 10, batteries = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "10"
      },
      {
        "input": "n = 4, batteries = [1000000000, 1000000000, 1000000000, 1000000000, 1]",
        "output": "1000000000"
      },
      {
        "input": "n = 5, batteries = [10, 20, 30, 40, 50, 60]",
        "output": "30"
      },
      {
        "input": "n = 6, batteries = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "3"
      },
      {
        "input": "n = 3, batteries = [10, 20, 30, 40, 50]",
        "output": "50"
      },
      {
        "input": "n = 10, batteries = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "100"
      },
      {
        "input": "n = 7, batteries = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "14"
      },
      {
        "input": "n = 6, batteries = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "90"
      },
      {
        "input": "n = 7, batteries = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "4"
      },
      {
        "input": "n = 4, batteries = [10, 20, 30, 40, 50]",
        "output": "30"
      },
      {
        "input": "n = 2, batteries = [999999999, 1]",
        "output": "1"
      },
      {
        "input": "n = 6, batteries = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1]",
        "output": "57"
      },
      {
        "input": "n = 7, batteries = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "28"
      },
      {
        "input": "n = 6, batteries = [1000, 2000, 3000, 4000, 5000, 6000]",
        "output": "1000"
      },
      {
        "input": "n = 10, batteries = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "1100"
      },
      {
        "input": "n = 3, batteries = [1000000000, 1000000000, 1000000000, 1000000000]",
        "output": "1333333333"
      },
      {
        "input": "n = 5, batteries = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "1100"
      },
      {
        "input": "n = 20, batteries = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "2"
      }
    ]
  },
  {
    "id": 1537,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given two sorted arrays of distinct integers nums1 and nums2.\nA valid path is defined as follows:\n\nChoose array nums1 or nums2 to traverse (from index-0).\nTraverse the current array from left to right.\nIf you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).\n\nThe score is defined as the sum of unique values in a valid path.\nReturn the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\n\nInput: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]\nOutput: 30\nExplanation: Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)\nThe maximum is obtained with the path in green [2,4,6,8,10].\n\nExample 2:\n\nInput: nums1 = [1,3,5,7,9], nums2 = [3,5,100]\nOutput: 109\nExplanation: Maximum sum is obtained with the path [1,3,5,100].\n\nExample 3:\n\nInput: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\nOutput: 40\nExplanation: There are no common elements between nums1 and nums2.\nMaximum sum is obtained with the path [6,7,8,9,10].\n\n\u00a0\nConstraints:\n\n1 <= nums1.length, nums2.length <= 105\n1 <= nums1[i], nums2[i] <= 107\nnums1 and nums2 are strictly increasing.\n\n",
    "starterCode": "class Solution:\n    def maxSum(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums1 = [10000000], nums2 = [10000000]",
        "output": "10000000"
      },
      {
        "input": "nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]",
        "output": "30"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [4,5,6,7,8,9,10]",
        "output": "49"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [3,4,5,6,7,8,9,10]",
        "output": "55"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [11,12,13,14,15,16,17,18,19,20]",
        "output": "155"
      },
      {
        "input": "nums1 = [1,4,6,8,10], nums2 = [2,4,6,8,12]",
        "output": "32"
      },
      {
        "input": "nums1 = [5,10,15,20], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "210"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [3,5,100]",
        "output": "109"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]",
        "output": "40"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [3,4,5]",
        "output": "15"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [5,15,25,35,45,55]",
        "output": "180"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "55"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6], nums2 = [3,4,5,6,7,8]",
        "output": "36"
      },
      {
        "input": "nums1 = [10,20,30,40], nums2 = [5,15,25,35,45]",
        "output": "125"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1]",
        "output": "100"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [4,5,6]",
        "output": "15"
      },
      {
        "input": "nums1 = [1,10000000], nums2 = [2,9999999]",
        "output": "10000001"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [5,15,25,35,45]",
        "output": "150"
      },
      {
        "input": "nums1 = [1], nums2 = [1]",
        "output": "1"
      },
      {
        "input": "nums1 = [1,4,6,8], nums2 = [2,3,5,7]",
        "output": "19"
      },
      {
        "input": "nums1 = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], nums2 = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]",
        "output": "4095"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [5,15,25,35,45,55,65,75,85,95,105]",
        "output": "605"
      },
      {
        "input": "nums1 = [9999991,9999992,9999993,9999994,9999995,9999996,9999997,9999998,9999999,10000000], nums2 = [10000001,10000002,10000003,10000004,10000005,10000006,10000007,10000008,10000009,10000010]",
        "output": "100000055"
      },
      {
        "input": "nums1 = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "551"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "55"
      },
      {
        "input": "nums1 = [5,10,15,20,25,30,35,40,45,50], nums2 = [5,15,25,35,45]",
        "output": "275"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [2,4,6,8,10,12,14,16,18,20]",
        "output": "135"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "240"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [5,15,25,35,45,55,65,75,85,95]",
        "output": "550"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], nums2 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "1300"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "195"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "210"
      },
      {
        "input": "nums1 = [1, 4, 6, 7, 10, 20, 30], nums2 = [2, 4, 5, 7, 11, 12, 15, 20]",
        "output": "107"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "100"
      },
      {
        "input": "nums1 = [1, 4, 6, 7, 8, 10, 15, 20], nums2 = [2, 4, 5, 7, 9, 10, 13, 18]",
        "output": "73"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "100"
      },
      {
        "input": "nums1 = [2,3,6,7,11,15], nums2 = [1,2,3,8,12,16,20]",
        "output": "62"
      },
      {
        "input": "nums1 = [1, 2, 3, 5, 7, 9, 11, 13, 15, 17], nums2 = [4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "108"
      },
      {
        "input": "nums1 = [1000000, 2000000, 3000000, 4000000, 5000000], nums2 = [1500000, 2500000, 3500000, 4500000, 5500000]",
        "output": "17500000"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], nums2 = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "210"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "110"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "120"
      },
      {
        "input": "nums1 = [5,15,25,35,45], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "225"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5]",
        "output": "55"
      },
      {
        "input": "nums1 = [10000000, 20000000, 30000000, 40000000, 50000000], nums2 = [15000000, 20000000, 25000000, 35000000, 40000000, 45000000, 55000000]",
        "output": "235000000"
      },
      {
        "input": "nums1 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], nums2 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "110"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], nums2 = [15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]",
        "output": "990"
      },
      {
        "input": "nums1 = [1, 4, 5, 6, 10, 15, 20, 25], nums2 = [2, 4, 7, 10, 12, 15, 22]",
        "output": "99"
      },
      {
        "input": "nums1 = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], nums2 = [3, 6, 12, 24, 48, 96, 192, 384, 768, 1536]",
        "output": "3069"
      },
      {
        "input": "nums1 = [1, 10000000], nums2 = [5000000, 10000000]",
        "output": "15000000"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19], nums2 = [2,4,6,8,10,12,14,16,18,20]",
        "output": "110"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19], nums2 = [2,3,5,8,9,10,12,15,18,20]",
        "output": "104"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "120"
      },
      {
        "input": "nums1 = [1,5,9,13,17,21,25,29,33,37], nums2 = [3,6,9,12,15,18,21,24,27,30]",
        "output": "208"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [150, 250, 350, 450, 550, 650, 750, 850, 950, 1050]",
        "output": "6000"
      },
      {
        "input": "nums1 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], nums2 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "240"
      },
      {
        "input": "nums1 = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97], nums2 = [2,6,10,14,18,22,26,30,34,38,42,46,50,54,58,62,66,70,74,78,82,86,90,94,98]",
        "output": "1250"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], nums2 = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "240"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "55"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "210"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "550"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "420"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], nums2 = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "420"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [5, 15, 25, 35, 45, 55]",
        "output": "180"
      },
      {
        "input": "nums1 = [2,4,6,8,10,12,14,16,18,20], nums2 = [1,3,5,7,9,11,13,15,17,19,21]",
        "output": "121"
      },
      {
        "input": "nums1 = [1, 10000000], nums2 = [2, 9999999]",
        "output": "10000001"
      },
      {
        "input": "nums1 = [1, 100, 1000, 10000, 100000], nums2 = [10, 100, 1000, 10000, 100000, 1000000]",
        "output": "1111110"
      },
      {
        "input": "nums1 = [1,10,100,1000,10000,100000,1000000,10000000], nums2 = [2,20,200,2000,20000,200000,2000000,20000000]",
        "output": "22222222"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [15, 20, 25, 35, 40, 45, 55, 65, 70, 75, 85, 95]",
        "output": "640"
      },
      {
        "input": "nums1 = [1,10,100,1000,10000,100000,1000000,10000000], nums2 = [1,10,100,1000,10000,100000,1000000,10000000]",
        "output": "11111111"
      },
      {
        "input": "nums1 = [1,2,4,5,7,8,10,12], nums2 = [3,4,6,7,9,10,11,13]",
        "output": "63"
      },
      {
        "input": "nums1 = [1,3,7,9,11,13,15,17,19], nums2 = [2,3,5,7,11,13,17,18,19]",
        "output": "119"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [5,10,15,20,25,30,35,40,45,50]",
        "output": "365"
      },
      {
        "input": "nums1 = [3,7,11,15,19,23,27,31,35,39], nums2 = [5,10,15,20,25,30,35,40,45,50]",
        "output": "306"
      },
      {
        "input": "nums1 = [10000000], nums2 = [9999999, 10000000, 10000001]",
        "output": "30000000"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25, 30], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "145"
      },
      {
        "input": "nums1 = [1,4,7,10,13,16,19,22,25,28], nums2 = [2,5,8,11,14,17,20,23,26,29]",
        "output": "155"
      },
      {
        "input": "nums1 = [2, 6, 10, 14, 18], nums2 = [3, 6, 9, 12, 15, 18, 21]",
        "output": "84"
      },
      {
        "input": "nums1 = [5,10,15,20,25,30,35,40], nums2 = [10,20,30,40,50,60,70]",
        "output": "360"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], nums2 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "435"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]",
        "output": "300"
      },
      {
        "input": "nums1 = [3, 6, 9, 12, 15, 18, 21, 24], nums2 = [2, 5, 8, 11, 14, 17, 20, 23, 26]",
        "output": "126"
      },
      {
        "input": "nums1 = [2,4,6,8,10], nums2 = [1,3,5,7,9,10,12]",
        "output": "47"
      },
      {
        "input": "nums1 = [1,4,7,10,13,16,19], nums2 = [2,5,8,11,14,17,20]",
        "output": "77"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], nums2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "730"
      },
      {
        "input": "nums1 = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57], nums2 = [2,6,10,14,18,22,26,30,34,38,42,46,50,54,58]",
        "output": "450"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], nums2 = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "1300"
      },
      {
        "input": "nums1 = [10000000], nums2 = [5000000,10000000,15000000]",
        "output": "30000000"
      },
      {
        "input": "nums1 = [1,11,21,31,41,51,61,71,81,91], nums2 = [5,15,25,35,45,55,65,75,85,95]",
        "output": "500"
      },
      {
        "input": "nums1 = [1,4,7,10,13,16,19], nums2 = [2,4,6,8,10,12,14]",
        "output": "78"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], nums2 = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "490"
      },
      {
        "input": "nums1 = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45], nums2 = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44]",
        "output": "345"
      },
      {
        "input": "nums1 = [5,10,15,20,25,30,35,40,45,50], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "365"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [5, 10, 15, 20, 25]",
        "output": "115"
      },
      {
        "input": "nums1 = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288], nums2 = [512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456]",
        "output": "536870911"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]",
        "output": "605"
      },
      {
        "input": "nums1 = [1,4,6,8,10,12,14,16,18,20], nums2 = [2,4,6,8,10,12,14,16,18,20]",
        "output": "110"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], nums2 = [5,10,15,20,25,30,35,40,45,50]",
        "output": "435"
      },
      {
        "input": "nums1 = [2,6,10,14,18,22,26,30,34,38,42,46,50,54,58,62,66,70,74,78,82,86,90,94,98], nums2 = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99]",
        "output": "2500"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [5,6,7,8,9,10,11,12,13,14]",
        "output": "105"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], nums2 = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]",
        "output": "1290"
      },
      {
        "input": "nums1 = [1, 5, 10, 20, 30, 40, 50], nums2 = [3, 10, 15, 25, 35, 45, 55]",
        "output": "191"
      },
      {
        "input": "nums1 = [500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000], nums2 = [250, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500]",
        "output": "33750"
      },
      {
        "input": "nums1 = [1000000, 2000000, 3000000, 4000000, 5000000], nums2 = [500000, 1000000, 1500000, 2000000, 2500000, 3000000, 3500000, 4000000, 4500000, 5000000]",
        "output": "27500000"
      },
      {
        "input": "nums1 = [1,10,20,30,40], nums2 = [5,15,25,35,45]",
        "output": "125"
      },
      {
        "input": "nums1 = [1, 4, 7, 10, 13, 16, 19], nums2 = [3, 4, 9, 10, 15, 16, 20]",
        "output": "77"
      },
      {
        "input": "nums1 = [1,4,7,10,13,16,19], nums2 = [1,5,9,13,17,21]",
        "output": "73"
      },
      {
        "input": "nums1 = [1, 4, 7, 10, 13, 16, 19], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18]",
        "output": "91"
      },
      {
        "input": "nums1 = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], nums2 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "335"
      },
      {
        "input": "nums1 = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97], nums2 = [2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98]",
        "output": "1250"
      }
    ]
  },
  {
    "id": 2973,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Dynamic Programming",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nYou are also given a 0-indexed integer array cost of length n, where cost[i] is the cost assigned to the ith node.\nYou need to place some coins on every node of the tree. The number of coins to be placed at node i can be calculated as:\n\nIf size of the subtree of node i is less than 3, place 1 coin.\nOtherwise, place an amount of coins equal to the maximum product of cost values assigned to 3 distinct nodes in the subtree of node i. If this product is negative, place 0 coins.\n\nReturn an array coin of size n such that coin[i] is the number of coins placed at node i.\n\u00a0\nExample 1:\n\n\nInput: edges = [[0,1],[0,2],[0,3],[0,4],[0,5]], cost = [1,2,3,4,5,6]\nOutput: [120,1,1,1,1,1]\nExplanation: For node 0 place 6 * 5 * 4 = 120 coins. All other nodes are leaves with subtree of size 1, place 1 coin on each of them.\n\nExample 2:\n\n\nInput: edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8]], cost = [1,4,2,3,5,7,8,-4,2]\nOutput: [280,140,32,1,1,1,1,1,1]\nExplanation: The coins placed on each node are:\n- Place 8 * 7 * 5 = 280 coins on node 0.\n- Place 7 * 5 * 4 = 140 coins on node 1.\n- Place 8 * 2 * 2 = 32 coins on node 2.\n- All other nodes are leaves with subtree of size 1, place 1 coin on each of them.\n\nExample 3:\n\n\nInput: edges = [[0,1],[0,2]], cost = [1,2,-2]\nOutput: [0,1,1]\nExplanation: Node 1 and 2 are leaves with subtree of size 1, place 1 coin on each of them. For node 0 the only possible product of cost is 2 * 1 * -2 = -4. Hence place 0 coins on node 0.\n\n\u00a0\nConstraints:\n\n2 <= n <= 2 * 104\nedges.length == n - 1\nedges[i].length == 2\n0 <= ai, bi < n\ncost.length == n\n1 <= |cost[i]| <= 104\nThe input is generated such that edges represents a valid tree.\n\n",
    "starterCode": "class Solution:\n    def placedCoins(self, edges: List[List[int]], cost: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]], cost = [3,2,1,-1,-2,-3,-4,-5]",
        "output": "[60, 40, 6, 0, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[2,6]], cost = [1,2,3,4,5,-1,6]",
        "output": "[120, 120, 1, 0, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[3,7]], cost = [1,-2,3,-4,5,-6,7,-8]",
        "output": "[336, 60, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3]], cost = [1,-2,-3,-4]",
        "output": "[12, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2]], cost = [1,2,-2]",
        "output": "[0, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], cost = [1,-2,3,-4,5,-6]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[0,4],[0,5]], cost = [1,2,3,4,5,6]",
        "output": "[120, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]], cost = [1,2,3,4,5,6,7,8]",
        "output": "[336, 336, 90, 224, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]], cost = [3,2,-1,4,-5,6,-7,8]",
        "output": "[280, 280, 30, 0, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8]], cost = [1,4,2,3,5,7,8,-4,2]",
        "output": "[280, 140, 32, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[3,7]], cost = [10,20,30,40,50,60,70,80]",
        "output": "[336000, 60000, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25]], cost = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "[15600, 15600, 4896, 9240, 15600, 1092, 1680, 2448, 3420, 4620, 6072, 7800, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22]], cost = [10,-20,30,-40,50,-60,70,-80,90,-100,110,-120,130,-140,150,-160,170,-180,190,-200,210,-220]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], cost = [100,-100,200,300,-300,400,500,-500,600,700,800]",
        "output": "[336000000, 336000000, 40000000, 0, 0, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], cost = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]",
        "output": "[9240, 2184, 4896, 9240, 660, 1092, 1680, 2448, 3420, 4620, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12]], cost = [-1,2,-3,4,5,-6,7,8,-9,10,-11,12]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13]], cost = [1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7,8]",
        "output": "[294, 294, 0, 50, 0, 147, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[5,9],[6,10],[7,11],[8,12],[9,13],[10,14],[11,15],[12,16],[13,17],[14,18],[15,19],[16,20],[17,21],[18,22],[19,23],[20,24],[21,25],[22,26],[23,27],[24,28],[25,29],[26,30],[27,31],[28,32],[29,33],[30,34],[31,35],[32,36],[33,37],[34,38],[35,39]], cost = [-1000,-900,-800,-700,-600,-500,-400,-300,-200,-100,0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15]], cost = [-1,2,-3,4,-5,6,-7,8,-9,10,-11,12,-13,14,-15,16]",
        "output": "[3120, 2002, 1680, 0, 660, 0, 1680, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [10000,-9999,9998,-9997,9996,-9995,9994,-9993,9992,-9991,9990,-9989,9988,-9987,9986]",
        "output": "[999600030000, 999200189988, 998200869890, 998201009832, 0, 997202469340, 0, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], cost = [1,2,3,4,5,6,7,8,9,10,11]",
        "output": "[990, 990, 126, 288, 550, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [1000,2000,3000,-4000,5000,-6000,7000,-8000,9000,-10000,11000,-12000,13000,-14000]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15]], cost = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[5,6],[5,7],[2,8],[2,9]], cost = [5,-5,10,-10,15,-15,20,-20,25,-25]",
        "output": "[12500, 12500, 0, 6000, 1, 6000, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], cost = [10,-10,20,-20,30,-30,40,-40,50,-50,60,-60,70,-70,80]",
        "output": "[336000, 336000, 336000, 336000, 336000, 336000, 336000, 336000, 336000, 336000, 336000, 336000, 0, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[1,6],[2,7],[2,8],[2,9],[3,10],[3,11],[3,12]], cost = [1,2,3,4,5,6,7,8,9,10,11,12,13]",
        "output": "[1716, 210, 720, 1716, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], cost = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220]",
        "output": "[9240000, 2184000, 4896000, 9240000, 660000, 1092000, 1680000, 2448000, 3420000, 4620000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24],[11,25],[11,26],[12,27],[12,28]], cost = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[21924, 4080, 7980, 13800, 21924, 1260, 1904, 2736, 3780, 5060, 6600, 8424, 10556, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24]], cost = [100,-100,200,-200,300,-300,400,-400,500,-500,600,-600,700,-700,800,-800,900,-900,1000,-1000,1100,-1100,1200,-1200,1300,-1300]",
        "output": "[1716000000, 504000000, 990000000, 1716000000, 0, 168000000, 0, 360000000, 0, 660000000, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17]], cost = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]",
        "output": "[4896, 2184, 4896, 360, 660, 1092, 1680, 2448, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], cost = [1000,-1000,2000,3000,4000,5000,-5000,6000,7000,8000,-8000,9000,-9000,10000,-10000,20000,30000,40000,50000,60000,70000]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [1000,900,800,700,600,500,400,300,200,100,-100,-200,-300,-400]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12]], cost = [100,-100,50,-50,25,-25,10,-10,5,-5,2,-2]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22]], cost = [100,-200,300,-400,500,-600,700,-800,900,-1000,1100,-1200,1300,-1400,1500,-1600,1700,-1800,1900,-2000,2100,-2200]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13]], cost = [5,-3,2,8,-7,1,4,-6,9,2,-8,5,3,-4]",
        "output": "[504, 378, 160, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [1,2,-2,-3,4,5,-6,-7,8,9,-10,-11,12,13]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[1,10],[1,11],[2,12],[2,13],[3,14],[3,15],[4,16],[4,17],[5,18],[5,19],[6,20],[6,21],[7,22],[7,23],[8,24],[8,25],[9,26],[9,27]], cost = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900]",
        "output": "[19656000000, 264000000, 546000000, 960000000, 1530000000, 2280000000, 3234000000, 4416000000, 5850000000, 7560000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[5,9],[5,10]], cost = [1,2,3,4,5,6,7,8,9,10,11]",
        "output": "[990, 360, 770, 288, 1, 660, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]], cost = [1,-1,1,-1,1,-1,1,-1,1,-1,1,-1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11]], cost = [100,50,200,-10,-20,300,150,-5,-30,25,40,60]",
        "output": "[9000000, 9000000, 3600000, 7500, 15000, 720000, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[2,8],[3,9],[3,10],[3,11],[4,12],[4,13],[5,14],[5,15],[6,16],[6,17],[7,18],[7,19],[8,20],[8,21]], cost = [2,3,-2,5,6,-3,1,-1,4,-4,7,8,-5,-6,9,10,-7,-8,11,12,-9,-10,13,14,-11,-12]",
        "output": "[1320, 540, 1080, 280, 180, 0, 56, 0, 360, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20]], cost = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], cost = [1,-1,2,-2,3,-3,4,-4,5,-5]",
        "output": "[100, 100, 100, 100, 100, 100, 100, 100, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], cost = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15]], cost = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[15,27],[15,28],[16,29],[16,30]], cost = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], cost = [-10,-20,-30,-40,-50,-60,-70,-80,-90]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[5,11],[6,12],[7,13],[8,14],[9,15],[10,16],[11,17],[12,18],[13,19],[14,20],[15,21],[16,22],[17,23],[18,24],[19,25],[20,26],[21,27],[22,28],[23,29],[24,30]], cost = [1,100,-1,101,-2,102,-3,103,-4,104,-5,105,-6,106,-7,107,-8,108,-9,109,-10,110,-11,111,-12,112,-13,113,-14]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[5,14],[6,15],[6,16],[7,17],[7,18],[8,19],[8,20],[9,21],[9,22],[10,23],[10,24]], cost = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500]",
        "output": "[13800000000, 4080000000, 7980000000, 13800000000, 780000000, 1260000000, 1904000000, 2736000000, 3780000000, 5060000000, 6600000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [10000,20000,30000,40000,50000,60000,70000,80000,90000,100000,110000,120000,130000,140000]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24]], cost = [100,-100,200,-200,300,-300,400,-400,500,-500,600,-600,700,-700,800,-800,900,-900,1000,-1000,1100,-1100,1200,-1200,1300,-1300,1400,-1400]",
        "output": "[1716000000, 1320000000, 1092000000, 720000000, 1320000000, 936000000, 0, 288000000, 0, 550000000, 0, 936000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], cost = [1000,500,250,125,62,31,15,7,3,1,0,-1,-2,-4,-8]",
        "output": "[125000000, 3875000, 116250, 2625, 0, 62, 480, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15]], cost = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20]], cost = [1,-2,3,-4,5,-6,7,-8,9,-10,11,-12,13,-14,15,-16,17,-18,19,-20]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21],[10,22],[10,23],[11,24],[11,25]], cost = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600]",
        "output": "[15600000000, 15600000000, 4896000000, 9240000000, 15600000000, 1092000000, 1680000000, 2448000000, 3420000000, 4620000000, 6072000000, 7800000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], cost = [1,-2,3,-4,5,-6,7,-8,9,-10,11]",
        "output": "[880, 880, 0, 288, 0, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12]], cost = [1000,-2000,3000,-4000,5000,-6000,7000,-8000,9000,-10000,11000,-12000]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23]], cost = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[5,11]], cost = [1,3,5,7,9,11,13,15,17,19,21,23]",
        "output": "[9177, 4845, 6279, 1785, 1, 5313, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], cost = [3,1,2,5,-1,-2,-3,7,8,6,4]",
        "output": "[336, 336, 12, 280, 0, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15]], cost = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "[3360, 2184, 1920, 360, 660, 1092, 1680, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15]], cost = [1,-2,3,-4,5,-6,7,-8,9,-10,11,-12,13,-14,15,-16]",
        "output": "[3360, 2184, 1920, 360, 0, 1092, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[5,6],[5,7],[2,8],[2,9]], cost = [1,2,3,4,-5,6,-7,8,9,10]",
        "output": "[720, 720, 270, 280, 1, 0, 1, 1, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], cost = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]], cost = [1,-2,3,-4,5,-6,7,-8,9,-10,11,-12]",
        "output": "Error: list index out of range"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]], cost = [1,-2,3,-4,5,-6,7,-8,9,-10,11,-12,13,-14,15,-16,17,-18,19,-20,21]",
        "output": "[7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 0, 1, 1]"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], cost = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "Error: list index out of range"
      }
    ]
  },
  {
    "id": 1987,
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").\nFind the number of unique good subsequences of binary.\n\nFor example, if binary = \"001\", then all the good subsequences are [\"0\", \"0\", \"1\"], so the unique good subsequences are \"0\" and \"1\". Note that subsequences \"00\", \"01\", and \"001\" are not good because they have leading zeros.\n\nReturn the number of unique good subsequences of binary. Since the answer may be very large, return it modulo 109 + 7.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nExample 1:\n\nInput: binary = \"001\"\nOutput: 2\nExplanation: The good subsequences of binary are [\"0\", \"0\", \"1\"].\nThe unique good subsequences are \"0\" and \"1\".\n\nExample 2:\n\nInput: binary = \"11\"\nOutput: 2\nExplanation: The good subsequences of binary are [\"1\", \"1\", \"11\"].\nThe unique good subsequences are \"1\" and \"11\".\nExample 3:\n\nInput: binary = \"101\"\nOutput: 5\nExplanation: The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. \nThe unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\".\n\n\u00a0\nConstraints:\n\n1 <= binary.length <= 105\nbinary consists of only '0's and '1's.\n\n",
    "starterCode": "class Solution:\n    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:\n        ",
    "testCases": [
      {
        "input": "binary = \"101\"",
        "output": "5"
      },
      {
        "input": "binary = \"1111\"",
        "output": "4"
      },
      {
        "input": "binary = \"1\"",
        "output": "1"
      },
      {
        "input": "binary = \"010101\"",
        "output": "13"
      },
      {
        "input": "binary = \"111000111\"",
        "output": "43"
      },
      {
        "input": "binary = \"10000100001\"",
        "output": "64"
      },
      {
        "input": "binary = \"1001001\"",
        "output": "26"
      },
      {
        "input": "binary = \"1010101010\"",
        "output": "144"
      },
      {
        "input": "binary = \"00000\"",
        "output": "1"
      },
      {
        "input": "binary = \"000000\"",
        "output": "1"
      },
      {
        "input": "binary = \"0000000000\"",
        "output": "1"
      },
      {
        "input": "binary = \"000\"",
        "output": "1"
      },
      {
        "input": "binary = \"001\"",
        "output": "2"
      },
      {
        "input": "binary = \"11\"",
        "output": "2"
      },
      {
        "input": "binary = \"0101010101\"",
        "output": "89"
      },
      {
        "input": "binary = \"1100110011\"",
        "output": "99"
      },
      {
        "input": "binary = \"0101010\"",
        "output": "21"
      },
      {
        "input": "binary = \"0\"",
        "output": "1"
      },
      {
        "input": "binary = \"111111\"",
        "output": "6"
      },
      {
        "input": "binary = \"100101010\"",
        "output": "76"
      },
      {
        "input": "binary = \"1000000000000000000000000000000000000000000000000000000000000001\"",
        "output": "127"
      },
      {
        "input": "binary = \"1101\"",
        "output": "8"
      },
      {
        "input": "binary = \"1001010\"",
        "output": "29"
      },
      {
        "input": "binary = \"01010101\"",
        "output": "34"
      },
      {
        "input": "binary = \"11010\"",
        "output": "13"
      },
      {
        "input": "binary = \"11111\"",
        "output": "5"
      },
      {
        "input": "binary = \"1111111111\"",
        "output": "10"
      },
      {
        "input": "binary = \"00000000000000000000000000000000000000000001\"",
        "output": "2"
      },
      {
        "input": "binary = \"11011011011011011011\"",
        "output": "7953"
      },
      {
        "input": "binary = \"10000000000000000001\"",
        "output": "39"
      },
      {
        "input": "binary = \"010101010101010101010101\"",
        "output": "75025"
      },
      {
        "input": "binary = \"11111111111111111111111111111111111111111110\"",
        "output": "87"
      },
      {
        "input": "binary = \"100000000000000000000000\"",
        "output": "25"
      },
      {
        "input": "binary = \"101010101010101010101010101010101010101010101010101\"",
        "output": "316290802"
      },
      {
        "input": "binary = \"10101010101010101010\"",
        "output": "17711"
      },
      {
        "input": "binary = \"010101010101010101010101010101010101010101010101010\"",
        "output": "951279875"
      },
      {
        "input": "binary = \"0000000011111111\"",
        "output": "9"
      },
      {
        "input": "binary = \"11110000111100001111000011110000\"",
        "output": "121393"
      },
      {
        "input": "binary = \"110110110110\"",
        "output": "265"
      },
      {
        "input": "binary = \"11111000001111100000\"",
        "output": "836"
      },
      {
        "input": "binary = \"1010101010101\"",
        "output": "610"
      },
      {
        "input": "binary = \"111000111000\"",
        "output": "142"
      },
      {
        "input": "binary = \"1001001001001001001001001001001001\"",
        "output": "3650401"
      },
      {
        "input": "binary = \"0101010101010101010101010101\"",
        "output": "514229"
      },
      {
        "input": "binary = \"010101010101\"",
        "output": "233"
      },
      {
        "input": "binary = \"1010101010101010101010101010101010101010\"",
        "output": "267914296"
      },
      {
        "input": "binary = \"0101010101010101\"",
        "output": "1597"
      },
      {
        "input": "binary = \"1111111111111111111111111111111111111111\"",
        "output": "40"
      },
      {
        "input": "binary = \"11001100110011001100\"",
        "output": "8119"
      },
      {
        "input": "binary = \"000000000001\"",
        "output": "2"
      },
      {
        "input": "binary = \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110\"",
        "output": "199"
      },
      {
        "input": "binary = \"01010101010101010101010101010101010101010101010\"",
        "output": "807526948"
      },
      {
        "input": "binary = \"10101010101010101010101\"",
        "output": "75025"
      },
      {
        "input": "binary = \"1001001001\"",
        "output": "97"
      },
      {
        "input": "binary = \"11001010010111\"",
        "output": "545"
      },
      {
        "input": "binary = \"000111111111111111111111111111111111111111111111111\"",
        "output": "49"
      },
      {
        "input": "binary = \"111111111111111111111111\"",
        "output": "24"
      },
      {
        "input": "binary = \"11111111111111111111111111111111111111111111\"",
        "output": "44"
      },
      {
        "input": "binary = \"1001001001001001001001001001001001001001001001001001001001\"",
        "output": "379190178"
      },
      {
        "input": "binary = \"000000000000000000000000000000000000000000000000001\"",
        "output": "2"
      },
      {
        "input": "binary = \"0101010101010101010101010101010101010101\"",
        "output": "165580141"
      },
      {
        "input": "binary = \"110110110110110110\"",
        "output": "3691"
      },
      {
        "input": "binary = \"1111000011110000\"",
        "output": "377"
      },
      {
        "input": "binary = \"000000000000\"",
        "output": "1"
      },
      {
        "input": "binary = \"1111100000011111\"",
        "output": "191"
      },
      {
        "input": "binary = \"1111111111111111111111111111\"",
        "output": "28"
      },
      {
        "input": "binary = \"111000111000111000111000111000111000111000111000111000111\"",
        "output": "619446900"
      },
      {
        "input": "binary = \"110101010101\"",
        "output": "377"
      },
      {
        "input": "binary = \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\"",
        "output": "2"
      },
      {
        "input": "binary = \"1001001001001001\"",
        "output": "1351"
      },
      {
        "input": "binary = \"1100110011001100\"",
        "output": "1393"
      },
      {
        "input": "binary = \"00000000000000000000000000000000\"",
        "output": "1"
      },
      {
        "input": "binary = \"01010101010101010101010101010101010101010101\"",
        "output": "134903163"
      },
      {
        "input": "binary = \"1010101010101010101010101010101010101010101010101011\"",
        "output": "681301736"
      },
      {
        "input": "binary = \"10111001001010011001\"",
        "output": "8492"
      },
      {
        "input": "binary = \"11111111111111111110\"",
        "output": "39"
      },
      {
        "input": "binary = \"111000111000111000111000111000111000111000111000\"",
        "output": "239244622"
      },
      {
        "input": "binary = \"101010101010\"",
        "output": "377"
      },
      {
        "input": "binary = \"000000000011111111110000000000\"",
        "output": "111"
      },
      {
        "input": "binary = \"00000000000000000000\"",
        "output": "1"
      },
      {
        "input": "binary = \"1111100000111110000011111\"",
        "output": "4341"
      },
      {
        "input": "binary = \"100100100100100100100100100100100100100100100100100\"",
        "output": "694626305"
      },
      {
        "input": "binary = \"000111000111000\"",
        "output": "142"
      },
      {
        "input": "binary = \"001100110011\"",
        "output": "99"
      },
      {
        "input": "binary = \"11000110001100011000\"",
        "output": "4401"
      },
      {
        "input": "binary = \"1000000000000000001\"",
        "output": "37"
      },
      {
        "input": "binary = \"111100001111000011110000111100001111000011110000111\"",
        "output": "133957148"
      },
      {
        "input": "binary = \"10010101010101010101\"",
        "output": "15127"
      },
      {
        "input": "binary = \"01010101010101010101\"",
        "output": "10946"
      },
      {
        "input": "binary = \"0001111111000\"",
        "output": "29"
      }
    ]
  },
  {
    "id": 691,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Memoization",
      "Array",
      "Hash Table",
      "String",
      "Dynamic Programming",
      "Backtracking",
      "Bitmask"
    ],
    "problemDescription": "We are given n different types of stickers. Each sticker has a lowercase English word on it.\nYou would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\nReturn the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.\nNote: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.\n\u00a0\nExample 1:\n\nInput: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"\nOutput: 3\nExplanation:\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\nAlso, this is the minimum number of stickers necessary to form the target string.\n\nExample 2:\n\nInput: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"\nOutput: -1\nExplanation:\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers.\n\n\u00a0\nConstraints:\n\nn == stickers.length\n1 <= n <= 50\n1 <= stickers[i].length <= 10\n1 <= target.length <= 15\nstickers[i] and target consist of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def minStickers(self, stickers: List[str], target: str) -> int:\n        ",
    "testCases": [
      {
        "input": "stickers = [\"aaa\",\"bbb\"], target = \"aabbbccc\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"a\",\"b\",\"c\"], target = \"abc\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"abc\",\"abc\"], target = \"abcabc\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"abcd\"], target = \"abcdabcd\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"abc\"], target = \"d\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"notice\",\"possible\"], target = \"basicbasic\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"abc\"], target = \"abcd\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"abc\",\"ab\",\"bc\"], target = \"abc\"",
        "output": "1"
      },
      {
        "input": "stickers = [\"abc\",\"def\"], target = \"abcdef\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"a\"], target = \"a\"",
        "output": "1"
      },
      {
        "input": "stickers = [\"aabbcc\",\"abc\"], target = \"aabbbccc\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"hello\",\"world\"], target = \"hold\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"abc\",\"def\",\"ghi\"], target = \"adgbehcfi\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"aabb\",\"ccdd\"], target = \"abcd\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"hello\",\"world\"], target = \"helloworld\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"aaa\",\"aa\",\"a\"], target = \"aaaaaaaaa\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"abc\",\"def\",\"ghi\"], target = \"helloworldabcdefghidefghidefghidefghidefghidefghidefghidefghi\"",
        "output": null
      },
      {
        "input": "stickers = [\"xyz\",\"zyx\",\"yxz\"], target = \"zyxyzyxyzyx\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"again\"], target = \"aginwodlloleh\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"abcdef\",\"ghijkl\",\"mnopqr\"], target = \"abcdefghijklmnopqr\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"mississippi\",\"helloworld\"], target = \"mississippiworldhello\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"aabb\",\"bbcc\",\"cdda\"], target = \"aabbccddaabb\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"sun\",\"moon\",\"star\"], target = \"starstarsun\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"one\",\"two\",\"three\",\"four\",\"five\"], target = \"onetwothreefourfive\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"mississippi\",\"pennsylvania\"], target = \"mississippipennsylvania\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"aaaaa\",\"bbbbb\",\"ccccc\",\"ddddd\",\"eeeee\"], target = \"abcdeabcde\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"flower\",\"garden\",\"sun\",\"moon\",\"star\"], target = \"flowergardenstar\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"aabbcc\",\"abcabc\",\"aabbc\"], target = \"abcabcabc\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"alphabet\",\"soup\",\"letters\",\"words\",\"sticker\",\"pack\"], target = \"alphabetwordsoupstickersoup\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"ab\",\"bc\",\"cd\"], target = \"abcdabcd\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"quick\",\"brown\",\"fox\"], target = \"quickbrownfox\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"abcd\",\"efgh\",\"ijkl\"], target = \"dgheijlkfabci\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"apple\",\"banana\",\"cherry\"], target = \"bananaapple\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"red\",\"blue\",\"green\"], target = \"bluegreenred\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"abcd\",\"dcba\",\"abdc\",\"bacd\"], target = \"abcdabcd\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"zzz\",\"zzzz\",\"zzzzz\"], target = \"zzzzzzzzzzzzzzz\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"programming\",\"is\",\"fun\"], target = \"funisprogramming\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"leetcode\",\"love\",\"coding\"], target = \"lovecodingleetcode\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"python\"], target = \"pythonhello\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"aabbcc\",\"abc\",\"abac\"], target = \"aabbccabc\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"abacd\",\"bdfgh\",\"cdhij\",\"efgik\",\"ghklm\"], target = \"abcdefghijklim\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"again\"], target = \"againhelloagainworld\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"puzzle\",\"piece\",\"fit\"], target = \"fittingpuzzle\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"happy\",\"birthday\",\"friend\"], target = \"happybirthdayfriend\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"aaa\",\"bbb\",\"ccc\"], target = \"aabbbccc\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"abc\",\"def\",\"ghi\",\"jkl\"], target = \"helloworldabcdefghijk\"",
        "output": "6"
      },
      {
        "input": "stickers = [\"sunshine\",\"rainbow\",\"cloud\"], target = \"sunshinecloud\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"xyz\",\"abc\",\"def\",\"ghi\"], target = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"zoo\",\"book\",\"look\"], target = \"bookzoolook\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"magic\",\"wand\",\"spell\"], target = \"spellmagic\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"aabbcc\",\"bbccdd\",\"aaccdd\"], target = \"aabbccddee\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"cat\",\"dog\",\"bird\"], target = \"cattog\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"orange\",\"juice\",\"smoothie\"], target = \"smoothieorangejuice\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"aabb\",\"bbcc\",\"ccdd\"], target = \"bbaaccd\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\"], target = \"quickbrownfoxjumpsoveralazydog\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"algorithm\",\"data\",\"structure\"], target = \"datadstructure\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"cat\",\"bat\",\"rat\",\"car\"], target = \"catabtar\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"zebra\",\"lion\",\"tiger\"], target = \"tigerlionzebra\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"zebra\",\"xylophone\",\"quartz\",\"violet\",\"umbrella\"], target = \"quartzxylophonevioletzebraumbrella\"",
        "output": "Execution timed out"
      },
      {
        "input": "stickers = [\"apple\",\"banana\",\"cherry\"], target = \"bananaapplecherry\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"algorithm\",\"data\",\"structure\"], target = \"algorithmdatastructure\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"repeat\",\"again\",\"once\"], target = \"repeatagainonce\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"sticker\",\"stamps\",\"books\"], target = \"tsickerbomskps\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"abcd\",\"dcba\",\"efgh\",\"hgf\",\"ijkl\",\"lkji\"], target = \"abcdefghijklij\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"abcdefg\",\"ghijklm\",\"nopqrstu\",\"vwxyz\"], target = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"aaaa\",\"bbbb\",\"cccc\"], target = \"aabbcc\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"aabbccddeeff\",\"bbccddeeffgghh\",\"ccddeeffgghhiijj\"], target = \"aabbccddeeffgghhiijj\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"sticker\",\"book\",\"a\"], target = \"stickers\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"x\",\"y\",\"z\"], target = \"zyxzyxzyx\"",
        "output": "9"
      },
      {
        "input": "stickers = [\"abcd\",\"efgh\",\"ijkl\"], target = \"ijklabcdeffgh\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"sticker\",\"book\",\"target\"], target = \"booktarget\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"python\"], target = \"pythonworldhello\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"aabbcc\",\"ddeeff\",\"gghhii\",\"jjkkll\",\"mmnnoo\"], target = \"aabbccddeeffgghhiijjkkllmmnnoo\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"jump\",\"over\",\"lazy\"], target = \"jumplazyover\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"abcdef\",\"ghijkl\",\"mnopqr\",\"stuvwx\",\"yzabcd\"], target = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"abcdefghij\",\"klmnopqrst\",\"uvwxyz\",\"mnopqrstuv\",\"wxyzabcde\"], target = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"again\"], target = \"helloworldhelloagainworld\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"unique\",\"letters\"], target = \"uniquelettersuniqueletters\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"cat\",\"dog\",\"bird\"], target = \"birdcatdog\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"example\",\"science\",\"with\"], target = \"thehatexample\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"abcdef\",\"ghijkl\",\"mnopqr\",\"stuvwx\",\"yz\"], target = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"laptop\",\"phone\",\"tablet\"], target = \"telephonetablet\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"abcd\",\"efgh\",\"ijkl\"], target = \"abcdefghijlkl\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"random\",\"words\",\"here\",\"to\",\"test\",\"sticker\",\"functionality\"], target = \"randomwordsherefunctionalityteststicker\"",
        "output": "Execution timed out"
      },
      {
        "input": "stickers = [\"abcdef\",\"ghijkl\",\"mnopqr\"], target = \"mnopqrfedcba\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"overlap\",\"partial\",\"coverage\"], target = \"overlappartialcoverage\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"aabb\",\"bbcc\",\"ccdd\",\"ddeeff\",\"ffgg\"], target = \"aabbccddeeffgg\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"zzz\",\"yyy\",\"xxx\",\"www\"], target = \"zzzyyyxxxwww\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"coding\",\"is\",\"fun\"], target = \"sindgnif\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"happy\",\"birthday\",\"party\"], target = \"birthdaypartyparty\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"zzzz\",\"yyyy\",\"xxxx\"], target = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"pizza\",\"pie\",\"cake\"], target = \"pizzacakepie\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"fox\",\"quick\",\"brown\"], target = \"brownquickfox\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"sticky\",\"loop\",\"again\"], target = \"programming\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"python\",\"java\",\"cplus\"], target = \"javapythoncpluspython\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"steak\",\"egg\",\"bacon\"], target = \"eggnestake\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"xy\",\"yz\",\"zx\"], target = \"xyzyzxzyxzyzx\"",
        "output": "7"
      },
      {
        "input": "stickers = [\"abcdef\",\"ghijkl\",\"mnopqr\",\"stuvwx\",\"yzabcd\",\"efghij\",\"klmnop\",\"qrstuv\",\"wxzyab\"], target = \"abcdefghijklmnopqrstuvwxyzabc\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], target = \"onetwothreefourfivesix\"",
        "output": "6"
      },
      {
        "input": "stickers = [\"one\",\"two\",\"three\"], target = \"onetwothreeonetwothree\"",
        "output": "6"
      },
      {
        "input": "stickers = [\"dog\",\"cat\",\"bird\"], target = \"catdogbird\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"one\",\"two\",\"three\"], target = \"onetwothree\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"red\",\"green\",\"blue\"], target = \"greenbluegreengreen\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], target = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "Execution timed out"
      },
      {
        "input": "stickers = [\"up\",\"down\",\"left\",\"right\"], target = \"rightleftdownup\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"red\",\"blue\",\"green\",\"yellow\",\"purple\"], target = \"bluegreenyellowpurple\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"one\",\"two\",\"three\"], target = \"threetwoone\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"quick\",\"brown\",\"fox\"], target = \"uqcfkibrowno\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"a\",\"ab\",\"abc\",\"abcd\",\"abcde\"], target = \"abcdeabcde\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"cat\",\"dog\",\"bird\"], target = \"cogbat\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"programming\",\"in\",\"python\"], target = \"grammipnnoingtih\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"aabbcc\",\"bbccdd\",\"ccddeeff\",\"ddeeffgg\"], target = \"aabbccddeeffgg\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"apple\",\"banana\",\"cherry\",\"date\"], target = \"abacaxibananacherry\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"abcdefgh\",\"ijklmnop\",\"qrstuvwx\",\"yz\"], target = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"abc\",\"bcd\",\"cde\",\"def\",\"efg\"], target = \"abcdefg\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"red\",\"blue\",\"green\"], target = \"greengreenblue\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"python\"], target = \"worldhellopython\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"zzz\",\"yyy\",\"xxx\"], target = \"zzzyyyxxx\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"fast\",\"food\",\"truck\"], target = \"truckfastfood\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"abcd\",\"dcba\",\"abcd\"], target = \"abcdabcdabcd\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"test\",\"cases\",\"here\",\"for\",\"the\",\"sticker\",\"problem\"], target = \"testcaseshereforthestickerproblem\"",
        "output": "Execution timed out"
      },
      {
        "input": "stickers = [\"aabbcc\",\"ddeeff\",\"gghhii\"], target = \"abcdefghi\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"foo\",\"bar\",\"baz\"], target = \"helloworldfoobarbaz\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"python\",\"programming\"], target = \"helloprogrammingworld\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"repeated\",\"words\",\"here\"], target = \"repeatedwordshere\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"happy\",\"new\",\"year\"], target = \"happynewyear\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"jump\",\"high\",\"long\"], target = \"highjumplong\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"sticker\",\"sticker\",\"sticker\"], target = \"stickers\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"ab\",\"cd\",\"ef\",\"gh\",\"ij\",\"kl\",\"mn\",\"op\",\"qr\",\"st\",\"uv\",\"wx\",\"yz\"], target = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "13"
      },
      {
        "input": "stickers = [\"abcd\",\"efgh\",\"ijkl\",\"mnop\",\"qrst\",\"uvwx\",\"yz\"], target = \"abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzz\"",
        "output": "Execution timed out"
      },
      {
        "input": "stickers = [\"ab\",\"bc\",\"ca\"], target = \"abcabcabc\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"repeated\",\"words\",\"here\",\"in\",\"this\",\"example\"], target = \"repeatedwordshereinthisexample\"",
        "output": "6"
      },
      {
        "input": "stickers = [\"abcd\",\"efgh\",\"ijkl\"], target = \"fedcbahjiglke\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"hello\",\"world\",\"wide\"], target = \"worldwide\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"abcdefg\",\"hijklmn\",\"opqrstu\",\"vwxyz\"], target = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"jump\",\"over\",\"lazy\"], target = \"lazyjumpover\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"sun\",\"moon\",\"star\"], target = \"moonstarsun\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"apple\",\"orange\",\"banana\"], target = \"poeplange\"",
        "output": "2"
      },
      {
        "input": "stickers = [\"one\",\"two\",\"three\"], target = \"threethreetwoone\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"xylophone\",\"piano\",\"violin\"], target = \"xylophonepianoviolin\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"aabbcc\",\"bbccdd\",\"ccddaa\"], target = \"aabbccbbccddccddaa\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"abcdef\",\"abcde\",\"abcd\"], target = \"abcdef\"",
        "output": "1"
      },
      {
        "input": "stickers = [\"abcde\",\"fghij\",\"klmno\"], target = \"ejihfckgmldnbaio\"",
        "output": "4"
      },
      {
        "input": "stickers = [\"abcdef\",\"ghijkl\",\"mnopqr\"], target = \"jklmnopqrfgedbica\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"abc\",\"def\",\"ghi\",\"jkl\"], target = \"abcdefghijkln\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"abcde\",\"fghij\",\"klmno\",\"pqrst\",\"uvwxy\"], target = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "-1"
      },
      {
        "input": "stickers = [\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\"], target = \"quickbrownfoxjumpsoverlazydog\"",
        "output": "7"
      },
      {
        "input": "stickers = [\"race\",\"car\",\"seat\"], target = \"crecarstae\"",
        "output": "3"
      },
      {
        "input": "stickers = [\"xy\",\"yx\",\"zz\"], target = \"zyxzyxzyx\"",
        "output": "5"
      },
      {
        "input": "stickers = [\"xy\",\"yz\",\"za\",\"ax\"], target = \"xyzaxyzaxyza\"",
        "output": "6"
      },
      {
        "input": "stickers = [\"the\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\"], target = \"thequickbrownfoxjumpsoveralazydog\"",
        "output": "Execution timed out"
      },
      {
        "input": "stickers = [\"cat\",\"dog\",\"bird\"], target = \"birdcattwo\"",
        "output": "-1"
      }
    ]
  },
  {
    "id": 2009,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sliding Window"
    ],
    "problemDescription": "You are given an integer array nums. In one operation, you can replace any element in nums with any integer.\nnums is considered continuous if both of the following conditions are fulfilled:\n\nAll elements in nums are unique.\nThe difference between the maximum element and the minimum element in nums equals nums.length - 1.\n\nFor example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous.\nReturn the minimum number of operations to make nums continuous.\n\u00a0\nExample 1:\n\nInput: nums = [4,2,5,3]\nOutput: 0\nExplanation:\u00a0nums is already continuous.\n\nExample 2:\n\nInput: nums = [1,2,3,5,6]\nOutput: 1\nExplanation:\u00a0One possible solution is to change the last element to 4.\nThe resulting array is [1,2,3,5,4], which is continuous.\n\nExample 3:\n\nInput: nums = [1,10,100,1000]\nOutput: 3\nExplanation:\u00a0One possible solution is to:\n- Change the second element to 2.\n- Change the third element to 3.\n- Change the fourth element to 4.\nThe resulting array is [1,2,3,4], which is continuous.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n\n",
    "starterCode": "class Solution:\n    def minOperations(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [10,10,10,10]",
        "output": "3"
      },
      {
        "input": "nums = [4,2,5,3]",
        "output": "0"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,2,3,4,5]",
        "output": "2"
      },
      {
        "input": "nums = [5,6,7,8,9,1]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,7,9]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000,1,2,3,4]",
        "output": "1"
      },
      {
        "input": "nums = [1000000000]",
        "output": "0"
      },
      {
        "input": "nums = [100,101,102,1]",
        "output": "1"
      },
      {
        "input": "nums = [5,5,5,5,5]",
        "output": "4"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "5"
      },
      {
        "input": "nums = [1000000000,1,2,3,4,5]",
        "output": "1"
      },
      {
        "input": "nums = [2,3,5,8,9,10]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "nums = [1,10,100,1000]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "nums = [10,5,1,2,7]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,2,3,4]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,5,6]",
        "output": "1"
      },
      {
        "input": "nums = [10,5,7,11,6]",
        "output": "2"
      },
      {
        "input": "nums = [5,3,1,2,4]",
        "output": "0"
      },
      {
        "input": "nums = [10,5,3,11,6]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "0"
      },
      {
        "input": "nums = [5,3,1,4,2]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000,1,2,3,4,5,6,7,8,9]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "4"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000,1000000]",
        "output": "6"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1000000000, 2000000000, 3000000000, 4000000000]",
        "output": "4"
      },
      {
        "input": "nums = [5,6,7,8,9,1,2,3,4,10]",
        "output": "0"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "16"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "14"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]",
        "output": "14"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "9"
      },
      {
        "input": "nums = [1,1000000000,2,999999999,3,999999998]",
        "output": "3"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 2, 11, 101, 1001, 10001, 100001, 1000001, 10000001, 100000001, 1000000001]",
        "output": "16"
      },
      {
        "input": "nums = [1, 1000000000]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "0"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000]",
        "output": "19"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "9"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]",
        "output": "7"
      },
      {
        "input": "nums = [1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "19"
      },
      {
        "input": "nums = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496]",
        "output": "24"
      },
      {
        "input": "nums = [10, 21, 32, 43, 54, 65, 76, 87, 98, 109, 120, 131, 142, 153, 164, 175, 186, 197, 208, 219]",
        "output": "18"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 6]",
        "output": "4"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11]",
        "output": "9"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "7"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "15"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "10"
      },
      {
        "input": "nums = [1000000000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "nums = [5,6,15,16,25,26,35,36,45,46,55,56,65,66,75,76,85,86,95,96]",
        "output": "16"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "nums = [3,7,15,20,25,30,35,40,45,50,55,60,65,70,75]",
        "output": "12"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1000000000, 2, 999999999, 3, 999999998, 4, 999999997, 5, 999999996, 6, 999999995]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "0"
      },
      {
        "input": "nums = [2,1,3,4,7,6,5,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]",
        "output": "6"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "10"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "7"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "14"
      },
      {
        "input": "nums = [1,2,3,4,5,10,11,12,13,14,15,16,17,18,19]",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40]",
        "output": "6"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15]",
        "output": "15"
      },
      {
        "input": "nums = [1,3,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "7"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "7"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]",
        "output": "12"
      },
      {
        "input": "nums = [1,2,2,3,4,5,6,6,7,8,8,9,10,11,12,13,14,15,15,16]",
        "output": "4"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300]",
        "output": "27"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,12,14,16,18,20]",
        "output": "3"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 1000000000, 2000000000]",
        "output": "2"
      },
      {
        "input": "nums = [1, 10, 19, 28, 37, 46, 55, 64, 73, 82, 91, 100, 109, 118, 127, 136, 145, 154, 163, 172, 181, 190, 199, 208, 217, 226]",
        "output": "23"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]",
        "output": "0"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205]",
        "output": "18"
      },
      {
        "input": "nums = [1, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "10"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,11,12,13,14,15,16,17,18,19,20]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "0"
      },
      {
        "input": "nums = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140]",
        "output": "13"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10]",
        "output": "12"
      },
      {
        "input": "nums = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]",
        "output": "8"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5]",
        "output": "9"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]",
        "output": "5"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]",
        "output": "8"
      },
      {
        "input": "nums = [1000000, 1000001, 1000002, 1000004, 1000005, 1000007, 1000008, 1000010, 1000011, 1000013]",
        "output": "3"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "5"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]",
        "output": "0"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "9"
      },
      {
        "input": "nums = [1, 1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005, 1000000006, 1000000007, 1000000008, 1000000009, 1000000010, 1000000011, 1000000012, 1000000013]",
        "output": "1"
      },
      {
        "input": "nums = [5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20]",
        "output": "2"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500]",
        "output": "14"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
        "output": "16"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "0"
      },
      {
        "input": "nums = [1, 100, 101, 200, 201, 300, 301, 400, 401, 500, 501, 600, 601, 700, 701, 800, 801, 900, 901, 1000]",
        "output": "18"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "18"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60]",
        "output": "5"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]",
        "output": "22"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "1"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "13"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000, 999999999, 999999998, 999999997, 999999996, 999999995]",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500]",
        "output": "45"
      },
      {
        "input": "nums = [1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000]",
        "output": "8"
      },
      {
        "input": "nums = [1, 1000000000, 2, 999999999, 3, 999999998, 4, 999999997, 5, 999999996]",
        "output": "5"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 200, 201, 202, 203, 204]",
        "output": "5"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "0"
      },
      {
        "input": "nums = [1000000000, 1000000001, 1000000002, 1000000003, 1000000004, 1000000005]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "10"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "18"
      },
      {
        "input": "nums = [1000000000, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
        "output": "7"
      },
      {
        "input": "nums = [1, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000]",
        "output": "30"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21]",
        "output": "5"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "14"
      },
      {
        "input": "nums = [5,4,3,2,1,10,9,8,7,6]",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "9"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209]",
        "output": "10"
      },
      {
        "input": "nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "0"
      },
      {
        "input": "nums = [1,100,2,99,3,98,4,97,5,96,6,95,7,94,8,93,9,92,10,91]",
        "output": "10"
      },
      {
        "input": "nums = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971]",
        "output": "0"
      },
      {
        "input": "nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]",
        "output": "0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "13"
      }
    ]
  },
  {
    "id": 3123,
    "difficulty": "Hard",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Graph",
      "Shortest Path",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an undirected weighted graph of n nodes numbered from 0 to n - 1. The graph consists of m edges represented by a 2D array edges, where edges[i] = [ai, bi, wi] indicates that there is an edge between nodes ai and bi with weight wi.\nConsider all the shortest paths from node 0 to node n - 1 in the graph. You need to find a boolean array answer where answer[i] is true if the edge edges[i] is part of at least one shortest path. Otherwise, answer[i] is false.\nReturn the array answer.\nNote that the graph may not be connected.\n\u00a0\nExample 1:\n\n\nInput: n = 6, edges = [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]\nOutput: [true,true,true,false,true,true,true,false]\nExplanation:\nThe following are all the shortest paths between nodes 0 and 5:\n\nThe path 0 -> 1 -> 5: The sum of weights is 4 + 1 = 5.\nThe path 0 -> 2 -> 3 -> 5: The sum of weights is 1 + 1 + 3 = 5.\nThe path 0 -> 2 -> 3 -> 1 -> 5: The sum of weights is 1 + 1 + 2 + 1 = 5.\n\n\nExample 2:\n\n\nInput: n = 4, edges = [[2,0,1],[0,1,1],[0,3,4],[3,2,2]]\nOutput: [true,false,false,true]\nExplanation:\nThere is one shortest path between nodes 0 and 3, which is the path 0 -> 2 -> 3 with the sum of weights 1 + 2 = 3.\n\n\u00a0\nConstraints:\n\n2 <= n <= 5 * 104\nm == edges.length\n1 <= m <= min(5 * 104, n * (n - 1) / 2)\n0 <= ai, bi < n\nai != bi\n1 <= wi <= 105\nThere are no repeated edges.\n\n",
    "starterCode": "class Solution:\n    def findAnswer(self, n: int, edges: List[List[int]]) -> List[bool]:\n        ",
    "testCases": [
      {
        "input": "n = 5, edges = [[0,1,2],[0,2,2],[1,2,3],[1,3,2],[2,3,1],[2,4,4],[3,4,2]]",
        "output": "[False, True, False, False, True, False, True]"
      },
      {
        "input": "n = 7, edges = [[0,1,2],[0,2,5],[1,2,1],[1,3,4],[2,3,2],[3,4,1],[4,5,3],[5,6,2]]",
        "output": "[True, False, True, False, True, True, True, True]"
      },
      {
        "input": "n = 5, edges = [[0,1,2],[0,2,3],[1,2,1],[1,3,4],[2,3,2],[3,4,1]]",
        "output": "[True, True, True, False, True, True]"
      },
      {
        "input": "n = 10, edges = [[0,1,1],[0,2,1],[0,3,1],[1,4,1],[1,5,1],[2,6,1],[2,7,1],[3,8,1],[3,9,1],[4,5,1],[6,7,1],[8,9,1]]",
        "output": "[False, False, True, False, False, False, False, False, True, False, False, False]"
      },
      {
        "input": "n = 7, edges = [[0,1,3],[1,2,2],[2,3,1],[3,4,1],[4,5,2],[5,6,3]]",
        "output": "[True, True, True, True, True, True]"
      },
      {
        "input": "n = 5, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[0,4,10]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 3, edges = [[0,1,1],[0,2,5],[1,2,2]]",
        "output": "[True, False, True]"
      },
      {
        "input": "n = 4, edges = [[2,0,1],[0,1,1],[0,3,4],[3,2,2]]",
        "output": "[True, False, False, True]"
      },
      {
        "input": "n = 6, edges = [[0,1,4],[0,2,1],[1,3,2],[1,4,3],[1,5,1],[2,3,1],[3,5,3],[4,5,2]]",
        "output": "[True, True, True, False, True, True, True, False]"
      },
      {
        "input": "n = 3, edges = [[0,1,1],[1,2,1],[0,2,4]]",
        "output": "[True, True, False]"
      },
      {
        "input": "n = 15, edges = [[0,1,1],[0,2,1],[1,3,1],[1,4,1],[2,5,1],[2,6,1],[3,7,1],[3,8,1],[4,9,1],[4,10,1],[5,11,1],[5,12,1],[6,13,1],[6,14,1],[7,8,1],[9,10,1],[11,12,1],[13,14,1]]",
        "output": "[False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False]"
      },
      {
        "input": "n = 25, edges = [[0,1,5],[0,2,5],[1,3,3],[1,4,2],[2,5,3],[2,6,4],[3,7,1],[3,8,2],[4,9,1],[5,10,2],[5,11,3],[6,12,1],[6,13,4],[7,14,1],[7,15,2],[8,16,1],[8,17,2],[9,18,2],[10,19,1],[10,20,2],[11,21,2],[11,22,1],[12,23,1],[12,24,2],[13,23,2],[13,24,3]]",
        "output": "[False, True, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, True, False, False]"
      },
      {
        "input": "n = 10, edges = [[0,1,5],[0,2,2],[1,3,1],[1,4,6],[2,5,3],[3,6,2],[4,7,4],[5,8,5],[6,9,1],[7,9,3],[8,9,2]]",
        "output": "[True, False, True, False, False, True, False, False, True, False, False]"
      },
      {
        "input": "n = 15, edges = [[0,1,10],[0,2,20],[1,3,5],[1,4,10],[2,5,15],[3,6,20],[4,7,25],[5,8,30],[6,9,35],[7,10,40],[8,11,45],[9,12,50],[10,13,55],[11,14,60],[0,6,65],[1,7,70],[2,8,75],[3,9,80],[4,10,85],[5,11,90],[6,12,95],[7,13,100],[8,14,105]]",
        "output": "[False, True, False, False, True, False, False, True, False, False, True, False, False, True, False, False, False, False, False, False, False, False, True]"
      },
      {
        "input": "n = 12, edges = [[0,1,3],[0,2,2],[1,3,1],[2,4,4],[3,5,2],[4,6,3],[5,7,1],[6,8,5],[7,9,2],[8,10,1],[9,11,3],[10,11,2],[0,5,7],[1,6,8],[2,7,9],[3,8,10],[4,9,11]]",
        "output": "[True, False, True, False, True, False, True, False, True, False, True, False, False, False, False, False, False]"
      },
      {
        "input": "n = 10, edges = [[0,1,2],[1,2,2],[2,3,1],[3,4,3],[4,5,2],[5,6,1],[6,7,2],[7,8,3],[8,9,2],[0,9,10]]",
        "output": "[False, False, False, False, False, False, False, False, False, True]"
      },
      {
        "input": "n = 15, edges = [[0,1,1],[0,2,2],[1,3,1],[1,4,2],[2,5,3],[2,6,4],[3,7,2],[3,8,3],[4,9,1],[4,10,4],[5,11,2],[5,12,3],[6,13,4],[6,14,5],[7,8,1],[9,10,2],[11,12,3],[13,14,4]]",
        "output": "[False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False, False]"
      },
      {
        "input": "n = 10, edges = [[0,1,2],[0,2,4],[0,3,1],[1,4,3],[1,5,1],[2,3,2],[2,6,5],[3,7,1],[4,8,2],[5,8,3],[6,9,4],[7,9,3],[8,9,1]]",
        "output": "[False, False, True, False, False, False, False, True, False, False, False, True, False]"
      },
      {
        "input": "n = 7, edges = [[0,1,5],[0,2,10],[1,2,1],[1,3,4],[2,3,2],[3,4,3],[4,5,2],[5,6,1],[6,0,3]]",
        "output": "[False, False, False, False, False, False, False, False, True]"
      },
      {
        "input": "n = 12, edges = [[0,1,2],[0,2,4],[1,3,3],[1,4,1],[2,4,2],[2,5,5],[3,6,2],[4,6,1],[4,7,4],[5,8,3],[6,9,2],[7,10,1],[8,10,3],[9,11,2],[10,11,1]]",
        "output": "[True, False, False, True, False, False, False, True, False, False, True, False, False, True, False]"
      },
      {
        "input": "n = 7, edges = [[0,1,1],[0,2,2],[0,3,3],[1,2,4],[1,3,5],[2,4,6],[2,5,7],[3,4,8],[3,5,9],[4,6,10],[5,6,11]]",
        "output": "[False, True, False, False, False, True, False, False, False, True, False]"
      },
      {
        "input": "n = 7, edges = [[0,1,5],[0,2,3],[1,3,2],[2,3,1],[3,4,4],[4,5,2],[5,6,1],[2,4,6],[0,5,7],[1,6,8]]",
        "output": "[False, False, False, False, False, False, True, False, True, False]"
      },
      {
        "input": "n = 9, edges = [[0,1,1],[0,2,2],[0,3,3],[1,4,4],[1,5,5],[2,6,6],[2,7,7],[3,8,8],[4,5,9],[4,6,10],[5,7,11],[6,8,12],[7,8,13]]",
        "output": "[False, False, True, False, False, False, False, True, False, False, False, False, False]"
      },
      {
        "input": "n = 10, edges = [[0,1,5],[0,2,3],[1,3,2],[1,4,6],[2,5,4],[2,6,2],[3,7,3],[4,8,1],[5,8,3],[6,9,5],[7,9,2],[8,9,4]]",
        "output": "[False, True, False, False, False, True, False, False, False, True, False, False]"
      },
      {
        "input": "n = 8, edges = [[0,1,10],[0,2,5],[1,3,2],[1,4,1],[2,3,3],[2,4,7],[3,5,1],[4,6,4],[5,7,2],[6,7,1]]",
        "output": "[False, True, False, False, True, False, True, False, True, False]"
      },
      {
        "input": "n = 8, edges = [[0,1,10],[0,2,20],[1,3,5],[1,4,15],[2,3,20],[2,5,10],[3,6,15],[4,6,5],[5,7,5],[6,7,10]]",
        "output": "[False, True, False, False, False, True, False, False, True, False]"
      },
      {
        "input": "n = 10, edges = [[0,1,3],[0,2,1],[1,3,2],[1,4,4],[2,5,2],[3,6,1],[4,6,1],[5,7,2],[6,8,3],[7,9,1],[8,9,2]]",
        "output": "[False, True, False, False, True, False, False, True, False, True, False]"
      },
      {
        "input": "n = 15, edges = [[0,1,1],[0,2,2],[1,3,3],[1,4,4],[2,5,2],[3,6,5],[4,7,1],[5,8,3],[6,9,4],[7,10,2],[8,11,1],[9,12,3],[10,13,4],[11,14,2],[12,14,5]]",
        "output": "[False, True, False, False, True, False, False, True, False, False, True, False, False, True, False]"
      },
      {
        "input": "n = 7, edges = [[0,1,5],[0,2,3],[1,2,2],[1,3,6],[2,3,4],[2,4,3],[3,4,1],[3,5,2],[4,5,3],[4,6,4],[5,6,2]]",
        "output": "[False, True, False, False, False, True, False, False, False, True, False]"
      },
      {
        "input": "n = 8, edges = [[0,1,5],[0,2,10],[1,3,2],[1,4,3],[2,3,1],[2,5,4],[3,6,3],[4,6,2],[5,6,1],[6,7,5]]",
        "output": "[True, False, True, True, False, False, True, True, False, True]"
      },
      {
        "input": "n = 20, edges = [[0,1,5],[0,2,3],[1,3,4],[1,4,2],[2,5,1],[2,6,3],[3,7,2],[3,8,4],[4,9,2],[5,10,3],[5,11,1],[6,12,4],[6,13,1],[7,14,2],[7,15,3],[8,16,1],[8,17,4],[9,18,2],[10,19,3],[11,12,2],[13,14,1],[15,16,2],[17,18,3],[18,19,4]]",
        "output": "[False, True, False, False, True, False, False, False, False, True, False, False, False, False, False, False, False, False, True, False, False, False, False, False]"
      },
      {
        "input": "n = 10, edges = [[0,1,1],[0,2,2],[0,3,3],[1,4,1],[2,5,2],[3,6,3],[4,7,1],[5,8,2],[6,9,3],[7,8,1],[7,9,2],[8,9,3]]",
        "output": "[True, False, False, True, False, False, True, False, False, False, True, False]"
      },
      {
        "input": "n = 11, edges = [[0,1,2],[0,2,3],[1,2,1],[1,3,4],[1,4,5],[2,5,2],[2,6,3],[3,6,1],[3,7,4],[4,8,2],[4,9,3],[5,9,1],[5,10,2],[6,10,3],[7,8,1],[8,9,2],[8,10,1],[9,10,2]]",
        "output": "[True, True, True, False, False, True, False, False, False, False, False, False, True, False, False, False, False, False]"
      },
      {
        "input": "n = 12, edges = [[0,1,2],[0,2,3],[1,3,4],[1,4,5],[2,3,6],[2,4,7],[3,5,8],[4,5,9],[5,6,10],[5,7,11],[5,8,12],[6,9,13],[7,10,14],[8,11,15],[9,10,16],[10,11,17]]",
        "output": "[True, False, True, False, False, False, True, False, False, False, True, False, False, True, False, False]"
      },
      {
        "input": "n = 10, edges = [[0,1,1],[0,2,2],[1,3,3],[1,4,4],[2,5,5],[2,6,6],[3,7,7],[4,8,8],[5,9,9],[6,9,9],[7,8,10]]",
        "output": "[False, True, False, False, True, False, False, False, True, False, False]"
      },
      {
        "input": "n = 8, edges = [[0,1,1],[0,2,2],[0,3,3],[1,4,1],[2,4,1],[3,4,1],[4,5,2],[5,6,1],[6,7,2],[4,7,3]]",
        "output": "[True, False, False, True, False, False, False, False, False, True]"
      },
      {
        "input": "n = 10, edges = [[0,1,1],[0,2,1],[0,3,1],[1,4,1],[1,5,1],[2,4,1],[2,6,1],[3,5,1],[3,7,1],[4,8,1],[5,8,1],[6,9,1],[7,9,1],[8,9,1],[0,4,1],[0,5,1],[0,6,1],[0,7,1],[0,8,1],[0,9,1]]",
        "output": "[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True]"
      },
      {
        "input": "n = 20, edges = [[0,1,2],[0,2,4],[1,3,1],[1,4,3],[2,5,2],[2,6,4],[3,7,1],[4,8,1],[5,9,2],[6,10,1],[7,11,3],[8,12,2],[9,13,3],[10,14,1],[11,15,2],[12,16,1],[13,17,3],[14,18,2],[15,19,1],[16,18,2],[17,19,3]]",
        "output": "[True, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False]"
      },
      {
        "input": "n = 7, edges = [[0,1,1],[0,2,2],[1,2,1],[1,3,3],[2,3,1],[2,4,2],[3,4,1],[3,5,3],[4,5,1],[4,6,2],[5,6,1]]",
        "output": "[True, True, True, False, True, True, True, False, True, True, True]"
      },
      {
        "input": "n = 9, edges = [[0,1,1],[0,2,2],[0,3,3],[0,4,4],[1,5,1],[2,5,2],[3,5,3],[4,5,4],[5,6,5],[5,7,6],[5,8,7],[6,8,8],[7,8,9]]",
        "output": "[True, False, False, False, True, False, False, False, False, False, True, False, False]"
      },
      {
        "input": "n = 12, edges = [[0,1,2],[0,2,3],[1,3,4],[1,4,5],[2,5,6],[2,6,7],[3,7,8],[3,8,9],[4,8,10],[4,9,11],[5,10,12],[5,11,13],[6,10,14],[6,11,15],[7,11,16],[8,11,17],[9,11,18]]",
        "output": "[False, True, False, False, True, False, False, False, False, False, False, True, False, False, False, False, False]"
      },
      {
        "input": "n = 10, edges = [[0,1,5],[0,2,3],[1,3,2],[2,4,1],[3,5,4],[4,6,2],[5,7,3],[6,8,1],[7,9,2],[8,9,4]]",
        "output": "[False, True, False, True, False, True, False, True, False, True]"
      },
      {
        "input": "n = 8, edges = [[0,1,2],[0,2,3],[1,3,1],[1,4,4],[2,5,2],[3,6,3],[4,7,2],[5,6,1],[6,7,4]]",
        "output": "[True, False, False, True, False, False, True, False, False]"
      },
      {
        "input": "n = 9, edges = [[0,1,2],[0,2,1],[0,3,3],[1,4,2],[1,5,4],[2,4,1],[2,6,3],[3,7,2],[3,8,1],[4,5,2],[5,6,3],[6,7,2],[7,8,1],[8,5,1]]",
        "output": "[False, False, True, False, False, False, False, False, True, False, False, False, False, False]"
      },
      {
        "input": "n = 12, edges = [[0,1,2],[1,2,2],[2,3,2],[3,4,2],[4,5,2],[5,6,2],[6,7,2],[7,8,2],[8,9,2],[9,10,2],[10,11,2]]",
        "output": "[True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 12, edges = [[0,1,3],[0,2,5],[0,3,4],[1,4,2],[1,5,6],[2,4,3],[2,6,4],[3,7,5],[3,8,7],[4,9,2],[5,9,1],[6,9,3],[7,10,2],[8,10,3],[9,11,2]]",
        "output": "[True, False, False, True, False, False, False, False, False, True, False, False, False, False, True]"
      },
      {
        "input": "n = 8, edges = [[0,1,10],[0,2,5],[1,3,4],[1,4,6],[2,3,3],[2,4,5],[3,5,2],[4,5,1],[5,6,7],[5,7,8],[6,7,9]]",
        "output": "[False, True, False, False, True, False, True, False, False, True, False]"
      },
      {
        "input": "n = 7, edges = [[0,1,5],[0,2,3],[1,3,2],[1,4,1],[2,4,1],[2,5,4],[3,6,3],[4,6,2],[5,6,1]]",
        "output": "[False, True, False, False, True, False, False, True, False]"
      },
      {
        "input": "n = 10, edges = [[0,1,5],[0,2,2],[1,3,3],[1,4,7],[2,3,1],[2,4,6],[3,5,4],[3,6,2],[4,7,5],[5,8,3],[6,8,2],[7,9,1],[8,9,4]]",
        "output": "[False, True, False, False, True, False, False, True, False, False, True, False, True]"
      },
      {
        "input": "n = 20, edges = [[0,1,10],[0,2,20],[1,2,5],[1,3,15],[2,3,10],[2,4,20],[3,4,5],[3,5,15],[4,5,10],[4,6,20],[5,6,5],[5,7,15],[6,7,10],[6,8,20],[7,8,5],[7,9,15],[8,9,10],[8,10,20],[9,10,5],[9,11,15],[10,11,10],[10,12,20],[11,12,5],[11,13,15],[12,13,10],[12,14,20],[13,14,5],[14,15,10],[14,16,20],[15,16,5],[15,17,15],[16,17,10],[16,18,20],[17,18,5],[17,19,15],[18,19,10]]",
        "output": "[True, False, True, True, True, False, True, True, True, False, True, True, True, False, True, True, True, False, True, True, True, False, True, True, True, False, True, True, False, True, True, True, False, True, True, True]"
      },
      {
        "input": "n = 9, edges = [[0,1,1],[0,2,2],[1,3,1],[1,4,2],[2,5,1],[2,6,2],[3,7,1],[4,7,2],[5,8,1],[6,8,2],[7,8,1]]",
        "output": "[True, True, True, False, True, False, True, False, True, False, True]"
      },
      {
        "input": "n = 12, edges = [[0,1,10],[0,2,5],[1,3,2],[1,4,8],[2,5,3],[3,6,4],[4,7,3],[5,8,2],[6,9,5],[7,10,4],[8,11,3],[9,11,2]]",
        "output": "[False, True, False, False, True, False, False, True, False, False, True, False]"
      },
      {
        "input": "n = 30, edges = [[0,1,1],[1,2,2],[2,3,3],[3,4,4],[4,5,5],[5,6,6],[6,7,7],[7,8,8],[8,9,9],[9,10,10],[10,11,11],[11,12,12],[12,13,13],[13,14,14],[14,15,15],[15,16,16],[16,17,17],[17,18,18],[18,19,19],[19,20,20],[20,21,21],[21,22,22],[22,23,23],[23,24,24],[24,25,25],[25,26,26],[26,27,27],[27,28,28],[28,29,29],[0,29,100]]",
        "output": "[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True]"
      },
      {
        "input": "n = 7, edges = [[0,1,2],[0,2,3],[1,2,1],[1,3,4],[1,4,6],[2,4,5],[2,5,3],[3,5,1],[3,6,2],[4,6,3],[5,6,4]]",
        "output": "[True, False, False, True, False, False, False, False, True, False, False]"
      },
      {
        "input": "n = 8, edges = [[0,1,4],[0,2,3],[1,3,2],[1,4,5],[2,5,1],[3,6,3],[4,6,2],[5,7,4],[6,7,1],[0,3,6],[1,2,7]]",
        "output": "[False, True, False, False, True, False, False, True, False, False, False]"
      },
      {
        "input": "n = 15, edges = [[0,1,1],[0,2,2],[1,3,1],[1,4,3],[2,5,2],[2,6,4],[3,7,1],[4,8,1],[5,9,2],[6,10,1],[7,11,3],[8,12,2],[9,13,3],[10,14,1],[11,12,2],[12,13,1],[13,14,2]]",
        "output": "[False, True, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False]"
      },
      {
        "input": "n = 15, edges = [[0,1,10],[0,2,15],[1,2,5],[1,3,20],[2,3,10],[2,4,15],[3,4,5],[3,5,25],[4,5,10],[4,6,15],[5,6,5],[5,7,20],[6,7,10],[6,8,15],[7,8,5],[7,9,25],[8,9,10],[8,10,15],[9,10,5],[9,11,20],[10,11,10],[10,12,15],[11,12,5],[11,13,20],[12,13,10],[12,14,15],[13,14,5]]",
        "output": "[True, True, True, False, True, True, True, False, True, True, True, False, True, True, True, False, True, True, True, False, True, True, True, False, True, True, True]"
      },
      {
        "input": "n = 7, edges = [[0,1,10],[0,2,5],[0,3,20],[1,4,2],[2,4,15],[2,5,1],[3,6,5],[4,6,10],[5,6,2]]",
        "output": "[False, True, False, False, False, True, False, False, True]"
      },
      {
        "input": "n = 8, edges = [[0,1,2],[0,2,3],[1,3,4],[1,4,5],[2,3,1],[2,4,6],[3,5,7],[3,6,8],[4,5,9],[4,6,10],[5,7,11],[6,7,12]]",
        "output": "[False, True, False, False, True, False, True, False, False, False, True, False]"
      },
      {
        "input": "n = 10, edges = [[0,1,5],[0,2,3],[1,2,2],[1,3,6],[2,3,1],[2,4,4],[3,4,2],[3,5,3],[4,5,1],[5,6,2],[6,7,3],[7,8,4],[8,9,5],[6,9,7]]",
        "output": "[False, True, False, False, True, False, True, True, True, True, False, False, False, True]"
      },
      {
        "input": "n = 8, edges = [[0,1,1],[0,2,4],[1,2,2],[1,3,5],[2,3,1],[2,4,2],[3,4,3],[3,5,6],[4,5,1],[4,6,4],[5,6,2],[5,7,3],[6,7,1]]",
        "output": "[True, False, True, False, False, True, False, False, True, False, True, True, True]"
      },
      {
        "input": "n = 15, edges = [[0,1,1],[0,2,2],[0,3,3],[1,4,1],[1,5,2],[2,6,1],[2,7,2],[3,8,1],[3,9,2],[4,10,1],[5,11,1],[6,12,1],[7,13,1],[8,14,1],[9,14,2],[10,11,1],[11,12,1],[12,13,1],[13,14,1]]",
        "output": "[False, False, True, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False]"
      },
      {
        "input": "n = 15, edges = [[0,1,1],[0,2,2],[1,3,1],[1,4,1],[2,4,2],[2,5,2],[3,6,1],[4,6,1],[4,7,1],[5,8,2],[6,9,1],[7,9,1],[8,10,2],[9,11,1],[10,12,1],[11,13,2],[12,13,1],[13,14,1]]",
        "output": "[True, False, True, True, False, False, True, True, True, False, True, True, False, True, False, True, False, True]"
      },
      {
        "input": "n = 10, edges = [[0,1,5],[0,2,10],[1,3,3],[1,4,7],[2,3,2],[2,5,8],[3,4,1],[3,6,4],[4,7,6],[5,6,1],[6,7,2],[6,8,3],[7,9,5],[8,9,1]]",
        "output": "[True, False, True, False, False, False, False, True, False, False, False, True, False, True]"
      },
      {
        "input": "n = 7, edges = [[0,1,10],[0,2,20],[0,3,30],[1,4,10],[2,4,10],[3,4,10],[4,5,10],[4,6,20],[5,6,10]]",
        "output": "[True, False, False, True, False, False, True, True, True]"
      },
      {
        "input": "n = 9, edges = [[0,1,1],[0,2,2],[1,3,3],[1,4,1],[2,4,2],[2,5,2],[3,6,4],[4,6,3],[4,7,2],[5,8,3],[6,8,2],[7,8,1]]",
        "output": "[True, False, False, True, False, False, False, False, True, False, False, True]"
      },
      {
        "input": "n = 6, edges = [[0,1,1],[0,2,1],[1,3,1],[1,4,1],[2,3,1],[2,4,1],[3,5,1],[4,5,1]]",
        "output": "[True, True, True, True, True, True, True, True]"
      }
    ]
  },
  {
    "id": 591,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "String"
    ],
    "problemDescription": "Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\nA code snippet is valid if all the following rules hold:\n\nThe code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\nA closed tag (not necessarily valid) has exactly the following format : TAG_CONTENT. Among them,  is the start tag, and  is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\nA valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.\nA valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.\nA start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\nA < is unmatched if you cannot find a subsequent >. And when you find a < or , all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).\nThe cdata has the following format : CDATA_CONTENT. The range of CDATA_CONTENT is defined as the characters between </code> and the <b>first subsequent</b> <code>.\nCDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.\n\n\u00a0\nExample 1:\n\nInput: code = \"This is the first line <div>\"\nOutput: true\nExplanation: \nThe code is wrapped in a closed tag :  and . \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\n\nExample 2:\n\nInput: code = \">>  ![cdata[]] <div>]>]]>>]\"\nOutput: true\nExplanation:\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -> \"\"\nend_tag -> \"\"\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -> \">>  ![cdata[]] \"\ncdata -> \"<div>]>\", where the CDATA_CONTENT is \"]>\"\ntext2 -> \"]]>>]\"\nThe reason why start_tag is NOT \">>\" is because of the rule 6.\nThe reason why cdata is NOT \"<div>]>]]>\" is because of the rule 7.\n\nExample 3:\n\nInput: code = \"      \"\nOutput: false\nExplanation: Unbalanced. If \"\" is closed, then \"\" must be unmatched, and vice versa.\n\n\u00a0\nConstraints:\n\n1 <= code.length <= 500\ncode consists of English letters, digits, '<', '>', '/', '!', '[', ']', '.', and ' '.\n\n",
    "starterCode": "class Solution:\n    def isValid(self, code: str) -> bool:\n        ",
    "testCases": [
      {
        "input": "code = \"<A>abc</A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[wahaha]]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[CDATA]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B></C></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"This is the first line <div>\"\"",
        "output": "Error: Solution.isValid() missing 1 required positional argument: 'code'"
      },
      {
        "input": "code = \"This is the first line <DIV></DIV>\"",
        "output": "False"
      },
      {
        "input": "code = \"<![CDATA[CDATA_CONTENT]]>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B></A></B>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A> <B> <C></C> </B> </A>\"",
        "output": "True"
      },
      {
        "input": "code = \"This is the first line <DIV> [CDATA[CDATA_CONTENT]] </DIV>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A></A><![CDATA[unmatched < > ]]>",
        "output": "Error: Solution.isValid() missing 1 required positional argument: 'code'"
      },
      {
        "input": "code = \">>  ![cdata[]] <div>]>]]>>]\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[CDATA]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"This is the first line <DIV><SPAN></SPAN></DIV>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A></A><B></B>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><A><A></A></A></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><TAG></TAG></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><A>456</A>  <A> 123  <B> <C>  123 </C> <B></B> </A></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<![CDATA[CDATA_CONTENT]]></DIV>\"",
        "output": "False"
      },
      {
        "input": "code = \"      \"",
        "output": "False"
      },
      {
        "input": "code = \"<A>text <![CDATA[CDATA_CONTENT]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[CDATA</A>\"]]>\"",
        "output": "Error: Solution.isValid() missing 1 required positional argument: 'code'"
      },
      {
        "input": "code = \"<A><![CDATA[unmatched < > ]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A>abc<![CDATA[CDATA]]>def</A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><TAG>sometext</TAG></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A></B>\"",
        "output": "False"
      },
      {
        "input": "code = \"<![CDATA[<![CDATA[]]]]><TAG>sometext</TAG>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[CDATA_CONTENT]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A></A><A></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><A>abc</A></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[unmatched < > ]]><TAG></TAG>\"",
        "output": "False"
      },
      {
        "input": "code = \"<![CDATA[wahaha]]]><TAG>sometext</TAG>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B></B></A><A></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[CDATA_CONTENT]]></CDATA>\"",
        "output": "False"
      },
      {
        "input": "code = \"<VALID><![CDATA[<INVALID></INVALID>]]></VALID>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A>content<![CDATA[<B>content</B>]]></A><C>content</C><![CDATA[content]]></C>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><D><E><![CDATA[ignore <F> here]]></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<S><E><![CDATA[<INVALID></INVALID>]]></E></S>\"",
        "output": "True"
      },
      {
        "input": "code = \"<NESTEDCDATA><CDATA><![CDATA[Nested CDATA]]></CDATA>]]></NESTEDCDATA>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[unmatched <]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<UNBALANCED></UNBALANCED></C></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<P><![CDATA[<P><P><P><P><P><P><P>many</P></P></P></P></P></P></P>]]></P>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[abc]]></B><![CDATA[def]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><H><I><J><K></K></J></I></H></G></F></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C></B>></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><H><I><![CDATA[</I></H></G></F></E></D></C></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[TEXT]]></C></B><D><![CDATA[TEXT]]></D></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[<B>]]></A></B>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[TEXT]]></B><![CDATA[TEXT]]></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[ignore <B><C></C></B> here]]><B></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[<A>content</A>]]><A>content</A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[</]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<NINECHARS><INNER><INNERMOST></INNERMOST></INNER></NINECHARS>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C></B></A></D>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[</A><B>]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<TAG><![CDATA[<TAG>data</TAG>]]></TAG>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[<A>content</A>]]><B>content<![CDATA[<C>content</C>]]></B>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[<A></A>]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[<A><B></B></A>]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<AA><BB><CC><DD><![CDATA[DDDD]]></DD></CC></BB></AA>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[<A>content</A>]]><B><![CDATA[<C>content</C>]]></B>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[TEXT]]></B><B><![CDATA[TEXT]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<D><E>deep</E></D>]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<TAG><INNER><CDATA><TAG>invalid</TAG></CDATA></INNER></TAG>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[This is a <tag> inside CDATA]]></CDATA><TAG></TAG>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[<A><B></B>]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<TAG>Some text <![CDATA[<TAG>more text</TAG>]]> even more text</TAG>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C></B></A></C>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[wahaha]]></C></B></D>\"",
        "output": "False"
      },
      {
        "input": "code = \"<![CDATA[ignore <A><B><C> here]]></A></B></C>]]>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><H><I><![CDATA[CDATA]]></I></H></G></F></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[wahaha]]></B></C></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[ignore <D></D> here]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[CDATA]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[<A>]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<CODE><CODE><![CDATA[CODE]]></CODE></CODE>\"",
        "output": "True"
      },
      {
        "input": "code = \"<T><![CDATA[This is a ]]><![CDATA[CDATA section]]></T>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A>content<![CDATA[<>]]>content</A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<LONGTAG><SHORT><LONGER></LONGER></SHORT></LONGTAG>\"",
        "output": "True"
      },
      {
        "input": "code = \"<X><Y><Z><![CDATA[X]]></Z></Y></X>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[TEXT]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<D></D>]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A>content<![CDATA[<B>content</B>]]>content</A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B></B>]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<WRONG><TAG></WRONG></TAG>\"",
        "output": "False"
      },
      {
        "input": "code = \"<TAG><![CDATA[<TAG>content</TAG>]]></TAG>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<D><E>INNER</E></D>]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C></B>]]></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><D><![CDATA[<E>]]></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><![CDATA[FGHIJKL]]></F></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<MULTIPLECDATA><![CDATA[First CDATA]]></MULTIPLECDATA><![CDATA[Second CDATA]]></MULTIPLECDATA>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[wahaha]]></B></A><C></C>\"",
        "output": "False"
      },
      {
        "input": "code = \"<NEST><INNER1><INNER2></INNER2></INNER1></NEST>\"",
        "output": "False"
      },
      {
        "input": "code = \"<XYZ><XYZ><![CDATA[XYZ]]></XYZ></XYZ>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C></B]]></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[<B><C><D><E><F><G><H><I></I></H></G></F></E></D></C></B>]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<OUTER><INNER><![CDATA[<OUTER><INNER>]]></INNER></OUTER>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[wahaha>]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[<NOTATAG><INSIDECDATA>]]></NOTATAG>]<A></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[>]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B></B></A><![CDATA[abc<def>ghi]]>\"",
        "output": "False"
      },
      {
        "input": "code = \"<X><![CDATA[<Y><Z></Z></Y>]]></X>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[CDATA]]></B></A><C><![CDATA[CDATA]]></C><D><![CDATA[CDATA]]></D><E><![CDATA[CDATA]]></E><F><![CDATA[CDATA]]></F><G><![CDATA[CDATA]]></G><H><![CDATA[CDATA]]></H><I><![CDATA[CDATA]]></I>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A>content<![CDATA[<B>content</B>]]></A><C><![CDATA[content]]></C>\"",
        "output": "False"
      },
      {
        "input": "code = \"<X1><X2><X3></X3><X4><X5><X6></X6></X5></X4></X2></X1>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D>></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<INVALID><INNER></INNER></OUTER>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[abc<def>ghi]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<SINGLE><CDATA></CDATA></SINGLE><![CDATA[<![CDATA[<SINGLE>]]></SINGLE>]]>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C></B></A></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[abc]]></B><![CDATA[def]></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B></B><C></C><D></D><E></E></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<NESTED><INSIDE><MOREINSIDE>content</MOREINSIDE></INSIDE></NESTED>\"",
        "output": "False"
      },
      {
        "input": "code = \"<Z><Z></Z></Z><Z><Z></Z></Z>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<UNBALANCED>data</C></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[wahaha>]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<X><Y><Z></Z></Y></X> <![CDATA[DATA]]></X>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[<B>![CDATA[wahaha]]]>]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<TAG1><TAG2><![CDATA[valid CDATA]]></TAG2><TAG3>content</TAG3></TAG1>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[CDATA]]></B></A><C><![CDATA[CDATA]]></C><D><![CDATA[CDATA]]></D><E><![CDATA[CDATA]]></E><F><![CDATA[CDATA]]></F>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[<B><![CDATA[wahaha]]]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></G></F>></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B><C><D><E>CDATA</E></D></C></B>]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[ignore <B><C></C></B> here]]></A><B></B>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<UNBALANCED></C></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[ignore <D> here]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[ignore <B><C></C></B> here]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<A><B><C></C></B></A>]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<TAG>some <TAG> nested <TAG></TAG> tags</TAG></TAG>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B>content</B>]]></A><B>content</B><![CDATA[content]]></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<MAIN><SUB1><SUB2>data</SUB2></SUB1></MAIN>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[<B><![CDATA[<C>content</C>]]></B>]]></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C>></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C></B>></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<VALID><INNER> <![CDATA[<INNER>CDATA_CONTENT</INNER>]]> </INNER></VALID>\"",
        "output": "True"
      },
      {
        "input": "code = \"<NESTED><INNER>CONTENT</INNER></NESTED>\"",
        "output": "True"
      },
      {
        "input": "code = \"<PARENT><CHILD><GRANDCHILD></GRANDCHILD></CHILD></PARENT><![CDATA[<PARENT><CHILD></CHILD></PARENT>]]></PARENT>\"",
        "output": "False"
      },
      {
        "input": "code = \"<ROOT><CHILD><![CDATA[<DIV>unparsed</DIV>]]></CHILD></ROOT>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<D></E>]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[<A></B>]]></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[<B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C></B></A>></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<X><Y><![CDATA[<Z>]]></X></Y></Z>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C></C></B></A><![CDATA[<D>]]></D>]><A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C></C></B><![CDATA[TEXT]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<VALID><INNER>TEXT<![CDATA[CDATA_CONTENT]]></INNER></VALID>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[CDATA]]></B></A><C><D><![CDATA[CDATA]]></D></C><E><F><![CDATA[CDATA]]></F></E><G><H><![CDATA[CDATA]]></H></G><I><J><![CDATA[CDATA]]></J></I>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C></D></C></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[<]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<MAIN><SUB1><SUB2></SUB2></SUB1></MAIN>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[content]]></A><B>content</B>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[TEXT]]></A><![CDATA[TEXT]]></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<ROOT><CHILD1><GRANDCHILD></GRANDCHILD></CHILD1><CHILD2></CHILD2></ROOT>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[<C></D>]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<ROOT><![CDATA[<A></A>]]></ROOT>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[wahaha]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[<C><D></C>]]></D></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[content]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[ignore <TAG> and </TAG> here]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C></B></A></B>\"",
        "output": "False"
      },
      {
        "input": "code = \"<P><A><![CDATA[<BR>]]></A><SPAN>text</SPAN></P>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<OUTER><MID><![CDATA[<INNER></INNER>]]></MID></OUTER>\"",
        "output": "True"
      },
      {
        "input": "code = \"<TAG1><TAG2><TAG3>CONTENT</TAG3></TAG2></TAG1>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<D><E>CDATA</E></D>]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[CDATA]]></B></A><C><![CDATA[CDATA]]></C><D><![CDATA[CDATA]]></D>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[unmatched </]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B><C><D><E><F><G><![CDATA[wahaha>]]></G></F></E></D></C></B>]]></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[CDATA]]></B></A><C><![CDATA[CDATA]]></C><D><![CDATA[CDATA]]></D><E><![CDATA[CDATA]]></E>\"",
        "output": "False"
      },
      {
        "input": "code = \"<T><T><![CDATA[<T><T>INNER</T></T>]]></T></T>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[ignore <A><B><C></C></B></A> here]]>\"",
        "output": "True"
      },
      {
        "input": "code = \"<TAG><![CDATA[<TAG><![CDATA[CDATA_CONTENT]]></TAG>]]></TAG>\"",
        "output": "False"
      },
      {
        "input": "code = \"<HELLO><WORLD><![CDATA[<HELLO>world</WORLD>]]></HELLO>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[not <CLOSING]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E>></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[TEXT]]></C><D><![CDATA[TEXT]]></D></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[</]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<D><E><![CDATA[CONTENT]]></E></D>]]></C></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G></G></F></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[CDATA]]></A><B><![CDATA[CDATA]]></B><C><![CDATA[CDATA]]></C><D><![CDATA[CDATA]]></D><E><![CDATA[CDATA]]></E><F><![CDATA[CDATA]]></F><G><![CDATA[CDATA]]></G>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><H><I></I></H></G></F></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[<A>]]><C></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><![CDATA[<E><F></F>]]></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C></C></B><D><![CDATA[TEXT]]></D></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<NEST><INNER><![CDATA[<NEST><INNER><![CDATA[CDATA_CONTENT]]></INNER></NEST>]]></INNER></NEST>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[>]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<CORRECT><INSIDE></INSIDE></CORRECT>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><H><I><J><K><L><M><N><O><P><Q><R><S><T><U><V><W><X><Y><Z></Z></Y></X></W></V></U></T></S></R></Q></P></O></N></M></L></K></J></I></H></G></F></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<D><E><![CDATA[CDATA_CONTENT]]></E></D>]]></C></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></F></E></D></C></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B>content<![CDATA[<C>content</C>]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[<NOTATAG>data</NOTATAG>]]><VALID></VALID>\"",
        "output": "False"
      },
      {
        "input": "code = \"<LAYER1><LAYER2><LAYER3></LAYER3></LAYER2></LAYER1>\"",
        "output": "False"
      },
      {
        "input": "code = \"<TAG><INNER><![CDATA[<INNER>CDATA_CONTENT</INNER>]]> <![CDATA[TEXT]]></INNER></TAG>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C></C><![CDATA[TEXT]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[<Z><Z></Z></Z><Z><Z></Z></Z>]]></Z>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[<B>content</B>]]></A><C><![CDATA[content]]></C><D>content</D>\"",
        "output": "False"
      },
      {
        "input": "code = \"<OUTER><MID><INNER>TEXT</INNER> <![CDATA[TEXT]]></MID></OUTER>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><![CDATA[ABCDE]]></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[&]][CDATA[]]><B></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B>content</B>]]></A><C><![CDATA[content]]></C>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><![CDATA[content]]></A><![CDATA[morecontent]]>\"",
        "output": "False"
      },
      {
        "input": "code = \"<NEST><LVL1><LVL2><LVL3><![CDATA[<NEST><LVL1>deep</LVL1></NEST>]]></LVL3></LVL2></LVL1></NEST>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B>content</B><![CDATA[content]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><![CDATA[ignore <F></F> here]]></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[<A><B><C>]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<!CDATA[CDATA_CONTENT]]]]><B></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[This is a <C></C> test]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><![CDATA[<C></C>]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<OUTER><INNER><![CDATA[<INNER>CDATA</INNER>]]></INNER></OUTER>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[ignore <TAG> tags <INSIDE> </INSIDE> </TAG> ]]>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C></C><D><![CDATA[TEXT]]></D></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C></C><D></D></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<![CDATA[ignore <A><B><C></C></B></A> here]]><A></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[<C><D></D></C>]]></B><C><D><![CDATA[<E><F></F></E>]]></D></C></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<ALMOST><INNER><![CDATA[</INNER>]]></ALMOST>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[unmatched ]]></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B><![CDATA[wahaha>]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<X><Y><![CDATA[Not a tag>]]></Y></X>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[This is some text <B></B> with CDATA]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C></C></B></A><D></D>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[<A></A>]]></B></A><C><D><![CDATA[<E></E>]]></D></C>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B>content<![CDATA[<C>content</C>]]></B><![CDATA[content]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B>]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><![CDATA[<B><C><D><E><F><G><![CDATA[wahaha]]></G></F></E></D></C></B></A>></B>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><C><![CDATA[wahaha]]></C></D></B></A>\"",
        "output": "False"
      },
      {
        "input": "code = \"<A><B><![CDATA[<B></C>]]></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha]]></G>></F></E></D></C></B></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A>content<![CDATA[<B>content</B>]]></A>\"",
        "output": "True"
      },
      {
        "input": "code = \"<A><B><C><D><E><F><G><![CDATA[wahaha>]]></F></E></D></C></B></A>\"",
        "output": "False"
      }
    ]
  },
  {
    "id": 2488,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "problemDescription": "You are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.\nReturn the number of non-empty subarrays in nums that have a median equal to k.\nNote:\n\nThe median of an array is the middle element after sorting the array in ascending order. If the array is of even length, the median is the left middle element.\n\n\t\nFor example, the median of [2,3,1,4] is 2, and the median of [8,4,3,5,1] is 4.\n\n\nA subarray is a contiguous part of an array.\n\n\u00a0\nExample 1:\n\nInput: nums = [3,2,1,4,5], k = 4\nOutput: 3\nExplanation: The subarrays that have a median equal to 4 are: [4], [4,5] and [1,4,5].\n\nExample 2:\n\nInput: nums = [2,3,1], k = 3\nOutput: 1\nExplanation: [3] is the only subarray that has a median equal to 3.\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= n <= 105\n1 <= nums[i], k <= n\nThe integers in nums are distinct.\n\n",
    "starterCode": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [2,3,1], k = 3",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [5,1,4,3,2], k = 3",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5,6], k = 4",
        "output": "5"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], k = 6",
        "output": "9"
      },
      {
        "input": "nums = [3,2,1,4,5], k = 4",
        "output": "3"
      },
      {
        "input": "nums = [7,5,3,1,2,4,6], k = 4",
        "output": "4"
      },
      {
        "input": "nums = [5,4,3,2,1], k = 3",
        "output": "5"
      },
      {
        "input": "nums = [1,3,5,7,9,2,4,6,8,10], k = 5",
        "output": "13"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,30,28,26,24,22,20,18,16,14,12], k = 15",
        "output": "16"
      },
      {
        "input": "nums = [5,6,7,8,9,1,2,3,4], k = 5",
        "output": "4"
      },
      {
        "input": "nums = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 15",
        "output": "30"
      },
      {
        "input": "nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 15",
        "output": "21"
      },
      {
        "input": "nums = [8, 6, 4, 2, 1, 3, 5, 7, 9], k = 5",
        "output": "6"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [1, 5, 2, 6, 3, 7, 4, 8, 9, 10], k = 5",
        "output": "7"
      },
      {
        "input": "nums = [1,3,2,6,5,4,8,7,9], k = 5",
        "output": "12"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], k = 27",
        "output": "47"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 15",
        "output": "30"
      },
      {
        "input": "nums = [5, 2, 8, 3, 9, 4, 10, 1, 6, 7], k = 5",
        "output": "6"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 15",
        "output": "15"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "11"
      },
      {
        "input": "nums = [49,47,45,43,41,39,37,35,33,31,29,27,25,23,21,19,17,15,13,11,9,7,5,3,1], k = 25",
        "output": "25"
      },
      {
        "input": "nums = [4,3,2,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], k = 25",
        "output": "50"
      },
      {
        "input": "nums = [15,20,10,25,5,1,6,11,16,21,26,30,3,8,13,18,23,28,2,7,12,17,22,27,29,4,9,14,19,24], k = 15",
        "output": "17"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6,11,20,12,19,13,18,14,17,15,16,21,30,22,29,23,28,24,27,25,26,31,40,32,39,33,38,34,37,35,36,41,50,42,49,43,48,44,47,45,46], k = 25",
        "output": "54"
      },
      {
        "input": "nums = [5,10,4,3,8,7,9,2,6,1], k = 5",
        "output": "7"
      },
      {
        "input": "nums = [1,5,9,13,17,21,25,29,2,6,10,14,18,22,26,30,3,7,11,15,19,23,27,28,4,8,12,16,20,24], k = 15",
        "output": "87"
      },
      {
        "input": "nums = [4,1,5,3,2,7,6,8,9,10], k = 5",
        "output": "7"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 10",
        "output": "20"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 1, 3, 5, 7, 9], k = 5",
        "output": "14"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 13",
        "output": "25"
      },
      {
        "input": "nums = [10,8,6,4,2,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], k = 10",
        "output": "3"
      },
      {
        "input": "nums = [5, 1, 3, 2, 4, 6, 8, 7, 10, 9], k = 5",
        "output": "3"
      },
      {
        "input": "nums = [25,1,3,5,7,9,11,13,15,17,19,21,23,27,29,31,33,35,37,39,41,43,45,47,49], k = 25",
        "output": "2"
      },
      {
        "input": "nums = [25,20,15,10,5,1,6,11,16,21,26,30,3,8,13,18,23,28,2,7,12,17,22,27,29,4,9,14,19,24], k = 15",
        "output": "24"
      },
      {
        "input": "nums = [3,1,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,20], k = 10",
        "output": "21"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 11",
        "output": "19"
      },
      {
        "input": "nums = [4,1,5,3,2,6,8,7,9,10], k = 5",
        "output": "7"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], k = 25",
        "output": "11"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [5,1,3,2,4,8,6,7,9,10], k = 6",
        "output": "10"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10], k = 5",
        "output": "13"
      },
      {
        "input": "nums = [100,1,99,2,98,3,97,4,96,5,95,6,94,7,93,8,92,9,91,10], k = 50",
        "output": "Error: 50 is not in list"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 15",
        "output": "11"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], k = 11",
        "output": "9"
      },
      {
        "input": "nums = [1,13,5,7,9,11,2,4,6,8,10,12,14,15,16,17,18,19,20,3], k = 10",
        "output": "24"
      },
      {
        "input": "nums = [5,1,4,2,3,8,6,7,10,9], k = 5",
        "output": "3"
      },
      {
        "input": "nums = [39,37,35,33,31,29,27,25,23,21,19,17,15,13,11,9,7,5,3,1], k = 21",
        "output": "19"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 11",
        "output": "19"
      },
      {
        "input": "nums = [5,3,1,2,4,6,7,8,9,10], k = 6",
        "output": "9"
      },
      {
        "input": "nums = [5,1,9,3,7,8,2,6,4,10], k = 5",
        "output": "8"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], k = 15",
        "output": "44"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "20"
      },
      {
        "input": "nums = [23,45,12,34,56,78,90,21,11,5,3,2,1,9,8,7,6,4,10,13,14,15,16,17,18,19,20,22,24,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,46,47,48,49], k = 25",
        "output": "Error: 25 is not in list"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5], k = 5",
        "output": "7"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], k = 5",
        "output": "7"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k = 8",
        "output": "15"
      },
      {
        "input": "nums = [5,1,9,3,7,2,8,4,6,10], k = 7",
        "output": "4"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 19",
        "output": "20"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 12",
        "output": "17"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4], k = 5",
        "output": "3"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 8",
        "output": "15"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49], k = 25",
        "output": "25"
      },
      {
        "input": "nums = [5,1,9,3,7,2,8,6,4,10], k = 5",
        "output": "7"
      },
      {
        "input": "nums = [1,15,2,14,3,13,4,12,5,11,6,10,7,9,8], k = 8",
        "output": "15"
      },
      {
        "input": "nums = [12,14,10,15,13,11,9,8,7,6,5,4,3,2,1], k = 10",
        "output": "9"
      },
      {
        "input": "nums = [1,11,5,9,7,2,6,3,8,10,4], k = 6",
        "output": "25"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], k = 21",
        "output": "19"
      },
      {
        "input": "nums = [15, 20, 25, 10, 5, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], k = 50",
        "output": "20"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 6",
        "output": "9"
      },
      {
        "input": "nums = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 5",
        "output": "10"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], k = 22",
        "output": "19"
      },
      {
        "input": "nums = [3,6,1,8,5,2,9,4,7], k = 5",
        "output": "19"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,1,3,5,7,9,11,13,15,17,19], k = 10",
        "output": "28"
      },
      {
        "input": "nums = [3, 1, 4, 2, 5], k = 3",
        "output": "3"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 8",
        "output": "15"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,1,3,5,7,9,11,13,15,17,19], k = 11",
        "output": "25"
      },
      {
        "input": "nums = [42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], k = 25",
        "output": "35"
      },
      {
        "input": "nums = [2,1,5,3,4,6,7,8,9,10], k = 5",
        "output": "7"
      },
      {
        "input": "nums = [5, 1, 9, 3, 7, 2, 8, 4, 6, 10], k = 5",
        "output": "6"
      }
    ]
  },
  {
    "id": 2117,
    "difficulty": "Hard",
    "tags": [
      "Math"
    ],
    "problemDescription": "You are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right].\nSince the product may be very large, you will abbreviate it following these steps:\n\nCount all trailing zeros in the product and remove them. Let us denote this count as C.\n\n\t\nFor example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546.\n\n\nDenote the remaining number of digits in the product as d. If d > 10, then express the product as ... where  denotes the first 5 digits of the product, and  denotes the last 5 digits of the product after removing all trailing zeros. If d <= 10, we keep it unchanged.\n\t\nFor example, we express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567.\n\n\nFinally, represent the product as a string \"...eC\".\n\t\nFor example, 12345678987600000 will be represented as \"12345...89876e5\".\n\n\n\nReturn a string denoting the abbreviated product of all integers in the inclusive range [left, right].\n\u00a0\nExample 1:\n\nInput: left = 1, right = 4\nOutput: \"24e0\"\nExplanation: The product is 1 \u00d7 2 \u00d7 3 \u00d7 4 = 24.\nThere are no trailing zeros, so 24 remains the same. The abbreviation will end with \"e0\".\nSince the number of digits is 2, which is less than 10, we do not have to abbreviate it further.\nThus, the final representation is \"24e0\".\n\nExample 2:\n\nInput: left = 2, right = 11\nOutput: \"399168e2\"\nExplanation: The product is 39916800.\nThere are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with \"e2\".\nThe number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\nHence, the abbreviated product is \"399168e2\".\n\nExample 3:\n\nInput: left = 371, right = 375\nOutput: \"7219856259e3\"\nExplanation: The product is 7219856259000.\n\n\u00a0\nConstraints:\n\n1 <= left <= right <= 104\n\n",
    "starterCode": "class Solution:\n    def abbreviateProduct(self, left: int, right: int) -> str:\n        ",
    "testCases": [
      {
        "input": "left = 100, right = 105",
        "output": "1158727752e3"
      },
      {
        "input": "left = 1, right = 10000",
        "output": "28462...79008e2499"
      },
      {
        "input": "left = 10, right = 20",
        "output": "6704425728e3"
      },
      {
        "input": "left = 371, right = 375",
        "output": "7219856259e3"
      },
      {
        "input": "left = 1000, right = 1010",
        "output": "10563...82688e5"
      },
      {
        "input": "left = 5000, right = 5010",
        "output": "49367...34144e6"
      },
      {
        "input": "left = 1234, right = 1238",
        "output": "28846...40584e1"
      },
      {
        "input": "left = 999, right = 1000",
        "output": "999e3"
      },
      {
        "input": "left = 1, right = 10",
        "output": "36288e2"
      },
      {
        "input": "left = 1234, right = 1240",
        "output": "44318...63424e2"
      },
      {
        "input": "left = 5, right = 5",
        "output": "5e0"
      },
      {
        "input": "left = 1000, right = 1000",
        "output": "1e3"
      },
      {
        "input": "left = 10, right = 15",
        "output": "36036e2"
      },
      {
        "input": "left = 1000, right = 1004",
        "output": "10100...50024e3"
      },
      {
        "input": "left = 500, right = 510",
        "output": "54464...59744e5"
      },
      {
        "input": "left = 1, right = 100",
        "output": "93326...16864e24"
      },
      {
        "input": "left = 995, right = 1000",
        "output": "98508...27388e4"
      },
      {
        "input": "left = 9995, right = 10000",
        "output": "99850...73988e5"
      },
      {
        "input": "left = 1, right = 4",
        "output": "24e0"
      },
      {
        "input": "left = 2, right = 11",
        "output": "399168e2"
      },
      {
        "input": "left = 500, right = 505",
        "output": "16099...69356e4"
      },
      {
        "input": "left = 5000, right = 5005",
        "output": "15671...18506e5"
      },
      {
        "input": "left = 5, right = 10",
        "output": "1512e2"
      },
      {
        "input": "left = 8000, right = 8003",
        "output": "40990...04048e3"
      },
      {
        "input": "left = 5555, right = 6666",
        "output": "28137...34688e279"
      },
      {
        "input": "left = 9000, right = 9005",
        "output": "53232...19508e4"
      },
      {
        "input": "left = 100, right = 150",
        "output": "61219...44768e15"
      },
      {
        "input": "left = 5, right = 20",
        "output": "10137...00736e4"
      },
      {
        "input": "left = 3000, right = 3100",
        "output": "81710...90592e27"
      },
      {
        "input": "left = 1234, right = 1244",
        "output": "10562...94176e2"
      },
      {
        "input": "left = 1, right = 5000",
        "output": "42285...33472e1249"
      },
      {
        "input": "left = 9000, right = 9050",
        "output": "53429...51328e15"
      },
      {
        "input": "left = 100, right = 1000",
        "output": "43116...46048e227"
      },
      {
        "input": "left = 6000, right = 6005",
        "output": "46772...86472e4"
      },
      {
        "input": "left = 7000, right = 7020",
        "output": "57553...63648e7"
      },
      {
        "input": "left = 100, right = 200",
        "output": "84505...02048e27"
      },
      {
        "input": "left = 1234, right = 1250",
        "output": "39811...24736e7"
      },
      {
        "input": "left = 4000, right = 4100",
        "output": "22481...83456e27"
      },
      {
        "input": "left = 1000, right = 1050",
        "output": "35045...20832e15"
      },
      {
        "input": "left = 4995, right = 5000",
        "output": "15578...18494e5"
      },
      {
        "input": "left = 9500, right = 10000",
        "output": "29333...52864e128"
      },
      {
        "input": "left = 2000, right = 3000",
        "output": "25024...18624e252"
      },
      {
        "input": "left = 6000, right = 6100",
        "output": "90528...09184e27"
      },
      {
        "input": "left = 9995, right = 10005",
        "output": "99999...99856e6"
      },
      {
        "input": "left = 100, right = 2000",
        "output": "35534...18272e477"
      },
      {
        "input": "left = 7000, right = 7050",
        "output": "15097...01664e15"
      },
      {
        "input": "left = 5500, right = 5510",
        "output": "14071...33184e5"
      },
      {
        "input": "left = 9999, right = 10000",
        "output": "9999e4"
      },
      {
        "input": "left = 8000, right = 8010",
        "output": "86491...39904e5"
      },
      {
        "input": "left = 5, right = 50",
        "output": "12672...06688e12"
      },
      {
        "input": "left = 5000, right = 6000",
        "output": "31736...43584e253"
      },
      {
        "input": "left = 8000, right = 8020",
        "output": "94684...81312e7"
      },
      {
        "input": "left = 8000, right = 9000",
        "output": "12498...67872e253"
      },
      {
        "input": "left = 6500, right = 6530",
        "output": "17034...07232e10"
      },
      {
        "input": "left = 3000, right = 3010",
        "output": "18042...06464e5"
      },
      {
        "input": "left = 1000, right = 9999",
        "output": "70734...94464e2249"
      },
      {
        "input": "left = 5000, right = 5015",
        "output": "15629...41184e7"
      },
      {
        "input": "left = 3000, right = 3025",
        "output": "28318...52192e9"
      },
      {
        "input": "left = 1234, right = 5678",
        "output": "11390...64288e1112"
      },
      {
        "input": "left = 1000, right = 2000",
        "output": "82415...74464e253"
      },
      {
        "input": "left = 9000, right = 9999",
        "output": "31626...93632e250"
      },
      {
        "input": "left = 4321, right = 4325",
        "output": "15098...31038e2"
      },
      {
        "input": "left = 8765, right = 8780",
        "output": "12301...69504e5"
      },
      {
        "input": "left = 10000, right = 10010",
        "output": "10055...00288e6"
      },
      {
        "input": "left = 9990, right = 10000",
        "output": "99451...72288e6"
      },
      {
        "input": "left = 2000, right = 2010",
        "output": "21050...98176e5"
      },
      {
        "input": "left = 9990, right = 9999",
        "output": "99451...72288e2"
      },
      {
        "input": "left = 5000, right = 5050",
        "output": "57259...77056e16"
      },
      {
        "input": "left = 2500, right = 2600",
        "output": "11420...49216e28"
      },
      {
        "input": "left = 2500, right = 2510",
        "output": "24371...13072e6"
      },
      {
        "input": "left = 3000, right = 4000",
        "output": "13222...08128e254"
      },
      {
        "input": "left = 1000, right = 10000",
        "output": "70734...94464e2253"
      },
      {
        "input": "left = 7500, right = 7510",
        "output": "42545...13216e6"
      },
      {
        "input": "left = 9000, right = 9010",
        "output": "31573...64992e5"
      }
    ]
  },
  {
    "id": 1373,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Dynamic Programming",
      "Binary Tree"
    ],
    "problemDescription": "Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n\u00a0\nExample 1:\n\n\nInput: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]\nOutput: 20\nExplanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.\n\nExample 2:\n\n\nInput: root = [4,3,null,1,2]\nOutput: 2\nExplanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.\n\nExample 3:\n\nInput: root = [-4,-2,-5]\nOutput: 0\nExplanation: All values are negatives. Return an empty BST.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 4 * 104].\n-4 * 104 <= Node.val <= 4 * 104\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxSumBST(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [1,null,2,null,3,null,4,null,5]",
        "output": "15"
      },
      {
        "input": "root = [5,4,8,3,null,6,3]",
        "output": "7"
      },
      {
        "input": "root = [5,4,6,null,null,3,7]",
        "output": "16"
      },
      {
        "input": "root = [10,5,15,3,7,null,18]",
        "output": "58"
      },
      {
        "input": "root = [10,5,15,1,8,null,7]",
        "output": "14"
      },
      {
        "input": "root = [-4,-2,-5]",
        "output": "0"
      },
      {
        "input": "root = [1,null,10,-5,20]",
        "output": "25"
      },
      {
        "input": "root = [2,1,3]",
        "output": "6"
      },
      {
        "input": "root = [0,null,-1]",
        "output": "0"
      },
      {
        "input": "root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]",
        "output": "20"
      },
      {
        "input": "root = [4,3,null,1,2]",
        "output": "2"
      },
      {
        "input": "root = [2,1,3,null,null,null,4]",
        "output": "10"
      },
      {
        "input": "root = [3,1,4,null,null,2]",
        "output": "6"
      },
      {
        "input": "root = [15,10,20,5,13,18,25,2,7,11,14,16,19,23,27,1,3,6,8,9,12,17,21,22,24,26,28,29,30]",
        "output": "32"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "55"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,null,null,null,8,9,10,11,null,null,null,null,null,null,null,null,null]",
        "output": "11"
      },
      {
        "input": "root = [2,1,3,0,4,null,null,-2,null,null,5,null,null,null,null,null,6]",
        "output": "9"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,4,6,8,11,13,17,25,null,null,null,null,null,16,null,null,null,18,null,null,null,null,22,null,null,null,null,null,null,null,null,24,null,null,null,null,null,null,23]",
        "output": "84"
      },
      {
        "input": "root = [5,3,12,1,4,null,15,null,null,null,null,null,18,13,17]",
        "output": "17"
      },
      {
        "input": "root = [10,5,15,3,7,12,18,null,null,null,null,11,14]",
        "output": "95"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,10,25,35,45,55,65,75,85,5,15,null,28,32,38,43,48,52,58,63,68,72,78,82,88,90,92,95,98,100]",
        "output": "1051"
      },
      {
        "input": "root = [1,1,1,1,1,null,1]",
        "output": "1"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "45"
      },
      {
        "input": "root = [3,2,5,null,null,4,6]",
        "output": "20"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,0,4,9,11,14,18,13,19,null,null,3,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1]",
        "output": "19"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,0,6,null,9]",
        "output": "17"
      },
      {
        "input": "root = [3,1,5,0,2,4,6,-1]",
        "output": "20"
      },
      {
        "input": "root = [5,3,8,1,4,7,10,0,2,6,9,5,11]",
        "output": "23"
      },
      {
        "input": "root = [3,2,5,1,null,4,null]",
        "output": "15"
      },
      {
        "input": "root = [2,1,3,null,4]",
        "output": "5"
      },
      {
        "input": "root = [2,1,3,null,null,0,5]",
        "output": "8"
      },
      {
        "input": "root = [10,5,15,1,8,null,20,-2,null,null,6,null,null,null,null,null,25]",
        "output": "35"
      },
      {
        "input": "root = [30,10,50,5,20,40,60,1,null,15,25,35,45,55,65,null,3,7,13,17,23,27,33,37,43,47,53,57,63]",
        "output": "63"
      },
      {
        "input": "root = [1,null,-1,-2,null,null,-3,null,-4,null,-5]",
        "output": "0"
      },
      {
        "input": "root = [15,10,20,8,12,16,25,7,9,11,13,15,17,22,27]",
        "output": "142"
      },
      {
        "input": "root = [10,5,15,1,8,null,20,null,null,6,9]",
        "output": "74"
      },
      {
        "input": "root = [2,1,3,null,null,null,4,null,5]",
        "output": "15"
      },
      {
        "input": "root = [10,5,15,1,8,7,20]",
        "output": "42"
      },
      {
        "input": "root = [5,3,9,-2,4,null,10,null,null,1,6,null,null,8]",
        "output": "19"
      },
      {
        "input": "root = [5,2,13,1,5,10,20,null,null,null,null,8,15]",
        "output": "33"
      },
      {
        "input": "root = [10,5,15,1,8,null,20,-3,null,null,6,null,null,null,26]",
        "output": "35"
      },
      {
        "input": "root = [2,1,3,0,5,null,7,0,6,null,null,9]",
        "output": "9"
      },
      {
        "input": "root = [5,2,6,null,4,null,7]",
        "output": "24"
      },
      {
        "input": "root = [2,1,3,null,null,0,4]",
        "output": "7"
      },
      {
        "input": "root = [10,5,15,1,8,7,20,0,null,null,null,6,12,null,18]",
        "output": "25"
      },
      {
        "input": "root = [10,5,15,1,8,null,7,null,null,6,9]",
        "output": "29"
      },
      {
        "input": "root = [10,5,15,1,8,null,20,-1,null,null,6,null,null,null,null,null,26,null,27]",
        "output": "59"
      },
      {
        "input": "root = [10,5,15,1,8,null,20,null,null,6,9,null,null,16,25]",
        "output": "35"
      },
      {
        "input": "root = [5,2,6,1,3,null,null,null,null,4]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "15"
      },
      {
        "input": "root = [10,5,10,2,8,null,null,1,null,null,9]",
        "output": "25"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6]",
        "output": "65"
      },
      {
        "input": "root = [15,10,20,8,12,16,25,6,9,11,13,14,17,19,30]",
        "output": "74"
      },
      {
        "input": "root = [5,2,3,null,null,null,null,1]",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "50"
      },
      {
        "input": "root = [0,-10,10,-20,0,-5,5,null,null,null,null,null,null,-15,-1,0,1,5,null,null,null,null,null,null,-15,-1,0,1,5]",
        "output": "5"
      },
      {
        "input": "root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]",
        "output": "12"
      },
      {
        "input": "root = [5,2,13,null,null,10,15,6,12,11,14,13,16]",
        "output": "16"
      },
      {
        "input": "root = [1,null,2,null,3,null,4]",
        "output": "10"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,4,6,8,11,14,17,19]",
        "output": "151"
      },
      {
        "input": "root = [50,30,80,20,40,70,90,null,null,25]",
        "output": "240"
      },
      {
        "input": "root = [10,5,15,3,7,12,18,1,null,6,8,null,11,13,17,19]",
        "output": "21"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,null,6,8,11,13,null,19]",
        "output": "36"
      },
      {
        "input": "root = [10,5,15,1,8,7,20,null,null,6,9,11,19]",
        "output": "29"
      },
      {
        "input": "root = [5,2,6,null,null,3,8,null,4,null,null,7]",
        "output": "8"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,null,null,25,null,null,55,65,null,null,75,85]",
        "output": "145"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,15,25,35,45,55,65,75,85]",
        "output": "750"
      },
      {
        "input": "root = [5,1,4,null,null,3,6]",
        "output": "13"
      },
      {
        "input": "root = [50,30,60,10,40,55,70,null,45,null,null,null,65,80]",
        "output": "120"
      },
      {
        "input": "root = [50,30,60,5,20,45,70,null,null,15,25,35,48,65,75,null,null,null,null,40,50]",
        "output": "210"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,null,null,6,9,11,13,null,null,null,null,null,18,22]",
        "output": "47"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20]",
        "output": "210"
      },
      {
        "input": "root = [3,2,5,null,3,null,9]",
        "output": "14"
      },
      {
        "input": "root = [2,1,3,null,null,null,null,0,4]",
        "output": "6"
      },
      {
        "input": "root = [4,2,6,1,3,5,7,0,null,null,null,null,null,null,8]",
        "output": "36"
      },
      {
        "input": "root = [5,4,6,3,7,null,null,2,8,1,9]",
        "output": "17"
      },
      {
        "input": "root = [1,null,10,null,null,5,null,null,15]",
        "output": "11"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "78"
      },
      {
        "input": "root = [20,10,30,5,15,null,null,3,7,13,18]",
        "output": "121"
      },
      {
        "input": "root = [5,2,3,null,null,1]",
        "output": "4"
      },
      {
        "input": "root = [5,2,13,null,null,9,21,7,11,14,25]",
        "output": "107"
      },
      {
        "input": "root = [50,10,60,5,20,null,null,3,7,15,35,25,45,17,25]",
        "output": "70"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6,8,12,14,null,19]",
        "output": "131"
      },
      {
        "input": "root = [100,50,150,20,75,125,175,10,30,60,80,110,140,160,180]",
        "output": "1465"
      },
      {
        "input": "root = [4,2,6,1,3,5,7]",
        "output": "28"
      },
      {
        "input": "root = [10,5,15,3,7,12,18,null,null,null,null,10,14]",
        "output": "69"
      },
      {
        "input": "root = [10,5,15,1,8,12,20,0,4,9,11,14,18,13,19]",
        "output": "19"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,140,160,180]",
        "output": "1470"
      },
      {
        "input": "root = [10,5,15,3,7,12,20,1,4,6,8,11,13,18,25,null,null,null,null,null,null,null,null,null,null,null,14,null,16,null,null,17,null,null,null,null,null,null,null,21,null,24,null,null,null,null,19,null,22,null,23,null,null,26,null,27]",
        "output": "34"
      },
      {
        "input": "root = [4,2,7,1,3,6,9,0,1,5,8,null,null,null,null,null,null,null,null,null]",
        "output": "22"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,140,160,180,null,12,28,55,65,77,85,105,115,135,145,155,165,178,185,190]",
        "output": "190"
      },
      {
        "input": "root = [50,30,60,5,20,45,70,null,null,10,25,40,55,65,80]",
        "output": "415"
      },
      {
        "input": "root = [5,3,6,2,4,null,null,1]",
        "output": "21"
      },
      {
        "input": "root = [3,2,5,null,null,4,6,3,7]",
        "output": "14"
      },
      {
        "input": "root = [5,2,13,null,null,8,14,3,12,7,11,null,15]",
        "output": "18"
      }
    ]
  },
  {
    "id": 1994,
    "difficulty": "Hard",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Math",
      "Dynamic Programming",
      "Bitmask"
    ],
    "problemDescription": "You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.\n\nFor example, if nums = [1, 2, 3, 4]:\n\n\t\n[2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively.\n[1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.\n\n\n\nReturn the number of different good subsets in nums modulo 109 + 7.\nA subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3,4]\nOutput: 6\nExplanation: The good subsets are:\n- [1,2]: product is 2, which is the product of distinct prime 2.\n- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [1,3]: product is 3, which is the product of distinct prime 3.\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [3]: product is 3, which is the product of distinct prime 3.\n\nExample 2:\n\nInput: nums = [4,2,3,15]\nOutput: 5\nExplanation: The good subsets are:\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- [3]: product is 3, which is the product of distinct prime 3.\n- [15]: product is 15, which is the product of distinct primes 3 and 5.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 30\n\n",
    "starterCode": "class Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [2,3,2,3,5,5,7,7,11,11,13,13,17,17,19,19,23,23,29,29]",
        "output": "59048.0"
      },
      {
        "input": "nums = [1,1,1,2,3,5,7,11,13,17,19,23,29]",
        "output": "8184.0"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2]",
        "output": "10.0"
      },
      {
        "input": "nums = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
        "output": "142.0"
      },
      {
        "input": "nums = [8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "703.0"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "20.0"
      },
      {
        "input": "nums = [30,26,28,12,14,22,2,4,18,20,16,8,10,24,6,5,15,3,25,7,9,11,13,17,19,21,23,27,29]",
        "output": "3327.0"
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "6.0"
      },
      {
        "input": "nums = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "6654.0"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "20.0"
      },
      {
        "input": "nums = [30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30]",
        "output": "20.0"
      },
      {
        "input": "nums = [7,11,13,17,19,23,29]",
        "output": "127.0"
      },
      {
        "input": "nums = [4,2,3,15]",
        "output": "5.0"
      },
      {
        "input": "nums = [2,2,3,3,5,5,7,7,11,11,13,13,17,17,19,19,23,23,29,29]",
        "output": "59048.0"
      },
      {
        "input": "nums = [30,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "3326.0"
      },
      {
        "input": "nums = [30,28,24,22,20,18,16,14,12,10,8,6,4,2]",
        "output": "6.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29]",
        "output": "1023.0"
      },
      {
        "input": "nums = [1,1,1,2,2,3,3,30]",
        "output": "72.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,2,3,5,7,11,13,17,19,23,29]",
        "output": "59048.0"
      },
      {
        "input": "nums = [10,20,30,1,2,3,5,7]",
        "output": "42.0"
      },
      {
        "input": "nums = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]",
        "output": "1.0"
      },
      {
        "input": "nums = [6,10,14,15,21,22,26,30]",
        "output": "14.0"
      },
      {
        "input": "nums = [1,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,1]",
        "output": "4092.0"
      },
      {
        "input": "nums = [2,2,2,3,3,3,5,5,5,7,7,7,11,11,11,13,13,13,17,17,17,19,19,19,23,23,23,29,29,29]",
        "output": "1048575.0"
      },
      {
        "input": "nums = [1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 30, 33]",
        "output": "6654.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,6,10,14,15,21,22,26,30,4,9,16,25,28,1,1,1,1,1,1,1,1,1,1]",
        "output": "3406848.0"
      },
      {
        "input": "nums = [4, 6, 8, 9, 10, 12, 14, 15, 18, 20, 21, 22, 25, 26, 27, 30]",
        "output": "14.0"
      },
      {
        "input": "nums = [6, 10, 14, 15, 21, 22, 26, 30, 33, 34, 35, 38, 39, 42, 46, 51, 55, 57, 58, 62]",
        "output": "14.0"
      },
      {
        "input": "nums = [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]",
        "output": "20.0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "nums = [6, 10, 14, 15, 21, 22, 26, 30, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 1, 1]",
        "output": "13308.0"
      },
      {
        "input": "nums = [2,3,2,3,5,5,7,7,11,11,13,13,17,17,19,19,23,23,29,29,30,30,30]",
        "output": "65609.0"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "43.0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "6654.0"
      },
      {
        "input": "nums = [4, 6, 10, 14, 15, 21, 22, 26, 27, 30]",
        "output": "14.0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "output": "72693241.0"
      },
      {
        "input": "nums = [29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29]",
        "output": "27.0"
      },
      {
        "input": "nums = [2,2,2,2,3,3,3,3,5,5,5,5,7,7,7,7,11,11,11,11]",
        "output": "3124.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]",
        "output": "1023.0"
      },
      {
        "input": "nums = [4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30]",
        "output": "14.0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
        "output": "32736.0"
      },
      {
        "input": "nums = [2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]",
        "output": "255.0"
      },
      {
        "input": "nums = [1,1,2,3,5,7,11,13,17,19,23,29,30]",
        "output": "4604.0"
      },
      {
        "input": "nums = [1, 2, 2, 2, 3, 3, 3, 3, 5, 5, 5, 5, 7, 7, 7, 7, 11, 11, 11, 11]",
        "output": "4998.0"
      },
      {
        "input": "nums = [6, 15, 10, 14, 21, 22, 26, 22, 21, 14, 10, 15, 6, 30, 30, 30, 30, 30, 30, 30]",
        "output": "40.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,6,10,14,15,21,22,26,30,1,1,1,1,1,1,1,1,1,1]",
        "output": "3406848.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,30,30,30,30,30,30,30,30,30,30]",
        "output": "2303.0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18]",
        "output": "2111.0"
      },
      {
        "input": "nums = [4,9,16,25,28,10,14,21,22,30,30,30,30,30,30,30,30,30,30]",
        "output": "16.0"
      },
      {
        "input": "nums = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67]",
        "output": "2046.0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]",
        "output": "1023.0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "output": "9765624.0"
      },
      {
        "input": "nums = [2, 2, 3, 3, 5, 5, 7, 7, 11, 11, 13, 13, 17, 17, 19, 19, 23, 23, 29, 29, 30, 30, 30, 30, 30]",
        "output": "69983.0"
      },
      {
        "input": "nums = [4, 8, 9, 12, 18, 20, 24, 25, 27, 28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 5, 5, 5, 5, 7, 7, 7, 7]",
        "output": "9984.0"
      },
      {
        "input": "nums = [4, 6, 8, 9, 10, 12, 14, 15, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 30, 30]",
        "output": "16.0"
      },
      {
        "input": "nums = [1, 6, 10, 15, 21, 22, 26, 30]",
        "output": "24.0"
      },
      {
        "input": "nums = [1,6,8,9,10,12,14,15,18,20,21,22,24,25,26,27,28,30]",
        "output": "28.0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "6654.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30]",
        "output": "3327.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,2,3,5,7,11,13,17,19,23,29,2,3,5,7,11,13,17,19,23,29,4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30]",
        "output": "1548287.0"
      },
      {
        "input": "nums = [8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 35]",
        "output": "13.0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 32, 34, 35, 38, 39, 41, 43, 46, 47]",
        "output": "1023.0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,3,5,7,11,13,17,19,23,29]",
        "output": "1047552.0"
      },
      {
        "input": "nums = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 30, 15, 6, 10, 21, 22]",
        "output": "5246.0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,5,7,11,13,17,19,23,29]",
        "output": "72693241.0"
      },
      {
        "input": "nums = [1, 1, 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "output": "8184.0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
        "output": "1023.0"
      },
      {
        "input": "nums = [1,2,2,3,3,5,5,7,7,11,11,13,13,17,17,19,19,23,23,29,29,30,30]",
        "output": "126844.0"
      },
      {
        "input": "nums = [1,2,3,5,7,11,13,17,19,23,29,6,10,14,15,21,22,26,30,30,30,30,30,30,30,30,30,30]",
        "output": "8958.0"
      },
      {
        "input": "nums = [1,4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30]",
        "output": "28.0"
      },
      {
        "input": "nums = [30,28,15,10,6,3,2,1]",
        "output": "18.0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "output": "59048.0"
      },
      {
        "input": "nums = [15,10,21,30,22,26,28,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30]",
        "output": "32.0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]",
        "output": "1023.0"
      },
      {
        "input": "nums = [30, 28, 26, 22, 21, 14, 10, 15, 6, 4, 8, 9, 12, 18, 20, 24, 25, 27, 1, 1]",
        "output": "56.0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "1054.0"
      },
      {
        "input": "nums = [10,15,21,22,26,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30]",
        "output": "25.0"
      },
      {
        "input": "nums = [8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30]",
        "output": "13.0"
      },
      {
        "input": "nums = [6,10,14,15,21,22,26,30,30,30,30,30]",
        "output": "18.0"
      },
      {
        "input": "nums = [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]",
        "output": "30.0"
      },
      {
        "input": "nums = [4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30,30,30,1,1,1,1,1,1]",
        "output": "1024.0"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30]",
        "output": "691088.0"
      },
      {
        "input": "nums = [4, 6, 8, 9, 10, 12, 14, 15, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100]",
        "output": "14.0"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "14.0"
      },
      {
        "input": "nums = [6, 10, 14, 15, 21, 22, 26, 30, 33, 34, 35, 38, 39, 46, 51, 55, 57, 58, 62, 65, 69, 74, 77, 82, 85, 86, 87, 91, 93, 94, 95]",
        "output": "14.0"
      },
      {
        "input": "nums = [30,15,6,10,21,22,26,27,28,3,5,7,11,13,17,19,23,29,1,1,1,1,1,1,1,1,1,1]",
        "output": "2292736.0"
      },
      {
        "input": "nums = [2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 30, 33, 34]",
        "output": "3327.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,30,2,3,5,7,11,13,17,19,23]",
        "output": "40823.0"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 5, 5, 7, 7, 11, 11, 13, 13, 17, 17, 19, 19, 23, 23, 29, 29]",
        "output": "118096.0"
      },
      {
        "input": "nums = [1,2,3,5,7,11,13,17,19,23,29,30]",
        "output": "2302.0"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,1,1,1,1,1,1,1,1,1]",
        "output": "3406848.0"
      },
      {
        "input": "nums = [30, 15, 21, 10, 6, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 4, 8, 9, 12, 14, 16, 18, 20, 22, 24, 25, 26, 27, 28, 32, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100]",
        "output": "3327.0"
      },
      {
        "input": "nums = [6, 15, 10, 14, 21, 22, 26, 22, 21, 14, 10, 15, 6, 30, 2, 3, 5, 7, 11, 13]",
        "output": "359.0"
      },
      {
        "input": "nums = [1, 6, 10, 14, 15, 21, 22, 26, 30, 33, 34, 35, 38, 39, 46, 51, 55, 57, 58, 62, 65, 69, 74, 77, 82, 85, 86, 87, 91, 93, 94, 95]",
        "output": "28.0"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1047552.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,30,30,30]",
        "output": "1407.0"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "20.0"
      },
      {
        "input": "nums = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 6, 10, 14, 15, 21, 22, 26, 30, 1]",
        "output": "13308.0"
      },
      {
        "input": "nums = [6,10,14,15,21,22,26,30,30,30]",
        "output": "16.0"
      },
      {
        "input": "nums = [1,1,1,1,2,3,5,7,11,13,17,19,23,29]",
        "output": "16368.0"
      },
      {
        "input": "nums = [4, 8, 9, 12, 16, 18, 20, 24, 25, 27, 28, 1, 2, 3, 5, 7, 11, 13, 17, 19]",
        "output": "510.0"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,2,2,3,3,5,5,7,7,11,11,13,13,17,17,19,19,23,23,29,29]",
        "output": "1048575.0"
      },
      {
        "input": "nums = [8,9,12,18,20,24,25,27,28,30]",
        "output": "1.0"
      },
      {
        "input": "nums = [1, 1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 30]",
        "output": "13308.0"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7,7,7]",
        "output": "24166.0"
      }
    ]
  },
  {
    "id": 3086,
    "difficulty": "Hard",
    "tags": [
      "Greedy",
      "Array",
      "Prefix Sum",
      "Sliding Window"
    ],
    "problemDescription": "You are given a binary array nums of length n, a positive integer k and a non-negative integer maxChanges.\nAlice plays a game, where the goal is for Alice to pick up k ones from nums using the minimum number of moves. When the game starts, Alice picks up any index aliceIndex in the range [0, n - 1] and stands there. If nums[aliceIndex] == 1 , Alice picks up the one and nums[aliceIndex] becomes 0(this does not count as a move). After this, Alice can make any number of moves (including zero) where in each move Alice must perform exactly one of the following actions:\n\nSelect any index j != aliceIndex such that nums[j] == 0 and set nums[j] = 1. This action can be performed at most maxChanges times.\nSelect any two adjacent indices x and y (|x - y| == 1) such that nums[x] == 1, nums[y] == 0, then swap their values (set nums[y] = 1 and nums[x] = 0). If y == aliceIndex, Alice picks up the one after this move and nums[y] becomes 0.\n\nReturn the minimum number of moves required by Alice to pick exactly k ones.\n\u00a0\nExample 1:\n\nInput: nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1\nOutput: 3\nExplanation: Alice can pick up 3 ones in 3 moves, if Alice performs the following actions in each move when standing at aliceIndex == 1:\n\nAt the start of the game Alice picks up the one and nums[1] becomes 0. nums becomes [1,0,0,0,0,1,1,0,0,1].\nSelect j == 2 and perform an action of the first type. nums becomes [1,0,1,0,0,1,1,0,0,1]\nSelect x == 2 and y == 1, and perform an action of the second type. nums becomes [1,1,0,0,0,1,1,0,0,1]. As y == aliceIndex, Alice picks up the one and nums becomes [1,0,0,0,0,1,1,0,0,1].\nSelect x == 0 and y == 1, and perform an action of the second type. nums becomes [0,1,0,0,0,1,1,0,0,1]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0,0,1,1,0,0,1].\n\nNote that it may be possible for Alice to pick up 3 ones using some other sequence of 3 moves.\n\nExample 2:\n\nInput: nums = [0,0,0,0], k = 2, maxChanges = 3\nOutput: 4\nExplanation: Alice can pick up 2 ones in 4 moves, if Alice performs the following actions in each move when standing at aliceIndex == 0:\n\nSelect j == 1 and perform an action of the first type. nums becomes [0,1,0,0].\nSelect x == 1 and y == 0, and perform an action of the second type. nums becomes [1,0,0,0]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0].\nSelect j == 1 again and perform an action of the first type. nums becomes [0,1,0,0].\nSelect x == 1 and y == 0 again, and perform an action of the second type. nums becomes [1,0,0,0]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0].\n\n\n\u00a0\nConstraints:\n\n2 <= n <= 105\n0 <= nums[i] <= 1\n1 <= k <= 105\n0 <= maxChanges <= 105\nmaxChanges + sum(nums) >= k\n\n",
    "starterCode": "class Solution:\n    def minimumMoves(self, nums: List[int], k: int, maxChanges: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1], k = 5, maxChanges = 5",
        "output": "8"
      },
      {
        "input": "nums = [1,1,0,0,0,0,0,0,0,1], k = 3, maxChanges = 2",
        "output": "3"
      },
      {
        "input": "nums = [1,0,0,0,0,0,0,0,0,1], k = 2, maxChanges = 1",
        "output": "2"
      },
      {
        "input": "nums = [0,0,1,0,0,0,0,0,1,0], k = 2, maxChanges = 1",
        "output": "2"
      },
      {
        "input": "nums = [1,0,0,0,0,0,0,0,0,0], k = 1, maxChanges = 0",
        "output": "0"
      },
      {
        "input": "nums = [0,0,0,0], k = 2, maxChanges = 3",
        "output": "4"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1], k = 4, maxChanges = 0",
        "output": "8"
      },
      {
        "input": "nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1",
        "output": "3"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 5, maxChanges = 3",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,1,0,0,0,0,0], k = 5, maxChanges = 5",
        "output": "6"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1], k = 5, maxChanges = 0",
        "output": "12"
      },
      {
        "input": "nums = [0,0,0,0,0,1,1,1,1,1], k = 5, maxChanges = 5",
        "output": "6"
      },
      {
        "input": "nums = [0,0,1,0,0,0,0,1,0,0], k = 2, maxChanges = 1",
        "output": "2"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0], k = 5, maxChanges = 2",
        "output": "8"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], k = 5, maxChanges = 0",
        "output": "6"
      },
      {
        "input": "nums = [1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0], k = 12, maxChanges = 7",
        "output": "26"
      },
      {
        "input": "nums = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], k = 2, maxChanges = 1",
        "output": "2"
      },
      {
        "input": "nums = [1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0], k = 15, maxChanges = 20",
        "output": "28"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], k = 10, maxChanges = 5",
        "output": "22"
      },
      {
        "input": "nums = [1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1], k = 7, maxChanges = 3",
        "output": "13"
      },
      {
        "input": "nums = [1,1,1,0,0,0,1,1,1,0,0,0,1,1,1], k = 6, maxChanges = 3",
        "output": "8"
      },
      {
        "input": "nums = [0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0], k = 4, maxChanges = 2",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,0,0,0,0,0,0], k = 4, maxChanges = 2",
        "output": "4"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1], k = 10, maxChanges = 5",
        "output": "22"
      },
      {
        "input": "nums = [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1], k = 5, maxChanges = 3",
        "output": "6"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1], k = 7, maxChanges = 10",
        "output": "10"
      },
      {
        "input": "nums = [1,1,0,0,0,0,1,1,0,0,0,0,1,1], k = 4, maxChanges = 0",
        "output": "12"
      },
      {
        "input": "nums = [1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0], k = 5, maxChanges = 5",
        "output": "8"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], k = 20, maxChanges = 15",
        "output": "42"
      },
      {
        "input": "nums = [1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1], k = 15, maxChanges = 5",
        "output": "85"
      },
      {
        "input": "nums = [1,1,0,0,1,0,1,0,1,0], k = 4, maxChanges = 0",
        "output": "9"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1], k = 4, maxChanges = 10",
        "output": "4"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1], k = 10, maxChanges = 5",
        "output": "22"
      },
      {
        "input": "nums = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1], k = 2, maxChanges = 0",
        "output": "1"
      },
      {
        "input": "nums = [1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0], k = 6, maxChanges = 2",
        "output": "12"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 15, maxChanges = 5",
        "output": "35"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1], k = 7, maxChanges = 2",
        "output": "16"
      },
      {
        "input": "nums = [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 4, maxChanges = 5",
        "output": "4"
      },
      {
        "input": "nums = [1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0], k = 10, maxChanges = 5",
        "output": "22"
      },
      {
        "input": "nums = [1,0,0,1,0,0,1,0,0,1,0,0,1,0,0], k = 3, maxChanges = 2",
        "output": "4"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1], k = 4, maxChanges = 2",
        "output": "6"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1], k = 5, maxChanges = 3",
        "output": "8"
      },
      {
        "input": "nums = [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1], k = 5, maxChanges = 5",
        "output": "8"
      },
      {
        "input": "nums = [0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0], k = 6, maxChanges = 3",
        "output": "8"
      },
      {
        "input": "nums = [0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0], k = 5, maxChanges = 25",
        "output": "8"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1], k = 2, maxChanges = 5",
        "output": "1"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], k = 2, maxChanges = 2",
        "output": "2"
      },
      {
        "input": "nums = [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1], k = 3, maxChanges = 0",
        "output": "19"
      },
      {
        "input": "nums = [0,1,1,0,0,1,0,0,1,0], k = 3, maxChanges = 2",
        "output": "3"
      },
      {
        "input": "nums = [1,0,0,0,0,0,1,0,0,1], k = 3, maxChanges = 1",
        "output": "5"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1], k = 4, maxChanges = 1",
        "output": "6"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], k = 1, maxChanges = 0",
        "output": "0"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1], k = 2, maxChanges = 0",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 3, maxChanges = 0",
        "output": "2"
      },
      {
        "input": "nums = [0,0,0,1,0,0,0,0,1,0], k = 2, maxChanges = 2",
        "output": "2"
      },
      {
        "input": "nums = [1,0,0,0,0,0,0,1,1,1], k = 3, maxChanges = 0",
        "output": "2"
      },
      {
        "input": "nums = [0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0], k = 3, maxChanges = 3",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,0,0,0,0,0,1,1], k = 4, maxChanges = 2",
        "output": "4"
      },
      {
        "input": "nums = [0,0,0,1,0,0,1,0,0,1,0,0,1,0,0], k = 4, maxChanges = 2",
        "output": "7"
      },
      {
        "input": "nums = [0,0,0,0,0,1,1,1,1,1,0,0,0,0,0], k = 5, maxChanges = 1",
        "output": "6"
      },
      {
        "input": "nums = [0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0], k = 4, maxChanges = 3",
        "output": "6"
      },
      {
        "input": "nums = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], k = 2, maxChanges = 0",
        "output": "60"
      },
      {
        "input": "nums = [1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1], k = 4, maxChanges = 0",
        "output": "12"
      },
      {
        "input": "nums = [0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0], k = 3, maxChanges = 0",
        "output": "2"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0], k = 4, maxChanges = 2",
        "output": "6"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1], k = 3, maxChanges = 1",
        "output": "4"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,1,1], k = 2, maxChanges = 1",
        "output": "1"
      },
      {
        "input": "nums = [0,0,1,1,0,0,1,1,0,0], k = 4, maxChanges = 1",
        "output": "6"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], k = 1, maxChanges = 1",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], k = 25, maxChanges = 10",
        "output": "76"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1], k = 6, maxChanges = 4",
        "output": "10"
      },
      {
        "input": "nums = [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0], k = 4, maxChanges = 2",
        "output": "8"
      },
      {
        "input": "nums = [1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1], k = 4, maxChanges = 2",
        "output": "5"
      },
      {
        "input": "nums = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 1, maxChanges = 10",
        "output": "0"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0], k = 3, maxChanges = 1",
        "output": "4"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], k = 6, maxChanges = 4",
        "output": "10"
      },
      {
        "input": "nums = [1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1], k = 6, maxChanges = 0",
        "output": "27"
      },
      {
        "input": "nums = [0,0,1,0,1,1,0,1,0,0,0,1,1,0,1], k = 5, maxChanges = 3",
        "output": "7"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1], k = 10, maxChanges = 0",
        "output": "50"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1], k = 5, maxChanges = 10",
        "output": "6"
      },
      {
        "input": "nums = [1,1,0,0,0,0,0,0,0,0,0,0,0,0,1], k = 2, maxChanges = 1",
        "output": "1"
      },
      {
        "input": "nums = [0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0], k = 3, maxChanges = 1",
        "output": "7"
      },
      {
        "input": "nums = [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1], k = 8, maxChanges = 4",
        "output": "12"
      },
      {
        "input": "nums = [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 4, maxChanges = 0",
        "output": "4"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], k = 1, maxChanges = 5",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 5, maxChanges = 10",
        "output": "6"
      },
      {
        "input": "nums = [0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0], k = 5, maxChanges = 10",
        "output": "8"
      },
      {
        "input": "nums = [1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0], k = 25, maxChanges = 30",
        "output": "47"
      },
      {
        "input": "nums = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1], k = 3, maxChanges = 2",
        "output": "4"
      },
      {
        "input": "nums = [1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1], k = 5, maxChanges = 1",
        "output": "15"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1], k = 10, maxChanges = 3",
        "output": "30"
      },
      {
        "input": "nums = [1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1], k = 7, maxChanges = 5",
        "output": "11"
      },
      {
        "input": "nums = [1,1,0,0,1,1,0,0,1,1], k = 5, maxChanges = 0",
        "output": "12"
      },
      {
        "input": "nums = [1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0], k = 8, maxChanges = 3",
        "output": "22"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0,1], k = 3, maxChanges = 2",
        "output": "4"
      }
    ]
  },
  {
    "id": 3104,
    "difficulty": "Hard",
    "tags": [
      "Hash Table",
      "String",
      "Binary Search",
      "Prefix Sum"
    ],
    "problemDescription": "Given a string s, your task is to find the length of the longest self-contained substring of s.\nA substring t of a string s is called self-contained if t != s and for every character in t, it doesn't exist in the rest of s.\nReturn the length of the longest self-contained substring of s if it exists, otherwise, return -1.\n\u00a0\nExample 1:\n\nInput: s = \"abba\"\nOutput: 2\nExplanation:\nLet's check the substring \"bb\". You can see that no other \"b\" is outside of this substring. Hence the answer is 2.\n\nExample 2:\n\nInput: s = \"abab\"\nOutput: -1\nExplanation:\nEvery substring we choose does not satisfy the described property (there is some character which is inside and outside of that substring). So the answer would be -1.\n\nExample 3:\n\nInput: s = \"abacd\"\nOutput: 4\nExplanation:\nLet's check the substring \"abac\". There is only one character outside of this substring and that is \"d\". There is no \"d\" inside the chosen substring, so it satisfies the condition and the answer is 4.\n\n\u00a0\nConstraints:\n\n2 <= s.length <= 5 * 104\ns consists only of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def maxSubstringLength(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"abcdeabcde\"",
        "output": "-1"
      },
      {
        "input": "s = \"abba\"",
        "output": "2"
      },
      {
        "input": "s = \"zzzzzz\"",
        "output": "-1"
      },
      {
        "input": "s = \"aabbcc\"",
        "output": "4"
      },
      {
        "input": "s = \"abacabadabacaba\"",
        "output": "1"
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "-1"
      },
      {
        "input": "s = \"xyzzyx\"",
        "output": "4"
      },
      {
        "input": "s = \"abacd\"",
        "output": "4"
      },
      {
        "input": "s = \"abcdef\"",
        "output": "5"
      },
      {
        "input": "s = \"aabbccddeeff\"",
        "output": "10"
      },
      {
        "input": "s = \"abcdeabc\"",
        "output": "2"
      },
      {
        "input": "s = \"xyzabc\"",
        "output": "5"
      },
      {
        "input": "s = \"aaaa\"",
        "output": "-1"
      },
      {
        "input": "s = \"abab\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabc\"",
        "output": "-1"
      },
      {
        "input": "s = \"aaabbbccc\"",
        "output": "6"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "-1"
      },
      {
        "input": "s = \"abacabadabacabadabacabad\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "25"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghijabcdefghij\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "-1"
      },
      {
        "input": "s = \"mnopqrsmnopqrsmnopqrsmnopqrsmnopqrsmnopqrs\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "60"
      },
      {
        "input": "s = \"abcdefgihgfedcba\"",
        "output": "14"
      },
      {
        "input": "s = \"abcdabcde\"",
        "output": "8"
      },
      {
        "input": "s = \"mnopmnopmnop\"",
        "output": "-1"
      },
      {
        "input": "s = \"aabbaaabbbaaabbbaaa\"",
        "output": "-1"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\"",
        "output": "-1"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbbbbccccccccdddddd\"",
        "output": "31"
      },
      {
        "input": "s = \"abcdeffedcbaa\"",
        "output": "10"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzxyz\"",
        "output": "53"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzz\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdabcdeabcdabcdeabcd\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefabcdefabcdefabcdefabcdef\"",
        "output": "-1"
      },
      {
        "input": "s = \"mnopqrsmnopqrsmnopqrs\"",
        "output": "-1"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzz\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefgabcdefgabcdefgabcdefg\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefg\"",
        "output": "-1"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd\"",
        "output": "30"
      },
      {
        "input": "s = \"mnopqrstmnopqrstmnopqrstmnopqrstmnopqrstmnopqrst\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefgihgfedcbamnopqrsmnopqrsmnopqrs\"",
        "output": "21"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzab\"",
        "output": "48"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefg\"",
        "output": "-1"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyz\"",
        "output": "50"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzabcdefghijklmnopqrstuvwxyz\"",
        "output": "-1"
      },
      {
        "input": "s = \"abacabadabacabadabacabadabacabadabacabad\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabc\"",
        "output": "-1"
      },
      {
        "input": "s = \"ababababababababababababababab\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefgabcdefgabcdefg\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\"",
        "output": "-1"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "50"
      },
      {
        "input": "s = \"abcdefabcdefabcdefabcdef\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "-1"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzz\"",
        "output": "52"
      },
      {
        "input": "s = \"abcdabcdabcd\"",
        "output": "-1"
      },
      {
        "input": "s = \"abababababababababababababababababababababababababababababababab\"",
        "output": "-1"
      },
      {
        "input": "s = \"xyzxyzxyzxyzxyzxyzxyzxyzxyzxyz\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabc\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "-1"
      },
      {
        "input": "s = \"abababababab\"",
        "output": "-1"
      },
      {
        "input": "s = \"zyxwzyxwzyxwzyxwzyxwzyxwzyxwzyxwzyxwzyxw\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefgabcdefg\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefghijkabcdefghijk\"",
        "output": "-1"
      },
      {
        "input": "s = \"abababababababababababababababab\"",
        "output": "-1"
      },
      {
        "input": "s = \"abacabadabac\"",
        "output": "1"
      },
      {
        "input": "s = \"aabbccddeeffgghhii\"",
        "output": "16"
      },
      {
        "input": "s = \"mnopqrstuvwxyz\"",
        "output": "13"
      },
      {
        "input": "s = \"aabbaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "54"
      },
      {
        "input": "s = \"abcdefgabcdefgabcdefgabcdefgh\"",
        "output": "28"
      },
      {
        "input": "s = \"abcdeffedcba\"",
        "output": "10"
      },
      {
        "input": "s = \"abcdabcdeabcdeabcde\"",
        "output": "-1"
      },
      {
        "input": "s = \"aaabbbcccdddcccbbaaa\"",
        "output": "14"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzxy\"",
        "output": "51"
      },
      {
        "input": "s = \"qwertyqwertyqwertyqwerty\"",
        "output": "-1"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxy\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcdeabcdeabcdeabcdeabcdeabcde\"",
        "output": "-1"
      },
      {
        "input": "s = \"xyzxyzxyzxyz\"",
        "output": "-1"
      },
      {
        "input": "s = \"xyzabcxyzabcxyzabcxyzabc\"",
        "output": "-1"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "50"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "-1"
      },
      {
        "input": "s = \"mnopqrstmnopqrstmnopqrstmnopqrst\"",
        "output": "-1"
      },
      {
        "input": "s = \"abcabcabcabcfdefgdefgdefg\"",
        "output": "13"
      },
      {
        "input": "s = \"aabbaabbaabbaabb\"",
        "output": "-1"
      }
    ]
  },
  {
    "id": 964,
    "difficulty": "Hard",
    "tags": [
      "Memoization",
      "Math",
      "Dynamic Programming"
    ],
    "problemDescription": "Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.\nWhen writing such an expression, we adhere to the following conventions:\n\nThe division operator (/) returns rational numbers.\nThere are no parentheses placed anywhere.\nWe use the usual order of operations: multiplication and division happen before addition and subtraction.\nIt is not allowed to use the unary negation operator (-). For example, \"x - x\" is a valid expression as it only uses subtraction, but \"-x + x\" is not because it uses negation.\n\nWe would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.\n\u00a0\nExample 1:\n\nInput: x = 3, target = 19\nOutput: 5\nExplanation: 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations.\n\nExample 2:\n\nInput: x = 5, target = 501\nOutput: 8\nExplanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations.\n\nExample 3:\n\nInput: x = 100, target = 100000000\nOutput: 3\nExplanation: 100 * 100 * 100 * 100.\nThe expression contains 3 operations.\n\n\u00a0\nConstraints:\n\n2 <= x <= 100\n1 <= target <= 2 * 108\n\n",
    "starterCode": "class Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        ",
    "testCases": [
      {
        "input": "x = 2, target = 123456",
        "output": "44"
      },
      {
        "input": "x = 2, target = 3",
        "output": "2"
      },
      {
        "input": "x = 3, target = 81",
        "output": "3"
      },
      {
        "input": "x = 10, target = 1001",
        "output": "4"
      },
      {
        "input": "x = 2, target = 10",
        "output": "3"
      },
      {
        "input": "x = 2, target = 100",
        "output": "12"
      },
      {
        "input": "x = 4, target = 30",
        "output": "7"
      },
      {
        "input": "x = 5, target = 1",
        "output": "1"
      },
      {
        "input": "x = 5, target = 501",
        "output": "8"
      },
      {
        "input": "x = 4, target = 63",
        "output": "4"
      },
      {
        "input": "x = 10, target = 10000",
        "output": "3"
      },
      {
        "input": "x = 2, target = 127",
        "output": "8"
      },
      {
        "input": "x = 3, target = 19",
        "output": "5"
      },
      {
        "input": "x = 50, target = 1250",
        "output": "24"
      },
      {
        "input": "x = 7, target = 49",
        "output": "1"
      },
      {
        "input": "x = 50, target = 2500",
        "output": "1"
      },
      {
        "input": "x = 100, target = 100000000",
        "output": "3"
      },
      {
        "input": "x = 10, target = 1000",
        "output": "2"
      },
      {
        "input": "x = 10, target = 1000000",
        "output": "5"
      },
      {
        "input": "x = 3, target = 1",
        "output": "1"
      },
      {
        "input": "x = 7, target = 300",
        "output": "7"
      },
      {
        "input": "x = 41, target = 753195728",
        "output": "246"
      },
      {
        "input": "x = 37, target = 1874161",
        "output": "3"
      },
      {
        "input": "x = 11, target = 1111111111",
        "output": "88"
      },
      {
        "input": "x = 13, target = 31254",
        "output": "17"
      },
      {
        "input": "x = 7, target = 100",
        "output": "7"
      },
      {
        "input": "x = 3, target = 1234567",
        "output": "66"
      },
      {
        "input": "x = 6, target = 999999",
        "output": "73"
      },
      {
        "input": "x = 4, target = 1000000",
        "output": "35"
      },
      {
        "input": "x = 6, target = 7776",
        "output": "4"
      },
      {
        "input": "x = 41, target = 2825761",
        "output": "3"
      },
      {
        "input": "x = 7, target = 343",
        "output": "2"
      },
      {
        "input": "x = 11, target = 214358881",
        "output": "7"
      },
      {
        "input": "x = 13, target = 169",
        "output": "1"
      },
      {
        "input": "x = 8, target = 512",
        "output": "2"
      },
      {
        "input": "x = 4, target = 1023",
        "output": "6"
      },
      {
        "input": "x = 19, target = 361",
        "output": "1"
      },
      {
        "input": "x = 25, target = 123456789012",
        "output": "207"
      },
      {
        "input": "x = 10, target = 1000000001",
        "output": "10"
      },
      {
        "input": "x = 97, target = 22138067",
        "output": "231"
      },
      {
        "input": "x = 9, target = 6561",
        "output": "3"
      },
      {
        "input": "x = 23, target = 123456",
        "output": "60"
      },
      {
        "input": "x = 49, target = 1174711139839679",
        "output": "325"
      },
      {
        "input": "x = 30, target = 987654321098",
        "output": "265"
      },
      {
        "input": "x = 25, target = 625",
        "output": "1"
      },
      {
        "input": "x = 7, target = 10000000",
        "output": "50"
      },
      {
        "input": "x = 5, target = 243",
        "output": "10"
      },
      {
        "input": "x = 67, target = 3521614606207",
        "output": "405"
      },
      {
        "input": "x = 6, target = 216000",
        "output": "32"
      },
      {
        "input": "x = 20, target = 87654321",
        "output": "95"
      },
      {
        "input": "x = 8, target = 200000",
        "output": "28"
      },
      {
        "input": "x = 25, target = 10000000",
        "output": "38"
      },
      {
        "input": "x = 7, target = 3430",
        "output": "12"
      },
      {
        "input": "x = 8, target = 2048",
        "output": "11"
      },
      {
        "input": "x = 11, target = 1771561",
        "output": "5"
      },
      {
        "input": "x = 4, target = 65536",
        "output": "7"
      },
      {
        "input": "x = 4, target = 65535",
        "output": "9"
      },
      {
        "input": "x = 97, target = 88629381196525010959293",
        "output": "1536"
      },
      {
        "input": "x = 59, target = 511116753300699300624",
        "output": "340"
      },
      {
        "input": "x = 99, target = 11032558",
        "output": "144"
      },
      {
        "input": "x = 11, target = 121121",
        "output": "25"
      },
      {
        "input": "x = 5, target = 123456",
        "output": "45"
      },
      {
        "input": "x = 10, target = 99999",
        "output": "6"
      },
      {
        "input": "x = 15, target = 1000000",
        "output": "61"
      },
      {
        "input": "x = 30, target = 299999",
        "output": "50"
      },
      {
        "input": "x = 8, target = 32768",
        "output": "4"
      },
      {
        "input": "x = 83, target = 44349085",
        "output": "172"
      },
      {
        "input": "x = 12, target = 1728",
        "output": "2"
      },
      {
        "input": "x = 20, target = 999999",
        "output": "40"
      },
      {
        "input": "x = 31, target = 887503681",
        "output": "5"
      },
      {
        "input": "x = 2, target = 1048575",
        "output": "21"
      },
      {
        "input": "x = 4, target = 100000000",
        "output": "86"
      },
      {
        "input": "x = 80, target = 9876543210987654",
        "output": "341"
      },
      {
        "input": "x = 8, target = 5000000",
        "output": "60"
      },
      {
        "input": "x = 17, target = 1444",
        "output": "11"
      },
      {
        "input": "x = 17, target = 2458624",
        "output": "72"
      },
      {
        "input": "x = 17, target = 24137569",
        "output": "5"
      },
      {
        "input": "x = 11, target = 146410",
        "output": "8"
      },
      {
        "input": "x = 59, target = 420746139",
        "output": "269"
      },
      {
        "input": "x = 29, target = 87654321",
        "output": "78"
      },
      {
        "input": "x = 9, target = 98765",
        "output": "34"
      },
      {
        "input": "x = 7, target = 123456",
        "output": "31"
      },
      {
        "input": "x = 3, target = 1000",
        "output": "15"
      },
      {
        "input": "x = 37, target = 864197532",
        "output": "157"
      },
      {
        "input": "x = 15, target = 1000000000",
        "output": "104"
      },
      {
        "input": "x = 11, target = 987654321",
        "output": "153"
      },
      {
        "input": "x = 67, target = 208653121",
        "output": "188"
      },
      {
        "input": "x = 73, target = 66560103",
        "output": "142"
      },
      {
        "input": "x = 12, target = 9876543210",
        "output": "121"
      },
      {
        "input": "x = 31, target = 1999999999",
        "output": "139"
      },
      {
        "input": "x = 9, target = 81000",
        "output": "27"
      },
      {
        "input": "x = 5, target = 999",
        "output": "14"
      },
      {
        "input": "x = 53, target = 418195493",
        "output": "4"
      },
      {
        "input": "x = 5, target = 12345",
        "output": "16"
      },
      {
        "input": "x = 25, target = 97654321",
        "output": "65"
      },
      {
        "input": "x = 4, target = 1024",
        "output": "4"
      },
      {
        "input": "x = 8, target = 5000",
        "output": "14"
      },
      {
        "input": "x = 9, target = 8100",
        "output": "11"
      },
      {
        "input": "x = 7, target = 4913",
        "output": "15"
      },
      {
        "input": "x = 25, target = 9765625",
        "output": "4"
      },
      {
        "input": "x = 9, target = 387420489",
        "output": "8"
      },
      {
        "input": "x = 19, target = 987654",
        "output": "65"
      },
      {
        "input": "x = 6, target = 7777",
        "output": "6"
      },
      {
        "input": "x = 47, target = 642839175",
        "output": "146"
      },
      {
        "input": "x = 40, target = 12345678901234",
        "output": "251"
      },
      {
        "input": "x = 5, target = 123",
        "output": "6"
      },
      {
        "input": "x = 60, target = 98765432109876",
        "output": "523"
      },
      {
        "input": "x = 61, target = 309699630",
        "output": "232"
      },
      {
        "input": "x = 79, target = 55454594",
        "output": "233"
      },
      {
        "input": "x = 19, target = 99999",
        "output": "35"
      },
      {
        "input": "x = 20, target = 200000",
        "output": "18"
      },
      {
        "input": "x = 8, target = 56789",
        "output": "31"
      },
      {
        "input": "x = 23, target = 2222222222",
        "output": "121"
      },
      {
        "input": "x = 6, target = 129600",
        "output": "30"
      },
      {
        "input": "x = 9, target = 87654321",
        "output": "59"
      },
      {
        "input": "x = 3, target = 100000",
        "output": "52"
      },
      {
        "input": "x = 15, target = 123456789",
        "output": "99"
      },
      {
        "input": "x = 13, target = 16913",
        "output": "27"
      },
      {
        "input": "x = 3, target = 4096",
        "output": "25"
      },
      {
        "input": "x = 19, target = 9876543210",
        "output": "138"
      },
      {
        "input": "x = 71, target = 1804229351",
        "output": "4"
      },
      {
        "input": "x = 17, target = 256256256",
        "output": "140"
      },
      {
        "input": "x = 23, target = 279841",
        "output": "3"
      },
      {
        "input": "x = 9, target = 88888888",
        "output": "81"
      },
      {
        "input": "x = 3, target = 98765",
        "output": "41"
      },
      {
        "input": "x = 70, target = 1234567890123456",
        "output": "435"
      },
      {
        "input": "x = 9, target = 59049",
        "output": "4"
      },
      {
        "input": "x = 13, target = 16901",
        "output": "28"
      },
      {
        "input": "x = 10, target = 9999999",
        "output": "8"
      },
      {
        "input": "x = 5, target = 100000",
        "output": "22"
      },
      {
        "input": "x = 7, target = 200",
        "output": "14"
      },
      {
        "input": "x = 19, target = 2476099",
        "output": "4"
      },
      {
        "input": "x = 7, target = 499",
        "output": "13"
      },
      {
        "input": "x = 3, target = 40",
        "output": "7"
      },
      {
        "input": "x = 6, target = 46655",
        "output": "7"
      },
      {
        "input": "x = 15, target = 10000000",
        "output": "65"
      },
      {
        "input": "x = 9, target = 88888",
        "output": "48"
      },
      {
        "input": "x = 3, target = 12345",
        "output": "29"
      },
      {
        "input": "x = 19, target = 923521",
        "output": "65"
      },
      {
        "input": "x = 5, target = 123456789",
        "output": "101"
      },
      {
        "input": "x = 19, target = 999999999",
        "output": "88"
      },
      {
        "input": "x = 3, target = 987654",
        "output": "73"
      },
      {
        "input": "x = 50, target = 123456789",
        "output": "185"
      },
      {
        "input": "x = 5, target = 987654",
        "output": "60"
      },
      {
        "input": "x = 25, target = 625000",
        "output": "37"
      },
      {
        "input": "x = 4, target = 16777216",
        "output": "11"
      },
      {
        "input": "x = 13, target = 13131313",
        "output": "69"
      },
      {
        "input": "x = 31, target = 28829",
        "output": "6"
      },
      {
        "input": "x = 20, target = 123456",
        "output": "51"
      },
      {
        "input": "x = 11, target = 275",
        "output": "6"
      },
      {
        "input": "x = 23, target = 345345345",
        "output": "105"
      },
      {
        "input": "x = 13, target = 1690",
        "output": "8"
      },
      {
        "input": "x = 89, target = 33243576",
        "output": "225"
      },
      {
        "input": "x = 17, target = 1234567890",
        "output": "109"
      },
      {
        "input": "x = 8, target = 134217728",
        "output": "8"
      },
      {
        "input": "x = 29, target = 40353607",
        "output": "64"
      },
      {
        "input": "x = 25, target = 15625000",
        "output": "49"
      },
      {
        "input": "x = 20, target = 1000000",
        "output": "38"
      },
      {
        "input": "x = 8, target = 1048576",
        "output": "23"
      },
      {
        "input": "x = 53, target = 531792648",
        "output": "196"
      },
      {
        "input": "x = 71, target = 107606612",
        "output": "148"
      }
    ]
  },
  {
    "id": 1889,
    "difficulty": "Hard",
    "tags": [
      "Array",
      "Binary Search",
      "Prefix Sum",
      "Sorting"
    ],
    "problemDescription": "You have n packages that you are trying to place in boxes, one package in each box. There are m suppliers that each produce boxes of different sizes (with infinite supply). A package can be placed in a box if the size of the package is less than or equal to the size of the box.\nThe package sizes are given as an integer array packages, where packages[i] is the size of the ith package. The suppliers are given as a 2D integer array boxes, where boxes[j] is an array of box sizes that the jth supplier produces.\nYou want to choose a single supplier and use boxes from them such that the total wasted space is minimized. For each package in a box, we define the space wasted to be size of the box - size of the package. The total wasted space is the sum of the space wasted in all the boxes.\n\nFor example, if you have to fit packages with sizes [2,3,5] and the supplier offers boxes of sizes [4,8], you can fit the packages of size-2 and size-3 into two boxes of size-4 and the package with size-5 into a box of size-8. This would result in a waste of (4-2) + (4-3) + (8-5) = 6.\n\nReturn the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes. Since the answer may be large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\nInput: packages = [2,3,5], boxes = [[4,8],[2,8]]\nOutput: 6\nExplanation: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.\nThe total waste is (4-2) + (4-3) + (8-5) = 6.\n\nExample 2:\n\nInput: packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]\nOutput: -1\nExplanation: There is no box that the package of size 5 can fit in.\n\nExample 3:\n\nInput: packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]\nOutput: 9\nExplanation: It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.\nThe total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.\n\n\u00a0\nConstraints:\n\nn == packages.length\nm == boxes.length\n1 <= n <= 105\n1 <= m <= 105\n1 <= packages[i] <= 105\n1 <= boxes[j].length <= 105\n1 <= boxes[j][k] <= 105\nsum(boxes[j].length) <= 105\nThe elements in boxes[j] are distinct.\n\n",
    "starterCode": "class Solution:\n    def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "packages = [10,20,30], boxes = [[10],[20],[30],[40]]",
        "output": "30"
      },
      {
        "input": "packages = [100000], boxes = [[100000]]",
        "output": "0"
      },
      {
        "input": "packages = [10,20,30], boxes = [[10,20,30],[15,25,35]]",
        "output": "0"
      },
      {
        "input": "packages = [1,100000], boxes = [[1],[100000]]",
        "output": "99999"
      },
      {
        "input": "packages = [2,3,5], boxes = [[4,8],[2,8]]",
        "output": "6"
      },
      {
        "input": "packages = [1,2,3,4,5,6,7,8,9,10], boxes = [[10,10,10,10,10,10,10,10,10,10]]",
        "output": "45"
      },
      {
        "input": "packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]",
        "output": "9"
      },
      {
        "input": "packages = [1,2,3,4,5], boxes = [[5,5,5,5,5]]",
        "output": "10"
      },
      {
        "input": "packages = [1,3,5,7,9], boxes = [[2,4,6,8,10]]",
        "output": "5"
      },
      {
        "input": "packages = [5,5,5,5], boxes = [[5,5,5,5]]",
        "output": "0"
      },
      {
        "input": "packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]",
        "output": "-1"
      },
      {
        "input": "packages = [10000, 20000, 30000, 40000, 50000], boxes = [[20000,30000,50000],[10000,15000,20000,25000,30000,35000,40000,45000,50000]]",
        "output": "0"
      },
      {
        "input": "packages = [1,2,3,4,5,6,7,8,9,10], boxes = [[1,2,3,4,5,6,7,8,9,10], [10,9,8,7,6,5,4,3,2,1], [5,15,25,35,45]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], boxes = [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [1, 5, 9, 13, 17], [3, 7, 11, 15, 19]]",
        "output": "10"
      },
      {
        "input": "packages = [50000, 50000, 50000, 50000, 50000], boxes = [[50000, 50000], [100000], [25000, 75000]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], boxes = [[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], boxes = [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21], [5, 10, 15, 20, 25, 30]]",
        "output": "10"
      },
      {
        "input": "packages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], boxes = [[5, 15, 25, 35, 45, 55, 65, 75, 85, 95], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]]",
        "output": "0"
      },
      {
        "input": "packages = [99999,99998,99997,99996,99995], boxes = [[100000],[99999],[99998],[99997],[99996],[99995]]",
        "output": "10"
      },
      {
        "input": "packages = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], boxes = [[4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22], [3, 7, 11, 15, 19, 23, 27, 31]]",
        "output": "9"
      },
      {
        "input": "packages = [1, 100, 200, 300, 400, 500, 600, 700, 800, 900], boxes = [[500, 600, 700, 800, 900, 1000], [900, 1000, 1100, 1200, 1300, 1400, 1500], [100, 200, 300, 400, 500, 600, 700, 800, 900]]",
        "output": "99"
      },
      {
        "input": "packages = [1,10,100,1000,10000,100000], boxes = [[5,10,100,1000,10000,100000,500000],[1,5,10,50,100,500,1000,5000,10000,50000,100000]]",
        "output": "0"
      },
      {
        "input": "packages = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], boxes = [[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15]]",
        "output": "0"
      },
      {
        "input": "packages = [2,4,6,8,10,12,14,16,18,20], boxes = [[3,6,9,12,15,18,21],[1,3,5,7,9,11,13,15,17,19,21]]",
        "output": "10"
      },
      {
        "input": "packages = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], boxes = [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], [1, 5, 9, 13, 17, 21, 25, 29]]",
        "output": "14"
      },
      {
        "input": "packages = [1,3,5,7,9,11,13,15,17,19], boxes = [[2,4,6,8,10,12,14,16,18,20], [1,1,1,1,1,1,1,1,1,1], [19,17,15,13,11,9,7,5,3,1]]",
        "output": "0"
      },
      {
        "input": "packages = [5, 10, 15, 20, 25], boxes = [[5, 10, 15, 20, 25], [1, 2, 3, 4, 5], [26, 27, 28, 29, 30]]",
        "output": "0"
      },
      {
        "input": "packages = [1,2,3,4,5,6,7,8,9,10], boxes = [[10,20,30,40,50,60,70,80,90,100], [1,1,1,1,1,1,1,1,1,1], [1,2,3,4,5,6,7,8,9,10], [15,25,35,45,55,65,75,85,95,105]]",
        "output": "0"
      },
      {
        "input": "packages = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], boxes = [[5, 10], [10, 20], [20, 30], [30, 40], [40, 50], [50, 60]]",
        "output": "145"
      },
      {
        "input": "packages = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], boxes = [[1], [2], [3, 4, 5]]",
        "output": "0"
      },
      {
        "input": "packages = [100000,90000,80000,70000,60000], boxes = [[95000,100000],[85000,90000,95000],[75000,80000,85000],[65000,70000,75000,80000]]",
        "output": "80000"
      },
      {
        "input": "packages = [1,2,3,4,5,6,7,8,9,10], boxes = [[10,11,12],[9,8,7,6,5,4,3,2,1],[15,20,25,30,35]]",
        "output": "45"
      },
      {
        "input": "packages = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], boxes = [[1], [2], [1, 2, 3, 4, 5]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], boxes = [[1], [2], [3]]",
        "output": "0"
      },
      {
        "input": "packages = [100000], boxes = [[99999, 99998, 99997, 99996, 99995]]",
        "output": "-1"
      },
      {
        "input": "packages = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10], boxes = [[5, 10, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], boxes = [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15]]",
        "output": "0"
      },
      {
        "input": "packages = [25000, 50000, 75000, 100000], boxes = [[12500, 37500, 62500, 87500], [10000, 40000, 70000, 100000], [50000, 50000, 50000, 50000]]",
        "output": "60000"
      },
      {
        "input": "packages = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], boxes = [[100], [200], [300], [400], [500], [600], [700], [800], [900], [1000]]",
        "output": "4500"
      },
      {
        "input": "packages = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991], boxes = [[100000], [100001], [99999], [99998], [99997], [99996], [99995], [99994], [99993], [99992], [99991]]",
        "output": "45"
      },
      {
        "input": "packages = [1, 10, 100, 1000, 10000, 100000], boxes = [[1, 10, 100, 1000, 10000, 100000], [2, 20, 200, 2000, 20000, 200000], [5, 50, 500, 5000, 50000, 500000]]",
        "output": "0"
      },
      {
        "input": "packages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], boxes = [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], boxes = [[1], [2], [3]]",
        "output": "0"
      },
      {
        "input": "packages = [1,1,1,1,1,1,1,1,1,1], boxes = [[1,1,1,1,1,1,1,1,1,1], [2,2,2,2,2,2,2,2,2,2], [10,20,30,40,50,60,70,80,90,100]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], boxes = [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [11, 12, 13, 14, 15], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], boxes = [[1, 3, 5, 7, 9, 11, 13, 15], [2, 4, 6, 8, 10, 12, 14], [16]]",
        "output": "7"
      },
      {
        "input": "packages = [50,150,250,350,450,550,650,750,850,950], boxes = [[100,200,300,400,500,600,700,800,900,1000],[50,150,250,350,450,550,650,750,850,950,1050]]",
        "output": "0"
      },
      {
        "input": "packages = [5,10,15,20,25,30,35,40,45,50], boxes = [[2,4,6,8,10,12,14,16,18,20], [1,1,1,1,1,1,1,1,1,1], [5,10,15,20,25,30,35,40,45,50], [10,20,30,40,50,60,70,80,90,100]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], boxes = [[10], [9, 10], [8, 9, 10], [7, 8, 9, 10], [6, 7, 8, 9, 10], [5, 6, 7, 8, 9, 10]]",
        "output": "10"
      },
      {
        "input": "packages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], boxes = [[1, 2, 3, 4, 5], [101, 102, 103, 104, 105], [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]]",
        "output": "0"
      },
      {
        "input": "packages = [20000, 10000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000], boxes = [[50000, 70000, 90000, 110000], [30000, 60000, 90000, 120000], [25000, 50000, 75000, 100000, 125000]]",
        "output": "100000"
      },
      {
        "input": "packages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], boxes = [[5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]",
        "output": "0"
      },
      {
        "input": "packages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], boxes = [[15,25,35,45,55,65,75,85,95,105],[5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105]]",
        "output": "0"
      },
      {
        "input": "packages = [5,15,25,35,45,55,65,75,85,95], boxes = [[10,20,30,40,50,60,70,80,90,100], [5,15,25,35,45,55,65,75,85,95], [100,200,300,400,500,600,700,800,900,1000]]",
        "output": "0"
      },
      {
        "input": "packages = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], boxes = [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [3, 6, 9, 12, 15, 18], [4, 8, 12, 16, 20]]",
        "output": "0"
      },
      {
        "input": "packages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], boxes = [[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], [50, 60, 70, 80, 90, 100, 110, 120, 130, 140]]",
        "output": "0"
      },
      {
        "input": "packages = [1,2,3,4,5,6,7,8,9,10], boxes = [[1,2,3,4,5,6,7,8,9,10], [10,20,30,40,50,60,70,80,90,100], [1,1,1,1,1,1,1,1,1,1]]",
        "output": "0"
      },
      {
        "input": "packages = [1,100000], boxes = [[50000],[150000],[100000]]",
        "output": "99999"
      },
      {
        "input": "packages = [1, 10, 100, 1000, 10000], boxes = [[5, 50, 500, 5000, 50000], [1, 2, 3, 4, 5], [9999, 99999]]",
        "output": "44444"
      },
      {
        "input": "packages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], boxes = [[5, 15, 25, 35, 45, 55, 65, 75, 85, 95], [10, 30, 50, 70, 90, 110], [20, 40, 60, 80, 100, 120]]",
        "output": "50"
      },
      {
        "input": "packages = [1, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], boxes = [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]]",
        "output": "14"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], boxes = [[1, 3, 5, 7, 9, 11, 13, 15], [2, 4, 6, 8, 10, 12, 14], [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]",
        "output": "0"
      },
      {
        "input": "packages = [50000, 50000, 50000, 50000, 50000], boxes = [[49999], [50000], [50001]]",
        "output": "0"
      },
      {
        "input": "packages = [10,20,30,40,50,60,70,80,90,100], boxes = [[5,10,15,20,25,30,35,40,45,50], [50,50,50,50,50,50,50,50,50,50], [100,100,100,100,100,100,100,100,100,100], [1,2,3,4,5,6,7,8,9,10]]",
        "output": "450"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], boxes = [[20, 40], [10, 30], [5, 15, 25, 35]]",
        "output": "90"
      },
      {
        "input": "packages = [100000, 100000, 100000], boxes = [[100000], [100001], [99999, 100000, 100001]]",
        "output": "0"
      },
      {
        "input": "packages = [50000, 40000, 30000, 20000, 10000], boxes = [[10000, 20000, 30000, 40000, 50000], [15000, 25000, 35000, 45000, 55000], [55000]]",
        "output": "0"
      },
      {
        "input": "packages = [50, 60, 70, 80, 90, 100], boxes = [[40, 90], [50, 60, 100], [80, 95, 110]]",
        "output": "60"
      },
      {
        "input": "packages = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000], boxes = [[50000, 60000, 70000, 80000, 90000, 100000], [90000, 100000, 110000, 120000, 130000, 140000, 150000]]",
        "output": "100000"
      },
      {
        "input": "packages = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], boxes = [[100], [256, 512, 1024], [2, 4, 8, 16, 32, 64, 128]]",
        "output": "1793"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], boxes = [[10, 10, 10], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], boxes = [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]]",
        "output": "5"
      },
      {
        "input": "packages = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], boxes = [[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], boxes = [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]",
        "output": "10"
      },
      {
        "input": "packages = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000], boxes = [[110000, 120000, 130000], [90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000], [55000, 54000, 53000, 52000, 51000, 50000, 49000, 48000, 47000, 46000]]",
        "output": "550000"
      },
      {
        "input": "packages = [10, 20, 30, 40, 50], boxes = [[5, 15, 25, 35, 45], [6, 16, 26, 36, 46], [7, 17, 27, 37, 47]]",
        "output": "-1"
      },
      {
        "input": "packages = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], boxes = [[1, 5, 9, 13, 17], [3, 7, 11, 15, 19], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]",
        "output": "10"
      },
      {
        "input": "packages = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], boxes = [[1, 2, 3, ..., 49, 50], [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]]",
        "output": "Error: '<' not supported between instances of 'ellipsis' and 'int'"
      },
      {
        "input": "packages = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], boxes = [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]",
        "output": "0"
      },
      {
        "input": "packages = [5,15,25,35,45,55,65,75,85,95], boxes = [[10,20,30,40,50,60,70,80,90,100],[5,15,25,35,45,55,65,75,85,95,105]]",
        "output": "0"
      },
      {
        "input": "packages = [10,20,30,40,50,60,70,80,90,100], boxes = [[5,15,25,35,45,55,65,75,85,95], [100,100,100,100,100,100,100,100,100,100], [90,80,70,60,50,40,30,20,10,0]]",
        "output": "450"
      },
      {
        "input": "packages = [1, 100000], boxes = [[1, 100000], [1, 2, 3, ..., 99999, 100000]]",
        "output": "Error: '<' not supported between instances of 'ellipsis' and 'int'"
      },
      {
        "input": "packages = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37], boxes = [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40], [1, 9, 17, 25, 33], [5, 10, 15, 20, 25, 30, 35]]",
        "output": "10"
      },
      {
        "input": "packages = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97], boxes = [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]]",
        "output": "25"
      },
      {
        "input": "packages = [10000, 20000, 30000, 40000, 50000], boxes = [[5000, 15000, 25000, 35000, 45000, 55000], [10000, 20000, 30000, 40000, 50000]]",
        "output": "0"
      },
      {
        "input": "packages = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], boxes = [[500, 600, 700, 800, 900, 1000], [900, 1000, 1100, 1200, 1300, 1400, 1500]]",
        "output": "1000"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], boxes = [[2, 3, 5, 7, 11], [1, 4, 9], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]",
        "output": "9"
      },
      {
        "input": "packages = [1,2,3,4,5,6,7,8,9,10], boxes = [[10,20,30],[5,10,15,20,25,30],[1,3,5,7,9,11,13,15,17,19]]",
        "output": "5"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], boxes = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]",
        "output": "-1"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], boxes = [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [5, 10, 15, 20, 25], [3, 6, 9, 12, 15]]",
        "output": "0"
      },
      {
        "input": "packages = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], boxes = [[1000, 2000], [500, 1500], [300, 700, 1100]]",
        "output": "1500"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], boxes = [[1,3,5,7,9,11,13,15,17,19,21], [2,4,6,8,10,12,14,16,18,20,22], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]",
        "output": "0"
      },
      {
        "input": "packages = [50000, 50000, 50000, 50000, 50000], boxes = [[50000], [50001], [50002], [50003], [50004]]",
        "output": "0"
      },
      {
        "input": "packages = [1000, 2000, 3000, 4000, 5000], boxes = [[1000, 2000, 3000, 4000, 5000], [1500, 2500, 3500, 4500, 5500], [900, 1900, 2900, 3900, 4900]]",
        "output": "0"
      },
      {
        "input": "packages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], boxes = [[10, 20], [5, 15], [3, 7, 12]]",
        "output": "18"
      }
    ]
  },
  {
    "id": 2581,
    "difficulty": "Hard",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Array",
      "Hash Table",
      "Dynamic Programming"
    ],
    "problemDescription": "Alice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nAlice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:\n\nChooses two distinct integers u and v such that there exists an edge [u, v] in the tree.\nHe tells Alice that u is the parent of v in the tree.\n\nBob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj.\nAlice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true.\nGiven the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.\n\u00a0\nExample 1:\n\n\nInput: edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3\nOutput: 3\nExplanation: \nRoot = 0, correct guesses = [1,3], [0,1], [2,4]\nRoot = 1, correct guesses = [1,3], [1,0], [2,4]\nRoot = 2, correct guesses = [1,3], [1,0], [2,4]\nRoot = 3, correct guesses = [1,0], [2,4]\nRoot = 4, correct guesses = [1,3], [1,0]\nConsidering 0, 1, or 2 as root node leads to 3 correct guesses.\n\n\nExample 2:\n\n\nInput: edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1\nOutput: 5\nExplanation: \nRoot = 0, correct guesses = [3,4]\nRoot = 1, correct guesses = [1,0], [3,4]\nRoot = 2, correct guesses = [1,0], [2,1], [3,4]\nRoot = 3, correct guesses = [1,0], [2,1], [3,2], [3,4]\nRoot = 4, correct guesses = [1,0], [2,1], [3,2]\nConsidering any node as root will give at least 1 correct guess. \n\n\n\u00a0\nConstraints:\n\nedges.length == n - 1\n2 <= n <= 105\n1 <= guesses.length <= 105\n0 <= ai, bi, uj, vj <= n - 1\nai != bi\nuj != vj\nedges represents a valid tree.\nguesses[j] is an edge of the tree.\nguesses is unique.\n0 <= k <= guesses.length\n\n",
    "starterCode": "class Solution:\n    def rootCount(self, edges: List[List[int]], guesses: List[List[int]], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "edges = [[0,1],[0,2],[0,3]], guesses = [[0,1],[0,2],[0,3]], k = 2",
        "output": "4"
      },
      {
        "input": "edges = [[0,1],[0,2]], guesses = [[0,1]], k = 1",
        "output": "2"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3",
        "output": "3"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3]], guesses = [[1,2],[2,3]], k = 2",
        "output": "2"
      },
      {
        "input": "edges = [[0,1],[0,2],[2,3],[2,4],[4,5]], guesses = [[0,1],[0,2],[2,3],[2,4],[4,5]], k = 5",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1",
        "output": "5"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3]], guesses = [[0,1],[0,2],[0,3]], k = 3",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[1,4]], guesses = [[0,1],[1,2],[1,3],[1,4]], k = 4",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20]], k = 15",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], guesses = [[0,1],[1,3],[3,7],[3,8],[1,4],[4,9],[4,10],[0,2],[2,5],[2,6]], k = 5",
        "output": "11"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], guesses = [[0,1],[1,4],[1,5],[0,2],[2,6],[2,7],[0,3],[3,8],[3,9]], k = 4",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], k = 5",
        "output": "11"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], k = 5",
        "output": "4"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27]], guesses = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15],[8,16],[8,17],[9,18],[9,19],[10,20],[10,21],[11,22],[11,23],[12,24],[12,25],[13,26],[13,27],[2,1],[14,7],[15,7],[16,8],[17,8],[20,10],[21,10],[22,11],[23,11],[24,12],[25,12],[26,13],[27,13]], k = 10",
        "output": "28"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], k = 8",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[0,2],[1,4],[6,2],[3,7],[4,9],[5,11]], k = 8",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], guesses = [[0,1],[1,3],[2,5],[3,7],[4,9],[0,2],[1,4],[2,6],[3,8],[4,10]], k = 5",
        "output": "11"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6]], guesses = [[0,1],[1,3],[3,5],[0,2],[2,4],[4,6]], k = 4",
        "output": "5"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28]], guesses = [[0,1],[1,2],[1,3],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[1,0],[3,1],[5,2],[10,4],[7,3],[13,6],[15,7],[16,7],[17,8],[18,8],[19,9],[20,9],[21,10],[22,10],[23,11],[24,11],[25,12],[26,12],[27,13],[28,13]], k = 15",
        "output": "29"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15],[11,16]], guesses = [[0,1],[1,3],[3,7],[3,8],[1,4],[4,9],[0,2],[2,5],[2,6],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15],[11,16]], k = 10",
        "output": "17"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,5],[5,4],[4,3],[3,2],[2,1]], k = 5",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,1],[5,2]], k = 4",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], guesses = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], k = 7",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15],[11,16],[12,17],[13,18],[14,19],[15,20],[16,21]], guesses = [[0,1],[1,3],[3,7],[3,8],[1,4],[4,9],[0,2],[2,5],[2,6],[5,10],[6,11],[7,12],[8,13],[9,14],[10,15],[11,16],[12,17],[13,18],[14,19],[15,20],[16,21]], k = 12",
        "output": "22"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[3,2],[7,6],[11,10],[13,14]], k = 9",
        "output": "15"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]], k = 6",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15]], k = 10",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,5],[12,5],[13,6],[14,6]], k = 9",
        "output": "15"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[3,2],[7,6]], k = 6",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[4,7],[4,8]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[4,7],[4,8],[3,1],[5,2]], k = 4",
        "output": "9"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,5],[12,5],[13,6],[14,6]], k = 10",
        "output": "13"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], guesses = [[0,1],[1,3],[3,7],[3,8],[1,4],[4,9],[4,10],[0,2],[2,5],[2,6]], k = 7",
        "output": "11"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], k = 9",
        "output": "2"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[5,10],[6,11]], guesses = [[0,1],[1,3],[3,7],[3,8],[1,4],[4,9],[0,2],[2,5],[2,6],[5,10],[6,11]], k = 7",
        "output": "12"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], guesses = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,1],[5,1],[6,2],[7,2],[8,3],[9,3]], k = 4",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], k = 8",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], guesses = [[0,1],[1,4],[1,5],[0,2],[2,6],[2,7],[0,3],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], k = 10",
        "output": "22"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[3,1],[5,2],[10,4],[7,3],[13,6]], k = 7",
        "output": "15"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], k = 6",
        "output": "4"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], guesses = [[1,0],[3,4],[2,1],[3,2],[5,6],[4,5],[6,7]], k = 4",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9]], guesses = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9]], k = 6",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], k = 9",
        "output": "0"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], k = 6",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], guesses = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[1,0],[2,0],[3,0],[4,1],[5,1],[6,2],[7,2],[8,3],[9,3]], k = 7",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], guesses = [[0,1],[1,3],[3,7],[3,8],[1,4],[4,9],[4,10],[0,2],[2,5],[2,6],[5,11],[5,12],[6,13],[6,14]], k = 7",
        "output": "15"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[2,1],[6,5],[10,9]], k = 7",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7]], guesses = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,2],[5,2],[6,3],[7,3]], k = 5",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], k = 9",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[3,2],[7,6],[11,10],[13,14]], k = 12",
        "output": "27"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,13],[13,12],[12,11],[11,10],[10,9],[9,8],[8,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0]], k = 10",
        "output": "15"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], guesses = [[0,1],[1,3],[2,5],[1,0],[4,1],[6,2]], k = 3",
        "output": "5"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10]], guesses = [[0,1],[1,3],[2,5],[3,7],[4,9],[0,2],[1,4],[2,6],[3,8],[4,10]], k = 3",
        "output": "11"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3]], k = 6",
        "output": "9"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[4,7],[4,8],[8,9],[9,10],[10,11],[11,12]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[4,7],[4,8],[8,9],[9,10],[10,11],[11,12]], k = 6",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15]], guesses = [[0,1],[1,2],[1,3],[2,4],[2,5],[3,6],[3,7],[4,8],[4,9],[5,10],[5,11],[6,12],[6,13],[7,14],[7,15]], k = 12",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,1],[5,2],[4,1],[6,2]], k = 3",
        "output": "7"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], guesses = [[0,1],[1,0],[1,2],[2,1],[2,3],[3,2],[3,4],[4,3],[4,5],[5,4],[5,6],[6,5],[6,7],[7,6]], k = 7",
        "output": "8"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[0,2],[1,4]], k = 5",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], guesses = [[1,0],[3,1],[5,3],[2,1],[4,2],[6,5]], k = 3",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[4,7],[4,8]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[4,7],[4,8]], k = 8",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]], k = 5",
        "output": "6"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], guesses = [[0,1],[1,3],[2,5],[1,0],[4,1],[6,2],[3,7],[4,9],[5,11],[0,2],[1,4],[6,14],[3,8],[4,10],[5,12]], k = 7",
        "output": "15"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]], k = 7",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], guesses = [[0,1],[1,4],[2,6],[3,8],[4,10],[0,2],[1,5],[2,7],[3,9],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], k = 10",
        "output": "22"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9],[4,10],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], guesses = [[0,1],[1,4],[2,6],[3,8],[4,10],[0,2],[1,5],[2,7],[3,9],[4,11],[5,12],[5,13],[6,14],[6,15],[7,16],[7,17],[8,18],[8,19],[9,20],[9,21]], k = 5",
        "output": "22"
      },
      {
        "input": "edges = [[0,1],[0,2],[0,3],[1,4],[1,5],[2,6],[2,7],[3,8],[3,9]], guesses = [[0,1],[1,4],[1,5],[0,2],[2,6],[2,7],[0,3],[3,8],[3,9]], k = 5",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], guesses = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,8],[8,7],[7,6],[6,5],[5,4],[4,3],[3,2],[2,1],[1,0]], k = 5",
        "output": "10"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30]], guesses = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20],[10,21],[10,22],[11,23],[11,24],[12,25],[12,26],[13,27],[13,28],[14,29],[14,30],[1,0],[2,0],[3,1],[4,1],[5,2],[6,2],[7,3],[8,3],[9,4],[10,4],[11,5],[12,5],[13,6],[14,6],[15,7],[16,7],[17,8],[18,8],[19,9],[20,9],[21,10],[22,10],[23,11],[24,11],[25,12],[26,12],[27,13],[28,13],[29,14],[30,14]], k = 15",
        "output": "31"
      },
      {
        "input": "edges = [[0,1],[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8]], guesses = [[0,1],[1,2],[2,3],[2,4],[3,5],[3,6],[4,7],[4,8]], k = 8",
        "output": "1"
      },
      {
        "input": "edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20]], guesses = [[0,1],[1,2],[1,3],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14],[7,15],[7,16],[8,17],[8,18],[9,19],[9,20]], k = 14",
        "output": "21"
      }
    ]
  },
  {
    "id": 753,
    "difficulty": "Hard",
    "tags": [
      "Depth-First Search",
      "Graph",
      "Eulerian Circuit"
    ],
    "problemDescription": "There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].\nThe safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.\n\nFor example, the correct password is \"345\" and you enter in \"012345\":\n\n\t\nAfter typing 0, the most recent 3 digits is \"0\", which is incorrect.\nAfter typing 1, the most recent 3 digits is \"01\", which is incorrect.\nAfter typing 2, the most recent 3 digits is \"012\", which is incorrect.\nAfter typing 3, the most recent 3 digits is \"123\", which is incorrect.\nAfter typing 4, the most recent 3 digits is \"234\", which is incorrect.\nAfter typing 5, the most recent 3 digits is \"345\", which is correct and the safe unlocks.\n\n\n\nReturn any string of minimum length that will unlock the safe at some point of entering it.\n\u00a0\nExample 1:\n\nInput: n = 1, k = 2\nOutput: \"10\"\nExplanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe.\n\nExample 2:\n\nInput: n = 2, k = 2\nOutput: \"01100\"\nExplanation: For each possible password:\n- \"00\" is typed in starting from the 4th digit.\n- \"01\" is typed in starting from the 1st digit.\n- \"10\" is typed in starting from the 3rd digit.\n- \"11\" is typed in starting from the 2nd digit.\nThus \"01100\" will unlock the safe. \"10011\", and \"11001\" would also unlock the safe.\n\n\u00a0\nConstraints:\n\n1 <= n <= 4\n1 <= k <= 10\n1 <= kn <= 4096\n\n",
    "starterCode": "class Solution:\n    def crackSafe(self, n: int, k: int) -> str:\n        ",
    "testCases": [
      {
        "input": "n = 1, k = 2",
        "output": "10"
      },
      {
        "input": "n = 1, k = 4",
        "output": "3210"
      },
      {
        "input": "n = 2, k = 4",
        "output": "03322312113020100"
      },
      {
        "input": "n = 2, k = 5",
        "output": "04433423224131211403020100"
      },
      {
        "input": "n = 3, k = 4",
        "output": "003332322233123132122131121113302301303202201203102101103002001000"
      },
      {
        "input": "n = 3, k = 3",
        "output": "00222121112201202101102001000"
      },
      {
        "input": "n = 2, k = 2",
        "output": "01100"
      },
      {
        "input": "n = 3, k = 2",
        "output": "0011101000"
      },
      {
        "input": "n = 2, k = 10",
        "output": "09988978779686766958575655948474645449383736353433928272625242322918171615141312119080706050403020100"
      },
      {
        "input": "n = 1, k = 3",
        "output": "210"
      },
      {
        "input": "n = 4, k = 2",
        "output": "0001111010110010000"
      },
      {
        "input": "n = 4, k = 10",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 1, k = 10",
        "output": "9876543210"
      },
      {
        "input": "n = 2, k = 3",
        "output": "0221120100"
      },
      {
        "input": "n = 4, k = 3",
        "output": "000222212122112111122201220212011202022101210211011102010102200120021001100200010000"
      },
      {
        "input": "n = 1, k = 5",
        "output": "43210"
      },
      {
        "input": "n = 3, k = 5",
        "output": "0044434333442342432332422322244134124143133123142132122141131121114403402401404303302301304203202201204103102101104003002001000"
      },
      {
        "input": "n = 3, k = 10",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 4, k = 6",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 4, k = 4",
        "output": "0003333232332232222333123313231223131332123213221222131212133112311321122113111211113330233013303230223012303130213011303033202320132032202220122031202120112030202033102310131032102210121031102110111030102010103300230013003200220012003100210011003000200010000"
      },
      {
        "input": "n = 4, k = 5",
        "output": "0004444343443343333444234424342334242443234324332333242323244223422432233224222322224441344124414341334123414241324122414144313431243143313331233142313231223141313144213421242143213321232142213221222141213121214411341124114311331123114211321122114111311121111444034402440144043403340234013404240324022401240414031402140114040443034302430143043303330233013304230323022301230413031302130113040303044203420242014204320332023201320422032202220122041203120212011204020302020441034102410141043103310231013104210321022101210411031102110111040103010201010440034002400140043003300230013004200320022001200410031002100110040003000200010000"
      },
      {
        "input": "n = 3, k = 6",
        "output": "00555454445534535434435334333552452352542442342532432332522422322255145135125154144134124153143133123152142132122151141131121115504503502501505404403402401405304303302301305204203202201205104103102101105004003002001000"
      }
    ]
  },
  {
    "id": 1416,
    "difficulty": "Hard",
    "tags": [
      "String",
      "Dynamic Programming"
    ],
    "problemDescription": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.\nGiven the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. Since the answer may be very large, return it modulo 109 + 7.\n\u00a0\nExample 1:\n\nInput: s = \"1000\", k = 10000\nOutput: 1\nExplanation: The only possible array is [1000]\n\nExample 2:\n\nInput: s = \"1000\", k = 10\nOutput: 0\nExplanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.\n\nExample 3:\n\nInput: s = \"1317\", k = 2000\nOutput: 8\nExplanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 105\ns consists of only digits and does not contain leading zeros.\n1 <= k <= 109\n\n",
    "starterCode": "class Solution:\n    def numberOfArrays(self, s: str, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"237\", k = 50",
        "output": "3"
      },
      {
        "input": "s = \"111111111111111111111\", k = 11",
        "output": "17711"
      },
      {
        "input": "s = \"123123123\", k = 123",
        "output": "100"
      },
      {
        "input": "s = \"1317\", k = 2000",
        "output": "8"
      },
      {
        "input": "s = \"99999\", k = 99999",
        "output": "16"
      },
      {
        "input": "s = \"1000\", k = 10",
        "output": "0"
      },
      {
        "input": "s = \"1234567891011121314151617181920\", k = 20",
        "output": "1280"
      },
      {
        "input": "s = \"1000\", k = 10000",
        "output": "1"
      },
      {
        "input": "s = \"1111\", k = 1",
        "output": "1"
      },
      {
        "input": "s = \"123456789\", k = 9",
        "output": "1"
      },
      {
        "input": "s = \"11111111111111111111111111111111111111111111\", k = 11",
        "output": "134903163"
      },
      {
        "input": "s = \"123123123123123123123123123123123123123123123123\", k = 321",
        "output": "171507379"
      },
      {
        "input": "s = \"4294967294294967294294967294294967294294294967294\", k = 4294967294",
        "output": "849136492"
      },
      {
        "input": "s = \"112233445566778899101011121314151617181920\", k = 100",
        "output": "17480761"
      },
      {
        "input": "s = \"11111111111111111111\", k = 11",
        "output": "10946"
      },
      {
        "input": "s = \"12345678910111213141516171819202122232425\", k = 25",
        "output": "129792"
      },
      {
        "input": "s = \"1010101010101010101010101010101010101010\", k = 10",
        "output": "1"
      },
      {
        "input": "s = \"1111111111111111111111111111111111111111111111111\", k = 11",
        "output": "586268941"
      },
      {
        "input": "s = \"55555555555555555555\", k = 55",
        "output": "10946"
      },
      {
        "input": "s = \"987654321098765432109876543210\", k = 987654321",
        "output": "64504063"
      },
      {
        "input": "s = \"999999999999999999\", k = 1000000000",
        "output": "129792"
      },
      {
        "input": "s = \"999999999999999999\", k = 999999999",
        "output": "129792"
      },
      {
        "input": "s = \"1230123\", k = 123",
        "output": "8"
      },
      {
        "input": "s = \"1\", k = 1",
        "output": "1"
      },
      {
        "input": "s = \"101010101010101010\", k = 100",
        "output": "1"
      },
      {
        "input": "s = \"111111111111111111111111111111111111111111111111\", k = 100",
        "output": "778742000"
      },
      {
        "input": "s = \"9999999999999999999\", k = 999999999",
        "output": "259328"
      },
      {
        "input": "s = \"123456789\", k = 999999999",
        "output": "256"
      },
      {
        "input": "s = \"21474836472147483647214748364721474836472147483647\", k = 2147483647",
        "output": "80057812"
      },
      {
        "input": "s = \"111111111111111111\", k = 11",
        "output": "4181"
      },
      {
        "input": "s = \"102030405060708090\", k = 100",
        "output": "1"
      },
      {
        "input": "s = \"311131\", k = 100",
        "output": "13"
      },
      {
        "input": "s = \"123456789101112\", k = 15",
        "output": "10"
      },
      {
        "input": "s = \"999999999\", k = 999999999",
        "output": "256"
      },
      {
        "input": "s = \"12345678901234567890\", k = 123456789",
        "output": "125704"
      },
      {
        "input": "s = \"123456789101112131415161718192021222324252627282930\", k = 30",
        "output": "2076672"
      },
      {
        "input": "s = \"55555555555555555555555555555555555555555555\", k = 555",
        "output": "809181231"
      },
      {
        "input": "s = \"111111111111111111111111111111111111\", k = 1",
        "output": "1"
      },
      {
        "input": "s = \"11111111111111111111\", k = 10",
        "output": "1"
      },
      {
        "input": "s = \"111111111111111111111111111111111111111111\", k = 111",
        "output": "641778114"
      },
      {
        "input": "s = \"9876543210123456789876543210\", k = 2147483647",
        "output": "32657088"
      },
      {
        "input": "s = \"321321321321321321321321321321321321321321\", k = 321",
        "output": "641778114"
      },
      {
        "input": "s = \"429496729542949672954294967295\", k = 4294967295",
        "output": "527718016"
      },
      {
        "input": "s = \"314159265358979323846264338327950288419716939937510\", k = 10000",
        "output": "578862353"
      },
      {
        "input": "s = \"11111111111111111111111111111111111111111111\", k = 111",
        "output": "809181231"
      },
      {
        "input": "s = \"123456789012345678901234567890\", k = 50000",
        "output": "23834271"
      },
      {
        "input": "s = \"30303030303030303030\", k = 30",
        "output": "1"
      },
      {
        "input": "s = \"9999999999999999999999999999999999999999\", k = 1000000000",
        "output": "707881333"
      },
      {
        "input": "s = \"1111111111111111111\", k = 11",
        "output": "6765"
      },
      {
        "input": "s = \"222222222222222222222222222222222222222222\", k = 22",
        "output": "433494437"
      },
      {
        "input": "s = \"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\", k = 1000000000",
        "output": "893659449"
      },
      {
        "input": "s = \"10101010101010101010\", k = 101",
        "output": "1"
      },
      {
        "input": "s = \"32791623145341\", k = 2000",
        "output": "3480"
      },
      {
        "input": "s = \"123123123123123123123123\", k = 123",
        "output": "312500"
      },
      {
        "input": "s = \"111213141516171819202122232425262728293031323334353637383940\", k = 40",
        "output": "287913465"
      },
      {
        "input": "s = \"32767327673276732767\", k = 32767",
        "output": "338744"
      },
      {
        "input": "s = \"1234567891011121314151617181920\", k = 5000",
        "output": "51814885"
      },
      {
        "input": "s = \"123451234512345123451234512345123451234512345\", k = 50000",
        "output": "820858001"
      },
      {
        "input": "s = \"2222222222222222222\", k = 2",
        "output": "1"
      },
      {
        "input": "s = \"327683276832768\", k = 65536",
        "output": "12208"
      },
      {
        "input": "s = \"987654321987654321987654321\", k = 987654321",
        "output": "65866496"
      },
      {
        "input": "s = \"123456789101112131415161718192021\", k = 25",
        "output": "4992"
      },
      {
        "input": "s = \"10101010101010101010101010101010101010101010\", k = 100",
        "output": "1"
      },
      {
        "input": "s = \"111111111111111111111111111111111111\", k = 111",
        "output": "82876089"
      },
      {
        "input": "s = \"112233445566778899\", k = 112233",
        "output": "105312"
      },
      {
        "input": "s = \"1111111111111111111\", k = 1",
        "output": "1"
      },
      {
        "input": "s = \"22222222222222222222\", k = 222",
        "output": "121415"
      },
      {
        "input": "s = \"3034558\", k = 1000",
        "output": "20"
      },
      {
        "input": "s = \"121314151617181920\", k = 20",
        "output": "256"
      },
      {
        "input": "s = \"3030303030303030303\", k = 30",
        "output": "1"
      },
      {
        "input": "s = \"99999999999999999999\", k = 999999999",
        "output": "518145"
      },
      {
        "input": "s = \"1010101010101010101\", k = 101",
        "output": "2"
      },
      {
        "input": "s = \"987654321987654321987654321987654321987654321\", k = 987654321",
        "output": "840181650"
      },
      {
        "input": "s = \"12312312312312312312\", k = 123",
        "output": "31250"
      },
      {
        "input": "s = \"1234567890\", k = 1000",
        "output": "125"
      },
      {
        "input": "s = \"123123123123123123123123123123123123123123123123123\", k = 123",
        "output": "351558230"
      },
      {
        "input": "s = \"9999999999999999999999999999999999999999\", k = 999999999",
        "output": "707881333"
      },
      {
        "input": "s = \"333333333333\", k = 3333",
        "output": "1490"
      },
      {
        "input": "s = \"555555555555555555555555555555555555555555555555\", k = 555",
        "output": "171507379"
      },
      {
        "input": "s = \"111111111111111111111111111111\", k = 111",
        "output": "53798080"
      },
      {
        "input": "s = \"12345678910111213141516171819202122232425262728293031323334353637383940\", k = 50",
        "output": "100424031"
      },
      {
        "input": "s = \"1213141516171819202122232425262728293031323334353637383940\", k = 40",
        "output": "492437504"
      },
      {
        "input": "s = \"1010101010101010101010101010101010101010101010101\", k = 10",
        "output": "1"
      },
      {
        "input": "s = \"474747474747474747474747474747474747474747474747\", k = 4747",
        "output": "134502416"
      },
      {
        "input": "s = \"1000000000000000000000000000000000000000000000000\", k = 1000000000",
        "output": "0"
      },
      {
        "input": "s = \"22222222222222222222222222222222222222222\", k = 222",
        "output": "844048728"
      },
      {
        "input": "s = \"999999999999999999999999999999999999999999999999\", k = 999",
        "output": "171507379"
      },
      {
        "input": "s = \"5229458433423234234234\", k = 1000000",
        "output": "1825529"
      },
      {
        "input": "s = \"112233445566778899\", k = 99",
        "output": "4181"
      },
      {
        "input": "s = \"12345678910\", k = 10",
        "output": "1"
      },
      {
        "input": "s = \"999999999999999999999999999999999999999999\", k = 999999999",
        "output": "634726928"
      },
      {
        "input": "s = \"10101010101010101010\", k = 10",
        "output": "1"
      },
      {
        "input": "s = \"999999999999999999999999999999999999999999\", k = 9",
        "output": "1"
      },
      {
        "input": "s = \"12345123451234512345\", k = 5000",
        "output": "250625"
      },
      {
        "input": "s = \"50505050505050505050\", k = 500",
        "output": "1"
      },
      {
        "input": "s = \"12345678910\", k = 100",
        "output": "55"
      },
      {
        "input": "s = \"123456789123456789123456789\", k = 10000",
        "output": "28074040"
      },
      {
        "input": "s = \"1000000000100000000010000000001000000000\", k = 1000000000",
        "output": "1"
      },
      {
        "input": "s = \"32791879\", k = 500",
        "output": "54"
      },
      {
        "input": "s = \"222222222222222222222222222222222222222222222222\", k = 22",
        "output": "778742000"
      },
      {
        "input": "s = \"987654321098765432109876543210987654321098765432109876543210\", k = 5000",
        "output": "712104623"
      },
      {
        "input": "s = \"123456789\", k = 100",
        "output": "55"
      },
      {
        "input": "s = \"987654321\", k = 100000",
        "output": "236"
      },
      {
        "input": "s = \"33333333333333333333\", k = 3333",
        "output": "283953"
      }
    ]
  },
  {
    "id": 1970,
    "difficulty": "Hard",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Array",
      "Binary Search",
      "Matrix"
    ],
    "problemDescription": "There is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively.\nInitially on day 0, the entire matrix is land. However, each day a new cell becomes flooded with water. You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.e., changed to 1).\nYou want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. You can start from any cell in the top row and end at any cell in the bottom row. You can only travel in the four cardinal directions (left, right, up, and down).\nReturn the last day where it is possible to walk from the top to the bottom by only walking on land cells.\n\u00a0\nExample 1:\n\n\nInput: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]\nOutput: 2\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2.\n\nExample 2:\n\n\nInput: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]\nOutput: 1\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1.\n\nExample 3:\n\n\nInput: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]\nOutput: 3\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3.\n\n\u00a0\nConstraints:\n\n2 <= row, col <= 2 * 104\n4 <= row * col <= 2 * 104\ncells.length == row * col\n1 <= ri <= row\n1 <= ci <= col\nAll the values of cells are unique.\n\n",
    "starterCode": "class Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]",
        "output": "3"
      },
      {
        "input": "row = 3, col = 4, cells = [[1,1],[1,2],[1,3],[1,4],[2,1],[2,2],[2,3],[2,4],[3,1],[3,2],[3,3],[3,4]]",
        "output": "3"
      },
      {
        "input": "row = 4, col = 4, cells = [[1,1],[1,2],[1,3],[1,4],[2,1],[2,2],[2,3],[2,4],[3,1],[3,2],[3,3],[3,4],[4,1],[4,2],[4,3],[4,4]]",
        "output": "3"
      },
      {
        "input": "row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]",
        "output": "2"
      },
      {
        "input": "row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]",
        "output": "1"
      },
      {
        "input": "row = 6, col = 6, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[2,1],[2,6],[3,1],[3,6],[4,1],[4,6],[5,1],[5,6],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[2,2],[2,3],[2,4],[2,5],[3,2],[3,3],[3,4],[3,5],[4,2],[4,3],[4,4],[4,5],[5,2],[5,3],[5,4],[5,5],[3,3],[4,4]]",
        "output": "5"
      },
      {
        "input": "row = 5, col = 5, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[2,5],[3,5],[4,5],[5,5],[5,4],[5,3],[5,2],[5,1],[4,1],[3,1],[2,1],[2,2],[2,3],[2,4],[3,2],[3,3],[3,4],[4,2],[4,3],[4,4]]",
        "output": "4"
      },
      {
        "input": "row = 7, col = 7, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[4,1],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7]]",
        "output": "6"
      },
      {
        "input": "row = 10, col = 10, cells = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9],[10,10],[9,10],[8,10],[7,10],[6,10],[5,10],[4,10],[3,10],[2,10],[1,10],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9]]",
        "output": "18"
      },
      {
        "input": "row = 5, col = 4, cells = [[1,1],[2,1],[3,1],[4,1],[5,1],[1,2],[2,2],[3,2],[4,2],[5,2],[1,3],[2,3],[3,3],[4,3],[5,3],[1,4],[2,4],[3,4],[4,4],[5,4]]",
        "output": "15"
      },
      {
        "input": "row = 6, col = 6, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[2,6],[3,6],[4,6],[5,6],[6,6],[6,5],[6,4],[6,3],[6,2],[6,1],[5,1],[4,1],[3,1],[2,1],[2,2],[2,3],[2,4],[2,5],[3,2],[3,3],[3,4],[3,5],[4,2],[4,3],[4,4],[4,5],[5,2],[5,3],[5,4],[5,5]]",
        "output": "5"
      },
      {
        "input": "row = 7, col = 7, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[3,1],[3,7],[4,1],[4,7],[5,1],[5,7],[6,1],[6,7],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[3,2],[3,3],[3,4],[3,5],[3,6],[4,2],[4,6],[5,2],[5,6],[6,2],[6,6],[4,3],[4,4],[4,5],[5,3],[5,4],[5,5]]",
        "output": "6"
      },
      {
        "input": "row = 5, col = 5, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[2,1],[2,5],[3,1],[3,5],[4,1],[4,5],[5,1],[5,2],[5,3],[5,4],[5,5],[2,2],[2,3],[2,4],[3,2],[3,4],[4,2],[4,3],[4,4]]",
        "output": "4"
      },
      {
        "input": "row = 5, col = 5, cells = [[1,1],[2,2],[3,3],[4,4],[5,5],[1,2],[1,3],[1,4],[1,5],[2,1],[2,3],[2,4],[2,5],[3,1],[3,2],[3,4],[3,5],[4,1],[4,2],[4,3],[4,5],[5,1],[5,2],[5,3],[5,4]]",
        "output": "4"
      },
      {
        "input": "row = 6, col = 6, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[4,1],[4,2],[4,3],[4,4],[4,5],[4,6],[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[1,3],[2,4],[3,5],[4,6],[5,5],[6,4],[5,4],[5,3],[6,3],[6,2],[5,2],[4,2],[3,2],[2,3],[3,3],[4,3],[3,4],[4,4],[5,4],[4,5],[3,5],[2,5],[2,6],[3,6],[4,6],[5,6],[4,5],[3,4],[2,3],[1,2],[1,4],[1,6],[3,1],[5,1],[6,1]]",
        "output": "5"
      },
      {
        "input": "row = 5, col = 5, cells = [[1,1],[2,2],[3,3],[4,4],[5,5],[1,2],[2,3],[3,4],[4,5],[5,4],[5,3],[5,2],[5,1],[4,1],[3,1],[2,1],[1,3],[1,4],[1,5],[2,5],[3,5],[4,3],[4,2],[3,2],[2,3],[2,4],[3,4],[4,4],[4,3],[3,3],[2,2],[1,2]]",
        "output": "4"
      },
      {
        "input": "row = 8, col = 8, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[2,1],[2,8],[3,1],[3,8],[4,1],[4,8],[5,1],[5,8],[6,1],[6,8],[7,1],[7,8],[8,1],[8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[3,2],[3,7],[4,2],[4,7],[5,2],[5,7],[6,2],[6,7],[7,2],[7,3],[7,4],[7,5],[7,6],[3,3],[3,5],[4,3],[4,5],[5,3],[5,5],[6,3],[6,5],[4,4],[5,4]]",
        "output": "7"
      },
      {
        "input": "row = 4, col = 6, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[2,6],[3,6],[4,6],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[2,2],[2,3],[2,4],[2,5],[3,2],[3,3],[3,4],[3,5]]",
        "output": "5"
      },
      {
        "input": "row = 4, col = 6, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[4,1],[4,6],[4,2],[4,3],[4,4],[4,5]]",
        "output": "5"
      },
      {
        "input": "row = 10, col = 5, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[2,1],[2,2],[2,3],[2,4],[2,5],[3,1],[3,2],[3,3],[3,4],[3,5],[4,1],[4,2],[4,3],[4,4],[4,5],[5,1],[5,2],[5,3],[5,4],[5,5],[6,1],[6,2],[6,3],[6,4],[6,5],[7,1],[7,2],[7,3],[7,4],[7,5],[8,1],[8,2],[8,3],[8,4],[8,5],[9,1],[9,2],[9,3],[9,4],[9,5],[10,1],[10,2],[10,3],[10,4],[10,5]]",
        "output": "4"
      },
      {
        "input": "row = 9, col = 9, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[9,1],[9,2],[9,3],[9,4],[9,5],[9,6],[9,7],[9,8],[9,9],[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[5,9],[4,5],[6,5],[3,5],[7,5],[2,5],[8,5]]",
        "output": "8"
      },
      {
        "input": "row = 8, col = 8, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[2,1],[2,8],[3,1],[3,8],[4,1],[4,8],[5,1],[5,8],[6,1],[6,8],[7,1],[7,8],[8,1],[8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[3,2],[3,7],[3,3],[3,6],[3,4],[3,5],[4,2],[4,7],[4,3],[4,6],[4,4],[4,5],[5,2],[5,7],[5,3],[5,6],[5,4],[5,5],[6,2],[6,7],[6,3],[6,6],[6,4],[6,5],[7,2],[7,7],[7,3],[7,6],[7,4],[7,5]]",
        "output": "7"
      },
      {
        "input": "row = 4, col = 4, cells = [[1,1],[1,2],[1,3],[1,4],[2,4],[3,4],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[2,2],[2,3],[3,3],[3,2],[3,1]]",
        "output": "3"
      },
      {
        "input": "row = 7, col = 7, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,1],[2,7],[3,1],[3,7],[4,1],[4,7],[5,1],[5,7],[6,1],[6,7],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[2,2],[2,3],[2,4],[2,5],[2,6],[3,2],[3,6],[3,3],[3,5],[3,4],[4,2],[4,6],[4,3],[4,5],[4,4],[5,2],[5,6],[5,3],[5,5],[5,4],[6,2],[6,6],[6,3],[6,5],[6,4]]",
        "output": "6"
      },
      {
        "input": "row = 5, col = 5, cells = [[1,1],[2,1],[3,1],[4,1],[5,1],[1,2],[2,2],[3,2],[4,2],[5,2],[1,3],[2,3],[3,3],[4,3],[5,3],[1,4],[2,4],[3,4],[4,4],[5,4],[1,5],[2,5],[3,5],[4,5],[5,5]]",
        "output": "20"
      },
      {
        "input": "row = 6, col = 6, cells = [[1,3],[2,3],[3,3],[4,3],[5,3],[6,3],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[1,4],[2,4],[3,4],[4,4],[5,4],[6,4],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[1,5],[2,5],[3,5],[4,5],[5,5],[6,5]]",
        "output": "36"
      },
      {
        "input": "row = 10, col = 10, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[2,1],[2,10],[3,1],[3,10],[4,1],[4,10],[5,1],[5,10],[6,1],[6,10],[7,1],[7,10],[8,1],[8,10],[9,1],[9,10],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9],[10,10],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,9],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[4,8],[4,9],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[5,9],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[6,8],[6,9],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[7,8],[7,9],[8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8],[8,9],[9,2],[9,3],[9,4],[9,5],[9,6],[9,7],[9,8],[9,9]]",
        "output": "9"
      },
      {
        "input": "row = 6, col = 5, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[6,4],[6,3],[6,2],[6,1],[5,1],[5,2],[5,3],[5,4],[4,4],[4,3],[4,2],[4,1],[3,1],[3,2],[3,3],[3,4],[2,4],[2,3],[2,2],[2,1]]",
        "output": "4"
      },
      {
        "input": "row = 6, col = 5, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[2,1],[2,2],[2,3],[2,4],[2,5],[3,1],[3,2],[3,3],[3,4],[3,5],[4,1],[4,2],[4,3],[4,4],[4,5],[5,1],[5,2],[5,3],[5,4],[5,5],[6,1],[6,2],[6,3],[6,4],[6,5]]",
        "output": "4"
      },
      {
        "input": "row = 6, col = 6, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[2,1],[2,6],[3,1],[3,6],[4,1],[4,6],[5,1],[5,6],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[2,2],[2,3],[2,4],[2,5],[3,2],[3,5],[4,2],[4,5],[5,2],[5,3],[5,4],[3,3],[3,4],[4,3],[4,4]]",
        "output": "5"
      },
      {
        "input": "row = 5, col = 4, cells = [[1,1],[1,2],[1,3],[1,4],[2,1],[2,2],[2,3],[2,4],[3,1],[3,2],[3,3],[3,4],[4,1],[4,2],[4,3],[4,4],[5,1],[5,2],[5,3],[5,4]]",
        "output": "3"
      },
      {
        "input": "row = 5, col = 6, cells = [[1,3],[2,3],[3,3],[4,3],[5,3],[2,4],[3,4],[4,4],[5,4],[1,4],[1,2],[1,1],[2,1],[3,1],[4,1],[5,1],[5,2],[4,2],[3,2],[2,2],[1,5],[1,6],[2,6],[3,6],[4,6],[5,5],[5,6],[5,6]]",
        "output": "21"
      },
      {
        "input": "row = 8, col = 8, cells = [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5],[4,4],[4,5],[5,4],[5,5],[6,4],[6,5],[7,4],[7,5],[8,4],[8,5],[1,1],[1,2],[1,3],[1,6],[1,7],[1,8],[2,1],[2,2],[2,3],[2,6],[2,7],[2,8],[3,1],[3,2],[3,3],[3,6],[3,7],[3,8],[4,1],[4,2],[4,3],[4,6],[4,7],[4,8],[5,1],[5,2],[5,3],[5,6],[5,7],[5,8],[6,1],[6,2],[6,3],[6,6],[6,7],[6,8],[7,1],[7,2],[7,3],[7,6],[7,7],[7,8],[8,1],[8,2],[8,3],[8,6],[8,7],[8,8]]",
        "output": "21"
      },
      {
        "input": "row = 5, col = 10, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[2,1],[2,10],[3,1],[3,10],[4,1],[4,10],[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[5,9],[5,10],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,9],[3,2],[3,9],[3,3],[3,8],[3,4],[3,7],[3,5],[3,6],[4,2],[4,9],[4,3],[4,8],[4,4],[4,7],[4,5],[4,6]]",
        "output": "9"
      },
      {
        "input": "row = 6, col = 6, cells = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[1,2],[2,3],[3,4],[4,5],[5,6],[6,5],[6,4],[5,3],[4,2],[3,1],[2,1],[1,3],[1,4],[1,5],[1,6],[2,6],[3,6],[4,6],[5,4],[5,1],[6,1],[6,2],[6,3]]",
        "output": "5"
      },
      {
        "input": "row = 7, col = 7, cells = [[1,1],[1,7],[7,1],[7,7],[3,3],[4,4],[5,5],[2,2],[6,6],[3,2],[3,4],[4,3],[4,5],[5,4],[5,6],[2,3],[2,4],[2,5],[2,6],[6,2],[6,3],[6,4],[6,5],[1,3],[1,4],[1,5],[1,6],[7,3],[7,4],[7,5],[7,6],[3,1],[3,5],[3,6],[3,7],[5,1],[5,2],[5,3],[5,7],[2,1],[2,7],[6,1],[6,7],[4,1],[4,2],[4,6],[4,7]]",
        "output": "8"
      },
      {
        "input": "row = 7, col = 7, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,1],[2,7],[3,1],[3,7],[4,1],[4,7],[5,1],[5,7],[6,1],[6,7],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[2,2],[2,3],[2,4],[2,5],[2,6],[3,2],[3,6],[4,2],[4,6],[5,2],[5,6],[6,2],[6,3],[6,4],[6,5],[3,3],[3,5],[4,3],[4,5],[5,3],[5,5],[4,4]]",
        "output": "6"
      },
      {
        "input": "row = 5, col = 5, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[2,1],[2,5],[3,1],[3,5],[4,1],[4,5],[5,1],[5,2],[5,3],[5,4],[5,5],[2,2],[2,3],[2,4],[3,2],[3,4],[4,2],[4,3],[4,4],[3,3]]",
        "output": "4"
      },
      {
        "input": "row = 7, col = 7, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,1],[2,7],[3,1],[3,7],[4,1],[4,7],[5,1],[5,7],[6,1],[6,7],[7,1],[7,7],[7,2],[7,3],[7,4],[7,5],[7,6],[6,2],[6,3],[6,4],[6,5],[6,6],[5,2],[5,3],[5,4],[5,5],[5,6],[4,2],[4,3],[4,4],[4,5],[4,6],[3,2],[3,3],[3,4],[3,5],[3,6],[2,2],[2,3],[2,4],[2,5],[2,6]]",
        "output": "6"
      },
      {
        "input": "row = 6, col = 6, cells = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[1,2],[2,1],[1,5],[2,4],[1,4],[2,3],[1,3],[2,2],[1,2],[1,1]]",
        "output": "5"
      },
      {
        "input": "row = 5, col = 5, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[2,1],[2,5],[3,1],[3,5],[4,1],[4,5],[5,1],[5,2],[5,3],[5,4],[5,5],[2,2],[2,3],[2,4],[3,2],[3,3],[3,4],[4,2],[4,3],[4,4]]",
        "output": "4"
      },
      {
        "input": "row = 10, col = 10, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[2,1],[2,10],[3,1],[3,10],[4,1],[4,10],[5,1],[5,10],[6,1],[6,10],[7,1],[7,10],[8,1],[8,10],[9,1],[9,10],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9],[10,10],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,9],[3,2],[3,9],[4,2],[4,9],[5,2],[5,9],[6,2],[6,9],[7,2],[7,9],[8,2],[8,9],[9,2],[9,3],[9,4],[9,5],[9,6],[9,7],[9,8],[3,3],[3,5],[3,7],[4,3],[4,5],[4,7],[5,3],[5,5],[5,7],[6,3],[6,5],[6,7],[7,3],[7,5],[7,7],[5,4]]",
        "output": "9"
      },
      {
        "input": "row = 7, col = 7, cells = [[1,4],[2,4],[3,4],[4,4],[5,4],[6,4],[7,4],[1,3],[2,3],[3,3],[4,3],[5,3],[6,3],[7,3],[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[1,6],[2,6],[3,6],[4,6],[5,6],[6,6],[7,6],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[7,7]]",
        "output": "42"
      },
      {
        "input": "row = 8, col = 8, cells = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8],[7,8],[6,8],[5,8],[4,8],[3,8],[2,8],[1,8],[1,7],[1,6],[1,5],[1,4],[1,3],[1,2],[7,2],[6,2],[5,2],[4,2],[3,2],[2,2],[2,3],[3,3],[4,3],[5,3],[6,3],[7,3],[7,4],[6,4],[5,4],[4,4],[3,4],[2,4],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[7,6],[6,6],[5,6],[4,6],[3,6],[2,6],[2,7],[3,7],[4,7],[5,7],[6,7],[7,7]]",
        "output": "14"
      },
      {
        "input": "row = 5, col = 5, cells = [[1,3],[2,3],[3,3],[4,3],[5,3],[1,2],[2,2],[3,2],[4,2],[5,2],[1,1],[2,1],[3,1],[4,1],[5,1],[1,4],[2,4],[3,4],[4,4],[5,4],[1,5],[2,5],[3,5],[4,5],[5,5]]",
        "output": "20"
      },
      {
        "input": "row = 7, col = 7, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,1],[2,7],[3,1],[3,7],[4,1],[4,7],[5,1],[5,7],[6,1],[6,7],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[2,2],[2,3],[2,4],[2,5],[2,6],[3,2],[3,3],[3,4],[3,5],[3,6],[4,2],[4,3],[4,4],[4,5],[4,6],[5,2],[5,3],[5,4],[5,5],[5,6],[6,2],[6,3],[6,4],[6,5],[6,6]]",
        "output": "6"
      },
      {
        "input": "row = 8, col = 8, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[2,1],[2,8],[3,1],[3,8],[4,1],[4,8],[5,1],[5,8],[6,1],[6,8],[7,1],[7,8],[8,1],[8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7]]",
        "output": "7"
      },
      {
        "input": "row = 6, col = 6, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[2,1],[2,6],[3,1],[3,6],[4,1],[4,6],[5,1],[5,6],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[2,2],[2,3],[2,4],[2,5],[3,2],[3,3],[3,4],[3,5],[4,2],[4,3],[4,4],[4,5],[5,2],[5,3],[5,4],[5,5]]",
        "output": "5"
      },
      {
        "input": "row = 8, col = 8, cells = [[1,1],[1,8],[8,1],[8,8],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[3,3],[4,4],[5,5],[6,6],[3,2],[3,4],[4,3],[4,5],[5,4],[5,6],[6,5],[6,3],[3,1],[3,5],[3,6],[3,7],[5,1],[5,2],[5,3],[5,7],[2,1],[2,7],[6,1],[6,7],[4,1],[4,2],[4,6],[4,7]]",
        "output": "9"
      },
      {
        "input": "row = 8, col = 8, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[2,1],[2,8],[3,1],[3,8],[4,1],[4,8],[5,1],[5,8],[6,1],[6,8],[7,1],[7,8],[8,1],[8,8],[8,7],[8,6],[8,5],[8,4],[8,3],[8,2],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7]]",
        "output": "7"
      },
      {
        "input": "row = 10, col = 10, cells = [[1,5],[1,6],[2,5],[2,6],[3,5],[3,6],[4,5],[4,6],[5,5],[5,6],[6,5],[6,6],[7,5],[7,6],[8,5],[8,6],[9,5],[9,6],[10,5],[10,6],[1,1],[1,2],[1,3],[1,4],[1,7],[1,8],[1,9],[1,10],[2,1],[2,2],[2,3],[2,4],[2,7],[2,8],[2,9],[2,10],[3,1],[3,2],[3,3],[3,4],[3,7],[3,8],[3,9],[3,10],[4,1],[4,2],[4,3],[4,4],[4,7],[4,8],[4,9],[4,10],[5,1],[5,2],[5,3],[5,4],[5,7],[5,8],[5,9],[5,10],[6,1],[6,2],[6,3],[6,4],[6,7],[6,8],[6,9],[6,10],[7,1],[7,2],[7,3],[7,4],[7,7],[7,8],[7,9],[7,10],[8,1],[8,2],[8,3],[8,4],[8,7],[8,8],[8,9],[8,10],[9,1],[9,2],[9,3],[9,4],[9,7],[9,8],[9,9],[9,10],[10,1],[10,2],[10,3],[10,4],[10,7],[10,8],[10,9],[10,10]]",
        "output": "27"
      },
      {
        "input": "row = 5, col = 4, cells = [[1,1],[1,2],[1,3],[1,4],[2,4],[3,4],[4,4],[5,4],[5,3],[5,2],[5,1],[4,1],[3,1],[2,1],[2,2],[2,3],[3,2],[3,3],[4,2],[4,3]]",
        "output": "3"
      },
      {
        "input": "row = 7, col = 7, cells = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[4,1],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[1,3],[2,4],[3,5],[4,6],[5,7],[6,6],[6,5],[5,5],[5,4],[6,4],[6,3],[5,3],[4,3],[3,3],[2,3],[2,4],[3,4],[4,4],[4,3],[3,3],[2,2],[1,2],[1,4],[1,6],[1,7],[3,1],[3,2],[5,1],[5,2],[7,1],[7,2],[7,3],[6,3],[5,3],[4,2],[3,2],[2,2],[2,6],[3,6],[4,6],[5,6],[4,5],[3,4],[2,4],[2,5],[2,7],[3,7],[4,7],[5,7],[6,7],[4,6],[3,5],[2,5],[1,5]]",
        "output": "6"
      },
      {
        "input": "row = 4, col = 5, cells = [[1,2],[1,3],[1,4],[2,2],[2,3],[2,4],[3,2],[3,3],[3,4],[4,2],[4,3],[4,4],[1,1],[2,1],[3,1],[4,1],[1,5],[2,5],[3,5],[4,5]]",
        "output": "16"
      }
    ]
  },
  {
    "id": 1944,
    "difficulty": "Hard",
    "tags": [
      "Stack",
      "Array",
      "Monotonic Stack"
    ],
    "problemDescription": "There are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. You are given an array heights of distinct integers where heights[i] represents the height of the ith person.\nA person can see another person to their right in the queue if everybody in between is shorter than both of them. More formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]).\nReturn an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue.\n\u00a0\nExample 1:\n\n\nInput: heights = [10,6,8,5,11,9]\nOutput: [3,1,2,1,1,0]\nExplanation:\nPerson 0 can see person 1, 2, and 4.\nPerson 1 can see person 2.\nPerson 2 can see person 3 and 4.\nPerson 3 can see person 4.\nPerson 4 can see person 5.\nPerson 5 can see no one since nobody is to the right of them.\n\nExample 2:\n\nInput: heights = [5,1,2,3,10]\nOutput: [4,1,1,1,0]\n\n\u00a0\nConstraints:\n\nn == heights.length\n1 <= n <= 105\n1 <= heights[i] <= 105\nAll the values of heights are unique.\n\n",
    "starterCode": "class Solution:\n    def canSeePersonsCount(self, heights: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "heights = [1]",
        "output": "[0]"
      },
      {
        "input": "heights = [1,2,3,6,5,4,10,9,8,7]",
        "output": "[1, 1, 1, 2, 2, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [5,1,2,3,10]",
        "output": "[4, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1,100000,2,99999,3,99998,4,99997,5,99996]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [5,4,3,2,1]",
        "output": "[1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10,6,8,5,11,9]",
        "output": "[3, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [3,1,2]",
        "output": "[2, 1, 0]"
      },
      {
        "input": "heights = [1,3,2,5,4,7,6,9,8,11,10]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [10,9,8,7,6,5,4,3,2,1,11]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0]"
      },
      {
        "input": "heights = [100,80,60,70,60,75,85]",
        "output": "[2, 4, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [1,2,3,4,5]",
        "output": "[1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [3,1,4,2,5]",
        "output": "[2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [100000]",
        "output": "[0]"
      },
      {
        "input": "heights = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]",
        "output": "[2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 0]"
      },
      {
        "input": "heights = [1, 9, 2, 8, 3, 7, 4, 6, 5, 14, 13, 12, 11, 10]",
        "output": "[1, 3, 1, 3, 1, 3, 1, 2, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 1, 20, 2, 30, 3, 40, 4, 50, 5, 60, 6, 70, 7, 80, 8, 90, 9, 100, 10]",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [5,9,2,8,7,6,3,4,1,10]",
        "output": "[1, 3, 1, 2, 2, 3, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [10, 20, 15, 25, 30, 5, 35, 40, 45, 50]",
        "output": "[1, 2, 1, 1, 2, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [5, 1, 7, 2, 6, 3, 5, 4, 8, 9, 10, 11, 12, 13, 14]",
        "output": "[2, 1, 3, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [39,37,35,33,31,29,27,25,23,21,19,17,15,13,11,9,7,5,3,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1,2,3,4,5,10,9,8,7,6]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990, 99989, 99988, 99987, 99986, 99985, 99984, 99983, 99982, 99981, 99980, 99979, 99978, 99977, 99976, 99975, 99974, 99973, 99972, 99971, 99970]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [2, 4, 6, 8, 10, 1, 3, 5, 7, 9, 12, 14, 16, 18, 20, 11, 13, 15, 17, 19]",
        "output": "[1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 20]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [1, 5, 2, 6, 3, 7, 4, 8, 9, 10]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [5, 1, 3, 2, 4, 6, 7, 8, 9, 10]",
        "output": "[4, 1, 2, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [100000,1,99999,2,99998,3,99997,4,99996,5]",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [3,6,5,4,3,2,1,7,8,9]",
        "output": "[1, 2, 2, 2, 2, 2, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1]",
        "output": "[1, 1, 3, 2, 1, 1, 3, 2, 1, 1, 3, 2, 1, 1, 3, 2, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 100000, 2, 99999, 3, 99998, 4, 99997, 5, 99996, 6, 99995, 7, 99994, 8, 99993, 9, 99992, 10, 99991]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [5, 1, 3, 2, 6, 4, 8, 7, 10, 9]",
        "output": "[3, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [50, 10, 51, 11, 52, 12, 53, 13, 54, 14]",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96, 6, 95, 7, 94, 8, 93, 9, 92, 10, 91]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [2, 1, 5, 4, 3, 8, 7, 6, 10, 9, 14, 13, 12, 18, 17, 16, 20, 19, 22, 21]",
        "output": "[2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [100000, 1, 100000, 2, 100000, 3, 100000, 4, 100000, 5]",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [5, 3, 8, 6, 11, 9, 14, 12, 17, 15, 20, 18, 23, 21, 26, 24, 29, 27, 32, 30, 35, 33, 38, 36, 39]",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [1, 3, 5, 7, 9, 11, 2, 4, 6, 8, 10]",
        "output": "[1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [15, 10, 5, 14, 9, 4, 13, 8, 3, 12, 7, 2, 11, 6, 1]",
        "output": "[2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 3, 2, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1,5,2,6,3,7,4,8,9,10]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 3, 2, 1, 2, 3, 4]",
        "output": "[1, 1, 1, 3, 3, 2, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 1, 9, 2, 8, 3, 7, 4, 6, 5, 11, 12, 13, 14, 15]",
        "output": "[3, 1, 3, 1, 3, 1, 3, 1, 2, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0]"
      },
      {
        "input": "heights = [5,4,3,2,1,10]",
        "output": "[2, 2, 2, 2, 1, 0]"
      },
      {
        "input": "heights = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15, 14, 16, 15, 17]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 5, 4, 3, 2, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [100000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 99999]",
        "output": "[30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [50000, 40000, 30000, 20000, 10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [2,4,6,8,10,1,3,5,7,9]",
        "output": "[1, 1, 1, 1, 5, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 10, 3, 9, 5, 8, 7, 2, 6, 4]",
        "output": "[1, 2, 1, 2, 1, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [10,5,6,7,1,2,3,4,8,9]",
        "output": "[5, 1, 1, 5, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3]",
        "output": "[1, 1, 3, 2, 1, 1, 3, 2, 1, 1, 3, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 5, 4, 6, 7, 8, 9, 10]",
        "output": "[1, 1, 1, 2, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23]",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 3, 5, 7, 9, 11, 13, 15, 14, 12, 10, 8, 6, 4, 2]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [5, 8, 4, 9, 7, 6, 10, 3, 2, 1, 11, 14, 12, 13, 16, 15, 18, 17, 20, 19]",
        "output": "[1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 3, 1, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 20, 2, 19, 3, 18, 4, 17, 5, 16, 6, 15, 7, 14, 8, 13, 9, 12, 10, 11]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [10, 1, 9, 2, 8, 3, 7, 4, 6, 5, 15, 11, 14, 12, 13, 20, 16, 19, 17, 18]",
        "output": "[3, 1, 3, 1, 3, 1, 3, 1, 2, 1, 3, 1, 3, 1, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [5, 3, 8, 6, 7, 2, 4, 1, 10, 9]",
        "output": "[2, 1, 3, 1, 3, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [1,10,2,9,3,8,4,7,5,6]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 20, 15, 30, 25, 40, 35, 50, 45, 60, 55, 70, 65, 80, 75, 90, 85, 100, 95, 110]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 11, 20, 12, 19, 13, 18, 14, 17, 15, 16]",
        "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [10,1,20,3,40,5,60,7,80,9,100]",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1,2,1,2,1,2,1,2,1,2]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [5, 1, 3, 2, 4, 6, 8, 7, 10, 9]",
        "output": "[4, 1, 2, 1, 1, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [100,50,75,25,60,35,80,10,90,40]",
        "output": "[4, 1, 3, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 20, 15, 25, 30, 5, 10, 15, 20, 25]",
        "output": "[1, 2, 1, 1, 5, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [50, 20, 40, 10, 30, 60, 70, 80, 90, 100]",
        "output": "[3, 1, 3, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10,9,8,7,6,5,15,4,3,2,1,16,17,18,19]",
        "output": "[2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [5, 9, 1, 4, 6, 8, 2, 3, 7, 10]",
        "output": "[1, 5, 1, 1, 1, 4, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 105, 95, 85, 75, 65, 55, 45, 35, 25, 15]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [77, 73, 69, 65, 61, 57, 53, 49, 45, 41, 37, 33, 29, 25, 21, 17, 13, 9, 5, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [5, 1, 3, 2, 4, 6, 2, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]",
        "output": "[4, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 11, 12, 13, 14, 15, 20, 19, 18, 17, 16]",
        "output": "[1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 5, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 1, 0]"
      },
      {
        "input": "heights = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 11, 12, 13, 14, 15]",
        "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 3, 2, 5, 4, 7, 6, 9, 8, 10]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 1, 10, 2, 10, 3, 10, 4, 10, 5]",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [100000, 99999, 99998, 99997, 99996, 99995]",
        "output": "[1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [50, 40, 30, 20, 10, 5, 15, 25, 35, 45]",
        "output": "[2, 3, 3, 3, 2, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [10, 20, 15, 25, 30, 5, 10, 35, 40, 45]",
        "output": "[1, 2, 1, 1, 3, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 3, 2, 6, 5, 4, 10, 9, 8, 7, 14, 13, 12, 11, 20, 19, 18, 17, 16, 15]",
        "output": "[1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [5, 3, 8, 6, 7, 2, 4, 9, 1, 10]",
        "output": "[2, 1, 3, 1, 3, 1, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 18]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0]"
      },
      {
        "input": "heights = [1, 5, 3, 7, 2, 8, 4, 9, 6, 10]",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 0]"
      },
      {
        "input": "heights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [1,2,3,4,5,10,9,8,7,6,11,12,13,14,15]",
        "output": "[1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "heights = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]",
        "output": "[2, 2, 2, 2, 1, 1, 1, 1, 1, 0]"
      }
    ]
  },
  {
    "id": 1627,
    "difficulty": "Hard",
    "tags": [
      "Union Find",
      "Array",
      "Math",
      "Number Theory"
    ],
    "problemDescription": "We have n cities labeled from 1 to n. Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:\n\nx % z == 0,\ny % z == 0, and\nz > threshold.\n\nGiven the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly.\u00a0(i.e. there is some path between them).\nReturn an array answer, where answer.length == queries.length and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path.\n\u00a0\nExample 1:\n\n\nInput: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]\nOutput: [false,false,true]\nExplanation: The divisors for each number:\n1:   1\n2:   1, 2\n3:   1, 3\n4:   1, 2, 4\n5:   1, 5\n6:   1, 2, 3, 6\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n[1,4]   1 is not connected to 4\n[2,5]   2 is not connected to 5\n[3,6]   3 is connected to 6 through path 3--6\n\nExample 2:\n\n\nInput: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]\nOutput: [true,true,true,true,true]\nExplanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.\n\nExample 3:\n\n\nInput: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]\nOutput: [false,false,false,false,false]\nExplanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].\n\n\u00a0\nConstraints:\n\n2 <= n <= 104\n0 <= threshold <= n\n1 <= queries.length <= 105\nqueries[i].length == 2\n1 <= ai, bi <= cities\nai != bi\n\n",
    "starterCode": "class Solution:\n    def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:\n        ",
    "testCases": [
      {
        "input": "n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 10, threshold = 3, queries = [[1,2],[3,4],[5,6],[7,8],[9,10]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 100, threshold = 50, queries = [[1,2],[51,100],[49,99]]",
        "output": "[False, False, False]"
      },
      {
        "input": "n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]",
        "output": "[False, False, True]"
      },
      {
        "input": "n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 100, threshold = 50, queries = [[1,99],[2,98],[3,97],[4,96]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "n = 3000, threshold = 1500, queries = [[1501, 2250], [1502, 2251], [1503, 2252], [1504, 2253], [1505, 2254], [1506, 2255], [1507, 2256], [1508, 2257], [1509, 2258], [1510, 2259]]",
        "output": "[False, False, False, False, False, False, False, False, False, False]"
      },
      {
        "input": "n = 10000, threshold = 1000, queries = [[1, 2000], [3000, 4000], [5000, 6000], [7000, 8000], [9000, 10000]]",
        "output": "[False, True, True, True, True]"
      },
      {
        "input": "n = 9999, threshold = 1, queries = [[i,i+1] for i in range(1,9999)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 50, threshold = 5, queries = [[6,12],[10,20],[14,28],[18,36],[22,44]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 500, threshold = 250, queries = [[i, i+250] for i in range(1, 251)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 999, threshold = 333, queries = [[1,334],[2,335],[3,336],[4,337],[5,338],[6,339]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "n = 10000, threshold = 500, queries = [[i,i+500] for i in range(1,5001)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 100, threshold = 0, queries = [[1,100],[2,99],[3,98],[4,97],[5,96]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 100, threshold = 5, queries = [[i, i+5] for i in range(1, 96)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 100, threshold = 9, queries = [[i,i+1] for i in range(1,100)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 100, threshold = 1, queries = [[i, j] for i in range(1, 101) for j in range(i+1, 101) if i % 2 != 0 and j % 2 != 0]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 50, threshold = 1, queries = [[i, i+1] for i in range(1, 49)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 5000, threshold = 1000, queries = [[1000,2000],[3000,4000],[4999,5000]]",
        "output": "[False, False, False]"
      },
      {
        "input": "n = 100, threshold = 2, queries = [[i, i+2] for i in range(1, 99) if i % 2 != 0]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 100, threshold = 25, queries = [[26,52],[27,54],[28,56],[29,58],[30,60]]",
        "output": "[True, True, True, True, True]"
      },
      {
        "input": "n = 3000, threshold = 1500, queries = [[i,j] for i in range(1,3000) for j in range(i+1,3000) if (i*j) % 7 == 0]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 1000, threshold = 1, queries = [[2, 4], [3, 6], [5, 10], [7, 14], [8, 16], [9, 18], [10, 20], [11, 22], [12, 24], [13, 26]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 100, threshold = 0, queries = [[i,j] for i in range(1,100) for j in range(i+1,101) if i != j]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 10000, threshold = 5000, queries = [[1,6000],[2,6001],[3,6002],[4,6003],[5,6004],[6,6005]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "n = 1000, threshold = 250, queries = [[150, 300], [200, 400], [500, 750], [800, 900], [100, 900]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 1000, threshold = 250, queries = [[1,500],[2,501],[3,502],[4,503],[5,504],[6,505]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "n = 10000, threshold = 9999, queries = [[1,10000],[2,9999],[3,9998],[4,9997]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "n = 10000, threshold = 1000, queries = [[1001,2002],[3003,4004],[5005,6006],[7007,8008],[9009,10010]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 500, threshold = 250, queries = [[251,500],[252,499],[253,498],[254,497],[255,496],[256,495]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "n = 500, threshold = 25, queries = [[i,i+1] for i in range(1,500)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 100, threshold = 1, queries = [[i, j] for i in range(1, 51) for j in range(51, 101)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 10000, threshold = 5000, queries = [[1000, 9000], [5000, 6000], [1, 2], [9999, 10000]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "n = 750, threshold = 250, queries = [[i,j] for i in range(1,750) for j in range(i+1,750) if (i+j) % 2 == 0]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 100, threshold = 1, queries = [[i,j] for i in range(1,100) for j in range(i+1,101)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 5000, threshold = 100, queries = [[100,200],[50,150],[300,600],[1,2],[4999,5000]]",
        "output": "[False, False, True, False, False]"
      },
      {
        "input": "n = 1000, threshold = 250, queries = [[1,500],[2,750],[3,900],[4,950],[5,999]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 1500, threshold = 100, queries = [[i,j] for i in range(1,1500) for j in range(i+1,1500) if (i*j) % 3 == 0]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 5000, threshold = 2000, queries = [[1,3000],[2,4000],[3,4500],[4,4900],[5,4999]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 50, threshold = 10, queries = [[11,22],[13,26],[15,30],[7,14],[21,42]]",
        "output": "[True, True, True, False, True]"
      },
      {
        "input": "n = 5000, threshold = 250, queries = [[125,250],[375,500],[625,750],[875,1000],[1125,1250]]",
        "output": "[False, True, True, True, True]"
      },
      {
        "input": "n = 1000, threshold = 200, queries = [[500, 750], [250, 501], [750, 1000], [1, 999]]",
        "output": "[True, False, True, False]"
      },
      {
        "input": "n = 100, threshold = 99, queries = [[i, j] for i in range(1, 51) for j in range(51, 101)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 100, threshold = 2, queries = [[i,i+2] for i in range(1,99) if i+2 <= 100]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 10000, threshold = 0, queries = [[1,9999],[2,9998],[3,9997],[4,9996],[5,9995],[6,9994],[7,9993],[8,9992],[9,9991],[10,9990]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 10000, threshold = 5000, queries = [[5100, 9900], [5200, 9800], [5300, 9700], [5400, 9600], [5500, 9500]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 5000, threshold = 1000, queries = [[1200, 2400], [1500, 3000], [2500, 4000], [3500, 4500], [1000, 4000]]",
        "output": "[True, True, False, False, False]"
      },
      {
        "input": "n = 10000, threshold = 3, queries = [[i,10000-i] for i in range(1,5001)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 5000, threshold = 1, queries = [[i,i+1] for i in range(1,4999)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 1000, threshold = 5, queries = [[1,1000],[2,999],[3,998],[4,997],[5,996]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 100, threshold = 10, queries = [[1,11],[2,12],[3,13],[4,14],[5,15]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 1000, threshold = 50, queries = [[1,50],[2,50],[3,50],[4,50],[5,50],[6,50],[7,50],[8,50]]",
        "output": "[False, False, False, False, False, False, False, False]"
      },
      {
        "input": "n = 5000, threshold = 2500, queries = [[1,2501],[1000,3000],[2500,5000]]",
        "output": "[False, False, False]"
      },
      {
        "input": "n = 2000, threshold = 100, queries = [[100,200],[300,400],[500,600],[700,800],[900,1000],[1100,1200],[1300,1400],[1500,1600],[1700,1800],[1900,2000]]",
        "output": "[False, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 100, threshold = 20, queries = [[10,20],[30,40],[50,60],[70,80],[90,100]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 20, threshold = 19, queries = [[1, 20], [2, 19], [3, 18], [4, 17], [5, 16]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 2000, threshold = 1000, queries = [[1,2],[3,4],[5,6],[7,8],[9,10]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 100, threshold = 10, queries = [[i, j] for i in range(1, 100) for j in range(i+1, 101)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 5000, threshold = 1000, queries = [[2000, 3000], [1001, 2001], [4000, 5000], [999, 4999]]",
        "output": "[False, False, False, False]"
      },
      {
        "input": "n = 8000, threshold = 4000, queries = [[4001,8000],[4002,7999],[4003,7998],[4004,7997],[4005,7996],[4006,7995]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "n = 2000, threshold = 100, queries = [[50, 150], [100, 200], [150, 250], [200, 300], [250, 350], [300, 400], [350, 450], [400, 500], [450, 550], [500, 600]]",
        "output": "[False, False, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 5000, threshold = 100, queries = [[i,5001-i] for i in range(1,2501)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 10000, threshold = 2, queries = [[i,10001-i] for i in range(1,5001)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 1000, threshold = 0, queries = [[i,j] for i in range(1,1000) for j in range(i+1,1001)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 1000, threshold = 5, queries = [[1, 3], [2, 4], [5, 7], [8, 10], [11, 13], [14, 16], [17, 19], [20, 22], [23, 25], [26, 28], [29, 31], [32, 34], [35, 37], [38, 40], [41, 43], [44, 46], [47, 49], [50, 52], [53, 55], [56, 58], [59, 61], [62, 64], [65, 67], [68, 70], [71, 73], [74, 76], [77, 79], [80, 82], [83, 85], [86, 88], [89, 91], [92, 94], [95, 97], [98, 100]]",
        "output": "[False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 10000, threshold = 50, queries = [[51, 101], [52, 102], [53, 103], [54, 104], [55, 105], [56, 106], [57, 107], [58, 108], [59, 109], [60, 110]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 1500, threshold = 500, queries = [[i,j] for i in range(1,1500) for j in range(i+1,1500) if (i+j) % 5 == 0]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 10000, threshold = 1, queries = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11]]",
        "output": "[False, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 3000, threshold = 1500, queries = [[i,i+1500] for i in range(1,1500)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 1000, threshold = 500, queries = [[10,20],[30,50],[25,75],[500,1000],[999,1000]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 1000, threshold = 50, queries = [[51,100],[52,99],[53,98],[54,97],[55,96],[56,95],[57,94],[58,93],[59,92],[60,91]]",
        "output": "[True, True, False, False, True, True, False, False, False, True]"
      },
      {
        "input": "n = 8000, threshold = 4000, queries = [[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 3000, threshold = 1500, queries = [[1501,2000],[1502,2500],[1503,3000],[2000,3000],[1504,1505],[1506,1507]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "n = 10000, threshold = 2000, queries = [[2001, 4000], [2002, 4001], [2003, 4002], [2004, 4003], [2005, 4004], [2006, 4005], [2007, 4006], [2008, 4007], [2009, 4008], [2010, 4009]]",
        "output": "[False, False, False, False, False, False, False, False, False, False]"
      },
      {
        "input": "n = 1000, threshold = 5, queries = [[i,i+5] for i in range(1,995)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 7000, threshold = 3500, queries = [[i,i+3500] for i in range(1,3500)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 1000, threshold = 500, queries = [[i,i+1] for i in range(1,1000)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 10000, threshold = 5000, queries = [[1,7000],[2,8000],[3,9000],[4,9500],[5,9999]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 10000, threshold = 5000, queries = [[1,5001],[2,5002],[3,5003],[4,5004],[5,5005]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 100, threshold = 99, queries = [[1,100]]",
        "output": "[False]"
      },
      {
        "input": "n = 2000, threshold = 0, queries = [[i,j] for i in range(1,2000) for j in range(i+1,2000) if abs(i-j) > 1000]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 5000, threshold = 2, queries = [[3, 6], [5, 10], [7, 14], [9, 18], [11, 22], [13, 26], [15, 30], [17, 34], [19, 38], [21, 42]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 100, threshold = 0, queries = [[i, j] for i in range(1, 101) for j in range(i+1, 101) if i % 2 == 0 and j % 2 == 0]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 10000, threshold = 5000, queries = [[5001,5002],[5003,5004],[5005,5006],[5007,5008],[5009,5010]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 5000, threshold = 2500, queries = [[1, 500], [1000, 1500], [2000, 2500], [3000, 3500], [4000, 4500], [4500, 5000]]",
        "output": "[False, False, False, False, False, False]"
      },
      {
        "input": "n = 9000, threshold = 4500, queries = [[i,i+1] for i in range(1,8999)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 100, threshold = 5, queries = [[i,j] for i in range(1,100) for j in range(i+1,101) if i % 5 == 0 and j % 5 == 0]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 1000, threshold = 300, queries = [[101,202],[303,404],[505,606],[707,808],[909,1000]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 100, threshold = 1, queries = [[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "[False, True, True, True, True]"
      },
      {
        "input": "n = 10000, threshold = 5000, queries = [[i, 10000 - i] for i in range(1, 5001)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 2000, threshold = 0, queries = [[1, 1999], [2, 1998], [3, 1997], [4, 1996], [5, 1995], [6, 1994], [7, 1993], [8, 1992], [9, 1991], [10, 1990]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 500, threshold = 250, queries = [[251, 500], [252, 499], [253, 498], [254, 497], [255, 496]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 5000, threshold = 2500, queries = [[1,2501],[2,2502],[3,2503],[4,2504],[5,2505]]",
        "output": "[False, False, False, False, False]"
      },
      {
        "input": "n = 2000, threshold = 1, queries = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]",
        "output": "[False, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 150, threshold = 50, queries = [[10, 20], [20, 30], [30, 40], [40, 50], [50, 60], [60, 70], [70, 80], [80, 90], [90, 100], [100, 110], [110, 120], [120, 130], [130, 140], [140, 150]]",
        "output": "[False, False, False, False, False, False, False, False, False, False, False, False, False, False]"
      },
      {
        "input": "n = 10000, threshold = 4, queries = [[i,10000-i] for i in range(1,2501)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 100, threshold = 3, queries = [[i, j] for i in range(1, 101) for j in range(i+1, 101) if i % 3 == 0 and j % 3 == 0]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      },
      {
        "input": "n = 1000, threshold = 0, queries = [[1, 999], [2, 998], [3, 997], [4, 996], [5, 995], [10, 100], [50, 150], [200, 300], [700, 800], [900, 1000]]",
        "output": "[True, True, True, True, True, True, True, True, True, True]"
      },
      {
        "input": "n = 500, threshold = 250, queries = [[1, 251], [2, 252], [3, 253], [4, 254], [5, 255], [250, 499], [251, 498], [252, 497], [253, 496], [254, 495]]",
        "output": "[False, False, False, False, False, False, False, False, False, False]"
      },
      {
        "input": "n = 200, threshold = 0, queries = [[i, j] for i in range(1, 101) for j in range(101, 201)]",
        "output": "Error: Solution.areConnected() missing 1 required positional argument: 'queries'"
      }
    ]
  },
  {
    "id": 127,
    "difficulty": "Hard",
    "tags": [
      "Breadth-First Search",
      "Hash Table",
      "String"
    ],
    "problemDescription": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n\u00a0\nExample 1:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n\nExample 2:\n\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: 0\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n\n\u00a0\nConstraints:\n\n1 <= beginWord.length <= 10\nendWord.length == beginWord.length\n1 <= wordList.length <= 5000\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.\n\n",
    "starterCode": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        ",
    "testCases": [
      {
        "input": "beginWord = \"leet\", endWord = \"code\", wordList = [\"lest\",\"leet\",\"lose\",\"code\",\"lode\",\"robe\",\"home\",\"dote\",\"cake\"]",
        "output": "0"
      },
      {
        "input": "beginWord = \"talk\", endWord = \"tell\", wordList = [\"talk\",\"tell\",\"tall\",\"toll\",\"toll\"]",
        "output": "3"
      },
      {
        "input": "beginWord = \"talk\", endWord = \"walk\", wordList = [\"talk\",\"walk\",\"tall\",\"tale\",\"tali\",\"wali\",\"wali\",\"wale\",\"wall\",\"walk\"]",
        "output": "2"
      },
      {
        "input": "beginWord = \"leet\", endWord = \"code\", wordList = [\"lest\",\"leet\",\"lose\",\"code\",\"lode\",\"robe\",\"lost\"]",
        "output": "6"
      },
      {
        "input": "beginWord = \"red\", endWord = \"tax\", wordList = [\"ted\",\"tex\",\"red\",\"tax\",\"tad\",\"den\",\"rex\",\"pee\"]",
        "output": "4"
      },
      {
        "input": "beginWord = \"cat\", endWord = \"dog\", wordList = [\"bat\",\"rat\",\"hat\",\"hot\",\"dot\",\"dog\"]",
        "output": "5"
      },
      {
        "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
        "output": "0"
      },
      {
        "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
        "output": "5"
      },
      {
        "input": "beginWord = \"abcf\", endWord = \"aefh\", wordList = [\"abcf\",\"aefg\",\"aefh\",\"aegh\",\"cefh\",\"cefh\",\"aegh\",\"cefg\",\"abcf\",\"abef\"]",
        "output": "0"
      },
      {
        "input": "beginWord = \"machine\", endWord = \"natural\", wordList = [\"machene\",\"machenr\",\"machrne\",\"machren\",\"machenl\",\"machenm\",\"machene\",\"machrne\",\"machren\",\"machenl\",\"machenm\",\"machane\",\"machrne\",\"machren\",\"machenl\",\"machenm\",\"machenl\",\"machene\",\"machrne\",\"machren\",\"machenl\",\"machenm\",\"nachenl\",\"nachene\",\"nachrne\",\"nachren\",\"nachenl\",\"nachenm\",\"nachene\",\"nachrne\",\"nachren\",\"nachenl\",\"nachenm\",\"nachene\",\"nachrne\",\"nachren\",\"nachenl\",\"nachenm\",\"nachene\",\"nachrne\",\"nachren\",\"nachenl\",\"nachenm\",\"nachene\",\"nachrne\",\"nachren\",\"nachenl\",\"nachenm\",\"nachene\",\"nachrne\",\"nachren\",\"nachenl\",\"nachenm\",\"nachene\",\"nachrne\",\"nachren\",\"nachenl\",\"nachenm\",\"nachene\",\"nachrne\",\"nachren\",\"nachenl\",\"nachenm\",\"natural\"]",
        "output": "0"
      },
      {
        "input": "beginWord = \"listen\", endWord = \"silent\", wordList = [\"lisen\",\"litesn\",\"litens\",\"listne\",\"listen\",\"siltne\",\"silent\",\"linset\",\"lintes\",\"sleint\",\"ltsine\",\"lintse\",\"lisnet\",\"lsitne\",\"lnties\",\"lintes\",\"lintes\",\"linsat\",\"slient\",\"lsinte\",\"linset\"]",
        "output": "0"
      },
      {
        "input": "beginWord = \"algorithm\", endWord = \"rhythm\", wordList = [\"alorhythm\",\"alohrhythm\",\"alohrhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"alorhythm\",\"rhythm\",\"rhythm\",\"rhythm\",\"rhythm\",\"rhythm\",\"rhythm\",\"rhythm\",\"rhythm\",\"rhythm\",\"rhythm\"]",
        "output": "0"
      },
      {
        "input": "beginWord = \"physics\", endWord = \"chemist\", wordList = [\"phyiscs\",\"phyisic\",\"phyisct\",\"phyisci\",\"phyicsi\",\"physics\",\"physisi\",\"physcii\",\"physici\",\"phyiscs\",\"phyiscs\",\"phyiscs\",\"phyiscs\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"physcis\",\"chemics\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\",\"chemist\"]",
        "output": "0"
      }
    ]
  }
]