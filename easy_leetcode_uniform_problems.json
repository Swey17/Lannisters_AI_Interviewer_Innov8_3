[
  {
    "id": 746,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\nYou can either start from the step with index 0, or the step with index 1.\nReturn the minimum cost to reach the top of the floor.\n\u00a0\nExample 1:\n\nInput: cost = [10,15,20]\nOutput: 15\nExplanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n\nExample 2:\n\nInput: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n\n\u00a0\nConstraints:\n\n2 <= cost.length <= 1000\n0 <= cost[i] <= 999\n\n",
    "starterCode": "class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "cost = [999, 999, 999, 999]",
        "output": "1998"
      },
      {
        "input": "cost = [1,2,3,4,5]",
        "output": "6"
      },
      {
        "input": "cost = [1,100,1,1,1,100,1,1,100,1]",
        "output": "6"
      },
      {
        "input": "cost = [1,2,3,4,5,6,7,8,9,10]",
        "output": "25"
      },
      {
        "input": "cost = [0,0,0,0]",
        "output": "0"
      },
      {
        "input": "cost = [1,2]",
        "output": "1"
      },
      {
        "input": "cost = [999,999,999,999,999,999]",
        "output": "2997"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5]",
        "output": "6"
      },
      {
        "input": "cost = [10,15,20,25,30]",
        "output": "40"
      },
      {
        "input": "cost = [10,15]",
        "output": "10"
      },
      {
        "input": "cost = [10, 20, 10, 5]",
        "output": "20"
      },
      {
        "input": "cost = [10,5,20,25,30,35,40]",
        "output": "65"
      },
      {
        "input": "cost = [10,20,15,20,30]",
        "output": "40"
      },
      {
        "input": "cost = [10, 15]",
        "output": "10"
      },
      {
        "input": "cost = [5,8,6,3,4,2,8,5,1]",
        "output": "18"
      },
      {
        "input": "cost = [999,999]",
        "output": "999"
      },
      {
        "input": "cost = [10,15,20]",
        "output": "15"
      },
      {
        "input": "cost = [10, 15, 20, 10, 15, 20]",
        "output": "40"
      },
      {
        "input": "cost = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "5"
      },
      {
        "input": "cost = [1, 100, 100, 1]",
        "output": "101"
      },
      {
        "input": "cost = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81]",
        "output": "900"
      },
      {
        "input": "cost = [10, 15, 20, 30, 40, 50, 60, 70, 80, 90]",
        "output": "210"
      },
      {
        "input": "cost = [3, 5, 2, 1, 8, 9, 3, 5, 6, 2, 1, 4, 7, 3, 2, 8, 6, 4, 1, 7]",
        "output": "38"
      },
      {
        "input": "cost = [50, 10, 20, 100, 30, 40, 10, 20, 30, 40]",
        "output": "100"
      },
      {
        "input": "cost = [3, 2, 4, 3, 2, 5, 1, 2, 4, 3, 2, 5, 1, 2, 4]",
        "output": "17"
      },
      {
        "input": "cost = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1]",
        "output": "13"
      },
      {
        "input": "cost = [5, 8, 3, 12, 2, 7, 6, 10, 1, 4, 9, 11, 13, 14, 15]",
        "output": "46"
      },
      {
        "input": "cost = [1, 100, 2, 100, 3, 100, 4, 100, 5, 100, 6, 100, 7, 100, 8]",
        "output": "36"
      },
      {
        "input": "cost = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "output": "450"
      },
      {
        "input": "cost = [1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2]",
        "output": "13"
      },
      {
        "input": "cost = [5, 8, 2, 3, 7, 1, 4, 6, 9, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "92"
      },
      {
        "input": "cost = [50, 10, 5, 100, 20, 15, 10, 5, 20, 10, 5, 100, 20, 15, 10, 5, 20, 10, 5, 100, 20, 15, 10, 5, 20]",
        "output": "150"
      },
      {
        "input": "cost = [10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140]",
        "output": "495"
      },
      {
        "input": "cost = [1, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999]",
        "output": "8992"
      },
      {
        "input": "cost = [3, 2, 10, 2, 3, 5, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]",
        "output": "52"
      },
      {
        "input": "cost = [999, 0, 999, 0, 999, 0, 999, 0, 999, 0]",
        "output": "0"
      },
      {
        "input": "cost = [999, 999, 1, 999, 999, 2, 999, 999, 3, 999]",
        "output": "3001"
      },
      {
        "input": "cost = [999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999]",
        "output": "0"
      },
      {
        "input": "cost = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1]",
        "output": "12"
      },
      {
        "input": "cost = [5, 8, 10, 2, 9, 1, 3, 7, 4, 6, 11, 12]",
        "output": "29"
      },
      {
        "input": "cost = [999, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0]",
        "output": "999"
      },
      {
        "input": "cost = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90]",
        "output": "475"
      },
      {
        "input": "cost = [5, 8, 3, 7, 2, 8, 3, 7, 2, 8, 3, 7, 2, 8, 3, 7, 2]",
        "output": "25"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "156"
      },
      {
        "input": "cost = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "125"
      },
      {
        "input": "cost = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "5600"
      },
      {
        "input": "cost = [30, 5, 20, 10, 25, 15, 40, 35, 50, 45, 60, 55, 70, 65, 80, 75]",
        "output": "305"
      },
      {
        "input": "cost = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "60"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "50"
      },
      {
        "input": "cost = [1, 100, 100, 1, 100, 100, 1, 100, 100, 1]",
        "output": "302"
      },
      {
        "input": "cost = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]",
        "output": "15"
      },
      {
        "input": "cost = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80]",
        "output": "315"
      },
      {
        "input": "cost = [5, 3, 8, 6, 7, 2, 4, 9, 1, 10]",
        "output": "16"
      },
      {
        "input": "cost = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]",
        "output": "150"
      },
      {
        "input": "cost = [999, 998, 997, 996, 995, 994, 993, 992, 991, 990]",
        "output": "4970"
      },
      {
        "input": "cost
        "output": "75924"
      },
      {
        "input": "cost = [50, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "570"
      },
      {
        "input": "cost = [5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 15, 12, 17, 14, 19]",
        "output": "56"
      },
      {
        "input": "cost = [999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0]",
        "output": "0"
      },
      {
        "input": "cost = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "100"
      },
      {
        "input": "cost = [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980]",
        "output": "9890"
      },
      {
        "input": "cost = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1, 2, 3, 4, 5]",
        "output": "2507"
      },
      {
        "input": "cost = [999, 999, 0, 0, 999, 999, 0, 0, 999, 999, 0, 0]",
        "output": "2997"
      },
      {
        "input": "cost = [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "0"
      },
      {
        "input": "cost = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "56"
      },
      {
        "input": "cost = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "560"
      },
      {
        "input": "cost = [400, 5, 3, 10, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "12"
      },
      {
        "input": "cost = [20, 1, 3, 2, 4, 2, 5, 3, 6, 4, 7, 5, 8, 6, 9, 7, 10]",
        "output": "30"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "2500"
      },
      {
        "input": "cost = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1, 1, 1, 1, 1]",
        "output": "2503"
      },
      {
        "input": "cost = [10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20, 10, 15, 20]",
        "output": "760"
      },
      {
        "input": "cost = [999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0, 999, 0]",
        "output": "0"
      },
      {
        "input": "cost = [20, 1, 5, 10, 1, 1, 5, 10, 1, 1, 5, 10, 1, 1, 5, 10, 1, 1, 5, 10]",
        "output": "30"
      },
      {
        "input": "cost = [1, 1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000]",
        "output": "5"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "100"
      },
      {
        "input": "cost = [10, 15, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "36"
      },
      {
        "input": "cost = [100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100]",
        "output": "7"
      },
      {
        "input": "cost = [999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1]",
        "output": "10"
      },
      {
        "input": "cost = [5, 8, 2, 3, 6, 1, 4, 7, 9, 10]",
        "output": "24"
      },
      {
        "input": "cost = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]",
        "output": "0"
      },
      {
        "input": "cost = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "495"
      },
      {
        "input": "cost = [999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999]",
        "output": "12"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "56"
      },
      {
        "input": "cost = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "75"
      },
      {
        "input": "cost = [2, 1, 4, 5, 6, 3, 2, 5, 4, 3, 1, 2, 4, 3, 2, 1, 4, 5, 6, 3, 2, 5, 4, 3, 1, 2, 4, 3, 2, 1, 4, 5, 6, 3, 2, 5, 4, 3, 1, 2, 4, 3, 2, 1, 4, 5, 6, 3, 2, 5, 4, 3, 1, 2, 4, 3, 2, 1, 4, 5, 6, 3, 2, 5, 4, 3, 1, 2, 4, 3, 2, 1, 4, 5, 6, 3, 2, 5, 4, 3, 1, 2, 4, 3, 2, 1, 4, 5, 6, 3, 2, 5, 4, 3, 1, 2, 4, 3, 2, 1, 4, 5, 6, 3, 2, 5, 4, 3, 1, 2, 4]",
        "output": "165"
      },
      {
        "input": "cost = [10, 20, 30, 40, 50, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "65"
      },
      {
        "input": "cost = [100, 150, 100, 150, 100, 150, 100, 150, 100, 150]",
        "output": "500"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "225"
      },
      {
        "input": "cost = [3, 2, 1, 5, 4, 1, 3, 2, 1, 5, 4, 1, 3, 2, 1, 5, 4, 1]",
        "output": "23"
      },
      {
        "input": "cost = [10, 20, 10, 20, 10, 20, 10, 20, 10, 20]",
        "output": "50"
      },
      {
        "input": "cost = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "156"
      },
      {
        "input": "cost = [10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10]",
        "output": "130"
      },
      {
        "input": "cost = [100, 200, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100]",
        "output": "106"
      },
      {
        "input": "cost = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100]",
        "output": "14"
      },
      {
        "input": "cost = [100, 50, 25, 12, 6, 3, 1, 0, 0, 1, 3, 6, 12, 25, 50, 100, 150, 200, 250, 300]",
        "output": "530"
      },
      {
        "input": "cost = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "0"
      },
      {
        "input": "cost = [4, 2, 6, 7, 8, 1, 3, 5, 10, 2, 6, 7, 8, 1, 3, 5]",
        "output": "28"
      },
      {
        "input": "cost = [1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999, 1, 999]",
        "output": "10"
      },
      {
        "input": "cost = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]",
        "output": "832039"
      },
      {
        "input": "cost = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "2150"
      },
      {
        "input": "cost = [999, 999, 999, 999, 999, 0, 0, 0, 0, 0]",
        "output": "1998"
      },
      {
        "input": "cost = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "0"
      }
    ]
  },
  {
    "id": 412,
    "difficulty": "Easy",
    "tags": [
      "Math",
      "String",
      "Simulation"
    ],
    "problemDescription": "Given an integer n, return a string array answer (1-indexed) where:\n\nanswer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\nanswer[i] == \"Fizz\" if i is divisible by 3.\nanswer[i] == \"Buzz\" if i is divisible by 5.\nanswer[i] == i (as a string) if none of the above conditions are true.\n\n\u00a0\nExample 1:\nInput: n = 3\nOutput: [\"1\",\"2\",\"Fizz\"]\nExample 2:\nInput: n = 5\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\nExample 3:\nInput: n = 15\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n\n\u00a0\nConstraints:\n\n1 <= n <= 104\n\n",
    "starterCode": "class Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "n = 3",
        "output": "['1', '2', 'Fizz']"
      },
      {
        "input": "n = 100",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz']"
      },
      {
        "input": "n = 15",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']"
      },
      {
        "input": "n = 10000",
        "output": "Execution timed out"
      },
      {
        "input": "n = 1",
        "output": "['1']"
      },
      {
        "input": "n = 50",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz']"
      },
      {
        "input": "n = 5",
        "output": "['1', '2', 'Fizz', '4', 'Buzz']"
      },
      {
        "input": "n = 4000",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz', '751', '752', 'Fizz', '754', 'Buzz', 'Fizz', '757', '758', 'Fizz', 'Buzz', '761', 'Fizz', '763', '764', 'FizzBuzz', '766', '767', 'Fizz', '769', 'Buzz', 'Fizz', '772', '773', 'Fizz', 'Buzz', '776', 'Fizz', '778', '779', 'FizzBuzz', '781', '782', 'Fizz', '784', 'Buzz', 'Fizz', '787', '788', 'Fizz', 'Buzz', '791', 'Fizz', '793', '794', 'FizzBuzz', '796', '797', 'Fizz', '799', 'Buzz', 'Fizz', '802', '803', 'Fizz', 'Buzz', '806', 'Fizz', '808', '809', 'FizzBuzz', '811', '812', 'Fizz', '814', 'Buzz', 'Fizz', '817', '818', 'Fizz', 'Buzz', '821', 'Fizz', '823', '824', 'FizzBuzz', '826', '827', 'Fizz', '829', 'Buzz', 'Fizz', '832', '833', 'Fizz', 'Buzz', '836', 'Fizz', '838', '839', 'FizzBuzz', '841', '842', 'Fizz', '844', 'Buzz', 'Fizz', '847', '848', 'Fizz', 'Buzz', '851', 'Fizz', '853', '854', 'FizzBuzz', '856', '857', 'Fizz', '859', 'Buzz', 'Fizz', '862', '863', 'Fizz', 'Buzz', '866', 'Fizz', '868', '869', 'FizzBuzz', '871', '872', 'Fizz', '874', 'Buzz', 'Fizz', '877', '878', 'Fizz', 'Buzz', '881', 'Fizz', '883', '884', 'FizzBuzz', '886', '887', 'Fizz', '889', 'Buzz', 'Fizz', '892', '893', 'Fizz', 'Buzz', '896', 'Fizz', '898', '899', 'FizzBuzz', '901', '902', 'Fizz', '904', 'Buzz', 'Fizz', '907', '908', 'Fizz', 'Buzz', '911', 'Fizz', '913', '914', 'FizzBuzz', '916', '917', 'Fizz', '919', 'Buzz', 'Fizz', '922', '923', 'Fizz', 'Buzz', '926', 'Fizz', '928', '929', 'FizzBuzz', '931', '932', 'Fizz', '934', 'Buzz', 'Fizz', '937', '938', 'Fizz', 'Buzz', '941', 'Fizz', '943', '944', 'FizzBuzz', '946', '947', 'Fizz', '949', 'Buzz', 'Fizz', '952', '953', 'Fizz', 'Buzz', '956', 'Fizz', '958', '959', 'FizzBuzz', '961', '962', 'Fizz', '964', 'Buzz', 'Fizz', '967', '968', 'Fizz', 'Buzz', '971', 'Fizz', '973', '974', 'FizzBuzz', '976', '977', 'Fizz', '979', 'Buzz', 'Fizz', '982', '983', 'Fizz', 'Buzz', '986', 'Fizz', '988', '989', 'FizzBuzz', '991', '992', 'Fizz', '994', 'Buzz', 'Fizz', '997', '998', 'Fizz', 'Buzz', '1001', 'Fizz', '1003', '1004', 'FizzBuzz', '1006', '1007', 'Fizz', '1009', 'Buzz', 'Fizz', '1012', '1013', 'Fizz', 'Buzz', '1016', 'Fizz', '1018', '1019', 'FizzBuzz', '1021', '1022', 'Fizz', '1024', 'Buzz', 'Fizz', '1027', '1028', 'Fizz', 'Buzz', '1031', 'Fizz', '1033', '1034', 'FizzBuzz', '1036', '1037', 'Fizz', '1039', 'Buzz', 'Fizz', '1042', '1043', 'Fizz', 'Buzz', '1046', 'Fizz', '1048', '1049', 'FizzBuzz', '1051', '1052', 'Fizz', '1054', 'Buzz', 'Fizz', '1057', '1058', 'Fizz', 'Buzz', '1061', 'Fizz', '1063', '1064', 'FizzBuzz', '1066', '1067', 'Fizz', '1069', 'Buzz', 'Fizz', '1072', '1073', 'Fizz', 'Buzz', '1076', 'Fizz', '1078', '1079', 'FizzBuzz', '1081', '1082', 'Fizz', '1084', 'Buzz', 'Fizz', '1087', '1088', 'Fizz', 'Buzz', '1091', 'Fizz', '1093', '1094', 'FizzBuzz', '1096', '1097', 'Fizz', '1099', 'Buzz', 'Fizz', '1102', '1103', 'Fizz', 'Buzz', '1106', 'Fizz', '1108', '1109', 'FizzBuzz', '1111', '1112', 'Fizz', '1114', 'Buzz', 'Fizz', '1117', '1118', 'Fizz', 'Buzz', '1121', 'Fizz', '1123', '1124', 'FizzBuzz', '1126', '1127', 'Fizz', '1129', 'Buzz', 'Fizz', '1132', '1133', 'Fizz', 'Buzz', '1136', 'Fizz', '1138', '1139', 'FizzBuzz', '1141', '1142', 'Fizz', '1144', 'Buzz', 'Fizz', '1147', '1148', 'Fizz', 'Buzz', '1151', 'Fizz', '1153', '1154', 'FizzBuzz', '1156', '1157', 'Fizz', '1159', 'Buzz', 'Fizz', '1162', '1163', 'Fizz', 'Buzz', '1166', 'Fizz', '1168', '1169', 'FizzBuzz', '1171', '1172', 'Fizz', '1174', 'Buzz', 'Fizz', '1177', '1178', 'Fizz', 'Buzz', '1181', 'Fizz', '1183', '1184', 'FizzBuzz', '1186', '1187', 'Fizz', '1189', 'Buzz', 'Fizz', '1192', '1193', 'Fizz', 'Buzz', '1196', 'Fizz', '1198', '1199', 'FizzBuzz', '1201', '1202', 'Fizz', '1204', 'Buzz', 'Fizz', '1207', '1208', 'Fizz', 'Buzz', '1211', 'Fizz', '1213', '1214', 'FizzBuzz', '1216', '1217', 'Fizz', '1219', 'Buzz', 'Fizz', '1222', '1223', 'Fizz', 'Buzz', '1226', 'Fizz', '1228', '1229', 'FizzBuzz', '1231', '1232', 'Fizz', '1234', 'Buzz', 'Fizz', '1237', '1238', 'Fizz', 'Buzz', '1241', 'Fizz', '1243', '1244', 'FizzBuzz', '1246', '1247', 'Fizz', '1249', 'Buzz', 'Fizz', '1252', '1253', 'Fizz', 'Buzz', '1256', 'Fizz', '1258', '1259', 'FizzBuzz', '1261', '1262', 'Fizz', '1264', 'Buzz', 'Fizz', '1267', '1268', 'Fizz', 'Buzz', '1271', 'Fizz', '1273', '1274', 'FizzBuzz', '1276', '1277', 'Fizz', '1279', 'Buzz', 'Fizz', '1282', '1283', 'Fizz', 'Buzz', '1286', 'Fizz', '1288', '1289', 'FizzBuzz', '1291', '1292', 'Fizz', '1294', 'Buzz', 'Fizz', '1297', '1298', 'Fizz', 'Buzz', '1301', 'Fizz', '1303', '1304', 'FizzBuzz', '1306', '1307', 'Fizz', '1309', 'Buzz', 'Fizz', '1312', '1313', 'Fizz', 'Buzz', '1316', 'Fizz', '1318', '1319', 'FizzBuzz', '1321', '1322', 'Fizz', '1324', 'Buzz', 'Fizz', '1327', '1328', 'Fizz', 'Buzz', '1331', 'Fizz', '1333', '1334', 'FizzBuzz', '1336', '1337', 'Fizz', '1339', 'Buzz', 'Fizz', '1342', '1343', 'Fizz', 'Buzz', '1346', 'Fizz', '1348', '1349', 'FizzBuzz', '1351', '1352', 'Fizz', '1354', 'Buzz', 'Fizz', '1357', '1358', 'Fizz', 'Buzz', '1361', 'Fizz', '1363', '1364', 'FizzBuzz', '1366', '1367', 'Fizz', '1369', 'Buzz', 'Fizz', '1372', '1373', 'Fizz', 'Buzz', '1376', 'Fizz', '1378', '1379', 'FizzBuzz', '1381', '1382', 'Fizz', '1384', 'Buzz', 'Fizz', '1387', '1388', 'Fizz', 'Buzz', '1391', 'Fizz', '1393', '1394', 'FizzBuzz', '1396', '1397', 'Fizz', '1399', 'Buzz', 'Fizz', '1402', '1403', 'Fizz', 'Buzz', '1406', 'Fizz', '1408', '1409', 'FizzBuzz', '1411', '1412', 'Fizz', '1414', 'Buzz', 'Fizz', '1417', '1418', 'Fizz', 'Buzz', '1421', 'Fizz', '1423', '1424', 'FizzBuzz', '1426', '1427', 'Fizz', '1429', 'Buzz', 'Fizz', '1432', '1433', 'Fizz', 'Buzz', '1436', 'Fizz', '1438', '1439', 'FizzBuzz', '1441', '1442', 'Fizz', '1444', 'Buzz', 'Fizz', '1447', '1448', 'Fizz', 'Buzz', '1451', 'Fizz', '1453', '1454', 'FizzBuzz', '1456', '1457', 'Fizz', '1459', 'Buzz', 'Fizz', '1462', '1463', 'Fizz', 'Buzz', '1466', 'Fizz', '1468', '1469', 'FizzBuzz', '1471', '1472', 'Fizz', '1474', 'Buzz', 'Fizz', '1477', '1478', 'Fizz', 'Buzz', '1481', 'Fizz', '1483', '1484', 'FizzBuzz', '1486', '1487', 'Fizz', '1489', 'Buzz', 'Fizz', '1492', '1493', 'Fizz', 'Buzz', '1496', 'Fizz', '1498', '1499', 'FizzBuzz', '1501', '1502', 'Fizz', '1504', 'Buzz', 'Fizz', '1507', '1508', 'Fizz', 'Buzz', '1511', 'Fizz', '1513', '1514', 'FizzBuzz', '1516', '1517', 'Fizz', '1519', 'Buzz', 'Fizz', '1522', '1523', 'Fizz', 'Buzz', '1526', 'Fizz', '1528', '1529', 'FizzBuzz', '1531', '1532', 'Fizz', '1534', 'Buzz', 'Fizz', '1537', '1538', 'Fizz', 'Buzz', '1541', 'Fizz', '1543', '1544', 'FizzBuzz', '1546', '1547', 'Fizz', '1549', 'Buzz', 'Fizz', '1552', '1553', 'Fizz', 'Buzz', '1556', 'Fizz', '1558', '1559', 'FizzBuzz', '1561', '1562', 'Fizz', '1564', 'Buzz', 'Fizz', '1567', '1568', 'Fizz', 'Buzz', '1571', 'Fizz', '1573', '1574', 'FizzBuzz', '1576', '1577', 'Fizz', '1579', 'Buzz', 'Fizz', '1582', '1583', 'Fizz', 'Buzz', '1586', 'Fizz', '1588', '1589', 'FizzBuzz', '1591', '1592', 'Fizz', '1594', 'Buzz', 'Fizz', '1597', '1598', 'Fizz', 'Buzz', '1601', 'Fizz', '1603', '1604', 'FizzBuzz', '1606', '1607', 'Fizz', '1609', 'Buzz', 'Fizz', '1612', '1613', 'Fizz', 'Buzz', '1616', 'Fizz', '1618', '1619', 'FizzBuzz', '1621', '1622', 'Fizz', '1624', 'Buzz', 'Fizz', '1627', '1628', 'Fizz', 'Buzz', '1631', 'Fizz', '1633', '1634', 'FizzBuzz', '1636', '1637', 'Fizz', '1639', 'Buzz', 'Fizz', '1642', '1643', 'Fizz', 'Buzz', '1646', 'Fizz', '1648', '1649', 'FizzBuzz', '1651', '1652', 'Fizz', '1654', 'Buzz', 'Fizz', '1657', '1658', 'Fizz', 'Buzz', '1661', 'Fizz', '1663', '1664', 'FizzBuzz', '1666', '1667', 'Fizz', '1669', 'Buzz', 'Fizz', '1672', '1673', 'Fizz', 'Buzz', '1676', 'Fizz', '1678', '1679', 'FizzBuzz', '1681', '1682', 'Fizz', '1684', 'Buzz', 'Fizz', '1687', '1688', 'Fizz', 'Buzz', '1691', 'Fizz', '1693', '1694', 'FizzBuzz', '1696', '1697', 'Fizz', '1699', 'Buzz', 'Fizz', '1702', '1703', 'Fizz', 'Buzz', '1706', 'Fizz', '1708', '1709', 'FizzBuzz', '1711', '1712', 'Fizz', '1714', 'Buzz', 'Fizz', '1717', '1718', 'Fizz', 'Buzz', '1721', 'Fizz', '1723', '1724', 'FizzBuzz', '1726', '1727', 'Fizz', '1729', 'Buzz', 'Fizz', '1732', '1733', 'Fizz', 'Buzz', '1736', 'Fizz', '1738', '1739', 'FizzBuzz', '1741', '1742', 'Fizz', '1744', 'Buzz', 'Fizz', '1747', '1748', 'Fizz', 'Buzz', '1751', 'Fizz', '1753', '1754', 'FizzBuzz', '1756', '1757', 'Fizz', '1759', 'Buzz', 'Fizz', '1762', '1763', 'Fizz', 'Buzz', '1766', 'Fizz', '1768', '1769', 'FizzBuzz', '1771', '1772', 'Fizz', '1774', 'Buzz', 'Fizz', '1777', '1778', 'Fizz', 'Buzz', '1781', 'Fizz', '1783', '1784', 'FizzBuzz', '1786', '1787', 'Fizz', '1789', 'Buzz', 'Fizz', '1792', '1793', 'Fizz', 'Buzz', '1796', 'Fizz', '1798', '1799', 'FizzBuzz', '1801', '1802', 'Fizz', '1804', 'Buzz', 'Fizz', '1807', '1808', 'Fizz', 'Buzz', '1811', 'Fizz', '1813', '1814', 'FizzBuzz', '1816', '1817', 'Fizz', '1819', 'Buzz', 'Fizz', '1822', '1823', 'Fizz', 'Buzz', '1826', 'Fizz', '1828', '1829', 'FizzBuzz', '1831', '1832', 'Fizz', '1834', 'Buzz', 'Fizz', '1837', '1838', 'Fizz', 'Buzz', '1841', 'Fizz', '1843', '1844', 'FizzBuzz', '1846', '1847', 'Fizz', '1849', 'Buzz', 'Fizz', '1852', '1853', 'Fizz', 'Buzz', '1856', 'Fizz', '1858', '1859', 'FizzBuzz', '1861', '1862', 'Fizz', '1864', 'Buzz', 'Fizz', '1867', '1868', 'Fizz', 'Buzz', '1871', 'Fizz', '1873', '1874', 'FizzBuzz', '1876', '1877', 'Fizz', '1879', 'Buzz', 'Fizz', '1882', '1883', 'Fizz', 'Buzz', '1886', 'Fizz', '1888', '1889', 'FizzBuzz', '1891', '1892', 'Fizz', '1894', 'Buzz', 'Fizz', '1897', '1898', 'Fizz', 'Buzz', '1901', 'Fizz', '1903', '1904', 'FizzBuzz', '1906', '1907', 'Fizz', '1909', 'Buzz', 'Fizz', '1912', '1913', 'Fizz', 'Buzz', '1916', 'Fizz', '1918', '1919', 'FizzBuzz', '1921', '1922', 'Fizz', '1924', 'Buzz', 'Fizz', '1927', '1928', 'Fizz', 'Buzz', '1931', 'Fizz', '1933', '1934', 'FizzBuzz', '1936', '1937', 'Fizz', '1939', 'Buzz', 'Fizz', '1942', '1943', 'Fizz', 'Buzz', '1946', 'Fizz', '1948', '1949', 'FizzBuzz', '1951', '1952', 'Fizz', '1954', 'Buzz', 'Fizz', '1957', '1958', 'Fizz', 'Buzz', '1961', 'Fizz', '1963', '1964', 'FizzBuzz', '1966', '1967', 'Fizz', '1969', 'Buzz', 'Fizz', '1972', '1973', 'Fizz', 'Buzz', '1976', 'Fizz', '1978', '1979', 'FizzBuzz', '1981', '1982', 'Fizz', '1984', 'Buzz', 'Fizz', '1987', '1988', 'Fizz', 'Buzz', '1991', 'Fizz', '1993', '1994', 'FizzBuzz', '1996', '1997', 'Fizz', '1999', 'Buzz', 'Fizz', '2002', '2003', 'Fizz', 'Buzz', '2006', 'Fizz', '2008', '2009', 'FizzBuzz', '2011', '2012', 'Fizz', '2014', 'Buzz', 'Fizz', '2017', '2018', 'Fizz', 'Buzz', '2021', 'Fizz', '2023', '2024', 'FizzBuzz', '2026', '2027', 'Fizz', '2029', 'Buzz', 'Fizz', '2032', '2033', 'Fizz', 'Buzz', '2036', 'Fizz', '2038', '2039', 'FizzBuzz', '2041', '2042', 'Fizz', '2044', 'Buzz', 'Fizz', '2047', '2048', 'Fizz', 'Buzz', '2051', 'Fizz', '2053', '2054', 'FizzBuzz', '2056', '2057', 'Fizz', '2059', 'Buzz', 'Fizz', '2062', '2063', 'Fizz', 'Buzz', '2066', 'Fizz', '2068', '2069', 'FizzBuzz', '2071', '2072', 'Fizz', '2074', 'Buzz', 'Fizz', '2077', '2078', 'Fizz', 'Buzz', '2081', 'Fizz', '2083', '2084', 'FizzBuzz', '2086', '2087', 'Fizz', '2089', 'Buzz', 'Fizz', '2092', '2093', 'Fizz', 'Buzz', '2096', 'Fizz', '2098', '2099', 'FizzBuzz', '2101', '2102', 'Fizz', '2104', 'Buzz', 'Fizz', '2107', '2108', 'Fizz', 'Buzz', '2111', 'Fizz', '2113', '2114', 'FizzBuzz', '2116', '2117', 'Fizz', '2119', 'Buzz', 'Fizz', '2122', '2123', 'Fizz', 'Buzz', '2126', 'Fizz', '2128', '2129', 'FizzBuzz', '2131', '2132', 'Fizz', '2134', 'Buzz', 'Fizz', '2137', '2138', 'Fizz', 'Buzz', '2141', 'Fizz', '2143', '2144', 'FizzBuzz', '2146', '2147', 'Fizz', '2149', 'Buzz', 'Fizz', '2152', '2153', 'Fizz', 'Buzz', '2156', 'Fizz', '2158', '2159', 'FizzBuzz', '2161', '2162', 'Fizz', '2164', 'Buzz', 'Fizz', '2167', '2168', 'Fizz', 'Buzz', '2171', 'Fizz', '2173', '2174', 'FizzBuzz', '2176', '2177', 'Fizz', '2179', 'Buzz', 'Fizz', '2182', '2183', 'Fizz', 'Buzz', '2186', 'Fizz', '2188', '2189', 'FizzBuzz', '2191', '2192', 'Fizz', '2194', 'Buzz', 'Fizz', '2197', '2198', 'Fizz', 'Buzz', '2201', 'Fizz', '2203', '2204', 'FizzBuzz', '2206', '2207', 'Fizz', '2209', 'Buzz', 'Fizz', '2212', '2213', 'Fizz', 'Buzz', '2216', 'Fizz', '2218', '2219', 'FizzBuzz', '2221', '2222', 'Fizz', '2224', 'Buzz', 'Fizz', '2227', '2228', 'Fizz', 'Buzz', '2231', 'Fizz', '2233', '2234', 'FizzBuzz', '2236', '2237', 'Fizz', '2239', 'Buzz', 'Fizz', '2242', '2243', 'Fizz', 'Buzz', '2246', 'Fizz', '2248', '2249', 'FizzBuzz', '2251', '2252', 'Fizz', '2254', 'Buzz', 'Fizz', '2257', '2258', 'Fizz', 'Buzz', '2261', 'Fizz', '2263', '2264', 'FizzBuzz', '2266', '2267', 'Fizz', '2269', 'Buzz', 'Fizz', '2272', '2273', 'Fizz', 'Buzz', '2276', 'Fizz', '2278', '2279', 'FizzBuzz', '2281', '2282', 'Fizz', '2284', 'Buzz', 'Fizz', '2287', '2288', 'Fizz', 'Buzz', '2291', 'Fizz', '2293', '2294', 'FizzBuzz', '2296', '2297', 'Fizz', '2299', 'Buzz', 'Fizz', '2302', '2303', 'Fizz', 'Buzz', '2306', 'Fizz', '2308', '2309', 'FizzBuzz', '2311', '2312', 'Fizz', '2314', 'Buzz', 'Fizz', '2317', '2318', 'Fizz', 'Buzz', '2321', 'Fizz', '2323', '2324', 'FizzBuzz', '2326', '2327', 'Fizz', '2329', 'Buzz', 'Fizz', '2332', '2333', 'Fizz', 'Buzz', '2336', 'Fizz', '2338', '2339', 'FizzBuzz', '2341', '2342', 'Fizz', '2344', 'Buzz', 'Fizz', '2347', '2348', 'Fizz', 'Buzz', '2351', 'Fizz', '2353', '2354', 'FizzBuzz', '2356', '2357', 'Fizz', '2359', 'Buzz', 'Fizz', '2362', '2363', 'Fizz', 'Buzz', '2366', 'Fizz', '2368', '2369', 'FizzBuzz', '2371', '2372', 'Fizz', '2374', 'Buzz', 'Fizz', '2377', '2378', 'Fizz', 'Buzz', '2381', 'Fizz', '2383', '2384', 'FizzBuzz', '2386', '2387', 'Fizz', '2389', 'Buzz', 'Fizz', '2392', '2393', 'Fizz', 'Buzz', '2396', 'Fizz', '2398', '2399', 'FizzBuzz', '2401', '2402', 'Fizz', '2404', 'Buzz', 'Fizz', '2407', '2408', 'Fizz', 'Buzz', '2411', 'Fizz', '2413', '2414', 'FizzBuzz', '2416', '2417', 'Fizz', '2419', 'Buzz', 'Fizz', '2422', '2423', 'Fizz', 'Buzz', '2426', 'Fizz', '2428', '2429', 'FizzBuzz', '2431', '2432', 'Fizz', '2434', 'Buzz', 'Fizz', '2437', '2438', 'Fizz', 'Buzz', '2441', 'Fizz', '2443', '2444', 'FizzBuzz', '2446', '2447', 'Fizz', '2449', 'Buzz', 'Fizz', '2452', '2453', 'Fizz', 'Buzz', '2456', 'Fizz', '2458', '2459', 'FizzBuzz', '2461', '2462', 'Fizz', '2464', 'Buzz', 'Fizz', '2467', '2468', 'Fizz', 'Buzz', '2471', 'Fizz', '2473', '2474', 'FizzBuzz', '2476', '2477', 'Fizz', '2479', 'Buzz', 'Fizz', '2482', '2483', 'Fizz', 'Buzz', '2486', 'Fizz', '2488', '2489', 'FizzBuzz', '2491', '2492', 'Fizz', '2494', 'Buzz', 'Fizz', '2497', '2498', 'Fizz', 'Buzz', '2501', 'Fizz', '2503', '2504', 'FizzBuzz', '2506', '2507', 'Fizz', '2509', 'Buzz', 'Fizz', '2512', '2513', 'Fizz', 'Buzz', '2516', 'Fizz', '2518', '2519', 'FizzBuzz', '2521', '2522', 'Fizz', '2524', 'Buzz', 'Fizz', '2527', '2528', 'Fizz', 'Buzz', '2531', 'Fizz', '2533', '2534', 'FizzBuzz', '2536', '2537', 'Fizz', '2539', 'Buzz', 'Fizz', '2542', '2543', 'Fizz', 'Buzz', '2546', 'Fizz', '2548', '2549', 'FizzBuzz', '2551', '2552', 'Fizz', '2554', 'Buzz', 'Fizz', '2557', '2558', 'Fizz', 'Buzz', '2561', 'Fizz', '2563', '2564', 'FizzBuzz', '2566', '2567', 'Fizz', '2569', 'Buzz', 'Fizz', '2572', '2573', 'Fizz', 'Buzz', '2576', 'Fizz', '2578', '2579', 'FizzBuzz', '2581', '2582', 'Fizz', '2584', 'Buzz', 'Fizz', '2587', '2588', 'Fizz', 'Buzz', '2591', 'Fizz', '2593', '2594', 'FizzBuzz', '2596', '2597', 'Fizz', '2599', 'Buzz', 'Fizz', '2602', '2603', 'Fizz', 'Buzz', '2606', 'Fizz', '2608', '2609', 'FizzBuzz', '2611', '2612', 'Fizz', '2614', 'Buzz', 'Fizz', '2617', '2618', 'Fizz', 'Buzz', '2621', 'Fizz', '2623', '2624', 'FizzBuzz', '2626', '2627', 'Fizz', '2629', 'Buzz', 'Fizz', '2632', '2633', 'Fizz', 'Buzz', '2636', 'Fizz', '2638', '2639', 'FizzBuzz', '2641', '2642', 'Fizz', '2644', 'Buzz', 'Fizz', '2647', '2648', 'Fizz', 'Buzz', '2651', 'Fizz', '2653', '2654', 'FizzBuzz', '2656', '2657', 'Fizz', '2659', 'Buzz', 'Fizz', '2662', '2663', 'Fizz', 'Buzz', '2666', 'Fizz', '2668', '2669', 'FizzBuzz', '2671', '2672', 'Fizz', '2674', 'Buzz', 'Fizz', '2677', '2678', 'Fizz', 'Buzz', '2681', 'Fizz', '2683', '2684', 'FizzBuzz', '2686', '2687', 'Fizz', '2689', 'Buzz', 'Fizz', '2692', '2693', 'Fizz', 'Buzz', '2696', 'Fizz', '2698', '2699', 'FizzBuzz', '2701', '2702', 'Fizz', '2704', 'Buzz', 'Fizz', '2707', '2708', 'Fizz', 'Buzz', '2711', 'Fizz', '2713', '2714', 'FizzBuzz', '2716', '2717', 'Fizz', '2719', 'Buzz', 'Fizz', '2722', '2723', 'Fizz', 'Buzz', '2726', 'Fizz', '2728', '2729', 'FizzBuzz', '2731', '2732', 'Fizz', '2734', 'Buzz', 'Fizz', '2737', '2738', 'Fizz', 'Buzz', '2741', 'Fizz', '2743', '2744', 'FizzBuzz', '2746', '2747', 'Fizz', '2749', 'Buzz', 'Fizz', '2752', '2753', 'Fizz', 'Buzz', '2756', 'Fizz', '2758', '2759', 'FizzBuzz', '2761', '2762', 'Fizz', '2764', 'Buzz', 'Fizz', '2767', '2768', 'Fizz', 'Buzz', '2771', 'Fizz', '2773', '2774', 'FizzBuzz', '2776', '2777', 'Fizz', '2779', 'Buzz', 'Fizz', '2782', '2783', 'Fizz', 'Buzz', '2786', 'Fizz', '2788', '2789', 'FizzBuzz', '2791', '2792', 'Fizz', '2794', 'Buzz', 'Fizz', '2797', '2798', 'Fizz', 'Buzz', '2801', 'Fizz', '2803', '2804', 'FizzBuzz', '2806', '2807', 'Fizz', '2809', 'Buzz', 'Fizz', '2812', '2813', 'Fizz', 'Buzz', '2816', 'Fizz', '2818', '2819', 'FizzBuzz', '2821', '2822', 'Fizz', '2824', 'Buzz', 'Fizz', '2827', '2828', 'Fizz', 'Buzz', '2831', 'Fizz', '2833', '2834', 'FizzBuzz', '2836', '2837', 'Fizz', '2839', 'Buzz', 'Fizz', '2842', '2843', 'Fizz', 'Buzz', '2846', 'Fizz', '2848', '2849', 'FizzBuzz', '2851', '2852', 'Fizz', '2854', 'Buzz', 'Fizz', '2857', '2858', 'Fizz', 'Buzz', '2861', 'Fizz', '2863', '2864', 'FizzBuzz', '2866', '2867', 'Fizz', '2869', 'Buzz', 'Fizz', '2872', '2873', 'Fizz', 'Buzz', '2876', 'Fizz', '2878', '2879', 'FizzBuzz', '2881', '2882', 'Fizz', '2884', 'Buzz', 'Fizz', '2887', '2888', 'Fizz', 'Buzz', '2891', 'Fizz', '2893', '2894', 'FizzBuzz', '2896', '2897', 'Fizz', '2899', 'Buzz', 'Fizz', '2902', '2903', 'Fizz', 'Buzz', '2906', 'Fizz', '2908', '2909', 'FizzBuzz', '2911', '2912', 'Fizz', '2914', 'Buzz', 'Fizz', '2917', '2918', 'Fizz', 'Buzz', '2921', 'Fizz', '2923', '2924', 'FizzBuzz', '2926', '2927', 'Fizz', '2929', 'Buzz', 'Fizz', '2932', '2933', 'Fizz', 'Buzz', '2936', 'Fizz', '2938', '2939', 'FizzBuzz', '2941', '2942', 'Fizz', '2944', 'Buzz', 'Fizz', '2947', '2948', 'Fizz', 'Buzz', '2951', 'Fizz', '2953', '2954', 'FizzBuzz', '2956', '2957', 'Fizz', '2959', 'Buzz', 'Fizz', '2962', '2963', 'Fizz', 'Buzz', '2966', 'Fizz', '2968', '2969', 'FizzBuzz', '2971', '2972', 'Fizz', '2974', 'Buzz', 'Fizz', '2977', '2978', 'Fizz', 'Buzz', '2981', 'Fizz', '2983', '2984', 'FizzBuzz', '2986', '2987', 'Fizz', '2989', 'Buzz', 'Fizz', '2992', '2993', 'Fizz', 'Buzz', '2996', 'Fizz', '2998', '2999', 'FizzBuzz', '3001', '3002', 'Fizz', '3004', 'Buzz', 'Fizz', '3007', '3008', 'Fizz', 'Buzz', '3011', 'Fizz', '3013', '3014', 'FizzBuzz', '3016', '3017', 'Fizz', '3019', 'Buzz', 'Fizz', '3022', '3023', 'Fizz', 'Buzz', '3026', 'Fizz', '3028', '3029', 'FizzBuzz', '3031', '3032', 'Fizz', '3034', 'Buzz', 'Fizz', '3037', '3038', 'Fizz', 'Buzz', '3041', 'Fizz', '3043', '3044', 'FizzBuzz', '3046', '3047', 'Fizz', '3049', 'Buzz', 'Fizz', '3052', '3053', 'Fizz', 'Buzz', '3056', 'Fizz', '3058', '3059', 'FizzBuzz', '3061', '3062', 'Fizz', '3064', 'Buzz', 'Fizz', '3067', '3068', 'Fizz', 'Buzz', '3071', 'Fizz', '3073', '3074', 'FizzBuzz', '3076', '3077', 'Fizz', '3079', 'Buzz', 'Fizz', '3082', '3083', 'Fizz', 'Buzz', '3086', 'Fizz', '3088', '3089', 'FizzBuzz', '3091', '3092', 'Fizz', '3094', 'Buzz', 'Fizz', '3097', '3098', 'Fizz', 'Buzz', '3101', 'Fizz', '3103', '3104', 'FizzBuzz', '3106', '3107', 'Fizz', '3109', 'Buzz', 'Fizz', '3112', '3113', 'Fizz', 'Buzz', '3116', 'Fizz', '3118', '3119', 'FizzBuzz', '3121', '3122', 'Fizz', '3124', 'Buzz', 'Fizz', '3127', '3128', 'Fizz', 'Buzz', '3131', 'Fizz', '3133', '3134', 'FizzBuzz', '3136', '3137', 'Fizz', '3139', 'Buzz', 'Fizz', '3142', '3143', 'Fizz', 'Buzz', '3146', 'Fizz', '3148', '3149', 'FizzBuzz', '3151', '3152', 'Fizz', '3154', 'Buzz', 'Fizz', '3157', '3158', 'Fizz', 'Buzz', '3161', 'Fizz', '3163', '3164', 'FizzBuzz', '3166', '3167', 'Fizz', '3169', 'Buzz', 'Fizz', '3172', '3173', 'Fizz', 'Buzz', '3176', 'Fizz', '3178', '3179', 'FizzBuzz', '3181', '3182', 'Fizz', '3184', 'Buzz', 'Fizz', '3187', '3188', 'Fizz', 'Buzz', '3191', 'Fizz', '3193', '3194', 'FizzBuzz', '3196', '3197', 'Fizz', '3199', 'Buzz', 'Fizz', '3202', '3203', 'Fizz', 'Buzz', '3206', 'Fizz', '3208', '3209', 'FizzBuzz', '3211', '3212', 'Fizz', '3214', 'Buzz', 'Fizz', '3217', '3218', 'Fizz', 'Buzz', '3221', 'Fizz', '3223', '3224', 'FizzBuzz', '3226', '3227', 'Fizz', '3229', 'Buzz', 'Fizz', '3232', '3233', 'Fizz', 'Buzz', '3236', 'Fizz', '3238', '3239', 'FizzBuzz', '3241', '3242', 'Fizz', '3244', 'Buzz', 'Fizz', '3247', '3248', 'Fizz', 'Buzz', '3251', 'Fizz', '3253', '3254', 'FizzBuzz', '3256', '3257', 'Fizz', '3259', 'Buzz', 'Fizz', '3262', '3263', 'Fizz', 'Buzz', '3266', 'Fizz', '3268', '3269', 'FizzBuzz', '3271', '3272', 'Fizz', '3274', 'Buzz', 'Fizz', '3277', '3278', 'Fizz', 'Buzz', '3281', 'Fizz', '3283', '3284', 'FizzBuzz', '3286', '3287', 'Fizz', '3289', 'Buzz', 'Fizz', '3292', '3293', 'Fizz', 'Buzz', '3296', 'Fizz', '3298', '3299', 'FizzBuzz', '3301', '3302', 'Fizz', '3304', 'Buzz', 'Fizz', '3307', '3308', 'Fizz', 'Buzz', '3311', 'Fizz', '3313', '3314', 'FizzBuzz', '3316', '3317', 'Fizz', '3319', 'Buzz', 'Fizz', '3322', '3323', 'Fizz', 'Buzz', '3326', 'Fizz', '3328', '3329', 'FizzBuzz', '3331', '3332', 'Fizz', '3334', 'Buzz', 'Fizz', '3337', '3338', 'Fizz', 'Buzz', '3341', 'Fizz', '3343', '3344', 'FizzBuzz', '3346', '3347', 'Fizz', '3349', 'Buzz', 'Fizz', '3352', '3353', 'Fizz', 'Buzz', '3356', 'Fizz', '3358', '3359', 'FizzBuzz', '3361', '3362', 'Fizz', '3364', 'Buzz', 'Fizz', '3367', '3368', 'Fizz', 'Buzz', '3371', 'Fizz', '3373', '3374', 'FizzBuzz', '3376', '3377', 'Fizz', '3379', 'Buzz', 'Fizz', '3382', '3383', 'Fizz', 'Buzz', '3386', 'Fizz', '3388', '3389', 'FizzBuzz', '3391', '3392', 'Fizz', '3394', 'Buzz', 'Fizz', '3397', '3398', 'Fizz', 'Buzz', '3401', 'Fizz', '3403', '3404', 'FizzBuzz', '3406', '3407', 'Fizz', '3409', 'Buzz', 'Fizz', '3412', '3413', 'Fizz', 'Buzz', '3416', 'Fizz', '3418', '3419', 'FizzBuzz', '3421', '3422', 'Fizz', '3424', 'Buzz', 'Fizz', '3427', '3428', 'Fizz', 'Buzz', '3431', 'Fizz', '3433', '3434', 'FizzBuzz', '3436', '3437', 'Fizz', '3439', 'Buzz', 'Fizz', '3442', '3443', 'Fizz', 'Buzz', '3446', 'Fizz', '3448', '3449', 'FizzBuzz', '3451', '3452', 'Fizz', '3454', 'Buzz', 'Fizz', '3457', '3458', 'Fizz', 'Buzz', '3461', 'Fizz', '3463', '3464', 'FizzBuzz', '3466', '3467', 'Fizz', '3469', 'Buzz', 'Fizz', '3472', '3473', 'Fizz', 'Buzz', '3476', 'Fizz', '3478', '3479', 'FizzBuzz', '3481', '3482', 'Fizz', '3484', 'Buzz', 'Fizz', '3487', '3488', 'Fizz', 'Buzz', '3491', 'Fizz', '3493', '3494', 'FizzBuzz', '3496', '3497', 'Fizz', '3499', 'Buzz', 'Fizz', '3502', '3503', 'Fizz', 'Buzz', '3506', 'Fizz', '3508', '3509', 'FizzBuzz', '3511', '3512', 'Fizz', '3514', 'Buzz', 'Fizz', '3517', '3518', 'Fizz', 'Buzz', '3521', 'Fizz', '3523', '3524', 'FizzBuzz', '3526', '3527', 'Fizz', '3529', 'Buzz', 'Fizz', '3532', '3533', 'Fizz', 'Buzz', '3536', 'Fizz', '3538', '3539', 'FizzBuzz', '3541', '3542', 'Fizz', '3544', 'Buzz', 'Fizz', '3547', '3548', 'Fizz', 'Buzz', '3551', 'Fizz', '3553', '3554', 'FizzBuzz', '3556', '3557', 'Fizz', '3559', 'Buzz', 'Fizz', '3562', '3563', 'Fizz', 'Buzz', '3566', 'Fizz', '3568', '3569', 'FizzBuzz', '3571', '3572', 'Fizz', '3574', 'Buzz', 'Fizz', '3577', '3578', 'Fizz', 'Buzz', '3581', 'Fizz', '3583', '3584', 'FizzBuzz', '3586', '3587', 'Fizz', '3589', 'Buzz', 'Fizz', '3592', '3593', 'Fizz', 'Buzz', '3596', 'Fizz', '3598', '3599', 'FizzBuzz', '3601', '3602', 'Fizz', '3604', 'Buzz', 'Fizz', '3607', '3608', 'Fizz', 'Buzz', '3611', 'Fizz', '3613', '3614', 'FizzBuzz', '3616', '3617', 'Fizz', '3619', 'Buzz', 'Fizz', '3622', '3623', 'Fizz', 'Buzz', '3626', 'Fizz', '3628', '3629', 'FizzBuzz', '3631', '3632', 'Fizz', '3634', 'Buzz', 'Fizz', '3637', '3638', 'Fizz', 'Buzz', '3641', 'Fizz', '3643', '3644', 'FizzBuzz', '3646', '3647', 'Fizz', '3649', 'Buzz', 'Fizz', '3652', '3653', 'Fizz', 'Buzz', '3656', 'Fizz', '3658', '3659', 'FizzBuzz', '3661', '3662', 'Fizz', '3664', 'Buzz', 'Fizz', '3667', '3668', 'Fizz', 'Buzz', '3671', 'Fizz', '3673', '3674', 'FizzBuzz', '3676', '3677', 'Fizz', '3679', 'Buzz', 'Fizz', '3682', '3683', 'Fizz', 'Buzz', '3686', 'Fizz', '3688', '3689', 'FizzBuzz', '3691', '3692', 'Fizz', '3694', 'Buzz', 'Fizz', '3697', '3698', 'Fizz', 'Buzz', '3701', 'Fizz', '3703', '3704', 'FizzBuzz', '3706', '3707', 'Fizz', '3709', 'Buzz', 'Fizz', '3712', '3713', 'Fizz', 'Buzz', '3716', 'Fizz', '3718', '3719', 'FizzBuzz', '3721', '3722', 'Fizz', '3724', 'Buzz', 'Fizz', '3727', '3728', 'Fizz', 'Buzz', '3731', 'Fizz', '3733', '3734', 'FizzBuzz', '3736', '3737', 'Fizz', '3739', 'Buzz', 'Fizz', '3742', '3743', 'Fizz', 'Buzz', '3746', 'Fizz', '3748', '3749', 'FizzBuzz', '3751', '3752', 'Fizz', '3754', 'Buzz', 'Fizz', '3757', '3758', 'Fizz', 'Buzz', '3761', 'Fizz', '3763', '3764', 'FizzBuzz', '3766', '3767', 'Fizz', '3769', 'Buzz', 'Fizz', '3772', '3773', 'Fizz', 'Buzz', '3776', 'Fizz', '3778', '3779', 'FizzBuzz', '3781', '3782', 'Fizz', '3784', 'Buzz', 'Fizz', '3787', '3788', 'Fizz', 'Buzz', '3791', 'Fizz', '3793', '3794', 'FizzBuzz', '3796', '3797', 'Fizz', '3799', 'Buzz', 'Fizz', '3802', '3803', 'Fizz', 'Buzz', '3806', 'Fizz', '3808', '3809', 'FizzBuzz', '3811', '3812', 'Fizz', '3814', 'Buzz', 'Fizz', '3817', '3818', 'Fizz', 'Buzz', '3821', 'Fizz', '3823', '3824', 'FizzBuzz', '3826', '3827', 'Fizz', '3829', 'Buzz', 'Fizz', '3832', '3833', 'Fizz', 'Buzz', '3836', 'Fizz', '3838', '3839', 'FizzBuzz', '3841', '3842', 'Fizz', '3844', 'Buzz', 'Fizz', '3847', '3848', 'Fizz', 'Buzz', '3851', 'Fizz', '3853', '3854', 'FizzBuzz', '3856', '3857', 'Fizz', '3859', 'Buzz', 'Fizz', '3862', '3863', 'Fizz', 'Buzz', '3866', 'Fizz', '3868', '3869', 'FizzBuzz', '3871', '3872', 'Fizz', '3874', 'Buzz', 'Fizz', '3877', '3878', 'Fizz', 'Buzz', '3881', 'Fizz', '3883', '3884', 'FizzBuzz', '3886', '3887', 'Fizz', '3889', 'Buzz', 'Fizz', '3892', '3893', 'Fizz', 'Buzz', '3896', 'Fizz', '3898', '3899', 'FizzBuzz', '3901', '3902', 'Fizz', '3904', 'Buzz', 'Fizz', '3907', '3908', 'Fizz', 'Buzz', '3911', 'Fizz', '3913', '3914', 'FizzBuzz', '3916', '3917', 'Fizz', '3919', 'Buzz', 'Fizz', '3922', '3923', 'Fizz', 'Buzz', '3926', 'Fizz', '3928', '3929', 'FizzBuzz', '3931', '3932', 'Fizz', '3934', 'Buzz', 'Fizz', '3937', '3938', 'Fizz', 'Buzz', '3941', 'Fizz', '3943', '3944', 'FizzBuzz', '3946', '3947', 'Fizz', '3949', 'Buzz', 'Fizz', '3952', '3953', 'Fizz', 'Buzz', '3956', 'Fizz', '3958', '3959', 'FizzBuzz', '3961', '3962', 'Fizz', '3964', 'Buzz', 'Fizz', '3967', '3968', 'Fizz', 'Buzz', '3971', 'Fizz', '3973', '3974', 'FizzBuzz', '3976', '3977', 'Fizz', '3979', 'Buzz', 'Fizz', '3982', '3983', 'Fizz', 'Buzz', '3986', 'Fizz', '3988', '3989', 'FizzBuzz', '3991', '3992', 'Fizz', '3994', 'Buzz', 'Fizz', '3997', '3998', 'Fizz', 'Buzz']"
      },
      {
        "input": "n = 210",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz']"
      },
      {
        "input": "n = 45",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz']"
      },
      {
        "input": "n = 1010",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz', '751', '752', 'Fizz', '754', 'Buzz', 'Fizz', '757', '758', 'Fizz', 'Buzz', '761', 'Fizz', '763', '764', 'FizzBuzz', '766', '767', 'Fizz', '769', 'Buzz', 'Fizz', '772', '773', 'Fizz', 'Buzz', '776', 'Fizz', '778', '779', 'FizzBuzz', '781', '782', 'Fizz', '784', 'Buzz', 'Fizz', '787', '788', 'Fizz', 'Buzz', '791', 'Fizz', '793', '794', 'FizzBuzz', '796', '797', 'Fizz', '799', 'Buzz', 'Fizz', '802', '803', 'Fizz', 'Buzz', '806', 'Fizz', '808', '809', 'FizzBuzz', '811', '812', 'Fizz', '814', 'Buzz', 'Fizz', '817', '818', 'Fizz', 'Buzz', '821', 'Fizz', '823', '824', 'FizzBuzz', '826', '827', 'Fizz', '829', 'Buzz', 'Fizz', '832', '833', 'Fizz', 'Buzz', '836', 'Fizz', '838', '839', 'FizzBuzz', '841', '842', 'Fizz', '844', 'Buzz', 'Fizz', '847', '848', 'Fizz', 'Buzz', '851', 'Fizz', '853', '854', 'FizzBuzz', '856', '857', 'Fizz', '859', 'Buzz', 'Fizz', '862', '863', 'Fizz', 'Buzz', '866', 'Fizz', '868', '869', 'FizzBuzz', '871', '872', 'Fizz', '874', 'Buzz', 'Fizz', '877', '878', 'Fizz', 'Buzz', '881', 'Fizz', '883', '884', 'FizzBuzz', '886', '887', 'Fizz', '889', 'Buzz', 'Fizz', '892', '893', 'Fizz', 'Buzz', '896', 'Fizz', '898', '899', 'FizzBuzz', '901', '902', 'Fizz', '904', 'Buzz', 'Fizz', '907', '908', 'Fizz', 'Buzz', '911', 'Fizz', '913', '914', 'FizzBuzz', '916', '917', 'Fizz', '919', 'Buzz', 'Fizz', '922', '923', 'Fizz', 'Buzz', '926', 'Fizz', '928', '929', 'FizzBuzz', '931', '932', 'Fizz', '934', 'Buzz', 'Fizz', '937', '938', 'Fizz', 'Buzz', '941', 'Fizz', '943', '944', 'FizzBuzz', '946', '947', 'Fizz', '949', 'Buzz', 'Fizz', '952', '953', 'Fizz', 'Buzz', '956', 'Fizz', '958', '959', 'FizzBuzz', '961', '962', 'Fizz', '964', 'Buzz', 'Fizz', '967', '968', 'Fizz', 'Buzz', '971', 'Fizz', '973', '974', 'FizzBuzz', '976', '977', 'Fizz', '979', 'Buzz', 'Fizz', '982', '983', 'Fizz', 'Buzz', '986', 'Fizz', '988', '989', 'FizzBuzz', '991', '992', 'Fizz', '994', 'Buzz', 'Fizz', '997', '998', 'Fizz', 'Buzz', '1001', 'Fizz', '1003', '1004', 'FizzBuzz', '1006', '1007', 'Fizz', '1009', 'Buzz']"
      },
      {
        "input": "n = 12345",
        "output": "Execution timed out"
      },
      {
        "input": "n = 53",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53']"
      },
      {
        "input": "n = 2000",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz', '751', '752', 'Fizz', '754', 'Buzz', 'Fizz', '757', '758', 'Fizz', 'Buzz', '761', 'Fizz', '763', '764', 'FizzBuzz', '766', '767', 'Fizz', '769', 'Buzz', 'Fizz', '772', '773', 'Fizz', 'Buzz', '776', 'Fizz', '778', '779', 'FizzBuzz', '781', '782', 'Fizz', '784', 'Buzz', 'Fizz', '787', '788', 'Fizz', 'Buzz', '791', 'Fizz', '793', '794', 'FizzBuzz', '796', '797', 'Fizz', '799', 'Buzz', 'Fizz', '802', '803', 'Fizz', 'Buzz', '806', 'Fizz', '808', '809', 'FizzBuzz', '811', '812', 'Fizz', '814', 'Buzz', 'Fizz', '817', '818', 'Fizz', 'Buzz', '821', 'Fizz', '823', '824', 'FizzBuzz', '826', '827', 'Fizz', '829', 'Buzz', 'Fizz', '832', '833', 'Fizz', 'Buzz', '836', 'Fizz', '838', '839', 'FizzBuzz', '841', '842', 'Fizz', '844', 'Buzz', 'Fizz', '847', '848', 'Fizz', 'Buzz', '851', 'Fizz', '853', '854', 'FizzBuzz', '856', '857', 'Fizz', '859', 'Buzz', 'Fizz', '862', '863', 'Fizz', 'Buzz', '866', 'Fizz', '868', '869', 'FizzBuzz', '871', '872', 'Fizz', '874', 'Buzz', 'Fizz', '877', '878', 'Fizz', 'Buzz', '881', 'Fizz', '883', '884', 'FizzBuzz', '886', '887', 'Fizz', '889', 'Buzz', 'Fizz', '892', '893', 'Fizz', 'Buzz', '896', 'Fizz', '898', '899', 'FizzBuzz', '901', '902', 'Fizz', '904', 'Buzz', 'Fizz', '907', '908', 'Fizz', 'Buzz', '911', 'Fizz', '913', '914', 'FizzBuzz', '916', '917', 'Fizz', '919', 'Buzz', 'Fizz', '922', '923', 'Fizz', 'Buzz', '926', 'Fizz', '928', '929', 'FizzBuzz', '931', '932', 'Fizz', '934', 'Buzz', 'Fizz', '937', '938', 'Fizz', 'Buzz', '941', 'Fizz', '943', '944', 'FizzBuzz', '946', '947', 'Fizz', '949', 'Buzz', 'Fizz', '952', '953', 'Fizz', 'Buzz', '956', 'Fizz', '958', '959', 'FizzBuzz', '961', '962', 'Fizz', '964', 'Buzz', 'Fizz', '967', '968', 'Fizz', 'Buzz', '971', 'Fizz', '973', '974', 'FizzBuzz', '976', '977', 'Fizz', '979', 'Buzz', 'Fizz', '982', '983', 'Fizz', 'Buzz', '986', 'Fizz', '988', '989', 'FizzBuzz', '991', '992', 'Fizz', '994', 'Buzz', 'Fizz', '997', '998', 'Fizz', 'Buzz', '1001', 'Fizz', '1003', '1004', 'FizzBuzz', '1006', '1007', 'Fizz', '1009', 'Buzz', 'Fizz', '1012', '1013', 'Fizz', 'Buzz', '1016', 'Fizz', '1018', '1019', 'FizzBuzz', '1021', '1022', 'Fizz', '1024', 'Buzz', 'Fizz', '1027', '1028', 'Fizz', 'Buzz', '1031', 'Fizz', '1033', '1034', 'FizzBuzz', '1036', '1037', 'Fizz', '1039', 'Buzz', 'Fizz', '1042', '1043', 'Fizz', 'Buzz', '1046', 'Fizz', '1048', '1049', 'FizzBuzz', '1051', '1052', 'Fizz', '1054', 'Buzz', 'Fizz', '1057', '1058', 'Fizz', 'Buzz', '1061', 'Fizz', '1063', '1064', 'FizzBuzz', '1066', '1067', 'Fizz', '1069', 'Buzz', 'Fizz', '1072', '1073', 'Fizz', 'Buzz', '1076', 'Fizz', '1078', '1079', 'FizzBuzz', '1081', '1082', 'Fizz', '1084', 'Buzz', 'Fizz', '1087', '1088', 'Fizz', 'Buzz', '1091', 'Fizz', '1093', '1094', 'FizzBuzz', '1096', '1097', 'Fizz', '1099', 'Buzz', 'Fizz', '1102', '1103', 'Fizz', 'Buzz', '1106', 'Fizz', '1108', '1109', 'FizzBuzz', '1111', '1112', 'Fizz', '1114', 'Buzz', 'Fizz', '1117', '1118', 'Fizz', 'Buzz', '1121', 'Fizz', '1123', '1124', 'FizzBuzz', '1126', '1127', 'Fizz', '1129', 'Buzz', 'Fizz', '1132', '1133', 'Fizz', 'Buzz', '1136', 'Fizz', '1138', '1139', 'FizzBuzz', '1141', '1142', 'Fizz', '1144', 'Buzz', 'Fizz', '1147', '1148', 'Fizz', 'Buzz', '1151', 'Fizz', '1153', '1154', 'FizzBuzz', '1156', '1157', 'Fizz', '1159', 'Buzz', 'Fizz', '1162', '1163', 'Fizz', 'Buzz', '1166', 'Fizz', '1168', '1169', 'FizzBuzz', '1171', '1172', 'Fizz', '1174', 'Buzz', 'Fizz', '1177', '1178', 'Fizz', 'Buzz', '1181', 'Fizz', '1183', '1184', 'FizzBuzz', '1186', '1187', 'Fizz', '1189', 'Buzz', 'Fizz', '1192', '1193', 'Fizz', 'Buzz', '1196', 'Fizz', '1198', '1199', 'FizzBuzz', '1201', '1202', 'Fizz', '1204', 'Buzz', 'Fizz', '1207', '1208', 'Fizz', 'Buzz', '1211', 'Fizz', '1213', '1214', 'FizzBuzz', '1216', '1217', 'Fizz', '1219', 'Buzz', 'Fizz', '1222', '1223', 'Fizz', 'Buzz', '1226', 'Fizz', '1228', '1229', 'FizzBuzz', '1231', '1232', 'Fizz', '1234', 'Buzz', 'Fizz', '1237', '1238', 'Fizz', 'Buzz', '1241', 'Fizz', '1243', '1244', 'FizzBuzz', '1246', '1247', 'Fizz', '1249', 'Buzz', 'Fizz', '1252', '1253', 'Fizz', 'Buzz', '1256', 'Fizz', '1258', '1259', 'FizzBuzz', '1261', '1262', 'Fizz', '1264', 'Buzz', 'Fizz', '1267', '1268', 'Fizz', 'Buzz', '1271', 'Fizz', '1273', '1274', 'FizzBuzz', '1276', '1277', 'Fizz', '1279', 'Buzz', 'Fizz', '1282', '1283', 'Fizz', 'Buzz', '1286', 'Fizz', '1288', '1289', 'FizzBuzz', '1291', '1292', 'Fizz', '1294', 'Buzz', 'Fizz', '1297', '1298', 'Fizz', 'Buzz', '1301', 'Fizz', '1303', '1304', 'FizzBuzz', '1306', '1307', 'Fizz', '1309', 'Buzz', 'Fizz', '1312', '1313', 'Fizz', 'Buzz', '1316', 'Fizz', '1318', '1319', 'FizzBuzz', '1321', '1322', 'Fizz', '1324', 'Buzz', 'Fizz', '1327', '1328', 'Fizz', 'Buzz', '1331', 'Fizz', '1333', '1334', 'FizzBuzz', '1336', '1337', 'Fizz', '1339', 'Buzz', 'Fizz', '1342', '1343', 'Fizz', 'Buzz', '1346', 'Fizz', '1348', '1349', 'FizzBuzz', '1351', '1352', 'Fizz', '1354', 'Buzz', 'Fizz', '1357', '1358', 'Fizz', 'Buzz', '1361', 'Fizz', '1363', '1364', 'FizzBuzz', '1366', '1367', 'Fizz', '1369', 'Buzz', 'Fizz', '1372', '1373', 'Fizz', 'Buzz', '1376', 'Fizz', '1378', '1379', 'FizzBuzz', '1381', '1382', 'Fizz', '1384', 'Buzz', 'Fizz', '1387', '1388', 'Fizz', 'Buzz', '1391', 'Fizz', '1393', '1394', 'FizzBuzz', '1396', '1397', 'Fizz', '1399', 'Buzz', 'Fizz', '1402', '1403', 'Fizz', 'Buzz', '1406', 'Fizz', '1408', '1409', 'FizzBuzz', '1411', '1412', 'Fizz', '1414', 'Buzz', 'Fizz', '1417', '1418', 'Fizz', 'Buzz', '1421', 'Fizz', '1423', '1424', 'FizzBuzz', '1426', '1427', 'Fizz', '1429', 'Buzz', 'Fizz', '1432', '1433', 'Fizz', 'Buzz', '1436', 'Fizz', '1438', '1439', 'FizzBuzz', '1441', '1442', 'Fizz', '1444', 'Buzz', 'Fizz', '1447', '1448', 'Fizz', 'Buzz', '1451', 'Fizz', '1453', '1454', 'FizzBuzz', '1456', '1457', 'Fizz', '1459', 'Buzz', 'Fizz', '1462', '1463', 'Fizz', 'Buzz', '1466', 'Fizz', '1468', '1469', 'FizzBuzz', '1471', '1472', 'Fizz', '1474', 'Buzz', 'Fizz', '1477', '1478', 'Fizz', 'Buzz', '1481', 'Fizz', '1483', '1484', 'FizzBuzz', '1486', '1487', 'Fizz', '1489', 'Buzz', 'Fizz', '1492', '1493', 'Fizz', 'Buzz', '1496', 'Fizz', '1498', '1499', 'FizzBuzz', '1501', '1502', 'Fizz', '1504', 'Buzz', 'Fizz', '1507', '1508', 'Fizz', 'Buzz', '1511', 'Fizz', '1513', '1514', 'FizzBuzz', '1516', '1517', 'Fizz', '1519', 'Buzz', 'Fizz', '1522', '1523', 'Fizz', 'Buzz', '1526', 'Fizz', '1528', '1529', 'FizzBuzz', '1531', '1532', 'Fizz', '1534', 'Buzz', 'Fizz', '1537', '1538', 'Fizz', 'Buzz', '1541', 'Fizz', '1543', '1544', 'FizzBuzz', '1546', '1547', 'Fizz', '1549', 'Buzz', 'Fizz', '1552', '1553', 'Fizz', 'Buzz', '1556', 'Fizz', '1558', '1559', 'FizzBuzz', '1561', '1562', 'Fizz', '1564', 'Buzz', 'Fizz', '1567', '1568', 'Fizz', 'Buzz', '1571', 'Fizz', '1573', '1574', 'FizzBuzz', '1576', '1577', 'Fizz', '1579', 'Buzz', 'Fizz', '1582', '1583', 'Fizz', 'Buzz', '1586', 'Fizz', '1588', '1589', 'FizzBuzz', '1591', '1592', 'Fizz', '1594', 'Buzz', 'Fizz', '1597', '1598', 'Fizz', 'Buzz', '1601', 'Fizz', '1603', '1604', 'FizzBuzz', '1606', '1607', 'Fizz', '1609', 'Buzz', 'Fizz', '1612', '1613', 'Fizz', 'Buzz', '1616', 'Fizz', '1618', '1619', 'FizzBuzz', '1621', '1622', 'Fizz', '1624', 'Buzz', 'Fizz', '1627', '1628', 'Fizz', 'Buzz', '1631', 'Fizz', '1633', '1634', 'FizzBuzz', '1636', '1637', 'Fizz', '1639', 'Buzz', 'Fizz', '1642', '1643', 'Fizz', 'Buzz', '1646', 'Fizz', '1648', '1649', 'FizzBuzz', '1651', '1652', 'Fizz', '1654', 'Buzz', 'Fizz', '1657', '1658', 'Fizz', 'Buzz', '1661', 'Fizz', '1663', '1664', 'FizzBuzz', '1666', '1667', 'Fizz', '1669', 'Buzz', 'Fizz', '1672', '1673', 'Fizz', 'Buzz', '1676', 'Fizz', '1678', '1679', 'FizzBuzz', '1681', '1682', 'Fizz', '1684', 'Buzz', 'Fizz', '1687', '1688', 'Fizz', 'Buzz', '1691', 'Fizz', '1693', '1694', 'FizzBuzz', '1696', '1697', 'Fizz', '1699', 'Buzz', 'Fizz', '1702', '1703', 'Fizz', 'Buzz', '1706', 'Fizz', '1708', '1709', 'FizzBuzz', '1711', '1712', 'Fizz', '1714', 'Buzz', 'Fizz', '1717', '1718', 'Fizz', 'Buzz', '1721', 'Fizz', '1723', '1724', 'FizzBuzz', '1726', '1727', 'Fizz', '1729', 'Buzz', 'Fizz', '1732', '1733', 'Fizz', 'Buzz', '1736', 'Fizz', '1738', '1739', 'FizzBuzz', '1741', '1742', 'Fizz', '1744', 'Buzz', 'Fizz', '1747', '1748', 'Fizz', 'Buzz', '1751', 'Fizz', '1753', '1754', 'FizzBuzz', '1756', '1757', 'Fizz', '1759', 'Buzz', 'Fizz', '1762', '1763', 'Fizz', 'Buzz', '1766', 'Fizz', '1768', '1769', 'FizzBuzz', '1771', '1772', 'Fizz', '1774', 'Buzz', 'Fizz', '1777', '1778', 'Fizz', 'Buzz', '1781', 'Fizz', '1783', '1784', 'FizzBuzz', '1786', '1787', 'Fizz', '1789', 'Buzz', 'Fizz', '1792', '1793', 'Fizz', 'Buzz', '1796', 'Fizz', '1798', '1799', 'FizzBuzz', '1801', '1802', 'Fizz', '1804', 'Buzz', 'Fizz', '1807', '1808', 'Fizz', 'Buzz', '1811', 'Fizz', '1813', '1814', 'FizzBuzz', '1816', '1817', 'Fizz', '1819', 'Buzz', 'Fizz', '1822', '1823', 'Fizz', 'Buzz', '1826', 'Fizz', '1828', '1829', 'FizzBuzz', '1831', '1832', 'Fizz', '1834', 'Buzz', 'Fizz', '1837', '1838', 'Fizz', 'Buzz', '1841', 'Fizz', '1843', '1844', 'FizzBuzz', '1846', '1847', 'Fizz', '1849', 'Buzz', 'Fizz', '1852', '1853', 'Fizz', 'Buzz', '1856', 'Fizz', '1858', '1859', 'FizzBuzz', '1861', '1862', 'Fizz', '1864', 'Buzz', 'Fizz', '1867', '1868', 'Fizz', 'Buzz', '1871', 'Fizz', '1873', '1874', 'FizzBuzz', '1876', '1877', 'Fizz', '1879', 'Buzz', 'Fizz', '1882', '1883', 'Fizz', 'Buzz', '1886', 'Fizz', '1888', '1889', 'FizzBuzz', '1891', '1892', 'Fizz', '1894', 'Buzz', 'Fizz', '1897', '1898', 'Fizz', 'Buzz', '1901', 'Fizz', '1903', '1904', 'FizzBuzz', '1906', '1907', 'Fizz', '1909', 'Buzz', 'Fizz', '1912', '1913', 'Fizz', 'Buzz', '1916', 'Fizz', '1918', '1919', 'FizzBuzz', '1921', '1922', 'Fizz', '1924', 'Buzz', 'Fizz', '1927', '1928', 'Fizz', 'Buzz', '1931', 'Fizz', '1933', '1934', 'FizzBuzz', '1936', '1937', 'Fizz', '1939', 'Buzz', 'Fizz', '1942', '1943', 'Fizz', 'Buzz', '1946', 'Fizz', '1948', '1949', 'FizzBuzz', '1951', '1952', 'Fizz', '1954', 'Buzz', 'Fizz', '1957', '1958', 'Fizz', 'Buzz', '1961', 'Fizz', '1963', '1964', 'FizzBuzz', '1966', '1967', 'Fizz', '1969', 'Buzz', 'Fizz', '1972', '1973', 'Fizz', 'Buzz', '1976', 'Fizz', '1978', '1979', 'FizzBuzz', '1981', '1982', 'Fizz', '1984', 'Buzz', 'Fizz', '1987', '1988', 'Fizz', 'Buzz', '1991', 'Fizz', '1993', '1994', 'FizzBuzz', '1996', '1997', 'Fizz', '1999', 'Buzz']"
      },
      {
        "input": "n = 1000",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz', '751', '752', 'Fizz', '754', 'Buzz', 'Fizz', '757', '758', 'Fizz', 'Buzz', '761', 'Fizz', '763', '764', 'FizzBuzz', '766', '767', 'Fizz', '769', 'Buzz', 'Fizz', '772', '773', 'Fizz', 'Buzz', '776', 'Fizz', '778', '779', 'FizzBuzz', '781', '782', 'Fizz', '784', 'Buzz', 'Fizz', '787', '788', 'Fizz', 'Buzz', '791', 'Fizz', '793', '794', 'FizzBuzz', '796', '797', 'Fizz', '799', 'Buzz', 'Fizz', '802', '803', 'Fizz', 'Buzz', '806', 'Fizz', '808', '809', 'FizzBuzz', '811', '812', 'Fizz', '814', 'Buzz', 'Fizz', '817', '818', 'Fizz', 'Buzz', '821', 'Fizz', '823', '824', 'FizzBuzz', '826', '827', 'Fizz', '829', 'Buzz', 'Fizz', '832', '833', 'Fizz', 'Buzz', '836', 'Fizz', '838', '839', 'FizzBuzz', '841', '842', 'Fizz', '844', 'Buzz', 'Fizz', '847', '848', 'Fizz', 'Buzz', '851', 'Fizz', '853', '854', 'FizzBuzz', '856', '857', 'Fizz', '859', 'Buzz', 'Fizz', '862', '863', 'Fizz', 'Buzz', '866', 'Fizz', '868', '869', 'FizzBuzz', '871', '872', 'Fizz', '874', 'Buzz', 'Fizz', '877', '878', 'Fizz', 'Buzz', '881', 'Fizz', '883', '884', 'FizzBuzz', '886', '887', 'Fizz', '889', 'Buzz', 'Fizz', '892', '893', 'Fizz', 'Buzz', '896', 'Fizz', '898', '899', 'FizzBuzz', '901', '902', 'Fizz', '904', 'Buzz', 'Fizz', '907', '908', 'Fizz', 'Buzz', '911', 'Fizz', '913', '914', 'FizzBuzz', '916', '917', 'Fizz', '919', 'Buzz', 'Fizz', '922', '923', 'Fizz', 'Buzz', '926', 'Fizz', '928', '929', 'FizzBuzz', '931', '932', 'Fizz', '934', 'Buzz', 'Fizz', '937', '938', 'Fizz', 'Buzz', '941', 'Fizz', '943', '944', 'FizzBuzz', '946', '947', 'Fizz', '949', 'Buzz', 'Fizz', '952', '953', 'Fizz', 'Buzz', '956', 'Fizz', '958', '959', 'FizzBuzz', '961', '962', 'Fizz', '964', 'Buzz', 'Fizz', '967', '968', 'Fizz', 'Buzz', '971', 'Fizz', '973', '974', 'FizzBuzz', '976', '977', 'Fizz', '979', 'Buzz', 'Fizz', '982', '983', 'Fizz', 'Buzz', '986', 'Fizz', '988', '989', 'FizzBuzz', '991', '992', 'Fizz', '994', 'Buzz', 'Fizz', '997', '998', 'Fizz', 'Buzz']"
      },
      {
        "input": "n = 3333",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz', '751', '752', 'Fizz', '754', 'Buzz', 'Fizz', '757', '758', 'Fizz', 'Buzz', '761', 'Fizz', '763', '764', 'FizzBuzz', '766', '767', 'Fizz', '769', 'Buzz', 'Fizz', '772', '773', 'Fizz', 'Buzz', '776', 'Fizz', '778', '779', 'FizzBuzz', '781', '782', 'Fizz', '784', 'Buzz', 'Fizz', '787', '788', 'Fizz', 'Buzz', '791', 'Fizz', '793', '794', 'FizzBuzz', '796', '797', 'Fizz', '799', 'Buzz', 'Fizz', '802', '803', 'Fizz', 'Buzz', '806', 'Fizz', '808', '809', 'FizzBuzz', '811', '812', 'Fizz', '814', 'Buzz', 'Fizz', '817', '818', 'Fizz', 'Buzz', '821', 'Fizz', '823', '824', 'FizzBuzz', '826', '827', 'Fizz', '829', 'Buzz', 'Fizz', '832', '833', 'Fizz', 'Buzz', '836', 'Fizz', '838', '839', 'FizzBuzz', '841', '842', 'Fizz', '844', 'Buzz', 'Fizz', '847', '848', 'Fizz', 'Buzz', '851', 'Fizz', '853', '854', 'FizzBuzz', '856', '857', 'Fizz', '859', 'Buzz', 'Fizz', '862', '863', 'Fizz', 'Buzz', '866', 'Fizz', '868', '869', 'FizzBuzz', '871', '872', 'Fizz', '874', 'Buzz', 'Fizz', '877', '878', 'Fizz', 'Buzz', '881', 'Fizz', '883', '884', 'FizzBuzz', '886', '887', 'Fizz', '889', 'Buzz', 'Fizz', '892', '893', 'Fizz', 'Buzz', '896', 'Fizz', '898', '899', 'FizzBuzz', '901', '902', 'Fizz', '904', 'Buzz', 'Fizz', '907', '908', 'Fizz', 'Buzz', '911', 'Fizz', '913', '914', 'FizzBuzz', '916', '917', 'Fizz', '919', 'Buzz', 'Fizz', '922', '923', 'Fizz', 'Buzz', '926', 'Fizz', '928', '929', 'FizzBuzz', '931', '932', 'Fizz', '934', 'Buzz', 'Fizz', '937', '938', 'Fizz', 'Buzz', '941', 'Fizz', '943', '944', 'FizzBuzz', '946', '947', 'Fizz', '949', 'Buzz', 'Fizz', '952', '953', 'Fizz', 'Buzz', '956', 'Fizz', '958', '959', 'FizzBuzz', '961', '962', 'Fizz', '964', 'Buzz', 'Fizz', '967', '968', 'Fizz', 'Buzz', '971', 'Fizz', '973', '974', 'FizzBuzz', '976', '977', 'Fizz', '979', 'Buzz', 'Fizz', '982', '983', 'Fizz', 'Buzz', '986', 'Fizz', '988', '989', 'FizzBuzz', '991', '992', 'Fizz', '994', 'Buzz', 'Fizz', '997', '998', 'Fizz', 'Buzz', '1001', 'Fizz', '1003', '1004', 'FizzBuzz', '1006', '1007', 'Fizz', '1009', 'Buzz', 'Fizz', '1012', '1013', 'Fizz', 'Buzz', '1016', 'Fizz', '1018', '1019', 'FizzBuzz', '1021', '1022', 'Fizz', '1024', 'Buzz', 'Fizz', '1027', '1028', 'Fizz', 'Buzz', '1031', 'Fizz', '1033', '1034', 'FizzBuzz', '1036', '1037', 'Fizz', '1039', 'Buzz', 'Fizz', '1042', '1043', 'Fizz', 'Buzz', '1046', 'Fizz', '1048', '1049', 'FizzBuzz', '1051', '1052', 'Fizz', '1054', 'Buzz', 'Fizz', '1057', '1058', 'Fizz', 'Buzz', '1061', 'Fizz', '1063', '1064', 'FizzBuzz', '1066', '1067', 'Fizz', '1069', 'Buzz', 'Fizz', '1072', '1073', 'Fizz', 'Buzz', '1076', 'Fizz', '1078', '1079', 'FizzBuzz', '1081', '1082', 'Fizz', '1084', 'Buzz', 'Fizz', '1087', '1088', 'Fizz', 'Buzz', '1091', 'Fizz', '1093', '1094', 'FizzBuzz', '1096', '1097', 'Fizz', '1099', 'Buzz', 'Fizz', '1102', '1103', 'Fizz', 'Buzz', '1106', 'Fizz', '1108', '1109', 'FizzBuzz', '1111', '1112', 'Fizz', '1114', 'Buzz', 'Fizz', '1117', '1118', 'Fizz', 'Buzz', '1121', 'Fizz', '1123', '1124', 'FizzBuzz', '1126', '1127', 'Fizz', '1129', 'Buzz', 'Fizz', '1132', '1133', 'Fizz', 'Buzz', '1136', 'Fizz', '1138', '1139', 'FizzBuzz', '1141', '1142', 'Fizz', '1144', 'Buzz', 'Fizz', '1147', '1148', 'Fizz', 'Buzz', '1151', 'Fizz', '1153', '1154', 'FizzBuzz', '1156', '1157', 'Fizz', '1159', 'Buzz', 'Fizz', '1162', '1163', 'Fizz', 'Buzz', '1166', 'Fizz', '1168', '1169', 'FizzBuzz', '1171', '1172', 'Fizz', '1174', 'Buzz', 'Fizz', '1177', '1178', 'Fizz', 'Buzz', '1181', 'Fizz', '1183', '1184', 'FizzBuzz', '1186', '1187', 'Fizz', '1189', 'Buzz', 'Fizz', '1192', '1193', 'Fizz', 'Buzz', '1196', 'Fizz', '1198', '1199', 'FizzBuzz', '1201', '1202', 'Fizz', '1204', 'Buzz', 'Fizz', '1207', '1208', 'Fizz', 'Buzz', '1211', 'Fizz', '1213', '1214', 'FizzBuzz', '1216', '1217', 'Fizz', '1219', 'Buzz', 'Fizz', '1222', '1223', 'Fizz', 'Buzz', '1226', 'Fizz', '1228', '1229', 'FizzBuzz', '1231', '1232', 'Fizz', '1234', 'Buzz', 'Fizz', '1237', '1238', 'Fizz', 'Buzz', '1241', 'Fizz', '1243', '1244', 'FizzBuzz', '1246', '1247', 'Fizz', '1249', 'Buzz', 'Fizz', '1252', '1253', 'Fizz', 'Buzz', '1256', 'Fizz', '1258', '1259', 'FizzBuzz', '1261', '1262', 'Fizz', '1264', 'Buzz', 'Fizz', '1267', '1268', 'Fizz', 'Buzz', '1271', 'Fizz', '1273', '1274', 'FizzBuzz', '1276', '1277', 'Fizz', '1279', 'Buzz', 'Fizz', '1282', '1283', 'Fizz', 'Buzz', '1286', 'Fizz', '1288', '1289', 'FizzBuzz', '1291', '1292', 'Fizz', '1294', 'Buzz', 'Fizz', '1297', '1298', 'Fizz', 'Buzz', '1301', 'Fizz', '1303', '1304', 'FizzBuzz', '1306', '1307', 'Fizz', '1309', 'Buzz', 'Fizz', '1312', '1313', 'Fizz', 'Buzz', '1316', 'Fizz', '1318', '1319', 'FizzBuzz', '1321', '1322', 'Fizz', '1324', 'Buzz', 'Fizz', '1327', '1328', 'Fizz', 'Buzz', '1331', 'Fizz', '1333', '1334', 'FizzBuzz', '1336', '1337', 'Fizz', '1339', 'Buzz', 'Fizz', '1342', '1343', 'Fizz', 'Buzz', '1346', 'Fizz', '1348', '1349', 'FizzBuzz', '1351', '1352', 'Fizz', '1354', 'Buzz', 'Fizz', '1357', '1358', 'Fizz', 'Buzz', '1361', 'Fizz', '1363', '1364', 'FizzBuzz', '1366', '1367', 'Fizz', '1369', 'Buzz', 'Fizz', '1372', '1373', 'Fizz', 'Buzz', '1376', 'Fizz', '1378', '1379', 'FizzBuzz', '1381', '1382', 'Fizz', '1384', 'Buzz', 'Fizz', '1387', '1388', 'Fizz', 'Buzz', '1391', 'Fizz', '1393', '1394', 'FizzBuzz', '1396', '1397', 'Fizz', '1399', 'Buzz', 'Fizz', '1402', '1403', 'Fizz', 'Buzz', '1406', 'Fizz', '1408', '1409', 'FizzBuzz', '1411', '1412', 'Fizz', '1414', 'Buzz', 'Fizz', '1417', '1418', 'Fizz', 'Buzz', '1421', 'Fizz', '1423', '1424', 'FizzBuzz', '1426', '1427', 'Fizz', '1429', 'Buzz', 'Fizz', '1432', '1433', 'Fizz', 'Buzz', '1436', 'Fizz', '1438', '1439', 'FizzBuzz', '1441', '1442', 'Fizz', '1444', 'Buzz', 'Fizz', '1447', '1448', 'Fizz', 'Buzz', '1451', 'Fizz', '1453', '1454', 'FizzBuzz', '1456', '1457', 'Fizz', '1459', 'Buzz', 'Fizz', '1462', '1463', 'Fizz', 'Buzz', '1466', 'Fizz', '1468', '1469', 'FizzBuzz', '1471', '1472', 'Fizz', '1474', 'Buzz', 'Fizz', '1477', '1478', 'Fizz', 'Buzz', '1481', 'Fizz', '1483', '1484', 'FizzBuzz', '1486', '1487', 'Fizz', '1489', 'Buzz', 'Fizz', '1492', '1493', 'Fizz', 'Buzz', '1496', 'Fizz', '1498', '1499', 'FizzBuzz', '1501', '1502', 'Fizz', '1504', 'Buzz', 'Fizz', '1507', '1508', 'Fizz', 'Buzz', '1511', 'Fizz', '1513', '1514', 'FizzBuzz', '1516', '1517', 'Fizz', '1519', 'Buzz', 'Fizz', '1522', '1523', 'Fizz', 'Buzz', '1526', 'Fizz', '1528', '1529', 'FizzBuzz', '1531', '1532', 'Fizz', '1534', 'Buzz', 'Fizz', '1537', '1538', 'Fizz', 'Buzz', '1541', 'Fizz', '1543', '1544', 'FizzBuzz', '1546', '1547', 'Fizz', '1549', 'Buzz', 'Fizz', '1552', '1553', 'Fizz', 'Buzz', '1556', 'Fizz', '1558', '1559', 'FizzBuzz', '1561', '1562', 'Fizz', '1564', 'Buzz', 'Fizz', '1567', '1568', 'Fizz', 'Buzz', '1571', 'Fizz', '1573', '1574', 'FizzBuzz', '1576', '1577', 'Fizz', '1579', 'Buzz', 'Fizz', '1582', '1583', 'Fizz', 'Buzz', '1586', 'Fizz', '1588', '1589', 'FizzBuzz', '1591', '1592', 'Fizz', '1594', 'Buzz', 'Fizz', '1597', '1598', 'Fizz', 'Buzz', '1601', 'Fizz', '1603', '1604', 'FizzBuzz', '1606', '1607', 'Fizz', '1609', 'Buzz', 'Fizz', '1612', '1613', 'Fizz', 'Buzz', '1616', 'Fizz', '1618', '1619', 'FizzBuzz', '1621', '1622', 'Fizz', '1624', 'Buzz', 'Fizz', '1627', '1628', 'Fizz', 'Buzz', '1631', 'Fizz', '1633', '1634', 'FizzBuzz', '1636', '1637', 'Fizz', '1639', 'Buzz', 'Fizz', '1642', '1643', 'Fizz', 'Buzz', '1646', 'Fizz', '1648', '1649', 'FizzBuzz', '1651', '1652', 'Fizz', '1654', 'Buzz', 'Fizz', '1657', '1658', 'Fizz', 'Buzz', '1661', 'Fizz', '1663', '1664', 'FizzBuzz', '1666', '1667', 'Fizz', '1669', 'Buzz', 'Fizz', '1672', '1673', 'Fizz', 'Buzz', '1676', 'Fizz', '1678', '1679', 'FizzBuzz', '1681', '1682', 'Fizz', '1684', 'Buzz', 'Fizz', '1687', '1688', 'Fizz', 'Buzz', '1691', 'Fizz', '1693', '1694', 'FizzBuzz', '1696', '1697', 'Fizz', '1699', 'Buzz', 'Fizz', '1702', '1703', 'Fizz', 'Buzz', '1706', 'Fizz', '1708', '1709', 'FizzBuzz', '1711', '1712', 'Fizz', '1714', 'Buzz', 'Fizz', '1717', '1718', 'Fizz', 'Buzz', '1721', 'Fizz', '1723', '1724', 'FizzBuzz', '1726', '1727', 'Fizz', '1729', 'Buzz', 'Fizz', '1732', '1733', 'Fizz', 'Buzz', '1736', 'Fizz', '1738', '1739', 'FizzBuzz', '1741', '1742', 'Fizz', '1744', 'Buzz', 'Fizz', '1747', '1748', 'Fizz', 'Buzz', '1751', 'Fizz', '1753', '1754', 'FizzBuzz', '1756', '1757', 'Fizz', '1759', 'Buzz', 'Fizz', '1762', '1763', 'Fizz', 'Buzz', '1766', 'Fizz', '1768', '1769', 'FizzBuzz', '1771', '1772', 'Fizz', '1774', 'Buzz', 'Fizz', '1777', '1778', 'Fizz', 'Buzz', '1781', 'Fizz', '1783', '1784', 'FizzBuzz', '1786', '1787', 'Fizz', '1789', 'Buzz', 'Fizz', '1792', '1793', 'Fizz', 'Buzz', '1796', 'Fizz', '1798', '1799', 'FizzBuzz', '1801', '1802', 'Fizz', '1804', 'Buzz', 'Fizz', '1807', '1808', 'Fizz', 'Buzz', '1811', 'Fizz', '1813', '1814', 'FizzBuzz', '1816', '1817', 'Fizz', '1819', 'Buzz', 'Fizz', '1822', '1823', 'Fizz', 'Buzz', '1826', 'Fizz', '1828', '1829', 'FizzBuzz', '1831', '1832', 'Fizz', '1834', 'Buzz', 'Fizz', '1837', '1838', 'Fizz', 'Buzz', '1841', 'Fizz', '1843', '1844', 'FizzBuzz', '1846', '1847', 'Fizz', '1849', 'Buzz', 'Fizz', '1852', '1853', 'Fizz', 'Buzz', '1856', 'Fizz', '1858', '1859', 'FizzBuzz', '1861', '1862', 'Fizz', '1864', 'Buzz', 'Fizz', '1867', '1868', 'Fizz', 'Buzz', '1871', 'Fizz', '1873', '1874', 'FizzBuzz', '1876', '1877', 'Fizz', '1879', 'Buzz', 'Fizz', '1882', '1883', 'Fizz', 'Buzz', '1886', 'Fizz', '1888', '1889', 'FizzBuzz', '1891', '1892', 'Fizz', '1894', 'Buzz', 'Fizz', '1897', '1898', 'Fizz', 'Buzz', '1901', 'Fizz', '1903', '1904', 'FizzBuzz', '1906', '1907', 'Fizz', '1909', 'Buzz', 'Fizz', '1912', '1913', 'Fizz', 'Buzz', '1916', 'Fizz', '1918', '1919', 'FizzBuzz', '1921', '1922', 'Fizz', '1924', 'Buzz', 'Fizz', '1927', '1928', 'Fizz', 'Buzz', '1931', 'Fizz', '1933', '1934', 'FizzBuzz', '1936', '1937', 'Fizz', '1939', 'Buzz', 'Fizz', '1942', '1943', 'Fizz', 'Buzz', '1946', 'Fizz', '1948', '1949', 'FizzBuzz', '1951', '1952', 'Fizz', '1954', 'Buzz', 'Fizz', '1957', '1958', 'Fizz', 'Buzz', '1961', 'Fizz', '1963', '1964', 'FizzBuzz', '1966', '1967', 'Fizz', '1969', 'Buzz', 'Fizz', '1972', '1973', 'Fizz', 'Buzz', '1976', 'Fizz', '1978', '1979', 'FizzBuzz', '1981', '1982', 'Fizz', '1984', 'Buzz', 'Fizz', '1987', '1988', 'Fizz', 'Buzz', '1991', 'Fizz', '1993', '1994', 'FizzBuzz', '1996', '1997', 'Fizz', '1999', 'Buzz', 'Fizz', '2002', '2003', 'Fizz', 'Buzz', '2006', 'Fizz', '2008', '2009', 'FizzBuzz', '2011', '2012', 'Fizz', '2014', 'Buzz', 'Fizz', '2017', '2018', 'Fizz', 'Buzz', '2021', 'Fizz', '2023', '2024', 'FizzBuzz', '2026', '2027', 'Fizz', '2029', 'Buzz', 'Fizz', '2032', '2033', 'Fizz', 'Buzz', '2036', 'Fizz', '2038', '2039', 'FizzBuzz', '2041', '2042', 'Fizz', '2044', 'Buzz', 'Fizz', '2047', '2048', 'Fizz', 'Buzz', '2051', 'Fizz', '2053', '2054', 'FizzBuzz', '2056', '2057', 'Fizz', '2059', 'Buzz', 'Fizz', '2062', '2063', 'Fizz', 'Buzz', '2066', 'Fizz', '2068', '2069', 'FizzBuzz', '2071', '2072', 'Fizz', '2074', 'Buzz', 'Fizz', '2077', '2078', 'Fizz', 'Buzz', '2081', 'Fizz', '2083', '2084', 'FizzBuzz', '2086', '2087', 'Fizz', '2089', 'Buzz', 'Fizz', '2092', '2093', 'Fizz', 'Buzz', '2096', 'Fizz', '2098', '2099', 'FizzBuzz', '2101', '2102', 'Fizz', '2104', 'Buzz', 'Fizz', '2107', '2108', 'Fizz', 'Buzz', '2111', 'Fizz', '2113', '2114', 'FizzBuzz', '2116', '2117', 'Fizz', '2119', 'Buzz', 'Fizz', '2122', '2123', 'Fizz', 'Buzz', '2126', 'Fizz', '2128', '2129', 'FizzBuzz', '2131', '2132', 'Fizz', '2134', 'Buzz', 'Fizz', '2137', '2138', 'Fizz', 'Buzz', '2141', 'Fizz', '2143', '2144', 'FizzBuzz', '2146', '2147', 'Fizz', '2149', 'Buzz', 'Fizz', '2152', '2153', 'Fizz', 'Buzz', '2156', 'Fizz', '2158', '2159', 'FizzBuzz', '2161', '2162', 'Fizz', '2164', 'Buzz', 'Fizz', '2167', '2168', 'Fizz', 'Buzz', '2171', 'Fizz', '2173', '2174', 'FizzBuzz', '2176', '2177', 'Fizz', '2179', 'Buzz', 'Fizz', '2182', '2183', 'Fizz', 'Buzz', '2186', 'Fizz', '2188', '2189', 'FizzBuzz', '2191', '2192', 'Fizz', '2194', 'Buzz', 'Fizz', '2197', '2198', 'Fizz', 'Buzz', '2201', 'Fizz', '2203', '2204', 'FizzBuzz', '2206', '2207', 'Fizz', '2209', 'Buzz', 'Fizz', '2212', '2213', 'Fizz', 'Buzz', '2216', 'Fizz', '2218', '2219', 'FizzBuzz', '2221', '2222', 'Fizz', '2224', 'Buzz', 'Fizz', '2227', '2228', 'Fizz', 'Buzz', '2231', 'Fizz', '2233', '2234', 'FizzBuzz', '2236', '2237', 'Fizz', '2239', 'Buzz', 'Fizz', '2242', '2243', 'Fizz', 'Buzz', '2246', 'Fizz', '2248', '2249', 'FizzBuzz', '2251', '2252', 'Fizz', '2254', 'Buzz', 'Fizz', '2257', '2258', 'Fizz', 'Buzz', '2261', 'Fizz', '2263', '2264', 'FizzBuzz', '2266', '2267', 'Fizz', '2269', 'Buzz', 'Fizz', '2272', '2273', 'Fizz', 'Buzz', '2276', 'Fizz', '2278', '2279', 'FizzBuzz', '2281', '2282', 'Fizz', '2284', 'Buzz', 'Fizz', '2287', '2288', 'Fizz', 'Buzz', '2291', 'Fizz', '2293', '2294', 'FizzBuzz', '2296', '2297', 'Fizz', '2299', 'Buzz', 'Fizz', '2302', '2303', 'Fizz', 'Buzz', '2306', 'Fizz', '2308', '2309', 'FizzBuzz', '2311', '2312', 'Fizz', '2314', 'Buzz', 'Fizz', '2317', '2318', 'Fizz', 'Buzz', '2321', 'Fizz', '2323', '2324', 'FizzBuzz', '2326', '2327', 'Fizz', '2329', 'Buzz', 'Fizz', '2332', '2333', 'Fizz', 'Buzz', '2336', 'Fizz', '2338', '2339', 'FizzBuzz', '2341', '2342', 'Fizz', '2344', 'Buzz', 'Fizz', '2347', '2348', 'Fizz', 'Buzz', '2351', 'Fizz', '2353', '2354', 'FizzBuzz', '2356', '2357', 'Fizz', '2359', 'Buzz', 'Fizz', '2362', '2363', 'Fizz', 'Buzz', '2366', 'Fizz', '2368', '2369', 'FizzBuzz', '2371', '2372', 'Fizz', '2374', 'Buzz', 'Fizz', '2377', '2378', 'Fizz', 'Buzz', '2381', 'Fizz', '2383', '2384', 'FizzBuzz', '2386', '2387', 'Fizz', '2389', 'Buzz', 'Fizz', '2392', '2393', 'Fizz', 'Buzz', '2396', 'Fizz', '2398', '2399', 'FizzBuzz', '2401', '2402', 'Fizz', '2404', 'Buzz', 'Fizz', '2407', '2408', 'Fizz', 'Buzz', '2411', 'Fizz', '2413', '2414', 'FizzBuzz', '2416', '2417', 'Fizz', '2419', 'Buzz', 'Fizz', '2422', '2423', 'Fizz', 'Buzz', '2426', 'Fizz', '2428', '2429', 'FizzBuzz', '2431', '2432', 'Fizz', '2434', 'Buzz', 'Fizz', '2437', '2438', 'Fizz', 'Buzz', '2441', 'Fizz', '2443', '2444', 'FizzBuzz', '2446', '2447', 'Fizz', '2449', 'Buzz', 'Fizz', '2452', '2453', 'Fizz', 'Buzz', '2456', 'Fizz', '2458', '2459', 'FizzBuzz', '2461', '2462', 'Fizz', '2464', 'Buzz', 'Fizz', '2467', '2468', 'Fizz', 'Buzz', '2471', 'Fizz', '2473', '2474', 'FizzBuzz', '2476', '2477', 'Fizz', '2479', 'Buzz', 'Fizz', '2482', '2483', 'Fizz', 'Buzz', '2486', 'Fizz', '2488', '2489', 'FizzBuzz', '2491', '2492', 'Fizz', '2494', 'Buzz', 'Fizz', '2497', '2498', 'Fizz', 'Buzz', '2501', 'Fizz', '2503', '2504', 'FizzBuzz', '2506', '2507', 'Fizz', '2509', 'Buzz', 'Fizz', '2512', '2513', 'Fizz', 'Buzz', '2516', 'Fizz', '2518', '2519', 'FizzBuzz', '2521', '2522', 'Fizz', '2524', 'Buzz', 'Fizz', '2527', '2528', 'Fizz', 'Buzz', '2531', 'Fizz', '2533', '2534', 'FizzBuzz', '2536', '2537', 'Fizz', '2539', 'Buzz', 'Fizz', '2542', '2543', 'Fizz', 'Buzz', '2546', 'Fizz', '2548', '2549', 'FizzBuzz', '2551', '2552', 'Fizz', '2554', 'Buzz', 'Fizz', '2557', '2558', 'Fizz', 'Buzz', '2561', 'Fizz', '2563', '2564', 'FizzBuzz', '2566', '2567', 'Fizz', '2569', 'Buzz', 'Fizz', '2572', '2573', 'Fizz', 'Buzz', '2576', 'Fizz', '2578', '2579', 'FizzBuzz', '2581', '2582', 'Fizz', '2584', 'Buzz', 'Fizz', '2587', '2588', 'Fizz', 'Buzz', '2591', 'Fizz', '2593', '2594', 'FizzBuzz', '2596', '2597', 'Fizz', '2599', 'Buzz', 'Fizz', '2602', '2603', 'Fizz', 'Buzz', '2606', 'Fizz', '2608', '2609', 'FizzBuzz', '2611', '2612', 'Fizz', '2614', 'Buzz', 'Fizz', '2617', '2618', 'Fizz', 'Buzz', '2621', 'Fizz', '2623', '2624', 'FizzBuzz', '2626', '2627', 'Fizz', '2629', 'Buzz', 'Fizz', '2632', '2633', 'Fizz', 'Buzz', '2636', 'Fizz', '2638', '2639', 'FizzBuzz', '2641', '2642', 'Fizz', '2644', 'Buzz', 'Fizz', '2647', '2648', 'Fizz', 'Buzz', '2651', 'Fizz', '2653', '2654', 'FizzBuzz', '2656', '2657', 'Fizz', '2659', 'Buzz', 'Fizz', '2662', '2663', 'Fizz', 'Buzz', '2666', 'Fizz', '2668', '2669', 'FizzBuzz', '2671', '2672', 'Fizz', '2674', 'Buzz', 'Fizz', '2677', '2678', 'Fizz', 'Buzz', '2681', 'Fizz', '2683', '2684', 'FizzBuzz', '2686', '2687', 'Fizz', '2689', 'Buzz', 'Fizz', '2692', '2693', 'Fizz', 'Buzz', '2696', 'Fizz', '2698', '2699', 'FizzBuzz', '2701', '2702', 'Fizz', '2704', 'Buzz', 'Fizz', '2707', '2708', 'Fizz', 'Buzz', '2711', 'Fizz', '2713', '2714', 'FizzBuzz', '2716', '2717', 'Fizz', '2719', 'Buzz', 'Fizz', '2722', '2723', 'Fizz', 'Buzz', '2726', 'Fizz', '2728', '2729', 'FizzBuzz', '2731', '2732', 'Fizz', '2734', 'Buzz', 'Fizz', '2737', '2738', 'Fizz', 'Buzz', '2741', 'Fizz', '2743', '2744', 'FizzBuzz', '2746', '2747', 'Fizz', '2749', 'Buzz', 'Fizz', '2752', '2753', 'Fizz', 'Buzz', '2756', 'Fizz', '2758', '2759', 'FizzBuzz', '2761', '2762', 'Fizz', '2764', 'Buzz', 'Fizz', '2767', '2768', 'Fizz', 'Buzz', '2771', 'Fizz', '2773', '2774', 'FizzBuzz', '2776', '2777', 'Fizz', '2779', 'Buzz', 'Fizz', '2782', '2783', 'Fizz', 'Buzz', '2786', 'Fizz', '2788', '2789', 'FizzBuzz', '2791', '2792', 'Fizz', '2794', 'Buzz', 'Fizz', '2797', '2798', 'Fizz', 'Buzz', '2801', 'Fizz', '2803', '2804', 'FizzBuzz', '2806', '2807', 'Fizz', '2809', 'Buzz', 'Fizz', '2812', '2813', 'Fizz', 'Buzz', '2816', 'Fizz', '2818', '2819', 'FizzBuzz', '2821', '2822', 'Fizz', '2824', 'Buzz', 'Fizz', '2827', '2828', 'Fizz', 'Buzz', '2831', 'Fizz', '2833', '2834', 'FizzBuzz', '2836', '2837', 'Fizz', '2839', 'Buzz', 'Fizz', '2842', '2843', 'Fizz', 'Buzz', '2846', 'Fizz', '2848', '2849', 'FizzBuzz', '2851', '2852', 'Fizz', '2854', 'Buzz', 'Fizz', '2857', '2858', 'Fizz', 'Buzz', '2861', 'Fizz', '2863', '2864', 'FizzBuzz', '2866', '2867', 'Fizz', '2869', 'Buzz', 'Fizz', '2872', '2873', 'Fizz', 'Buzz', '2876', 'Fizz', '2878', '2879', 'FizzBuzz', '2881', '2882', 'Fizz', '2884', 'Buzz', 'Fizz', '2887', '2888', 'Fizz', 'Buzz', '2891', 'Fizz', '2893', '2894', 'FizzBuzz', '2896', '2897', 'Fizz', '2899', 'Buzz', 'Fizz', '2902', '2903', 'Fizz', 'Buzz', '2906', 'Fizz', '2908', '2909', 'FizzBuzz', '2911', '2912', 'Fizz', '2914', 'Buzz', 'Fizz', '2917', '2918', 'Fizz', 'Buzz', '2921', 'Fizz', '2923', '2924', 'FizzBuzz', '2926', '2927', 'Fizz', '2929', 'Buzz', 'Fizz', '2932', '2933', 'Fizz', 'Buzz', '2936', 'Fizz', '2938', '2939', 'FizzBuzz', '2941', '2942', 'Fizz', '2944', 'Buzz', 'Fizz', '2947', '2948', 'Fizz', 'Buzz', '2951', 'Fizz', '2953', '2954', 'FizzBuzz', '2956', '2957', 'Fizz', '2959', 'Buzz', 'Fizz', '2962', '2963', 'Fizz', 'Buzz', '2966', 'Fizz', '2968', '2969', 'FizzBuzz', '2971', '2972', 'Fizz', '2974', 'Buzz', 'Fizz', '2977', '2978', 'Fizz', 'Buzz', '2981', 'Fizz', '2983', '2984', 'FizzBuzz', '2986', '2987', 'Fizz', '2989', 'Buzz', 'Fizz', '2992', '2993', 'Fizz', 'Buzz', '2996', 'Fizz', '2998', '2999', 'FizzBuzz', '3001', '3002', 'Fizz', '3004', 'Buzz', 'Fizz', '3007', '3008', 'Fizz', 'Buzz', '3011', 'Fizz', '3013', '3014', 'FizzBuzz', '3016', '3017', 'Fizz', '3019', 'Buzz', 'Fizz', '3022', '3023', 'Fizz', 'Buzz', '3026', 'Fizz', '3028', '3029', 'FizzBuzz', '3031', '3032', 'Fizz', '3034', 'Buzz', 'Fizz', '3037', '3038', 'Fizz', 'Buzz', '3041', 'Fizz', '3043', '3044', 'FizzBuzz', '3046', '3047', 'Fizz', '3049', 'Buzz', 'Fizz', '3052', '3053', 'Fizz', 'Buzz', '3056', 'Fizz', '3058', '3059', 'FizzBuzz', '3061', '3062', 'Fizz', '3064', 'Buzz', 'Fizz', '3067', '3068', 'Fizz', 'Buzz', '3071', 'Fizz', '3073', '3074', 'FizzBuzz', '3076', '3077', 'Fizz', '3079', 'Buzz', 'Fizz', '3082', '3083', 'Fizz', 'Buzz', '3086', 'Fizz', '3088', '3089', 'FizzBuzz', '3091', '3092', 'Fizz', '3094', 'Buzz', 'Fizz', '3097', '3098', 'Fizz', 'Buzz', '3101', 'Fizz', '3103', '3104', 'FizzBuzz', '3106', '3107', 'Fizz', '3109', 'Buzz', 'Fizz', '3112', '3113', 'Fizz', 'Buzz', '3116', 'Fizz', '3118', '3119', 'FizzBuzz', '3121', '3122', 'Fizz', '3124', 'Buzz', 'Fizz', '3127', '3128', 'Fizz', 'Buzz', '3131', 'Fizz', '3133', '3134', 'FizzBuzz', '3136', '3137', 'Fizz', '3139', 'Buzz', 'Fizz', '3142', '3143', 'Fizz', 'Buzz', '3146', 'Fizz', '3148', '3149', 'FizzBuzz', '3151', '3152', 'Fizz', '3154', 'Buzz', 'Fizz', '3157', '3158', 'Fizz', 'Buzz', '3161', 'Fizz', '3163', '3164', 'FizzBuzz', '3166', '3167', 'Fizz', '3169', 'Buzz', 'Fizz', '3172', '3173', 'Fizz', 'Buzz', '3176', 'Fizz', '3178', '3179', 'FizzBuzz', '3181', '3182', 'Fizz', '3184', 'Buzz', 'Fizz', '3187', '3188', 'Fizz', 'Buzz', '3191', 'Fizz', '3193', '3194', 'FizzBuzz', '3196', '3197', 'Fizz', '3199', 'Buzz', 'Fizz', '3202', '3203', 'Fizz', 'Buzz', '3206', 'Fizz', '3208', '3209', 'FizzBuzz', '3211', '3212', 'Fizz', '3214', 'Buzz', 'Fizz', '3217', '3218', 'Fizz', 'Buzz', '3221', 'Fizz', '3223', '3224', 'FizzBuzz', '3226', '3227', 'Fizz', '3229', 'Buzz', 'Fizz', '3232', '3233', 'Fizz', 'Buzz', '3236', 'Fizz', '3238', '3239', 'FizzBuzz', '3241', '3242', 'Fizz', '3244', 'Buzz', 'Fizz', '3247', '3248', 'Fizz', 'Buzz', '3251', 'Fizz', '3253', '3254', 'FizzBuzz', '3256', '3257', 'Fizz', '3259', 'Buzz', 'Fizz', '3262', '3263', 'Fizz', 'Buzz', '3266', 'Fizz', '3268', '3269', 'FizzBuzz', '3271', '3272', 'Fizz', '3274', 'Buzz', 'Fizz', '3277', '3278', 'Fizz', 'Buzz', '3281', 'Fizz', '3283', '3284', 'FizzBuzz', '3286', '3287', 'Fizz', '3289', 'Buzz', 'Fizz', '3292', '3293', 'Fizz', 'Buzz', '3296', 'Fizz', '3298', '3299', 'FizzBuzz', '3301', '3302', 'Fizz', '3304', 'Buzz', 'Fizz', '3307', '3308', 'Fizz', 'Buzz', '3311', 'Fizz', '3313', '3314', 'FizzBuzz', '3316', '3317', 'Fizz', '3319', 'Buzz', 'Fizz', '3322', '3323', 'Fizz', 'Buzz', '3326', 'Fizz', '3328', '3329', 'FizzBuzz', '3331', '3332', 'Fizz']"
      },
      {
        "input": "n = 300",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz']"
      },
      {
        "input": "n = 60",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz']"
      },
      {
        "input": "n = 3000",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz', '751', '752', 'Fizz', '754', 'Buzz', 'Fizz', '757', '758', 'Fizz', 'Buzz', '761', 'Fizz', '763', '764', 'FizzBuzz', '766', '767', 'Fizz', '769', 'Buzz', 'Fizz', '772', '773', 'Fizz', 'Buzz', '776', 'Fizz', '778', '779', 'FizzBuzz', '781', '782', 'Fizz', '784', 'Buzz', 'Fizz', '787', '788', 'Fizz', 'Buzz', '791', 'Fizz', '793', '794', 'FizzBuzz', '796', '797', 'Fizz', '799', 'Buzz', 'Fizz', '802', '803', 'Fizz', 'Buzz', '806', 'Fizz', '808', '809', 'FizzBuzz', '811', '812', 'Fizz', '814', 'Buzz', 'Fizz', '817', '818', 'Fizz', 'Buzz', '821', 'Fizz', '823', '824', 'FizzBuzz', '826', '827', 'Fizz', '829', 'Buzz', 'Fizz', '832', '833', 'Fizz', 'Buzz', '836', 'Fizz', '838', '839', 'FizzBuzz', '841', '842', 'Fizz', '844', 'Buzz', 'Fizz', '847', '848', 'Fizz', 'Buzz', '851', 'Fizz', '853', '854', 'FizzBuzz', '856', '857', 'Fizz', '859', 'Buzz', 'Fizz', '862', '863', 'Fizz', 'Buzz', '866', 'Fizz', '868', '869', 'FizzBuzz', '871', '872', 'Fizz', '874', 'Buzz', 'Fizz', '877', '878', 'Fizz', 'Buzz', '881', 'Fizz', '883', '884', 'FizzBuzz', '886', '887', 'Fizz', '889', 'Buzz', 'Fizz', '892', '893', 'Fizz', 'Buzz', '896', 'Fizz', '898', '899', 'FizzBuzz', '901', '902', 'Fizz', '904', 'Buzz', 'Fizz', '907', '908', 'Fizz', 'Buzz', '911', 'Fizz', '913', '914', 'FizzBuzz', '916', '917', 'Fizz', '919', 'Buzz', 'Fizz', '922', '923', 'Fizz', 'Buzz', '926', 'Fizz', '928', '929', 'FizzBuzz', '931', '932', 'Fizz', '934', 'Buzz', 'Fizz', '937', '938', 'Fizz', 'Buzz', '941', 'Fizz', '943', '944', 'FizzBuzz', '946', '947', 'Fizz', '949', 'Buzz', 'Fizz', '952', '953', 'Fizz', 'Buzz', '956', 'Fizz', '958', '959', 'FizzBuzz', '961', '962', 'Fizz', '964', 'Buzz', 'Fizz', '967', '968', 'Fizz', 'Buzz', '971', 'Fizz', '973', '974', 'FizzBuzz', '976', '977', 'Fizz', '979', 'Buzz', 'Fizz', '982', '983', 'Fizz', 'Buzz', '986', 'Fizz', '988', '989', 'FizzBuzz', '991', '992', 'Fizz', '994', 'Buzz', 'Fizz', '997', '998', 'Fizz', 'Buzz', '1001', 'Fizz', '1003', '1004', 'FizzBuzz', '1006', '1007', 'Fizz', '1009', 'Buzz', 'Fizz', '1012', '1013', 'Fizz', 'Buzz', '1016', 'Fizz', '1018', '1019', 'FizzBuzz', '1021', '1022', 'Fizz', '1024', 'Buzz', 'Fizz', '1027', '1028', 'Fizz', 'Buzz', '1031', 'Fizz', '1033', '1034', 'FizzBuzz', '1036', '1037', 'Fizz', '1039', 'Buzz', 'Fizz', '1042', '1043', 'Fizz', 'Buzz', '1046', 'Fizz', '1048', '1049', 'FizzBuzz', '1051', '1052', 'Fizz', '1054', 'Buzz', 'Fizz', '1057', '1058', 'Fizz', 'Buzz', '1061', 'Fizz', '1063', '1064', 'FizzBuzz', '1066', '1067', 'Fizz', '1069', 'Buzz', 'Fizz', '1072', '1073', 'Fizz', 'Buzz', '1076', 'Fizz', '1078', '1079', 'FizzBuzz', '1081', '1082', 'Fizz', '1084', 'Buzz', 'Fizz', '1087', '1088', 'Fizz', 'Buzz', '1091', 'Fizz', '1093', '1094', 'FizzBuzz', '1096', '1097', 'Fizz', '1099', 'Buzz', 'Fizz', '1102', '1103', 'Fizz', 'Buzz', '1106', 'Fizz', '1108', '1109', 'FizzBuzz', '1111', '1112', 'Fizz', '1114', 'Buzz', 'Fizz', '1117', '1118', 'Fizz', 'Buzz', '1121', 'Fizz', '1123', '1124', 'FizzBuzz', '1126', '1127', 'Fizz', '1129', 'Buzz', 'Fizz', '1132', '1133', 'Fizz', 'Buzz', '1136', 'Fizz', '1138', '1139', 'FizzBuzz', '1141', '1142', 'Fizz', '1144', 'Buzz', 'Fizz', '1147', '1148', 'Fizz', 'Buzz', '1151', 'Fizz', '1153', '1154', 'FizzBuzz', '1156', '1157', 'Fizz', '1159', 'Buzz', 'Fizz', '1162', '1163', 'Fizz', 'Buzz', '1166', 'Fizz', '1168', '1169', 'FizzBuzz', '1171', '1172', 'Fizz', '1174', 'Buzz', 'Fizz', '1177', '1178', 'Fizz', 'Buzz', '1181', 'Fizz', '1183', '1184', 'FizzBuzz', '1186', '1187', 'Fizz', '1189', 'Buzz', 'Fizz', '1192', '1193', 'Fizz', 'Buzz', '1196', 'Fizz', '1198', '1199', 'FizzBuzz', '1201', '1202', 'Fizz', '1204', 'Buzz', 'Fizz', '1207', '1208', 'Fizz', 'Buzz', '1211', 'Fizz', '1213', '1214', 'FizzBuzz', '1216', '1217', 'Fizz', '1219', 'Buzz', 'Fizz', '1222', '1223', 'Fizz', 'Buzz', '1226', 'Fizz', '1228', '1229', 'FizzBuzz', '1231', '1232', 'Fizz', '1234', 'Buzz', 'Fizz', '1237', '1238', 'Fizz', 'Buzz', '1241', 'Fizz', '1243', '1244', 'FizzBuzz', '1246', '1247', 'Fizz', '1249', 'Buzz', 'Fizz', '1252', '1253', 'Fizz', 'Buzz', '1256', 'Fizz', '1258', '1259', 'FizzBuzz', '1261', '1262', 'Fizz', '1264', 'Buzz', 'Fizz', '1267', '1268', 'Fizz', 'Buzz', '1271', 'Fizz', '1273', '1274', 'FizzBuzz', '1276', '1277', 'Fizz', '1279', 'Buzz', 'Fizz', '1282', '1283', 'Fizz', 'Buzz', '1286', 'Fizz', '1288', '1289', 'FizzBuzz', '1291', '1292', 'Fizz', '1294', 'Buzz', 'Fizz', '1297', '1298', 'Fizz', 'Buzz', '1301', 'Fizz', '1303', '1304', 'FizzBuzz', '1306', '1307', 'Fizz', '1309', 'Buzz', 'Fizz', '1312', '1313', 'Fizz', 'Buzz', '1316', 'Fizz', '1318', '1319', 'FizzBuzz', '1321', '1322', 'Fizz', '1324', 'Buzz', 'Fizz', '1327', '1328', 'Fizz', 'Buzz', '1331', 'Fizz', '1333', '1334', 'FizzBuzz', '1336', '1337', 'Fizz', '1339', 'Buzz', 'Fizz', '1342', '1343', 'Fizz', 'Buzz', '1346', 'Fizz', '1348', '1349', 'FizzBuzz', '1351', '1352', 'Fizz', '1354', 'Buzz', 'Fizz', '1357', '1358', 'Fizz', 'Buzz', '1361', 'Fizz', '1363', '1364', 'FizzBuzz', '1366', '1367', 'Fizz', '1369', 'Buzz', 'Fizz', '1372', '1373', 'Fizz', 'Buzz', '1376', 'Fizz', '1378', '1379', 'FizzBuzz', '1381', '1382', 'Fizz', '1384', 'Buzz', 'Fizz', '1387', '1388', 'Fizz', 'Buzz', '1391', 'Fizz', '1393', '1394', 'FizzBuzz', '1396', '1397', 'Fizz', '1399', 'Buzz', 'Fizz', '1402', '1403', 'Fizz', 'Buzz', '1406', 'Fizz', '1408', '1409', 'FizzBuzz', '1411', '1412', 'Fizz', '1414', 'Buzz', 'Fizz', '1417', '1418', 'Fizz', 'Buzz', '1421', 'Fizz', '1423', '1424', 'FizzBuzz', '1426', '1427', 'Fizz', '1429', 'Buzz', 'Fizz', '1432', '1433', 'Fizz', 'Buzz', '1436', 'Fizz', '1438', '1439', 'FizzBuzz', '1441', '1442', 'Fizz', '1444', 'Buzz', 'Fizz', '1447', '1448', 'Fizz', 'Buzz', '1451', 'Fizz', '1453', '1454', 'FizzBuzz', '1456', '1457', 'Fizz', '1459', 'Buzz', 'Fizz', '1462', '1463', 'Fizz', 'Buzz', '1466', 'Fizz', '1468', '1469', 'FizzBuzz', '1471', '1472', 'Fizz', '1474', 'Buzz', 'Fizz', '1477', '1478', 'Fizz', 'Buzz', '1481', 'Fizz', '1483', '1484', 'FizzBuzz', '1486', '1487', 'Fizz', '1489', 'Buzz', 'Fizz', '1492', '1493', 'Fizz', 'Buzz', '1496', 'Fizz', '1498', '1499', 'FizzBuzz', '1501', '1502', 'Fizz', '1504', 'Buzz', 'Fizz', '1507', '1508', 'Fizz', 'Buzz', '1511', 'Fizz', '1513', '1514', 'FizzBuzz', '1516', '1517', 'Fizz', '1519', 'Buzz', 'Fizz', '1522', '1523', 'Fizz', 'Buzz', '1526', 'Fizz', '1528', '1529', 'FizzBuzz', '1531', '1532', 'Fizz', '1534', 'Buzz', 'Fizz', '1537', '1538', 'Fizz', 'Buzz', '1541', 'Fizz', '1543', '1544', 'FizzBuzz', '1546', '1547', 'Fizz', '1549', 'Buzz', 'Fizz', '1552', '1553', 'Fizz', 'Buzz', '1556', 'Fizz', '1558', '1559', 'FizzBuzz', '1561', '1562', 'Fizz', '1564', 'Buzz', 'Fizz', '1567', '1568', 'Fizz', 'Buzz', '1571', 'Fizz', '1573', '1574', 'FizzBuzz', '1576', '1577', 'Fizz', '1579', 'Buzz', 'Fizz', '1582', '1583', 'Fizz', 'Buzz', '1586', 'Fizz', '1588', '1589', 'FizzBuzz', '1591', '1592', 'Fizz', '1594', 'Buzz', 'Fizz', '1597', '1598', 'Fizz', 'Buzz', '1601', 'Fizz', '1603', '1604', 'FizzBuzz', '1606', '1607', 'Fizz', '1609', 'Buzz', 'Fizz', '1612', '1613', 'Fizz', 'Buzz', '1616', 'Fizz', '1618', '1619', 'FizzBuzz', '1621', '1622', 'Fizz', '1624', 'Buzz', 'Fizz', '1627', '1628', 'Fizz', 'Buzz', '1631', 'Fizz', '1633', '1634', 'FizzBuzz', '1636', '1637', 'Fizz', '1639', 'Buzz', 'Fizz', '1642', '1643', 'Fizz', 'Buzz', '1646', 'Fizz', '1648', '1649', 'FizzBuzz', '1651', '1652', 'Fizz', '1654', 'Buzz', 'Fizz', '1657', '1658', 'Fizz', 'Buzz', '1661', 'Fizz', '1663', '1664', 'FizzBuzz', '1666', '1667', 'Fizz', '1669', 'Buzz', 'Fizz', '1672', '1673', 'Fizz', 'Buzz', '1676', 'Fizz', '1678', '1679', 'FizzBuzz', '1681', '1682', 'Fizz', '1684', 'Buzz', 'Fizz', '1687', '1688', 'Fizz', 'Buzz', '1691', 'Fizz', '1693', '1694', 'FizzBuzz', '1696', '1697', 'Fizz', '1699', 'Buzz', 'Fizz', '1702', '1703', 'Fizz', 'Buzz', '1706', 'Fizz', '1708', '1709', 'FizzBuzz', '1711', '1712', 'Fizz', '1714', 'Buzz', 'Fizz', '1717', '1718', 'Fizz', 'Buzz', '1721', 'Fizz', '1723', '1724', 'FizzBuzz', '1726', '1727', 'Fizz', '1729', 'Buzz', 'Fizz', '1732', '1733', 'Fizz', 'Buzz', '1736', 'Fizz', '1738', '1739', 'FizzBuzz', '1741', '1742', 'Fizz', '1744', 'Buzz', 'Fizz', '1747', '1748', 'Fizz', 'Buzz', '1751', 'Fizz', '1753', '1754', 'FizzBuzz', '1756', '1757', 'Fizz', '1759', 'Buzz', 'Fizz', '1762', '1763', 'Fizz', 'Buzz', '1766', 'Fizz', '1768', '1769', 'FizzBuzz', '1771', '1772', 'Fizz', '1774', 'Buzz', 'Fizz', '1777', '1778', 'Fizz', 'Buzz', '1781', 'Fizz', '1783', '1784', 'FizzBuzz', '1786', '1787', 'Fizz', '1789', 'Buzz', 'Fizz', '1792', '1793', 'Fizz', 'Buzz', '1796', 'Fizz', '1798', '1799', 'FizzBuzz', '1801', '1802', 'Fizz', '1804', 'Buzz', 'Fizz', '1807', '1808', 'Fizz', 'Buzz', '1811', 'Fizz', '1813', '1814', 'FizzBuzz', '1816', '1817', 'Fizz', '1819', 'Buzz', 'Fizz', '1822', '1823', 'Fizz', 'Buzz', '1826', 'Fizz', '1828', '1829', 'FizzBuzz', '1831', '1832', 'Fizz', '1834', 'Buzz', 'Fizz', '1837', '1838', 'Fizz', 'Buzz', '1841', 'Fizz', '1843', '1844', 'FizzBuzz', '1846', '1847', 'Fizz', '1849', 'Buzz', 'Fizz', '1852', '1853', 'Fizz', 'Buzz', '1856', 'Fizz', '1858', '1859', 'FizzBuzz', '1861', '1862', 'Fizz', '1864', 'Buzz', 'Fizz', '1867', '1868', 'Fizz', 'Buzz', '1871', 'Fizz', '1873', '1874', 'FizzBuzz', '1876', '1877', 'Fizz', '1879', 'Buzz', 'Fizz', '1882', '1883', 'Fizz', 'Buzz', '1886', 'Fizz', '1888', '1889', 'FizzBuzz', '1891', '1892', 'Fizz', '1894', 'Buzz', 'Fizz', '1897', '1898', 'Fizz', 'Buzz', '1901', 'Fizz', '1903', '1904', 'FizzBuzz', '1906', '1907', 'Fizz', '1909', 'Buzz', 'Fizz', '1912', '1913', 'Fizz', 'Buzz', '1916', 'Fizz', '1918', '1919', 'FizzBuzz', '1921', '1922', 'Fizz', '1924', 'Buzz', 'Fizz', '1927', '1928', 'Fizz', 'Buzz', '1931', 'Fizz', '1933', '1934', 'FizzBuzz', '1936', '1937', 'Fizz', '1939', 'Buzz', 'Fizz', '1942', '1943', 'Fizz', 'Buzz', '1946', 'Fizz', '1948', '1949', 'FizzBuzz', '1951', '1952', 'Fizz', '1954', 'Buzz', 'Fizz', '1957', '1958', 'Fizz', 'Buzz', '1961', 'Fizz', '1963', '1964', 'FizzBuzz', '1966', '1967', 'Fizz', '1969', 'Buzz', 'Fizz', '1972', '1973', 'Fizz', 'Buzz', '1976', 'Fizz', '1978', '1979', 'FizzBuzz', '1981', '1982', 'Fizz', '1984', 'Buzz', 'Fizz', '1987', '1988', 'Fizz', 'Buzz', '1991', 'Fizz', '1993', '1994', 'FizzBuzz', '1996', '1997', 'Fizz', '1999', 'Buzz', 'Fizz', '2002', '2003', 'Fizz', 'Buzz', '2006', 'Fizz', '2008', '2009', 'FizzBuzz', '2011', '2012', 'Fizz', '2014', 'Buzz', 'Fizz', '2017', '2018', 'Fizz', 'Buzz', '2021', 'Fizz', '2023', '2024', 'FizzBuzz', '2026', '2027', 'Fizz', '2029', 'Buzz', 'Fizz', '2032', '2033', 'Fizz', 'Buzz', '2036', 'Fizz', '2038', '2039', 'FizzBuzz', '2041', '2042', 'Fizz', '2044', 'Buzz', 'Fizz', '2047', '2048', 'Fizz', 'Buzz', '2051', 'Fizz', '2053', '2054', 'FizzBuzz', '2056', '2057', 'Fizz', '2059', 'Buzz', 'Fizz', '2062', '2063', 'Fizz', 'Buzz', '2066', 'Fizz', '2068', '2069', 'FizzBuzz', '2071', '2072', 'Fizz', '2074', 'Buzz', 'Fizz', '2077', '2078', 'Fizz', 'Buzz', '2081', 'Fizz', '2083', '2084', 'FizzBuzz', '2086', '2087', 'Fizz', '2089', 'Buzz', 'Fizz', '2092', '2093', 'Fizz', 'Buzz', '2096', 'Fizz', '2098', '2099', 'FizzBuzz', '2101', '2102', 'Fizz', '2104', 'Buzz', 'Fizz', '2107', '2108', 'Fizz', 'Buzz', '2111', 'Fizz', '2113', '2114', 'FizzBuzz', '2116', '2117', 'Fizz', '2119', 'Buzz', 'Fizz', '2122', '2123', 'Fizz', 'Buzz', '2126', 'Fizz', '2128', '2129', 'FizzBuzz', '2131', '2132', 'Fizz', '2134', 'Buzz', 'Fizz', '2137', '2138', 'Fizz', 'Buzz', '2141', 'Fizz', '2143', '2144', 'FizzBuzz', '2146', '2147', 'Fizz', '2149', 'Buzz', 'Fizz', '2152', '2153', 'Fizz', 'Buzz', '2156', 'Fizz', '2158', '2159', 'FizzBuzz', '2161', '2162', 'Fizz', '2164', 'Buzz', 'Fizz', '2167', '2168', 'Fizz', 'Buzz', '2171', 'Fizz', '2173', '2174', 'FizzBuzz', '2176', '2177', 'Fizz', '2179', 'Buzz', 'Fizz', '2182', '2183', 'Fizz', 'Buzz', '2186', 'Fizz', '2188', '2189', 'FizzBuzz', '2191', '2192', 'Fizz', '2194', 'Buzz', 'Fizz', '2197', '2198', 'Fizz', 'Buzz', '2201', 'Fizz', '2203', '2204', 'FizzBuzz', '2206', '2207', 'Fizz', '2209', 'Buzz', 'Fizz', '2212', '2213', 'Fizz', 'Buzz', '2216', 'Fizz', '2218', '2219', 'FizzBuzz', '2221', '2222', 'Fizz', '2224', 'Buzz', 'Fizz', '2227', '2228', 'Fizz', 'Buzz', '2231', 'Fizz', '2233', '2234', 'FizzBuzz', '2236', '2237', 'Fizz', '2239', 'Buzz', 'Fizz', '2242', '2243', 'Fizz', 'Buzz', '2246', 'Fizz', '2248', '2249', 'FizzBuzz', '2251', '2252', 'Fizz', '2254', 'Buzz', 'Fizz', '2257', '2258', 'Fizz', 'Buzz', '2261', 'Fizz', '2263', '2264', 'FizzBuzz', '2266', '2267', 'Fizz', '2269', 'Buzz', 'Fizz', '2272', '2273', 'Fizz', 'Buzz', '2276', 'Fizz', '2278', '2279', 'FizzBuzz', '2281', '2282', 'Fizz', '2284', 'Buzz', 'Fizz', '2287', '2288', 'Fizz', 'Buzz', '2291', 'Fizz', '2293', '2294', 'FizzBuzz', '2296', '2297', 'Fizz', '2299', 'Buzz', 'Fizz', '2302', '2303', 'Fizz', 'Buzz', '2306', 'Fizz', '2308', '2309', 'FizzBuzz', '2311', '2312', 'Fizz', '2314', 'Buzz', 'Fizz', '2317', '2318', 'Fizz', 'Buzz', '2321', 'Fizz', '2323', '2324', 'FizzBuzz', '2326', '2327', 'Fizz', '2329', 'Buzz', 'Fizz', '2332', '2333', 'Fizz', 'Buzz', '2336', 'Fizz', '2338', '2339', 'FizzBuzz', '2341', '2342', 'Fizz', '2344', 'Buzz', 'Fizz', '2347', '2348', 'Fizz', 'Buzz', '2351', 'Fizz', '2353', '2354', 'FizzBuzz', '2356', '2357', 'Fizz', '2359', 'Buzz', 'Fizz', '2362', '2363', 'Fizz', 'Buzz', '2366', 'Fizz', '2368', '2369', 'FizzBuzz', '2371', '2372', 'Fizz', '2374', 'Buzz', 'Fizz', '2377', '2378', 'Fizz', 'Buzz', '2381', 'Fizz', '2383', '2384', 'FizzBuzz', '2386', '2387', 'Fizz', '2389', 'Buzz', 'Fizz', '2392', '2393', 'Fizz', 'Buzz', '2396', 'Fizz', '2398', '2399', 'FizzBuzz', '2401', '2402', 'Fizz', '2404', 'Buzz', 'Fizz', '2407', '2408', 'Fizz', 'Buzz', '2411', 'Fizz', '2413', '2414', 'FizzBuzz', '2416', '2417', 'Fizz', '2419', 'Buzz', 'Fizz', '2422', '2423', 'Fizz', 'Buzz', '2426', 'Fizz', '2428', '2429', 'FizzBuzz', '2431', '2432', 'Fizz', '2434', 'Buzz', 'Fizz', '2437', '2438', 'Fizz', 'Buzz', '2441', 'Fizz', '2443', '2444', 'FizzBuzz', '2446', '2447', 'Fizz', '2449', 'Buzz', 'Fizz', '2452', '2453', 'Fizz', 'Buzz', '2456', 'Fizz', '2458', '2459', 'FizzBuzz', '2461', '2462', 'Fizz', '2464', 'Buzz', 'Fizz', '2467', '2468', 'Fizz', 'Buzz', '2471', 'Fizz', '2473', '2474', 'FizzBuzz', '2476', '2477', 'Fizz', '2479', 'Buzz', 'Fizz', '2482', '2483', 'Fizz', 'Buzz', '2486', 'Fizz', '2488', '2489', 'FizzBuzz', '2491', '2492', 'Fizz', '2494', 'Buzz', 'Fizz', '2497', '2498', 'Fizz', 'Buzz', '2501', 'Fizz', '2503', '2504', 'FizzBuzz', '2506', '2507', 'Fizz', '2509', 'Buzz', 'Fizz', '2512', '2513', 'Fizz', 'Buzz', '2516', 'Fizz', '2518', '2519', 'FizzBuzz', '2521', '2522', 'Fizz', '2524', 'Buzz', 'Fizz', '2527', '2528', 'Fizz', 'Buzz', '2531', 'Fizz', '2533', '2534', 'FizzBuzz', '2536', '2537', 'Fizz', '2539', 'Buzz', 'Fizz', '2542', '2543', 'Fizz', 'Buzz', '2546', 'Fizz', '2548', '2549', 'FizzBuzz', '2551', '2552', 'Fizz', '2554', 'Buzz', 'Fizz', '2557', '2558', 'Fizz', 'Buzz', '2561', 'Fizz', '2563', '2564', 'FizzBuzz', '2566', '2567', 'Fizz', '2569', 'Buzz', 'Fizz', '2572', '2573', 'Fizz', 'Buzz', '2576', 'Fizz', '2578', '2579', 'FizzBuzz', '2581', '2582', 'Fizz', '2584', 'Buzz', 'Fizz', '2587', '2588', 'Fizz', 'Buzz', '2591', 'Fizz', '2593', '2594', 'FizzBuzz', '2596', '2597', 'Fizz', '2599', 'Buzz', 'Fizz', '2602', '2603', 'Fizz', 'Buzz', '2606', 'Fizz', '2608', '2609', 'FizzBuzz', '2611', '2612', 'Fizz', '2614', 'Buzz', 'Fizz', '2617', '2618', 'Fizz', 'Buzz', '2621', 'Fizz', '2623', '2624', 'FizzBuzz', '2626', '2627', 'Fizz', '2629', 'Buzz', 'Fizz', '2632', '2633', 'Fizz', 'Buzz', '2636', 'Fizz', '2638', '2639', 'FizzBuzz', '2641', '2642', 'Fizz', '2644', 'Buzz', 'Fizz', '2647', '2648', 'Fizz', 'Buzz', '2651', 'Fizz', '2653', '2654', 'FizzBuzz', '2656', '2657', 'Fizz', '2659', 'Buzz', 'Fizz', '2662', '2663', 'Fizz', 'Buzz', '2666', 'Fizz', '2668', '2669', 'FizzBuzz', '2671', '2672', 'Fizz', '2674', 'Buzz', 'Fizz', '2677', '2678', 'Fizz', 'Buzz', '2681', 'Fizz', '2683', '2684', 'FizzBuzz', '2686', '2687', 'Fizz', '2689', 'Buzz', 'Fizz', '2692', '2693', 'Fizz', 'Buzz', '2696', 'Fizz', '2698', '2699', 'FizzBuzz', '2701', '2702', 'Fizz', '2704', 'Buzz', 'Fizz', '2707', '2708', 'Fizz', 'Buzz', '2711', 'Fizz', '2713', '2714', 'FizzBuzz', '2716', '2717', 'Fizz', '2719', 'Buzz', 'Fizz', '2722', '2723', 'Fizz', 'Buzz', '2726', 'Fizz', '2728', '2729', 'FizzBuzz', '2731', '2732', 'Fizz', '2734', 'Buzz', 'Fizz', '2737', '2738', 'Fizz', 'Buzz', '2741', 'Fizz', '2743', '2744', 'FizzBuzz', '2746', '2747', 'Fizz', '2749', 'Buzz', 'Fizz', '2752', '2753', 'Fizz', 'Buzz', '2756', 'Fizz', '2758', '2759', 'FizzBuzz', '2761', '2762', 'Fizz', '2764', 'Buzz', 'Fizz', '2767', '2768', 'Fizz', 'Buzz', '2771', 'Fizz', '2773', '2774', 'FizzBuzz', '2776', '2777', 'Fizz', '2779', 'Buzz', 'Fizz', '2782', '2783', 'Fizz', 'Buzz', '2786', 'Fizz', '2788', '2789', 'FizzBuzz', '2791', '2792', 'Fizz', '2794', 'Buzz', 'Fizz', '2797', '2798', 'Fizz', 'Buzz', '2801', 'Fizz', '2803', '2804', 'FizzBuzz', '2806', '2807', 'Fizz', '2809', 'Buzz', 'Fizz', '2812', '2813', 'Fizz', 'Buzz', '2816', 'Fizz', '2818', '2819', 'FizzBuzz', '2821', '2822', 'Fizz', '2824', 'Buzz', 'Fizz', '2827', '2828', 'Fizz', 'Buzz', '2831', 'Fizz', '2833', '2834', 'FizzBuzz', '2836', '2837', 'Fizz', '2839', 'Buzz', 'Fizz', '2842', '2843', 'Fizz', 'Buzz', '2846', 'Fizz', '2848', '2849', 'FizzBuzz', '2851', '2852', 'Fizz', '2854', 'Buzz', 'Fizz', '2857', '2858', 'Fizz', 'Buzz', '2861', 'Fizz', '2863', '2864', 'FizzBuzz', '2866', '2867', 'Fizz', '2869', 'Buzz', 'Fizz', '2872', '2873', 'Fizz', 'Buzz', '2876', 'Fizz', '2878', '2879', 'FizzBuzz', '2881', '2882', 'Fizz', '2884', 'Buzz', 'Fizz', '2887', '2888', 'Fizz', 'Buzz', '2891', 'Fizz', '2893', '2894', 'FizzBuzz', '2896', '2897', 'Fizz', '2899', 'Buzz', 'Fizz', '2902', '2903', 'Fizz', 'Buzz', '2906', 'Fizz', '2908', '2909', 'FizzBuzz', '2911', '2912', 'Fizz', '2914', 'Buzz', 'Fizz', '2917', '2918', 'Fizz', 'Buzz', '2921', 'Fizz', '2923', '2924', 'FizzBuzz', '2926', '2927', 'Fizz', '2929', 'Buzz', 'Fizz', '2932', '2933', 'Fizz', 'Buzz', '2936', 'Fizz', '2938', '2939', 'FizzBuzz', '2941', '2942', 'Fizz', '2944', 'Buzz', 'Fizz', '2947', '2948', 'Fizz', 'Buzz', '2951', 'Fizz', '2953', '2954', 'FizzBuzz', '2956', '2957', 'Fizz', '2959', 'Buzz', 'Fizz', '2962', '2963', 'Fizz', 'Buzz', '2966', 'Fizz', '2968', '2969', 'FizzBuzz', '2971', '2972', 'Fizz', '2974', 'Buzz', 'Fizz', '2977', '2978', 'Fizz', 'Buzz', '2981', 'Fizz', '2983', '2984', 'FizzBuzz', '2986', '2987', 'Fizz', '2989', 'Buzz', 'Fizz', '2992', '2993', 'Fizz', 'Buzz', '2996', 'Fizz', '2998', '2999', 'FizzBuzz']"
      },
      {
        "input": "n = 30",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz']"
      },
      {
        "input": "n = 99",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz']"
      },
      {
        "input": "n = 2",
        "output": "['1', '2']"
      },
      {
        "input": "n = 23",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23']"
      },
      {
        "input": "n = 42",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz']"
      },
      {
        "input": "n = 1024",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz', '751', '752', 'Fizz', '754', 'Buzz', 'Fizz', '757', '758', 'Fizz', 'Buzz', '761', 'Fizz', '763', '764', 'FizzBuzz', '766', '767', 'Fizz', '769', 'Buzz', 'Fizz', '772', '773', 'Fizz', 'Buzz', '776', 'Fizz', '778', '779', 'FizzBuzz', '781', '782', 'Fizz', '784', 'Buzz', 'Fizz', '787', '788', 'Fizz', 'Buzz', '791', 'Fizz', '793', '794', 'FizzBuzz', '796', '797', 'Fizz', '799', 'Buzz', 'Fizz', '802', '803', 'Fizz', 'Buzz', '806', 'Fizz', '808', '809', 'FizzBuzz', '811', '812', 'Fizz', '814', 'Buzz', 'Fizz', '817', '818', 'Fizz', 'Buzz', '821', 'Fizz', '823', '824', 'FizzBuzz', '826', '827', 'Fizz', '829', 'Buzz', 'Fizz', '832', '833', 'Fizz', 'Buzz', '836', 'Fizz', '838', '839', 'FizzBuzz', '841', '842', 'Fizz', '844', 'Buzz', 'Fizz', '847', '848', 'Fizz', 'Buzz', '851', 'Fizz', '853', '854', 'FizzBuzz', '856', '857', 'Fizz', '859', 'Buzz', 'Fizz', '862', '863', 'Fizz', 'Buzz', '866', 'Fizz', '868', '869', 'FizzBuzz', '871', '872', 'Fizz', '874', 'Buzz', 'Fizz', '877', '878', 'Fizz', 'Buzz', '881', 'Fizz', '883', '884', 'FizzBuzz', '886', '887', 'Fizz', '889', 'Buzz', 'Fizz', '892', '893', 'Fizz', 'Buzz', '896', 'Fizz', '898', '899', 'FizzBuzz', '901', '902', 'Fizz', '904', 'Buzz', 'Fizz', '907', '908', 'Fizz', 'Buzz', '911', 'Fizz', '913', '914', 'FizzBuzz', '916', '917', 'Fizz', '919', 'Buzz', 'Fizz', '922', '923', 'Fizz', 'Buzz', '926', 'Fizz', '928', '929', 'FizzBuzz', '931', '932', 'Fizz', '934', 'Buzz', 'Fizz', '937', '938', 'Fizz', 'Buzz', '941', 'Fizz', '943', '944', 'FizzBuzz', '946', '947', 'Fizz', '949', 'Buzz', 'Fizz', '952', '953', 'Fizz', 'Buzz', '956', 'Fizz', '958', '959', 'FizzBuzz', '961', '962', 'Fizz', '964', 'Buzz', 'Fizz', '967', '968', 'Fizz', 'Buzz', '971', 'Fizz', '973', '974', 'FizzBuzz', '976', '977', 'Fizz', '979', 'Buzz', 'Fizz', '982', '983', 'Fizz', 'Buzz', '986', 'Fizz', '988', '989', 'FizzBuzz', '991', '992', 'Fizz', '994', 'Buzz', 'Fizz', '997', '998', 'Fizz', 'Buzz', '1001', 'Fizz', '1003', '1004', 'FizzBuzz', '1006', '1007', 'Fizz', '1009', 'Buzz', 'Fizz', '1012', '1013', 'Fizz', 'Buzz', '1016', 'Fizz', '1018', '1019', 'FizzBuzz', '1021', '1022', 'Fizz', '1024']"
      },
      {
        "input": "n = 101",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101']"
      },
      {
        "input": "n = 250",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz']"
      },
      {
        "input": "n = 2048",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz', '751', '752', 'Fizz', '754', 'Buzz', 'Fizz', '757', '758', 'Fizz', 'Buzz', '761', 'Fizz', '763', '764', 'FizzBuzz', '766', '767', 'Fizz', '769', 'Buzz', 'Fizz', '772', '773', 'Fizz', 'Buzz', '776', 'Fizz', '778', '779', 'FizzBuzz', '781', '782', 'Fizz', '784', 'Buzz', 'Fizz', '787', '788', 'Fizz', 'Buzz', '791', 'Fizz', '793', '794', 'FizzBuzz', '796', '797', 'Fizz', '799', 'Buzz', 'Fizz', '802', '803', 'Fizz', 'Buzz', '806', 'Fizz', '808', '809', 'FizzBuzz', '811', '812', 'Fizz', '814', 'Buzz', 'Fizz', '817', '818', 'Fizz', 'Buzz', '821', 'Fizz', '823', '824', 'FizzBuzz', '826', '827', 'Fizz', '829', 'Buzz', 'Fizz', '832', '833', 'Fizz', 'Buzz', '836', 'Fizz', '838', '839', 'FizzBuzz', '841', '842', 'Fizz', '844', 'Buzz', 'Fizz', '847', '848', 'Fizz', 'Buzz', '851', 'Fizz', '853', '854', 'FizzBuzz', '856', '857', 'Fizz', '859', 'Buzz', 'Fizz', '862', '863', 'Fizz', 'Buzz', '866', 'Fizz', '868', '869', 'FizzBuzz', '871', '872', 'Fizz', '874', 'Buzz', 'Fizz', '877', '878', 'Fizz', 'Buzz', '881', 'Fizz', '883', '884', 'FizzBuzz', '886', '887', 'Fizz', '889', 'Buzz', 'Fizz', '892', '893', 'Fizz', 'Buzz', '896', 'Fizz', '898', '899', 'FizzBuzz', '901', '902', 'Fizz', '904', 'Buzz', 'Fizz', '907', '908', 'Fizz', 'Buzz', '911', 'Fizz', '913', '914', 'FizzBuzz', '916', '917', 'Fizz', '919', 'Buzz', 'Fizz', '922', '923', 'Fizz', 'Buzz', '926', 'Fizz', '928', '929', 'FizzBuzz', '931', '932', 'Fizz', '934', 'Buzz', 'Fizz', '937', '938', 'Fizz', 'Buzz', '941', 'Fizz', '943', '944', 'FizzBuzz', '946', '947', 'Fizz', '949', 'Buzz', 'Fizz', '952', '953', 'Fizz', 'Buzz', '956', 'Fizz', '958', '959', 'FizzBuzz', '961', '962', 'Fizz', '964', 'Buzz', 'Fizz', '967', '968', 'Fizz', 'Buzz', '971', 'Fizz', '973', '974', 'FizzBuzz', '976', '977', 'Fizz', '979', 'Buzz', 'Fizz', '982', '983', 'Fizz', 'Buzz', '986', 'Fizz', '988', '989', 'FizzBuzz', '991', '992', 'Fizz', '994', 'Buzz', 'Fizz', '997', '998', 'Fizz', 'Buzz', '1001', 'Fizz', '1003', '1004', 'FizzBuzz', '1006', '1007', 'Fizz', '1009', 'Buzz', 'Fizz', '1012', '1013', 'Fizz', 'Buzz', '1016', 'Fizz', '1018', '1019', 'FizzBuzz', '1021', '1022', 'Fizz', '1024', 'Buzz', 'Fizz', '1027', '1028', 'Fizz', 'Buzz', '1031', 'Fizz', '1033', '1034', 'FizzBuzz', '1036', '1037', 'Fizz', '1039', 'Buzz', 'Fizz', '1042', '1043', 'Fizz', 'Buzz', '1046', 'Fizz', '1048', '1049', 'FizzBuzz', '1051', '1052', 'Fizz', '1054', 'Buzz', 'Fizz', '1057', '1058', 'Fizz', 'Buzz', '1061', 'Fizz', '1063', '1064', 'FizzBuzz', '1066', '1067', 'Fizz', '1069', 'Buzz', 'Fizz', '1072', '1073', 'Fizz', 'Buzz', '1076', 'Fizz', '1078', '1079', 'FizzBuzz', '1081', '1082', 'Fizz', '1084', 'Buzz', 'Fizz', '1087', '1088', 'Fizz', 'Buzz', '1091', 'Fizz', '1093', '1094', 'FizzBuzz', '1096', '1097', 'Fizz', '1099', 'Buzz', 'Fizz', '1102', '1103', 'Fizz', 'Buzz', '1106', 'Fizz', '1108', '1109', 'FizzBuzz', '1111', '1112', 'Fizz', '1114', 'Buzz', 'Fizz', '1117', '1118', 'Fizz', 'Buzz', '1121', 'Fizz', '1123', '1124', 'FizzBuzz', '1126', '1127', 'Fizz', '1129', 'Buzz', 'Fizz', '1132', '1133', 'Fizz', 'Buzz', '1136', 'Fizz', '1138', '1139', 'FizzBuzz', '1141', '1142', 'Fizz', '1144', 'Buzz', 'Fizz', '1147', '1148', 'Fizz', 'Buzz', '1151', 'Fizz', '1153', '1154', 'FizzBuzz', '1156', '1157', 'Fizz', '1159', 'Buzz', 'Fizz', '1162', '1163', 'Fizz', 'Buzz', '1166', 'Fizz', '1168', '1169', 'FizzBuzz', '1171', '1172', 'Fizz', '1174', 'Buzz', 'Fizz', '1177', '1178', 'Fizz', 'Buzz', '1181', 'Fizz', '1183', '1184', 'FizzBuzz', '1186', '1187', 'Fizz', '1189', 'Buzz', 'Fizz', '1192', '1193', 'Fizz', 'Buzz', '1196', 'Fizz', '1198', '1199', 'FizzBuzz', '1201', '1202', 'Fizz', '1204', 'Buzz', 'Fizz', '1207', '1208', 'Fizz', 'Buzz', '1211', 'Fizz', '1213', '1214', 'FizzBuzz', '1216', '1217', 'Fizz', '1219', 'Buzz', 'Fizz', '1222', '1223', 'Fizz', 'Buzz', '1226', 'Fizz', '1228', '1229', 'FizzBuzz', '1231', '1232', 'Fizz', '1234', 'Buzz', 'Fizz', '1237', '1238', 'Fizz', 'Buzz', '1241', 'Fizz', '1243', '1244', 'FizzBuzz', '1246', '1247', 'Fizz', '1249', 'Buzz', 'Fizz', '1252', '1253', 'Fizz', 'Buzz', '1256', 'Fizz', '1258', '1259', 'FizzBuzz', '1261', '1262', 'Fizz', '1264', 'Buzz', 'Fizz', '1267', '1268', 'Fizz', 'Buzz', '1271', 'Fizz', '1273', '1274', 'FizzBuzz', '1276', '1277', 'Fizz', '1279', 'Buzz', 'Fizz', '1282', '1283', 'Fizz', 'Buzz', '1286', 'Fizz', '1288', '1289', 'FizzBuzz', '1291', '1292', 'Fizz', '1294', 'Buzz', 'Fizz', '1297', '1298', 'Fizz', 'Buzz', '1301', 'Fizz', '1303', '1304', 'FizzBuzz', '1306', '1307', 'Fizz', '1309', 'Buzz', 'Fizz', '1312', '1313', 'Fizz', 'Buzz', '1316', 'Fizz', '1318', '1319', 'FizzBuzz', '1321', '1322', 'Fizz', '1324', 'Buzz', 'Fizz', '1327', '1328', 'Fizz', 'Buzz', '1331', 'Fizz', '1333', '1334', 'FizzBuzz', '1336', '1337', 'Fizz', '1339', 'Buzz', 'Fizz', '1342', '1343', 'Fizz', 'Buzz', '1346', 'Fizz', '1348', '1349', 'FizzBuzz', '1351', '1352', 'Fizz', '1354', 'Buzz', 'Fizz', '1357', '1358', 'Fizz', 'Buzz', '1361', 'Fizz', '1363', '1364', 'FizzBuzz', '1366', '1367', 'Fizz', '1369', 'Buzz', 'Fizz', '1372', '1373', 'Fizz', 'Buzz', '1376', 'Fizz', '1378', '1379', 'FizzBuzz', '1381', '1382', 'Fizz', '1384', 'Buzz', 'Fizz', '1387', '1388', 'Fizz', 'Buzz', '1391', 'Fizz', '1393', '1394', 'FizzBuzz', '1396', '1397', 'Fizz', '1399', 'Buzz', 'Fizz', '1402', '1403', 'Fizz', 'Buzz', '1406', 'Fizz', '1408', '1409', 'FizzBuzz', '1411', '1412', 'Fizz', '1414', 'Buzz', 'Fizz', '1417', '1418', 'Fizz', 'Buzz', '1421', 'Fizz', '1423', '1424', 'FizzBuzz', '1426', '1427', 'Fizz', '1429', 'Buzz', 'Fizz', '1432', '1433', 'Fizz', 'Buzz', '1436', 'Fizz', '1438', '1439', 'FizzBuzz', '1441', '1442', 'Fizz', '1444', 'Buzz', 'Fizz', '1447', '1448', 'Fizz', 'Buzz', '1451', 'Fizz', '1453', '1454', 'FizzBuzz', '1456', '1457', 'Fizz', '1459', 'Buzz', 'Fizz', '1462', '1463', 'Fizz', 'Buzz', '1466', 'Fizz', '1468', '1469', 'FizzBuzz', '1471', '1472', 'Fizz', '1474', 'Buzz', 'Fizz', '1477', '1478', 'Fizz', 'Buzz', '1481', 'Fizz', '1483', '1484', 'FizzBuzz', '1486', '1487', 'Fizz', '1489', 'Buzz', 'Fizz', '1492', '1493', 'Fizz', 'Buzz', '1496', 'Fizz', '1498', '1499', 'FizzBuzz', '1501', '1502', 'Fizz', '1504', 'Buzz', 'Fizz', '1507', '1508', 'Fizz', 'Buzz', '1511', 'Fizz', '1513', '1514', 'FizzBuzz', '1516', '1517', 'Fizz', '1519', 'Buzz', 'Fizz', '1522', '1523', 'Fizz', 'Buzz', '1526', 'Fizz', '1528', '1529', 'FizzBuzz', '1531', '1532', 'Fizz', '1534', 'Buzz', 'Fizz', '1537', '1538', 'Fizz', 'Buzz', '1541', 'Fizz', '1543', '1544', 'FizzBuzz', '1546', '1547', 'Fizz', '1549', 'Buzz', 'Fizz', '1552', '1553', 'Fizz', 'Buzz', '1556', 'Fizz', '1558', '1559', 'FizzBuzz', '1561', '1562', 'Fizz', '1564', 'Buzz', 'Fizz', '1567', '1568', 'Fizz', 'Buzz', '1571', 'Fizz', '1573', '1574', 'FizzBuzz', '1576', '1577', 'Fizz', '1579', 'Buzz', 'Fizz', '1582', '1583', 'Fizz', 'Buzz', '1586', 'Fizz', '1588', '1589', 'FizzBuzz', '1591', '1592', 'Fizz', '1594', 'Buzz', 'Fizz', '1597', '1598', 'Fizz', 'Buzz', '1601', 'Fizz', '1603', '1604', 'FizzBuzz', '1606', '1607', 'Fizz', '1609', 'Buzz', 'Fizz', '1612', '1613', 'Fizz', 'Buzz', '1616', 'Fizz', '1618', '1619', 'FizzBuzz', '1621', '1622', 'Fizz', '1624', 'Buzz', 'Fizz', '1627', '1628', 'Fizz', 'Buzz', '1631', 'Fizz', '1633', '1634', 'FizzBuzz', '1636', '1637', 'Fizz', '1639', 'Buzz', 'Fizz', '1642', '1643', 'Fizz', 'Buzz', '1646', 'Fizz', '1648', '1649', 'FizzBuzz', '1651', '1652', 'Fizz', '1654', 'Buzz', 'Fizz', '1657', '1658', 'Fizz', 'Buzz', '1661', 'Fizz', '1663', '1664', 'FizzBuzz', '1666', '1667', 'Fizz', '1669', 'Buzz', 'Fizz', '1672', '1673', 'Fizz', 'Buzz', '1676', 'Fizz', '1678', '1679', 'FizzBuzz', '1681', '1682', 'Fizz', '1684', 'Buzz', 'Fizz', '1687', '1688', 'Fizz', 'Buzz', '1691', 'Fizz', '1693', '1694', 'FizzBuzz', '1696', '1697', 'Fizz', '1699', 'Buzz', 'Fizz', '1702', '1703', 'Fizz', 'Buzz', '1706', 'Fizz', '1708', '1709', 'FizzBuzz', '1711', '1712', 'Fizz', '1714', 'Buzz', 'Fizz', '1717', '1718', 'Fizz', 'Buzz', '1721', 'Fizz', '1723', '1724', 'FizzBuzz', '1726', '1727', 'Fizz', '1729', 'Buzz', 'Fizz', '1732', '1733', 'Fizz', 'Buzz', '1736', 'Fizz', '1738', '1739', 'FizzBuzz', '1741', '1742', 'Fizz', '1744', 'Buzz', 'Fizz', '1747', '1748', 'Fizz', 'Buzz', '1751', 'Fizz', '1753', '1754', 'FizzBuzz', '1756', '1757', 'Fizz', '1759', 'Buzz', 'Fizz', '1762', '1763', 'Fizz', 'Buzz', '1766', 'Fizz', '1768', '1769', 'FizzBuzz', '1771', '1772', 'Fizz', '1774', 'Buzz', 'Fizz', '1777', '1778', 'Fizz', 'Buzz', '1781', 'Fizz', '1783', '1784', 'FizzBuzz', '1786', '1787', 'Fizz', '1789', 'Buzz', 'Fizz', '1792', '1793', 'Fizz', 'Buzz', '1796', 'Fizz', '1798', '1799', 'FizzBuzz', '1801', '1802', 'Fizz', '1804', 'Buzz', 'Fizz', '1807', '1808', 'Fizz', 'Buzz', '1811', 'Fizz', '1813', '1814', 'FizzBuzz', '1816', '1817', 'Fizz', '1819', 'Buzz', 'Fizz', '1822', '1823', 'Fizz', 'Buzz', '1826', 'Fizz', '1828', '1829', 'FizzBuzz', '1831', '1832', 'Fizz', '1834', 'Buzz', 'Fizz', '1837', '1838', 'Fizz', 'Buzz', '1841', 'Fizz', '1843', '1844', 'FizzBuzz', '1846', '1847', 'Fizz', '1849', 'Buzz', 'Fizz', '1852', '1853', 'Fizz', 'Buzz', '1856', 'Fizz', '1858', '1859', 'FizzBuzz', '1861', '1862', 'Fizz', '1864', 'Buzz', 'Fizz', '1867', '1868', 'Fizz', 'Buzz', '1871', 'Fizz', '1873', '1874', 'FizzBuzz', '1876', '1877', 'Fizz', '1879', 'Buzz', 'Fizz', '1882', '1883', 'Fizz', 'Buzz', '1886', 'Fizz', '1888', '1889', 'FizzBuzz', '1891', '1892', 'Fizz', '1894', 'Buzz', 'Fizz', '1897', '1898', 'Fizz', 'Buzz', '1901', 'Fizz', '1903', '1904', 'FizzBuzz', '1906', '1907', 'Fizz', '1909', 'Buzz', 'Fizz', '1912', '1913', 'Fizz', 'Buzz', '1916', 'Fizz', '1918', '1919', 'FizzBuzz', '1921', '1922', 'Fizz', '1924', 'Buzz', 'Fizz', '1927', '1928', 'Fizz', 'Buzz', '1931', 'Fizz', '1933', '1934', 'FizzBuzz', '1936', '1937', 'Fizz', '1939', 'Buzz', 'Fizz', '1942', '1943', 'Fizz', 'Buzz', '1946', 'Fizz', '1948', '1949', 'FizzBuzz', '1951', '1952', 'Fizz', '1954', 'Buzz', 'Fizz', '1957', '1958', 'Fizz', 'Buzz', '1961', 'Fizz', '1963', '1964', 'FizzBuzz', '1966', '1967', 'Fizz', '1969', 'Buzz', 'Fizz', '1972', '1973', 'Fizz', 'Buzz', '1976', 'Fizz', '1978', '1979', 'FizzBuzz', '1981', '1982', 'Fizz', '1984', 'Buzz', 'Fizz', '1987', '1988', 'Fizz', 'Buzz', '1991', 'Fizz', '1993', '1994', 'FizzBuzz', '1996', '1997', 'Fizz', '1999', 'Buzz', 'Fizz', '2002', '2003', 'Fizz', 'Buzz', '2006', 'Fizz', '2008', '2009', 'FizzBuzz', '2011', '2012', 'Fizz', '2014', 'Buzz', 'Fizz', '2017', '2018', 'Fizz', 'Buzz', '2021', 'Fizz', '2023', '2024', 'FizzBuzz', '2026', '2027', 'Fizz', '2029', 'Buzz', 'Fizz', '2032', '2033', 'Fizz', 'Buzz', '2036', 'Fizz', '2038', '2039', 'FizzBuzz', '2041', '2042', 'Fizz', '2044', 'Buzz', 'Fizz', '2047', '2048']"
      },
      {
        "input": "n = 8192",
        "output": "Execution timed out"
      },
      {
        "input": "n = 999",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz', '751', '752', 'Fizz', '754', 'Buzz', 'Fizz', '757', '758', 'Fizz', 'Buzz', '761', 'Fizz', '763', '764', 'FizzBuzz', '766', '767', 'Fizz', '769', 'Buzz', 'Fizz', '772', '773', 'Fizz', 'Buzz', '776', 'Fizz', '778', '779', 'FizzBuzz', '781', '782', 'Fizz', '784', 'Buzz', 'Fizz', '787', '788', 'Fizz', 'Buzz', '791', 'Fizz', '793', '794', 'FizzBuzz', '796', '797', 'Fizz', '799', 'Buzz', 'Fizz', '802', '803', 'Fizz', 'Buzz', '806', 'Fizz', '808', '809', 'FizzBuzz', '811', '812', 'Fizz', '814', 'Buzz', 'Fizz', '817', '818', 'Fizz', 'Buzz', '821', 'Fizz', '823', '824', 'FizzBuzz', '826', '827', 'Fizz', '829', 'Buzz', 'Fizz', '832', '833', 'Fizz', 'Buzz', '836', 'Fizz', '838', '839', 'FizzBuzz', '841', '842', 'Fizz', '844', 'Buzz', 'Fizz', '847', '848', 'Fizz', 'Buzz', '851', 'Fizz', '853', '854', 'FizzBuzz', '856', '857', 'Fizz', '859', 'Buzz', 'Fizz', '862', '863', 'Fizz', 'Buzz', '866', 'Fizz', '868', '869', 'FizzBuzz', '871', '872', 'Fizz', '874', 'Buzz', 'Fizz', '877', '878', 'Fizz', 'Buzz', '881', 'Fizz', '883', '884', 'FizzBuzz', '886', '887', 'Fizz', '889', 'Buzz', 'Fizz', '892', '893', 'Fizz', 'Buzz', '896', 'Fizz', '898', '899', 'FizzBuzz', '901', '902', 'Fizz', '904', 'Buzz', 'Fizz', '907', '908', 'Fizz', 'Buzz', '911', 'Fizz', '913', '914', 'FizzBuzz', '916', '917', 'Fizz', '919', 'Buzz', 'Fizz', '922', '923', 'Fizz', 'Buzz', '926', 'Fizz', '928', '929', 'FizzBuzz', '931', '932', 'Fizz', '934', 'Buzz', 'Fizz', '937', '938', 'Fizz', 'Buzz', '941', 'Fizz', '943', '944', 'FizzBuzz', '946', '947', 'Fizz', '949', 'Buzz', 'Fizz', '952', '953', 'Fizz', 'Buzz', '956', 'Fizz', '958', '959', 'FizzBuzz', '961', '962', 'Fizz', '964', 'Buzz', 'Fizz', '967', '968', 'Fizz', 'Buzz', '971', 'Fizz', '973', '974', 'FizzBuzz', '976', '977', 'Fizz', '979', 'Buzz', 'Fizz', '982', '983', 'Fizz', 'Buzz', '986', 'Fizz', '988', '989', 'FizzBuzz', '991', '992', 'Fizz', '994', 'Buzz', 'Fizz', '997', '998', 'Fizz']"
      },
      {
        "input": "n = 8191",
        "output": "Execution timed out"
      },
      {
        "input": "n = 8000",
        "output": "Execution timed out"
      },
      {
        "input": "n = 5555",
        "output": "Execution timed out"
      },
      {
        "input": "n = 8123",
        "output": "Execution timed out"
      },
      {
        "input": "n = 35",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz']"
      },
      {
        "input": "n = 347",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347']"
      },
      {
        "input": "n = 75",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz']"
      },
      {
        "input": "n = 5000",
        "output": "Execution timed out"
      },
      {
        "input": "n = 256",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256']"
      },
      {
        "input": "n = 9999",
        "output": "Execution timed out"
      },
      {
        "input": "n = 20",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz']"
      },
      {
        "input": "n = 81",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz']"
      },
      {
        "input": "n = 150",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz']"
      },
      {
        "input": "n = 7777",
        "output": "Execution timed out"
      },
      {
        "input": "n = 2500",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz', '751', '752', 'Fizz', '754', 'Buzz', 'Fizz', '757', '758', 'Fizz', 'Buzz', '761', 'Fizz', '763', '764', 'FizzBuzz', '766', '767', 'Fizz', '769', 'Buzz', 'Fizz', '772', '773', 'Fizz', 'Buzz', '776', 'Fizz', '778', '779', 'FizzBuzz', '781', '782', 'Fizz', '784', 'Buzz', 'Fizz', '787', '788', 'Fizz', 'Buzz', '791', 'Fizz', '793', '794', 'FizzBuzz', '796', '797', 'Fizz', '799', 'Buzz', 'Fizz', '802', '803', 'Fizz', 'Buzz', '806', 'Fizz', '808', '809', 'FizzBuzz', '811', '812', 'Fizz', '814', 'Buzz', 'Fizz', '817', '818', 'Fizz', 'Buzz', '821', 'Fizz', '823', '824', 'FizzBuzz', '826', '827', 'Fizz', '829', 'Buzz', 'Fizz', '832', '833', 'Fizz', 'Buzz', '836', 'Fizz', '838', '839', 'FizzBuzz', '841', '842', 'Fizz', '844', 'Buzz', 'Fizz', '847', '848', 'Fizz', 'Buzz', '851', 'Fizz', '853', '854', 'FizzBuzz', '856', '857', 'Fizz', '859', 'Buzz', 'Fizz', '862', '863', 'Fizz', 'Buzz', '866', 'Fizz', '868', '869', 'FizzBuzz', '871', '872', 'Fizz', '874', 'Buzz', 'Fizz', '877', '878', 'Fizz', 'Buzz', '881', 'Fizz', '883', '884', 'FizzBuzz', '886', '887', 'Fizz', '889', 'Buzz', 'Fizz', '892', '893', 'Fizz', 'Buzz', '896', 'Fizz', '898', '899', 'FizzBuzz', '901', '902', 'Fizz', '904', 'Buzz', 'Fizz', '907', '908', 'Fizz', 'Buzz', '911', 'Fizz', '913', '914', 'FizzBuzz', '916', '917', 'Fizz', '919', 'Buzz', 'Fizz', '922', '923', 'Fizz', 'Buzz', '926', 'Fizz', '928', '929', 'FizzBuzz', '931', '932', 'Fizz', '934', 'Buzz', 'Fizz', '937', '938', 'Fizz', 'Buzz', '941', 'Fizz', '943', '944', 'FizzBuzz', '946', '947', 'Fizz', '949', 'Buzz', 'Fizz', '952', '953', 'Fizz', 'Buzz', '956', 'Fizz', '958', '959', 'FizzBuzz', '961', '962', 'Fizz', '964', 'Buzz', 'Fizz', '967', '968', 'Fizz', 'Buzz', '971', 'Fizz', '973', '974', 'FizzBuzz', '976', '977', 'Fizz', '979', 'Buzz', 'Fizz', '982', '983', 'Fizz', 'Buzz', '986', 'Fizz', '988', '989', 'FizzBuzz', '991', '992', 'Fizz', '994', 'Buzz', 'Fizz', '997', '998', 'Fizz', 'Buzz', '1001', 'Fizz', '1003', '1004', 'FizzBuzz', '1006', '1007', 'Fizz', '1009', 'Buzz', 'Fizz', '1012', '1013', 'Fizz', 'Buzz', '1016', 'Fizz', '1018', '1019', 'FizzBuzz', '1021', '1022', 'Fizz', '1024', 'Buzz', 'Fizz', '1027', '1028', 'Fizz', 'Buzz', '1031', 'Fizz', '1033', '1034', 'FizzBuzz', '1036', '1037', 'Fizz', '1039', 'Buzz', 'Fizz', '1042', '1043', 'Fizz', 'Buzz', '1046', 'Fizz', '1048', '1049', 'FizzBuzz', '1051', '1052', 'Fizz', '1054', 'Buzz', 'Fizz', '1057', '1058', 'Fizz', 'Buzz', '1061', 'Fizz', '1063', '1064', 'FizzBuzz', '1066', '1067', 'Fizz', '1069', 'Buzz', 'Fizz', '1072', '1073', 'Fizz', 'Buzz', '1076', 'Fizz', '1078', '1079', 'FizzBuzz', '1081', '1082', 'Fizz', '1084', 'Buzz', 'Fizz', '1087', '1088', 'Fizz', 'Buzz', '1091', 'Fizz', '1093', '1094', 'FizzBuzz', '1096', '1097', 'Fizz', '1099', 'Buzz', 'Fizz', '1102', '1103', 'Fizz', 'Buzz', '1106', 'Fizz', '1108', '1109', 'FizzBuzz', '1111', '1112', 'Fizz', '1114', 'Buzz', 'Fizz', '1117', '1118', 'Fizz', 'Buzz', '1121', 'Fizz', '1123', '1124', 'FizzBuzz', '1126', '1127', 'Fizz', '1129', 'Buzz', 'Fizz', '1132', '1133', 'Fizz', 'Buzz', '1136', 'Fizz', '1138', '1139', 'FizzBuzz', '1141', '1142', 'Fizz', '1144', 'Buzz', 'Fizz', '1147', '1148', 'Fizz', 'Buzz', '1151', 'Fizz', '1153', '1154', 'FizzBuzz', '1156', '1157', 'Fizz', '1159', 'Buzz', 'Fizz', '1162', '1163', 'Fizz', 'Buzz', '1166', 'Fizz', '1168', '1169', 'FizzBuzz', '1171', '1172', 'Fizz', '1174', 'Buzz', 'Fizz', '1177', '1178', 'Fizz', 'Buzz', '1181', 'Fizz', '1183', '1184', 'FizzBuzz', '1186', '1187', 'Fizz', '1189', 'Buzz', 'Fizz', '1192', '1193', 'Fizz', 'Buzz', '1196', 'Fizz', '1198', '1199', 'FizzBuzz', '1201', '1202', 'Fizz', '1204', 'Buzz', 'Fizz', '1207', '1208', 'Fizz', 'Buzz', '1211', 'Fizz', '1213', '1214', 'FizzBuzz', '1216', '1217', 'Fizz', '1219', 'Buzz', 'Fizz', '1222', '1223', 'Fizz', 'Buzz', '1226', 'Fizz', '1228', '1229', 'FizzBuzz', '1231', '1232', 'Fizz', '1234', 'Buzz', 'Fizz', '1237', '1238', 'Fizz', 'Buzz', '1241', 'Fizz', '1243', '1244', 'FizzBuzz', '1246', '1247', 'Fizz', '1249', 'Buzz', 'Fizz', '1252', '1253', 'Fizz', 'Buzz', '1256', 'Fizz', '1258', '1259', 'FizzBuzz', '1261', '1262', 'Fizz', '1264', 'Buzz', 'Fizz', '1267', '1268', 'Fizz', 'Buzz', '1271', 'Fizz', '1273', '1274', 'FizzBuzz', '1276', '1277', 'Fizz', '1279', 'Buzz', 'Fizz', '1282', '1283', 'Fizz', 'Buzz', '1286', 'Fizz', '1288', '1289', 'FizzBuzz', '1291', '1292', 'Fizz', '1294', 'Buzz', 'Fizz', '1297', '1298', 'Fizz', 'Buzz', '1301', 'Fizz', '1303', '1304', 'FizzBuzz', '1306', '1307', 'Fizz', '1309', 'Buzz', 'Fizz', '1312', '1313', 'Fizz', 'Buzz', '1316', 'Fizz', '1318', '1319', 'FizzBuzz', '1321', '1322', 'Fizz', '1324', 'Buzz', 'Fizz', '1327', '1328', 'Fizz', 'Buzz', '1331', 'Fizz', '1333', '1334', 'FizzBuzz', '1336', '1337', 'Fizz', '1339', 'Buzz', 'Fizz', '1342', '1343', 'Fizz', 'Buzz', '1346', 'Fizz', '1348', '1349', 'FizzBuzz', '1351', '1352', 'Fizz', '1354', 'Buzz', 'Fizz', '1357', '1358', 'Fizz', 'Buzz', '1361', 'Fizz', '1363', '1364', 'FizzBuzz', '1366', '1367', 'Fizz', '1369', 'Buzz', 'Fizz', '1372', '1373', 'Fizz', 'Buzz', '1376', 'Fizz', '1378', '1379', 'FizzBuzz', '1381', '1382', 'Fizz', '1384', 'Buzz', 'Fizz', '1387', '1388', 'Fizz', 'Buzz', '1391', 'Fizz', '1393', '1394', 'FizzBuzz', '1396', '1397', 'Fizz', '1399', 'Buzz', 'Fizz', '1402', '1403', 'Fizz', 'Buzz', '1406', 'Fizz', '1408', '1409', 'FizzBuzz', '1411', '1412', 'Fizz', '1414', 'Buzz', 'Fizz', '1417', '1418', 'Fizz', 'Buzz', '1421', 'Fizz', '1423', '1424', 'FizzBuzz', '1426', '1427', 'Fizz', '1429', 'Buzz', 'Fizz', '1432', '1433', 'Fizz', 'Buzz', '1436', 'Fizz', '1438', '1439', 'FizzBuzz', '1441', '1442', 'Fizz', '1444', 'Buzz', 'Fizz', '1447', '1448', 'Fizz', 'Buzz', '1451', 'Fizz', '1453', '1454', 'FizzBuzz', '1456', '1457', 'Fizz', '1459', 'Buzz', 'Fizz', '1462', '1463', 'Fizz', 'Buzz', '1466', 'Fizz', '1468', '1469', 'FizzBuzz', '1471', '1472', 'Fizz', '1474', 'Buzz', 'Fizz', '1477', '1478', 'Fizz', 'Buzz', '1481', 'Fizz', '1483', '1484', 'FizzBuzz', '1486', '1487', 'Fizz', '1489', 'Buzz', 'Fizz', '1492', '1493', 'Fizz', 'Buzz', '1496', 'Fizz', '1498', '1499', 'FizzBuzz', '1501', '1502', 'Fizz', '1504', 'Buzz', 'Fizz', '1507', '1508', 'Fizz', 'Buzz', '1511', 'Fizz', '1513', '1514', 'FizzBuzz', '1516', '1517', 'Fizz', '1519', 'Buzz', 'Fizz', '1522', '1523', 'Fizz', 'Buzz', '1526', 'Fizz', '1528', '1529', 'FizzBuzz', '1531', '1532', 'Fizz', '1534', 'Buzz', 'Fizz', '1537', '1538', 'Fizz', 'Buzz', '1541', 'Fizz', '1543', '1544', 'FizzBuzz', '1546', '1547', 'Fizz', '1549', 'Buzz', 'Fizz', '1552', '1553', 'Fizz', 'Buzz', '1556', 'Fizz', '1558', '1559', 'FizzBuzz', '1561', '1562', 'Fizz', '1564', 'Buzz', 'Fizz', '1567', '1568', 'Fizz', 'Buzz', '1571', 'Fizz', '1573', '1574', 'FizzBuzz', '1576', '1577', 'Fizz', '1579', 'Buzz', 'Fizz', '1582', '1583', 'Fizz', 'Buzz', '1586', 'Fizz', '1588', '1589', 'FizzBuzz', '1591', '1592', 'Fizz', '1594', 'Buzz', 'Fizz', '1597', '1598', 'Fizz', 'Buzz', '1601', 'Fizz', '1603', '1604', 'FizzBuzz', '1606', '1607', 'Fizz', '1609', 'Buzz', 'Fizz', '1612', '1613', 'Fizz', 'Buzz', '1616', 'Fizz', '1618', '1619', 'FizzBuzz', '1621', '1622', 'Fizz', '1624', 'Buzz', 'Fizz', '1627', '1628', 'Fizz', 'Buzz', '1631', 'Fizz', '1633', '1634', 'FizzBuzz', '1636', '1637', 'Fizz', '1639', 'Buzz', 'Fizz', '1642', '1643', 'Fizz', 'Buzz', '1646', 'Fizz', '1648', '1649', 'FizzBuzz', '1651', '1652', 'Fizz', '1654', 'Buzz', 'Fizz', '1657', '1658', 'Fizz', 'Buzz', '1661', 'Fizz', '1663', '1664', 'FizzBuzz', '1666', '1667', 'Fizz', '1669', 'Buzz', 'Fizz', '1672', '1673', 'Fizz', 'Buzz', '1676', 'Fizz', '1678', '1679', 'FizzBuzz', '1681', '1682', 'Fizz', '1684', 'Buzz', 'Fizz', '1687', '1688', 'Fizz', 'Buzz', '1691', 'Fizz', '1693', '1694', 'FizzBuzz', '1696', '1697', 'Fizz', '1699', 'Buzz', 'Fizz', '1702', '1703', 'Fizz', 'Buzz', '1706', 'Fizz', '1708', '1709', 'FizzBuzz', '1711', '1712', 'Fizz', '1714', 'Buzz', 'Fizz', '1717', '1718', 'Fizz', 'Buzz', '1721', 'Fizz', '1723', '1724', 'FizzBuzz', '1726', '1727', 'Fizz', '1729', 'Buzz', 'Fizz', '1732', '1733', 'Fizz', 'Buzz', '1736', 'Fizz', '1738', '1739', 'FizzBuzz', '1741', '1742', 'Fizz', '1744', 'Buzz', 'Fizz', '1747', '1748', 'Fizz', 'Buzz', '1751', 'Fizz', '1753', '1754', 'FizzBuzz', '1756', '1757', 'Fizz', '1759', 'Buzz', 'Fizz', '1762', '1763', 'Fizz', 'Buzz', '1766', 'Fizz', '1768', '1769', 'FizzBuzz', '1771', '1772', 'Fizz', '1774', 'Buzz', 'Fizz', '1777', '1778', 'Fizz', 'Buzz', '1781', 'Fizz', '1783', '1784', 'FizzBuzz', '1786', '1787', 'Fizz', '1789', 'Buzz', 'Fizz', '1792', '1793', 'Fizz', 'Buzz', '1796', 'Fizz', '1798', '1799', 'FizzBuzz', '1801', '1802', 'Fizz', '1804', 'Buzz', 'Fizz', '1807', '1808', 'Fizz', 'Buzz', '1811', 'Fizz', '1813', '1814', 'FizzBuzz', '1816', '1817', 'Fizz', '1819', 'Buzz', 'Fizz', '1822', '1823', 'Fizz', 'Buzz', '1826', 'Fizz', '1828', '1829', 'FizzBuzz', '1831', '1832', 'Fizz', '1834', 'Buzz', 'Fizz', '1837', '1838', 'Fizz', 'Buzz', '1841', 'Fizz', '1843', '1844', 'FizzBuzz', '1846', '1847', 'Fizz', '1849', 'Buzz', 'Fizz', '1852', '1853', 'Fizz', 'Buzz', '1856', 'Fizz', '1858', '1859', 'FizzBuzz', '1861', '1862', 'Fizz', '1864', 'Buzz', 'Fizz', '1867', '1868', 'Fizz', 'Buzz', '1871', 'Fizz', '1873', '1874', 'FizzBuzz', '1876', '1877', 'Fizz', '1879', 'Buzz', 'Fizz', '1882', '1883', 'Fizz', 'Buzz', '1886', 'Fizz', '1888', '1889', 'FizzBuzz', '1891', '1892', 'Fizz', '1894', 'Buzz', 'Fizz', '1897', '1898', 'Fizz', 'Buzz', '1901', 'Fizz', '1903', '1904', 'FizzBuzz', '1906', '1907', 'Fizz', '1909', 'Buzz', 'Fizz', '1912', '1913', 'Fizz', 'Buzz', '1916', 'Fizz', '1918', '1919', 'FizzBuzz', '1921', '1922', 'Fizz', '1924', 'Buzz', 'Fizz', '1927', '1928', 'Fizz', 'Buzz', '1931', 'Fizz', '1933', '1934', 'FizzBuzz', '1936', '1937', 'Fizz', '1939', 'Buzz', 'Fizz', '1942', '1943', 'Fizz', 'Buzz', '1946', 'Fizz', '1948', '1949', 'FizzBuzz', '1951', '1952', 'Fizz', '1954', 'Buzz', 'Fizz', '1957', '1958', 'Fizz', 'Buzz', '1961', 'Fizz', '1963', '1964', 'FizzBuzz', '1966', '1967', 'Fizz', '1969', 'Buzz', 'Fizz', '1972', '1973', 'Fizz', 'Buzz', '1976', 'Fizz', '1978', '1979', 'FizzBuzz', '1981', '1982', 'Fizz', '1984', 'Buzz', 'Fizz', '1987', '1988', 'Fizz', 'Buzz', '1991', 'Fizz', '1993', '1994', 'FizzBuzz', '1996', '1997', 'Fizz', '1999', 'Buzz', 'Fizz', '2002', '2003', 'Fizz', 'Buzz', '2006', 'Fizz', '2008', '2009', 'FizzBuzz', '2011', '2012', 'Fizz', '2014', 'Buzz', 'Fizz', '2017', '2018', 'Fizz', 'Buzz', '2021', 'Fizz', '2023', '2024', 'FizzBuzz', '2026', '2027', 'Fizz', '2029', 'Buzz', 'Fizz', '2032', '2033', 'Fizz', 'Buzz', '2036', 'Fizz', '2038', '2039', 'FizzBuzz', '2041', '2042', 'Fizz', '2044', 'Buzz', 'Fizz', '2047', '2048', 'Fizz', 'Buzz', '2051', 'Fizz', '2053', '2054', 'FizzBuzz', '2056', '2057', 'Fizz', '2059', 'Buzz', 'Fizz', '2062', '2063', 'Fizz', 'Buzz', '2066', 'Fizz', '2068', '2069', 'FizzBuzz', '2071', '2072', 'Fizz', '2074', 'Buzz', 'Fizz', '2077', '2078', 'Fizz', 'Buzz', '2081', 'Fizz', '2083', '2084', 'FizzBuzz', '2086', '2087', 'Fizz', '2089', 'Buzz', 'Fizz', '2092', '2093', 'Fizz', 'Buzz', '2096', 'Fizz', '2098', '2099', 'FizzBuzz', '2101', '2102', 'Fizz', '2104', 'Buzz', 'Fizz', '2107', '2108', 'Fizz', 'Buzz', '2111', 'Fizz', '2113', '2114', 'FizzBuzz', '2116', '2117', 'Fizz', '2119', 'Buzz', 'Fizz', '2122', '2123', 'Fizz', 'Buzz', '2126', 'Fizz', '2128', '2129', 'FizzBuzz', '2131', '2132', 'Fizz', '2134', 'Buzz', 'Fizz', '2137', '2138', 'Fizz', 'Buzz', '2141', 'Fizz', '2143', '2144', 'FizzBuzz', '2146', '2147', 'Fizz', '2149', 'Buzz', 'Fizz', '2152', '2153', 'Fizz', 'Buzz', '2156', 'Fizz', '2158', '2159', 'FizzBuzz', '2161', '2162', 'Fizz', '2164', 'Buzz', 'Fizz', '2167', '2168', 'Fizz', 'Buzz', '2171', 'Fizz', '2173', '2174', 'FizzBuzz', '2176', '2177', 'Fizz', '2179', 'Buzz', 'Fizz', '2182', '2183', 'Fizz', 'Buzz', '2186', 'Fizz', '2188', '2189', 'FizzBuzz', '2191', '2192', 'Fizz', '2194', 'Buzz', 'Fizz', '2197', '2198', 'Fizz', 'Buzz', '2201', 'Fizz', '2203', '2204', 'FizzBuzz', '2206', '2207', 'Fizz', '2209', 'Buzz', 'Fizz', '2212', '2213', 'Fizz', 'Buzz', '2216', 'Fizz', '2218', '2219', 'FizzBuzz', '2221', '2222', 'Fizz', '2224', 'Buzz', 'Fizz', '2227', '2228', 'Fizz', 'Buzz', '2231', 'Fizz', '2233', '2234', 'FizzBuzz', '2236', '2237', 'Fizz', '2239', 'Buzz', 'Fizz', '2242', '2243', 'Fizz', 'Buzz', '2246', 'Fizz', '2248', '2249', 'FizzBuzz', '2251', '2252', 'Fizz', '2254', 'Buzz', 'Fizz', '2257', '2258', 'Fizz', 'Buzz', '2261', 'Fizz', '2263', '2264', 'FizzBuzz', '2266', '2267', 'Fizz', '2269', 'Buzz', 'Fizz', '2272', '2273', 'Fizz', 'Buzz', '2276', 'Fizz', '2278', '2279', 'FizzBuzz', '2281', '2282', 'Fizz', '2284', 'Buzz', 'Fizz', '2287', '2288', 'Fizz', 'Buzz', '2291', 'Fizz', '2293', '2294', 'FizzBuzz', '2296', '2297', 'Fizz', '2299', 'Buzz', 'Fizz', '2302', '2303', 'Fizz', 'Buzz', '2306', 'Fizz', '2308', '2309', 'FizzBuzz', '2311', '2312', 'Fizz', '2314', 'Buzz', 'Fizz', '2317', '2318', 'Fizz', 'Buzz', '2321', 'Fizz', '2323', '2324', 'FizzBuzz', '2326', '2327', 'Fizz', '2329', 'Buzz', 'Fizz', '2332', '2333', 'Fizz', 'Buzz', '2336', 'Fizz', '2338', '2339', 'FizzBuzz', '2341', '2342', 'Fizz', '2344', 'Buzz', 'Fizz', '2347', '2348', 'Fizz', 'Buzz', '2351', 'Fizz', '2353', '2354', 'FizzBuzz', '2356', '2357', 'Fizz', '2359', 'Buzz', 'Fizz', '2362', '2363', 'Fizz', 'Buzz', '2366', 'Fizz', '2368', '2369', 'FizzBuzz', '2371', '2372', 'Fizz', '2374', 'Buzz', 'Fizz', '2377', '2378', 'Fizz', 'Buzz', '2381', 'Fizz', '2383', '2384', 'FizzBuzz', '2386', '2387', 'Fizz', '2389', 'Buzz', 'Fizz', '2392', '2393', 'Fizz', 'Buzz', '2396', 'Fizz', '2398', '2399', 'FizzBuzz', '2401', '2402', 'Fizz', '2404', 'Buzz', 'Fizz', '2407', '2408', 'Fizz', 'Buzz', '2411', 'Fizz', '2413', '2414', 'FizzBuzz', '2416', '2417', 'Fizz', '2419', 'Buzz', 'Fizz', '2422', '2423', 'Fizz', 'Buzz', '2426', 'Fizz', '2428', '2429', 'FizzBuzz', '2431', '2432', 'Fizz', '2434', 'Buzz', 'Fizz', '2437', '2438', 'Fizz', 'Buzz', '2441', 'Fizz', '2443', '2444', 'FizzBuzz', '2446', '2447', 'Fizz', '2449', 'Buzz', 'Fizz', '2452', '2453', 'Fizz', 'Buzz', '2456', 'Fizz', '2458', '2459', 'FizzBuzz', '2461', '2462', 'Fizz', '2464', 'Buzz', 'Fizz', '2467', '2468', 'Fizz', 'Buzz', '2471', 'Fizz', '2473', '2474', 'FizzBuzz', '2476', '2477', 'Fizz', '2479', 'Buzz', 'Fizz', '2482', '2483', 'Fizz', 'Buzz', '2486', 'Fizz', '2488', '2489', 'FizzBuzz', '2491', '2492', 'Fizz', '2494', 'Buzz', 'Fizz', '2497', '2498', 'Fizz', 'Buzz']"
      },
      {
        "input": "n = 200",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz']"
      },
      {
        "input": "n = 83",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83']"
      },
      {
        "input": "n = 6",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz']"
      },
      {
        "input": "n = 4500",
        "output": "Execution timed out"
      },
      {
        "input": "n = 120",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz']"
      },
      {
        "input": "n = 6000",
        "output": "Execution timed out"
      },
      {
        "input": "n = 750",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz', '106', '107', 'Fizz', '109', 'Buzz', 'Fizz', '112', '113', 'Fizz', 'Buzz', '116', 'Fizz', '118', '119', 'FizzBuzz', '121', '122', 'Fizz', '124', 'Buzz', 'Fizz', '127', '128', 'Fizz', 'Buzz', '131', 'Fizz', '133', '134', 'FizzBuzz', '136', '137', 'Fizz', '139', 'Buzz', 'Fizz', '142', '143', 'Fizz', 'Buzz', '146', 'Fizz', '148', '149', 'FizzBuzz', '151', '152', 'Fizz', '154', 'Buzz', 'Fizz', '157', '158', 'Fizz', 'Buzz', '161', 'Fizz', '163', '164', 'FizzBuzz', '166', '167', 'Fizz', '169', 'Buzz', 'Fizz', '172', '173', 'Fizz', 'Buzz', '176', 'Fizz', '178', '179', 'FizzBuzz', '181', '182', 'Fizz', '184', 'Buzz', 'Fizz', '187', '188', 'Fizz', 'Buzz', '191', 'Fizz', '193', '194', 'FizzBuzz', '196', '197', 'Fizz', '199', 'Buzz', 'Fizz', '202', '203', 'Fizz', 'Buzz', '206', 'Fizz', '208', '209', 'FizzBuzz', '211', '212', 'Fizz', '214', 'Buzz', 'Fizz', '217', '218', 'Fizz', 'Buzz', '221', 'Fizz', '223', '224', 'FizzBuzz', '226', '227', 'Fizz', '229', 'Buzz', 'Fizz', '232', '233', 'Fizz', 'Buzz', '236', 'Fizz', '238', '239', 'FizzBuzz', '241', '242', 'Fizz', '244', 'Buzz', 'Fizz', '247', '248', 'Fizz', 'Buzz', '251', 'Fizz', '253', '254', 'FizzBuzz', '256', '257', 'Fizz', '259', 'Buzz', 'Fizz', '262', '263', 'Fizz', 'Buzz', '266', 'Fizz', '268', '269', 'FizzBuzz', '271', '272', 'Fizz', '274', 'Buzz', 'Fizz', '277', '278', 'Fizz', 'Buzz', '281', 'Fizz', '283', '284', 'FizzBuzz', '286', '287', 'Fizz', '289', 'Buzz', 'Fizz', '292', '293', 'Fizz', 'Buzz', '296', 'Fizz', '298', '299', 'FizzBuzz', '301', '302', 'Fizz', '304', 'Buzz', 'Fizz', '307', '308', 'Fizz', 'Buzz', '311', 'Fizz', '313', '314', 'FizzBuzz', '316', '317', 'Fizz', '319', 'Buzz', 'Fizz', '322', '323', 'Fizz', 'Buzz', '326', 'Fizz', '328', '329', 'FizzBuzz', '331', '332', 'Fizz', '334', 'Buzz', 'Fizz', '337', '338', 'Fizz', 'Buzz', '341', 'Fizz', '343', '344', 'FizzBuzz', '346', '347', 'Fizz', '349', 'Buzz', 'Fizz', '352', '353', 'Fizz', 'Buzz', '356', 'Fizz', '358', '359', 'FizzBuzz', '361', '362', 'Fizz', '364', 'Buzz', 'Fizz', '367', '368', 'Fizz', 'Buzz', '371', 'Fizz', '373', '374', 'FizzBuzz', '376', '377', 'Fizz', '379', 'Buzz', 'Fizz', '382', '383', 'Fizz', 'Buzz', '386', 'Fizz', '388', '389', 'FizzBuzz', '391', '392', 'Fizz', '394', 'Buzz', 'Fizz', '397', '398', 'Fizz', 'Buzz', '401', 'Fizz', '403', '404', 'FizzBuzz', '406', '407', 'Fizz', '409', 'Buzz', 'Fizz', '412', '413', 'Fizz', 'Buzz', '416', 'Fizz', '418', '419', 'FizzBuzz', '421', '422', 'Fizz', '424', 'Buzz', 'Fizz', '427', '428', 'Fizz', 'Buzz', '431', 'Fizz', '433', '434', 'FizzBuzz', '436', '437', 'Fizz', '439', 'Buzz', 'Fizz', '442', '443', 'Fizz', 'Buzz', '446', 'Fizz', '448', '449', 'FizzBuzz', '451', '452', 'Fizz', '454', 'Buzz', 'Fizz', '457', '458', 'Fizz', 'Buzz', '461', 'Fizz', '463', '464', 'FizzBuzz', '466', '467', 'Fizz', '469', 'Buzz', 'Fizz', '472', '473', 'Fizz', 'Buzz', '476', 'Fizz', '478', '479', 'FizzBuzz', '481', '482', 'Fizz', '484', 'Buzz', 'Fizz', '487', '488', 'Fizz', 'Buzz', '491', 'Fizz', '493', '494', 'FizzBuzz', '496', '497', 'Fizz', '499', 'Buzz', 'Fizz', '502', '503', 'Fizz', 'Buzz', '506', 'Fizz', '508', '509', 'FizzBuzz', '511', '512', 'Fizz', '514', 'Buzz', 'Fizz', '517', '518', 'Fizz', 'Buzz', '521', 'Fizz', '523', '524', 'FizzBuzz', '526', '527', 'Fizz', '529', 'Buzz', 'Fizz', '532', '533', 'Fizz', 'Buzz', '536', 'Fizz', '538', '539', 'FizzBuzz', '541', '542', 'Fizz', '544', 'Buzz', 'Fizz', '547', '548', 'Fizz', 'Buzz', '551', 'Fizz', '553', '554', 'FizzBuzz', '556', '557', 'Fizz', '559', 'Buzz', 'Fizz', '562', '563', 'Fizz', 'Buzz', '566', 'Fizz', '568', '569', 'FizzBuzz', '571', '572', 'Fizz', '574', 'Buzz', 'Fizz', '577', '578', 'Fizz', 'Buzz', '581', 'Fizz', '583', '584', 'FizzBuzz', '586', '587', 'Fizz', '589', 'Buzz', 'Fizz', '592', '593', 'Fizz', 'Buzz', '596', 'Fizz', '598', '599', 'FizzBuzz', '601', '602', 'Fizz', '604', 'Buzz', 'Fizz', '607', '608', 'Fizz', 'Buzz', '611', 'Fizz', '613', '614', 'FizzBuzz', '616', '617', 'Fizz', '619', 'Buzz', 'Fizz', '622', '623', 'Fizz', 'Buzz', '626', 'Fizz', '628', '629', 'FizzBuzz', '631', '632', 'Fizz', '634', 'Buzz', 'Fizz', '637', '638', 'Fizz', 'Buzz', '641', 'Fizz', '643', '644', 'FizzBuzz', '646', '647', 'Fizz', '649', 'Buzz', 'Fizz', '652', '653', 'Fizz', 'Buzz', '656', 'Fizz', '658', '659', 'FizzBuzz', '661', '662', 'Fizz', '664', 'Buzz', 'Fizz', '667', '668', 'Fizz', 'Buzz', '671', 'Fizz', '673', '674', 'FizzBuzz', '676', '677', 'Fizz', '679', 'Buzz', 'Fizz', '682', '683', 'Fizz', 'Buzz', '686', 'Fizz', '688', '689', 'FizzBuzz', '691', '692', 'Fizz', '694', 'Buzz', 'Fizz', '697', '698', 'Fizz', 'Buzz', '701', 'Fizz', '703', '704', 'FizzBuzz', '706', '707', 'Fizz', '709', 'Buzz', 'Fizz', '712', '713', 'Fizz', 'Buzz', '716', 'Fizz', '718', '719', 'FizzBuzz', '721', '722', 'Fizz', '724', 'Buzz', 'Fizz', '727', '728', 'Fizz', 'Buzz', '731', 'Fizz', '733', '734', 'FizzBuzz', '736', '737', 'Fizz', '739', 'Buzz', 'Fizz', '742', '743', 'Fizz', 'Buzz', '746', 'Fizz', '748', '749', 'FizzBuzz']"
      },
      {
        "input": "n = 105",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz', '101', 'Fizz', '103', '104', 'FizzBuzz']"
      },
      {
        "input": "n = 55",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz']"
      },
      {
        "input": "n = 10",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz']"
      },
      {
        "input": "n = 25",
        "output": "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz']"
      },
      {
        "input": "n = 20000 - 15000",
        "output": "Error: Solution.fizzBuzz() missing 1 required positional argument: 'n'"
      }
    ]
  },
  {
    "id": 1426,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table"
    ],
    "problemDescription": "Given an integer array arr, count how many elements x there are, such that x + 1 is also in arr. If there are duplicates in arr, count them separately.\n\u00a0\nExample 1:\n\nInput: arr = [1,2,3]\nOutput: 2\nExplanation: 1 and 2 are counted cause 2 and 3 are in arr.\n\nExample 2:\n\nInput: arr = [1,1,3,3,5,5,7,7]\nOutput: 0\nExplanation: No numbers are counted, cause there is no 2, 4, 6, or 8 in arr.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 1000\n0 <= arr[i] <= 1000\n\n",
    "starterCode": "class Solution:\n    def countElements(self, arr: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "arr = [10,11,12,13,14,15]",
        "output": "5"
      },
      {
        "input": "arr = [5,4,3,2,1]",
        "output": "4"
      },
      {
        "input": "arr = [1,2,3]",
        "output": "2"
      },
      {
        "input": "arr = [1,2]",
        "output": "1"
      },
      {
        "input": "arr = [0]",
        "output": "0"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "15"
      },
      {
        "input": "arr = [1,2,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "arr = [1,1,2,2,2,3,4]",
        "output": "6"
      },
      {
        "input": "arr = [500,501,502,503,504]",
        "output": "4"
      },
      {
        "input": "arr = [0,0,1,1,2,2,3,3,4,4]",
        "output": "8"
      },
      {
        "input": "arr = [5,6,7,8,9,10]",
        "output": "5"
      },
      {
        "input": "arr = [1]",
        "output": "0"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "arr = [1,2,2,3,3,3,4,4,5]",
        "output": "8"
      },
      {
        "input": "arr = [10,9,8,7,6,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "arr = [1000,999,998,997,996]",
        "output": "4"
      },
      {
        "input": "arr = [1,1,2,2,2,3,3,4,4,4,4]",
        "output": "7"
      },
      {
        "input": "arr = [10,11,12,13,14]",
        "output": "4"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "arr = [500,501,502,503,504,505]",
        "output": "5"
      },
      {
        "input": "arr = [0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "arr = [0,0,0,0]",
        "output": "0"
      },
      {
        "input": "arr = [1,2,2,3,3,4,4,5]",
        "output": "7"
      },
      {
        "input": "arr = [1,1,3,3,5,5,7,7]",
        "output": "0"
      },
      {
        "input": "arr = [0,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "arr = [1000]",
        "output": "0"
      },
      {
        "input": "arr = [0,1000]",
        "output": "0"
      },
      {
        "input": "arr = [1,1,2,2,3,3,4,4]",
        "output": "6"
      },
      {
        "input": "arr = [1,3,2,3,5,0]",
        "output": "3"
      },
      {
        "input": "arr = [100,101,102,103,104,105,106,107,108,109,110]",
        "output": "10"
      },
      {
        "input": "arr = [1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980]",
        "output": "20"
      },
      {
        "input": "arr = [999,1000,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010]",
        "output": "12"
      },
      {
        "input": "arr = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106]",
        "output": "0"
      },
      {
        "input": "arr = [750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780]",
        "output": "30"
      },
      {
        "input": "arr = [500, 500, 501, 502, 503, 503, 503, 504, 505, 505, 506, 507, 508]",
        "output": "12"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,19,21,23,25]",
        "output": "0"
      },
      {
        "input": "arr = [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325]",
        "output": "25"
      },
      {
        "input": "arr = [1,2,2,3,3,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10]",
        "output": "32"
      },
      {
        "input": "arr = [999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009]",
        "output": "10"
      },
      {
        "input": "arr = [5,4,3,2,1,0,-1,-2,-3,-4,-5]",
        "output": "10"
      },
      {
        "input": "arr = [999,1000,998,997,996,995,994,993,992,991,990]",
        "output": "10"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "24"
      },
      {
        "input": "arr = [1,1,1,1,2,2,3,3,3,4,4,5,5,5,5]",
        "output": "11"
      },
      {
        "input": "arr = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "0"
      },
      {
        "input": "arr = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]",
        "output": "12"
      },
      {
        "input": "arr = [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170]",
        "output": "20"
      },
      {
        "input": "arr = [0,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5]",
        "output": "14"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "0"
      },
      {
        "input": "arr = [1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6]",
        "output": "19"
      },
      {
        "input": "arr = [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313]",
        "output": "14"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99]",
        "output": "0"
      },
      {
        "input": "arr = [1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]",
        "output": "15"
      },
      {
        "input": "arr = [5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 13, 14, 15]",
        "output": "12"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "29"
      },
      {
        "input": "arr = [1,1,1,1,2,2,2,3,3,4,5,5,5,5,6,7,8,8,8,9]",
        "output": "19"
      },
      {
        "input": "arr = [500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530]",
        "output": "30"
      },
      {
        "input": "arr = [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "23"
      },
      {
        "input": "arr = [100,101,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]",
        "output": "16"
      },
      {
        "input": "arr = [999,1000,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981]",
        "output": "19"
      },
      {
        "input": "arr = [0, 0, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "12"
      },
      {
        "input": "arr = [1,2,3,3,4,5,5,5,6,6,6,7,7,8,8,9,9,10,10]",
        "output": "17"
      },
      {
        "input": "arr = [400,401,401,402,402,403,403,404,404,405,405,406,406,407,407,408,408,409,409]",
        "output": "17"
      },
      {
        "input": "arr = [0, 0, 0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "14"
      },
      {
        "input": "arr = [500,501,501,502,503,504,505,506,507,508,509,510]",
        "output": "11"
      },
      {
        "input": "arr = [333,334,334,335,336,337,337,338,339,340,341,342,343,344,345]",
        "output": "14"
      },
      {
        "input": "arr = [5,5,5,6,6,7,7,7,8,8,9,9,9,10,10,11,11,12,12,13,13]",
        "output": "19"
      },
      {
        "input": "arr = [300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315]",
        "output": "15"
      },
      {
        "input": "arr = [500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515]",
        "output": "15"
      },
      {
        "input": "arr = [0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]",
        "output": "0"
      },
      {
        "input": "arr = [500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30]",
        "output": "57"
      },
      {
        "input": "arr = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]",
        "output": "10"
      },
      {
        "input": "arr = [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315]",
        "output": "15"
      },
      {
        "input": "arr = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]",
        "output": "14"
      },
      {
        "input": "arr = [0,1,1,1,2,2,3,4,5,5,5,6,7,8,9,9,10]",
        "output": "16"
      },
      {
        "input": "arr = [1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010]",
        "output": "10"
      },
      {
        "input": "arr = [998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006]",
        "output": "8"
      },
      {
        "input": "arr = [10,10,10,10,10,11,12,12,12,12,12,13,14,15,15,15,15,15,16,17,18,19,20,21,21,21,21,21,22,23,24,25,26,27,28,29,30]",
        "output": "36"
      },
      {
        "input": "arr = [100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110]",
        "output": "20"
      },
      {
        "input": "arr = [300, 301, 301, 302, 302, 302, 303, 303, 303, 303]",
        "output": "6"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "0"
      },
      {
        "input": "arr = [3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105]",
        "output": "0"
      },
      {
        "input": "arr = [1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6]",
        "output": "20"
      },
      {
        "input": "arr = [100,101,102,103,104,105,106,107,108,109,200,201,202,203,204,205]",
        "output": "14"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2]",
        "output": "15"
      },
      {
        "input": "arr = [1,2,3,3,4,5,5,5,6,6,7,7,8,8,9,9,10,10,10,11,11,12,12]",
        "output": "21"
      },
      {
        "input": "arr = [450, 451, 451, 451, 452, 452, 452, 452, 452, 453, 454, 455]",
        "output": "11"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "0"
      },
      {
        "input": "arr = [200,201,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219]",
        "output": "20"
      },
      {
        "input": "arr = [0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]",
        "output": "12"
      },
      {
        "input": "arr = [0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,6,6,6]",
        "output": "28"
      },
      {
        "input": "arr = [100,200,300,400,500,600,700,800,900,1000,101,201,301,401,501,601,701,801,901,1001]",
        "output": "10"
      },
      {
        "input": "arr = [100,200,300,400,500,600,700,800,900,1000,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "19"
      },
      {
        "input": "arr = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12]",
        "output": "22"
      },
      {
        "input": "arr = [1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8]",
        "output": "28"
      },
      {
        "input": "arr = [100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119]",
        "output": "19"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "0"
      },
      {
        "input": "arr = [0,0,1,1,1,2,2,3,3,3,3,4,4,5,6,6,6,6,7,8,9,10]",
        "output": "21"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "19"
      },
      {
        "input": "arr = [10,10,20,20,30,30,40,40,50,50,60,60,70,70,80,80,90,90,100,100]",
        "output": "0"
      },
      {
        "input": "arr = [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985]",
        "output": "14"
      },
      {
        "input": "arr = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "15"
      },
      {
        "input": "arr = [1,2,3,3,3,4,5,5,5,5,6,7,8,9,10,10,10,10,10,11,12,13,14,15,16,17,18,19,20,20,20,21,22,23,24,25,26,27,28,29,30,30,30,30]",
        "output": "40"
      },
      {
        "input": "arr = [200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213]",
        "output": "13"
      },
      {
        "input": "arr = [500, 501, 502, 503, 504, 505, 506, 507, 508, 509]",
        "output": "9"
      },
      {
        "input": "arr = [400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430]",
        "output": "30"
      },
      {
        "input": "arr = [50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "50"
      },
      {
        "input": "arr = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "10"
      },
      {
        "input": "arr = [998,999,1000]",
        "output": "2"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1001, 1002, 1003, 1004, 1005]",
        "output": "5"
      },
      {
        "input": "arr = [3,4,4,5,5,5,6,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14]",
        "output": "23"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "19"
      },
      {
        "input": "arr = [200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185]",
        "output": "15"
      },
      {
        "input": "arr = [5,6,6,7,8,8,8,9,9,10,11,11,12,13,13,14,15,16,17,18,19,20]",
        "output": "21"
      },
      {
        "input": "arr = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]",
        "output": "19"
      },
      {
        "input": "arr = [0,0,0,0,1,1,1,1,2,2,2,3,3,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "24"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "19"
      },
      {
        "input": "arr = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7]",
        "output": "21"
      },
      {
        "input": "arr = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "0"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "0"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "0"
      },
      {
        "input": "arr = [1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985]",
        "output": "15"
      },
      {
        "input": "arr = [500,501,502,502,503,504,504,505,506,506,507,508,508,509,509,510,511,511,512,512]",
        "output": "18"
      },
      {
        "input": "arr = [999, 1000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
        "output": "14"
      }
    ]
  },
  {
    "id": 2169,
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Simulation"
    ],
    "problemDescription": "You are given two non-negative integers num1 and num2.\nIn one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2.\n\nFor example, if num1 = 5 and num2 = 4, subtract num2 from num1, thus obtaining num1 = 1 and num2 = 4. However, if num1 = 4 and num2 = 5, after one operation, num1 = 4 and num2 = 1.\n\nReturn the number of operations required to make either num1 = 0 or num2 = 0.\n\u00a0\nExample 1:\n\nInput: num1 = 2, num2 = 3\nOutput: 3\nExplanation: \n- Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.\n- Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1.\n- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.\nNow num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.\nSo the total number of operations required is 3.\n\nExample 2:\n\nInput: num1 = 10, num2 = 10\nOutput: 1\nExplanation: \n- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.\nNow num1 = 0 and num2 = 10. Since num1 == 0, we are done.\nSo the total number of operations required is 1.\n\n\u00a0\nConstraints:\n\n0 <= num1, num2 <= 105\n\n",
    "starterCode": "class Solution:\n    def countOperations(self, num1: int, num2: int) -> int:\n        ",
    "testCases": [
      {
        "input": "num1 = 0, num2 = 5",
        "output": "0"
      },
      {
        "input": "num1 = 100, num2 = 1",
        "output": "100"
      },
      {
        "input": "num1 = 123, num2 = 456",
        "output": "12"
      },
      {
        "input": "num1 = 8, num2 = 12",
        "output": "3"
      },
      {
        "input": "num1 = 1, num2 = 1",
        "output": "1"
      },
      {
        "input": "num1 = 100000, num2 = 100000",
        "output": "1"
      },
      {
        "input": "num1 = 100000, num2 = 1",
        "output": "100000"
      },
      {
        "input": "num1 = 100, num2 = 50",
        "output": "2"
      },
      {
        "input": "num1 = 5, num2 = 0",
        "output": "0"
      },
      {
        "input": "num1 = 2, num2 = 3",
        "output": "3"
      },
      {
        "input": "num1 = 10, num2 = 10",
        "output": "1"
      },
      {
        "input": "num1 = 7, num2 = 3",
        "output": "5"
      },
      {
        "input": "num1 = 81, num2 = 27",
        "output": "3"
      },
      {
        "input": "num1 = 99999, num2 = 1",
        "output": "99999"
      },
      {
        "input": "num1 = 333, num2 = 111",
        "output": "3"
      },
      {
        "input": "num1 = 10000, num2 = 9999",
        "output": "10000"
      },
      {
        "input": "num1 = 2020, num2 = 1870",
        "output": "22"
      },
      {
        "input": "num1 = 60, num2 = 20",
        "output": "3"
      },
      {
        "input": "num1 = 101, num2 = 100",
        "output": "101"
      },
      {
        "input": "num1 = 42, num2 = 29",
        "output": "10"
      },
      {
        "input": "num1 = 100000, num2 = 0",
        "output": "0"
      },
      {
        "input": "num1 = 45678, num2 = 45678",
        "output": "1"
      },
      {
        "input": "num1 = 88888, num2 = 22222",
        "output": "4"
      },
      {
        "input": "num1 = 618, num2 = 359",
        "output": "15"
      },
      {
        "input": "num1 = 100000, num2 = 99999",
        "output": "100000"
      },
      {
        "input": "num1 = 42, num2 = 7",
        "output": "6"
      },
      {
        "input": "num1 = 98765, num2 = 43210",
        "output": "1241"
      },
      {
        "input": "num1 = 2, num2 = 34567",
        "output": "17285"
      },
      {
        "input": "num1 = 1, num2 = 99999",
        "output": "99999"
      },
      {
        "input": "num1 = 1000, num2 = 333",
        "output": "336"
      },
      {
        "input": "num1 = 88888, num2 = 11111",
        "output": "8"
      },
      {
        "input": "num1 = 9, num2 = 1",
        "output": "9"
      },
      {
        "input": "num1 = 1000, num2 = 1",
        "output": "1000"
      },
      {
        "input": "num1 = 55555, num2 = 22222",
        "output": "4"
      },
      {
        "input": "num1 = 87, num2 = 3",
        "output": "29"
      },
      {
        "input": "num1 = 15, num2 = 10",
        "output": "3"
      },
      {
        "input": "num1 = 60000, num2 = 30000",
        "output": "2"
      },
      {
        "input": "num1 = 22222, num2 = 11111",
        "output": "2"
      },
      {
        "input": "num1 = 65536, num2 = 1",
        "output": "65536"
      },
      {
        "input": "num1 = 65432, num2 = 12345",
        "output": "80"
      },
      {
        "input": "num1 = 20, num2 = 30",
        "output": "3"
      },
      {
        "input": "num1 = 50000, num2 = 25000",
        "output": "2"
      },
      {
        "input": "num1 = 13579, num2 = 24680",
        "output": "39"
      },
      {
        "input": "num1 = 777, num2 = 111",
        "output": "7"
      },
      {
        "input": "num1 = 88888, num2 = 44444",
        "output": "2"
      },
      {
        "input": "num1 = 12345, num2 = 54321",
        "output": "177"
      },
      {
        "input": "num1 = 5000, num2 = 7500",
        "output": "3"
      },
      {
        "input": "num1 = 25, num2 = 5",
        "output": "5"
      },
      {
        "input": "num1 = 23456, num2 = 65432",
        "output": "44"
      },
      {
        "input": "num1 = 45678, num2 = 87654",
        "output": "45"
      },
      {
        "input": "num1 = 12345, num2 = 67890",
        "output": "418"
      },
      {
        "input": "num1 = 42, num2 = 30",
        "output": "5"
      },
      {
        "input": "num1 = 789, num2 = 987",
        "output": "70"
      },
      {
        "input": "num1 = 99999, num2 = 99999",
        "output": "1"
      },
      {
        "input": "num1 = 456, num2 = 123",
        "output": "12"
      },
      {
        "input": "num1 = 0, num2 = 0",
        "output": "0"
      },
      {
        "input": "num1 = 55, num2 = 20",
        "output": "6"
      },
      {
        "input": "num1 = 33333, num2 = 22222",
        "output": "3"
      },
      {
        "input": "num1 = 54321, num2 = 12345",
        "output": "177"
      },
      {
        "input": "num1 = 1, num2 = 100000",
        "output": "100000"
      },
      {
        "input": "num1 = 32768, num2 = 16384",
        "output": "2"
      },
      {
        "input": "num1 = 1000, num2 = 100",
        "output": "10"
      },
      {
        "input": "num1 = 2, num2 = 8",
        "output": "4"
      },
      {
        "input": "num1 = 101010, num2 = 10101",
        "output": "10"
      },
      {
        "input": "num1 = 75, num2 = 25",
        "output": "3"
      },
      {
        "input": "num1 = 83456, num2 = 37821",
        "output": "38"
      },
      {
        "input": "num1 = 23456, num2 = 12345",
        "output": "262"
      },
      {
        "input": "num1 = 123, num2 = 321",
        "output": "11"
      },
      {
        "input": "num1 = 8, num2 = 3",
        "output": "5"
      },
      {
        "input": "num1 = 50, num2 = 25",
        "output": "2"
      },
      {
        "input": "num1 = 13, num2 = 13",
        "output": "1"
      },
      {
        "input": "num1 = 12345, num2 = 1",
        "output": "12345"
      },
      {
        "input": "num1 = 55555, num2 = 55555",
        "output": "1"
      },
      {
        "input": "num1 = 3, num2 = 8",
        "output": "5"
      },
      {
        "input": "num1 = 30000, num2 = 15000",
        "output": "2"
      },
      {
        "input": "num1 = 999, num2 = 999",
        "output": "1"
      },
      {
        "input": "num1 = 56789, num2 = 12345",
        "output": "260"
      },
      {
        "input": "num1 = 25, num2 = 15",
        "output": "4"
      }
    ]
  },
  {
    "id": 1619,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Sorting"
    ],
    "problemDescription": "Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.\nAnswers within 10-5 of the actual answer will be considered accepted.\n\u00a0\nExample 1:\n\nInput: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\nOutput: 2.00000\nExplanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.\n\nExample 2:\n\nInput: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\nOutput: 4.00000\n\nExample 3:\n\nInput: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]\nOutput: 4.77778\n\n\u00a0\nConstraints:\n\n20 <= arr.length <= 1000\narr.length is a multiple of 20.\n0 <= arr[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def trimMean(self, arr: List[int]) -> float:\n        ",
    "testCases": [
      {
        "input": "arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]",
        "output": "4.77778"
      },
      {
        "input": "arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]",
        "output": "2.0"
      },
      {
        "input": "arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]",
        "output": "4.0"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "105.0"
      },
      {
        "input": "arr = [42,85,94,12,85,74,15,7,83,52,53,87,27,30,67,94,84,90,72,18,62,85,81,69,82,69,39,72,25,90,45,88,61,53,74,69,46,12,43,96,89,90,25,46,23,88,97,30,69,58,76,67,50,87,94,82,63,30,93,50,33,98,60,69,88,75,29,11,94,47,87,93,34,97,32,96,79,97,78,77,45,35,94,66,62,58,42,23,83,82,72,58,75,86,80,94,28,44,62,40,96,97,46,28,96,37,82,96,62,98,28,37,81,74,90,98,73,72,99,40,54,34,55,65,70,71,80,92,93]",
        "output": "65.75"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500]",
        "output": "250.0"
      },
      {
        "input": "arr = [1, 100000, 2, 99999, 3, 99998, 4, 99997, 5, 99996, 6, 99995, 7, 99994, 8, 99993, 9, 99992, 10, 99991, 11, 99990, 12, 99989, 13, 99988, 14, 99987, 15, 99986, 16, 99985, 17, 99984, 18, 99983, 19, 99982, 20, 99981]",
        "output": "50000.5"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "25.0"
      },
      {
        "input": "arr = [3,1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]",
        "output": "29.5"
      },
      {
        "input": "arr = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400]",
        "output": "205.0"
      },
      {
        "input": "arr = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "0.76056"
      },
      {
        "input": "arr = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "5.0"
      },
      {
        "input": "arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]",
        "output": "475.0"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000]",
        "output": "505.0"
      },
      {
        "input": "arr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2, 6, 4, 3, 3, 8, 3, 2, 7, 9, 5, 0, 2, 8, 8, 4, 1, 9, 7, 1, 6, 9, 3, 9, 9, 3, 7, 5, 1, 0, 5, 8, 2, 0, 9, 7, 4, 9, 4, 4, 5, 9, 2, 3, 0, 7, 8, 1, 6, 4, 0, 6, 2, 8, 6, 2, 0, 4, 9, 0, 3, 0, 1, 4, 1, 5]",
        "output": "4.44156"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109]",
        "output": "54.0"
      },
      {
        "input": "arr = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]",
        "output": "8.98182"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000]",
        "output": "2500.0"
      },
      {
        "input": "arr = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40]",
        "output": "69.5"
      },
      {
        "input": "arr = [100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0]",
        "output": "49122.80702"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "10.5"
      },
      {
        "input": "arr = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]",
        "output": "500.0"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "25.0"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "5.0"
      },
      {
        "input": "arr = [100000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100000]",
        "output": "5555.55556"
      },
      {
        "input": "arr = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]",
        "output": "50000.0"
      },
      {
        "input": "arr = [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]",
        "output": "42.0"
      },
      {
        "input": "arr = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "13.01852"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "20.5"
      },
      {
        "input": "arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "1.78082"
      },
      {
        "input": "arr = [100000, 0, 50000, 25000, 75000, 30000, 80000, 10000, 90000, 40000, 60000, 20000, 95000, 55000, 85000, 15000, 99000, 65000, 70000, 35000, 100000, 0, 50000, 25000, 75000, 30000, 80000, 10000, 90000, 40000, 60000, 20000, 95000, 55000, 85000, 15000, 99000, 65000, 70000, 35000]",
        "output": "55500.0"
      },
      {
        "input": "arr = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "8.23529"
      },
      {
        "input": "arr = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195]",
        "output": "100.0"
      },
      {
        "input": "arr = [100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0,100000,0]",
        "output": "48780.4878"
      },
      {
        "input": "arr = [99999, 1, 99998, 2, 99997, 3, 99996, 4, 99995, 5, 99994, 6, 99993, 7, 99992, 8, 99991, 9, 99990, 10, 99989, 11, 99988, 12, 99987, 13, 99986, 14, 99985, 15, 99984, 16, 99983, 17, 99982, 18, 99981, 19, 99980, 20, 99979, 21, 99978, 22, 99977, 23, 99976, 24, 99975, 25]",
        "output": "48888.95556"
      },
      {
        "input": "arr = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "50.0"
      },
      {
        "input": "arr = [50000, 1, 20000, 2, 30000, 3, 40000, 4, 50000, 5, 60000, 6, 70000, 7, 80000, 8, 90000, 9, 100000, 10, 110000, 11, 120000, 12, 130000, 13, 140000, 14, 150000, 15, 160000, 16, 170000, 17, 180000, 18, 190000, 19, 200000, 20, 210000, 21, 220000, 22, 230000, 23, 240000, 24, 250000, 25, 260000, 26, 270000, 27, 280000, 28, 290000, 29, 300000]",
        "output": "70748.74074"
      },
      {
        "input": "arr = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "5.0"
      },
      {
        "input": "arr = [15, 22, 10, 27, 18, 35, 40, 50, 60, 5, 90, 80, 75, 45, 30, 25, 65, 70, 100, 55]",
        "output": "45.11111"
      },
      {
        "input": "arr = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "10.0"
      },
      {
        "input": "arr = [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]",
        "output": "42.0"
      },
      {
        "input": "arr = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "2.0"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "50.5"
      },
      {
        "input": "arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5]",
        "output": "0.075"
      },
      {
        "input": "arr = [99999, 1, 99998, 2, 99997, 3, 99996, 4, 99995, 5, 99994, 6, 99993, 7, 99992, 8, 99991, 9, 99990, 10, 99989, 11, 99988, 12, 99987, 13, 99986, 14, 99985, 15, 99984, 16, 99983, 17, 99982, 18, 99981, 19, 99980, 20, 99979, 21, 99978, 22, 99977, 23, 99976, 24, 99975, 25, 99974, 26, 99973, 27, 99972, 28, 99971, 29, 99970]",
        "output": "49999.5"
      },
      {
        "input": "arr = [99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1,99999,100000,1]",
        "output": "67567.51351"
      },
      {
        "input": "arr = [100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0, 100000, 0]",
        "output": "48717.94872"
      },
      {
        "input": "arr = [3,2,1,6,5,4,9,8,7,12,11,10,15,14,13,18,17,16,21,20,25,24,23,30,29,28,33,32,31,36,35,34,39,38,37,42,41,40,45,44,43,48,47,46,51,50,49,54,53,52,57,56,55,60,59,58,63,62,61,66,65,64,69,68,67,72,71,70]",
        "output": "36.81967"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "20.5"
      },
      {
        "input": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 0, 0, 0, 0]",
        "output": "17.14634"
      }
    ]
  },
  {
    "id": 283,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers"
    ],
    "problemDescription": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\nNote that you must do this in-place without making a copy of the array.\n\u00a0\nExample 1:\nInput: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\nExample 2:\nInput: nums = [0]\nOutput: [0]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 104\n-231 <= nums[i] <= 231 - 1\n\n\u00a0\nFollow up: Could you minimize the total number of operations done?",
    "starterCode": "class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        ",
    "testCases": [
      {
        "input": "nums = [1]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,1]",
        "output": "None"
      },
      {
        "input": "nums = [4,2,4,0,0,3,0,5,1,0]",
        "output": "None"
      },
      {
        "input": "nums = [-1,0,0,3,5,-2]",
        "output": "None"
      },
      {
        "input": "nums = [0]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,1,0,0,2,0,3]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,1]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,1,0,3,12]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,5]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,0,2,0,3,0,4,0,5]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,1,0,0,2,0,0,3,0,0,4,5]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,0,3,12]",
        "output": "None"
      },
      {
        "input": "nums = [1, 0, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,0,3,0,5,0,7,0,9]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,1,2,3,4,5,6]",
        "output": "None"
      },
      {
        "input": "nums = [7,8,9,0,0,0,0,0,10]",
        "output": "None"
      },
      {
        "input": "nums = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,4,5,0,0,0,0,6,7,8,9,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [-1, 0, -2, 0, -3, 0, -4, 0, -5, 0]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9]",
        "output": "None"
      },
      {
        "input": "nums = [5,0,1,0,2,0,3,0,4,0]",
        "output": "None"
      },
      {
        "input": "nums = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,0,5]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,0,1,2,3,4]",
        "output": "None"
      },
      {
        "input": "nums = [0, 0, 1, 0, 2, 0, 3, 0, 4, 5]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 0, 0, 6, 7, 8, 9, 0]",
        "output": "None"
      },
      {
        "input": "nums = [3, 0, 5, 0, 6, 0, 7]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,5,6,0,7,8,9,0]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,1,2,3,4,5,6]",
        "output": "None"
      },
      {
        "input": "nums = [-3, 0, -5, 0, -6, 0, -7]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0,0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [1, 0, 0, 0, 0, 0, 0, 2, 3, 4, 5]",
        "output": "None"
      },
      {
        "input": "nums = [-1,0,-2,0,-3,0,-4,0,-5]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 0, 7, 8, 0, 9, 0]",
        "output": "None"
      },
      {
        "input": "nums = [5,0,1,0,2,0,3,0,4]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,5,0,6,0,7]",
        "output": "None"
      },
      {
        "input": "nums = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,0,0,0,4,5,6]",
        "output": "None"
      },
      {
        "input": "nums = [1, 0, 2, 0, 0, 3, 4, 0, 5]",
        "output": "None"
      },
      {
        "input": "nums = [0, 0, 0, 0, 1, 2, 3, 4, 5, 0, 0, 6, 7, 8, 9]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,0,2,0,3,0,4,0]",
        "output": "None"
      },
      {
        "input": "nums = [0, 1, 0, 2, 0, 3, 4, 5, 6, 7, 8, 9]",
        "output": "None"
      },
      {
        "input": "nums = [-1,-2,-3,0,0,0,0,4,5,6]",
        "output": "None"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]",
        "output": "None"
      },
      {
        "input": "nums = [0, 1, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,0,0,1,2,3,4]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,4,0,0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,-1,-2,-3,-4,-5,-6,0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [23456789,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9]",
        "output": "None"
      },
      {
        "input": "nums = [7,0,1,0,2,0,3,0,4,5,0]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,4,0,0,0,5,6]",
        "output": "None"
      },
      {
        "input": "nums = [9, 0, 0, 8, 0, 7, 0, 6, 0, 5]",
        "output": "None"
      },
      {
        "input": "nums = [9,0,0,8,0,7,6,0,5,0]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 0, 0, 0, 6, 7, 8, 9]",
        "output": "None"
      },
      {
        "input": "nums = [1000000000, 0, 1000000000, 0, 1000000000]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 0, 4, 5, 0, 0, 6, 0, 7, 8, 9, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,2,3,4,5,6,7,8,9,0]",
        "output": "None"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]",
        "output": "None"
      },
      {
        "input": "nums = [0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "None"
      },
      {
        "input": "nums = [0, 1, 0, 2, 0, 3, 0, 4]",
        "output": "None"
      },
      {
        "input": "nums = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 0, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,0,3,4,0,5,6,0,7]",
        "output": "None"
      },
      {
        "input": "nums = [1000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,0,2,0,3,0,4,5]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 0, 0, 0, 4, 5, 6, 0]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,4,5,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,4,5,0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,0,5,0]",
        "output": "None"
      },
      {
        "input": "nums = [10, 20, 30, 0, 0, 0, 0, 40, 50, 60]",
        "output": "None"
      },
      {
        "input": "nums = [1, 0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "None"
      },
      {
        "input": "nums = [0, 1, 0, 2, 0, 3, 0, 4, 0, 5]",
        "output": "None"
      },
      {
        "input": "nums = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "None"
      },
      {
        "input": "nums = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [5, 0, 4, 0, 3, 0, 2, 0, 1, 0]",
        "output": "None"
      },
      {
        "input": "nums = [10, 20, 0, 0, 30, 40, 0, 50, 0, 0, 60]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,1,0,0,2,0,0,3,0,0,4]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,2,0,0,3,0,0,4,0,0,5,0,0,6]",
        "output": "None"
      },
      {
        "input": "nums = [10,20,30,40,0,0,0,0,50,60]",
        "output": "None"
      },
      {
        "input": "nums = [1, 0, 2, 0, 3, 0, 4, 0, 5]",
        "output": "None"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,0,0,0,0,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9]",
        "output": "None"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 0, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [5,3,0,1,0,2,0,0,4]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,0,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,1,2,3,4,5,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [0,2,0,3,0,4,0,5,0,6,0,7,0]",
        "output": "None"
      },
      {
        "input": "nums = [-1,0,-2,0,-3,0,-4,0,-5,0]",
        "output": "None"
      },
      {
        "input": "nums = [0, 0, 0, 1, -1, 2, -2, 3, -3]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,0,0,3,12,0,0,0,4,5]",
        "output": "None"
      },
      {
        "input": "nums = [7,6,0,5,0,4,3,0,2,1]",
        "output": "None"
      },
      {
        "input": "nums = [0, 2, 0, 4, 0, 6, 0, 8]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 4, 0, 0, 0, 5, 6, 7, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,0,2,3,4,5,0,0,0]",
        "output": "None"
      },
      {
        "input": "nums = [5, 1, 0, 3, 0, 12, 0, 1, 2, 3]",
        "output": "None"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5]",
        "output": "None"
      },
      {
        "input": "nums = [0,1,2,3,0,4,5,0,6,7]",
        "output": "None"
      },
      {
        "input": "nums = [1,2,0,0,0,3,4,5,0]",
        "output": "None"
      },
      {
        "input": "nums = [1,0,0,0,0,2,0,0,0,0,3,0,0,0,0,4]",
        "output": "None"
      },
      {
        "input": "nums = [0,-1,0,-2,0,-3,0,-4,0,-5]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,1,2,3,4,5,0,0,0,0,6,7,8,9]",
        "output": "None"
      },
      {
        "input": "nums = [1, 2, 3, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9]",
        "output": "None"
      },
      {
        "input": "nums = [0, 1, 0, 0, 2, 0, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9]",
        "output": "None"
      },
      {
        "input": "nums = [0, 1, 0, -1, 0, 2, 0]",
        "output": "None"
      },
      {
        "input": "nums = [9, 0, 0, 8, 0, 7, 0, 6, 0, 5, 0, 4, 0, 3, 0, 2, 0, 1]",
        "output": "None"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 0, 0, 0, 0]",
        "output": "None"
      },
      {
        "input": "nums = [0,0,0,0,0,-1,-2,-3,-4,-5,-6]",
        "output": "None"
      }
    ]
  },
  {
    "id": 876,
    "difficulty": "Easy",
    "tags": [
      "Linked List",
      "Two Pointers"
    ],
    "problemDescription": "Given the head of a singly linked list, return the middle node of the linked list.\nIf there are two middle nodes, return the second middle node.\n\u00a0\nExample 1:\n\n\nInput: head = [1,2,3,4,5]\nOutput: [3,4,5]\nExplanation: The middle node of the list is node 3.\n\nExample 2:\n\n\nInput: head = [1,2,3,4,5,6]\nOutput: [4,5,6]\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [1, 100].\n1 <= Node.val <= 100\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [1,2,3,4,5,6,7]",
        "output": "[4, 5, 6, 7]"
      },
      {
        "input": "head = [1,2,3]",
        "output": "[2, 3]"
      },
      {
        "input": "head = [1,2,3,4,5]",
        "output": "[3, 4, 5]"
      },
      {
        "input": "head = [1]",
        "output": "[1]"
      },
      {
        "input": "head = [1,2]",
        "output": "[2]"
      },
      {
        "input": "head = [1,2,3,4]",
        "output": "[3, 4]"
      },
      {
        "input": "head = [1,2,3,4,5,6]",
        "output": "[4, 5, 6]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8]",
        "output": "[5, 6, 7, 8]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]",
        "output": "[11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]"
      },
      {
        "input": "head = [5,4,3,2,1]",
        "output": "[3, 2, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "[21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59]",
        "output": "[31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21]",
        "output": "[11, 13, 15, 17, 19, 21]"
      },
      {
        "input": "head = [42]",
        "output": "[42]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24]",
        "output": "[14, 16, 18, 20, 22, 24]"
      },
      {
        "input": "head = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]",
        "output": "[41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
      },
      {
        "input": "head = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]",
        "output": "[11, 13, 15, 17, 19, 21]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "[25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11]",
        "output": "[6, 7, 8, 9, 10, 11]"
      },
      {
        "input": "head = [5,15,25,35,45,55,65,75,85,95,105,115,125]",
        "output": "[65, 75, 85, 95, 105, 115, 125]"
      },
      {
        "input": "head = [1,2,2,1]",
        "output": "[2, 1]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100]",
        "output": "[60, 70, 80, 90, 100]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,50]",
        "output": "[27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 50]"
      },
      {
        "input": "head = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0, -10, -20, -30]",
        "output": "[30, 20, 10, 0, -10, -20, -30]"
      },
      {
        "input": "head = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70]",
        "output": "[84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70]"
      },
      {
        "input": "head = [5]",
        "output": "[5]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500]",
        "output": "[800, 900, 1000, 1100, 1200, 1300, 1400, 1500]"
      },
      {
        "input": "head = [101,202,303,404,505,606,707,808,909,1010,1111,1212,1313,1414,1515,1616,1717,1818,1919,2020,2121,2222,2323,2424,2525,2626,2727,2828,2929,3030,3131,3232,3333,3434,3535,3636,3737,3838,3939,4040,4141,4242,4343,4444,4545,4646,4747,4848,4949,5050]",
        "output": "[2626, 2727, 2828, 2929, 3030, 3131, 3232, 3333, 3434, 3535, 3636, 3737, 3838, 3939, 4040, 4141, 4242, 4343, 4444, 4545, 4646, 4747, 4848, 4949, 5050]"
      },
      {
        "input": "head = [7]",
        "output": "[7]"
      },
      {
        "input": "head = [41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85]",
        "output": "[63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85]"
      },
      {
        "input": "head = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]",
        "output": "[14, 16, 18, 20, 22, 24]"
      },
      {
        "input": "head = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91]",
        "output": "[49, 56, 63, 70, 77, 84, 91]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "[7, 8, 9, 10, 11, 12]"
      },
      {
        "input": "head = [31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "[66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "[51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
      },
      {
        "input": "head = [5,4,3,2,1,0,-1,-2,-3,-4,-5]",
        "output": "[0, -1, -2, -3, -4, -5]"
      },
      {
        "input": "head = [5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "[11, 12, 13, 14, 15, 16]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "[17, 19, 21, 23, 25, 27, 29, 31]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110]",
        "output": "[60, 70, 80, 90, 100, 110]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "[21, 23, 25, 27, 29, 31, 33, 35, 37, 39]"
      },
      {
        "input": "head = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81]",
        "output": "[90, 89, 88, 87, 86, 85, 84, 83, 82, 81]"
      },
      {
        "input": "head = [100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000]",
        "output": "[2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000]"
      },
      {
        "input": "head = [50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150]",
        "output": "[80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]",
        "output": "[15, 17, 19, 21, 23, 25, 27, 29]"
      },
      {
        "input": "head = [88, 77, 66, 55, 44, 33, 22, 11, 0, 11, 22, 33, 44, 55, 66, 77, 88]",
        "output": "[0, 11, 22, 33, 44, 55, 66, 77, 88]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "head = [99,98,97,96,95,94,93,92,91]",
        "output": "[95, 94, 93, 92, 91]"
      },
      {
        "input": "head = [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "output": "[50, 60, 70, 80, 90]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90]",
        "output": "[50, 60, 70, 80, 90]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [5, 15, 25, 35, 45, 55, 65]",
        "output": "[35, 45, 55, 65]"
      },
      {
        "input": "head = [8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [1,2,3,2,1]",
        "output": "[3, 2, 1]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41]",
        "output": "[21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120]",
        "output": "[70, 80, 90, 100, 110, 120]"
      },
      {
        "input": "head = [1,3,2,3,1]",
        "output": "[2, 3, 1]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99]",
        "output": "[51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "[9, 10, 11, 12, 13, 14, 15, 16]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60,65]",
        "output": "[35, 40, 45, 50, 55, 60, 65]"
      },
      {
        "input": "head = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "[26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]"
      },
      {
        "input": "head = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]",
        "output": "[54, 63, 72, 81, 90]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62]",
        "output": "[32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]",
        "output": "[52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]"
      },
      {
        "input": "head = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80]",
        "output": "[89, 88, 87, 86, 85, 84, 83, 82, 81, 80]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[8, 9, 10, 11, 12, 13, 14, 15]"
      }
    ]
  },
  {
    "id": 145,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a\u00a0binary tree, return the postorder traversal of its nodes' values.\n\u00a0\nExample 1:\n\nInput: root = [1,null,2,3]\nOutput: [3,2,1]\nExplanation:\n\n\nExample 2:\n\nInput: root = [1,2,3,4,5,null,8,null,null,6,7,9]\nOutput: [4,6,7,5,2,9,8,3,1]\nExplanation:\n\n\nExample 3:\n\nInput: root = []\nOutput: []\n\nExample 4:\n\nInput: root = [1]\nOutput: [1]\n\n\u00a0\nConstraints:\n\nThe number of the nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow up: Recursive solution is trivial, could you do it iteratively?",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "root = [2,null,1]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [1,2,3,4,5,null,8,null,null,6,7,9]",
        "output": "[4, 6, 7, 5, 2, 9, 8, 3, 1]"
      },
      {
        "input": "root = [1,2]",
        "output": "[2, 1]"
      },
      {
        "input": "root = [1,null,2,3]",
        "output": "[3, 2, 1]"
      },
      {
        "input": "root = [3,1,2]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "root = [1]",
        "output": "[1]"
      },
      {
        "input": "root = []",
        "output": "[]"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,null,4,null,null,5]",
        "output": "[2, 1]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [1,null,2,null,null,null,3,null,null,null,null,null,4]",
        "output": "[2, 1]"
      },
      {
        "input": "root = [10,5,15,null,null,6,20]",
        "output": "[5, 6, 20, 15, 10]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,9]",
        "output": "[1, 3, 6, 9, 7, 5, 18, 15, 10]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18]",
        "output": "[3, 7, 5, 18, 15, 10]"
      },
      {
        "input": "root = [1,null,2,3,4]",
        "output": "[3, 4, 2, 1]"
      },
      {
        "input": "root = [1,null,2,3,null,null,4,null,5,null,null,null,6]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [8,3,10,1,6,null,14,null,null,4,7,13]",
        "output": "[1, 4, 7, 6, 3, 13, 14, 10, 8]"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,3,5]",
        "output": "[0, 3, 5, 4, 2, 7, 9, 8, 6]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15]",
        "output": "[1, 3, 2, 5, 7, 6, 4, 9, 11, 10, 13, 15, 14, 12, 8]"
      },
      {
        "input": "root = [9,7,20,5,8,null,null,2,null,null,11]",
        "output": "[2, 5, 11, 8, 7, 20, 9]"
      },
      {
        "input": "root = [1,2,null,3,null,null,4,null,5]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [5,4,6,3,null,null,7,2,null,1]",
        "output": "[2, 3, 4, 1, 7, 6, 5]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8]",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,7,null,null,8,9]",
        "output": "[2, 4, 6, 8, 9, 7, 5, 3, 1]"
      },
      {
        "input": "root = [1,2,3,null,null,4,null,null,null,null,5]",
        "output": "[2, 4, 3, 1]"
      },
      {
        "input": "root = [3,1,2,null,null,4,5]",
        "output": "[1, 4, 5, 2, 3]"
      },
      {
        "input": "root = [2,1,3,null,null,4,null,null,null,5]",
        "output": "[1, 4, 3, 2]"
      },
      {
        "input": "root = [8,5,1,7,10,12]",
        "output": "[7, 10, 5, 12, 1, 8]"
      },
      {
        "input": "root = [1,2,null,3,4,null,null,5,null,null,null,6,null,7,null,null,8,null,null,9,null,null,10]",
        "output": "[3, 5, 4, 2, 1]"
      },
      {
        "input": "root = [5,1,6,null,2,null,null,3,4]",
        "output": "[3, 4, 2, 1, 6, 5]"
      },
      {
        "input": "root = [9,4,13,2,6,11,16,1,3,5,7,8,10,12,14,15]",
        "output": "[15, 1, 3, 2, 5, 7, 6, 4, 8, 10, 11, 12, 14, 16, 13, 9]"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,null,4,null,null,5,null,null,6,null,null,7,null,null,8,null,null,9,null,null,10]",
        "output": "[2, 1]"
      },
      {
        "input": "root = [7,3,15,null,null,9,20]",
        "output": "[3, 9, 20, 15, 7]"
      },
      {
        "input": "root = [22,11,33,5,17,27,41,2,6,14,19,25,31,37,45,1,3,4,7,10,13,16,18,21,24,26,29,32,36,38,40,43,44,46,47]",
        "output": "[43, 44, 1, 46, 47, 3, 2, 4, 7, 6, 5, 10, 13, 14, 16, 18, 19, 17, 11, 21, 24, 25, 26, 29, 31, 27, 32, 36, 37, 38, 40, 45, 41, 33, 22]"
      },
      {
        "input": "root = [10,5,15,null,null,6,20,null,null,null,30]",
        "output": "[5, 6, 30, 20, 15, 10]"
      },
      {
        "input": "root = [1,null,2,null,3,null,null,4,null,null,null,null,5]",
        "output": "[3, 2, 1]"
      },
      {
        "input": "root = [5,3,7,2,4,6,8,1,null,null,null,null,null,9,10]",
        "output": "[1, 2, 4, 3, 6, 9, 10, 8, 7, 5]"
      },
      {
        "input": "root = [1,2,null,3,4,null,5,null,null,6,7,null,null,null,null,8,null,null,null,null,9]",
        "output": "[6, 7, 5, 3, 4, 2, 1]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,null,null,9,null,null,10,11,null,null,null,null,null,null,12,13,null,null,14,15,null,null,null,null,16]",
        "output": "[8, 4, 9, 5, 2, 6, 10, 12, 14, 15, 13, 11, 7, 3, 1]"
      },
      {
        "input": "root = [7,3,15,null,null,null,20]",
        "output": "[3, 20, 15, 7]"
      },
      {
        "input": "root = [1,2,3,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "[10, 8, 6, 4, 2, 9, 7, 5, 3, 1]"
      },
      {
        "input": "root = [5,4,6,3,8,7,9]",
        "output": "[3, 8, 4, 7, 9, 6, 5]"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,null,null,6,7]",
        "output": "[2, 4, 5, 3, 1]"
      },
      {
        "input": "root = [1,2,3,4,null,5,6]",
        "output": "[4, 2, 5, 6, 3, 1]"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,null,18,null,null,null,null,22]",
        "output": "[5, 10, 18, 20, 15, 30, 22, 40, 35, 25]"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,6,null,7,null,8,null,9]",
        "output": "[8, 6, 4, 2, 9, 7, 5, 3, 1]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[16, 17, 8, 18, 19, 9, 4, 20, 10, 11, 5, 2, 12, 13, 6, 14, 15, 7, 3, 1]"
      },
      {
        "input": "root = [5,3,8,1,null,null,10,null,2,null,null,11]",
        "output": "[11, 2, 1, 3, 10, 8, 5]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[8, 9, 4, 10, 11, 5, 2, 12, 13, 6, 14, 15, 7, 3, 1]"
      },
      {
        "input": "root = [5,3,8,2,4,6,9,1,7,null,null,null,null,null,10]",
        "output": "[1, 7, 2, 4, 3, 6, 10, 9, 8, 5]"
      },
      {
        "input": "root = [14,9,21,7,11,17,25,5,8,10,12,15,18,23,27,3,6,null,null,null,null,null,null,null,13,null,null,null,16,null,19,null,22,null,26,null,24,null,null,null,null,20,null,null,null,null,null,28]",
        "output": "[28, 20, 22, 3, 26, 6, 5, 8, 7, 10, 12, 11, 9, 24, 13, 15, 18, 17, 16, 23, 19, 27, 25, 21, 14]"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,null,8,9,null,null,10]",
        "output": "[10, 7, 4, 8, 9, 5, 2, 6, 3, 1]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "[4, 5, 2, 6, 7, 3, 1]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [17,8,26,4,13,22,31,2,6,11,15,19,24,28,34,1,3,5,7,9,10,12,14,16,18,20,23,25,27,29,32,33,35]",
        "output": "[33, 35, 1, 3, 2, 5, 7, 6, 4, 9, 10, 11, 12, 14, 15, 13, 8, 16, 18, 19, 20, 23, 24, 22, 25, 27, 28, 29, 32, 34, 31, 26, 17]"
      },
      {
        "input": "root = [1,null,2,null,null,null,3,null,null,null,null,4]",
        "output": "[2, 1]"
      },
      {
        "input": "root = [15,7,23,3,11,19,27,1,5,9,13,17,21,25,29,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,31]",
        "output": "[2, 4, 1, 6, 8, 5, 3, 10, 12, 9, 14, 16, 13, 11, 7, 18, 20, 17, 22, 24, 21, 19, 26, 28, 25, 30, 31, 29, 27, 23, 15]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4]",
        "output": "[4, 3, 2, 1]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,16,null,17,null,18,null,19]",
        "output": "[16, 8, 17, 9, 4, 18, 10, 19, 11, 5, 2, 12, 13, 6, 14, 15, 7, 3, 1]"
      },
      {
        "input": "root = [5,3,8,1,4,7,9,null,2,null,null,null,null,null,10]",
        "output": "[2, 1, 4, 3, 7, 10, 9, 8, 5]"
      },
      {
        "input": "root = [7,3,15,null,null,null,9]",
        "output": "[3, 9, 15, 7]"
      },
      {
        "input": "root = [1,2,null,3,4,null,5]",
        "output": "[5, 3, 4, 2, 1]"
      },
      {
        "input": "root = [25,15,30,10,20,28,35,5,12,17,22,27,33,32,36]",
        "output": "[5, 12, 10, 17, 22, 20, 15, 27, 33, 28, 32, 36, 35, 30, 25]"
      },
      {
        "input": "root = [5,3,8,1,4,7,10,null,2,6,9,11]",
        "output": "[2, 1, 6, 9, 4, 3, 11, 7, 10, 8, 5]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "[7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [5,1,4,null,null,3,6]",
        "output": "[1, 3, 6, 4, 5]"
      },
      {
        "input": "root = [1,null,2,3,null,null,4,null,5]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [1,2,3,null,5,null,6,7,null,8,null,9]",
        "output": "[9, 7, 5, 2, 8, 6, 3, 1]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,8,null,null,null,null,9]",
        "output": "[1, 3, 9, 6, 8, 7, 5, 18, 15, 10]"
      },
      {
        "input": "root = [11,7,19,3,9,13,21,1,5,null,8,null,12,17,null,null,null,null,null,14,16,18,20,22,23]",
        "output": "[1, 5, 3, 14, 16, 8, 9, 7, 18, 20, 12, 13, 22, 23, 17, 21, 19, 11]"
      },
      {
        "input": "root = [1,null,null,null,2]",
        "output": "[1]"
      },
      {
        "input": "root = [1,null,null]",
        "output": "[1]"
      },
      {
        "input": "root = [1,null,2,null,null,3,4]",
        "output": "[2, 1]"
      },
      {
        "input": "root = [16,8,24,4,12,20,28,2,6,10,14,18,22,26,30,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "[1, 3, 2, 5, 7, 6, 4, 9, 11, 10, 13, 15, 14, 12, 8, 17, 19, 18, 21, 23, 22, 20, 25, 27, 26, 29, 31, 30, 28, 24, 16]"
      },
      {
        "input": "root = [5,3,8,1,4,7,10,0,2,6,9,null,null,null,null,null,11]",
        "output": "[11, 0, 2, 1, 6, 9, 4, 3, 7, 10, 8, 5]"
      },
      {
        "input": "root = [2,null,3,null,4,null,5,null,6,null,7]",
        "output": "[7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6]",
        "output": "[6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,null,10,null,null,11,null,null,12,null,null,13,null,null,14]",
        "output": "[8, 14, 12, 9, 4, 5, 2, 13, 10, 6, 11, 7, 3, 1]"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,4]",
        "output": "[2, 1]"
      },
      {
        "input": "root = [30,25,35,20,27,32,40,18,null,null,23,null,null,null,null,null,45]",
        "output": "[45, 18, 20, 23, 27, 25, 32, 40, 35, 30]"
      },
      {
        "input": "root = [1,2,null,3,4,null,5,null,6]",
        "output": "[5, 3, 6, 4, 2, 1]"
      },
      {
        "input": "root = [30,15,45,7,22,37,52,3,11,18,26,32,41,50,57,1,2,5,6,8,9,10,12,13,16,17,19,20,23,24,25,27,28,30,31,33,35,36,39,40,42,43,44,46,47,48,49,51,53,54,55,56,58,59]",
        "output": "[27, 28, 1, 30, 31, 2, 3, 33, 35, 5, 36, 39, 6, 11, 7, 40, 42, 8, 43, 44, 9, 18, 46, 47, 10, 48, 49, 12, 26, 22, 15, 51, 53, 13, 54, 55, 16, 32, 56, 58, 17, 59, 19, 41, 37, 20, 23, 50, 24, 25, 57, 52, 45, 30]"
      },
      {
        "input": "root = [7,3,15,1,5,9,20,null,null,2,6,null,null,8,12,null,18]",
        "output": "[1, 18, 2, 6, 5, 3, 9, 8, 12, 20, 15, 7]"
      },
      {
        "input": "root = [20,15,25,10,18,22,30,5,12,null,17,21,24,28,35]",
        "output": "[5, 12, 10, 17, 18, 15, 21, 24, 22, 28, 35, 30, 25, 20]"
      },
      {
        "input": "root = [4,2,6,1,3,5,7]",
        "output": "[1, 3, 2, 5, 7, 6, 4]"
      },
      {
        "input": "root = [3,1,2,4,null,5,6,7,null,8,9]",
        "output": "[7, 4, 1, 8, 9, 5, 6, 2, 3]"
      },
      {
        "input": "root = [3,1,2,4]",
        "output": "[4, 1, 2, 3]"
      },
      {
        "input": "root = [8,5,12,4,6,11,13,2,null,null,null,null,null,null,14]",
        "output": "[2, 4, 6, 5, 11, 14, 13, 12, 8]"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,12,17,22,28,33,38,45,3,7,9,11,14,16,18,21,23,27,29,32,36,37,39,41,44,46]",
        "output": "[44, 46, 3, 7, 5, 9, 11, 12, 10, 14, 16, 17, 18, 21, 22, 20, 15, 23, 27, 28, 29, 32, 33, 30, 36, 37, 38, 39, 41, 45, 40, 35, 25]"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,null,null,7,8]",
        "output": "[4, 7, 8, 5, 2, 6, 3, 1]"
      }
    ]
  },
  {
    "id": 1971,
    "difficulty": "Easy",
    "tags": [
      "Depth-First Search",
      "Breadth-First Search",
      "Union Find",
      "Graph"
    ],
    "problemDescription": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nYou want to determine if there is a valid path that exists from vertex source to vertex destination.\nGiven edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.\n\u00a0\nExample 1:\n\n\nInput: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2\nOutput: true\nExplanation: There are two paths from vertex 0 to vertex 2:\n- 0 \u2192 1 \u2192 2\n- 0 \u2192 2\n\nExample 2:\n\n\nInput: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5\nOutput: false\nExplanation: There is no path from vertex 0 to vertex 5.\n\n\u00a0\nConstraints:\n\n1 <= n <= 2 * 105\n0 <= edges.length <= 2 * 105\nedges[i].length == 2\n0 <= ui, vi <= n - 1\nui != vi\n0 <= source, destination <= n - 1\nThere are no duplicate edges.\nThere are no self edges.\n\n",
    "starterCode": "class Solution:\n    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[1,3],[1,4]], source = 0, destination = 4",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4]], source = 0, destination = 4",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 5, edges = [[0,1],[2,3],[1,4]], source = 0, destination = 4",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2],[2,3]], source = 0, destination = 3",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 4, edges = [[0,1],[2,3]], source = 0, destination = 3",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 1, edges = [], source = 0, destination = 0",
        "output": "True"
      },
      {
        "input": "n = 4, edges = [[0,1],[1,2]], source = 0, destination = 3",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], source = 0, destination = 9",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,0]], source = 0, destination = 3",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4],[0,4]], source = 0, destination = 7",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15, edges = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,0]], source = 14, destination = 7",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14]], source = 0, destination = 14",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 100, edges = [], source = 0, destination = 99",
        "output": "False"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[1,3],[2,5],[5,9],[9,15],[15,19]], source = 0, destination = 19",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 25, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,0]], source = 15, destination = 10",
        "output": "True"
      },
      {
        "input": "n = 25, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24]], source = 0, destination = 24",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 150, edges = [[i, i+1] for i in range(149)] + [[i, i+2] for i in range(148)] + [[i, i+3] for i in range(147)], source = 0, destination = 149",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[5,6],[6,7],[7,8],[8,9]], source = 0, destination = 9",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 100, edges = [[i, i+1] for i in range(99)] + [[i, i+3] for i in range(97)], source = 0, destination = 99",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 35, edges = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21],[22,23],[24,25],[26,27],[28,29],[30,31],[32,33],[33,34]], source = 0, destination = 34",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[3,6]], source = 0, destination = 9",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15, edges = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,10],[10,13]], source = 0, destination = 14",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,0],[1,3],[2,0]], source = 0, destination = 4",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 100, edges = [[i,i+1] for i in range(99)], source = 0, destination = 99",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 50, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,0]], source = 0, destination = 49",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 25, edges = [[i,i+1] for i in range(24)] + [[i,i+2] for i in range(0,23,2)], source = 0, destination = 24",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 25, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,0]], source = 0, destination = 24",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[0,19]], source = 0, destination = 19",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 200, edges = [[i, i+1] for i in range(199)], source = 50, destination = 150",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[0,14]], source = 0, destination = 14",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 75, edges = [[i, i+1] for i in range(74)] + [[i, i+2] for i in range(73)], source = 0, destination = 74",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], source = 0, destination = 5",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 8, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[0,7]], source = 0, destination = 7",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 25, edges = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21],[22,23],[23,24]], source = 0, destination = 24",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,0]], source = 0, destination = 9",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 100, edges = [[i,i+1] for i in range(0, 99, 2)] + [[i,i+1] for i in range(1, 98, 2)], source = 0, destination = 99",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 5, edges = [[0,1],[1,2],[2,3],[3,4],[4,0],[0,2],[1,3],[2,4]], source = 0, destination = 4",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], source = 14, destination = 0",
        "output": "True"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14]], source = 0, destination = 14",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 35, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34]], source = 0, destination = 34",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 50, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,0]], source = 10, destination = 35",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10, edges = [[0,1],[2,3],[4,5],[6,7],[8,9]], source = 0, destination = 9",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,0]], source = 0, destination = 5",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9],[0,8],[0,7],[0,6],[0,5],[0,4],[0,3],[0,2]], source = 0, destination = 9",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]], source = 0, destination = 19",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 20, edges = [[0,1],[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12],[11,13],[12,14],[13,15],[14,16],[15,17],[16,18],[17,19],[18,19]], source = 0, destination = 19",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10, edges = [[0,1],[0,3],[1,2],[1,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]], source = 0, destination = 9",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19]], source = 0, destination = 19",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,0]], source = 5, destination = 15",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[0,19]], source = 0, destination = 9",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 30, edges = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19],[20,21],[22,23],[24,25],[26,27],[28,29]], source = 0, destination = 29",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 50, edges = [[i, (i+1)%50] for i in range(50)], source = 0, destination = 25",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 5, edges = [[0,1],[0,2],[0,3],[0,4]], source = 0, destination = 4",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[0,9]], source = 0, destination = 9",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 100, edges = [[i,(i+1)%100] for i in range(100)], source = 0, destination = 99",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 9, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,3],[6,7],[7,8],[8,6]], source = 0, destination = 8",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[3,4],[4,5],[6,7],[7,8],[9,10],[10,11],[12,13],[13,14]], source = 0, destination = 14",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15, edges = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,0],[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14]], source = 0, destination = 14",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,0]], source = 0, destination = 7",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15, edges = [[0,1],[1,2],[2,3],[3,4],[4,0],[5,6],[6,7],[7,8],[8,9],[9,5],[10,11],[11,12],[12,13],[13,14],[14,10]], source = 0, destination = 14",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 30, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29]], source = 0, destination = 29",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,3],[3,4],[4,0],[5,6],[6,7],[7,8],[8,9],[9,5]], source = 0, destination = 5",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 30, edges = [[i,i+1] for i in range(29)] + [[i,i+2] for i in range(0,28,2)] + [[i,i+3] for i in range(0,27,3)], source = 0, destination = 29",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 20, edges = [[0,1],[2,3],[4,5],[6,7],[8,9],[10,11],[12,13],[14,15],[16,17],[18,19]], source = 0, destination = 19",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 100, edges = [[i, (i+1) % 100] for i in range(100)], source = 0, destination = 50",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[3,4],[5,6],[7,8],[8,9]], source = 0, destination = 9",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 50, edges = [[i, (i+1) % 50] for i in range(50)], source = 0, destination = 25",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 20, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[0,19],[0,18],[0,17],[0,16],[0,15],[0,14],[0,13],[0,12],[0,11],[0,10],[0,9],[0,8],[0,7],[0,6],[0,5],[0,4],[0,3],[0,2]], source = 0, destination = 19",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 100, edges = [[i, i+1] for i in range(99)], source = 0, destination = 99",
        "output": "Error: Solution.validPath() missing 1 required positional argument: 'edges'"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[0,3],[0,4],[1,5],[1,6],[2,7],[2,8],[3,9],[3,10],[4,11],[4,12],[5,13],[6,14]], source = 0, destination = 14",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 50, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49]], source = 0, destination = 49",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 10, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,3],[6,7],[7,8],[8,9],[9,6]], source = 0, destination = 5",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 30, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,0]], source = 0, destination = 29",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 15, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6],[3,7],[3,8],[4,9],[4,10],[5,11],[5,12],[6,13],[6,14]], source = 0, destination = 14",
        "output": "Error: maximum recursion depth exceeded"
      },
      {
        "input": "n = 12, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,0]], source = 0, destination = 5",
        "output": "Error: maximum recursion depth exceeded"
      }
    ]
  },
  {
    "id": 1137,
    "difficulty": "Easy",
    "tags": [
      "Memoization",
      "Math",
      "Dynamic Programming"
    ],
    "problemDescription": "The Tribonacci sequence Tn is defined as follows:\u00a0\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\nGiven n, return the value of Tn.\n\u00a0\nExample 1:\n\nInput: n = 4\nOutput: 4\nExplanation:\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4\n\nExample 2:\n\nInput: n = 25\nOutput: 1389537\n\n\u00a0\nConstraints:\n\n0 <= n <= 37\nThe answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.\n\n",
    "starterCode": "class Solution:\n    def tribonacci(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 0",
        "output": "0"
      },
      {
        "input": "n = 3",
        "output": "2"
      },
      {
        "input": "n = 4",
        "output": "4"
      },
      {
        "input": "n = 37",
        "output": "2082876103"
      },
      {
        "input": "n = 2",
        "output": "1"
      },
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 25",
        "output": "1389537"
      },
      {
        "input": "n = 30",
        "output": "29249425"
      },
      {
        "input": "n = 15",
        "output": "3136"
      },
      {
        "input": "n = 22",
        "output": "223317"
      },
      {
        "input": "n = 12",
        "output": "504"
      },
      {
        "input": "n = 35",
        "output": "615693474"
      },
      {
        "input": "n = 26",
        "output": "2555757"
      },
      {
        "input": "n = 27",
        "output": "4700770"
      },
      {
        "input": "n = 18",
        "output": "19513"
      },
      {
        "input": "n = 20",
        "output": "66012"
      },
      {
        "input": "n = 10",
        "output": "149"
      },
      {
        "input": "n = 5",
        "output": "7"
      }
    ]
  },
  {
    "id": 401,
    "difficulty": "Easy",
    "tags": [
      "Bit Manipulation",
      "Backtracking"
    ],
    "problemDescription": "A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent\u00a0the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n\nFor example, the below binary watch reads \"4:51\".\n\n\nGiven an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\nThe hour must not contain a leading zero.\n\nFor example, \"01:00\" is not valid. It should be \"1:00\".\n\nThe minute must\u00a0consist of two digits and may contain a leading zero.\n\nFor example, \"10:2\" is not valid. It should be \"10:02\".\n\n\u00a0\nExample 1:\nInput: turnedOn = 1\nOutput: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\nExample 2:\nInput: turnedOn = 9\nOutput: []\n\n\u00a0\nConstraints:\n\n0 <= turnedOn <= 10\n\n",
    "starterCode": "class Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "turnedOn = 5",
        "output": "['0:31', '0:47', '0:55', '0:59', '1:15', '1:23', '1:27', '1:29', '1:30', '1:39', '1:43', '1:45', '1:46', '1:51', '1:53', '1:54', '1:57', '1:58', '2:15', '2:23', '2:27', '2:29', '2:30', '2:39', '2:43', '2:45', '2:46', '2:51', '2:53', '2:54', '2:57', '2:58', '3:07', '3:11', '3:13', '3:14', '3:19', '3:21', '3:22', '3:25', '3:26', '3:28', '3:35', '3:37', '3:38', '3:41', '3:42', '3:44', '3:49', '3:50', '3:52', '3:56', '4:15', '4:23', '4:27', '4:29', '4:30', '4:39', '4:43', '4:45', '4:46', '4:51', '4:53', '4:54', '4:57', '4:58', '5:07', '5:11', '5:13', '5:14', '5:19', '5:21', '5:22', '5:25', '5:26', '5:28', '5:35', '5:37', '5:38', '5:41', '5:42', '5:44', '5:49', '5:50', '5:52', '5:56', '6:07', '6:11', '6:13', '6:14', '6:19', '6:21', '6:22', '6:25', '6:26', '6:28', '6:35', '6:37', '6:38', '6:41', '6:42', '6:44', '6:49', '6:50', '6:52', '6:56', '7:03', '7:05', '7:06', '7:09', '7:10', '7:12', '7:17', '7:18', '7:20', '7:24', '7:33', '7:34', '7:36', '7:40', '7:48', '8:15', '8:23', '8:27', '8:29', '8:30', '8:39', '8:43', '8:45', '8:46', '8:51', '8:53', '8:54', '8:57', '8:58', '9:07', '9:11', '9:13', '9:14', '9:19', '9:21', '9:22', '9:25', '9:26', '9:28', '9:35', '9:37', '9:38', '9:41', '9:42', '9:44', '9:49', '9:50', '9:52', '9:56', '10:07', '10:11', '10:13', '10:14', '10:19', '10:21', '10:22', '10:25', '10:26', '10:28', '10:35', '10:37', '10:38', '10:41', '10:42', '10:44', '10:49', '10:50', '10:52', '10:56', '11:03', '11:05', '11:06', '11:09', '11:10', '11:12', '11:17', '11:18', '11:20', '11:24', '11:33', '11:34', '11:36', '11:40', '11:48']"
      },
      {
        "input": "turnedOn = 8",
        "output": "['7:31', '7:47', '7:55', '7:59', '11:31', '11:47', '11:55', '11:59']"
      },
      {
        "input": "turnedOn = 0",
        "output": "['0:00']"
      },
      {
        "input": "turnedOn = 9",
        "output": "[]"
      },
      {
        "input": "turnedOn = 3",
        "output": "['0:07', '0:11', '0:13', '0:14', '0:19', '0:21', '0:22', '0:25', '0:26', '0:28', '0:35', '0:37', '0:38', '0:41', '0:42', '0:44', '0:49', '0:50', '0:52', '0:56', '1:03', '1:05', '1:06', '1:09', '1:10', '1:12', '1:17', '1:18', '1:20', '1:24', '1:33', '1:34', '1:36', '1:40', '1:48', '2:03', '2:05', '2:06', '2:09', '2:10', '2:12', '2:17', '2:18', '2:20', '2:24', '2:33', '2:34', '2:36', '2:40', '2:48', '3:01', '3:02', '3:04', '3:08', '3:16', '3:32', '4:03', '4:05', '4:06', '4:09', '4:10', '4:12', '4:17', '4:18', '4:20', '4:24', '4:33', '4:34', '4:36', '4:40', '4:48', '5:01', '5:02', '5:04', '5:08', '5:16', '5:32', '6:01', '6:02', '6:04', '6:08', '6:16', '6:32', '7:00', '8:03', '8:05', '8:06', '8:09', '8:10', '8:12', '8:17', '8:18', '8:20', '8:24', '8:33', '8:34', '8:36', '8:40', '8:48', '9:01', '9:02', '9:04', '9:08', '9:16', '9:32', '10:01', '10:02', '10:04', '10:08', '10:16', '10:32', '11:00']"
      },
      {
        "input": "turnedOn = 10",
        "output": "[]"
      },
      {
        "input": "turnedOn = 4",
        "output": "['0:15', '0:23', '0:27', '0:29', '0:30', '0:39', '0:43', '0:45', '0:46', '0:51', '0:53', '0:54', '0:57', '0:58', '1:07', '1:11', '1:13', '1:14', '1:19', '1:21', '1:22', '1:25', '1:26', '1:28', '1:35', '1:37', '1:38', '1:41', '1:42', '1:44', '1:49', '1:50', '1:52', '1:56', '2:07', '2:11', '2:13', '2:14', '2:19', '2:21', '2:22', '2:25', '2:26', '2:28', '2:35', '2:37', '2:38', '2:41', '2:42', '2:44', '2:49', '2:50', '2:52', '2:56', '3:03', '3:05', '3:06', '3:09', '3:10', '3:12', '3:17', '3:18', '3:20', '3:24', '3:33', '3:34', '3:36', '3:40', '3:48', '4:07', '4:11', '4:13', '4:14', '4:19', '4:21', '4:22', '4:25', '4:26', '4:28', '4:35', '4:37', '4:38', '4:41', '4:42', '4:44', '4:49', '4:50', '4:52', '4:56', '5:03', '5:05', '5:06', '5:09', '5:10', '5:12', '5:17', '5:18', '5:20', '5:24', '5:33', '5:34', '5:36', '5:40', '5:48', '6:03', '6:05', '6:06', '6:09', '6:10', '6:12', '6:17', '6:18', '6:20', '6:24', '6:33', '6:34', '6:36', '6:40', '6:48', '7:01', '7:02', '7:04', '7:08', '7:16', '7:32', '8:07', '8:11', '8:13', '8:14', '8:19', '8:21', '8:22', '8:25', '8:26', '8:28', '8:35', '8:37', '8:38', '8:41', '8:42', '8:44', '8:49', '8:50', '8:52', '8:56', '9:03', '9:05', '9:06', '9:09', '9:10', '9:12', '9:17', '9:18', '9:20', '9:24', '9:33', '9:34', '9:36', '9:40', '9:48', '10:03', '10:05', '10:06', '10:09', '10:10', '10:12', '10:17', '10:18', '10:20', '10:24', '10:33', '10:34', '10:36', '10:40', '10:48', '11:01', '11:02', '11:04', '11:08', '11:16', '11:32']"
      },
      {
        "input": "turnedOn = 2",
        "output": "['0:03', '0:05', '0:06', '0:09', '0:10', '0:12', '0:17', '0:18', '0:20', '0:24', '0:33', '0:34', '0:36', '0:40', '0:48', '1:01', '1:02', '1:04', '1:08', '1:16', '1:32', '2:01', '2:02', '2:04', '2:08', '2:16', '2:32', '3:00', '4:01', '4:02', '4:04', '4:08', '4:16', '4:32', '5:00', '6:00', '8:01', '8:02', '8:04', '8:08', '8:16', '8:32', '9:00', '10:00']"
      },
      {
        "input": "turnedOn = 6",
        "output": "['1:31', '1:47', '1:55', '1:59', '2:31', '2:47', '2:55', '2:59', '3:15', '3:23', '3:27', '3:29', '3:30', '3:39', '3:43', '3:45', '3:46', '3:51', '3:53', '3:54', '3:57', '3:58', '4:31', '4:47', '4:55', '4:59', '5:15', '5:23', '5:27', '5:29', '5:30', '5:39', '5:43', '5:45', '5:46', '5:51', '5:53', '5:54', '5:57', '5:58', '6:15', '6:23', '6:27', '6:29', '6:30', '6:39', '6:43', '6:45', '6:46', '6:51', '6:53', '6:54', '6:57', '6:58', '7:07', '7:11', '7:13', '7:14', '7:19', '7:21', '7:22', '7:25', '7:26', '7:28', '7:35', '7:37', '7:38', '7:41', '7:42', '7:44', '7:49', '7:50', '7:52', '7:56', '8:31', '8:47', '8:55', '8:59', '9:15', '9:23', '9:27', '9:29', '9:30', '9:39', '9:43', '9:45', '9:46', '9:51', '9:53', '9:54', '9:57', '9:58', '10:15', '10:23', '10:27', '10:29', '10:30', '10:39', '10:43', '10:45', '10:46', '10:51', '10:53', '10:54', '10:57', '10:58', '11:07', '11:11', '11:13', '11:14', '11:19', '11:21', '11:22', '11:25', '11:26', '11:28', '11:35', '11:37', '11:38', '11:41', '11:42', '11:44', '11:49', '11:50', '11:52', '11:56']"
      },
      {
        "input": "turnedOn = 1",
        "output": "['0:01', '0:02', '0:04', '0:08', '0:16', '0:32', '1:00', '2:00', '4:00', '8:00']"
      },
      {
        "input": "turnedOn = 7",
        "output": "['3:31', '3:47', '3:55', '3:59', '5:31', '5:47', '5:55', '5:59', '6:31', '6:47', '6:55', '6:59', '7:15', '7:23', '7:27', '7:29', '7:30', '7:39', '7:43', '7:45', '7:46', '7:51', '7:53', '7:54', '7:57', '7:58', '9:31', '9:47', '9:55', '9:59', '10:31', '10:47', '10:55', '10:59', '11:15', '11:23', '11:27', '11:29', '11:30', '11:39', '11:43', '11:45', '11:46', '11:51', '11:53', '11:54', '11:57', '11:58']"
      },
      {
        "input": "turnedOn = 11",
        "output": "[]"
      }
    ]
  },
  {
    "id": 2383,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array"
    ],
    "problemDescription": "You are entering a competition, and are given two positive integers initialEnergy and initialExperience denoting your initial energy and initial experience respectively.\nYou are also given two 0-indexed integer arrays energy and experience, both of length n.\nYou will face n opponents in order. The energy and experience of the ith opponent is denoted by energy[i] and experience[i] respectively. When you face an opponent, you need to have both strictly greater experience and energy to defeat them and move to the next opponent if available.\nDefeating the ith opponent increases your experience by experience[i], but decreases your energy by energy[i].\nBefore starting the competition, you can train for some number of hours. After each hour of training, you can either choose to increase your initial experience by one, or increase your initial energy by one.\nReturn the minimum number of training hours required to defeat all n opponents.\n\u00a0\nExample 1:\n\nInput: initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]\nOutput: 8\nExplanation: You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training.\nYou face the opponents in the following order:\n- You have more energy and experience than the 0th opponent so you win.\n  Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7.\n- You have more energy and experience than the 1st opponent so you win.\n  Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13.\n- You have more energy and experience than the 2nd opponent so you win.\n  Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16.\n- You have more energy and experience than the 3rd opponent so you win.\n  Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17.\nYou did a total of 6 + 2 = 8 hours of training before the competition, so we return 8.\nIt can be proven that no smaller answer exists.\n\nExample 2:\n\nInput: initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]\nOutput: 0\nExplanation: You do not need any additional energy or experience to win the competition, so we return 0.\n\n\u00a0\nConstraints:\n\nn == energy.length == experience.length\n1 <= n <= 100\n1 <= initialEnergy, initialExperience, energy[i], experience[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def minNumberOfHours(self, initialEnergy: int, initialExperience: int, energy: List[int], experience: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [50,50], experience = [50,50]",
        "output": "52"
      },
      {
        "input": "initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]",
        "output": "8"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [100], experience = [100]",
        "output": "200"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [50,25,25], experience = [50,25,25]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [10,20,30], experience = [10,20,30]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [100], experience = [100]",
        "output": "2"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [50,50], experience = [50,50]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [1,1,1,1], experience = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [1,1,1,1,1,1,1,1,1,1], experience = [1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [1,1,1,1], experience = [1,1,1,1]",
        "output": "5"
      },
      {
        "input": "initialEnergy = 99, initialExperience = 99, energy = [100], experience = [100]",
        "output": "4"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], experience = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "71"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 25, energy = [1,2,3,4,5,6,7,8,9,10], experience = [10,9,8,7,6,5,4,3,2,1]",
        "output": "6"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 25, energy = [10,15,20,5,10], experience = [20,15,10,25,15]",
        "output": "31"
      },
      {
        "input": "initialEnergy = 40, initialExperience = 40, energy = [20, 20, 20, 20], experience = [20, 20, 20, 20]",
        "output": "41"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 20, energy = [10,20,30,40,50], experience = [1,2,3,4,5]",
        "output": "121"
      },
      {
        "input": "initialEnergy = 15, initialExperience = 8, energy = [7, 7, 7, 7, 7, 7], experience = [6, 6, 6, 6, 6, 6]",
        "output": "28"
      },
      {
        "input": "initialEnergy = 70, initialExperience = 40, energy = [5, 15, 25, 35, 45], experience = [45, 35, 25, 15, 5]",
        "output": "62"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], experience = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "135"
      },
      {
        "input": "initialEnergy = 2, initialExperience = 2, energy = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], experience = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "19"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 25, energy = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], experience = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "36"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 5, energy = [5,6,7,8], experience = [1,2,3,4]",
        "output": "17"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 5, energy = [10,15,5,20], experience = [3,7,10,2]",
        "output": "31"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [10,20,30,40], experience = [5,15,25,35]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 40, initialExperience = 25, energy = [10,15,10,20,15,25], experience = [25,20,15,10,25,20]",
        "output": "57"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 30, energy = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], experience = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "181"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 20, energy = [1,3,5,7,9], experience = [9,7,5,3,1]",
        "output": "16"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [5,5,5,5,5,5,5,5,5,5], experience = [1,2,3,4,5,6,7,8,9,10]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 30, energy = [40,35,20,10,5], experience = [25,20,15,10,5]",
        "output": "61"
      },
      {
        "input": "initialEnergy = 70, initialExperience = 30, energy = [20,10,30,5,20], experience = [15,25,10,20,5]",
        "output": "16"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 15, energy = [10,20,30], experience = [5,15,25]",
        "output": "41"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 10, energy = [1,2,3,4,5,6,7,8,9], experience = [9,8,7,6,5,4,3,2,1]",
        "output": "45"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 15, energy = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], experience = [14, 13, 12, 11, 10, 9, 8, 7, 6, 5]",
        "output": "76"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [25,25,25,25], experience = [20,20,20,20]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 15, initialExperience = 10, energy = [1,2,3,4,5,6,7,8,9,10], experience = [10,9,8,7,6,5,4,3,2,1]",
        "output": "42"
      },
      {
        "input": "initialEnergy = 25, initialExperience = 15, energy = [8, 7, 6, 5, 4, 3, 2, 1], experience = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "12"
      },
      {
        "input": "initialEnergy = 5, initialExperience = 5, energy = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], experience = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "26"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 15, energy = [3,2,6,1], experience = [8,4,2,7]",
        "output": "3"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 25, energy = [10, 10, 10, 10], experience = [25, 26, 27, 28]",
        "output": "22"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [5, 15, 25, 35], experience = [30, 20, 10, 5]",
        "output": "92"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 30, energy = [1,1,1,1,1,1,1,1,1,1], experience = [9,9,9,9,9,9,9,9,9,9]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [1,2,3,4,5,6,7,8,9,10], experience = [10,9,8,7,6,5,4,3,2,1]",
        "output": "47"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 50, energy = [10, 20, 30], experience = [25, 20, 15]",
        "output": "31"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], experience = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "91"
      },
      {
        "input": "initialEnergy = 15, initialExperience = 20, energy = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], experience = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2]",
        "output": "46"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [20,30,40,50,60,70,80,90,100], experience = [1,2,3,4,5,6,7,8,9]",
        "output": "441"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [10,20,30,40,50], experience = [1,2,3,4,5]",
        "output": "141"
      },
      {
        "input": "initialEnergy = 25, initialExperience = 25, energy = [20,15,10,5], experience = [5,10,15,20]",
        "output": "26"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 20, energy = [15, 25, 10], experience = [10, 15, 25]",
        "output": "21"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 30, energy = [10, 20, 15, 25], experience = [5, 25, 20, 30]",
        "output": "21"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [99, 98, 97, 96, 95], experience = [95, 96, 97, 98, 99]",
        "output": "580"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [10,20,30,40], experience = [40,30,20,10]",
        "output": "140"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 5, energy = [3,2,6,1], experience = [5,4,3,2]",
        "output": "4"
      },
      {
        "input": "initialEnergy = 5, initialExperience = 5, energy = [3,3,3,3,3,3,3,3,3,3], experience = [3,3,3,3,3,3,3,3,3,3]",
        "output": "26"
      },
      {
        "input": "initialEnergy = 5, initialExperience = 5, energy = [1, 2, 3, 4, 5], experience = [5, 4, 3, 2, 1]",
        "output": "12"
      },
      {
        "input": "initialEnergy = 60, initialExperience = 30, energy = [20, 20, 20, 20, 20], experience = [20, 20, 20, 20, 20]",
        "output": "41"
      },
      {
        "input": "initialEnergy = 75, initialExperience = 40, energy = [40, 30, 20, 10, 5], experience = [50, 40, 30, 20, 10]",
        "output": "42"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [25,10,10,5], experience = [20,25,30,10]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41], experience = [51, 49, 48, 47, 46, 45, 44, 43, 42, 41]",
        "output": "408"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 5, energy = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], experience = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "52"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 10, energy = [25, 15, 5, 10, 20], experience = [30, 20, 10, 5, 15]",
        "output": "77"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [99,98,97,96,95,94,93,92,91,90], experience = [2,3,4,5,6,7,8,9,10,11]",
        "output": "947"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 100, energy = [0,0,0,0], experience = [99,98,97,96]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 30, energy = [1,2,3,4,5,6,7,8,9,10], experience = [10,9,8,7,6,5,4,3,2,1]",
        "output": "26"
      },
      {
        "input": "initialEnergy = 5, initialExperience = 3, energy = [1,2,3,4,5], experience = [5,4,3,2,1]",
        "output": "14"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [5, 6, 7, 8], experience = [15, 14, 13, 12]",
        "output": "23"
      },
      {
        "input": "initialEnergy = 80, initialExperience = 60, energy = [15,20,25,30,35], experience = [65,70,75,80,85]",
        "output": "52"
      },
      {
        "input": "initialEnergy = 40, initialExperience = 30, energy = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], experience = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "61"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [50,30,20], experience = [20,30,50]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 25, initialExperience = 25, energy = [13, 14, 15, 16, 17], experience = [17, 16, 15, 14, 13]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 30, energy = [29, 28, 27, 26, 25], experience = [25, 26, 27, 28, 29]",
        "output": "106"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 20, energy = [5,5,5,5,5,5,5,5,5,5], experience = [1,2,3,4,5,6,7,8,9,10]",
        "output": "31"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [50,25,12,6,3,1], experience = [1,3,6,12,25,50]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 80, initialExperience = 70, energy = [10,20,30,40,50,60,70,80,90,100], experience = [1,2,3,4,5,6,7,8,9,10]",
        "output": "471"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 1, energy = [99, 99, 99], experience = [98, 97, 96]",
        "output": "296"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 15, energy = [3,4,5,6,7], experience = [5,6,7,8,9]",
        "output": "16"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 10, energy = [1,2,3,4,5,6,7,8,9,10], experience = [10,9,8,7,6,5,4,3,2,1]",
        "output": "37"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 20, energy = [25,25,25,25], experience = [15,15,15,15]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [10, 20, 30, 40], experience = [40, 30, 20, 10]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], experience = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "212"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [50,40,30,20,10], experience = [10,20,30,40,50]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 60, initialExperience = 25, energy = [20, 20, 20, 20], experience = [15, 25, 35, 45]",
        "output": "21"
      },
      {
        "input": "initialEnergy = 60, initialExperience = 40, energy = [10,20,30,40], experience = [40,30,20,10]",
        "output": "42"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], experience = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [10, 20, 30, 40], experience = [45, 35, 25, 15]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 3, initialExperience = 4, energy = [2,5,7,8], experience = [5,3,6,10]",
        "output": "22"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 10, energy = [30,20,10,5,25], experience = [15,25,5,10,30]",
        "output": "47"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [99, 1, 1], experience = [1, 99, 1]",
        "output": "199"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 20, energy = [10,20,30,40], experience = [15,15,15,15]",
        "output": "81"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [99,99,99,99], experience = [99,99,99,99]",
        "output": "297"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [90,80,70,60,50,40,30,20,10], experience = [9,8,7,6,5,4,3,2,1]",
        "output": "459"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [25,25,25,25], experience = [20,30,20,30]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [10, 10, 10, 10], experience = [11, 12, 13, 14]",
        "output": "33"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [10,20,30,40,50], experience = [50,40,30,20,10]",
        "output": "200"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [1, 3, 2, 4, 5, 3, 2, 1], experience = [2, 1, 3, 2, 1, 4, 3, 2]",
        "output": "23"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 1, energy = [98,1,0,0,0], experience = [98,1,0,0,0]",
        "output": "98"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 25, energy = [5,15,25,35,45], experience = [40,35,30,25,20]",
        "output": "112"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 10, energy = [5,10,15,20], experience = [8,6,4,2]",
        "output": "31"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 30, energy = [10, 20, 30, 40], experience = [20, 30, 40, 50]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 15, initialExperience = 20, energy = [3, 3, 3, 3, 3], experience = [1, 2, 3, 4, 5]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 50, energy = [25,25,25,25], experience = [51,52,53,54]",
        "output": "93"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [10,20,30], experience = [30,20,10]",
        "output": "90"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 100, energy = [1,2,3,4,5,6,7,8,9,10], experience = [10,9,8,7,6,5,4,3,2,1]",
        "output": "6"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [1, 2, 3, 4, 5], experience = [1, 2, 3, 4, 5]",
        "output": "16"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 15, energy = [5, 10, 15, 20, 25], experience = [10, 15, 20, 25, 30]",
        "output": "46"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [25,25,25,25], experience = [25,25,25,25]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 60, initialExperience = 60, energy = [10,20,30,40,50,60,70,80,90,100], experience = [100,90,80,70,60,50,40,30,20,10]",
        "output": "532"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [5, 5, 5, 5], experience = [5, 5, 5, 5]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [10,9,8,7,6,5,4,3,2,1], experience = [1,2,3,4,5,6,7,8,9,10]",
        "output": "56"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [10,20,30], experience = [15,25,35]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [5,5,5,5,5], experience = [1,2,3,4,5]",
        "output": "16"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [1,1,1], experience = [1,1,1]",
        "output": "4"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 100, energy = [1, 1, 1], experience = [1, 1, 1]",
        "output": "3"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 50, energy = [50, 50, 50, 50], experience = [1, 1, 1, 1]",
        "output": "200"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 1, energy = [100], experience = [1]",
        "output": "2"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [50, 25, 25], experience = [50, 25, 25]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 5, initialExperience = 5, energy = [2, 3, 4], experience = [4, 3, 2]",
        "output": "5"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 30, energy = [10,20,10], experience = [5,15,10]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 15, initialExperience = 15, energy = [5, 5, 5], experience = [5, 5, 5]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [10, 20, 30, 40], experience = [10, 20, 30, 40]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [50, 50], experience = [50, 50]",
        "output": "52"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [1, 1, 1, 1], experience = [1, 1, 1, 1]",
        "output": "5"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 20, energy = [5, 5, 5, 5, 5], experience = [5, 5, 5, 5, 5]",
        "output": "6"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [50, 40, 30], experience = [30, 40, 50]",
        "output": "71"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 1, energy = [25, 25, 25], experience = [25, 25, 25]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [5, 4, 3, 2, 1], experience = [1, 2, 3, 4, 5]",
        "output": "16"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [10,10,10], experience = [10,10,10]",
        "output": "22"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 1, energy = [1, 1, 1, 1], experience = [50, 50, 50, 50]",
        "output": "50"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 100, energy = [1], experience = [100]",
        "output": "2"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 20, energy = [10, 10, 10], experience = [10, 10, 10]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 1, energy = [99, 98, 97], experience = [97, 98, 99]",
        "output": "292"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [10, 10, 10, 10, 10], experience = [10, 10, 10, 10, 10]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 100, energy = [1, 1, 1, 1], experience = [1, 1, 1, 1]",
        "output": "4"
      },
      {
        "input": "initialEnergy = 5, initialExperience = 5, energy = [3,2,1], experience = [1,2,3]",
        "output": "2"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], experience = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 5, initialExperience = 5, energy = [10, 10, 10], experience = [10, 10, 10]",
        "output": "32"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 10, energy = [10,10,10], experience = [5,5,5]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [1,1,1,1,1,1,1,1,1,1], experience = [1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [1,2,3,4,5], experience = [5,4,3,2,1]",
        "output": "6"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [25, 25, 25, 25], experience = [25, 25, 25, 25]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [1, 2, 3, 4, 5], experience = [5, 4, 3, 2, 1]",
        "output": "6"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [5,5,5,5,5,5,5,5,5,5], experience = [5,5,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [10, 20, 30], experience = [15, 25, 35]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 1, energy = [2,3,4,5], experience = [3,4,5,6]",
        "output": "8"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [10,20,30], experience = [30,20,10]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [50, 30], experience = [40, 60]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [5,5,5,5], experience = [5,5,5,5]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [1, 2, 3], experience = [1, 2, 3]",
        "output": "7"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [1,1,1,1], experience = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [10,9,8,7], experience = [7,8,9,10]",
        "output": "25"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [50, 25, 25], experience = [50, 25, 25]",
        "output": "52"
      },
      {
        "input": "initialEnergy = 3, initialExperience = 3, energy = [1,1,1,1], experience = [1,1,1,1]",
        "output": "2"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [50,50,50], experience = [50,50,50]",
        "output": "102"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [50,50,50], experience = [30,30,30]",
        "output": "51"
      },
      {
        "input": "initialEnergy = 20, initialExperience = 20, energy = [10, 10], experience = [10, 10]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [10, 10, 10], experience = [10, 10, 10]",
        "output": "22"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 1, energy = [10, 10, 10], experience = [1, 1, 1]",
        "output": "22"
      },
      {
        "input": "initialEnergy = 30, initialExperience = 10, energy = [15, 15, 15], experience = [5, 5, 5]",
        "output": "16"
      },
      {
        "input": "initialEnergy = 60, initialExperience = 50, energy = [30, 20, 10], experience = [10, 20, 30]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [10,20,30], experience = [5,15,25]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 1, energy = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], experience = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 100, energy = [50, 40, 30], experience = [10, 20, 30]",
        "output": "21"
      },
      {
        "input": "initialEnergy = 3, initialExperience = 3, energy = [1,1,3,3], experience = [3,3,1,1]",
        "output": "7"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [10, 20, 30], experience = [5, 15, 25]",
        "output": "11"
      },
      {
        "input": "initialEnergy = 1, initialExperience = 50, energy = [25, 25, 25], experience = [25, 25, 25]",
        "output": "75"
      },
      {
        "input": "initialEnergy = 100, initialExperience = 1, energy = [1, 1, 1], experience = [1, 1, 1]",
        "output": "1"
      },
      {
        "input": "initialEnergy = 50, initialExperience = 50, energy = [50], experience = [50]",
        "output": "2"
      },
      {
        "input": "initialEnergy = 10, initialExperience = 10, energy = [5,5,5], experience = [5,5,5]",
        "output": "6"
      }
    ]
  },
  {
    "id": 268,
    "difficulty": "Easy",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Hash Table",
      "Math",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n\u00a0\nExample 1:\n\nInput: nums = [3,0,1]\nOutput: 2\nExplanation:\nn = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n\nExample 2:\n\nInput: nums = [0,1]\nOutput: 2\nExplanation:\nn = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n\nExample 3:\n\nInput: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation:\nn = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n\n\n\n\u00a0\n\n\n\u00a0\n\n\u00a0\n\u00a0\n\n\n\n\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= n <= 104\n0 <= nums[i] <= n\nAll the numbers of nums are unique.\n\n\u00a0\nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?\n",
    "starterCode": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1]",
        "output": "0"
      },
      {
        "input": "nums = [3,0,1]",
        "output": "2"
      },
      {
        "input": "nums = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "nums = [0]",
        "output": "1"
      },
      {
        "input": "nums = [5,2,4,6,3,0,1]",
        "output": "7"
      },
      {
        "input": "nums = [0,2,3,4]",
        "output": "1"
      },
      {
        "input": "nums = [8,6,4,2,0,1,3,5,7]",
        "output": "9"
      },
      {
        "input": "nums = [0,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "0"
      },
      {
        "input": "nums = [5,2,4,0,1]",
        "output": "3"
      },
      {
        "input": "nums = [0,1]",
        "output": "2"
      },
      {
        "input": "nums = [9,6,4,2,3,5,7,0,1]",
        "output": "8"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,10]",
        "output": "9"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,0,12]",
        "output": "11"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [0,1,2,3,5]",
        "output": "4"
      },
      {
        "input": "nums = [1,0,2,4]",
        "output": "3"
      },
      {
        "input": "nums = [10000,9999,9998,9997,9996,9995,9994,9993,9992,9991,9990,9989,9988,9987,9986,9985,9984,9983,9982,9981,9980,9979,9978,9977,9976,9975,9974,9973,9972,9971,9970,9969,9968,9967,9966,9965,9964,9963,9962,9961,9960,9959,9958,9957,9956,9955,9954,9953,9952,9951,9950,9949,9948,9947,9946,9945,9944,9943,9942,9941,9940,9939,9938,9937,9936,9935,9934,9933,9932,9931,9930,9929,9928,9927,9926,9925,9924,9923,9922,9921,9920,9919,9918,9917,9916,9915,9914,9913,9912,9911,9910,9909,9908,9907,9906,9905,9904,9903,9902,9901,9900]",
        "output": "10001"
      },
      {
        "input": "nums = [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "15"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15]",
        "output": "11"
      },
      {
        "input": "nums = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]",
        "output": "31"
      },
      {
        "input": "nums = [10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989, 9988, 9987, 9986, 9985, 9984, 9983, 9982, 9981, 9980, 9979, 9978, 9977, 9976, 9975, 9974, 9973, 9972, 9971, 9970, 9969, 9968, 9967, 9966, 9965, 9964, 9963, 9962, 9961, 9960, 9959, 9958, 9957, 9956, 9955, 9954, 9953, 9952, 9951, 9950, 9949, 9948, 9947, 9946, 9945, 9944, 9943, 9942, 9941, 9940, 9939, 9938, 9937, 9936, 9935, 9934, 9933, 9932, 9931, 9930, 9929, 9928, 9927, 9926, 9925, 9924, 9923, 9922, 9921, 9920, 9919, 9918, 9917, 9916, 9915, 9914, 9913, 9912, 9911, 9910, 9909, 9908, 9907, 9906, 9905, 9904, 9903, 9902, 9901, 9900, 9899, 9898, 9897, 9896, 9895, 9894, 9893, 9892, 9891, 9890, 9889, 9888, 9887, 9886, 9885, 9884, 9883, 9882, 9881, 9880, 9879, 9878, 9877, 9876, 9875, 9874, 9873, 9872, 9871, 9870, 9869, 9868, 9867, 9866, 9865, 9864, 9863, 9862, 9861, 9860, 9859, 9858, 9857, 9856, 9855, 9854, 9853, 9852, 9851, 9850, 9849, 9848, 9847, 9846, 9845, 9844, 9843, 9842, 9841, 9840, 9839, 9838, 9837, 9836, 9835, 9834, 9833, 9832, 9831, 9830, 9829, 9828, 9827, 9826, 9825, 9824, 9823, 9822, 9821, 9820, 9819, 9818, 9817, 9816, 9815, 9814, 9813, 9812, 9811, 9810, 9809, 9808, 9807, 9806, 9805, 9804, 9803, 9802, 9801, 9800]",
        "output": "10001"
      },
      {
        "input": "nums = [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
        "output": "15"
      },
      {
        "input": "nums = [2, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15]",
        "output": "14"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15]",
        "output": "16"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 0]",
        "output": "16"
      },
      {
        "input": "nums = [1, 0, 13, 14, 15, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "16"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0]",
        "output": "16"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 0]",
        "output": "16"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15]",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14]",
        "output": "0"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]",
        "output": "15"
      },
      {
        "input": "nums = [1,3,4,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "107"
      },
      {
        "input": "nums = [5000,4999,4998,4997,4996,4995,4994,4993,4992,4991,4990,4989,4988,4987,4986,4985,4984,4983,4982,4981,4980,4979,4978,4977,4976,4975,4974,4973,4972,4971,4970,4969,4968,4967,4966,4965,4964,4963,4962,4961,4960,4959,4958,4957,4956,4955,4954,4953,4952,4951,4950,4949,4948,4947,4946,4945,4944,4943,4942,4941,4940,4939,4938,4937,4936,4935,4934,4933,4932,4931,4930,4929,4928,4927,4926,4925,4924,4923,4922,4921,4920,4919,4918,4917,4916,4915,4914,4913,4912,4911,4910,4909,4908,4907,4906,4905,4904,4903,4902,4901,4900]",
        "output": "5001"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15]",
        "output": "13"
      },
      {
        "input": "nums = [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0]",
        "output": "2"
      },
      {
        "input": "nums = [15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]",
        "output": "14"
      },
      {
        "input": "nums = [5000, 4999, 4998, 4997, 4996, 4995, 4994, 4993, 4992, 4991, 4990, 4989, 4988, 4987, 4986, 4985, 4984, 4983, 4982, 4981, 4980, 4979, 4978, 4977, 4976, 4975, 4974, 4973, 4972, 4971, 4970, 4969, 4968, 4967, 4966, 4965, 4964, 4963, 4962, 4961, 4960, 4959, 4958, 4957, 4956, 4955, 4954, 4953, 4952, 4951, 4950, 4949, 4948, 4947, 4946, 4945, 4944, 4943, 4942, 4941, 4940, 4939, 4938, 4937, 4936, 4935, 4934, 4933, 4932, 4931, 4930, 4929, 4928, 4927, 4926, 4925, 4924, 4923, 4922, 4921, 4920, 4919, 4918, 4917, 4916, 4915, 4914, 4913, 4912, 4911, 4910, 4909, 4908, 4907, 4906, 4905, 4904, 4903, 4902, 4901, 4900, 4899, 4898, 4897, 4896, 4895, 4894, 4893, 4892, 4891, 4890, 4889, 4888, 4887, 4886, 4885, 4884, 4883, 4882, 4881, 4880, 4879, 4878, 4877, 4876, 4875, 4874, 4873, 4872, 4871, 4870, 4869, 4868, 4867, 4866, 4865, 4864, 4863, 4862, 4861, 4860, 4859, 4858, 4857, 4856, 4855, 4854, 4853, 4852, 4851, 4850, 4849, 4848, 4847, 4846, 4845, 4844, 4843, 4842, 4841, 4840, 4839, 4838, 4837, 4836, 4835, 4834, 4833, 4832, 4831, 4830, 4829, 4828, 4827, 4826, 4825, 4824, 4823, 4822, 4821, 4820, 4819, 4818, 4817, 4816, 4815, 4814, 4813, 4812, 4811, 4810, 4809, 4808, 4807, 4806, 4805, 4804, 4803, 4802, 4801, 4800]",
        "output": "5001"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]",
        "output": "9"
      },
      {
        "input": "nums = [2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 32, 31, 34, 33, 36, 35, 38, 37, 40, 39, 42, 41, 44, 43, 46, 45, 48, 47, 50, 49, 52, 51, 54, 53, 56, 55, 58, 57, 60, 59, 62, 61, 64, 63, 66, 65, 68, 67, 70, 69, 72, 71, 74, 73, 76, 75, 78, 77, 80, 79, 82, 81, 84, 83, 86, 85, 88, 87, 90, 89, 92, 91, 94, 93, 96, 95, 98, 97, 100, 99]",
        "output": "0"
      },
      {
        "input": "nums = [42,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150]",
        "output": "213"
      },
      {
        "input": "nums = [42, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "41"
      },
      {
        "input": "nums = [33,31,35,32,30,29,34,28,36,27,37,26,38,25,39,24,40,23,41,22,42,21,43,20,44,19,45,18,46,17,47,16,48,15,49,14,50,13,51,12,52,11,53,10,54,9,55,8,56,7,57,6,58,5,59,4,60,3,61,2,62,1]",
        "output": "0"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 12, 13, 14, 15]",
        "output": "11"
      },
      {
        "input": "nums = [0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "1"
      }
    ]
  },
  {
    "id": 2500,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Matrix",
      "Sorting",
      "Simulation",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an m x n matrix grid consisting of positive integers.\nPerform the following operation until grid becomes empty:\n\nDelete the element with the greatest value from each row. If multiple such elements exist, delete any of them.\nAdd the maximum of deleted elements to the answer.\n\nNote that the number of columns decreases by one after each operation.\nReturn the answer after performing the operations described above.\n\u00a0\nExample 1:\n\n\nInput: grid = [[1,2,4],[3,3,1]]\nOutput: 8\nExplanation: The diagram above shows the removed values in each step.\n- In the first operation, we remove 4 from the first row and 3 from the second row (notice that, there are two cells with value 3 and we can remove any of them). We add 4 to the answer.\n- In the second operation, we remove 2 from the first row and 3 from the second row. We add 3 to the answer.\n- In the third operation, we remove 1 from the first row and 1 from the second row. We add 1 to the answer.\nThe final answer = 4 + 3 + 1 = 8.\n\nExample 2:\n\n\nInput: grid = [[10]]\nOutput: 10\nExplanation: The diagram above shows the removed values in each step.\n- In the first operation, we remove 10 from the first row. We add 10 to the answer.\nThe final answer = 10.\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 50\n1 <= grid[i][j] <= 100\n\n",
    "starterCode": "class Solution:\n    def deleteGreatestValue(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[1,1,1],[1,1,1],[1,1,1]]",
        "output": "3"
      },
      {
        "input": "grid = [[9,8,7],[6,5,4],[3,2,1]]",
        "output": "24"
      },
      {
        "input": "grid = [[5,1,3],[4,2,6],[7,8,9]]",
        "output": "24"
      },
      {
        "input": "grid = [[5,1,3],[9,3,5],[7,6,2]]",
        "output": "18"
      },
      {
        "input": "grid = [[10]]",
        "output": "10"
      },
      {
        "input": "grid = [[1,2,4],[3,3,1]]",
        "output": "8"
      },
      {
        "input": "grid = [[5,3],[9,7],[2,6]]",
        "output": "16"
      },
      {
        "input": "grid = [[1,3,5,7],[2,4,6,8]]",
        "output": "20"
      },
      {
        "input": "grid = [[5,3],[9,7]]",
        "output": "16"
      },
      {
        "input": "grid = [[1,3,5,7],[10,8,6,4]]",
        "output": "28"
      },
      {
        "input": "grid = [[1,2],[3,4],[5,6]]",
        "output": "11"
      },
      {
        "input": "grid = [[2,2,2],[2,2,2],[2,2,2]]",
        "output": "6"
      },
      {
        "input": "grid = [[100,100],[100,100],[100,100]]",
        "output": "200"
      },
      {
        "input": "grid = [[1, 3, 5], [2, 4, 6], [3, 6, 9], [4, 8, 12]]",
        "output": "24"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]",
        "output": "51"
      },
      {
        "input": "grid = [[50,49,48,47],[46,45,44,43],[42,41,40,39],[38,37,36,35]]",
        "output": "194"
      },
      {
        "input": "grid = [[45,23,67,89,12],[90,34,56,78,10],[11,13,15,17,19],[21,22,24,25,26]]",
        "output": "279"
      },
      {
        "input": "grid = [[3, 1, 4, 1, 5, 9], [2, 6, 5, 3, 5, 9], [8, 9, 7, 9, 3, 2], [4, 5, 6, 8, 0, 1]]",
        "output": "38"
      },
      {
        "input": "grid = [[4, 8, 12, 16, 20], [3, 7, 11, 15, 19], [2, 6, 10, 14, 18], [1, 5, 9, 13, 17]]",
        "output": "60"
      },
      {
        "input": "grid = [[23,34,45,56],[12,23,34,45],[56,67,78,89],[90,10,20,30]]",
        "output": "291"
      },
      {
        "input": "grid = [[7, 8, 9], [4, 5, 6], [1, 2, 3], [7, 8, 9], [4, 5, 6], [1, 2, 3]]",
        "output": "24"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [2, 4, 6, 8, 10, 1, 3, 5, 7, 9], [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]]",
        "output": "165"
      },
      {
        "input": "grid = [[1,3,5,7,9],[10,8,6,4,2],[11,13,15,17,19],[20,18,16,14,12]]",
        "output": "80"
      },
      {
        "input": "grid = [[50, 45, 40], [35, 30, 25], [20, 15, 10], [5, 10, 15], [20, 25, 30]]",
        "output": "135"
      },
      {
        "input": "grid = [[10, 20, 30, 40, 50], [50, 40, 30, 20, 10], [60, 70, 80, 90, 100], [100, 90, 80, 70, 60]]",
        "output": "400"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]",
        "output": "55"
      },
      {
        "input": "grid = [[100,99,98,97,96],[95,94,93,92,91],[90,89,88,87,86]]",
        "output": "490"
      },
      {
        "input": "grid = [[24, 17, 56, 38, 45], [89, 21, 37, 62, 11], [48, 93, 71, 19, 81], [25, 76, 53, 90, 32]]",
        "output": "318"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[6,5,4,3,2,1],[1,6,2,5,3,4]]",
        "output": "21"
      },
      {
        "input": "grid = [[10,20,30,40,50],[50,40,30,20,10],[25,75,25,75,25],[75,25,75,25,75]]",
        "output": "275"
      },
      {
        "input": "grid = [[4,2,9,1],[8,5,6,7],[3,11,12,10]]",
        "output": "38"
      },
      {
        "input": "grid = [[20, 5, 15], [10, 10, 30], [40, 25, 5]]",
        "output": "75"
      },
      {
        "input": "grid = [[23,54,76],[34,56,23],[89,12,45],[56,78,90]]",
        "output": "224"
      },
      {
        "input": "grid = [[45,12,67,34],[89,23,56,78],[90,45,34,12],[78,90,45,67]]",
        "output": "280"
      },
      {
        "input": "grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]",
        "output": "42"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 5, 2, 4, 3], [3, 4, 5, 1, 2]]",
        "output": "15"
      },
      {
        "input": "grid = [[100,90,80],[70,60,50],[40,30,20],[10,5,1]]",
        "output": "270"
      },
      {
        "input": "grid = [[7,6,5,4,3,2,1],[1,2,3,4,5,6,7],[2,1,3,4,6,5,7],[3,4,5,6,7,1,2]]",
        "output": "28"
      },
      {
        "input": "grid = [[3,3,3,3,3,3],[2,2,2,2,2,2],[1,1,1,1,1,1],[6,6,6,6,6,6]]",
        "output": "36"
      },
      {
        "input": "grid = [[9, 7, 5, 3], [8, 6, 4, 2], [7, 5, 3, 1]]",
        "output": "24"
      },
      {
        "input": "grid = [[45, 55, 65], [35, 45, 55], [25, 35, 45], [15, 25, 35]]",
        "output": "165"
      },
      {
        "input": "grid = [[4, 1, 7], [8, 2, 6], [3, 9, 5], [5, 3, 8]]",
        "output": "18"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2,1],[5,5,5,5,5,5,5,5,5,5]]",
        "output": "65"
      },
      {
        "input": "grid = [[23, 34, 45, 56], [56, 45, 34, 23], [23, 45, 56, 34], [34, 56, 23, 45]]",
        "output": "158"
      },
      {
        "input": "grid = [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [10, 8, 6, 4, 2], [9, 7, 5, 3, 1]]",
        "output": "30"
      },
      {
        "input": "grid = [[1,5,3],[2,8,7],[4,6,9],[11,13,12]]",
        "output": "36"
      },
      {
        "input": "grid = [[30,20,10],[60,50,40],[90,80,70],[120,110,100]]",
        "output": "330"
      },
      {
        "input": "grid = [[15,25,35,45,55,65,75,85,95],[95,85,75,65,55,45,35,25,15],[10,20,30,40,50,60,70,80,90]]",
        "output": "495"
      },
      {
        "input": "grid = [[1, 100, 1], [100, 1, 100], [1, 100, 1], [100, 1, 100]]",
        "output": "201"
      },
      {
        "input": "grid = [[50, 49, 48], [47, 46, 45], [44, 43, 42], [41, 40, 39]]",
        "output": "147"
      },
      {
        "input": "grid = [[3,1,2],[6,5,4],[9,8,7],[12,11,10]]",
        "output": "33"
      },
      {
        "input": "grid = [[50,40,30],[40,30,20],[30,20,10],[20,10,5]]",
        "output": "120"
      },
      {
        "input": "grid = [[10], [20], [30], [40], [50], [60]]",
        "output": "60"
      },
      {
        "input": "grid = [[42,24,36,18,72],[54,12,60,84,30],[90,45,15,75,60]]",
        "output": "288"
      },
      {
        "input": "grid = [[100,99,98,97],[96,95,94,93],[92,91,90,89],[88,87,86,85]]",
        "output": "394"
      },
      {
        "input": "grid = [[100, 90, 80], [70, 60, 50], [40, 30, 20], [10, 20, 30]]",
        "output": "270"
      },
      {
        "input": "grid = [[9,1,5,3],[4,8,2,7],[6,10,1,12]]",
        "output": "30"
      },
      {
        "input": "grid = [[25,15,35,5],[10,45,55,20],[50,30,60,40]]",
        "output": "180"
      },
      {
        "input": "grid = [[100, 99, 98, 97, 96], [95, 94, 93, 92, 91], [90, 89, 88, 87, 86]]",
        "output": "490"
      },
      {
        "input": "grid = [[15,20,25,30],[35,40,45,50],[55,60,65,70],[75,80,85,90],[95,100,105,110]]",
        "output": "410"
      },
      {
        "input": "grid = [[9,7,5,3,1],[8,6,4,2,0],[7,5,3,1,9]]",
        "output": "25"
      },
      {
        "input": "grid = [[99, 98, 97, 96], [95, 94, 93, 92], [91, 90, 89, 88]]",
        "output": "390"
      },
      {
        "input": "grid = [[10,20,30],[15,25,35],[20,30,40],[25,35,45]]",
        "output": "105"
      },
      {
        "input": "grid = [[1,2,3,4,5],[5,4,3,2,1],[6,7,8,9,10],[10,9,8,7,6]]",
        "output": "40"
      },
      {
        "input": "grid = [[1,99,2,98],[3,97,4,96],[5,95,6,94],[7,93,8,92]]",
        "output": "212"
      },
      {
        "input": "grid = [[50, 40, 30], [20, 10, 0], [80, 70, 60], [100, 90, 120]]",
        "output": "310"
      },
      {
        "input": "grid = [[100,99,98],[97,96,95],[94,93,92],[91,90,89]]",
        "output": "297"
      },
      {
        "input": "grid = [[5,1,9,2],[8,6,3,7],[4,10,1,11]]",
        "output": "30"
      },
      {
        "input": "grid = [[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9]]",
        "output": "45"
      },
      {
        "input": "grid = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]",
        "output": "39"
      },
      {
        "input": "grid = [[100, 50, 25, 10], [90, 60, 40, 30], [80, 70, 35, 15], [75, 65, 55, 45]]",
        "output": "270"
      },
      {
        "input": "grid = [[10,20,30,40,50],[50,40,30,20,10],[60,70,80,90,100]]",
        "output": "400"
      },
      {
        "input": "grid = [[9,5,1,7],[8,4,2,6],[3,11,10,12]]",
        "output": "36"
      },
      {
        "input": "grid = [[1,2],[2,1],[3,4],[4,3],[5,6]]",
        "output": "11"
      },
      {
        "input": "grid = [[47, 83, 29], [91, 7, 36], [42, 54, 67], [22, 88, 15]]",
        "output": "187"
      },
      {
        "input": "grid = [[99, 98, 97], [96, 95, 94], [93, 92, 91], [90, 89, 88], [87, 86, 85]]",
        "output": "294"
      },
      {
        "input": "grid = [[1, 10, 100, 1000], [1000, 100, 10, 1], [1, 1000, 10, 100], [10, 100, 1000, 1]]",
        "output": "1111"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [2, 3, 4, 5, 1], [5, 1, 2, 3, 4]]",
        "output": "15"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]]",
        "output": "55"
      },
      {
        "input": "grid = [[100, 1, 2, 3], [3, 2, 1, 100], [100, 100, 1, 1], [1, 100, 100, 100]]",
        "output": "301"
      },
      {
        "input": "grid = [[7,5,3,1],[8,6,4,2],[9,7,5,3],[10,8,6,4]]",
        "output": "28"
      },
      {
        "input": "grid = [[15, 20, 25, 30], [10, 15, 20, 25], [5, 10, 15, 20], [1, 5, 10, 15]]",
        "output": "90"
      },
      {
        "input": "grid = [[7,3,5,9],[1,4,8,2],[6,10,12,11]]",
        "output": "39"
      },
      {
        "input": "grid = [[15,14,13,12,11],[10,9,8,7,6],[5,4,3,2,1]]",
        "output": "65"
      },
      {
        "input": "grid = [[100,1,2,3,4],[99,5,6,7,8],[98,9,10,11,12],[97,13,14,15,16]]",
        "output": "158"
      },
      {
        "input": "grid = [[42, 23, 65, 12, 34], [56, 78, 90, 23, 45], [89, 12, 34, 56, 78]]",
        "output": "292"
      },
      {
        "input": "grid = [[10, 15, 5, 20], [12, 18, 8, 6], [7, 11, 13, 19]]",
        "output": "53"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[6,5,4,3,2,1],[7,8,9,10,11,12],[12,11,10,9,8,7]]",
        "output": "57"
      },
      {
        "input": "grid = [[42,42,42,42],[42,42,42,42],[42,42,42,42],[42,42,42,42]]",
        "output": "168"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1], [1, 3, 5, 2, 4, 6], [6, 4, 2, 5, 3, 1]]",
        "output": "21"
      },
      {
        "input": "grid = [[100, 1, 2, 3], [4, 100, 5, 6], [7, 8, 100, 9], [10, 11, 12, 100]]",
        "output": "133"
      },
      {
        "input": "grid = [[10, 20, 30, 40, 50], [50, 40, 30, 20, 10], [10, 30, 50, 20, 40], [20, 40, 10, 50, 30]]",
        "output": "150"
      },
      {
        "input": "grid = [[33, 54, 21, 45], [11, 99, 32, 16], [82, 76, 41, 53], [65, 29, 37, 44]]",
        "output": "269"
      }
    ]
  },
  {
    "id": 1047,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "String"
    ],
    "problemDescription": "You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.\nWe repeatedly make duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made. It can be proven that the answer is unique.\n\u00a0\nExample 1:\n\nInput: s = \"abbaca\"\nOutput: \"ca\"\nExplanation: \nFor example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".\n\nExample 2:\n\nInput: s = \"azxxzy\"\nOutput: \"ay\"\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 105\ns consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def removeDuplicates(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"acbbcaa\"",
        "output": "a"
      },
      {
        "input": "s = \"aabbaa\"",
        "output": ""
      },
      {
        "input": "s = \"abcdef\"",
        "output": "abcdef"
      },
      {
        "input": "s = \"abbacdcd\"",
        "output": "cdcd"
      },
      {
        "input": "s = \"aaaaa\"",
        "output": "a"
      },
      {
        "input": "s = \"abbaca\"",
        "output": "ca"
      },
      {
        "input": "s = \"a\"",
        "output": "a"
      },
      {
        "input": "s = \"aabbccddccbaaabbccdd\"",
        "output": "ba"
      },
      {
        "input": "s = \"\"",
        "output": ""
      },
      {
        "input": "s = \"abcddcba\"",
        "output": ""
      },
      {
        "input": "s = \"abba\"",
        "output": ""
      },
      {
        "input": "s = \"zyz\"",
        "output": "zyz"
      },
      {
        "input": "s = \"abc\"",
        "output": "abc"
      },
      {
        "input": "s = \"abbacca\"",
        "output": "a"
      },
      {
        "input": "s = \"abcd\"",
        "output": "abcd"
      },
      {
        "input": "s = \"abbazzyy\"",
        "output": ""
      },
      {
        "input": "s = \"aabbccddeeff\"",
        "output": ""
      },
      {
        "input": "s = \"aabbcc\"",
        "output": ""
      },
      {
        "input": "s = \"mississippi\"",
        "output": "m"
      },
      {
        "input": "s = \"aaaaaaaaa\"",
        "output": "a"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": ""
      },
      {
        "input": "s = \"aaaaaaaa\"",
        "output": ""
      },
      {
        "input": "s = \"zzzyyxxwwvvuuttrrqqqllopssmmnnllkkjjiihhggffeeddccbbaa\"",
        "output": "zqop"
      },
      {
        "input": "s = \"aabbccdd\"",
        "output": ""
      },
      {
        "input": "s = \"azxxzy\"",
        "output": "ay"
      },
      {
        "input": "s = \"aabbbccddeeeffggghhhiiiijjjjkkkkllllmmmmnnnnooopppqqqqrrrrssssttttuuuuvvvvwwwwwxxxxxyyyyyzzzzz\"",
        "output": "beghopwxyz"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": ""
      },
      {
        "input": "s = \"abcdeedcba\"",
        "output": ""
      },
      {
        "input": "s = \"abcabcabcabcabcabcabcabcabcabc\"",
        "output": "abcabcabcabcabcabcabcabcabcabc"
      },
      {
        "input": "s = \"abcdabcdbcaabbccdd\"",
        "output": "abcdabcdbc"
      },
      {
        "input": "s = \"xyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyx\"",
        "output": "xyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyxzyzyx"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"aabbaaabbbaaaabbbaaaaabbbbbbaaaaaaaaa\"",
        "output": "a"
      },
      {
        "input": "s = \"mississiissippi\"",
        "output": "m"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\"",
        "output": "abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz\"",
        "output": ""
      },
      {
        "input": "s = \"aaabbbcccdddcccbbbaaa\"",
        "output": "abcdcba"
      },
      {
        "input": "s = \"abccbaabccbaabccbaabccbaabccbaabccbaabccbaabccba\"",
        "output": ""
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": ""
      },
      {
        "input": "s = \"abacadaeafagahaiajakalamananapapaqara saratasaunaavawaxayaz\"",
        "output": "abacadaeafagahaiajakalamananapapaqara saratasaunvawaxayaz"
      }
    ]
  },
  {
    "id": 2363,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Ordered Set",
      "Sorting"
    ],
    "problemDescription": "You are given two 2D integer arrays, items1 and items2, representing two sets of items. Each array items has the following properties:\n\nitems[i] = [valuei, weighti] where valuei represents the value and weighti represents the weight of the ith item.\nThe value of each item in items is unique.\n\nReturn a 2D integer array ret where ret[i] = [valuei, weighti], with weighti being the sum of weights of all items with value valuei.\nNote: ret should be returned in ascending order by value.\n\u00a0\nExample 1:\n\nInput: items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]\nOutput: [[1,6],[3,9],[4,5]]\nExplanation: \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 5, total weight = 1 + 5 = 6.\nThe item with value = 3 occurs in items1 with weight = 8 and in items2 with weight = 1, total weight = 8 + 1 = 9.\nThe item with value = 4 occurs in items1 with weight = 5, total weight = 5.  \nTherefore, we return [[1,6],[3,9],[4,5]].\n\nExample 2:\n\nInput: items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]\nOutput: [[1,4],[2,4],[3,4]]\nExplanation: \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 3, total weight = 1 + 3 = 4.\nThe item with value = 2 occurs in items1 with weight = 3 and in items2 with weight = 1, total weight = 3 + 1 = 4.\nThe item with value = 3 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.\nTherefore, we return [[1,4],[2,4],[3,4]].\nExample 3:\n\nInput: items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]\nOutput: [[1,7],[2,4],[7,1]]\nExplanation:\nThe item with value = 1 occurs in items1 with weight = 3 and in items2 with weight = 4, total weight = 3 + 4 = 7. \nThe item with value = 2 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4. \nThe item with value = 7 occurs in items2 with weight = 1, total weight = 1.\nTherefore, we return [[1,7],[2,4],[7,1]].\n\n\u00a0\nConstraints:\n\n1 <= items1.length, items2.length <= 1000\nitems1[i].length == items2[i].length == 2\n1 <= valuei, weighti <= 1000\nEach valuei in items1 is unique.\nEach valuei in items2 is unique.\n\n",
    "starterCode": "class Solution:\n    def mergeSimilarItems(self, items1: List[List[int]], items2: List[List[int]]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]",
        "output": "[(1, 7), (2, 4), (7, 1)]"
      },
      {
        "input": "items1 = [[1,1000]], items2 = [[2,1000]]",
        "output": "[(1, 1000), (2, 1000)]"
      },
      {
        "input": "items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]",
        "output": "[(1, 6), (3, 9), (4, 5)]"
      },
      {
        "input": "items1 = [[1000,1]], items2 = [[999,1000]]",
        "output": "[(999, 1000), (1000, 1)]"
      },
      {
        "input": "items1 = [[100,100],[200,200]], items2 = [[150,150],[250,250]]",
        "output": "[(100, 100), (150, 150), (200, 200), (250, 250)]"
      },
      {
        "input": "items1 = [[10,10]], items2 = [[20,20]]",
        "output": "[(10, 10), (20, 20)]"
      },
      {
        "input": "items1 = [[5,5],[10,10]], items2 = [[5,5],[15,15]]",
        "output": "[(5, 10), (10, 10), (15, 15)]"
      },
      {
        "input": "items1 = [[5,5]], items2 = [[5,5]]",
        "output": "[(5, 10)]"
      },
      {
        "input": "items1 = [[1,1],[2,2],[3,3]], items2 = [[4,4],[5,5],[6,6]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]"
      },
      {
        "input": "items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]",
        "output": "[(1, 4), (2, 4), (3, 4)]"
      },
      {
        "input": "items1 = [[1,100],[2,200],[3,300]], items2 = [[1,100],[2,200],[3,300]]",
        "output": "[(1, 200), (2, 400), (3, 600)]"
      },
      {
        "input": "items1 = [[1, 500], [2, 400], [3, 300], [4, 200], [5, 100]], items2 = [[6, 100], [7, 200], [8, 300], [9, 400], [10, 500]]",
        "output": "[(1, 500), (2, 400), (3, 300), (4, 200), (5, 100), (6, 100), (7, 200), (8, 300), (9, 400), (10, 500)]"
      },
      {
        "input": "items1 = [[500,500],[1,1],[100,100]], items2 = [[500,500],[1,1],[100,100],[200,200],[300,300],[400,400]]",
        "output": "[(1, 2), (100, 200), (200, 200), (300, 300), (400, 400), (500, 1000)]"
      },
      {
        "input": "items1 = [[1,999],[2,998],[3,997],[4,996],[5,995]], items2 = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[(1, 1000), (2, 1000), (3, 1000), (4, 1000), (5, 1000)]"
      },
      {
        "input": "items1 = [[100, 1], [200, 2], [300, 3], [400, 4], [500, 5]], items2 = [[50, 5], [150, 4], [250, 3], [350, 2], [450, 1]]",
        "output": "[(50, 5), (100, 1), (150, 4), (200, 2), (250, 3), (300, 3), (350, 2), (400, 4), (450, 1), (500, 5)]"
      },
      {
        "input": "items1 = [[1, 1], [2, 2], [3, 3], [4, 4]], items2 = [[2, 4], [3, 6], [5, 8], [6, 10]]",
        "output": "[(1, 1), (2, 6), (3, 9), (4, 4), (5, 8), (6, 10)]"
      },
      {
        "input": "items1 = [[999, 1], [998, 2], [997, 3]], items2 = [[996, 4], [995, 5], [994, 6], [993, 7], [992, 8], [991, 9], [990, 10]]",
        "output": "[(990, 10), (991, 9), (992, 8), (993, 7), (994, 6), (995, 5), (996, 4), (997, 3), (998, 2), (999, 1)]"
      },
      {
        "input": "items1 = [[10,1],[20,1],[30,1],[40,1],[50,1]], items2 = [[10,99],[20,98],[30,97],[40,96],[50,95]]",
        "output": "[(10, 100), (20, 99), (30, 98), (40, 97), (50, 96)]"
      },
      {
        "input": "items1 = [[1,10],[2,20],[5,50],[10,100]], items2 = [[1,5],[3,30],[4,40],[6,60],[7,70]]",
        "output": "[(1, 15), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60), (7, 70), (10, 100)]"
      },
      {
        "input": "items1 = [[1,1],[2,2],[3,3],[4,4]], items2 = [[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[(1, 1), (2, 4), (3, 6), (4, 8), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]"
      },
      {
        "input": "items1 = [[1, 1], [10, 10], [100, 100]], items2 = [[1, 99], [10, 90], [100, 900], [1000, 1000]]",
        "output": "[(1, 100), (10, 100), (100, 1000), (1000, 1000)]"
      },
      {
        "input": "items1 = [[1,10],[2,20],[3,30],[4,40],[5,50]], items2 = [[3,30],[4,40],[5,50],[6,60],[7,70]]",
        "output": "[(1, 10), (2, 20), (3, 60), (4, 80), (5, 100), (6, 60), (7, 70)]"
      },
      {
        "input": "items1 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], items2 = [[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19)]"
      },
      {
        "input": "items1 = [[5, 5], [15, 15], [25, 25], [35, 35], [45, 45]], items2 = [[5, 45], [15, 35], [25, 25], [35, 15], [45, 5]]",
        "output": "[(5, 50), (15, 50), (25, 50), (35, 50), (45, 50)]"
      },
      {
        "input": "items1 = [[10, 1], [20, 2], [30, 3], [40, 4], [50, 5]], items2 = [[5, 5], [15, 15], [25, 25], [35, 35], [45, 45], [55, 55]]",
        "output": "[(5, 5), (10, 1), (15, 15), (20, 2), (25, 25), (30, 3), (35, 35), (40, 4), (45, 45), (50, 5), (55, 55)]"
      },
      {
        "input": "items1 = [[500, 100], [300, 200]], items2 = [[200, 300], [100, 400], [500, 600]]",
        "output": "[(100, 400), (200, 300), (300, 200), (500, 700)]"
      },
      {
        "input": "items1 = [[5, 1], [15, 2], [25, 3], [35, 4], [45, 5]], items2 = [[5, 5], [15, 4], [25, 3], [35, 2], [45, 1]]",
        "output": "[(5, 6), (15, 6), (25, 6), (35, 6), (45, 6)]"
      },
      {
        "input": "items1 = [[1, 10], [2, 20], [3, 30]], items2 = [[4, 40], [5, 50], [6, 60], [7, 70], [8, 80], [9, 90]]",
        "output": "[(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60), (7, 70), (8, 80), (9, 90)]"
      },
      {
        "input": "items1 = [[100,100],[200,200],[300,300]], items2 = [[150,150],[250,250],[350,350],[450,450]]",
        "output": "[(100, 100), (150, 150), (200, 200), (250, 250), (300, 300), (350, 350), (450, 450)]"
      },
      {
        "input": "items1 = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]], items2 = [[5, 5], [4, 4], [3, 3], [2, 2], [1, 1]]",
        "output": "[(1, 2), (2, 4), (3, 6), (4, 8), (5, 10)]"
      },
      {
        "input": "items1 = [[1, 1000], [2, 1000], [3, 1000]], items2 = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]",
        "output": "[(1, 1001), (2, 1002), (3, 1003), (4, 4), (5, 5)]"
      },
      {
        "input": "items1 = [[1, 1000], [2, 999], [3, 998], [4, 997]], items2 = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]",
        "output": "[(1, 1001), (2, 1001), (3, 1001), (4, 1001), (5, 5)]"
      },
      {
        "input": "items1 = [[5,5],[10,10],[15,15],[20,20]], items2 = [[5,5],[10,10],[25,25],[30,30]]",
        "output": "[(5, 10), (10, 20), (15, 15), (20, 20), (25, 25), (30, 30)]"
      },
      {
        "input": "items1 = [[1,10],[2,20],[3,30],[4,40],[5,50]], items2 = [[6,60],[7,70],[8,80],[9,90],[10,100]]",
        "output": "[(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60), (7, 70), (8, 80), (9, 90), (10, 100)]"
      },
      {
        "input": "items1 = [[500,5000],[1000,10000]], items2 = [[250,2500],[750,7500]]",
        "output": "[(250, 2500), (500, 5000), (750, 7500), (1000, 10000)]"
      },
      {
        "input": "items1 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], items2 = [[1,10],[2,20],[3,30],[4,40],[5,50],[6,60],[7,70],[8,80],[9,90],[10,100]]",
        "output": "[(1, 11), (2, 22), (3, 33), (4, 44), (5, 55), (6, 66), (7, 77), (8, 88), (9, 99), (10, 110)]"
      },
      {
        "input": "items1 = [[100,1],[200,2],[300,3],[400,4]], items2 = [[50,5],[150,15],[250,25],[350,35],[450,45]]",
        "output": "[(50, 5), (100, 1), (150, 15), (200, 2), (250, 25), (300, 3), (350, 35), (400, 4), (450, 45)]"
      },
      {
        "input": "items1 = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90],[100,100]], items2 = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10]]",
        "output": "[(10, 11), (20, 22), (30, 33), (40, 44), (50, 55), (60, 66), (70, 77), (80, 88), (90, 99), (100, 110)]"
      },
      {
        "input": "items1 = [[10,15],[20,25],[30,35],[40,45]], items2 = [[10,5],[20,15],[50,55]]",
        "output": "[(10, 20), (20, 40), (30, 35), (40, 45), (50, 55)]"
      },
      {
        "input": "items1 = [[1,10],[2,20],[3,30]], items2 = [[4,40],[5,50],[6,60],[7,70],[8,80]]",
        "output": "[(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60), (7, 70), (8, 80)]"
      },
      {
        "input": "items1 = [[5,10],[15,20],[25,30],[35,40]], items2 = [[10,5],[15,15],[25,25],[40,45]]",
        "output": "[(5, 10), (10, 5), (15, 35), (25, 55), (35, 40), (40, 45)]"
      },
      {
        "input": "items1 = [[1000,1]], items2 = [[1,1000],[2,999],[3,998],[4,997],[5,996],[6,995],[7,994],[8,993],[9,992]]",
        "output": "[(1, 1000), (2, 999), (3, 998), (4, 997), (5, 996), (6, 995), (7, 994), (8, 993), (9, 992), (1000, 1)]"
      },
      {
        "input": "items1 = [[100,1],[200,2],[300,3],[400,4],[500,5]], items2 = [[100,5],[200,4],[300,3],[400,2],[500,1]]",
        "output": "[(100, 6), (200, 6), (300, 6), (400, 6), (500, 6)]"
      },
      {
        "input": "items1 = [[999,1],[998,2],[997,3],[996,4],[995,5]], items2 = [[994,6],[993,7],[992,8],[991,9],[990,10]]",
        "output": "[(990, 10), (991, 9), (992, 8), (993, 7), (994, 6), (995, 5), (996, 4), (997, 3), (998, 2), (999, 1)]"
      },
      {
        "input": "items1 = [[999, 1], [998, 2], [997, 3]], items2 = [[996, 4], [995, 5], [994, 6], [993, 7], [992, 8]]",
        "output": "[(992, 8), (993, 7), (994, 6), (995, 5), (996, 4), (997, 3), (998, 2), (999, 1)]"
      },
      {
        "input": "items1 = [[5, 5], [10, 10], [15, 15], [20, 20], [25, 25]], items2 = [[5, 1], [10, 2], [15, 3], [20, 4], [25, 5]]",
        "output": "[(5, 6), (10, 12), (15, 18), (20, 24), (25, 30)]"
      },
      {
        "input": "items1 = [[10,1],[20,2],[30,3],[40,4],[50,5]], items2 = [[10,5],[20,4],[30,3],[40,2],[50,1]]",
        "output": "[(10, 6), (20, 6), (30, 6), (40, 6), (50, 6)]"
      },
      {
        "input": "items1 = [[100, 1000], [200, 2000]], items2 = [[101, 1001], [201, 2001], [100, 1000]]",
        "output": "[(100, 2000), (101, 1001), (200, 2000), (201, 2001)]"
      },
      {
        "input": "items1 = [[1, 1000], [2, 999], [3, 998]], items2 = [[2, 1], [3, 2], [4, 3], [5, 4], [6, 5]]",
        "output": "[(1, 1000), (2, 1000), (3, 1000), (4, 3), (5, 4), (6, 5)]"
      },
      {
        "input": "items1 = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60]], items2 = [[15,15],[25,25],[35,35],[45,45],[55,55],[65,65]]",
        "output": "[(10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35), (40, 40), (45, 45), (50, 50), (55, 55), (60, 60), (65, 65)]"
      },
      {
        "input": "items1 = [[1,1],[2,2],[3,3],[4,4],[5,5]], items2 = [[5,5],[4,4],[3,3],[2,2],[1,1]]",
        "output": "[(1, 2), (2, 4), (3, 6), (4, 8), (5, 10)]"
      },
      {
        "input": "items1 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]], items2 = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1]]",
        "output": "[(1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7)]"
      },
      {
        "input": "items1 = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90],[100,100]], items2 = [[5,5],[15,15],[25,25],[35,35],[45,45],[55,55],[65,65],[75,75],[85,85],[95,95]]",
        "output": "[(5, 5), (10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35), (40, 40), (45, 45), (50, 50), (55, 55), (60, 60), (65, 65), (70, 70), (75, 75), (80, 80), (85, 85), (90, 90), (95, 95), (100, 100)]"
      },
      {
        "input": "items1 = [[10, 50], [20, 100], [30, 150], [40, 200]], items2 = [[10, 50], [20, 50], [30, 50], [50, 250]]",
        "output": "[(10, 100), (20, 150), (30, 200), (40, 200), (50, 250)]"
      },
      {
        "input": "items1 = [[10,10],[20,20],[30,30],[40,40],[50,50]], items2 = [[15,15],[25,25],[35,35],[45,45],[55,55]]",
        "output": "[(10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35), (40, 40), (45, 45), (50, 50), (55, 55)]"
      },
      {
        "input": "items1 = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]], items2 = [[6, 6], [7, 7], [8, 8], [9, 9], [10, 10]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]"
      },
      {
        "input": "items1 = [[2,200],[4,400],[6,600],[8,800]], items2 = [[1,100],[3,300],[5,500],[7,700],[9,900]]",
        "output": "[(1, 100), (2, 200), (3, 300), (4, 400), (5, 500), (6, 600), (7, 700), (8, 800), (9, 900)]"
      },
      {
        "input": "items1 = [[1,1000],[3,1000],[5,1000],[7,1000],[9,1000]], items2 = [[2,1000],[4,1000],[6,1000],[8,1000],[10,1000]]",
        "output": "[(1, 1000), (2, 1000), (3, 1000), (4, 1000), (5, 1000), (6, 1000), (7, 1000), (8, 1000), (9, 1000), (10, 1000)]"
      },
      {
        "input": "items1 = [[1,1],[3,3],[5,5],[7,7],[9,9]], items2 = [[2,2],[4,4],[6,6],[8,8],[10,10]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]"
      },
      {
        "input": "items1 = [[1,999]], items2 = [[1,1]]",
        "output": "[(1, 1000)]"
      },
      {
        "input": "items1 = [[100,1000],[200,2000],[300,3000]], items2 = [[50,500],[150,1500],[250,2500],[350,3500]]",
        "output": "[(50, 500), (100, 1000), (150, 1500), (200, 2000), (250, 2500), (300, 3000), (350, 3500)]"
      },
      {
        "input": "items1 = [[10, 5], [20, 15], [30, 25]], items2 = [[5, 5], [15, 10], [25, 15], [35, 20]]",
        "output": "[(5, 5), (10, 5), (15, 10), (20, 15), (25, 15), (30, 25), (35, 20)]"
      },
      {
        "input": "items1 = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50], [60, 60], [70, 70]], items2 = [[5, 5], [15, 15], [25, 25], [35, 35], [45, 45], [55, 55], [65, 65], [75, 75]]",
        "output": "[(5, 5), (10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35), (40, 40), (45, 45), (50, 50), (55, 55), (60, 60), (65, 65), (70, 70), (75, 75)]"
      },
      {
        "input": "items1 = [[100,100],[200,200],[300,300]], items2 = [[100,50],[200,150],[300,250],[400,350],[500,450]]",
        "output": "[(100, 150), (200, 350), (300, 550), (400, 350), (500, 450)]"
      },
      {
        "input": "items1 = [[1, 100], [2, 200], [3, 300], [4, 400]], items2 = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]]",
        "output": "[(1, 101), (2, 202), (3, 303), (4, 404), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]"
      },
      {
        "input": "items1 = [[1,1000],[500,1],[1000,1000]], items2 = [[1,1],[500,1000],[1000,1]]",
        "output": "[(1, 1001), (500, 1001), (1000, 1001)]"
      },
      {
        "input": "items1 = [[10, 50], [20, 100], [30, 150]], items2 = [[5, 25], [10, 75], [40, 200]]",
        "output": "[(5, 25), (10, 125), (20, 100), (30, 150), (40, 200)]"
      },
      {
        "input": "items1 = [[10,10],[20,20],[30,30]], items2 = [[11,11],[21,21],[31,31],[10,9],[20,18],[30,27]]",
        "output": "[(10, 19), (11, 11), (20, 38), (21, 21), (30, 57), (31, 31)]"
      },
      {
        "input": "items1 = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]], items2 = [[1, 10], [2, 20], [3, 30], [4, 40], [5, 50], [6, 60], [7, 70], [8, 80], [9, 90], [10, 100]]",
        "output": "[(1, 11), (2, 22), (3, 33), (4, 44), (5, 55), (6, 66), (7, 77), (8, 88), (9, 99), (10, 110)]"
      },
      {
        "input": "items1 = [[10, 100], [20, 200], [30, 300], [40, 400]], items2 = [[5, 50], [10, 150], [25, 250], [30, 350]]",
        "output": "[(5, 50), (10, 250), (20, 200), (25, 250), (30, 650), (40, 400)]"
      },
      {
        "input": "items1 = [[100, 10], [200, 20], [300, 30], [400, 40], [500, 50]], items2 = [[50, 5], [150, 15], [250, 25], [350, 35], [450, 45], [550, 55]]",
        "output": "[(50, 5), (100, 10), (150, 15), (200, 20), (250, 25), (300, 30), (350, 35), (400, 40), (450, 45), (500, 50), (550, 55)]"
      },
      {
        "input": "items1 = [[100,100],[200,200],[300,300],[400,400],[500,500],[600,600],[700,700],[800,800],[900,900]], items2 = [[100,1],[200,2],[300,3],[400,4],[500,5],[600,6],[700,7],[800,8],[900,9]]",
        "output": "[(100, 101), (200, 202), (300, 303), (400, 404), (500, 505), (600, 606), (700, 707), (800, 808), (900, 909)]"
      },
      {
        "input": "items1 = [[10,100],[20,200],[30,300]], items2 = [[15,150],[25,250],[35,350],[45,450],[55,550]]",
        "output": "[(10, 100), (15, 150), (20, 200), (25, 250), (30, 300), (35, 350), (45, 450), (55, 550)]"
      },
      {
        "input": "items1 = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]], items2 = [[1, 5], [2, 4], [3, 3], [4, 2], [5, 1]]",
        "output": "[(1, 6), (2, 6), (3, 6), (4, 6), (5, 6)]"
      },
      {
        "input": "items1 = [[1,100],[10,100],[100,100],[1000,100]], items2 = [[2,200],[20,200],[200,200],[2000,200]]",
        "output": "[(1, 100), (2, 200), (10, 100), (20, 200), (100, 100), (200, 200), (1000, 100), (2000, 200)]"
      },
      {
        "input": "items1 = [[1, 10], [2, 20], [3, 30], [4, 40], [5, 50]], items2 = [[1, 5], [2, 10], [3, 15], [4, 20], [5, 25]]",
        "output": "[(1, 15), (2, 30), (3, 45), (4, 60), (5, 75)]"
      },
      {
        "input": "items1 = [[1, 1], [3, 3], [5, 5], [7, 7], [9, 9]], items2 = [[2, 2], [4, 4], [6, 6], [8, 8], [10, 10]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]"
      },
      {
        "input": "items1 = [[1,10],[2,20],[3,30],[4,40],[5,50]], items2 = [[1,5],[2,10],[3,15],[4,20],[5,25]]",
        "output": "[(1, 15), (2, 30), (3, 45), (4, 60), (5, 75)]"
      },
      {
        "input": "items1 = [[1,1000],[2,999],[3,998],[4,997]], items2 = [[5,996],[6,995],[7,994],[8,993]]",
        "output": "[(1, 1000), (2, 999), (3, 998), (4, 997), (5, 996), (6, 995), (7, 994), (8, 993)]"
      },
      {
        "input": "items1 = [[999, 1], [998, 2], [997, 3]], items2 = [[996, 4], [995, 5], [997, 6]]",
        "output": "[(995, 5), (996, 4), (997, 9), (998, 2), (999, 1)]"
      },
      {
        "input": "items1 = [[10, 10], [20, 20], [30, 30]], items2 = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50]]",
        "output": "[(10, 20), (20, 40), (30, 60), (40, 40), (50, 50)]"
      },
      {
        "input": "items1 = [[100, 1], [200, 2], [300, 3], [400, 4]], items2 = [[50, 5], [150, 6], [250, 7], [350, 8], [450, 9]]",
        "output": "[(50, 5), (100, 1), (150, 6), (200, 2), (250, 7), (300, 3), (350, 8), (400, 4), (450, 9)]"
      },
      {
        "input": "items1 = [[10,10],[20,20],[30,30],[40,40],[50,50]], items2 = [[5,5],[15,15],[25,25],[35,35],[45,45]]",
        "output": "[(5, 5), (10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35), (40, 40), (45, 45), (50, 50)]"
      },
      {
        "input": "items1 = [[100, 1], [200, 1], [300, 1], [400, 1], [500, 1]], items2 = [[100, 1000], [200, 2000], [300, 3000], [400, 4000], [500, 5000]]",
        "output": "[(100, 1001), (200, 2001), (300, 3001), (400, 4001), (500, 5001)]"
      },
      {
        "input": "items1 = [[5,50],[15,150],[25,250],[35,350],[45,450]], items2 = [[5,50],[15,150],[25,250],[35,350],[45,450]]",
        "output": "[(5, 100), (15, 300), (25, 500), (35, 700), (45, 900)]"
      },
      {
        "input": "items1 = [[10,1],[20,2],[30,3]], items2 = [[10,9],[20,8],[30,7]]",
        "output": "[(10, 10), (20, 10), (30, 10)]"
      },
      {
        "input": "items1 = [[5,1],[10,2],[15,3],[20,4],[25,5]], items2 = [[5,5],[10,4],[15,3],[20,2],[25,1]]",
        "output": "[(5, 6), (10, 6), (15, 6), (20, 6), (25, 6)]"
      },
      {
        "input": "items1 = [[500,50],[1000,100]], items2 = [[250,25],[750,75],[1000,50]]",
        "output": "[(250, 25), (500, 50), (750, 75), (1000, 150)]"
      },
      {
        "input": "items1 = [[1, 1], [10, 10], [100, 100], [1000, 1000]], items2 = [[1, 1000], [10, 100], [100, 10], [1000, 1]]",
        "output": "[(1, 1001), (10, 110), (100, 110), (1000, 1001)]"
      },
      {
        "input": "items1 = [[500,1],[501,2],[502,3],[503,4],[504,5]], items2 = [[500,5],[501,4],[502,3],[503,2],[504,1]]",
        "output": "[(500, 6), (501, 6), (502, 6), (503, 6), (504, 6)]"
      },
      {
        "input": "items1 = [[10, 100], [20, 200], [30, 300], [40, 400], [50, 500]], items2 = [[5, 50], [15, 150], [25, 250], [35, 350], [45, 450], [55, 550]]",
        "output": "[(5, 50), (10, 100), (15, 150), (20, 200), (25, 250), (30, 300), (35, 350), (40, 400), (45, 450), (50, 500), (55, 550)]"
      },
      {
        "input": "items1 = [[1,100],[3,300],[5,500],[7,700]], items2 = [[2,200],[4,400],[6,600],[8,800]]",
        "output": "[(1, 100), (2, 200), (3, 300), (4, 400), (5, 500), (6, 600), (7, 700), (8, 800)]"
      },
      {
        "input": "items1 = [[999,1],[998,2],[997,3]], items2 = [[999,4],[998,5],[997,6],[996,7]]",
        "output": "[(996, 7), (997, 9), (998, 7), (999, 5)]"
      },
      {
        "input": "items1 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], items2 = [[1,9],[2,8],[3,7],[4,6],[5,5],[6,4],[7,3],[8,2],[9,1]]",
        "output": "[(1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (6, 10), (7, 10), (8, 10), (9, 10)]"
      },
      {
        "input": "items1 = [[10,5],[20,10],[30,15],[40,20]], items2 = [[10,15],[20,20],[50,25],[60,30]]",
        "output": "[(10, 20), (20, 30), (30, 15), (40, 20), (50, 25), (60, 30)]"
      },
      {
        "input": "items1 = [[5,5],[10,10],[15,15],[20,20],[25,25],[30,30],[35,35],[40,40]], items2 = [[3,3],[6,6],[9,9],[12,12],[18,18],[21,21],[24,24],[27,27],[33,33],[36,36],[39,39],[42,42]]",
        "output": "[(3, 3), (5, 5), (6, 6), (9, 9), (10, 10), (12, 12), (15, 15), (18, 18), (20, 20), (21, 21), (24, 24), (25, 25), (27, 27), (30, 30), (33, 33), (35, 35), (36, 36), (39, 39), (40, 40), (42, 42)]"
      },
      {
        "input": "items1 = [[5,100],[15,200],[25,300],[35,400]], items2 = [[5,150],[25,250],[35,350],[45,450]]",
        "output": "[(5, 250), (15, 200), (25, 550), (35, 750), (45, 450)]"
      },
      {
        "input": "items1 = [[1,1000],[500,500],[1000,1]], items2 = [[1,1000],[500,500],[1000,1]]",
        "output": "[(1, 2000), (500, 1000), (1000, 2)]"
      },
      {
        "input": "items1 = [[1,100],[2,200],[3,300],[4,400],[5,500],[6,600],[7,700],[8,800],[9,900],[10,1000]], items2 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[(1, 101), (2, 202), (3, 303), (4, 404), (5, 505), (6, 606), (7, 707), (8, 808), (9, 909), (10, 1010)]"
      },
      {
        "input": "items1 = [[5,1],[10,2],[15,3],[20,4],[25,5]], items2 = [[5,5],[10,10],[15,15],[20,20],[25,25]]",
        "output": "[(5, 6), (10, 12), (15, 18), (20, 24), (25, 30)]"
      }
    ]
  },
  {
    "id": 1180,
    "difficulty": "Easy",
    "tags": [
      "Math",
      "String"
    ],
    "problemDescription": "Given a string s, return the number of substrings that have only one distinct letter.\n\u00a0\nExample 1:\n\nInput: s = \"aaaba\"\nOutput: 8\nExplanation: The substrings with one distinct letter are \"aaa\", \"aa\", \"a\", \"b\".\n\"aaa\" occurs 1 time.\n\"aa\" occurs 2 times.\n\"a\" occurs 4 times.\n\"b\" occurs 1 time.\nSo the answer is 1 + 2 + 4 + 1 = 8.\n\nExample 2:\n\nInput: s = \"aaaaaaaaaa\"\nOutput: 55\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 1000\ns[i] consists of only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def countLetters(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"aabbcc\"",
        "output": "9"
      },
      {
        "input": "s = \"bbccdd\"",
        "output": "9"
      },
      {
        "input": "s = \"zzzzz\"",
        "output": "15"
      },
      {
        "input": "s = \"aaaba\"",
        "output": "8"
      },
      {
        "input": "s = \"abcdabcdabcd\"",
        "output": "12"
      },
      {
        "input": "s = \"ababab\"",
        "output": "6"
      },
      {
        "input": "s = \"zzz\"",
        "output": "6"
      },
      {
        "input": "s = \"ababababab\"",
        "output": "10"
      },
      {
        "input": "s = \"abc\"",
        "output": "3"
      },
      {
        "input": "s = \"aaaaabbbb\"",
        "output": "25"
      },
      {
        "input": "s = \"aa\"",
        "output": "3"
      },
      {
        "input": "s = \"zzzzy\"",
        "output": "11"
      },
      {
        "input": "s = \"abcdabcd\"",
        "output": "8"
      },
      {
        "input": "s = \"aaaaaaaaaa\"",
        "output": "55"
      },
      {
        "input": "s = \"zzzzzxyzzy\"",
        "output": "21"
      },
      {
        "input": "s = \"bbaaaabbb\"",
        "output": "19"
      },
      {
        "input": "s = \"a\"",
        "output": "1"
      },
      {
        "input": "s = \"abcdefghijjihgfedcba\"",
        "output": "21"
      },
      {
        "input": "s = \"aaabbbccc\"",
        "output": "18"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffffgggghhhhiiii\"",
        "output": "90"
      },
      {
        "input": "s = \"aabbccddeeefffggghhhhiiiijjjjkkkkllllmmmmnnnnoooo\"",
        "output": "110"
      },
      {
        "input": "s = \"qqqqqqqqqqppppppppooonnnnmmmmlllkkkjjjiii\"",
        "output": "141"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "26"
      },
      {
        "input": "s = \"xyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "5673"
      },
      {
        "input": "s = \"aaabaaaabaaaabaaaab\"",
        "output": "40"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "990"
      },
      {
        "input": "s = \"abacabadabacaba\"",
        "output": "15"
      },
      {
        "input": "s = \"abcabcabc\"",
        "output": "9"
      },
      {
        "input": "s = \"aabbccddeeefffggg\"",
        "output": "30"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzz\"",
        "output": "141"
      },
      {
        "input": "s = \"abbbbbccccddddeeeeefffffgggggg\"",
        "output": "87"
      },
      {
        "input": "s = \"aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd\"",
        "output": "220"
      },
      {
        "input": "s = \"abcde\"",
        "output": "5"
      },
      {
        "input": "s = \"aabbccddeeefffggghhhiii\"",
        "output": "42"
      },
      {
        "input": "s = \"mnoooppnnooo\"",
        "output": "20"
      },
      {
        "input": "s = \"abccccccba\"",
        "output": "25"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "5778"
      },
      {
        "input": "s = \"mnopqrssrqpomnopqrssrqpomn\"",
        "output": "28"
      },
      {
        "input": "s = \"aabbbbcccccccdddddddddeeeeeeeeeeffffffffffggggggggggg\"",
        "output": "262"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "53"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbccccccccccccc\"",
        "output": "613"
      },
      {
        "input": "s = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb\"",
        "output": "1959"
      },
      {
        "input": "s = \"ababababababababababababababababababababababababababababab\"",
        "output": "58"
      },
      {
        "input": "s = \"aabccddeeeaaa\"",
        "output": "22"
      },
      {
        "input": "s = \"aaaaaabbbbbcccccccc\"",
        "output": "72"
      },
      {
        "input": "s = \"aabbbccddddeeefff\"",
        "output": "34"
      },
      {
        "input": "s = \"aabbaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "84"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "8853"
      },
      {
        "input": "s = \"aabbaaabbbaaaabbbbbaaaa\"",
        "output": "53"
      },
      {
        "input": "s = \"aabbccccdddddddeeeeeeeeefffffffffgggggggggggggggg\"",
        "output": "270"
      },
      {
        "input": "s = \"lllllllllllllll\"",
        "output": "120"
      },
      {
        "input": "s = \"xyxyxyxyxyxyxyxyxyxyxy\"",
        "output": "22"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "78"
      },
      {
        "input": "s = \"ppppqqqqrrrsssss\"",
        "output": "41"
      },
      {
        "input": "s = \"aabbcccddd\"",
        "output": "18"
      },
      {
        "input": "s = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "1275"
      },
      {
        "input": "s = \"xyzzzyyxxy\"",
        "output": "15"
      }
    ]
  },
  {
    "id": 3005,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "problemDescription": "You are given an array nums consisting of positive integers.\nReturn the total frequencies of elements in nums\u00a0such that those elements all have the maximum frequency.\nThe frequency of an element is the number of occurrences of that element in the array.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,2,3,1,4]\nOutput: 4\nExplanation: The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.\nSo the number of elements in the array with maximum frequency is 4.\n\nExample 2:\n\nInput: nums = [1,2,3,4,5]\nOutput: 5\nExplanation: All elements of the array have a frequency of 1 which is the maximum.\nSo the number of elements in the array with maximum frequency is 5.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def maxFrequencyElements(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [3,3,3,2,2,1]",
        "output": "3"
      },
      {
        "input": "nums = [10,20,10,20,10,30,30,30,30]",
        "output": "4"
      },
      {
        "input": "nums = [10,20,10,20,10,30,20,40,50,20]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,2,3,1,4]",
        "output": "4"
      },
      {
        "input": "nums = [5,5,5,5,1,1,2,2,3,3]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7]",
        "output": "7"
      },
      {
        "input": "nums = [1,1,2,2,3,3]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,2,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [10,20,20,10,30,30,30]",
        "output": "3"
      },
      {
        "input": "nums = [5,5,5,5,5]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [7,7,7,7,7]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,3,3,4,4,4,4]",
        "output": "4"
      },
      {
        "input": "nums = [1,1]",
        "output": "2"
      },
      {
        "input": "nums = [7,7,7,7,8,8,8,8,8,9,9,9,9,9,9]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3]",
        "output": "9"
      },
      {
        "input": "nums = [31,31,31,31,32,32,32,32,33,33,34,34,34,35,35,35,35]",
        "output": "12"
      },
      {
        "input": "nums = [2,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,7]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,2,2,3,3,3,4,4,4,4]",
        "output": "4"
      },
      {
        "input": "nums = [32,32,33,33,33,34,34,34,34,35,35,35,35,35,35,35,35,35]",
        "output": "9"
      },
      {
        "input": "nums = [7,8,8,9,9,9,10,10,10,10,10]",
        "output": "5"
      },
      {
        "input": "nums = [7,7,7,8,8,9,9,10,10,10,10]",
        "output": "4"
      },
      {
        "input": "nums = [11,11,12,12,13,13,14,14,15,15,15,15,16,16,17,17,18,18,19,19,19]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4]",
        "output": "8"
      },
      {
        "input": "nums = [99,99,99,99,98,98,98,97,97,96,96,95,95,95,95,95,95,95,95,95]",
        "output": "9"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5]",
        "output": "8"
      },
      {
        "input": "nums = [2,2,2,3,3,4,4,4,5,5,5,5,6,6,6,6]",
        "output": "8"
      },
      {
        "input": "nums = [1,1,2,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9]",
        "output": "30"
      },
      {
        "input": "nums = [17,17,18,18,18,19,19,20,20,20,20,20,20]",
        "output": "6"
      },
      {
        "input": "nums = [6,6,6,6,7,7,7,8,8,9]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7]",
        "output": "18"
      },
      {
        "input": "nums = [21,21,21,22,22,22,22,23,23,23,23,23,24,24,24,25,25,25,25]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9]",
        "output": "27"
      },
      {
        "input": "nums = [7,7,7,7,8,8,8,9,9,10]",
        "output": "4"
      },
      {
        "input": "nums = [6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,10]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6]",
        "output": "7"
      },
      {
        "input": "nums = [6,6,6,6,6,7,7,7,7,8,8,8,9,9,10]",
        "output": "5"
      },
      {
        "input": "nums = [10,20,20,30,30,30,40,40,40,40,50,50,50,50,50]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,4,4,4,4]",
        "output": "4"
      },
      {
        "input": "nums = [6,6,6,6,6,7,7,7,8,8,9,9,10,10,11,11,11,11]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,5,5]",
        "output": "7"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6]",
        "output": "8"
      },
      {
        "input": "nums = [7,7,8,8,9,9,9,10,10,10,10]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,2,2,3,3,3,3,4,4,4]",
        "output": "4"
      },
      {
        "input": "nums = [6,6,6,7,7,8,8,8,9,9,10,10]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,3,3,4,5,5,6,6,6,7,7,8,8,8,9,9,9,9,9]",
        "output": "5"
      },
      {
        "input": "nums = [100,100,100,100,100,100,99,99,98,98,97,97,96,96,95,95,94,94,93,93,92,92,91,91]",
        "output": "6"
      },
      {
        "input": "nums = [25,26,27,28,29,29,30,30,30,30,31,31,31,31,31,31,31]",
        "output": "7"
      },
      {
        "input": "nums = [10,20,20,30,30,30,40,40,40,40]",
        "output": "4"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5]",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8]",
        "output": "25"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9]",
        "output": "20"
      },
      {
        "input": "nums = [36,36,36,37,37,37,37,38,38,38,38,38,39,39,39,39,39,39,39,39,39]",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,4,4,4,4,4,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "16"
      },
      {
        "input": "nums = [1,2,3,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]",
        "output": "21"
      },
      {
        "input": "nums = [7,7,7,7,8,8,8,9,9,9,9,9,10]",
        "output": "5"
      },
      {
        "input": "nums = [2,2,3,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6]",
        "output": "12"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,3,4,4,4,4,4]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,5,5,5,5,5,5]",
        "output": "6"
      },
      {
        "input": "nums = [6,6,6,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "12"
      },
      {
        "input": "nums = [36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,36,37,38,39]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,5,5,5,6,6,7,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "15"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5]",
        "output": "12"
      },
      {
        "input": "nums = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]",
        "output": "20"
      },
      {
        "input": "nums = [6,6,7,7,7,8,8,8,8,8,9,9,9,9,9]",
        "output": "10"
      },
      {
        "input": "nums = [30,30,31,31,32,32,33,33,34,34,35,35,35,36,36,36,37,37,37,37,38,38,39]",
        "output": "4"
      },
      {
        "input": "nums = [10,20,20,30,30,30,40,40,40,40,50,50,50,50,50,60,60,60,60,60]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,10,10,10,10,10,10]",
        "output": "9"
      },
      {
        "input": "nums = [1,1,1,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14]",
        "output": "28"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,3,3,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "41"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7]",
        "output": "6"
      },
      {
        "input": "nums = [50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,60,60]",
        "output": "4"
      },
      {
        "input": "nums = [7,7,7,8,8,8,8,9,9,9,9,9]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5]",
        "output": "7"
      },
      {
        "input": "nums = [21,21,22,22,23,23,23,23,24,24,24,24,24,24,24]",
        "output": "7"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "16"
      },
      {
        "input": "nums = [10,20,20,30,30,30,40,40,40,40,50,50,50,50,50,60,60,60,60,60,60,70,70,70,70,70,70,70]",
        "output": "7"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6]",
        "output": "9"
      },
      {
        "input": "nums = [11,12,12,13,13,13,14,14,14,14,15,15,15,15,15]",
        "output": "5"
      },
      {
        "input": "nums = [6,6,6,6,7,7,8,8,8,9,9,9,10]",
        "output": "4"
      },
      {
        "input": "nums = [10,10,20,20,20,30,30,30,30,40,40,40,40,40]",
        "output": "5"
      },
      {
        "input": "nums = [14,15,14,15,14,15,16,16,16,17,18,18,18,19,19,19,19]",
        "output": "4"
      },
      {
        "input": "nums = [31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "20"
      },
      {
        "input": "nums = [7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10]",
        "output": "12"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,3,3,4,5,5,6,6,6,7,8,8,8,8]",
        "output": "8"
      },
      {
        "input": "nums = [9,9,9,9,9,8,8,8,8,7,7,7,6,6,5,4,3,2,1]",
        "output": "5"
      },
      {
        "input": "nums = [10,20,20,30,30,30,30,40,40,40,40]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,8]",
        "output": "6"
      },
      {
        "input": "nums = [7,7,7,8,8,9,9,9,9,10,10,10,10]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5]",
        "output": "4"
      },
      {
        "input": "nums = [21,21,21,22,22,23,23,23,23,24,24,24,24,25,25,25,25,25]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,2,2,3,4,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9]",
        "output": "8"
      },
      {
        "input": "nums = [41,41,41,42,42,42,42,43,43,44,44,44,44,45,45,45,45,45]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,2,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,8,8,8,9,9,10,10,10,10]",
        "output": "12"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,3,3,3,4,4,5,5,5,5]",
        "output": "8"
      },
      {
        "input": "nums = [40,40,40,41,41,41,42,42,42,42,43,43,44,44,44,45,45,45,46,46,47,47,47,47]",
        "output": "8"
      },
      {
        "input": "nums = [11,12,13,14,15,15,15,15,16,16,16,16,16]",
        "output": "5"
      },
      {
        "input": "nums = [7,7,8,8,8,9,9,9,9,10,10,10,10]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8]",
        "output": "10"
      },
      {
        "input": "nums = [6,6,6,6,7,7,7,8,8,9,9,10,11,12,12,12,13,13,13,13]",
        "output": "8"
      },
      {
        "input": "nums = [10,10,10,20,20,30,30,30,40,40,40,40]",
        "output": "4"
      },
      {
        "input": "nums = [26,27,28,29,30,26,27,28,29,30,26,27,28,29,30,26,27,28,29]",
        "output": "16"
      },
      {
        "input": "nums = [51,51,52,52,52,53,53,53,53,54,54,54,54,55,55,55,55,55,55]",
        "output": "6"
      },
      {
        "input": "nums = [40,41,42,42,43,43,43,44,44,44,44,45,45,45,45,45,45,45,45,45,45]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,4,4,4,4]",
        "output": "4"
      },
      {
        "input": "nums = [61,61,61,61,62,62,62,62,62,63,63,63,63,63,64,64,64,64,64,64,64]",
        "output": "7"
      }
    ]
  },
  {
    "id": 1486,
    "difficulty": "Easy",
    "tags": [
      "Bit Manipulation",
      "Math"
    ],
    "problemDescription": "You are given an integer n and an integer start.\nDefine an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.\nReturn the bitwise XOR of all elements of nums.\n\u00a0\nExample 1:\n\nInput: n = 5, start = 0\nOutput: 8\nExplanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere \"^\" corresponds to bitwise XOR operator.\n\nExample 2:\n\nInput: n = 4, start = 3\nOutput: 8\nExplanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.\n\n\u00a0\nConstraints:\n\n1 <= n <= 1000\n0 <= start <= 1000\nn == nums.length\n\n",
    "starterCode": "class Solution:\n    def xorOperation(self, n: int, start: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 4, start = 3",
        "output": "8"
      },
      {
        "input": "n = 8, start = 12",
        "output": "0"
      },
      {
        "input": "n = 7, start = 2",
        "output": "0"
      },
      {
        "input": "n = 3, start = 2",
        "output": "0"
      },
      {
        "input": "n = 10, start = 1",
        "output": "2"
      },
      {
        "input": "n = 5, start = 0",
        "output": "8"
      },
      {
        "input": "n = 1, start = 7",
        "output": "7"
      },
      {
        "input": "n = 10, start = 5",
        "output": "2"
      },
      {
        "input": "n = 8, start = 2",
        "output": "16"
      },
      {
        "input": "n = 7, start = 5",
        "output": "19"
      },
      {
        "input": "n = 1, start = 5",
        "output": "5"
      },
      {
        "input": "n = 10, start = 999",
        "output": "30"
      },
      {
        "input": "n = 50, start = 25",
        "output": "2"
      },
      {
        "input": "n = 100, start = 200",
        "output": "0"
      },
      {
        "input": "n = 15, start = 2",
        "output": "0"
      },
      {
        "input": "n = 33, start = 17",
        "output": "81"
      },
      {
        "input": "n = 12, start = 8",
        "output": "0"
      },
      {
        "input": "n = 750, start = 10",
        "output": "1518"
      },
      {
        "input": "n = 750, start = 50",
        "output": "1598"
      },
      {
        "input": "n = 3, start = 333",
        "output": "339"
      },
      {
        "input": "n = 666, start = 333",
        "output": "2"
      },
      {
        "input": "n = 500, start = 250",
        "output": "1048"
      },
      {
        "input": "n = 12, start = 3",
        "output": "24"
      },
      {
        "input": "n = 9, start = 1",
        "output": "17"
      },
      {
        "input": "n = 50, start = 10",
        "output": "102"
      },
      {
        "input": "n = 6, start = 999",
        "output": "22"
      },
      {
        "input": "n = 8, start = 11",
        "output": "16"
      },
      {
        "input": "n = 64, start = 42",
        "output": "128"
      },
      {
        "input": "n = 15, start = 7",
        "output": "5"
      },
      {
        "input": "n = 80, start = 600",
        "output": "0"
      },
      {
        "input": "n = 250, start = 100",
        "output": "2"
      },
      {
        "input": "n = 20, start = 10",
        "output": "56"
      },
      {
        "input": "n = 30, start = 42",
        "output": "78"
      },
      {
        "input": "n = 7, start = 25",
        "output": "39"
      },
      {
        "input": "n = 256, start = 128",
        "output": "0"
      },
      {
        "input": "n = 400, start = 400",
        "output": "0"
      },
      {
        "input": "n = 11, start = 8",
        "output": "30"
      },
      {
        "input": "n = 100, start = 250",
        "output": "312"
      },
      {
        "input": "n = 20, start = 11",
        "output": "56"
      },
      {
        "input": "n = 500, start = 750",
        "output": "1080"
      },
      {
        "input": "n = 500, start = 500",
        "output": "0"
      },
      {
        "input": "n = 700, start = 600",
        "output": "0"
      },
      {
        "input": "n = 60, start = 8",
        "output": "0"
      },
      {
        "input": "n = 100, start = 999",
        "output": "1864"
      },
      {
        "input": "n = 250, start = 250",
        "output": "534"
      },
      {
        "input": "n = 8, start = 15",
        "output": "16"
      },
      {
        "input": "n = 18, start = 4",
        "output": "2"
      },
      {
        "input": "n = 1000, start = 0",
        "output": "0"
      },
      {
        "input": "n = 333, start = 256",
        "output": "920"
      },
      {
        "input": "n = 75, start = 300",
        "output": "450"
      },
      {
        "input": "n = 128, start = 99",
        "output": "256"
      },
      {
        "input": "n = 500, start = 999",
        "output": "1064"
      },
      {
        "input": "n = 100, start = 50",
        "output": "200"
      },
      {
        "input": "n = 50, start = 50",
        "output": "166"
      },
      {
        "input": "n = 250, start = 123",
        "output": "534"
      },
      {
        "input": "n = 999, start = 0",
        "output": "1998"
      },
      {
        "input": "n = 999, start = 500",
        "output": "2498"
      },
      {
        "input": "n = 25, start = 6",
        "output": "6"
      },
      {
        "input": "n = 64, start = 32",
        "output": "0"
      },
      {
        "input": "n = 20, start = 12",
        "output": "0"
      },
      {
        "input": "n = 50, start = 100",
        "output": "2"
      },
      {
        "input": "n = 8, start = 1",
        "output": "0"
      },
      {
        "input": "n = 30, start = 15",
        "output": "70"
      },
      {
        "input": "n = 9, start = 7",
        "output": "7"
      },
      {
        "input": "n = 13, start = 11",
        "output": "11"
      },
      {
        "input": "n = 20, start = 3",
        "output": "40"
      },
      {
        "input": "n = 100, start = 25",
        "output": "0"
      },
      {
        "input": "n = 500, start = 0",
        "output": "0"
      },
      {
        "input": "n = 120, start = 750",
        "output": "304"
      },
      {
        "input": "n = 7, start = 1",
        "output": "15"
      },
      {
        "input": "n = 15, start = 12",
        "output": "42"
      },
      {
        "input": "n = 50, start = 0",
        "output": "2"
      },
      {
        "input": "n = 1000, start = 1",
        "output": "0"
      },
      {
        "input": "n = 333, start = 222",
        "output": "222"
      },
      {
        "input": "n = 20, start = 15",
        "output": "56"
      },
      {
        "input": "n = 7, start = 14",
        "output": "12"
      },
      {
        "input": "n = 1000, start = 1000",
        "output": "0"
      },
      {
        "input": "n = 800, start = 150",
        "output": "1600"
      },
      {
        "input": "n = 300, start = 300",
        "output": "0"
      },
      {
        "input": "n = 8, start = 100",
        "output": "0"
      },
      {
        "input": "n = 7, start = 17",
        "output": "31"
      },
      {
        "input": "n = 7, start = 10",
        "output": "8"
      },
      {
        "input": "n = 666, start = 128",
        "output": "2"
      },
      {
        "input": "n = 20, start = 2",
        "output": "40"
      },
      {
        "input": "n = 300, start = 600",
        "output": "0"
      },
      {
        "input": "n = 12, start = 42",
        "output": "104"
      },
      {
        "input": "n = 40, start = 0",
        "output": "0"
      },
      {
        "input": "n = 20, start = 0",
        "output": "0"
      },
      {
        "input": "n = 80, start = 12",
        "output": "0"
      },
      {
        "input": "n = 300, start = 450",
        "output": "1496"
      },
      {
        "input": "n = 999, start = 1",
        "output": "1999"
      },
      {
        "input": "n = 600, start = 300",
        "output": "0"
      }
    ]
  },
  {
    "id": 2144,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array",
      "Sorting"
    ],
    "problemDescription": "A shop is selling candies at a discount. For every two candies sold, the shop gives a third candy for free.\nThe customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought.\n\nFor example, if there are 4 candies with costs 1, 2, 3, and 4, and the customer buys candies with costs 2 and 3, they\u00a0can take the candy with cost 1 for free, but not the candy with cost 4.\n\nGiven a 0-indexed integer array cost, where cost[i] denotes the cost of the ith candy, return the minimum cost of buying all the candies.\n\u00a0\nExample 1:\n\nInput: cost = [1,2,3]\nOutput: 5\nExplanation: We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the only way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.\n\nExample 2:\n\nInput: cost = [6,5,7,9,2,2]\nOutput: 23\nExplanation: The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.\n\nExample 3:\n\nInput: cost = [5,5]\nOutput: 10\nExplanation: Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10.\n\n\u00a0\nConstraints:\n\n1 <= cost.length <= 100\n1 <= cost[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def minimumCost(self, cost: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "cost = [100]",
        "output": "100"
      },
      {
        "input": "cost = [50,25,75,100,125]",
        "output": "300"
      },
      {
        "input": "cost = [1,1,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "cost = [10,20,30,40,50]",
        "output": "120"
      },
      {
        "input": "cost = [99,98,97,96,95,94,93,92,91,90]",
        "output": "663"
      },
      {
        "input": "cost = [10,20]",
        "output": "30"
      },
      {
        "input": "cost = [1]",
        "output": "1"
      },
      {
        "input": "cost = [100, 100, 100, 100, 100, 100]",
        "output": "400"
      },
      {
        "input": "cost = [80,80,80,80,80,80,80,80,80,80]",
        "output": "560"
      },
      {
        "input": "cost = [1,1,1,1,1,1,1,1,1,1]",
        "output": "7"
      },
      {
        "input": "cost = [5,5]",
        "output": "10"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "40"
      },
      {
        "input": "cost = [10,9,8,7,6,5,4,3,2,1]",
        "output": "40"
      },
      {
        "input": "cost = [3,2,1]",
        "output": "5"
      },
      {
        "input": "cost = [1,2]",
        "output": "3"
      },
      {
        "input": "cost = [50,25,75,100,200]",
        "output": "375"
      },
      {
        "input": "cost = [1,2,3]",
        "output": "5"
      },
      {
        "input": "cost = [6,5,7,9,2,2]",
        "output": "23"
      },
      {
        "input": "cost = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75]",
        "output": "1483"
      },
      {
        "input": "cost = [5, 4, 3, 2, 1, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51]",
        "output": "2575"
      },
      {
        "input": "cost = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "700"
      },
      {
        "input": "cost = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "70"
      },
      {
        "input": "cost = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]",
        "output": "1700"
      },
      {
        "input": "cost = [3, 6, 1, 9, 4, 8, 2, 7, 5, 10]",
        "output": "40"
      },
      {
        "input": "cost = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]",
        "output": "663"
      },
      {
        "input": "cost = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9, 7, 9, 3, 2, 3, 8, 4, 6, 2, 6, 4, 3, 3, 8, 3, 2, 7, 9, 5, 0, 2, 8, 8, 4, 1, 9, 7, 1, 6, 9, 3, 9, 9, 3, 7, 5, 1, 0, 5, 8, 2, 0, 9, 7, 4, 9, 4, 4, 5, 9, 2, 3, 0, 7, 8, 1, 6, 4, 0, 6, 2, 8, 4, 1]",
        "output": "241"
      },
      {
        "input": "cost = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "130"
      },
      {
        "input": "cost = [30, 15, 45, 10, 25, 55, 5, 35, 20, 40, 60, 65, 50, 70, 75, 80, 85, 90, 95, 100, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]",
        "output": "2433"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125]",
        "output": "5292"
      },
      {
        "input": "cost = [99, 1, 98, 2, 97, 3, 96, 4, 95, 5, 94, 6, 93, 7, 92, 8, 91, 9, 90, 10]",
        "output": "700"
      },
      {
        "input": "cost = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "3333"
      },
      {
        "input": "cost = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "14"
      },
      {
        "input": "cost = [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]",
        "output": "350"
      },
      {
        "input": "cost = [1, 3, 2, 6, 5, 4, 9, 8, 7, 12, 11, 10]",
        "output": "56"
      },
      {
        "input": "cost = [10,20,30,40,50,60]",
        "output": "160"
      },
      {
        "input": "cost = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "400"
      },
      {
        "input": "cost = [3, 6, 1, 8, 2, 7, 4, 5, 9]",
        "output": "33"
      },
      {
        "input": "cost = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "147"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "56"
      },
      {
        "input": "cost = [100, 1, 100, 2, 100, 3, 100, 4, 100, 5, 100, 6, 100, 7, 100, 8, 100, 9, 100, 10]",
        "output": "737"
      },
      {
        "input": "cost = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300]",
        "output": "3200"
      },
      {
        "input": "cost = [1,2,3,4,5,6,7,8,9,10]",
        "output": "40"
      },
      {
        "input": "cost = [45, 45, 45, 45, 45, 45, 45, 45, 45, 45]",
        "output": "315"
      },
      {
        "input": "cost = [8, 6, 7, 5, 3, 0, 9]",
        "output": "28"
      },
      {
        "input": "cost = [100, 1, 200, 2, 300, 3, 400, 4, 500, 5, 600, 6, 700, 7, 800, 8, 900, 9, 1000, 10]",
        "output": "4037"
      },
      {
        "input": "cost = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "42"
      },
      {
        "input": "cost = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96, 6, 95, 7, 94, 8, 93, 9, 92, 10, 91]",
        "output": "707"
      },
      {
        "input": "cost = [100, 50, 25, 10, 5, 1, 100, 50, 25, 10, 5, 1]",
        "output": "301"
      },
      {
        "input": "cost = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90]",
        "output": "760"
      },
      {
        "input": "cost = [1, 2, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3]",
        "output": "17"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "225"
      },
      {
        "input": "cost = [100, 1, 99, 2, 98, 3, 97, 4, 96, 5, 95, 6, 94, 7, 93, 8, 92, 9, 91, 10]",
        "output": "707"
      },
      {
        "input": "cost = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "14"
      },
      {
        "input": "cost = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80]",
        "output": "1253"
      },
      {
        "input": "cost = [33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33]",
        "output": "528"
      },
      {
        "input": "cost = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "84"
      },
      {
        "input": "cost = [50, 20, 30, 10, 40, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "1470"
      },
      {
        "input": "cost = [30, 40, 10, 50, 60, 20]",
        "output": "160"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]",
        "output": "65"
      },
      {
        "input": "cost = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50]",
        "output": "2567"
      },
      {
        "input": "cost = [50, 40, 30, 20, 10, 5, 4, 3, 2, 1]",
        "output": "128"
      },
      {
        "input": "cost = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86]",
        "output": "935"
      },
      {
        "input": "cost = [1, 3, 2, 6, 5, 4, 9, 8, 7, 12, 11, 10, 15, 14, 13]",
        "output": "85"
      },
      {
        "input": "cost = [1, 3, 2, 4, 6, 5, 7, 9, 8, 11, 13, 12, 15, 17, 16, 19, 21, 20, 23, 25, 24, 27, 29, 28, 31, 33, 32, 35, 37, 36, 39, 41, 40, 43, 45, 44, 47, 49, 48, 50]",
        "output": "680"
      },
      {
        "input": "cost = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80]",
        "output": "1253"
      },
      {
        "input": "cost = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "850"
      },
      {
        "input": "cost = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70]",
        "output": "1700"
      },
      {
        "input": "cost = [45, 30, 10, 20, 50, 60, 15, 25, 35, 40]",
        "output": "240"
      },
      {
        "input": "cost = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "77"
      },
      {
        "input": "cost = [100, 100, 100, 99, 99, 99, 98, 98, 98, 97, 97, 97, 96, 96, 96, 95, 95, 95, 94, 94, 94, 93, 93, 93, 92, 92, 92, 91, 91, 91, 90, 90, 90, 89, 89, 89, 88, 88, 88, 87, 87, 87, 86, 86, 86, 85, 85, 85]",
        "output": "2960"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "3400"
      },
      {
        "input": "cost = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 15, 14, 13, 12, 11]",
        "output": "85"
      },
      {
        "input": "cost = [30, 10, 20, 40, 50, 60]",
        "output": "160"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "147"
      },
      {
        "input": "cost = [100,90,80,70,60,50,40,30,20,10]",
        "output": "400"
      },
      {
        "input": "cost = [30, 10, 40, 20, 50, 60, 70]",
        "output": "210"
      },
      {
        "input": "cost = [45,30,75,60,90,15,10,5]",
        "output": "255"
      },
      {
        "input": "cost = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "400"
      },
      {
        "input": "cost = [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]",
        "output": "500"
      },
      {
        "input": "cost = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "1400"
      },
      {
        "input": "cost = [50, 25, 75, 100, 200, 150, 80, 120, 90, 60, 30, 180, 140, 110, 40]",
        "output": "1035"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "85"
      },
      {
        "input": "cost = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "320"
      },
      {
        "input": "cost = [5, 4, 3, 2, 1, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86]",
        "output": "947"
      },
      {
        "input": "cost = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "1470"
      },
      {
        "input": "cost = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "3500"
      },
      {
        "input": "cost = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "867"
      },
      {
        "input": "cost = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "40"
      },
      {
        "input": "cost = [23,45,12,89,34,78,67,56,90,11]",
        "output": "370"
      },
      {
        "input": "cost = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "70"
      },
      {
        "input": "cost = [8, 12, 15, 7, 10, 14, 9]",
        "output": "55"
      },
      {
        "input": "cost = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "560"
      },
      {
        "input": "cost = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "43"
      },
      {
        "input": "cost = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "50"
      },
      {
        "input": "cost = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "735"
      },
      {
        "input": "cost = [42, 23, 65, 12, 89, 34, 78, 56, 90, 21, 33, 55, 77, 66, 88, 44, 55, 66, 77, 88]",
        "output": "808"
      }
    ]
  },
  {
    "id": 541,
    "difficulty": "Easy",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "problemDescription": "Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\nIf there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.\n\u00a0\nExample 1:\nInput: s = \"abcdefg\", k = 2\nOutput: \"bacdfeg\"\nExample 2:\nInput: s = \"abcd\", k = 2\nOutput: \"bacd\"\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 104\ns consists of only lowercase English letters.\n1 <= k <= 104\n\n",
    "starterCode": "class Solution:\n    def reverseStr(self, s: str, k: int) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"\", k = 5",
        "output": ""
      },
      {
        "input": "s = \"abcdefgh\", k = 3",
        "output": "cbadefhg"
      },
      {
        "input": "s = \"abcdefg\", k = 1",
        "output": "abcdefg"
      },
      {
        "input": "s = \"abcdef\", k = 6",
        "output": "fedcba"
      },
      {
        "input": "s = \"a\", k = 1",
        "output": "a"
      },
      {
        "input": "s = \"abcdefghijk\", k = 4",
        "output": "dcbaefghkji"
      },
      {
        "input": "s = \"abcd\", k = 2",
        "output": "bacd"
      },
      {
        "input": "s = \"abcdefg\", k = 2",
        "output": "bacdfeg"
      },
      {
        "input": "s = \"abcdefg\", k = 10",
        "output": "gfedcba"
      },
      {
        "input": "s = \"ab\", k = 10",
        "output": "ba"
      },
      {
        "input": "s = \"mississippiississippiississippi\", k = 6",
        "output": "sissimsippiiississppiissppissii"
      },
      {
        "input": "s = \"abcdefghijklmnopqrs\", k = 1",
        "output": "abcdefghijklmnopqrs"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", k = 5",
        "output": "vwxyzutsrqlmnopkjihgbcdefa"
      },
      {
        "input": "s = \"mississippi\", k = 4",
        "output": "ssimissiipp"
      },
      {
        "input": "s = \"abcdefghij\", k = 7",
        "output": "gfedcbahij"
      },
      {
        "input": "s = \"reverseeverysinglekcharachters\", k = 8",
        "output": "eesreververysingarahckelchters"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstu\", k = 1",
        "output": "abcdefghijklmnopqrstu"
      },
      {
        "input": "s = \"thisisaverylongstringforchecking\", k = 6",
        "output": "sisihtaverylrtsgnoingforikcehcng"
      },
      {
        "input": "s = \"abcd\", k = 1",
        "output": "abcd"
      },
      {
        "input": "s = \"zxcvbnmlkjhgfdsapoiuytrewq\", k = 9",
        "output": "klmnbvcxzjhgfdsapoqwertyui"
      },
      {
        "input": "s = \"abcdefghijklmn\", k = 1",
        "output": "abcdefghijklmn"
      },
      {
        "input": "s = \"abcdefghijklmnopq\", k = 1",
        "output": "abcdefghijklmnopq"
      },
      {
        "input": "s = \"reversemeplease\", k = 7",
        "output": "esrevermeplease"
      },
      {
        "input": "s = \"abcdefghij\", k = 2",
        "output": "bacdfeghji"
      },
      {
        "input": "s = \"thisisaverylongstringthatweneedtoreversesomeparts\", k = 5",
        "output": "isihtsavergnolystrintahtgweneeerotdversepemosarts"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxy\", k = 1",
        "output": "abcdefghijklmnopqrstuvwxy"
      },
      {
        "input": "s = \"abcdefghij\", k = 8",
        "output": "hgfedcbaij"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", k = 1",
        "output": "zyxwvutsrqponmlkjihgfedcba"
      },
      {
        "input": "s = \"abcdefghij\", k = 10",
        "output": "jihgfedcba"
      },
      {
        "input": "s = \"onetwothreefourfivesixseveneightnine\", k = 10",
        "output": "erhtowtenoefourfivesgienevesxihtnine"
      },
      {
        "input": "s = \"almostthere\", k = 10",
        "output": "rehttsomlae"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", k = 11",
        "output": "ajihgfedcbabcdefghij"
      },
      {
        "input": "s = \"reverseme\", k = 5",
        "output": "reverseme"
      },
      {
        "input": "s = \"reverseevery2kcharacters\", k = 5",
        "output": "reverseeveck2yrharacsret"
      },
      {
        "input": "s = \"pythonprogramming\", k = 2",
        "output": "ypthnoprgoramming"
      },
      {
        "input": "s = \"oddnumberofchar\", k = 4",
        "output": "nddoumbecforhar"
      },
      {
        "input": "s = \"abcdefghijklmnop\", k = 1",
        "output": "abcdefghijklmnop"
      },
      {
        "input": "s = \"abcdefghij\", k = 4",
        "output": "dcbaefghji"
      },
      {
        "input": "s = \"abcdefghij\", k = 9",
        "output": "ihgfedcbaj"
      },
      {
        "input": "s = \"abc\", k = 1",
        "output": "abc"
      },
      {
        "input": "s = \"abcdefghij\", k = 11",
        "output": "jihgfedcba"
      },
      {
        "input": "s = \"abcdefgh\", k = 9",
        "output": "hgfedcba"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 5",
        "output": "cbbaacddeehggffhiijjmllkkmnnoorqqpprssttwvvuuwxxyyzz"
      },
      {
        "input": "s = \"abcdef\", k = 5",
        "output": "edcbaf"
      },
      {
        "input": "s = \"abcdefghijklnopqrstuvwxyz\", k = 26",
        "output": "zyxwvutsrqponlkjihgfedcba"
      },
      {
        "input": "s = \"pythonprogramminglanguage\", k = 8",
        "output": "rpnohtypogrammingaugnalge"
      },
      {
        "input": "s = \"reverseeveryotherchunk\", k = 3",
        "output": "verersveeeryhtoercnuhk"
      },
      {
        "input": "s = \"abcdefghijklmnopqrst\", k = 1",
        "output": "abcdefghijklmnopqrst"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 7",
        "output": "dccbbaadeeffggkjjiihhkllmmnnrqqppoorssttuuyxxwwvvyzz"
      },
      {
        "input": "s = \"abcdefgh\", k = 1",
        "output": "abcdefgh"
      },
      {
        "input": "s = \"abcde\", k = 10",
        "output": "edcba"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijj\", k = 1",
        "output": "aabbccddeeffgghhiijj"
      },
      {
        "input": "s = \"reversemeplease\", k = 1",
        "output": "reversemeplease"
      },
      {
        "input": "s = \"abcdefghijklmnopqr\", k = 1",
        "output": "abcdefghijklmnopqr"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 5",
        "output": "edcbafghijonmlkpqrstyxwvuz"
      },
      {
        "input": "s = \"abcdef\", k = 7",
        "output": "fedcba"
      },
      {
        "input": "s = \"abcdefghij\", k = 5",
        "output": "edcbafghij"
      },
      {
        "input": "s = \"abcdefghijklnopqrstuvwxyz\", k = 13",
        "output": "nlkjihgfedcbaopqrstuvwxyz"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuv\", k = 1",
        "output": "abcdefghijklmnopqrstuv"
      },
      {
        "input": "s = \"abcdefghijkl\", k = 1",
        "output": "abcdefghijkl"
      },
      {
        "input": "s = \"abcdefghijklnmopqrstuvwxyz\", k = 5",
        "output": "edcbafghijomnlkpqrstyxwvuz"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 8",
        "output": "ddccbbaaeeffgghhllkkjjiimmnnooppttssrrqquuvvwwxxzzyy"
      },
      {
        "input": "s = \"thisisaverylongstringtotestthealgorithm\", k = 6",
        "output": "sisihtaverylrtsgnoingtotehttsealgorimht"
      },
      {
        "input": "s = \"abcdefghij\", k = 3",
        "output": "cbadefihgj"
      },
      {
        "input": "s = \"onemoretest\", k = 15",
        "output": "tseteromeno"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 3",
        "output": "cbadefihgjklonmpqrutsvwxzy"
      },
      {
        "input": "s = \"quickbrownfoxjumpsoverthelazydog\", k = 8",
        "output": "orbkciuqwnfoxjumhtrevospelazydog"
      },
      {
        "input": "s = \"reverseeverytwochars\", k = 2",
        "output": "ervesreeevrywtocahrs"
      },
      {
        "input": "s = \"thisisaverylongstringthatweneedtoreversethosegmentscorrectly\", k = 8",
        "output": "vasisihterylongsahtgnirttweneedtesreverothosegmeerrocstnctly"
      },
      {
        "input": "s = \"abcde\", k = 1",
        "output": "abcde"
      },
      {
        "input": "s = \"aaaaaabbbbbbcccccc\", k = 6",
        "output": "aaaaaabbbbbbcccccc"
      },
      {
        "input": "s = \"abcdefghij\", k = 20",
        "output": "jihgfedcba"
      },
      {
        "input": "s = \"partialreverse\", k = 7",
        "output": "laitrapreverse"
      },
      {
        "input": "s = \"abcdef\", k = 1",
        "output": "abcdef"
      },
      {
        "input": "s = \"abcdefghij\", k = 1",
        "output": "abcdefghij"
      },
      {
        "input": "s = \"abcdefgh\", k = 8",
        "output": "hgfedcba"
      },
      {
        "input": "s = \"a\", k = 10",
        "output": "a"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", k = 4",
        "output": "wxyzvutsopqrnmlkghijfedcab"
      },
      {
        "input": "s = \"abcdefghij\", k = 6",
        "output": "fedcbaghij"
      },
      {
        "input": "s = \"thisisaverylongstringthatwilltestthefunctiontoseehowitbehaves\", k = 15",
        "output": "gnolyrevasisihtstringthatwillttnoitcnufehttseoseehowitbehaves"
      },
      {
        "input": "s = \"shortstring\", k = 15",
        "output": "gnirtstrohs"
      },
      {
        "input": "s = \"thisisaverylongstringthatweneedtotest\", k = 7",
        "output": "asisihtverylongnirtsgthatwenetotdeest"
      },
      {
        "input": "s = \"aaaaabbbbbaaaaabbbbb\", k = 5",
        "output": "aaaaabbbbbaaaaabbbbb"
      },
      {
        "input": "s = \"ababababababababababababab\", k = 2",
        "output": "baabbaabbaabbaabbaabbaabba"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", k = 1",
        "output": "abcdefghijklmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abcdefghijabcdefghij\", k = 7",
        "output": "gfedcbahijabcdjihgfe"
      },
      {
        "input": "s = \"abcdefghijk\", k = 1",
        "output": "abcdefghijk"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", k = 3",
        "output": "baabcceddeffhgghiikjjkllnmmnooqppqrrtsstuuwvvwxxzyyz"
      },
      {
        "input": "s = \"onetwothreefourfive\", k = 1",
        "output": "onetwothreefourfive"
      },
      {
        "input": "s = \"ab\", k = 2",
        "output": "ba"
      },
      {
        "input": "s = \"pythonprogramminglanguage\", k = 1",
        "output": "pythonprogramminglanguage"
      },
      {
        "input": "s = \"one\", k = 10",
        "output": "eno"
      },
      {
        "input": "s = \"abcdabcdabcd\", k = 2",
        "output": "bacdbacdbacd"
      },
      {
        "input": "s = \"thisisaverylongstringtocheckthebehaviorofthefunction\", k = 8",
        "output": "vasisihterylongscotgnirthecktheboroivahefthefuncnoit"
      },
      {
        "input": "s = \"letsreverseeveryothersegment\", k = 6",
        "output": "erstelverseetoyrevhersegtnem"
      },
      {
        "input": "s = \"abababababababab\", k = 2",
        "output": "baabbaabbaabbaab"
      },
      {
        "input": "s = \"abcdefghijabcdefghijabcdefghij\", k = 12",
        "output": "bajihgfedcbacdefghijabcdjihgfe"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwx\", k = 1",
        "output": "abcdefghijklmnopqrstuvwx"
      },
      {
        "input": "s = \"ab\", k = 1",
        "output": "ab"
      },
      {
        "input": "s = \"abcdefghijklm\", k = 1",
        "output": "abcdefghijklm"
      },
      {
        "input": "s = \"twowords\", k = 2",
        "output": "wtowrods"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvw\", k = 1",
        "output": "abcdefghijklmnopqrstuvw"
      },
      {
        "input": "s = \"reverseeveryotherblock\", k = 7",
        "output": "esrevereveryotcolbrehk"
      },
      {
        "input": "s = \"zyxwvutsrqponmlkjihgfedcba\", k = 26",
        "output": "abcdefghijklmnopqrstuvwxyz"
      }
    ]
  },
  {
    "id": 1474,
    "difficulty": "Easy",
    "tags": [
      "Linked List"
    ],
    "problemDescription": "You are given the head of a linked list and two integers m and n.\nTraverse the linked list and remove some nodes in the following way:\n\nStart with the head as the current node.\nKeep the first m nodes starting with the current node.\nRemove the next n nodes\nKeep repeating steps 2 and 3 until you reach the end of the list.\n\nReturn the head of the modified list after removing the mentioned nodes.\n\u00a0\nExample 1:\n\n\nInput: head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n = 3\nOutput: [1,2,6,7,11,12]\nExplanation: Keep the first (m = 2) nodes starting from the head of the linked List  (1 ->2) show in black nodes.\nDelete the next (n = 3) nodes (3 -> 4 -> 5) show in read nodes.\nContinue with the same procedure until reaching the tail of the Linked List.\nHead of the linked list after removing nodes is returned.\n\nExample 2:\n\n\nInput: head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3\nOutput: [1,5,9]\nExplanation: Head of linked list after removing nodes is returned.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [1, 104].\n1 <= Node.val <= 106\n1 <= m, n <= 1000\n\n\u00a0\nFollow up: Could you solve this problem by modifying the list in-place?\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteNodes(self, head: Optional[ListNode], m: int, n: int) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n = 3",
        "output": "[1, 2, 6, 7, 11, 12]"
      },
      {
        "input": "head = [1,2], m = 1, n = 1",
        "output": "[1]"
      },
      {
        "input": "head = [1], m = 0, n = 1",
        "output": "[1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], m = 3, n = 1",
        "output": "[1, 2, 3, 5, 6, 7, 9, 10]"
      },
      {
        "input": "head = [1,2,3,4,5], m = 5, n = 0",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [1], m = 1, n = 0",
        "output": "[1]"
      },
      {
        "input": "head = [1], m = 1, n = 1",
        "output": "[1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9], m = 3, n = 2",
        "output": "[1, 2, 3, 6, 7, 8]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], m = 2, n = 2",
        "output": "[1, 2, 5, 6, 9, 10]"
      },
      {
        "input": "head = [1,2,3,4,5], m = 0, n = 5",
        "output": "[1]"
      },
      {
        "input": "head = [1,2], m = 1, n = 0",
        "output": "[1, 2]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], m = 5, n = 2",
        "output": "[1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 15]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], m = 0, n = 1",
        "output": "[1, 3, 5, 7, 9]"
      },
      {
        "input": "head = [1,2,3,4,5], m = 2, n = 2",
        "output": "[1, 2, 5]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3",
        "output": "[1, 5, 9]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9], m = 3, n = 1",
        "output": "[1, 2, 3, 5, 6, 7, 9]"
      },
      {
        "input": "head = [1,2,3,4,5], m = 1, n = 1",
        "output": "[1, 3, 5]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], m = 10, n = 0",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24], m = 4, n = 4",
        "output": "[5, 6, 7, 8, 13, 14, 15, 16, 21, 22, 23, 24]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], m = 7, n = 2",
        "output": "[1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], m = 5, n = 5",
        "output": "[1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 21, 22, 23, 24, 25]"
      },
      {
        "input": "head = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199], m = 5, n = 3",
        "output": "[2, 3, 5, 7, 11, 23, 29, 31, 37, 41, 59, 61, 67, 71, 73, 97, 101, 103, 107, 109, 137, 139, 149, 151, 157, 179, 181, 191, 193, 197]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000], m = 6, n = 1",
        "output": "[100, 200, 300, 400, 500, 600, 800, 900, 1000, 1100, 1200, 1300, 1500, 1600, 1700, 1800, 1900, 2000]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], m = 2, n = 4",
        "output": "[1, 2, 7, 8, 13, 14, 19, 20, 25, 26, 31, 32, 37, 38, 43, 44, 49, 50]"
      },
      {
        "input": "head = [11,22,33,44,55,66,77,88,99,110,121,132,143,154,165,176,187,198,209], m = 7, n = 4",
        "output": "[11, 22, 33, 44, 55, 66, 77, 132, 143, 154, 165, 176, 187, 198]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], m = 10, n = 10",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], m = 2, n = 4",
        "output": "[10, 20, 70, 80, 130, 140]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1], m = 1, n = 2",
        "output": "[9, 6, 3]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], m = 6, n = 3",
        "output": "[1, 3, 5, 7, 9, 11, 19, 21, 23, 25, 27, 29, 37, 39, 41, 43, 45, 47, 55, 57, 59]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], m = 10, n = 5",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [9,18,27,36,45,54,63,72,81,90,99,108,117,126,135], m = 1, n = 2",
        "output": "[9, 36, 63, 90, 117]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], m = 4, n = 5",
        "output": "[5, 10, 15, 20, 50, 55, 60, 65, 95, 100]"
      },
      {
        "input": "head = [7,14,21,28,35,42,49,56,63,70,77,84,91,98], m = 5, n = 3",
        "output": "[7, 14, 21, 28, 35, 63, 70, 77, 84, 91]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500], m = 7, n = 6",
        "output": "[100, 200, 300, 400, 500, 600, 700, 1400, 1500]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], m = 3, n = 2",
        "output": "[1, 2, 3, 6, 7, 8, 11, 12, 13]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500], m = 1, n = 2",
        "output": "[100, 400, 700, 1000, 1300]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500], m = 6, n = 3",
        "output": "[100, 200, 300, 400, 500, 600, 1000, 1100, 1200, 1300, 1400, 1500]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99], m = 5, n = 3",
        "output": "[1, 3, 5, 7, 9, 17, 19, 21, 23, 25, 33, 35, 37, 39, 41, 49, 51, 53, 55, 57, 65, 67, 69, 71, 73, 81, 83, 85, 87, 89, 97, 99]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], m = 2, n = 1",
        "output": "[1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1], m = 2, n = 2",
        "output": "[9, 8, 5, 4, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 4, n = 5",
        "output": "[1, 2, 3, 4, 10, 11, 12, 13, 19, 20]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], m = 4, n = 1",
        "output": "[10, 20, 30, 40, 60, 70, 80, 90]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], m = 10, n = 5",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45], m = 7, n = 5",
        "output": "[1, 3, 5, 7, 9, 11, 13, 25, 27, 29, 31, 33, 35, 37]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], m = 4, n = 6",
        "output": "[1, 2, 3, 4, 11, 12, 13, 14, 21, 22, 23, 24]"
      },
      {
        "input": "head = [13,26,39,52,65,78,91,104,117,130,143,156,169,182,195,208,221,234,247,260,273,286,299], m = 9, n = 6",
        "output": "[13, 26, 39, 52, 65, 78, 91, 104, 117, 208, 221, 234, 247, 260, 273, 286, 299]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1], m = 2, n = 1",
        "output": "[9, 8, 6, 5, 3, 2]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], m = 1, n = 2",
        "output": "[1, 4, 7, 10, 13, 16, 19, 22, 25, 28]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 5, n = 5",
        "output": "[1, 2, 3, 4, 5, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99], m = 1, n = 1",
        "output": "[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], m = 6, n = 3",
        "output": "[5, 10, 15, 20, 25, 30, 50, 55, 60, 65, 70, 75, 95, 100]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], m = 5, n = 5",
        "output": "[10, 20, 30, 40, 50, 110, 120, 130, 140, 150]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], m = 3, n = 2",
        "output": "[1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18, 21, 22, 23]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 3, n = 4",
        "output": "[1, 2, 3, 8, 9, 10, 15, 16, 17]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], m = 1, n = 4",
        "output": "[2, 12, 22, 32]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000], m = 6, n = 3",
        "output": "[100, 200, 300, 400, 500, 600, 1000, 1100, 1200, 1300, 1400, 1500, 1900, 2000]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 0, n = 5",
        "output": "[1, 7, 13, 19]"
      },
      {
        "input": "head = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], m = 4, n = 5",
        "output": "[5, 6, 7, 8, 14, 15, 16, 17, 23, 24, 25, 26]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50], m = 4, n = 1",
        "output": "[5, 10, 15, 20, 30, 35, 40, 45]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], m = 2, n = 3",
        "output": "[1, 3, 11, 13, 21, 23, 31, 33]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], m = 2, n = 3",
        "output": "[1, 2, 6, 7, 11, 12, 16, 17, 21, 22, 26, 27, 31, 32, 36, 37]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90], m = 2, n = 2",
        "output": "[10, 20, 50, 60, 90]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], m = 7, n = 1",
        "output": "[1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], m = 3, n = 7",
        "output": "[1, 2, 3, 11, 12, 13, 21, 22, 23, 31, 32, 33]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], m = 5, n = 2",
        "output": "[1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 22, 23, 24, 25]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], m = 4, n = 2",
        "output": "[10, 20, 30, 40, 70, 80, 90, 100, 130, 140, 150]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], m = 1, n = 1",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]"
      },
      {
        "input": "head = [9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180,189,198,207,216,225], m = 7, n = 5",
        "output": "[9, 18, 27, 36, 45, 54, 63, 117, 126, 135, 144, 153, 162, 171, 225]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100], m = 3, n = 1",
        "output": "[2, 4, 6, 10, 12, 14, 18, 20, 22, 26, 28, 30, 34, 36, 38, 42, 44, 46, 50, 52, 54, 58, 60, 62, 66, 68, 70, 74, 76, 78, 82, 84, 86, 90, 92, 94, 98, 100]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60], m = 4, n = 2",
        "output": "[5, 10, 15, 20, 35, 40, 45, 50]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], m = 5, n = 4",
        "output": "[2, 4, 6, 8, 10, 20, 22, 24, 26, 28]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], m = 2, n = 5",
        "output": "[2, 4, 16, 18, 30, 32]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], m = 7, n = 3",
        "output": "[5, 10, 15, 20, 25, 30, 35, 55, 60, 65, 70, 75, 80, 85]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], m = 2, n = 5",
        "output": "[1, 2, 8, 9, 15, 16, 22, 23]"
      },
      {
        "input": "head = [9,18,27,36,45,54,63,72,81,90,99,108,117,126,135,144,153,162,171,180], m = 3, n = 5",
        "output": "[9, 18, 27, 81, 90, 99, 153, 162, 171]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 2, n = 4",
        "output": "[1, 2, 7, 8, 13, 14, 19, 20]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500], m = 6, n = 2",
        "output": "[100, 200, 300, 400, 500, 600, 900, 1000, 1100, 1200, 1300, 1400]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], m = 5, n = 3",
        "output": "[5, 10, 15, 20, 25, 45, 50, 55, 60, 65, 85, 90, 95, 100]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49], m = 1, n = 2",
        "output": "[1, 7, 13, 19, 25, 31, 37, 43, 49]"
      },
      {
        "input": "head = [7,14,21,28,35,42,49,56,63,70,77,84,91,98,105], m = 3, n = 3",
        "output": "[7, 14, 21, 49, 56, 63, 91, 98, 105]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500], m = 6, n = 4",
        "output": "[100, 200, 300, 400, 500, 600, 1100, 1200, 1300, 1400, 1500]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59], m = 5, n = 2",
        "output": "[1, 3, 5, 7, 9, 15, 17, 19, 21, 23, 29, 31, 33, 35, 37, 43, 45, 47, 49, 51, 57, 59]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], m = 10, n = 5",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 3, n = 2",
        "output": "[1, 2, 3, 6, 7, 8, 11, 12, 13, 16, 17, 18]"
      },
      {
        "input": "head = [42], m = 1, n = 1",
        "output": "[42]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], m = 1, n = 1",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], m = 10, n = 10",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [14,28,42,56,70,84,98,112,126,140,154,168,182,196,210,224,238,252,266,280,294,308,322,336,350], m = 10, n = 7",
        "output": "[14, 28, 42, 56, 70, 84, 98, 112, 126, 140, 252, 266, 280, 294, 308, 322, 336, 350]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], m = 3, n = 4",
        "output": "[1, 3, 5, 15, 17, 19, 29, 31, 33]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60], m = 7, n = 2",
        "output": "[2, 4, 6, 8, 10, 12, 14, 20, 22, 24, 26, 28, 30, 32, 38, 40, 42, 44, 46, 48, 50, 56, 58, 60]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150], m = 5, n = 2",
        "output": "[10, 20, 30, 40, 50, 80, 90, 100, 110, 120, 150]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60], m = 3, n = 4",
        "output": "[2, 4, 6, 16, 18, 20, 30, 32, 34, 44, 46, 48, 58, 60]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45], m = 6, n = 5",
        "output": "[1, 3, 5, 7, 9, 11, 23, 25, 27, 29, 31, 33, 45]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], m = 5, n = 5",
        "output": "[1, 3, 5, 7, 9, 21, 23, 25, 27, 29]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], m = 1, n = 2",
        "output": "[2, 8, 14, 20, 26, 32, 38]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], m = 2, n = 4",
        "output": "[1, 2, 7, 8, 13, 14]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], m = 1, n = 2",
        "output": "[10, 40, 70, 100, 130, 160, 190]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], m = 9, n = 5",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29, 30]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75], m = 4, n = 3",
        "output": "[5, 10, 15, 20, 40, 45, 50, 55, 75]"
      },
      {
        "input": "head = [12,24,36,48,60,72,84,96,108,120,132,144,156,168,180,192,204,216,228,240], m = 8, n = 5",
        "output": "[12, 24, 36, 48, 60, 72, 84, 96, 168, 180, 192, 204, 216, 228, 240]"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1], m = 1, n = 1",
        "output": "[9, 7, 5, 3, 1]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], m = 2, n = 2",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000], m = 5, n = 5",
        "output": "[100, 200, 300, 400, 500]"
      },
      {
        "input": "head = [5,15,25,35,45,55,65,75,85,95,105,115], m = 2, n = 4",
        "output": "[5, 15, 65, 75]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50], m = 6, n = 6",
        "output": "[2, 4, 6, 8, 10, 12, 26, 28, 30, 32, 34, 36, 50]"
      }
    ]
  },
  {
    "id": 501,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\nIf the tree has more than one mode, return them in any order.\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n\u00a0\nExample 1:\n\n\nInput: root = [1,null,2,2]\nOutput: [2]\n\nExample 2:\n\nInput: root = [0]\nOutput: [0]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-105 <= Node.val <= 105\n\n\u00a0\nFollow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findMode(self, root: Optional[TreeNode]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "root = [5,3,7,2,4,6,8,1,null,null,null,null,null,null,9]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "root = [5,2,5,null,null,5,5,5]",
        "output": "[5]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "root = [3,1,4,1,3,null,5]",
        "output": "[1, 3]"
      },
      {
        "input": "root = [2,1,2]",
        "output": "[2]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "root = [2,2,2]",
        "output": "[2]"
      },
      {
        "input": "root = [1,null,1,null,1,null,1]",
        "output": "[1]"
      },
      {
        "input": "root = [0]",
        "output": "[0]"
      },
      {
        "input": "root = [5,2,5,1,3,5,7]",
        "output": "[5]"
      },
      {
        "input": "root = [1,null,3,2,4,null,5,null,null,3,4]",
        "output": "[1, 2, 3, 5, 4, 3, 4]"
      },
      {
        "input": "root = [1,1,2,2,3]",
        "output": "[2, 1, 3, 1, 2]"
      },
      {
        "input": "root = [2,1,2,1,2]",
        "output": "[2]"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,2,6]",
        "output": "[2, 6]"
      },
      {
        "input": "root = [1,1,2,2,3,3]",
        "output": "[2, 1, 3, 1, 3, 2]"
      },
      {
        "input": "root = [1,1,2,2,3,3,4,4]",
        "output": "[4, 2, 1, 3, 1, 3, 2, 4]"
      },
      {
        "input": "root = [1,null,2,2]",
        "output": "[2]"
      },
      {
        "input": "root = [1,null,2,null,null,3,3]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [1,1,2,2,3,3,3]",
        "output": "[2, 1, 3, 1, 3, 2, 3]"
      },
      {
        "input": "root = [1,null,2,null,3]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "root = [50,25,75,10,35,55,85,5,15,30,40,50,60,70,90,3,7,12,18,28,32,42,48,58,62,72,82,88,93,97]",
        "output": "[3, 5, 7, 10, 12, 15, 18, 25, 28, 30, 32, 35, 42, 40, 48, 50, 58, 50, 62, 55, 72, 60, 82, 75, 88, 70, 93, 85, 97, 90]"
      },
      {
        "input": "root = [7,3,15,null,null,9,20,null,null,10,18,12,17,16,19]",
        "output": "[3, 7, 9, 15, 12, 10, 17, 20, 16, 18, 19]"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,12,18,23,27,32,37,42,3,7,11,13,16,19,22,24,26,28,31,33,36,38,41,43,1,4,6,8,9,14,15,17,21,29,34,35,39,40,44,45]",
        "output": "[1, 3, 4, 5, 6, 7, 8, 10, 9, 11, 14, 12, 15, 13, 17, 15, 21, 16, 29, 18, 34, 19, 35, 20, 39, 22, 40, 23, 44, 24, 45, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "root = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "[9, 5, 9, 3, 10, 5, 10, 2, 6, 3, 6, 1, 7, 4, 7, 2, 8, 4, 8]"
      },
      {
        "input": "root = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[5]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,23,27,32,37,1,3,6,8,11,13,17,19,22,24,26,28,31,33,36,38]",
        "output": "[1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38]"
      },
      {
        "input": "root = [7,3,10,2,5,9,12,1,4,6,8,11,13,null,null,null,null,null,null,null,null,null,null]",
        "output": "[1, 2, 4, 3, 6, 5, 8, 7, 11, 9, 13, 10, 12]"
      },
      {
        "input": "root = [50,20,60,10,30,55,70,5,15,25,35,53,57,65,75,3,7,13,17,23,27,33,37,52,54,56,58,63,67,72,77,4,6,8,12,14,16,18,22,24,26,28,32,34,36,38,51,59,61,69,71,73,78,1,9,11,19,21,29,31,39,49,62,64,68,74,76,79,0]",
        "output": "[64, 4, 68, 3, 74, 6, 76, 5, 79, 8, 0, 7, 12, 10, 14, 13, 16, 15, 18, 17, 22, 20, 24, 23, 26, 25, 28, 27, 32, 30, 34, 33, 36, 35, 38, 37, 51, 50, 59, 52, 61, 53, 69, 54, 71, 55, 73, 56, 78, 57, 1, 58, 9, 60, 11, 63, 19, 65, 21, 67, 29, 70, 31, 72, 39, 75, 49, 77, 62]"
      },
      {
        "input": "root = [2,0,3,null,1,null,null,0,1]",
        "output": "[0, 1]"
      },
      {
        "input": "root = [1,2,3,2,3,3,3,2,2,2,2,3,3,3,3,3,3,3,3,3]",
        "output": "[3]"
      },
      {
        "input": "root = [7,3,15,null,null,9,20,8,10,11,16,17,25,23,28,22,24,27,29,26]",
        "output": "[3, 7, 26, 17, 8, 25, 9, 23, 10, 28, 15, 22, 11, 24, 20, 27, 16, 29]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37,1,4,6,8,12,14,16,18,22,24,26,28,32,34,36,38]",
        "output": "[1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38]"
      },
      {
        "input": "root = [2,1,3,null,null,1,3,null,null,1,3]",
        "output": "[3]"
      },
      {
        "input": "root = [15,10,20,8,12,16,25,7,9,11,13,14,17,18,22,21,23,24,26]",
        "output": "[21, 7, 23, 8, 24, 9, 26, 10, 11, 12, 13, 15, 14, 16, 17, 20, 18, 25, 22]"
      },
      {
        "input": "root = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "[7]"
      },
      {
        "input": "root = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,10,10]",
        "output": "[9, 5, 9, 3, 10, 5, 10, 2, 10, 6, 10, 3, 10, 6, 1, 7, 4, 7, 2, 8, 4, 8]"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,2,6,null,null,null,null,null,10]",
        "output": "[2, 6]"
      },
      {
        "input": "root = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[5]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,4,6,8,null,null,2,null,null,16,19]",
        "output": "[2, 1, 3, 4, 16, 5, 19, 6, 7, 8, 10, 15, 18]"
      },
      {
        "input": "root = [1,1,2,1,1,2,2,1,1,2,2,2,2,2,2]",
        "output": "[2]"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,10,25,35,45,55,65,75,85]",
        "output": "[10, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85]"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "root = [5,3,6,2,4,null,null,2,4,4,4,4,4]",
        "output": "[4]"
      },
      {
        "input": "root = [8,3,10,1,6,null,14,null,null,4,7,13]",
        "output": "[1, 3, 4, 6, 7, 8, 10, 13, 14]"
      },
      {
        "input": "root = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "[2]"
      },
      {
        "input": "root = [8,5,10,3,7,9,12,1,4,6,8,11,13,null,null,null,null,null,null,null,null,null,null]",
        "output": "[8]"
      },
      {
        "input": "root = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "[2]"
      },
      {
        "input": "root = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[5]"
      },
      {
        "input": "root = [40,20,60,10,30,50,70,5,15,25,35,45,55,65,75,1,9,11,19,21,29,31,39,41,49,51,59,61,69,71,79]",
        "output": "[1, 5, 9, 10, 11, 15, 19, 20, 21, 25, 29, 30, 31, 35, 39, 40, 41, 45, 49, 50, 51, 55, 59, 60, 61, 65, 69, 70, 71, 75, 79]"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "root = [1,1,2,1,1,null,2,1,1,null,null,2,2]",
        "output": "[1]"
      },
      {
        "input": "root = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1]"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,4,6,8,12,14,17,19,2,9,11,16,20]",
        "output": "[2, 1, 9, 3, 11, 4, 16, 5, 20, 6, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19]"
      },
      {
        "input": "root = [5,1,5,null,2,null,5]",
        "output": "[5]"
      },
      {
        "input": "root = [15,10,20,5,12,17,25,2,6,8,11,14,16,18,22,1,3,4,7,9,null,null,null,null,null,13]",
        "output": "[1, 2, 3, 5, 4, 6, 7, 10, 9, 8, 12, 11, 15, 14, 17, 13, 16, 20, 18, 25, 22]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,4,6,8,null,null,null,null,12,17,16,19,20,21,22]",
        "output": "[1, 3, 22, 12, 4, 17, 5, 16, 6, 19, 7, 20, 8, 21, 10, 15, 18]"
      },
      {
        "input": "root = [8,4,10,2,6,9,12,1,3,5,7,11,13]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 13, 10, 12]"
      },
      {
        "input": "root = [4,2,6,1,3,5,7,1,2,3,4,5,6,7,8]",
        "output": "[1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "root = [4,2,6,1,3,5,7,0,1,1,1,1,1,1,1]",
        "output": "[1]"
      },
      {
        "input": "root = [4,2,5,2,3,4,6,2,3,null,null,4,5]",
        "output": "[4]"
      },
      {
        "input": "root = [7,3,15,null,null,9,20,null,null,8,10,16,21,17,18,19]",
        "output": "[3, 7, 9, 15, 19, 16, 8, 21, 20, 17, 10, 18]"
      },
      {
        "input": "root = [25,10,30,5,20,null,null,3,7,15,22,null,null,13,17,19,21]",
        "output": "[3, 5, 13, 7, 17, 10, 19, 15, 21, 20, 22, 25, 30]"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,4,6,8,11,14,16,19,0,2,null,null,null,null,null,null,null,null,9,12,17,20]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 9, 14, 12, 15, 17, 16, 20, 18, 19]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,null,6,8,14,16,19,12,13,17,15,11]",
        "output": "[16, 1, 19, 3, 5, 7, 12, 6, 13, 10, 15, 17, 8, 15, 18, 11, 14]"
      },
      {
        "input": "root = [1,1,2,1,1,2,2,1,1,1,1,2,2,2,2]",
        "output": "[1]"
      },
      {
        "input": "root = [1,1,2,2,3,3,4,4,4,4,5,5,6,6,6,6,6,6,6,6,6]",
        "output": "[6, 4, 6, 2, 6, 4, 6, 1, 6, 4, 6, 3, 5, 1, 5, 3, 6, 2, 6, 4, 6]"
      },
      {
        "input": "root = [4,2,6,1,3,5,7,0,1,4,6,8,9,2,5,3,5,6,7,8,9]",
        "output": "[3, 0, 5, 1, 6, 1, 7, 2, 8, 4, 9, 3, 6, 4, 8, 5, 9, 6, 2, 7, 5]"
      },
      {
        "input": "root = [1,1,1,1,1,null,null,null,null,null,null]",
        "output": "[1]"
      },
      {
        "input": "root = [7,3,15,2,5,10,17,1,4,6,8,12,16,14,18]",
        "output": "[1, 2, 4, 3, 6, 5, 8, 7, 12, 10, 16, 15, 14, 17, 18]"
      },
      {
        "input": "root = [1,1,2,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,7,null,12,18,23,28,33,null,3,6,9,11,13,16,17,19,22,24,26,29,32,34,36]",
        "output": "[1, 34, 3, 36, 5, 6, 7, 9, 10, 15, 11, 12, 13, 20, 16, 18, 17, 25, 19, 23, 22, 30, 24, 28, 26, 35, 29, 33, 32]"
      },
      {
        "input": "root = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1]"
      },
      {
        "input": "root = [15,10,20,8,12,16,25,6,9,11,13,14,18,22,30,4,7,5,17,19,21,23,24,26,27,28,29]",
        "output": "[4, 6, 7, 8, 5, 9, 17, 10, 19, 11, 21, 12, 23, 13, 24, 15, 26, 14, 27, 16, 28, 18, 29, 20, 22, 25, 30]"
      },
      {
        "input": "root = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[5]"
      },
      {
        "input": "root = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "[7]"
      },
      {
        "input": "root = [7,4,8,2,6,7,9,1,null,3,5,7,8,null,null,null,null,10]",
        "output": "[7]"
      },
      {
        "input": "root = [10,5,15,3,7,12,18,1,4,6,8,11,13,17,19]",
        "output": "[1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19]"
      },
      {
        "input": "root = [1,1,2,1,2,2,3,1,2,2,3,2,3,2,3]",
        "output": "[1, 2, 2, 2, 3]"
      },
      {
        "input": "root = [5,3,6,3,5,6,7,3,3,5,5,6,6,6,7,3,3,5,5,5,6,6,6,7,3,3,5,5,5,6,6,6,7]",
        "output": "[3]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,6,11,17,22,27,32,38,0,3,7,8,12,14,18,21,23,26,28,31,33,36,39,4,9,10,13,16,19,24,29,30,34,37,40,2,5,12,14,18,20,23,26,28,31,33,36,39]",
        "output": "[20, 23, 26]"
      },
      {
        "input": "root = [1,1,2,1,1,1,3,1,1,1,1,1,1,1,1]",
        "output": "[1]"
      },
      {
        "input": "root = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8]",
        "output": "[8, 6, 8, 4, 8, 6, 8, 3, 8, 6, 4, 6, 2, 6, 4, 6, 3, 7, 5, 7, 1, 7, 5, 7, 3, 7, 5, 7, 2, 7, 5, 8, 4, 8, 5, 8]"
      },
      {
        "input": "root = [1,1,2,1,2,2,3,1,2,2,3,3,4,3,3]",
        "output": "[3]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6]",
        "output": "[1, 3, 5, 6, 7, 10, 15, 18]"
      },
      {
        "input": "root = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1]"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,4,8,12,14,17,19]",
        "output": "[1, 3, 5, 4, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19]"
      },
      {
        "input": "root = [6,3,6,2,4,null,7,1,null,3,5,null,null,8]",
        "output": "[3, 6]"
      }
    ]
  },
  {
    "id": 997,
    "difficulty": "Easy",
    "tags": [
      "Graph",
      "Array",
      "Hash Table"
    ],
    "problemDescription": "In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\n\nThe town judge trusts nobody.\nEverybody (except for the town judge) trusts the town judge.\nThere is exactly one person that satisfies properties 1 and 2.\n\nYou are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist.\nReturn the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.\n\u00a0\nExample 1:\n\nInput: n = 2, trust = [[1,2]]\nOutput: 2\n\nExample 2:\n\nInput: n = 3, trust = [[1,3],[2,3]]\nOutput: 3\n\nExample 3:\n\nInput: n = 3, trust = [[1,3],[2,3],[3,1]]\nOutput: -1\n\n\u00a0\nConstraints:\n\n1 <= n <= 1000\n0 <= trust.length <= 104\ntrust[i].length == 2\nAll the pairs of trust are unique.\nai != bi\n1 <= ai, bi <= n\n\n",
    "starterCode": "class Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]",
        "output": "3"
      },
      {
        "input": "n = 1, trust = []",
        "output": "1"
      },
      {
        "input": "n = 5, trust = [[1,2],[2,3],[3,4],[4,5],[5,1]]",
        "output": "-1"
      },
      {
        "input": "n = 3, trust = [[1,3],[2,3],[3,1]]",
        "output": "-1"
      },
      {
        "input": "n = 4, trust = [[1,2],[1,3],[1,4]]",
        "output": "-1"
      },
      {
        "input": "n = 3, trust = [[1,3],[2,3]]",
        "output": "3"
      },
      {
        "input": "n = 2, trust = [[1,2]]",
        "output": "2"
      },
      {
        "input": "n = 3, trust = [[1,2],[2,1],[1,3],[3,1]]",
        "output": "-1"
      },
      {
        "input": "n = 8, trust = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,1]]",
        "output": "-1"
      },
      {
        "input": "n = 5, trust = [[1,4],[2,4],[3,4],[4,5],[5,1]]",
        "output": "-1"
      },
      {
        "input": "n = 8, trust = [[1,3],[2,3],[4,3],[5,3],[6,3],[7,3],[8,3]]",
        "output": "3"
      },
      {
        "input": "n = 15, trust = [[1,15],[2,15],[3,15],[4,15],[5,15],[6,15],[7,15],[8,15],[9,15],[10,15],[11,15],[12,15],[13,15],[14,15]]",
        "output": "15"
      },
      {
        "input": "n = 6, trust = [[1,6],[2,6],[3,6],[4,6],[5,6],[6,5]]",
        "output": "-1"
      },
      {
        "input": "n = 10, trust = [[1,3],[2,3],[3,5],[4,5],[5,7],[6,7],[7,9],[8,9],[9,10],[10,1]]",
        "output": "-1"
      },
      {
        "input": "n = 5, trust = [[1,4],[2,4],[3,4],[5,4]]",
        "output": "4"
      },
      {
        "input": "n = 8, trust = [[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8]]",
        "output": "8"
      },
      {
        "input": "n = 10, trust = [[1,5],[2,5],[3,5],[4,5],[6,5],[7,5],[8,5],[9,5],[10,5]]",
        "output": "5"
      },
      {
        "input": "n = 7, trust = [[1,7],[2,7],[3,7],[4,7],[5,7],[6,7]]",
        "output": "7"
      },
      {
        "input": "n = 5, trust = [[1,2],[1,3],[2,4],[2,5],[3,4],[3,5],[4,1],[4,2],[5,1],[5,3]]",
        "output": "-1"
      },
      {
        "input": "n = 11, trust = [[1,11],[2,11],[3,11],[4,11],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11]]",
        "output": "11"
      },
      {
        "input": "n = 5, trust = [[1,5],[2,5],[3,5],[4,5]]",
        "output": "5"
      },
      {
        "input": "n = 6, trust = [[1,4],[2,4],[3,4],[5,4],[6,4],[4,6]]",
        "output": "-1"
      },
      {
        "input": "n = 9, trust = [[1,3],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,1]]",
        "output": "-1"
      },
      {
        "input": "n = 13, trust = [[1,13],[2,13],[3,13],[4,13],[5,13],[6,13],[7,13],[8,13],[9,13],[10,13],[11,13],[12,13]]",
        "output": "13"
      },
      {
        "input": "n = 9, trust = [[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[8,7],[9,7]]",
        "output": "7"
      },
      {
        "input": "n = 6, trust = [[1,6],[2,6],[3,6],[4,6],[5,6],[6,1]]",
        "output": "-1"
      },
      {
        "input": "n = 7, trust = [[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[7,8]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "n = 9, trust = [[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,1]]",
        "output": "9"
      },
      {
        "input": "n = 6, trust = [[1,6],[2,6],[3,6],[4,6],[5,6],[1,2],[2,3],[3,4],[4,5],[5,1]]",
        "output": "6"
      },
      {
        "input": "n = 10, trust = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "10"
      },
      {
        "input": "n = 5, trust = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "-1"
      },
      {
        "input": "n = 6, trust = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,2]]",
        "output": "-1"
      },
      {
        "input": "n = 7, trust = [[1,4],[2,4],[3,4],[4,5],[5,6],[6,7],[7,1]]",
        "output": "-1"
      },
      {
        "input": "n = 10, trust = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1]]",
        "output": "-1"
      },
      {
        "input": "n = 5, trust = [[1,3],[2,3],[4,5],[5,4]]",
        "output": "-1"
      },
      {
        "input": "n = 7, trust = [[1,5],[2,5],[3,5],[4,5],[6,5],[7,5],[5,1]]",
        "output": "-1"
      },
      {
        "input": "n = 5, trust = [[1,3],[2,3],[4,3],[5,3],[1,5],[2,5],[4,5]]",
        "output": "3"
      },
      {
        "input": "n = 9, trust = [[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9],[9,1]]",
        "output": "-1"
      },
      {
        "input": "n = 10, trust = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10],[10,1]]",
        "output": "-1"
      },
      {
        "input": "n = 5, trust = [[1,4],[2,4],[3,4],[4,5],[5,4]]",
        "output": "-1"
      },
      {
        "input": "n = 10, trust = [[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[9,8],[10,8]]",
        "output": "8"
      },
      {
        "input": "n = 12, trust = [[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[10,12],[11,12],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,1]]",
        "output": "12"
      },
      {
        "input": "n = 12, trust = [[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[10,12],[11,12]]",
        "output": "12"
      },
      {
        "input": "n = 6, trust = [[1,3],[2,3],[3,1],[4,5],[5,4],[1,5],[2,6],[6,2],[3,4]]",
        "output": "-1"
      },
      {
        "input": "n = 8, trust = [[1,5],[2,5],[3,5],[4,5],[6,5],[7,5],[8,5],[5,8]]",
        "output": "-1"
      },
      {
        "input": "n = 10, trust = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "-1"
      },
      {
        "input": "n = 10, trust = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]]",
        "output": "-1"
      },
      {
        "input": "n = 10, trust = [[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9],[10,1]]",
        "output": "-1"
      },
      {
        "input": "n = 8, trust = [[1,5],[2,5],[3,5],[4,5],[6,5],[7,5],[8,5]]",
        "output": "5"
      },
      {
        "input": "n = 9, trust = [[1,2],[1,3],[2,3],[3,1],[4,5],[4,6],[5,6],[6,4],[7,8],[7,9],[8,9],[9,7]]",
        "output": "-1"
      },
      {
        "input": "n = 7, trust = [[1,4],[2,4],[3,4],[5,4],[6,4],[7,4]]",
        "output": "4"
      },
      {
        "input": "n = 8, trust = [[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[8,7]]",
        "output": "-1"
      },
      {
        "input": "n = 11, trust = [[1,11],[2,11],[3,11],[4,11],[5,11],[6,11],[7,11],[8,11],[9,11],[10,11],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,1]]",
        "output": "11"
      },
      {
        "input": "n = 12, trust = [[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[10,12],[11,12],[12,10]]",
        "output": "-1"
      },
      {
        "input": "n = 10, trust = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9]]",
        "output": "-1"
      },
      {
        "input": "n = 5, trust = [[1,2],[2,1],[3,4],[4,3]]",
        "output": "-1"
      },
      {
        "input": "n = 10, trust = [[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]]",
        "output": "1"
      },
      {
        "input": "n = 8, trust = [[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[8,7],[8,1]]",
        "output": "-1"
      },
      {
        "input": "n = 8, trust = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,1],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,2],[8,3]]",
        "output": "-1"
      },
      {
        "input": "n = 5, trust = [[1,2],[2,3],[3,4],[4,5],[5,1],[1,3],[2,4],[3,5],[4,1],[5,2]]",
        "output": "-1"
      },
      {
        "input": "n = 6, trust = [[1,2],[2,3],[3,4],[4,5],[5,6]]",
        "output": "-1"
      },
      {
        "input": "n = 9, trust = [[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9],[1,2],[2,1],[1,3],[3,1],[1,4],[4,1],[1,5],[5,1],[1,6],[6,1],[1,7],[7,1],[1,8],[8,1]]",
        "output": "9"
      },
      {
        "input": "n = 5, trust = [[1,3],[2,3],[4,3],[5,3]]",
        "output": "3"
      },
      {
        "input": "n = 20, trust = [[1,20],[2,20],[3,20],[4,20],[5,20],[6,20],[7,20],[8,20],[9,20],[10,20],[11,20],[12,20],[13,20],[14,20],[15,20],[16,20],[17,20],[18,20],[19,20],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,1]]",
        "output": "20"
      },
      {
        "input": "n = 10, trust = [[1,2],[3,4],[5,6],[7,8],[9,10],[2,3],[4,5],[6,7],[8,9],[1,10]]",
        "output": "-1"
      },
      {
        "input": "n = 5, trust = [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5]]",
        "output": "5"
      },
      {
        "input": "n = 6, trust = [[1,6],[2,6],[3,6],[4,6],[5,6]]",
        "output": "6"
      },
      {
        "input": "n = 8, trust = [[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,1]]",
        "output": "8"
      },
      {
        "input": "n = 7, trust = [[1,4],[2,4],[3,4],[5,4],[6,4],[1,5],[2,5],[3,5],[5,6],[6,7]]",
        "output": "-1"
      },
      {
        "input": "n = 6, trust = [[1,3],[2,3],[3,1],[3,4],[4,5],[5,6],[6,4]]",
        "output": "-1"
      },
      {
        "input": "n = 9, trust = [[1,9],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[8,9]]",
        "output": "9"
      },
      {
        "input": "n = 5, trust = [[1,2],[2,3],[3,1],[4,5],[5,4]]",
        "output": "-1"
      },
      {
        "input": "n = 7, trust = [[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[1,2],[2,3],[3,4],[4,5],[5,6],[6,1]]",
        "output": "7"
      },
      {
        "input": "n = 7, trust = [[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[7,1]]",
        "output": "-1"
      },
      {
        "input": "n = 6, trust = [[1,2],[2,3],[3,1],[4,5],[5,6]]",
        "output": "-1"
      },
      {
        "input": "n = 5, trust = [[1,3],[2,3],[3,1],[4,5],[5,4]]",
        "output": "-1"
      },
      {
        "input": "n = 8, trust = [[1,6],[2,6],[3,6],[4,6],[5,6],[7,6],[8,6]]",
        "output": "6"
      },
      {
        "input": "n = 12, trust = [[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[10,12],[11,12],[12,1]]",
        "output": "-1"
      },
      {
        "input": "n = 6, trust = [[1,6],[2,6],[3,6],[4,6],[5,6],[1,2],[2,1],[3,4],[4,3]]",
        "output": "6"
      },
      {
        "input": "n = 10, trust = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10]]",
        "output": "10"
      },
      {
        "input": "n = 10, trust = [[1,2],[3,4],[5,6],[7,8],[9,10]]",
        "output": "-1"
      },
      {
        "input": "n = 5, trust = [[1,5],[2,5],[3,5],[4,5],[5,1]]",
        "output": "-1"
      },
      {
        "input": "n = 100, trust = [[1,100],[2,100],[3,100],[4,100],[5,100],[6,100],[7,100],[8,100],[9,100],[10,100],[11,100],[12,100],[13,100],[14,100],[15,100],[16,100],[17,100],[18,100],[19,100],[20,100],[21,100],[22,100],[23,100],[24,100],[25,100],[26,100],[27,100],[28,100],[29,100],[30,100],[31,100],[32,100],[33,100],[34,100],[35,100],[36,100],[37,100],[38,100],[39,100],[40,100],[41,100],[42,100],[43,100],[44,100],[45,100],[46,100],[47,100],[48,100],[49,100],[50,100],[51,100],[52,100],[53,100],[54,100],[55,100],[56,100],[57,100],[58,100],[59,100],[60,100],[61,100],[62,100],[63,100],[64,100],[65,100],[66,100],[67,100],[68,100],[69,100],[70,100],[71,100],[72,100],[73,100],[74,100],[75,100],[76,100],[77,100],[78,100],[79,100],[80,100],[81,100],[82,100],[83,100],[84,100],[85,100],[86,100],[87,100],[88,100],[89,100],[90,100],[91,100],[92,100],[93,100],[94,100],[95,100],[96,100],[97,100],[98,100],[99,100]]",
        "output": "100"
      },
      {
        "input": "n = 6, trust = [[1,4],[2,4],[3,4],[5,4],[6,4]]",
        "output": "4"
      },
      {
        "input": "n = 7, trust = [[1,5],[2,5],[3,5],[4,5],[6,5],[7,5]]",
        "output": "5"
      },
      {
        "input": "n = 10, trust = [[1,5],[2,5],[3,5],[4,5],[6,5],[7,5],[8,5],[9,5],[1,10],[2,10],[3,10],[4,10]]",
        "output": "-1"
      },
      {
        "input": "n = 10, trust = [[1,3],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "-1"
      }
    ]
  },
  {
    "id": 3032,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Math",
      "Dynamic Programming"
    ],
    "problemDescription": "Given two positive integers a and b, return the count of numbers having\u00a0unique digits in the range [a, b] (inclusive).\n\u00a0\nExample 1:\n\nInput: a = 1, b = 20\nOutput: 19\nExplanation: All the numbers in the range [1, 20] have unique digits except 11. Hence, the answer is 19.\n\nExample 2:\n\nInput: a = 9, b = 19\nOutput: 10\nExplanation: All the numbers in the range [9, 19] have unique digits except 11. Hence, the answer is 10. \n\nExample 3:\n\nInput: a = 80, b = 120\nOutput: 27\nExplanation: There are 41 numbers in the range [80, 120], 27 of which have unique digits.\n\n\u00a0\nConstraints:\n\n1 <= a <= b <= 1000\n\n",
    "starterCode": "class Solution:\n    def numberCount(self, a: int, b: int) -> int:\n        ",
    "testCases": [
      {
        "input": "a = 789, b = 890",
        "output": "74"
      },
      {
        "input": "a = 300, b = 400",
        "output": "72"
      },
      {
        "input": "a = 100, b = 150",
        "output": "33"
      },
      {
        "input": "a = 100, b = 200",
        "output": "72"
      },
      {
        "input": "a = 50, b = 59",
        "output": "9"
      },
      {
        "input": "a = 9, b = 19",
        "output": "10"
      },
      {
        "input": "a = 750, b = 780",
        "output": "17"
      },
      {
        "input": "a = 1, b = 20",
        "output": "19"
      },
      {
        "input": "a = 333, b = 444",
        "output": "80"
      },
      {
        "input": "a = 100, b = 300",
        "output": "144"
      },
      {
        "input": "a = 450, b = 455",
        "output": "4"
      },
      {
        "input": "a = 1, b = 1000",
        "output": "738"
      },
      {
        "input": "a = 80, b = 120",
        "output": "27"
      },
      {
        "input": "a = 200, b = 300",
        "output": "72"
      },
      {
        "input": "a = 10, b = 100",
        "output": "81"
      },
      {
        "input": "a = 123, b = 150",
        "output": "24"
      },
      {
        "input": "a = 500, b = 600",
        "output": "72"
      },
      {
        "input": "a = 123, b = 456",
        "output": "244"
      },
      {
        "input": "a = 990, b = 1000",
        "output": "0"
      },
      {
        "input": "a = 234, b = 324",
        "output": "73"
      },
      {
        "input": "a = 890, b = 987",
        "output": "80"
      },
      {
        "input": "a = 900, b = 990",
        "output": "72"
      },
      {
        "input": "a = 99, b = 1000",
        "output": "648"
      },
      {
        "input": "a = 800, b = 899",
        "output": "72"
      },
      {
        "input": "a = 200, b = 500",
        "output": "216"
      },
      {
        "input": "a = 654, b = 678",
        "output": "11"
      },
      {
        "input": "a = 890, b = 899",
        "output": "8"
      },
      {
        "input": "a = 999, b = 1000",
        "output": "0"
      },
      {
        "input": "a = 100, b = 100",
        "output": "0"
      },
      {
        "input": "a = 567, b = 765",
        "output": "153"
      },
      {
        "input": "a = 345, b = 355",
        "output": "9"
      },
      {
        "input": "a = 300, b = 399",
        "output": "72"
      },
      {
        "input": "a = 345, b = 543",
        "output": "153"
      },
      {
        "input": "a = 1, b = 100",
        "output": "90"
      },
      {
        "input": "a = 50, b = 150",
        "output": "78"
      },
      {
        "input": "a = 100, b = 110",
        "output": "8"
      },
      {
        "input": "a = 400, b = 500",
        "output": "72"
      },
      {
        "input": "a = 111, b = 1111",
        "output": "696"
      },
      {
        "input": "a = 110, b = 120",
        "output": "1"
      },
      {
        "input": "a = 111, b = 111",
        "output": "0"
      },
      {
        "input": "a = 111, b = 222",
        "output": "80"
      },
      {
        "input": "a = 300, b = 333",
        "output": "24"
      },
      {
        "input": "a = 333, b = 666",
        "output": "240"
      },
      {
        "input": "a = 456, b = 654",
        "output": "153"
      },
      {
        "input": "a = 300, b = 303",
        "output": "2"
      },
      {
        "input": "a = 500, b = 550",
        "output": "40"
      },
      {
        "input": "a = 987, b = 1087",
        "output": "49"
      },
      {
        "input": "a = 987, b = 1023",
        "output": "2"
      },
      {
        "input": "a = 500, b = 599",
        "output": "72"
      },
      {
        "input": "a = 678, b = 876",
        "output": "153"
      },
      {
        "input": "a = 888, b = 899",
        "output": "8"
      },
      {
        "input": "a = 888, b = 999",
        "output": "80"
      },
      {
        "input": "a = 110, b = 110",
        "output": "0"
      },
      {
        "input": "a = 234, b = 432",
        "output": "153"
      },
      {
        "input": "a = 789, b = 987",
        "output": "153"
      },
      {
        "input": "a = 111, b = 123",
        "output": "2"
      },
      {
        "input": "a = 987, b = 999",
        "output": "1"
      },
      {
        "input": "a = 899, b = 999",
        "output": "72"
      },
      {
        "input": "a = 111, b = 999",
        "output": "640"
      },
      {
        "input": "a = 150, b = 350",
        "output": "145"
      },
      {
        "input": "a = 600, b = 699",
        "output": "72"
      },
      {
        "input": "a = 678, b = 789",
        "output": "82"
      },
      {
        "input": "a = 56, b = 560",
        "output": "369"
      },
      {
        "input": "a = 101, b = 1010",
        "output": "648"
      },
      {
        "input": "a = 600, b = 900",
        "output": "216"
      },
      {
        "input": "a = 400, b = 499",
        "output": "72"
      },
      {
        "input": "a = 400, b = 444",
        "output": "32"
      },
      {
        "input": "a = 99, b = 101",
        "output": "0"
      },
      {
        "input": "a = 444, b = 777",
        "output": "240"
      },
      {
        "input": "a = 123, b = 123",
        "output": "1"
      },
      {
        "input": "a = 200, b = 299",
        "output": "72"
      },
      {
        "input": "a = 700, b = 799",
        "output": "72"
      },
      {
        "input": "a = 123, b = 133",
        "output": "9"
      },
      {
        "input": "a = 1000, b = 1000",
        "output": "0"
      },
      {
        "input": "a = 1234, b = 1234",
        "output": "1"
      },
      {
        "input": "a = 345, b = 345",
        "output": "1"
      },
      {
        "input": "a = 100, b = 900",
        "output": "576"
      },
      {
        "input": "a = 123, b = 321",
        "output": "153"
      }
    ]
  },
  {
    "id": 455,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\nEach child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\u00a0\nExample 1:\n\nInput: g = [1,2,3], s = [1,1]\nOutput: 1\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n\nExample 2:\n\nInput: g = [1,2], s = [1,2,3]\nOutput: 2\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n\n\u00a0\nConstraints:\n\n1 <= g.length <= 3 * 104\n0 <= s.length <= 3 * 104\n1 <= g[i], s[j] <= 231 - 1\n\n\u00a0\nNote: This question is the same as  2410: Maximum Matching of Players With Trainers.\n",
    "starterCode": "class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "g = [1,2,3,4,5], s = [5,4,3,2,1]",
        "output": "5"
      },
      {
        "input": "g = [1,3,5], s = [2,4,6]",
        "output": "3"
      },
      {
        "input": "g = [3,3,3,3], s = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "g = [1,1,1,1], s = [1,1,1,1]",
        "output": "4"
      },
      {
        "input": "g = [1,2,3], s = [1,2,3,4]",
        "output": "3"
      },
      {
        "input": "g = [1,2,3,4,5], s = [1,2,3]",
        "output": "3"
      },
      {
        "input": "g = [5,5,5,5], s = [5,5,5,5]",
        "output": "4"
      },
      {
        "input": "g = [1,2], s = [1,2,3]",
        "output": "2"
      },
      {
        "input": "g = [1], s = [1]",
        "output": "1"
      },
      {
        "input": "g = [10,20,30], s = [1,2,3]",
        "output": "0"
      },
      {
        "input": "g = [], s = [1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "g = [10,9,8,7], s = [5,6,7,8]",
        "output": "2"
      },
      {
        "input": "g = [1,2,3], s = []",
        "output": "0"
      },
      {
        "input": "g = [1,2,3], s = [1,2,3,4,5]",
        "output": "3"
      },
      {
        "input": "g = [5,5,5,5,5], s = [5,5,5,5]",
        "output": "4"
      },
      {
        "input": "g = [1,2,3,4,5], s = []",
        "output": "0"
      },
      {
        "input": "g = [1,2,3], s = [3,2,1]",
        "output": "3"
      },
      {
        "input": "g = [1,3,5,7], s = [2,4,6,8]",
        "output": "4"
      },
      {
        "input": "g = [], s = [1,2,3]",
        "output": "0"
      },
      {
        "input": "g = [1,2,3,4,5], s = [1,2]",
        "output": "2"
      },
      {
        "input": "g = [1,1,1,1], s = [10,10,10,10]",
        "output": "4"
      },
      {
        "input": "g = [1,2,3], s = [1,1]",
        "output": "1"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10], s = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "g = [1, 10, 100, 1000, 10000], s = [1, 2, 3, 4, 5]",
        "output": "1"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "10"
      },
      {
        "input": "g = [1, 3, 5, 7, 9], s = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "5"
      },
      {
        "input": "g = [2147483647, 2147483647, 2147483647], s = [2147483647, 2147483647, 2147483647, 2147483647, 2147483647]",
        "output": "3"
      },
      {
        "input": "g = [5, 4, 3, 2, 1], s = [1, 2, 3, 4, 5]",
        "output": "5"
      },
      {
        "input": "g = [1,3,5,7,9], s = [2,4,6,8,10]",
        "output": "5"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "g = [10,9,8,7,6], s = [5,6,7,8,9]",
        "output": "4"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "10"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10], s = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10], s = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "10"
      },
      {
        "input": "g = [1000000000, 1000000000, 1000000000], s = [1000000000, 1000000000, 1000000000]",
        "output": "3"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10], s = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "10"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [1, 2, 3, 4, 5]",
        "output": "5"
      },
      {
        "input": "g = [10,20,30,40,50], s = [1,10,100,1000,10000]",
        "output": "4"
      },
      {
        "input": "g = [3,5,7,9,11], s = [2,4,6,8,10]",
        "output": "4"
      },
      {
        "input": "g = [3, 5, 7, 9, 11], s = [2, 4, 6, 8, 10]",
        "output": "4"
      },
      {
        "input": "g = [100, 101, 102, 103, 104], s = [100, 101, 102, 103, 104, 105]",
        "output": "5"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "g = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], s = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "15"
      },
      {
        "input": "g = [1, 3, 5, 7, 9], s = [2, 4, 6, 8, 10]",
        "output": "5"
      },
      {
        "input": "g = [1, 2, 3, 4, 5], s = [1, 2, 2, 2, 2]",
        "output": "2"
      },
      {
        "input": "g = [1, 2, 3, 4, 5], s = [5, 4, 3, 2, 1]",
        "output": "5"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], s = [1, 3, 5, 7, 9, 11, 13, 15]",
        "output": "8"
      },
      {
        "input": "g = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], s = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "10"
      },
      {
        "input": "g = [1,3,5,7,9], s = [2,4,6,8,10,12,14,16,18,20]",
        "output": "5"
      },
      {
        "input": "g = [231,230,229,228,227,226,225,224,223,222], s = [230,229,228,227,226,225,224,223,222,221]",
        "output": "9"
      },
      {
        "input": "g = [5, 5, 5, 5, 5], s = [1, 2, 3, 4, 5]",
        "output": "1"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000]",
        "output": "5"
      },
      {
        "input": "g = [1, 2, 2, 3, 4], s = [1, 2, 2, 3]",
        "output": "4"
      },
      {
        "input": "g = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], s = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "g = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], s = [15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "9"
      },
      {
        "input": "g = [100,200,300,400,500], s = [500,400,300,200,100]",
        "output": "5"
      },
      {
        "input": "g = [100,200,300], s = [50,150,250,350]",
        "output": "3"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10], s = [5,5,5,5,5,5,5,5,5,5]",
        "output": "5"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], s = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10], s = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], s = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "g = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], s = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "20"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], s = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "g = [10, 9, 8, 7, 6], s = [1, 2, 3, 4, 5]",
        "output": "0"
      },
      {
        "input": "g = [1,10,20,30,40,50,60,70,80,90,100], s = [10,20,30,40,50,60,70,80,90,100]",
        "output": "10"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [5, 5, 5, 5, 5]",
        "output": "5"
      },
      {
        "input": "g = [1, 2, 3, 4, 5], s = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "5"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [1, 3, 5, 7, 9]",
        "output": "5"
      },
      {
        "input": "g = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], s = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "10"
      },
      {
        "input": "g = [1,3,5,7,9,11,13,15,17,19], s = [2,4,6,8,10,12,14,16,18,20]",
        "output": "10"
      },
      {
        "input": "g = [1000000000,1000000000,1000000000], s = [1000000000,1000000000,1000000000,1000000000,1000000000]",
        "output": "3"
      },
      {
        "input": "g = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000], s = [1000000000, 2000000000, 3000000000, 4000000000, 5000000000]",
        "output": "5"
      },
      {
        "input": "g = [10,20,30,40,50,60,70,80,90,100], s = [5,15,25,35,45,55,65,75,85,95,105]",
        "output": "10"
      },
      {
        "input": "g = [1, 2, 3, 4, 5], s = [3, 3, 3, 3, 3]",
        "output": "3"
      },
      {
        "input": "g = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], s = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "15"
      },
      {
        "input": "g = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "8"
      },
      {
        "input": "g = [10,20,30,40,50], s = [15,25,35,45,55]",
        "output": "5"
      },
      {
        "input": "g = [3,1,5,2,4], s = [2,3,5,6,7]",
        "output": "5"
      },
      {
        "input": "g = [1, 1, 1, 1, 1], s = [5, 5, 5, 5, 5]",
        "output": "5"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], s = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "20"
      },
      {
        "input": "g = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], s = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "15"
      },
      {
        "input": "g = [1, 2, 3, 4, 5], s = []",
        "output": "0"
      },
      {
        "input": "g = [5,8,12,16,20], s = [1,3,4,5,9,12,15]",
        "output": "3"
      },
      {
        "input": "g = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "g = [3,4,5,6,7,8,9,10], s = [5,6,7,8,9]",
        "output": "5"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "10"
      },
      {
        "input": "g = [100, 200, 300, 400, 500], s = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500]",
        "output": "5"
      },
      {
        "input": "g = [1, 1, 1, 1, 1], s = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "5"
      },
      {
        "input": "g = [10, 20, 30, 40, 50], s = [5, 15, 25, 35, 45]",
        "output": "4"
      },
      {
        "input": "g = [10,20,30,40,50], s = [1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "g = [2,4,6,8,10,12,14,16,18,20], s = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]",
        "output": "10"
      },
      {
        "input": "g = [100,200,300,400,500,600,700,800,900,1000], s = [500,500,500,500,500,500,500,500,500,500]",
        "output": "5"
      },
      {
        "input": "g = [10,9,8,7,6,5,4,3,2,1], s = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "g = [10, 9, 8, 7, 6], s = [5, 6, 7, 8, 9, 10]",
        "output": "5"
      },
      {
        "input": "g = [1,1,1,1,1,1,1,1,1,1], s = [2,2,2,2,2,2,2,2,2,2]",
        "output": "10"
      },
      {
        "input": "g = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], s = [1, 2, 3, 4, 5]",
        "output": "5"
      },
      {
        "input": "g = [100, 200, 300], s = [50, 150, 250, 350]",
        "output": "3"
      },
      {
        "input": "g = [1, 3, 5, 7], s = [2, 4, 6, 8]",
        "output": "4"
      },
      {
        "input": "g = [10, 10, 10, 10, 10], s = [1, 2, 3, 4, 5]",
        "output": "0"
      },
      {
        "input": "g = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], s = [1, 3, 5, 7, 9, 11, 13, 15]",
        "output": "8"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "10"
      },
      {
        "input": "g = [1, 3, 5, 7, 9], s = [2, 4, 6, 8, 10, 12, 14, 16, 18]",
        "output": "5"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6]",
        "output": "10"
      },
      {
        "input": "g = [1,1,1,1,1,1,1,1,1,1], s = [1,1,1,1,1]",
        "output": "5"
      },
      {
        "input": "g = [1, 3, 5, 7, 9], s = [2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "5"
      },
      {
        "input": "g = [3, 3, 3, 3, 3], s = [1, 2, 3, 4, 5]",
        "output": "3"
      },
      {
        "input": "g = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], s = [1, 1, 1, 1, 1, 1]",
        "output": "6"
      },
      {
        "input": "g = [5, 5, 5, 5, 5], s = [5, 5, 5, 5, 5]",
        "output": "5"
      },
      {
        "input": "g = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], s = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]",
        "output": "10"
      },
      {
        "input": "g = [1, 2, 3, 4, 5], s = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
        "output": "10"
      },
      {
        "input": "g = [1,3,5,7,9,11,13,15,17,19], s = [1,2,3,4,5,6,7,8,9,10]",
        "output": "5"
      },
      {
        "input": "g = [], s = [1, 2, 3, 4, 5]",
        "output": "0"
      },
      {
        "input": "g = [5, 5, 5, 5, 5], s = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "g = [1, 2, 3, 4, 5], s = [6, 7, 8, 9, 10]",
        "output": "5"
      },
      {
        "input": "g = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], s = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "g = [5, 10, 3, 8, 6], s = [1, 2, 3, 7, 9]",
        "output": "3"
      },
      {
        "input": "g = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "g = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], s = [10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,2,2,1,1]",
        "output": "20"
      },
      {
        "input": "g = [1,2,3,4,5,6,7,8,9,10], s = [10,9,8,7,6,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "g = [5,5,5,5,5,5,5,5,5,5], s = [1,2,3,4,5,6,7,8,9,10]",
        "output": "6"
      },
      {
        "input": "g = [1, 2, 3, 4, 5], s = [1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "g = [1, 2, 3, 4, 5], s = [10000, 20000, 30000, 40000, 50000]",
        "output": "5"
      },
      {
        "input": "g = [1,1,1,1,1,1,1,1,1,1], s = [1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "g = [3,2,1], s = [1,1,1]",
        "output": "1"
      },
      {
        "input": "g = [2, 2, 2, 2, 2], s = [1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], s = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      }
    ]
  },
  {
    "id": 1385,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.\nThe distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.\n\u00a0\nExample 1:\n\nInput: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\nOutput: 2\nExplanation: \nFor arr1[0]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1[1]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1[2]=8 we have:\n|8-10|=2 <= d=2\n|8-9|=1 <= d=2\n|8-1|=7 > d=2\n|8-8|=0 <= d=2\n\nExample 2:\n\nInput: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\nOutput: 2\n\nExample 3:\n\nInput: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= arr1.length, arr2.length <= 500\n-1000 <= arr1[i], arr2[j] <= 1000\n0 <= d <= 100\n\n",
    "starterCode": "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        ",
    "testCases": [
      {
        "input": "arr1 = [10,20,30], arr2 = [5,15,25], d = 4",
        "output": "3"
      },
      {
        "input": "arr1 = [-1000,1000], arr2 = [-500,500], d = 499",
        "output": "2"
      },
      {
        "input": "arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2",
        "output": "2"
      },
      {
        "input": "arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3",
        "output": "2"
      },
      {
        "input": "arr1 = [-1,-2,-3], arr2 = [1,2,3], d = 2",
        "output": "2"
      },
      {
        "input": "arr1 = [0,0,0,0], arr2 = [1,2,3,4], d = 0",
        "output": "4"
      },
      {
        "input": "arr1 = [1000], arr2 = [-1000], d = 1999",
        "output": "1"
      },
      {
        "input": "arr1 = [1], arr2 = [1], d = 0",
        "output": "0"
      },
      {
        "input": "arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6",
        "output": "1"
      },
      {
        "input": "arr1 = [1,2,3], arr2 = [4,5,6], d = 0",
        "output": "3"
      },
      {
        "input": "arr1 = [1,2,3,4,5], arr2 = [6,7,8,9,10], d = 1",
        "output": "4"
      },
      {
        "input": "arr1 = [100, 200, 300, 400, 500], arr2 = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500], d = 49",
        "output": "0"
      },
      {
        "input": "arr1 = [-1000, -900, -800, -700, -600], arr2 = [600, 700, 800, 900, 1000], d = 100",
        "output": "5"
      },
      {
        "input": "arr1 = [-100, -200, -300], arr2 = [-50, -150, -250], d = 49",
        "output": "3"
      },
      {
        "input": "arr1 = [500, 500, 500, 500, 500], arr2 = [500, 500, 500, 500, 500], d = 0",
        "output": "0"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50], arr2 = [1, 2, 3, 4, 5], d = 5",
        "output": "4"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [10, 20, 30, 40, 50], d = 10",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 1, 1, 1, 1], arr2 = [2, 4, 6, 8, 10], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [500, 1000, 1500, 2000], arr2 = [400, 900, 1400, 1900], d = 100",
        "output": "0"
      },
      {
        "input": "arr1 = [0, 100, 200, 300, 400], arr2 = [50, 150, 250, 350, 450], d = 50",
        "output": "0"
      },
      {
        "input": "arr1 = [100, 200, 300, 400, 500], arr2 = [50, 150, 250, 350, 450], d = 49",
        "output": "5"
      },
      {
        "input": "arr1 = [0, 5, 10, 15, 20], arr2 = [3, 6, 9, 12, 18], d = 2",
        "output": "2"
      },
      {
        "input": "arr1 = [500, 400, 300, 200, 100], arr2 = [0, 100, 200, 300, 400, 500], d = 99",
        "output": "0"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50], arr2 = [5, 15, 25, 35, 45, 55], d = 9",
        "output": "0"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50], arr2 = [5, 15, 25, 35, 45, 55], d = 4",
        "output": "5"
      },
      {
        "input": "arr1 = [1, 3, 5, 7, 9], arr2 = [2, 4, 6, 8, 10], d = 0",
        "output": "5"
      },
      {
        "input": "arr1 = [1,2,3,4,5,6,7,8,9,10], arr2 = [10,9,8,7,6,5,4,3,2,1], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [0, 0, 0, 0], arr2 = [1, -1, 2, -2], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [6, 7, 8, 9, 10], d = 0",
        "output": "5"
      },
      {
        "input": "arr1 = [-100, -200, -300, -400, -500], arr2 = [100, 200, 300, 400, 500], d = 150",
        "output": "5"
      },
      {
        "input": "arr1 = [-10, -20, -30], arr2 = [10, 20, 30], d = 19",
        "output": "3"
      },
      {
        "input": "arr1 = [100, 200, 300, 400, 500], arr2 = [90, 190, 290, 390, 490], d = 9",
        "output": "5"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [1, 3, 5, 7, 9], d = 0",
        "output": "2"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], arr2 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], d = 0",
        "output": "5"
      },
      {
        "input": "arr1 = [5, 5, 5, 5, 5], arr2 = [1, 2, 3, 4, 6], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 3, 5, 7, 9], arr2 = [0, 2, 4, 6, 8], d = 0",
        "output": "5"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], arr2 = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90], d = 3",
        "output": "3"
      },
      {
        "input": "arr1 = [-10, -20, -30, -40], arr2 = [-11, -21, -31, -41], d = 0",
        "output": "4"
      },
      {
        "input": "arr1 = [0,1,2,3,4,5,6,7,8,9], arr2 = [5], d = 1",
        "output": "7"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], arr2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], d = 0",
        "output": "1"
      },
      {
        "input": "arr1 = [0,0,0,0,0], arr2 = [1,2,3,4,5], d = 0",
        "output": "5"
      },
      {
        "input": "arr1 = [1, 1, 1, 1, 1], arr2 = [2, 2, 2, 2, 2], d = 0",
        "output": "5"
      },
      {
        "input": "arr1 = [2, 4, 6, 8, 10], arr2 = [1, 3, 5, 7, 9], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [1000,-1000,500,-500], arr2 = [1000,-1000,500,-500], d = 0",
        "output": "0"
      },
      {
        "input": "arr1 = [5, 10, 15, 20, 25], arr2 = [3, 6, 9, 12, 18], d = 2",
        "output": "2"
      },
      {
        "input": "arr1 = [5, 15, 25, 35, 45], arr2 = [0, 10, 20, 30, 40], d = 4",
        "output": "5"
      },
      {
        "input": "arr1 = [-1000, -500, 0, 500, 1000], arr2 = [-500, 0, 500], d = 499",
        "output": "2"
      },
      {
        "input": "arr1 = [-1000, 1000, 500, -500], arr2 = [0, -2000, 2000, 1000], d = 500",
        "output": "1"
      },
      {
        "input": "arr1 = [500, 400, 300, 200, 100], arr2 = [-100, -200, -300, -400, -500], d = 100",
        "output": "5"
      },
      {
        "input": "arr1 = [100, 200, 300, 400], arr2 = [50, 150, 250, 350], d = 49",
        "output": "4"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], arr2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], d = 8",
        "output": "1"
      },
      {
        "input": "arr1 = [-500, -1000, -1500, -2000], arr2 = [-400, -900, -1400, -1900], d = 100",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [0, 0, 0, 0, 0], d = 1",
        "output": "4"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50], arr2 = [5, 15, 25, 35, 45, 55], d = 5",
        "output": "0"
      },
      {
        "input": "arr1 = [1,3,5,7,9], arr2 = [2,4,6,8,10], d = 0",
        "output": "5"
      },
      {
        "input": "arr1 = [100,200,300,400,500], arr2 = [150,250,350,450], d = 49",
        "output": "5"
      },
      {
        "input": "arr1 = [0, 1, 2, 3, 4], arr2 = [0, 0, 0, 0, 0], d = 2",
        "output": "2"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], arr2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], d = 5",
        "output": "4"
      },
      {
        "input": "arr1 = [0, 0, 0, 0], arr2 = [1, 2, 3, 4], d = 0",
        "output": "4"
      },
      {
        "input": "arr1 = [-5, -10, -15, -20, -25], arr2 = [5, 10, 15, 20, 25], d = 4",
        "output": "5"
      },
      {
        "input": "arr1 = [50,51,52,53,54,55], arr2 = [50,55], d = 0",
        "output": "4"
      },
      {
        "input": "arr1 = [1, 1, 1, 1], arr2 = [2, 2, 2, 2], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50], arr2 = [5, 15, 25, 35, 45], d = 5",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [1, 2, 3, 4, 5], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], arr2 = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], d = 9",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 3, 5, 7, 9], arr2 = [0, 2, 4, 6, 8], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50], arr2 = [5, 15, 25, 35, 45], d = 4",
        "output": "5"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9], arr2 = [2, 4, 6, 8, 10, 12, 14, 16, 18], d = 0",
        "output": "5"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [10, 20, 30, 40, 50], d = 5",
        "output": "4"
      },
      {
        "input": "arr1 = [1,2,3,4,5], arr2 = [1,2,3,4,5], d = 10",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [1, 2, 3, 4, 5], d = 0",
        "output": "0"
      },
      {
        "input": "arr1 = [0, 0, 0, 0, 0], arr2 = [-1, -2, -3, -4, -5], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [100, 200, 300], arr2 = [95, 195, 295, 105, 205, 305], d = 5",
        "output": "0"
      },
      {
        "input": "arr1 = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], arr2 = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], d = 2",
        "output": "0"
      },
      {
        "input": "arr1 = [-100,-90,-80,-70,-60,-50], arr2 = [-95,-85,-75,-65,-55], d = 4",
        "output": "6"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], arr2 = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91], d = 9",
        "output": "0"
      },
      {
        "input": "arr1 = [1,1,1,1,1], arr2 = [1,1,1,1,1], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], arr2 = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90], d = 1",
        "output": "7"
      },
      {
        "input": "arr1 = [1, 1, 1, 1, 1], arr2 = [1, 2, 3, 4, 5], d = 0",
        "output": "0"
      },
      {
        "input": "arr1 = [1000, -1000, 0], arr2 = [500, -500, 0], d = 500",
        "output": "0"
      },
      {
        "input": "arr1 = [0, 10, 20, 30, 40], arr2 = [5, 15, 25, 35, 45], d = 5",
        "output": "0"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], d = 8",
        "output": "9"
      },
      {
        "input": "arr1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], arr2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], d = 0",
        "output": "10"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [10, 20, 30, 40, 50], d = 9",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 3, 5, 7, 9, 11, 13, 15], arr2 = [2, 4, 6, 8, 10, 12, 14, 16], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50], arr2 = [5, 15, 25, 35, 45], d = 6",
        "output": "0"
      },
      {
        "input": "arr1 = [0, 100, 200], arr2 = [50, 150, 250], d = 49",
        "output": "3"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [-1, -2, -3, -4, -5], d = 1",
        "output": "5"
      },
      {
        "input": "arr1 = [1, 1, 1, 1], arr2 = [1], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [-50, -40, -30, -20, -10], arr2 = [-45, -35, -25, -15, -5], d = 4",
        "output": "5"
      },
      {
        "input": "arr1 = [-10, -20, -30, -40, -50], arr2 = [-5, -15, -25, -35, -45, -55], d = 9",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [2, 4, 6, 8, 10], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [0, 0, 0, 0], arr2 = [0, 0, 0, 0], d = 0",
        "output": "0"
      },
      {
        "input": "arr1 = [100,200,300,400,500], arr2 = [50,150,250,350,450,550], d = 49",
        "output": "5"
      },
      {
        "input": "arr1 = [-100, -200, -300, -400, -500], arr2 = [-95, -195, -295, -395, -495, -595], d = 5",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 1, 1, 1, 1], arr2 = [2, 2, 2, 2, 2], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [0, 6, 7, 8, 9], d = 1",
        "output": "3"
      },
      {
        "input": "arr1 = [100, 200, 300, 400, 500], arr2 = [90, 190, 290, 390, 490], d = 5",
        "output": "5"
      },
      {
        "input": "arr1 = [1, 10, 100, 1000], arr2 = [-1, -10, -100, -1000], d = 5",
        "output": "3"
      },
      {
        "input": "arr1 = [100, 200, 300, 400], arr2 = [99, 199, 299, 399], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 3, 5, 7, 9], arr2 = [2, 4, 6, 8, 10], d = 1",
        "output": "0"
      },
      {
        "input": "arr1 = [-100, -200, -300, -400], arr2 = [-50, -150, -250, -350], d = 49",
        "output": "4"
      },
      {
        "input": "arr1 = [5, 15, 25, 35], arr2 = [10, 20, 30, 40], d = 5",
        "output": "0"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [6, 7, 8, 9, 10], d = 1",
        "output": "4"
      },
      {
        "input": "arr1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], arr2 = [1, 3, 5, 7, 9], d = 0",
        "output": "5"
      },
      {
        "input": "arr1 = [1, 1, 1, 1, 1], arr2 = [2, 3, 4, 5, 6], d = 0",
        "output": "5"
      },
      {
        "input": "arr1 = [1, 3, 5, 7, 9, 11, 13, 15], arr2 = [2, 4, 6, 8, 10, 12, 14, 16], d = 0",
        "output": "8"
      },
      {
        "input": "arr1 = [-50, -40, -30, -20, -10], arr2 = [-60, -55, -45, -35, -25], d = 5",
        "output": "1"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50], arr2 = [15, 25, 35, 45, 55], d = 4",
        "output": "5"
      },
      {
        "input": "arr1 = [10, 20, 30, 40, 50, 60, 70, 80, 90], arr2 = [1, 11, 21, 31, 41, 51, 61, 71, 81], d = 9",
        "output": "0"
      },
      {
        "input": "arr1 = [-100, -200, -300, -400, -500], arr2 = [-50, -150, -250, -350, -450], d = 49",
        "output": "5"
      },
      {
        "input": "arr1 = [500, 400, 300, 200, 100], arr2 = [550, 450, 350, 250, 150], d = 49",
        "output": "5"
      },
      {
        "input": "arr1 = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1], arr2 = [-5,0,5], d = 2",
        "output": "3"
      },
      {
        "input": "arr1 = [1, 2, 3, 4, 5], arr2 = [6, 7, 8, 9, 10], d = 4",
        "output": "1"
      },
      {
        "input": "arr1 = [-50, -25, 0, 25, 50], arr2 = [-30, -15, 15, 30], d = 14",
        "output": "3"
      }
    ]
  },
  {
    "id": 2357,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array",
      "Hash Table",
      "Sorting",
      "Simulation",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a non-negative integer array nums. In one operation, you must:\n\nChoose a positive integer x such that x is less than or equal to the smallest non-zero element in nums.\nSubtract x from every positive element in nums.\n\nReturn the minimum number of operations to make every element in nums equal to 0.\n\u00a0\nExample 1:\n\nInput: nums = [1,5,0,3,5]\nOutput: 3\nExplanation:\nIn the first operation, choose x = 1. Now, nums = [0,4,0,2,4].\nIn the second operation, choose x = 2. Now, nums = [0,2,0,0,2].\nIn the third operation, choose x = 2. Now, nums = [0,0,0,0,0].\n\nExample 2:\n\nInput: nums = [0]\nOutput: 0\nExplanation: Each element in nums is already 0 so no operations are needed.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n0 <= nums[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [0,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [1,0,1,0,1]",
        "output": "1"
      },
      {
        "input": "nums = [1,5,0,3,5]",
        "output": "3"
      },
      {
        "input": "nums = [0,1,0,1,0]",
        "output": "1"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4]",
        "output": "4"
      },
      {
        "input": "nums = [100,0,50,50]",
        "output": "2"
      },
      {
        "input": "nums = [100,0,50,50,0]",
        "output": "2"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "5"
      },
      {
        "input": "nums = [5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [99,99,99,99,99]",
        "output": "1"
      },
      {
        "input": "nums = [0]",
        "output": "0"
      },
      {
        "input": "nums = [1,0,1,0,1,0]",
        "output": "1"
      },
      {
        "input": "nums = [100,100,100,100,100]",
        "output": "1"
      },
      {
        "input": "nums = [100,0,50,25,75]",
        "output": "4"
      },
      {
        "input": "nums = [0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [2,2,2,2]",
        "output": "1"
      },
      {
        "input": "nums = [5,5,5,0,0,5,0]",
        "output": "1"
      },
      {
        "input": "nums = [2,2,2,2,2]",
        "output": "1"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0]",
        "output": "14"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]",
        "output": "5"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]",
        "output": "10"
      },
      {
        "input": "nums = [50, 25, 12, 6, 3, 1, 0, 0, 0, 0]",
        "output": "6"
      },
      {
        "input": "nums = [42, 84, 126, 168, 210, 252, 294]",
        "output": "7"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [7,0,0,0,0,0,0,0,0,0]",
        "output": "1"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5]",
        "output": "7"
      },
      {
        "input": "nums = [99,98,97,96,95,94,93,92,91,90]",
        "output": "10"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0]",
        "output": "10"
      },
      {
        "input": "nums = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "1"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0]",
        "output": "10"
      },
      {
        "input": "nums = [5,0,3,3,5,0,2]",
        "output": "3"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 0, 10, 20, 30, 40, 50, 0]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "20"
      },
      {
        "input": "nums = [25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "25"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4]",
        "output": "4"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9]",
        "output": "9"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "10"
      },
      {
        "input": "nums = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "15"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25]",
        "output": "5"
      },
      {
        "input": "nums = [99, 1, 98, 2, 97, 3, 96, 4, 95, 5]",
        "output": "10"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]",
        "output": "1"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "10"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 0, 0, 0, 0, 0]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5]",
        "output": "5"
      },
      {
        "input": "nums = [5,3,8,6,2,0,7]",
        "output": "6"
      },
      {
        "input": "nums = [0,0,0,0,1,1,2,2,3,3,4,4,5,5]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "10"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "5"
      },
      {
        "input": "nums = [5,3,2,1,4,0,2,3]",
        "output": "5"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,0]",
        "output": "10"
      },
      {
        "input": "nums = [42,0,42,0,42,0,42,0,42,0,42,0,42,0,42,0,42,0,42,0]",
        "output": "1"
      },
      {
        "input": "nums = [50, 40, 30, 20, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2]",
        "output": "2"
      },
      {
        "input": "nums = [50,50,50,50,50,50,50,50,50,50,0,0,0,0,0,0,0,0,0,0]",
        "output": "1"
      },
      {
        "input": "nums = [99, 98, 97, 96, 95, 94, 93]",
        "output": "7"
      },
      {
        "input": "nums = [10, 10, 20, 20, 30, 30, 40, 40, 50, 50]",
        "output": "5"
      },
      {
        "input": "nums = [5, 3, 2, 1, 4, 3, 5, 0, 1, 2, 3, 4, 5]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,0,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0]",
        "output": "5"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,1]",
        "output": "1"
      },
      {
        "input": "nums = [0,1,1,2,2,3,3,4,4,5,5]",
        "output": "5"
      },
      {
        "input": "nums = [9,9,9,9,9,9,9,9,9,9]",
        "output": "1"
      },
      {
        "input": "nums = [5,15,25,35,45,55,65,75,85,95]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "15"
      },
      {
        "input": "nums = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2,1,2,3,2]",
        "output": "3"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41]",
        "output": "10"
      },
      {
        "input": "nums = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "1"
      },
      {
        "input": "nums = [1,0,2,0,3,0,4,0,5,0]",
        "output": "5"
      },
      {
        "input": "nums = [0, 1, 0, 2, 0, 3, 0, 4, 0, 5]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "25"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85]",
        "output": "15"
      },
      {
        "input": "nums = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]",
        "output": "1"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "20"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "0"
      },
      {
        "input": "nums = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80]",
        "output": "20"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]",
        "output": "10"
      },
      {
        "input": "nums = [0,10,20,30,40,50,60,70,80,90,100,0,10,20,30,40,50,60,70,80]",
        "output": "10"
      },
      {
        "input": "nums = [50,25,75,50,25,75,50,25,75,50,25,75,50,25,75]",
        "output": "3"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [0, 2, 3, 2, 1, 3, 4, 3, 2, 1]",
        "output": "4"
      },
      {
        "input": "nums = [5, 1, 4, 2, 3, 1, 0, 2, 4, 3]",
        "output": "5"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3]",
        "output": "3"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0,0,0,0,0,0]",
        "output": "9"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42]",
        "output": "6"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "1"
      },
      {
        "input": "nums = [10,20,30,40,50,0,10,20,30]",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]",
        "output": "4"
      },
      {
        "input": "nums = [10,20,30,40,50,0,0,0]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "2"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "10"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "nums = [10,20,30,40,50,0,0,0,0,0]",
        "output": "5"
      },
      {
        "input": "nums = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3]",
        "output": "3"
      },
      {
        "input": "nums = [1,10,100,1000,10000,0,0,0,0,0]",
        "output": "5"
      },
      {
        "input": "nums = [0, 23, 46, 69, 92, 115]",
        "output": "5"
      },
      {
        "input": "nums = [50,40,30,20,10,0,10,20,30,40,50,60,70,80,90,100]",
        "output": "10"
      },
      {
        "input": "nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80]",
        "output": "20"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 0, 10, 20, 30, 40]",
        "output": "5"
      }
    ]
  },
  {
    "id": 1598,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Array",
      "String"
    ],
    "problemDescription": "The Leetcode file system keeps a log each time some user performs a change folder operation.\nThe operations are described below:\n\n\"../\" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).\n\"./\" : Remain in the same folder.\n\"x/\" : Move to the child folder named x (This folder is guaranteed to always exist).\n\nYou are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.\nThe file system starts in the main folder, then the operations in logs are performed.\nReturn the minimum number of operations needed to go back to the main folder after the change folder operations.\n\u00a0\nExample 1:\n\n\nInput: logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]\nOutput: 2\nExplanation: Use this change folder operation \"../\" 2 times and go back to the main folder.\n\nExample 2:\n\n\nInput: logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]\nOutput: 3\n\nExample 3:\n\nInput: logs = [\"d1/\",\"../\",\"../\",\"../\"]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= logs.length <= 103\n2 <= logs[i].length <= 10\nlogs[i] contains lowercase English letters, digits, '.', and '/'.\nlogs[i] follows the format described in the statement.\nFolder names consist of lowercase English letters and digits.\n\n",
    "starterCode": "class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        ",
    "testCases": [
      {
        "input": "logs = [\"d1/\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]",
        "output": "2"
      },
      {
        "input": "logs = [\"d1/\",\"../\",\"d2/\",\"../\",\"d3/\",\"../\",\"d4/\",\"../\",\"d5/\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"../\",\"../\",\"../\",\"../\",\"d5/\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\",\"../\",\"d2/\",\"../\",\"d3/\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"../../..\"]",
        "output": "4"
      },
      {
        "input": "logs = [\"d1/\",\"../\",\"d2/\",\"../\",\"d3/\",\"../\",\"d4/\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"./\",\"./\",\"d1/\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\",\"../\",\"d2/\",\"../\",\"d3/\",\"../\",\"d4/\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]",
        "output": "3"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"d4/\",\"d5/\",\"../\",\"../\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"d3/\",\"d4/\"]",
        "output": "3"
      },
      {
        "input": "logs = [\"./\",\"./\",\"./\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\"]",
        "output": "4"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"../../../../\"]",
        "output": "5"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"../\",\"../\",\"d1/\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"./\",\"./\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"d11/\",\"d12/\",\"d13/\",\"d14/\",\"d15/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"d3/\", \"d4/\", \"d5/\", \"../\", \"../\", \"../\", \"../\", \"d6/\", \"d7/\", \"d8/\", \"d9/\", \"d10/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"./\",\"./\",\"d3/\",\"d4/\",\"d5/\",\"../\",\"../\",\"../\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"x1/\",\"x2/\",\"x3/\",\"../../\",\"y1/\",\"y2/\",\"y3/\",\"../\",\"z1/\",\"z2/\",\"../\",\"../\",\"../\"]",
        "output": "4"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"../../\",\"../\",\"../../\",\"../\",\"../../\",\"../\",\"../../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "2"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"d11/\",\"d12/\",\"d13/\",\"d14/\",\"d15/\",\"d16/\",\"d17/\",\"d18/\",\"d19/\",\"d20/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"d11/\",\"d12/\",\"d13/\",\"d14/\",\"d15/\",\"d16/\",\"d17/\",\"d18/\",\"d19/\",\"d20/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"./\",\"./\",\"./\",\"../\",\"../\",\"../\",\"d6/\",\"d7/\",\"d8/\",\"./\",\"./\",\"./\",\"../\",\"../\",\"../\",\"d9/\",\"d10/\",\"d11/\",\"./\",\"./\",\"./\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"./\",\"./\",\"./\",\"folderA/\",\"../\",\"folderB/\",\"folderC/\",\"../\",\"folderD/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"./\",\"d4/\",\"../\",\"../\",\"d5/\",\"../\",\"../\",\"d6/\",\"../\",\"d7/\",\"./\",\"./\",\"d8/\",\"../\",\"../\",\"d9/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"deep1/\",\"deep2/\",\"deep3/\",\"deep4/\",\"deep5/\",\"deep6/\",\"deep7/\",\"deep8/\",\"deep9/\",\"deep10/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"../\",\"../\",\"../\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"d11/\",\"d12/\",\"d13/\",\"d14/\",\"d15/\",\"d16/\",\"d17/\",\"d18/\",\"d19/\",\"d20/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"d4/\",\"d5/\",\"../\",\"d6/\",\"d7/\",\"../\",\"../\",\"d8/\",\"d9/\",\"../\",\"../\",\"d10/\",\"d11/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"../\",\"d3/\",\"d4/\",\"d5/\",\"../\",\"../\",\"../\",\"d6/\",\"d7/\",\"d8/\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"./\",\"./\",\"./\",\"d1/\",\"../\",\"d2/\",\"../\",\"../\",\"d3/\",\"../\",\"../\",\"d4/\",\"../\",\"../\",\"d5/\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"./\",\"./\",\"./\",\"../\",\"../\",\"../\",\"d5/\",\"d6/\",\"d7/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"./\",\"d4/\",\"d5/\",\"./\",\"../\",\"d6/\",\"d7/\",\"./\",\"../\",\"d8/\",\"d9/\",\"./\",\"../\",\"d10/\",\"d11/\",\"./\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"d4/\",\"d5/\",\"d6/\",\"../\",\"d7/\",\"../\",\"../\",\"d8/\",\"d9/\",\"../\",\"../\",\"d10/\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"./\",\"./\",\"./\",\"../\",\"../\",\"d6/\",\"d7/\",\"d8/\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"./\", \"./\", \"./\", \"../\", \"d3/\", \"d4/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"./\", \"./\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"d11/\",\"d12/\",\"d13/\",\"d14/\",\"d15/\",\"d16/\",\"d17/\",\"d18/\",\"d19/\",\"d20/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"d3/\", \"d4/\", \"d5/\", \"d6/\", \"d7/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"../\",\"./\",\"d3/\",\"d4/\",\"../\",\"../\",\"d5/\",\"d6/\",\"../\",\"../\",\"../\",\"d7/\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"d3/\", \"../\", \"../\", \"d4/\", \"d5/\", \"../\", \"d6/\", \"d7/\", \"../\", \"../\", \"../\", \"d8/\"]",
        "output": "2"
      },
      {
        "input": "logs = [\"folder1/\",\"folder2/\",\"../\",\"folder3/\",\"folder4/\",\"folder5/\",\"folder6/\",\"../../\",\"folder7/\",\"folder8/\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "2"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"d3/\", \"d4/\", \"d5/\", \"../\", \"d6/\", \"d7/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"d4/\",\"d5/\",\"../\",\"d6/\",\"d7/\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"../\",\"d211/\",\"../\",\"../\",\"d2111/\",\"../\",\"../\",\"../\",\"../\",\"d21111/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"d4/\",\"d5/\",\"../\",\"../\",\"d6/\",\"d7/\",\"../\",\"../\",\"../\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"./\",\"./\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\",\"d1/\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"./\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"d11/\",\"d12/\",\"d13/\",\"d14/\",\"d15/\",\"d16/\",\"d17/\",\"d18/\",\"d19/\",\"d20/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"d11/\",\"d12/\",\"d13/\",\"d14/\",\"d15/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"d4/\",\"d5/\",\"../\",\"../\",\"d6/\",\"d7/\",\"../\",\"../\",\"../\",\"d8/\",\"d9/\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\", \"./\", \"d2/\", \"d3/\", \"../\", \"d4/\", \"d5/\", \"d6/\", \"d7/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"d8/\", \"d9/\", \"d10/\", \"d11/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"../\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"d11/\",\"d12/\",\"d13/\",\"d14/\",\"d15/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"d3/\", \"../\", \"../\", \"../\", \"../\", \"d4/\", \"d5/\", \"d6/\", \"d7/\", \"../\", \"../\", \"d8/\", \"d9/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"./\",\"d4/\",\"../\",\"d5/\",\"../\",\"d6/\",\"./\",\"../\",\"d7/\",\"../\",\"../\",\"d8/\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"../../\",\"../../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "4"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "2"
      },
      {
        "input": "logs = [\"a/\",\"b/\",\"../\",\"c/\",\"./\",\"d/\",\"../\",\"e/\",\"../\",\"../\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"../\",\"../\",\"d1/\",\"d2/\",\"d3/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"d4/\",\"d5/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"../../\",\"../../\",\"../../\",\"../../\",\"../../\",\"../../\",\"../../\",\"../../\",\"../../\",\"../../\"]",
        "output": "10"
      },
      {
        "input": "logs = [\"main/\",\"sub1/\",\"sub2/\",\"sub3/\",\"sub4/\",\"sub5/\",\"sub6/\",\"sub7/\",\"sub8/\",\"sub9/\",\"sub10/\",\"../../../../../../\",\"../\"]",
        "output": "10"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"./\",\"d2/\",\"../\",\"d3/\",\"./\",\"d4/\",\"../\",\"d5/\",\"./\",\"d6/\",\"../\",\"d7/\",\"./\",\"d8/\",\"../\",\"d9/\",\"./\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"../\", \"d2/\", \"d3/\", \"../\", \"../\", \"d4/\", \"d5/\", \"../\", \"../\", \"../\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\", \"./\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"alpha/\",\"beta/\",\"gamma/\",\"./\",\"delta/\",\"epsilon/\",\"zeta/\",\"eta/\",\"theta/\",\"iota/\",\"kappa/\",\"lambda/\",\"mu/\",\"nu/\",\"xi/\",\"omicron/\",\"pi/\",\"rho/\",\"sigma/\",\"tau/\",\"upsilon/\",\"phi/\",\"chi/\",\"psi/\",\"omega/\",\"../../../../../../../../../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "20"
      },
      {
        "input": "logs = [\"d1/\",\"../\",\"d2/\",\"../\",\"d3/\",\"../\",\"d4/\",\"../\",\"d5/\",\"../\",\"d6/\",\"../\",\"d7/\",\"../\",\"d8/\",\"../\",\"d9/\",\"../\",\"d10/\",\"../\",\"d11/\",\"../\",\"d12/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"d3/\", \"d4/\", \"d5/\", \"d6/\", \"d7/\", \"d8/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"d9/\", \"d10/\", \"d11/\", \"d12/\", \"d13/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"d3/\", \"d4/\", \"d5/\", \"./\", \"./\", \"../\", \"../\", \"../\", \"../\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"../\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"../../\",\"./\",\"../../\",\"d9/\",\"d10/\",\"d11/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"../../../../..\"]",
        "output": "10"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"../\",\"d3/\",\"d4/\",\"d5/\",\"./\",\"d6/\",\"../\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"./\",\"./\",\"../\",\"../\",\"../\",\"d11/\",\"d12/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"d6/\",\"d7/\",\"../\",\"d8/\",\"../\",\"d9/\",\"d10/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"d11/\",\"d12/\",\"d13/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"./\",\"../\",\"./\",\"d1/\",\"d2/\",\"../\",\"./\",\"d21/\",\"../\",\"./\",\"d211/\",\"../\",\"./\",\"d2111/\",\"../\",\"./\",\"d21111/\",\"../\",\"./\",\"../\",\"./\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"../\", \"d3/\", \"d4/\", \"d5/\", \"d6/\", \"../\", \"../\", \"../\", \"../\", \"d7/\", \"d8/\", \"d9/\"]",
        "output": "4"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"../\", \"../\", \"./\", \"d3/\", \"d4/\", \"../\", \"d5/\", \"d6/\", \"../\", \"d7/\", \"./\", \"../\", \"../\", \"../\", \"d8/\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"d3/\", \"./\", \"./\", \"./\", \"../\", \"../\", \"../\", \"../\", \"d4/\", \"d5/\", \"d6/\", \"d7/\", \"d8/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"d10/\",\"d11/\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "1"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"d4/\",\"d5/\",\"d6/\",\"d7/\",\"d8/\",\"d9/\",\"./\",\"./\",\"./\",\"./\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\",\"d2/\",\"d3/\",\"../\",\"./\",\"d4/\",\"d5/\",\"../\",\"../\",\"d6/\",\"../\",\"../\",\"../\"]",
        "output": "0"
      },
      {
        "input": "logs = [\"d1/\", \"d2/\", \"d3/\", \"d4/\", \"d5/\", \"d6/\", \"d7/\", \"d8/\", \"d9/\", \"d10/\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\", \"../\"]",
        "output": "0"
      }
    ]
  },
  {
    "id": 888,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\nReturn an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.\n\u00a0\nExample 1:\n\nInput: aliceSizes = [1,1], bobSizes = [2,2]\nOutput: [1,2]\n\nExample 2:\n\nInput: aliceSizes = [1,2], bobSizes = [2,3]\nOutput: [1,2]\n\nExample 3:\n\nInput: aliceSizes = [2], bobSizes = [1,3]\nOutput: [2,3]\n\n\u00a0\nConstraints:\n\n1 <= aliceSizes.length, bobSizes.length <= 104\n1 <= aliceSizes[i], bobSizes[j] <= 105\nAlice and Bob have a different total number of candies.\nThere will be at least one valid answer for the given input.\n\n",
    "starterCode": "class Solution:\n    def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "aliceSizes = [3,7], bobSizes = [1,9]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10,20,30], bobSizes = [5,15,25]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1,1], bobSizes = [2,2]",
        "output": "[1, 2]"
      },
      {
        "input": "aliceSizes = [5,4,3], bobSizes = [7,8,9]",
        "output": "[3, 9]"
      },
      {
        "input": "aliceSizes = [4,1,2,1], bobSizes = [1,2,2,10]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1,3,5,7], bobSizes = [2,4,6,8]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1,2,5], bobSizes = [2,4]",
        "output": "[5, 4]"
      },
      {
        "input": "aliceSizes = [35,17,4,24,19], bobSizes = [68,32,20,92,21]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1,2], bobSizes = [2,3]",
        "output": "[1, 2]"
      },
      {
        "input": "aliceSizes = [3,4], bobSizes = [2,5]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [2], bobSizes = [1,3]",
        "output": "[2, 3]"
      },
      {
        "input": "aliceSizes = [35,17,4,24,10], bobSizes = [66,56,5,1,58]",
        "output": "[10, 58]"
      },
      {
        "input": "aliceSizes = [4,1,2,1], bobSizes = [1,2,2,3]",
        "output": "[1, 1]"
      },
      {
        "input": "aliceSizes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], bobSizes = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1, 3, 5, 7, 9, 11, 13, 15], bobSizes = [2, 4, 6, 8, 10, 12, 14, 16]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], bobSizes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[5, 30]"
      },
      {
        "input": "aliceSizes = [10000, 20000, 30000, 40000], bobSizes = [5000, 15000, 25000, 35000]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [12345, 67890, 54321, 98765], bobSizes = [23456, 78901, 1234, 5678]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [55555, 44444, 33333, 22222, 11111], bobSizes = [99999, 88888, 77777, 66666, 55555]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100,200,300,400,500], bobSizes = [90,190,290,390,490]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100, 200, 300, 400], bobSizes = [150, 250, 350, 450]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], bobSizes = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [5, 20, 10, 30], bobSizes = [15, 25, 35, 5]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [2, 4, 6, 8, 10, 12], bobSizes = [1, 3, 5, 7, 9, 11, 13]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100, 200, 300, 400], bobSizes = [150, 250, 350, 450, 550]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [50000, 25000, 12500, 6250, 3125], bobSizes = [45000, 22500, 11250, 5625, 2812]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100, 200, 300, 400], bobSizes = [50, 150, 250, 350]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [101, 202, 303, 404, 505, 606, 707, 808, 909], bobSizes = [99, 198, 297, 396, 495, 594, 693, 792, 891]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], bobSizes = [30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100000, 50000, 25000, 12500, 6250], bobSizes = [105000, 55000, 27500, 13750, 6875]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100000, 1, 2, 3], bobSizes = [99999, 4, 5, 6]",
        "output": "[1, 5]"
      },
      {
        "input": "aliceSizes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], bobSizes = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950]",
        "output": "[300, 50]"
      },
      {
        "input": "aliceSizes = [9, 18, 27, 36, 45], bobSizes = [12, 24, 36, 48, 60]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100, 200, 300, 400, 500], bobSizes = [50, 150, 250, 350, 450]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [9, 18, 27, 36, 45], bobSizes = [10, 20, 30, 40, 50]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [99, 198, 297, 396, 495], bobSizes = [100, 200, 300, 400, 500]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100, 200, 300, 400, 500, 600, 700], bobSizes = [75, 175, 275, 375, 475, 575, 675]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [50,51,52,53,54,55,56,57,58,59], bobSizes = [49,48,47,46,45,44,43,42,41,40]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10, 20, 30, 40, 50], bobSizes = [5, 15, 25, 35, 45]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1000, 2000, 3000, 4000, 5000], bobSizes = [1500, 2500, 3500, 4500, 5500]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], bobSizes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "[8, 1]"
      },
      {
        "input": "aliceSizes = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000], bobSizes = [5000, 15000, 25000, 35000, 45000, 55000, 65000, 75000, 85000]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100, 200, 300, 400, 500, 600, 700, 800], bobSizes = [150, 250, 350, 450, 550, 650, 750, 850, 950]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], bobSizes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[1, 6]"
      },
      {
        "input": "aliceSizes = [99999, 88888, 77777, 66666, 55555], bobSizes = [11111, 22222, 33333, 44444, 66666, 77777, 88888]",
        "output": "[99999, 77777]"
      },
      {
        "input": "aliceSizes = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000], bobSizes = [1500,2500,3500,4500,5500,6500,7500,8500,9500,10500]",
        "output": "[1000, 3500]"
      },
      {
        "input": "aliceSizes = [101, 203, 305, 407, 509], bobSizes = [102, 204, 306, 408, 510]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], bobSizes = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10, 20, 30, 40], bobSizes = [5, 15, 25, 35, 45, 55]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], bobSizes = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1, 5, 9, 13, 17, 21], bobSizes = [2, 6, 10, 14, 18, 22]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [50, 51, 52, 53, 54, 55, 56], bobSizes = [49, 50, 51, 52, 53, 54, 55]",
        "output": "[52, 49]"
      },
      {
        "input": "aliceSizes = [88, 44, 22, 11, 55, 33, 66, 99, 77], bobSizes = [132, 66, 33, 22, 110, 44, 88, 11, 77]",
        "output": "[88, 132]"
      },
      {
        "input": "aliceSizes = [23456, 78901, 34567, 89012], bobSizes = [65432, 12345, 54321, 98765]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10000, 20000, 30000, 40000, 50000, 60000], bobSizes = [15000, 25000, 35000, 45000, 55000, 65000]",
        "output": "[10000, 25000]"
      },
      {
        "input": "aliceSizes = [1000, 2000, 3000, 4000, 5000], bobSizes = [5500, 6500, 7500, 8500]",
        "output": "[1000, 7500]"
      },
      {
        "input": "aliceSizes = [500, 600, 700, 800, 900], bobSizes = [100, 200, 300, 400, 1400]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [99, 199, 299, 399, 499, 599, 699, 799, 899, 999], bobSizes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [3, 5, 7, 9, 11, 13, 15, 17, 19], bobSizes = [4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[3, 8]"
      },
      {
        "input": "aliceSizes = [12345, 6789, 2468, 1357, 9753], bobSizes = [8642, 7531, 9513, 5791, 6842]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [23, 45, 67, 89, 101, 123, 145], bobSizes = [34, 56, 78, 90, 112, 134, 156]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100000, 100000, 100000, 100000, 100000], bobSizes = [50000, 50000, 50000, 50000, 50000, 50000, 50000]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [50, 100, 150, 200, 250, 300], bobSizes = [60, 110, 160, 210, 260, 310]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10000, 20000, 30000, 40000], bobSizes = [5000, 6000, 7000, 8000]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100000,1,2,3,4,5,6,7,8,9], bobSizes = [99999,99998,99997,99996,99995,99994,99993,99992,99991,99990]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10000, 20000, 30000, 40000, 50000], bobSizes = [5000, 15000, 25000, 35000, 45000, 55000]",
        "output": "[10000, 25000]"
      },
      {
        "input": "aliceSizes = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23], bobSizes = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[17, 2]"
      },
      {
        "input": "aliceSizes = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], bobSizes = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1000, 2000, 3000, 4000], bobSizes = [500, 1500, 2500, 3500]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1000, 2000, 3000, 4000, 5000], bobSizes = [1100, 2100, 3100, 4100, 5100]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1, 3, 5, 7, 9, 11], bobSizes = [2, 4, 6, 8, 10, 12]",
        "output": "[1, 4]"
      },
      {
        "input": "aliceSizes = [1, 1, 1, 1, 10000], bobSizes = [5000, 5000, 5000, 5000, 5000]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [99990, 1, 2, 3, 4, 5], bobSizes = [100000, 6, 7, 8, 9, 10]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100000], bobSizes = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10000, 20000, 30000], bobSizes = [15000, 25000, 35000]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [7,2,5,3,8,1,4,6,9,10], bobSizes = [12,15,14,11,13,10,9,8,7,6]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1,3,5,7,9,11,13,15,17,19], bobSizes = [2,4,6,8,10,12,14,16,18,20]",
        "output": "[1, 6]"
      },
      {
        "input": "aliceSizes = [50000,10000,30000,20000,40000], bobSizes = [15000,25000,35000,45000,55000]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200], bobSizes = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050, 1150]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100, 200, 300], bobSizes = [50, 100, 150, 200, 250, 300]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [5, 10, 15, 20, 25, 30, 35], bobSizes = [7, 14, 21, 28, 35, 42, 49]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000], bobSizes = [500, 1500, 2500, 3500, 4500, 5500, 6500, 7500, 8500, 9500, 10500, 11500, 12500, 13500]",
        "output": "[4000, 500]"
      },
      {
        "input": "aliceSizes = [8, 16, 24, 32, 40, 48, 56, 64, 72, 80], bobSizes = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], bobSizes = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "[30, 5]"
      },
      {
        "input": "aliceSizes = [1000, 2000, 3000, 4000], bobSizes = [1500, 2500, 3500, 500]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [100000, 200000, 300000, 400000, 500000], bobSizes = [50000, 150000, 250000, 350000, 450000]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1000, 2000, 3000, 4000, 5000], bobSizes = [500, 1500, 2500, 3500, 4500]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], bobSizes = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10,20,30,40,50], bobSizes = [5,15,25,35,45]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [15, 25, 35, 45, 55, 65], bobSizes = [14, 24, 34, 44, 54, 64]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105], bobSizes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [10, 20, 30, 40, 50], bobSizes = [15, 25, 35, 45, 55]",
        "output": "None"
      },
      {
        "input": "aliceSizes = [1, 10, 100, 1000, 10000], bobSizes = [2, 20, 200, 2000, 20000]",
        "output": "None"
      }
    ]
  },
  {
    "id": 2696,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "String",
      "Simulation"
    ],
    "problemDescription": "You are given a string s consisting only of uppercase English letters.\nYou can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings \"AB\" or \"CD\" from s.\nReturn the minimum possible length of the resulting string that you can obtain.\nNote that the string concatenates after removing the substring and could produce new \"AB\" or \"CD\" substrings.\n\u00a0\nExample 1:\n\nInput: s = \"ABFCACDB\"\nOutput: 2\nExplanation: We can do the following operations:\n- Remove the substring \"ABFCACDB\", so s = \"FCACDB\".\n- Remove the substring \"FCACDB\", so s = \"FCAB\".\n- Remove the substring \"FCAB\", so s = \"FC\".\nSo the resulting length of the string is 2.\nIt can be shown that it is the minimum length that we can obtain.\nExample 2:\n\nInput: s = \"ACBBD\"\nOutput: 5\nExplanation: We cannot do any operations on the string so the length remains the same.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 100\ns\u00a0consists only of uppercase English letters.\n\n",
    "starterCode": "class Solution:\n    def minLength(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"ABCDBA\"",
        "output": "2"
      },
      {
        "input": "s = \"CDCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ACBBD\"",
        "output": "5"
      },
      {
        "input": "s = \"ABFCACDB\"",
        "output": "2"
      },
      {
        "input": "s = \"AAAA\"",
        "output": "4"
      },
      {
        "input": "s = \"\"",
        "output": "0"
      },
      {
        "input": "s = \"BACD\"",
        "output": "2"
      },
      {
        "input": "s = \"ABCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABACDBACDB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABABABABABABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ACDBABCDACDB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDBCDBCDCDBABCDB\"",
        "output": "4"
      },
      {
        "input": "s = \"FCABABCDABCDF\"",
        "output": "3"
      },
      {
        "input": "s = \"CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCABCABCABC\"",
        "output": "4"
      },
      {
        "input": "s = \"CDCDCDCDCDCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABCDABABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDABCDBABCDABCDB\"",
        "output": "2"
      },
      {
        "input": "s = \"CCCCCCCC\"",
        "output": "8"
      },
      {
        "input": "s = \"CDABCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"DDDDDDDD\"",
        "output": "8"
      },
      {
        "input": "s = \"CDCDCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ACBDCDBDCB\"",
        "output": "8"
      },
      {
        "input": "s = \"ABABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"CDCDCDCDCDCDCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"AAABBBCCCDDD\"",
        "output": "0"
      },
      {
        "input": "s = \"CDCDCDCDABABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABABCDCDABCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDABCDBACDBACDABCD\"",
        "output": "2"
      },
      {
        "input": "s = \"AABBCCDDBBAA\"",
        "output": "4"
      },
      {
        "input": "s = \"ABCDABCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"DCABDCABDCABDCAB\"",
        "output": "2"
      },
      {
        "input": "s = \"DCABDCABDCABDCABDCABDCABDCABDCAB\"",
        "output": "2"
      },
      {
        "input": "s = \"CDCDCDCDCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"DCBADCBAABCDDC\"",
        "output": "10"
      },
      {
        "input": "s = \"ABCDABCDCDABCDABCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDBACDBACD\"",
        "output": "2"
      },
      {
        "input": "s = \"DCBA\"",
        "output": "4"
      },
      {
        "input": "s = \"FCABFCABFCABFCABFCABFCABFCABFCABFCAB\"",
        "output": "18"
      },
      {
        "input": "s = \"DBABABCD\"",
        "output": "2"
      },
      {
        "input": "s = \"ABABABABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"BACDBACDBACDAB\"",
        "output": "2"
      },
      {
        "input": "s = \"AAAAAAAAAABBBBBBBBBBAAAAAAAAAABBBBBBBBBB\"",
        "output": "0"
      },
      {
        "input": "s = \"ACDBCDABABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ACDBABABCDACDB\"",
        "output": "0"
      },
      {
        "input": "s = \"BACDBACD\"",
        "output": "2"
      },
      {
        "input": "s = \"ABCDBACDAB\"",
        "output": "2"
      },
      {
        "input": "s = \"ABCDBCDBCDAB\"",
        "output": "2"
      },
      {
        "input": "s = \"BACDBACDBACDBACDB\"",
        "output": "1"
      },
      {
        "input": "s = \"ABCDABCDCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDABCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"",
        "output": "40"
      },
      {
        "input": "s = \"ABCDCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABABABABCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDABCDBABCDBAB\"",
        "output": "2"
      },
      {
        "input": "s = \"CDCDCDCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABABABABABABABABCDCDCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDABCDBAB\"",
        "output": "1"
      },
      {
        "input": "s = \"CDCDCDABABCDABABCDABABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABCDABABCDABABCDABABCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ACDBACDBACDBACDBACDB\"",
        "output": "0"
      },
      {
        "input": "s = \"CDABCDABCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ACDBABABABCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"DCABDCAB\"",
        "output": "2"
      },
      {
        "input": "s = \"ABABABABABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDCBAABCDBCDABCDCBAABCDBCD\"",
        "output": "4"
      },
      {
        "input": "s = \"ABCDABCDBABCDABCDBABCDABCDBABCDABCDB\"",
        "output": "4"
      },
      {
        "input": "s = \"ACDBACDBACDBACDBACDBACDBACDBACDBACDB\"",
        "output": "0"
      },
      {
        "input": "s = \"DBACBADC\"",
        "output": "8"
      },
      {
        "input": "s = \"ACDBACDBACDBACDB\"",
        "output": "0"
      },
      {
        "input": "s = \"BACDBACDBACDBACDBACD\"",
        "output": "2"
      },
      {
        "input": "s = \"AAAAAAAA\"",
        "output": "8"
      },
      {
        "input": "s = \"CDABCDABCDABCDABCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"CDABCDABCDABCDABCDABCDABCDABCDABCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"CDCDCDCDCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABACBCADCD\"",
        "output": "6"
      },
      {
        "input": "s = \"ABCDABCDBACDBACD\"",
        "output": "2"
      },
      {
        "input": "s = \"ABABCDABABCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDDCBA\"",
        "output": "4"
      },
      {
        "input": "s = \"ABCDABCDABCDABCDABCDABCDABCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"BACDBACDBACDBACD\"",
        "output": "2"
      },
      {
        "input": "s = \"XYZ\"",
        "output": "3"
      },
      {
        "input": "s = \"ABABABABABABABABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"BBBBBBBBBBBBBBBB\"",
        "output": "16"
      },
      {
        "input": "s = \"CDCDCDABABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"AAAAAAAAAAAAAAAA\"",
        "output": "16"
      },
      {
        "input": "s = \"BBBBBBBB\"",
        "output": "8"
      },
      {
        "input": "s = \"CDCDABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"CDABCDABCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDABCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"CDABCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDABCDABCDBACD\"",
        "output": "2"
      },
      {
        "input": "s = \"ACBDCDBDCBDCB\"",
        "output": "11"
      },
      {
        "input": "s = \"ABABABABABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"AAAAABBBBB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDBCDABCDBCDABCDBCDABCDBCD\"",
        "output": "4"
      },
      {
        "input": "s = \"ABABABABABABABABABABABABABABABABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"BBCCCDDDAABB\"",
        "output": "2"
      },
      {
        "input": "s = \"ABCCBAABCCBA\"",
        "output": "8"
      },
      {
        "input": "s = \"ACBDABFCDC\"",
        "output": "6"
      },
      {
        "input": "s = \"ABCDABCDABCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"BBBBBAAAAA\"",
        "output": "10"
      },
      {
        "input": "s = \"FFFFFFFFFFFFFFFF\"",
        "output": "16"
      },
      {
        "input": "s = \"CABACDBABC\"",
        "output": "2"
      },
      {
        "input": "s = \"CDCDCDCDCDABABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABDCDCCCDA\"",
        "output": "4"
      },
      {
        "input": "s = \"ACBDACBDACBD\"",
        "output": "12"
      },
      {
        "input": "s = \"AACBBCCDAD\"",
        "output": "8"
      },
      {
        "input": "s = \"ABCDCBAABCDBCD\"",
        "output": "2"
      },
      {
        "input": "s = \"ABCDABCDBACD\"",
        "output": "2"
      },
      {
        "input": "s = \"DCBADCBABC\"",
        "output": "8"
      },
      {
        "input": "s = \"BACDBACDBACDB\"",
        "output": "1"
      },
      {
        "input": "s = \"ABCDABCDBACDAB\"",
        "output": "2"
      },
      {
        "input": "s = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
        "output": "40"
      },
      {
        "input": "s = \"FCABFCABFCABFCABFCAB\"",
        "output": "10"
      },
      {
        "input": "s = \"FCABFCABFCAB\"",
        "output": "6"
      },
      {
        "input": "s = \"BACDBACDBACDBACDBACDBACDBACDBACDBACDB\"",
        "output": "1"
      },
      {
        "input": "s = \"ABCDABCDBABD\"",
        "output": "2"
      },
      {
        "input": "s = \"ACBACDBCDB\"",
        "output": "4"
      },
      {
        "input": "s = \"ABACDABACDABACD\"",
        "output": "3"
      },
      {
        "input": "s = \"BACDBACDBACDBACDBACDBACD\"",
        "output": "2"
      },
      {
        "input": "s = \"ABABABABABABABABABABABABAB\"",
        "output": "0"
      },
      {
        "input": "s = \"BACDBACDBACD\"",
        "output": "2"
      },
      {
        "input": "s = \"CDCDCDCDCDCDCDCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDBCDBCDABCDBCDABCDBCDABCDBCD\"",
        "output": "5"
      },
      {
        "input": "s = \"ABCDABCDBABC\"",
        "output": "2"
      },
      {
        "input": "s = \"ABCDABCDBABCDABCDBABCDABCDBAB\"",
        "output": "3"
      },
      {
        "input": "s = \"ABCDABCDCDAB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDEFGHABCD\"",
        "output": "4"
      },
      {
        "input": "s = \"AAAAAAAAAABBBBBBBBBB\"",
        "output": "0"
      },
      {
        "input": "s = \"BBBBBBBBBAAAAAAAAABBBBBBBBBBAAAAAAAAAA\"",
        "output": "20"
      },
      {
        "input": "s = \"AABABBCCDDBBCC\"",
        "output": "4"
      },
      {
        "input": "s = \"ABCDABCDABCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ACDBACDBACDB\"",
        "output": "0"
      },
      {
        "input": "s = \"BACDBACDBABCDABCD\"",
        "output": "1"
      },
      {
        "input": "s = \"DCABDCABDCABDCABDCABDCABDCABDCABDCABDCABDCAB\"",
        "output": "2"
      },
      {
        "input": "s = \"ABACADABAD\"",
        "output": "6"
      },
      {
        "input": "s = \"ABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"BBBBBBBBBAAAAAAAAA\"",
        "output": "18"
      },
      {
        "input": "s = \"ABCDABCDABCDABCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABABABABCDABCDBACDBACD\"",
        "output": "2"
      },
      {
        "input": "s = \"DCDABABABABABABCD\"",
        "output": "1"
      },
      {
        "input": "s = \"ABABABABCDABCDBACDBACDABABABAB\"",
        "output": "2"
      },
      {
        "input": "s = \"CDCDCDCDCDCDCDCDCDCDCDCD\"",
        "output": "0"
      },
      {
        "input": "s = \"ACDBACDB\"",
        "output": "0"
      },
      {
        "input": "s = \"ABABCDABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"AACBBCCCDD\"",
        "output": "6"
      },
      {
        "input": "s = \"ABABABABABABCD\"",
        "output": "0"
      },
      {
        "input": "s = \"AACCBBAADD\"",
        "output": "10"
      },
      {
        "input": "s = \"ABABCDABABCDABCD\"",
        "output": "0"
      }
    ]
  },
  {
    "id": 575,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table"
    ],
    "problemDescription": "Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\nThe doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\nGiven the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.\n\u00a0\nExample 1:\n\nInput: candyType = [1,1,2,2,3,3]\nOutput: 3\nExplanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\n\nExample 2:\n\nInput: candyType = [1,1,2,3]\nOutput: 2\nExplanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.\n\nExample 3:\n\nInput: candyType = [6,6,6,6]\nOutput: 1\nExplanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\n\n\u00a0\nConstraints:\n\nn == candyType.length\n2 <= n <= 104\nn\u00a0is even.\n-105 <= candyType[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def distributeCandies(self, candyType: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "candyType = [1,2,1,3,1,2,1,3,1,2]",
        "output": "3"
      },
      {
        "input": "candyType = [1,1,2,3]",
        "output": "2"
      },
      {
        "input": "candyType = [1,1,1,2,2,2]",
        "output": "2"
      },
      {
        "input": "candyType = [0,0,0,0,0,0]",
        "output": "1"
      },
      {
        "input": "candyType = [100000,100000,-100000,-100000,50000,50000]",
        "output": "3"
      },
      {
        "input": "candyType = [-1,-2,-3,-1,-2,-3]",
        "output": "3"
      },
      {
        "input": "candyType = [1,2,3,1,2,3,1,2,3,1]",
        "output": "3"
      },
      {
        "input": "candyType = [1,2,3,1,2,3]",
        "output": "3"
      },
      {
        "input": "candyType = [-1,-1,0,0,1,1]",
        "output": "3"
      },
      {
        "input": "candyType = [100000,-100000,100000,-100000,100000,-100000]",
        "output": "2"
      },
      {
        "input": "candyType = [1,2,3,4]",
        "output": "2"
      },
      {
        "input": "candyType = [1,2,3,4,5,6]",
        "output": "3"
      },
      {
        "input": "candyType = [1,2,1,2,1,2]",
        "output": "2"
      },
      {
        "input": "candyType = [-1,-2,-3,-4,-5,-6]",
        "output": "3"
      },
      {
        "input": "candyType = [1,1,2,2,3,3]",
        "output": "3"
      },
      {
        "input": "candyType = [100000,-100000,100000,-100000,0,0]",
        "output": "3"
      },
      {
        "input": "candyType = [6,6,6,6]",
        "output": "1"
      },
      {
        "input": "candyType = [1,1,1,1,2,2,2,2]",
        "output": "2"
      },
      {
        "input": "candyType = [1,1,1,2,2,2,3,3,3,4]",
        "output": "4"
      },
      {
        "input": "candyType = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,2,3,4,6,7,8,9,10,11]",
        "output": "11"
      },
      {
        "input": "candyType = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "25"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,1,1,1,2,2,2]",
        "output": "20"
      },
      {
        "input": "candyType = [-1, -2, -2, -3, -3, -4, -4, -4, -5, -5, -5, -5, -6, -6, -7, -7, -7, -7, -8, -8]",
        "output": "8"
      },
      {
        "input": "candyType = [-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "2"
      },
      {
        "input": "candyType = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20]",
        "output": "20"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "15"
      },
      {
        "input": "candyType = [-50000, 50000, -49999, 49999, -49998, 49998, -49997, 49997, -49996, 49996, -49995, 49995, -49994, 49994, -49993, 49993, -49992, 49992, -49991, 49991]",
        "output": "10"
      },
      {
        "input": "candyType = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "2"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "candyType = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "2"
      },
      {
        "input": "candyType = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4]",
        "output": "4"
      },
      {
        "input": "candyType = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,1,1,1,2,2,2,3,3,3]",
        "output": "10"
      },
      {
        "input": "candyType = [-50000, -49999, -49998, -49997, -49996, -49995, -49994, -49993, -49992, -49991, 50000, 49999, 49998, 49997, 49996, 49995, 49994, 49993, 49992, 49991]",
        "output": "10"
      },
      {
        "input": "candyType = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
        "output": "10"
      },
      {
        "input": "candyType = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18]",
        "output": "18"
      },
      {
        "input": "candyType = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "2"
      },
      {
        "input": "candyType = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "candyType = [-50000, 50000, -40000, 40000, -30000, 30000, -20000, 20000, -10000, 10000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "10"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1,1,1,1]",
        "output": "15"
      },
      {
        "input": "candyType = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "candyType = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "12"
      },
      {
        "input": "candyType = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]",
        "output": "11"
      },
      {
        "input": "candyType = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "1"
      },
      {
        "input": "candyType = [10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,20000,20000,20000,20000,20000,20000,20000,20000,20000,20000]",
        "output": "2"
      },
      {
        "input": "candyType = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19]",
        "output": "19"
      },
      {
        "input": "candyType = [-50000, -49999, -49998, -49997, 49998, 49999, 50000, 50001, 50002, 50003]",
        "output": "5"
      },
      {
        "input": "candyType = [10,20,30,40,50,60,70,80,90,100,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "15"
      },
      {
        "input": "candyType = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "candyType = [10,10,10,10,10,10,20,20,20,20,20,20,30,30,30,30,30,30,40,40,40,40,40,40,50,50,50,50,50,50]",
        "output": "5"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2]",
        "output": "10"
      },
      {
        "input": "candyType = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6]",
        "output": "6"
      },
      {
        "input": "candyType = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19]",
        "output": "19"
      },
      {
        "input": "candyType = [1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4]",
        "output": "4"
      },
      {
        "input": "candyType = [100,200,300,400,500,100,200,300,400,500,100,200,300,400,500,100,200,300,400,500,100,200,300,400,500,100,200,300,400,500,100,200,300,400,500]",
        "output": "5"
      },
      {
        "input": "candyType = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]",
        "output": "8"
      },
      {
        "input": "candyType = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "candyType = [100,200,300,400,500,600,700,800,900,1000,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "25"
      },
      {
        "input": "candyType = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "2"
      },
      {
        "input": "candyType = [100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "2"
      },
      {
        "input": "candyType = [10000,20000,30000,40000,50000,10000,20000,30000,40000,50000,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "15"
      },
      {
        "input": "candyType = [10,10,10,10,10,10,10,10,10,10,20,20,20,20,20,20,20,20,20,20,30,30,30,30,30,30,30,30,30,30,40,40,40,40,40,40,40,40,40,40]",
        "output": "4"
      },
      {
        "input": "candyType = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16]",
        "output": "16"
      },
      {
        "input": "candyType = [-50000,-40000,-30000,-20000,-10000,0,10000,20000,30000,40000,50000,-50000,-40000,-30000,-20000,-10000,0,10000,20000,30000,40000]",
        "output": "10"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "20"
      },
      {
        "input": "candyType = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "10"
      },
      {
        "input": "candyType = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20]",
        "output": "18"
      },
      {
        "input": "candyType = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30]",
        "output": "30"
      },
      {
        "input": "candyType = [50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50001, 50001, 50001, 50001, 50001, 50001, 50001, 50001, 50001, 50001]",
        "output": "2"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "candyType = [5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8]",
        "output": "4"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]",
        "output": "16"
      },
      {
        "input": "candyType = [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6]",
        "output": "7"
      },
      {
        "input": "candyType = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
        "output": "4"
      },
      {
        "input": "candyType = [-1, -1, -2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -7, -7, -8, -8, -9, -9, -10, -10, -11, -11, -12, -12, -13, -13, -14, -15]",
        "output": "14"
      },
      {
        "input": "candyType = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]",
        "output": "15"
      },
      {
        "input": "candyType = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]",
        "output": "5"
      },
      {
        "input": "candyType = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "15"
      },
      {
        "input": "candyType = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8]",
        "output": "8"
      },
      {
        "input": "candyType = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "20"
      },
      {
        "input": "candyType = [100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-100000,-1,2,3,4,5,6,7,8,9,10]",
        "output": "12"
      },
      {
        "input": "candyType = [-100000,-99999,-99998,-99997,-99996,-99995,-99994,-99993,-99992,-99991,-99990,-99989,-99988,-99987,-99986,-99985,-99984,-99983,-99982,-99981,-99980,-99979,-99978,-99977,-99976,-99975,-99974,-99973,-99972,-99971,-99970,-99969,-99968,-99967,-99966,-99965]",
        "output": "18"
      },
      {
        "input": "candyType = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8]",
        "output": "8"
      },
      {
        "input": "candyType = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10]",
        "output": "10"
      },
      {
        "input": "candyType = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 15]",
        "output": "14"
      },
      {
        "input": "candyType = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "candyType = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "candyType = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "2"
      },
      {
        "input": "candyType = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6]",
        "output": "6"
      },
      {
        "input": "candyType = [99999,99998,99997,99996,99995,99994,99993,99992,99991,99990,99989,99988,99987,99986,99985,99984,99983,99982,99981,99980,99979,99978,99977,99976,99975,99974,99973,99972,99971,99970]",
        "output": "15"
      },
      {
        "input": "candyType = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8]",
        "output": "8"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "10"
      },
      {
        "input": "candyType = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15]",
        "output": "15"
      },
      {
        "input": "candyType = [-50000,-50000,-50000,-50000,-50000,-50000,-50000,-50000,-50000,-50000,50000,50000,50000,50000,50000,50000,50000,50000,50000,50000]",
        "output": "2"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "20"
      },
      {
        "input": "candyType = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "15"
      },
      {
        "input": "candyType = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "2"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "candyType = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "3"
      },
      {
        "input": "candyType = [10,10,10,10,20,20,20,20,30,30,30,30,40,40,40,40,50,50,50,50,60,60,60,60,70,70,70,70,80,80,80,80,90,90,90,90]",
        "output": "9"
      },
      {
        "input": "candyType = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14]",
        "output": "14"
      },
      {
        "input": "candyType = [10000, 10000, 9999, 9999, 8888, 8888, 7777, 7777, 6666, 6666, 5555, 5555, 4444, 4444, 3333, 3333, 2222, 2222, 1111, 1111]",
        "output": "10"
      },
      {
        "input": "candyType = [1,2,2,3,3,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9]",
        "output": "9"
      },
      {
        "input": "candyType = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "candyType = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8]",
        "output": "8"
      },
      {
        "input": "candyType = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]",
        "output": "15"
      },
      {
        "input": "candyType = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3]",
        "output": "3"
      }
    ]
  },
  {
    "id": 892,
    "difficulty": "Easy",
    "tags": [
      "Geometry",
      "Array",
      "Math",
      "Matrix"
    ],
    "problemDescription": "You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\nReturn the total surface area of the resulting shapes.\nNote: The bottom face of each shape counts toward its surface area.\n\u00a0\nExample 1:\n\n\nInput: grid = [[1,2],[3,4]]\nOutput: 34\n\nExample 2:\n\n\nInput: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 32\n\nExample 3:\n\n\nInput: grid = [[2,2,2],[2,1,2],[2,2,2]]\nOutput: 46\n\n\u00a0\nConstraints:\n\nn == grid.length == grid[i].length\n1 <= n <= 50\n0 <= grid[i][j] <= 50\n\n",
    "starterCode": "class Solution:\n    def surfaceArea(self, grid: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "grid = [[3,3,3],[3,3,3],[3,3,3]]",
        "output": "54"
      },
      {
        "input": "grid = [[2,2,2],[2,1,2],[2,2,2]]",
        "output": "46"
      },
      {
        "input": "grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "output": "32"
      },
      {
        "input": "grid = [[50,50,50],[50,50,50],[50,50,50]]",
        "output": "618"
      },
      {
        "input": "grid = [[1,2],[3,4]]",
        "output": "34"
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[1,0,0],[0,1,0],[0,0,1]]",
        "output": "18"
      },
      {
        "input": "grid = [[1,2,3,4],[4,3,2,1],[1,4,2,3],[3,2,4,1]]",
        "output": "110"
      },
      {
        "input": "grid = [[1,0,0,0,1],[0,1,0,1,0],[0,0,1,0,0],[0,1,0,1,0],[1,0,0,0,1]]",
        "output": "54"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]",
        "output": "204"
      },
      {
        "input": "grid = [[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1]]",
        "output": "78"
      },
      {
        "input": "grid = [[1,2,3,4,5],[5,4,3,2,1],[1,3,5,3,1],[5,3,1,3,5],[1,5,3,5,1]]",
        "output": "188"
      },
      {
        "input": "grid = [[5,5,5,5],[5,5,5,5],[5,5,5,5],[5,5,5,5]]",
        "output": "112"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,0,1,0,1],[1,1,1,1,1],[1,0,1,0,1],[1,1,1,1,1]]",
        "output": "78"
      },
      {
        "input": "grid = [[1,1,1,1],[1,0,0,1],[1,0,0,1],[1,1,1,1]]",
        "output": "48"
      },
      {
        "input": "grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]",
        "output": "228"
      },
      {
        "input": "grid = [[1,2,3,4,5],[0,9,8,7,6],[1,2,3,4,5],[6,7,8,9,0],[5,4,3,2,1]]",
        "output": "218"
      },
      {
        "input": "grid = [[3,2,1],[1,3,2],[2,1,3]]",
        "output": "58"
      },
      {
        "input": "grid = [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]]",
        "output": "30"
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,1,1,1,0],[0,1,0,1,0],[0,1,1,1,0],[0,0,0,0,0]]",
        "output": "32"
      },
      {
        "input": "grid = [[2,2,2,2,2],[2,1,1,1,2],[2,1,2,1,2],[2,1,1,1,2],[2,2,2,2,2]]",
        "output": "106"
      },
      {
        "input": "grid = [[2,2,2,2,2],[2,1,1,1,2],[2,1,0,1,2],[2,1,1,1,2],[2,2,2,2,2]]",
        "output": "104"
      },
      {
        "input": "grid = [[10,0,10,0,10],[0,10,0,10,0],[10,0,10,0,10],[0,10,0,10,0],[10,0,10,0,10]]",
        "output": "546"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]",
        "output": "70"
      },
      {
        "input": "grid = [[10,10,10],[10,1,10],[10,10,10]]",
        "output": "174"
      },
      {
        "input": "grid = [[5,4,3,2,1],[4,3,2,1,0],[3,2,1,0,0],[2,1,0,0,0],[1,0,0,0,0]]",
        "output": "90"
      },
      {
        "input": "grid = [[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0],[1,0,1,0,1],[0,1,0,1,0]]",
        "output": "72"
      },
      {
        "input": "grid = [[0,0,1,1],[0,0,1,1],[1,1,0,0],[1,1,0,0]]",
        "output": "32"
      },
      {
        "input": "grid = [[5,0,0,5],[0,5,5,0],[0,5,5,0],[5,0,0,5]]",
        "output": "136"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,1,2,3,2,0],[0,2,3,4,3,0],[0,1,2,3,2,0],[0,0,0,0,0,0]]",
        "output": "68"
      },
      {
        "input": "grid = [[0,0,0,0],[0,9,0,0],[0,0,0,0],[0,0,0,0]]",
        "output": "38"
      },
      {
        "input": "grid = [[5,5,5],[5,0,5],[5,5,5]]",
        "output": "96"
      },
      {
        "input": "grid = [[4,5,6,7],[8,9,10,11],[12,13,14,15],[16,17,18,19]]",
        "output": "276"
      },
      {
        "input": "grid = [[1,2,3,4,5],[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1],[1,2,3,4,5]]",
        "output": "178"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,1,1,0,0],[0,0,1,1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]",
        "output": "16"
      },
      {
        "input": "grid = [[1,1,1,1,1,1],[1,0,0,0,0,1],[1,0,1,1,0,1],[1,0,1,1,0,1],[1,0,0,0,0,1],[1,1,1,1,1,1]]",
        "output": "96"
      },
      {
        "input": "grid = [[0,0,0,0],[0,1,2,0],[0,2,1,0],[0,0,0,0]]",
        "output": "24"
      },
      {
        "input": "grid = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]",
        "output": "0"
      },
      {
        "input": "grid = [[5,3,5,4],[3,2,3,1],[5,1,5,3],[4,1,4,2]]",
        "output": "132"
      },
      {
        "input": "grid = [[4,3,2,1,0],[3,2,1,0,4],[2,1,0,4,3],[1,0,4,3,2],[0,4,3,2,1]]",
        "output": "144"
      },
      {
        "input": "grid = [[3,2,1,0],[1,1,1,1],[0,1,2,3],[4,3,2,1]]",
        "output": "82"
      },
      {
        "input": "grid = [[10,0,10],[0,20,0],[10,0,10]]",
        "output": "250"
      },
      {
        "input": "grid = [[1,2,3],[2,3,4],[3,4,5]]",
        "output": "66"
      },
      {
        "input": "grid = [[4,0,0,0,0],[0,4,0,0,0],[0,0,4,0,0],[0,0,0,4,0],[0,0,0,0,4]]",
        "output": "90"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,1,0,0],[0,1,2,1,0],[0,0,1,0,0],[0,0,0,0,0]]",
        "output": "26"
      },
      {
        "input": "grid = [[0,1,2,3,4],[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8]]",
        "output": "168"
      },
      {
        "input": "grid = [[3,3,3,3],[3,0,0,3],[3,0,0,3],[3,3,3,3]]",
        "output": "96"
      },
      {
        "input": "grid = [[1,2,3,4],[4,3,2,1],[1,2,3,4],[4,3,2,1]]",
        "output": "108"
      },
      {
        "input": "grid = [[1,2,3,4,5],[0,0,0,0,0],[5,4,3,2,1],[1,1,1,1,1],[2,3,4,5,6]]",
        "output": "164"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,2,2,2,1],[1,2,3,2,1],[1,2,2,2,1],[1,1,1,1,1]]",
        "output": "86"
      },
      {
        "input": "grid = [[4,3,2,1],[3,2,1,4],[2,1,4,3],[1,4,3,2]]",
        "output": "108"
      },
      {
        "input": "grid = [[3,0,2,4],[0,1,3,0],[2,0,1,1],[4,0,0,2]]",
        "output": "92"
      },
      {
        "input": "grid = [[3,4,5,6],[5,6,7,8],[7,8,9,10],[9,10,11,12]]",
        "output": "188"
      },
      {
        "input": "grid = [[1,1,1,1,1,1],[1,0,0,0,0,1],[1,0,1,1,0,1],[1,0,1,0,1,1],[1,0,0,0,0,1],[1,1,1,1,1,1]]",
        "output": "98"
      },
      {
        "input": "grid = [[3,3,3,3],[3,2,2,3],[3,2,2,3],[3,3,3,3]]",
        "output": "88"
      },
      {
        "input": "grid = [[1,1,1,1,1],[1,2,2,2,1],[1,2,0,2,1],[1,2,2,2,1],[1,1,1,1,1]]",
        "output": "88"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1],[1,2,3,4,5,6,7,8,9]]",
        "output": "734"
      },
      {
        "input": "grid = [[4,0,4,0,4],[0,3,0,3,0],[4,0,4,0,4],[0,3,0,3,0],[4,0,4,0,4]]",
        "output": "218"
      },
      {
        "input": "grid = [[3,0,3],[0,4,0],[3,0,3]]",
        "output": "74"
      },
      {
        "input": "grid = [[1,2,3,4,5],[5,4,3,2,1],[1,3,5,3,1],[2,4,6,4,2],[1,3,5,3,1]]",
        "output": "160"
      },
      {
        "input": "grid = [[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1]]",
        "output": "46"
      },
      {
        "input": "grid = [[0,0,5,0],[0,0,5,0],[0,0,5,0],[0,0,5,0]]",
        "output": "58"
      },
      {
        "input": "grid = [[5,5,5,5,5,5],[5,0,0,0,0,5],[5,0,1,1,0,5],[5,0,1,1,0,5],[5,0,0,0,0,5],[5,5,5,5,5,5]]",
        "output": "256"
      },
      {
        "input": "grid = [[4,3,2,1],[3,2,1,0],[2,1,0,1],[1,0,1,2]]",
        "output": "78"
      },
      {
        "input": "grid = [[5,0,0,0,5],[0,3,0,3,0],[0,0,4,0,0],[0,3,0,3,0],[5,0,0,0,5]]",
        "output": "162"
      },
      {
        "input": "grid = [[0,1,2,3],[3,2,1,0],[0,1,0,1],[1,0,1,0]]",
        "output": "66"
      },
      {
        "input": "grid = [[10,20,30],[40,50,60],[70,80,90]]",
        "output": "858"
      },
      {
        "input": "grid = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]",
        "output": "48"
      },
      {
        "input": "grid = [[0,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]]",
        "output": "16"
      },
      {
        "input": "grid = [[5,0,0,0],[0,5,0,0],[0,0,5,0],[0,0,0,5]]",
        "output": "88"
      },
      {
        "input": "grid = [[3,0,2,1],[1,2,0,3],[4,1,2,2],[2,0,3,4]]",
        "output": "104"
      },
      {
        "input": "grid = [[1,0,0,1],[0,1,1,0],[0,1,1,0],[1,0,0,1]]",
        "output": "40"
      },
      {
        "input": "grid = [[0,5,0,5],[5,0,5,0],[0,5,0,5],[5,0,5,0]]",
        "output": "176"
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,1,1,1,0],[0,1,2,1,0],[0,1,1,1,0],[0,0,0,0,0]]",
        "output": "34"
      },
      {
        "input": "grid = [[5,0,5,0,5],[0,5,0,5,0],[5,0,5,0,5],[0,5,0,5,0],[5,0,5,0,5]]",
        "output": "286"
      },
      {
        "input": "grid = [[0,0,0,0,0,0],[0,1,2,3,2,0],[0,2,3,4,3,0],[0,3,4,5,4,0],[0,2,3,4,3,0],[0,0,0,0,0,0]]",
        "output": "96"
      },
      {
        "input": "grid = [[5,5,5,5,5],[5,4,4,4,5],[5,4,3,4,5],[5,4,4,4,5],[5,5,5,5,5]]",
        "output": "166"
      }
    ]
  },
  {
    "id": 2389,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array",
      "Binary Search",
      "Prefix Sum",
      "Sorting"
    ],
    "problemDescription": "You are given an integer array nums of length n, and an integer array queries of length m.\nReturn an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\u00a0\nExample 1:\n\nInput: nums = [4,5,2,1], queries = [3,10,21]\nOutput: [2,3,4]\nExplanation: We answer the queries as follows:\n- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.\n- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.\n- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4.\n\nExample 2:\n\nInput: nums = [2,3,4,5], queries = [1]\nOutput: [0]\nExplanation: The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.\n\u00a0\nConstraints:\n\nn == nums.length\nm == queries.length\n1 <= n, m <= 1000\n1 <= nums[i], queries[i] <= 106\n\n",
    "starterCode": "class Solution:\n    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,3,4,5], queries = [1,2,3,4,5]",
        "output": "[1, 1, 2, 2, 2]"
      },
      {
        "input": "nums = [10,20,30], queries = [10,25,50,70]",
        "output": "[1, 1, 2, 3]"
      },
      {
        "input": "nums = [10,20,30], queries = [5,15,25,35]",
        "output": "[0, 1, 1, 2]"
      },
      {
        "input": "nums = [10,20,30], queries = [10,25,50,60]",
        "output": "[1, 1, 2, 3]"
      },
      {
        "input": "nums = [5,4,3,2,1], queries = [1,2,3,4,5]",
        "output": "[1, 1, 2, 2, 2]"
      },
      {
        "input": "nums = [4,5,2,1], queries = [3,10,21]",
        "output": "[2, 3, 4]"
      },
      {
        "input": "nums = [10,20,30,40,50], queries = [100,200,300,400,500]",
        "output": "[4, 5, 5, 5, 5]"
      },
      {
        "input": "nums = [5,5,5,5,5], queries = [1,5,10,15,25]",
        "output": "[0, 1, 2, 3, 5]"
      },
      {
        "input": "nums = [2,3,4,5], queries = [1]",
        "output": "[0]"
      },
      {
        "input": "nums = [1,1,1,1,1], queries = [1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [10,20,30], queries = [5,15,25,35,45]",
        "output": "[0, 1, 1, 2, 2]"
      },
      {
        "input": "nums = [10,20,30], queries = [15,25,35,45]",
        "output": "[1, 1, 2, 2]"
      },
      {
        "input": "nums = [1,2,3,4,5], queries = [15,10,5]",
        "output": "[5, 4, 2]"
      },
      {
        "input": "nums = [1,2,3,4,5], queries = [15,10,5,3,1]",
        "output": "[5, 4, 2, 2, 1]"
      },
      {
        "input": "nums = [1,2,3,4,5], queries = [15,10,5,3]",
        "output": "[5, 4, 2, 2]"
      },
      {
        "input": "nums = [5,4,3,2,1], queries = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 1, 2, 2, 2, 3, 3, 3, 3, 4]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], queries = [55]",
        "output": "[10]"
      },
      {
        "input": "nums = [1000000], queries = [1000000]",
        "output": "[1]"
      },
      {
        "input": "nums = [5,5,5,5,5], queries = [5,10,15,20,25]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [1,1000000], queries = [1000000]",
        "output": "[1]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], queries = [5, 10, 15, 20, 25, 30]",
        "output": "[5, 10, 15, 20, 20, 20]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], queries = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105]",
        "output": "[1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6]"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], queries = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "[1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], queries = [5,15,25,35,45,55,65,75,85,95,105,115,125,135,145,155,165,175,185,195]",
        "output": "[0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], queries = [55, 165, 275, 385, 495, 605, 715, 825, 935, 1045, 1155, 1265, 1375, 1485, 1595]",
        "output": "[2, 5, 6, 8, 9, 10, 11, 12, 13, 13, 14, 15, 15, 15, 15]"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], queries = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "[1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], queries = [10,20,30,40,50,60,70,80,90,100]",
        "output": "[3, 4, 5, 6, 7, 7, 8, 8, 9, 10]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], queries = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210]",
        "output": "[4, 5, 7, 8, 9, 10, 11, 12, 12, 13, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20]"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1,6,9,3,9,9,3,7,5,1,0,5,8,2,0,9,7,4,9,4,4,5,9,2,3,0,7,8,1,6,4,0,6,2,8,6,2,0,8,9,9,8,6,2,0,3,0,5,5,9,0,4,2,8,4,9,6,2,8,0,3,4,6,2,0,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1,6,9,3,9,9,3,7,5,1,0,5,8,2,0,9,7,4,9,4,4,5,9,2,3,0,7,8,1,6,4,0,6,2,8,6,2,0,8,9,9,8,6,2,0,3,0,5], queries = [50,100,150,200,250,300,350,400,450,500]",
        "output": "[49, 65, 78, 89, 99, 107, 115, 122, 129, 135]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], queries = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "[2, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], queries = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "[1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70,77,84,91,98,105], queries = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], queries = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195]",
        "output": "[1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], queries = [1,5,15,30,50,75,105,140,180,225,275,330,385,440,500]",
        "output": "[1, 2, 5, 7, 9, 11, 14, 15, 15, 15, 15, 15, 15, 15, 15]"
      },
      {
        "input": "nums = [100, 10, 1, 50, 20, 60], queries = [50, 150, 200, 300, 400]",
        "output": "[3, 5, 5, 6, 6]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], queries = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140,145,150]",
        "output": "[1, 2, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], queries = [10, 30, 60, 100, 150, 210, 280, 360, 450, 550]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], queries = [55, 45, 35, 25, 15, 5, 0]",
        "output": "[10, 9, 7, 6, 5, 2, 0]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], queries = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39]",
        "output": "[1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6]"
      },
      {
        "input": "nums = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991], queries = [1000000, 1999998, 2999995, 3999990, 4999982, 5999969, 6999949, 7999924, 8999884, 9999828]",
        "output": "[1, 2, 3, 4, 5, 6, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [1,2,4,8,16,32,64,128,256,512,1024], queries = [1,3,7,15,31,63,127,255,511,1023,2047]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], queries = [500,1500,2500,3500,4500,5500,6500,7500,8500,9500]",
        "output": "[2, 5, 6, 7, 9, 10, 10, 10, 10, 10]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], queries = [10,20,30,40,50,60,70,80,90,100]",
        "output": "[4, 5, 7, 8, 9, 10, 11, 12, 12, 13]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], queries = [10,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1050,1100,1150,1200,1250,1300,1350,1400,1450,1500]",
        "output": "[1, 2, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], queries = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "[5, 8, 10, 12, 13, 15, 16, 17, 18, 19]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1], queries = [0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3]"
      },
      {
        "input": "nums = [7, 3, 10, 1, 5, 2, 8, 6, 4, 9], queries = [15, 25, 30, 35, 40, 45, 50]",
        "output": "[5, 6, 7, 7, 8, 9, 9]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], queries = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1], queries = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[3, 4, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums = [5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,3,2,1,2,1,1], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26]"
      },
      {
        "input": "nums = [7,3,4,9,1], queries = [10,15,20,25,30,35,40]",
        "output": "[3, 4, 4, 5, 5, 5, 5]"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45], queries = [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87]",
        "output": "[1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [100,200,300,400,500], queries = [150, 300, 450, 600, 750, 900, 1050]",
        "output": "[1, 2, 2, 3, 3, 3, 4]"
      },
      {
        "input": "nums = [7,1,3,2,8,5,6,4], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], queries = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]",
        "output": "[10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]"
      },
      {
        "input": "nums = [300,200,100,400,500], queries = [50,150,250,350,450,550,650,750,850,950]",
        "output": "[0, 1, 1, 2, 2, 2, 3, 3, 3, 3]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97], queries = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,105,110,115,120,125,130]",
        "output": "[2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59], queries = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60]",
        "output": "[1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7]"
      },
      {
        "input": "nums = [50,40,30,20,10], queries = [5,15,25,35,45,55,65,75,85,95,105]",
        "output": "[0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4]"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7]"
      },
      {
        "input": "nums = [1,1000,2,999,3,998,4,997,5,996,6,995,7,994,8,993,9,992,10,991], queries = [500,1500,2500,3500,4500,5500,6500,7500,8500,9500]",
        "output": "[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
      },
      {
        "input": "nums = [987654321, 123456789, 234567890, 345678901, 456789012, 567890123, 678901234, 789012345, 890123456, 901234567], queries = [500000000, 1000000000, 1500000000, 2000000000, 2500000000, 3000000000]",
        "output": "[2, 3, 4, 5, 6, 6]"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], queries = [5,10,15,20,25,30,35,40,45,50]",
        "output": "[2, 4, 5, 5, 6, 7, 7, 8, 9, 9]"
      },
      {
        "input": "nums = [999999, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], queries = [1000000, 500000, 100000, 50000]",
        "output": "[19, 19, 19, 19]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], queries = [5,15,25,35,45,55,65,75,85,95,105,115,125,135,145,155,165,175,185,195]",
        "output": "[2, 5, 6, 7, 9, 10, 10, 11, 12, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 19]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], queries = [10, 30, 60, 100, 150, 210, 280, 360, 450, 550, 660, 780, 910, 1050, 1200, 1360, 1530, 1710, 1900, 2100]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1], queries = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 9]"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1], queries = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 7, 7, 7]"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000], queries = [50,150,250,350,450,550,650,750,850,950]",
        "output": "[0, 1, 1, 2, 2, 2, 3, 3, 3, 3]"
      },
      {
        "input": "nums = [123, 456, 789, 101112, 131415, 161718, 192021, 222324, 252627, 282930], queries = [1000, 10000, 100000, 1000000, 10000000]",
        "output": "[2, 3, 3, 8, 10]"
      },
      {
        "input": "nums = [1000000, 500000, 250000, 125000, 62500], queries = [100000, 250000, 500000, 750000, 1000000]",
        "output": "[1, 2, 3, 3, 4]"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], queries = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "[1, 2, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105], queries = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140]",
        "output": "[1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288], queries = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 2, 2, 3, 3, 4, 4, 4, 5, 5]"
      },
      {
        "input": "nums = [2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711], queries = [10, 100, 1000, 10000, 100000, 1000000]",
        "output": "[3, 7, 12, 16, 20, 20]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], queries = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "[1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], queries = [90,180,270,360,450,540,630,720,810,900,990]",
        "output": "[3, 5, 6, 8, 9, 9, 10, 10, 10, 10, 10]"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "[1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14]"
      },
      {
        "input": "nums = [9,7,5,3,1], queries = [5, 10, 15, 20, 25, 30]",
        "output": "[2, 3, 3, 4, 5, 5]"
      },
      {
        "input": "nums = [999999,999998,999997,999996,999995,999994,999993,999992,999991,999990], queries = [5000000,10000000,15000000,20000000,25000000]",
        "output": "[5, 10, 10, 10, 10]"
      },
      {
        "input": "nums = [3,1,4,1,5,9,2,6,5,3,5], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9]"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "[0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], queries = [1,50,100,150,200,250,300,350,400,450,500]",
        "output": "[1, 50, 100, 145, 145, 145, 145, 145, 145, 145, 145]"
      },
      {
        "input": "nums = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50], queries = [25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500]",
        "output": "[0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], queries = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[0, 1, 1, 2, 2, 3, 3, 4, 4, 5]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], queries = [1,3,6,10,15,21,28,36,45,55,66,78,91,105,120]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "nums = [1000000, 500000, 250000, 125000, 62500, 31250, 15625, 7812, 3906, 1953], queries = [1000000, 1500000, 2000000, 2500000, 3000000, 3500000, 4000000, 4500000, 5000000]",
        "output": "[9, 9, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], queries = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050, 1150, 1250]",
        "output": "[0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], queries = [1, 5, 10, 20, 50, 100, 200, 500, 1000]",
        "output": "[1, 5, 10, 20, 50, 91, 91, 91, 91]"
      },
      {
        "input": "nums = [33, 21, 47, 55, 17, 82, 38, 67, 25, 12, 99, 78, 63, 44, 5, 85, 93, 4, 52, 36, 73, 29, 31, 88, 57, 90, 19, 15, 81, 77, 7, 48, 53, 18, 11, 34, 86, 59, 97, 40, 30, 92, 68, 49, 61, 50, 54, 91, 74, 75, 70, 60, 83, 64, 41, 87, 62, 24, 22, 27, 66, 35, 23, 58, 79, 98, 94, 39, 28, 20, 65, 43, 51, 46, 6, 95, 71, 1, 96, 3, 8, 9, 10, 13, 14, 16, 26, 32, 37, 42, 45, 56, 72, 80, 84, 89, 91], queries = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "[12, 18, 23, 26, 30, 33, 35, 38, 40, 43, 45, 47, 49, 51, 53]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5], queries = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], queries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "[1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9]"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10], queries = [10,30,60,100,150,210,280,360,450,550]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], queries = [50, 150, 250, 350, 450, 550, 650, 750, 850, 950, 1050, 1150, 1250, 1350, 1450, 1550]",
        "output": "[0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5]"
      },
      {
        "input": "nums = [500,400,300,200,100], queries = [150,250,350,450,550,650,750,850,950]",
        "output": "[1, 1, 2, 2, 2, 3, 3, 3, 3]"
      },
      {
        "input": "nums = [100,200,100,200,100,200,100,200,100,200,100,200,100,200,100,200,100,200,100,200], queries = [150,250,350,450,550,650,750,850,950,1050,1150,1250,1350,1450,1550]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], queries = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], queries = [150, 250, 350, 450, 550, 650, 750, 850, 950, 1050]",
        "output": "[5, 6, 7, 9, 10, 10, 10, 10, 10, 10]"
      }
    ]
  },
  {
    "id": 1346,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "Given an array arr of integers, check if there exist two indices i and j such that :\n\ni != j\n0 <= i, j < arr.length\narr[i] == 2 * arr[j]\n\n\u00a0\nExample 1:\n\nInput: arr = [10,2,5,3]\nOutput: true\nExplanation: For i = 0 and j = 2, arr[i] == 10 == 2 * 5 == 2 * arr[j]\n\nExample 2:\n\nInput: arr = [3,1,7,11]\nOutput: false\nExplanation: There is no i and j that satisfy the conditions.\n\n\u00a0\nConstraints:\n\n2 <= arr.length <= 500\n-103 <= arr[i] <= 103\n\n",
    "starterCode": "class Solution:\n    def checkIfExist(self, arr: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "arr = [2,4,6,8,10]",
        "output": "True"
      },
      {
        "input": "arr = [6,10,1,0,-3,3]",
        "output": "True"
      },
      {
        "input": "arr = [-3,-6,-1,0,1,2,3]",
        "output": "True"
      },
      {
        "input": "arr = [-2,-4,-6,-8,-10]",
        "output": "True"
      },
      {
        "input": "arr = [100,200,300,400,500]",
        "output": "True"
      },
      {
        "input": "arr = [1,2,4,8,16,32,64]",
        "output": "True"
      },
      {
        "input": "arr = [-10,-20,-5,-3]",
        "output": "True"
      },
      {
        "input": "arr = [1,2,3,6,12]",
        "output": "True"
      },
      {
        "input": "arr = [0,0]",
        "output": "True"
      },
      {
        "input": "arr = [1,2,4,8,16,32,64,128,256,512,1024]",
        "output": "True"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10]",
        "output": "True"
      },
      {
        "input": "arr = [-10,10]",
        "output": "False"
      },
      {
        "input": "arr = [10,2,5,3]",
        "output": "True"
      },
      {
        "input": "arr = [1,2,3,4,5]",
        "output": "True"
      },
      {
        "input": "arr = [1,2,3,4,5,6]",
        "output": "True"
      },
      {
        "input": "arr = [1,2,4,8,16]",
        "output": "True"
      },
      {
        "input": "arr = [-2,0,10,-19,4,6,-8]",
        "output": "False"
      },
      {
        "input": "arr = [1,3,5,7,9]",
        "output": "False"
      },
      {
        "input": "arr = [3,1,7,11]",
        "output": "False"
      },
      {
        "input": "arr = [-10,-20,-30,-40,-50]",
        "output": "True"
      },
      {
        "input": "arr = [-10,-5,-3,-1,2]",
        "output": "True"
      },
      {
        "input": "arr = [10, 5, 15, 20, 25]",
        "output": "True"
      },
      {
        "input": "arr = [1, -1, 2, -2, 4, -4, 8, -8, 16, -16]",
        "output": "True"
      },
      {
        "input": "arr = [-1, -2, -3, -4, -5, -6, -7, -8]",
        "output": "True"
      },
      {
        "input": "arr = [3, 6, 12, 24, 48, 96, 192, 384, 768, 1536]",
        "output": "True"
      },
      {
        "input": "arr = [2, 1, 4, 2, 8, 4, 16]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 3, 5, 6, 10, 20, 40]",
        "output": "True"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 30, 35, 40, 45]",
        "output": "True"
      },
      {
        "input": "arr = [-100, -50, -25, -12, -6, -3, -1, 0, 1, 2, 4]",
        "output": "True"
      },
      {
        "input": "arr = [4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "True"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 5]",
        "output": "True"
      },
      {
        "input": "arr = [-1, -2, -3, -4, -5, -10, -20]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256]",
        "output": "True"
      },
      {
        "input": "arr = [0, 0, 0, 0]",
        "output": "True"
      },
      {
        "input": "arr = [100, 50, 25, 12, 6, 3, 1]",
        "output": "True"
      },
      {
        "input": "arr = [101, 202, 50, 25, 12, 6, 3]",
        "output": "True"
      },
      {
        "input": "arr = [1000, 501, 250, 125, 62, 31, 15, 7, 3, 1]",
        "output": "True"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 30, 60]",
        "output": "True"
      },
      {
        "input": "arr = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]",
        "output": "False"
      },
      {
        "input": "arr = [100, 50, 25, 125, 625, 3125]",
        "output": "True"
      },
      {
        "input": "arr = [-1, 2, -3, 6, -4, 8]",
        "output": "False"
      },
      {
        "input": "arr = [-10, -20, 5, 3, 15]",
        "output": "True"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 250, 125]",
        "output": "True"
      },
      {
        "input": "arr = [-1, -2, -3, -6, -12]",
        "output": "True"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "True"
      },
      {
        "input": "arr = [100, 50, 25, 12.5, 6.25, 3.125, 1.5625]",
        "output": "True"
      },
      {
        "input": "arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "True"
      },
      {
        "input": "arr = [1, 0, 2, 0, 4, 0, 8, 0]",
        "output": "True"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200]",
        "output": "True"
      },
      {
        "input": "arr = [3, 6, 9, 18, 27, 54, 81]",
        "output": "True"
      },
      {
        "input": "arr = [7, 14, 21, 28, 35, 42, 49, 56]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 3, 6, 9, 18, 36, 72]",
        "output": "True"
      },
      {
        "input": "arr = [-1, -2, -3, -4, -5]",
        "output": "True"
      },
      {
        "input": "arr = [101, 202, 303, 404, 505, 606, 707, 808, 909, 1010]",
        "output": "True"
      },
      {
        "input": "arr = [1, 5, 10, 15, 20, 25, 50, 100]",
        "output": "True"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "True"
      },
      {
        "input": "arr = [2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "True"
      },
      {
        "input": "arr = [-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 3, 6, 12, 24, 48, 96, 192, 384]",
        "output": "True"
      },
      {
        "input": "arr = [-1, -2, -4, -8, -16]",
        "output": "True"
      },
      {
        "input": "arr = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100]",
        "output": "True"
      },
      {
        "input": "arr = [0, 0, 1, 2, 4]",
        "output": "True"
      },
      {
        "input": "arr = [11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 220, 330, 440, 550, 660, 770, 880, 990, 1100]",
        "output": "True"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 38]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 3, 5, 6, 10, 15, 20, 30, 60]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 2, 3, 4, 4, 5, 5, 6, 6]",
        "output": "True"
      },
      {
        "input": "arr = [-2, 2, -4, 4, -8, 8, -16, 16]",
        "output": "True"
      },
      {
        "input": "arr = [-10, -5, -15, -20, -25]",
        "output": "True"
      },
      {
        "input": "arr = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]",
        "output": "True"
      },
      {
        "input": "arr = [-1, 1, -2, 2, -4, 4, 8, -8]",
        "output": "True"
      },
      {
        "input": "arr = [0, 1, 2, 3, 6, 12, 24, 48, 96]",
        "output": "True"
      },
      {
        "input": "arr = [13, 26, 52, 104, 208, 416]",
        "output": "True"
      },
      {
        "input": "arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "True"
      },
      {
        "input": "arr = [-5, 10, -15, 20, -25, 50, -75]",
        "output": "True"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 50, 75]",
        "output": "True"
      },
      {
        "input": "arr = [21, 42, 84, 168, 336, 672, 1344]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "True"
      },
      {
        "input": "arr = [5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560]",
        "output": "True"
      },
      {
        "input": "arr = [6, 12, 18, 24, 48]",
        "output": "True"
      },
      {
        "input": "arr = [1, 0, 2, 0, 4, 0, 8, 0, 16, 0]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 3, 6, 12, 24, 48, 96]",
        "output": "True"
      },
      {
        "input": "arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 40]",
        "output": "True"
      },
      {
        "input": "arr = [1000, -500, 250, -125, 62.5, 31.25]",
        "output": "True"
      },
      {
        "input": "arr = [-1, 2, -2, 4, -4, 8]",
        "output": "True"
      },
      {
        "input": "arr = [15, 30, 45, 60, 75, 90, 105, 120, 135, 150]",
        "output": "True"
      },
      {
        "input": "arr = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "True"
      },
      {
        "input": "arr = [1, 5, 25, 125, 625, 3125, 15625, 78125]",
        "output": "False"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "True"
      },
      {
        "input": "arr = [1, 1, 1, 2, 2, 2, 4, 4, 4, 8, 8, 8]",
        "output": "True"
      },
      {
        "input": "arr = [15, 30, 45, 90, 135, 270]",
        "output": "True"
      },
      {
        "input": "arr = [-10, -5, -1, -2, -3, -4, -6, -8, -12, -16]",
        "output": "True"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 1000, 2000]",
        "output": "True"
      },
      {
        "input": "arr = [10, 20, 40, 80, 160, 320, 640]",
        "output": "True"
      },
      {
        "input": "arr = [-10, -5, 0, 5, 10]",
        "output": "True"
      },
      {
        "input": "arr = [-10, -20, -30, -40, -50, -100, -200, -300]",
        "output": "True"
      },
      {
        "input": "arr = [-3, -6, -9, -12, -15, -18, -21, -24]",
        "output": "True"
      },
      {
        "input": "arr = [3, 6, 12, 24, 48, 96, 192, 384]",
        "output": "True"
      },
      {
        "input": "arr = [0,0,0,0,0]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "True"
      },
      {
        "input": "arr = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1]",
        "output": "True"
      },
      {
        "input": "arr = [-5, -10, -15, -20, -25, -30, -35, -40, -45]",
        "output": "True"
      },
      {
        "input": "arr = [3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049]",
        "output": "False"
      },
      {
        "input": "arr = [1, 1, 2, 2, 4, 4, 8, 8, 16, 16]",
        "output": "True"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 10]",
        "output": "True"
      },
      {
        "input": "arr = [11, 22, 44, 88, 176, 352, 704]",
        "output": "True"
      },
      {
        "input": "arr = [0, 0, 0, 0, 0]",
        "output": "True"
      },
      {
        "input": "arr = [3, 6, 9, 12, 15, 18, 21, 24]",
        "output": "True"
      },
      {
        "input": "arr = [100, 51, 25, 12, 6, 3, 1]",
        "output": "True"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 17, 19, 21]",
        "output": "False"
      },
      {
        "input": "arr = [0, 1, 2, 4, 8, 16, 32]",
        "output": "True"
      },
      {
        "input": "arr = [0, 0, 0, 0, 0, 0]",
        "output": "True"
      },
      {
        "input": "arr = [1, 3, 9, 27, 81, 243, 729]",
        "output": "False"
      },
      {
        "input": "arr = [0, 1, 2, 3, 4, 8, 16]",
        "output": "True"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 50, 100]",
        "output": "True"
      },
      {
        "input": "arr = [9, 18, 36, 72, 144, 288, 576]",
        "output": "True"
      },
      {
        "input": "arr = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]",
        "output": "True"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 18, 36, 72]",
        "output": "True"
      },
      {
        "input": "arr = [7, 14, 28, 56, 112, 224, 448]",
        "output": "True"
      },
      {
        "input": "arr = [1000, 500, 250, 125, 62.5]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 3, 6, 12, 24, 48, 96, 192, 384, 768]",
        "output": "True"
      },
      {
        "input": "arr = [100, 50, 25, 12, 6, 3, 1, 0]",
        "output": "True"
      },
      {
        "input": "arr = [1, 5, 10, 20, 25, 50, 100]",
        "output": "True"
      },
      {
        "input": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 400, 500]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "True"
      },
      {
        "input": "arr = [-2, -4, -6, -8, -16]",
        "output": "True"
      },
      {
        "input": "arr = [-10, -20, -30, -200, -300, -150]",
        "output": "True"
      },
      {
        "input": "arr = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "True"
      },
      {
        "input": "arr = [0,1,2,4,8,16,32,64]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 3, 5, 6, 10, 15, 20, 30, 60, 120, 240]",
        "output": "True"
      },
      {
        "input": "arr = [100, 50, 25, 12, 6, 3, 1, 0, -1, -2, -4]",
        "output": "True"
      },
      {
        "input": "arr = [7, 14, 28, 56, 112, 224]",
        "output": "True"
      },
      {
        "input": "arr = [0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]",
        "output": "True"
      },
      {
        "input": "arr = [-5, -10, -15, -20, -25, -30, -35, -40, -45, -50]",
        "output": "True"
      },
      {
        "input": "arr = [7, 14, 28, 56, 112, 224, 448, 896]",
        "output": "True"
      },
      {
        "input": "arr = [23, 46, 69, 92, 115, 138, 161, 184, 207, 230, 115]",
        "output": "True"
      },
      {
        "input": "arr = [10, 5, 15, 20, 2, 25, 50]",
        "output": "True"
      },
      {
        "input": "arr = [-2, -4, -1, -3, -5, -10]",
        "output": "True"
      },
      {
        "input": "arr = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]",
        "output": "True"
      },
      {
        "input": "arr = [-1, -2, -4, -8, -16, -32, -64]",
        "output": "True"
      },
      {
        "input": "arr = [1, 1, 2, 2, 4, 4, 8, 8, 16, 16, 32, 32]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 3, 6, 9, 18, 27, 54]",
        "output": "True"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "True"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
        "output": "True"
      },
      {
        "input": "arr = [1, 0, 2, 0, 4, 0, 8, 0, 16, 0, 32, 0, 64, 0, 128, 0]",
        "output": "True"
      },
      {
        "input": "arr = [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]",
        "output": "True"
      },
      {
        "input": "arr = [-2, -4, -8, -16, -32, -64, -128]",
        "output": "True"
      }
    ]
  },
  {
    "id": 160,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "problemDescription": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\nFor example, the following two linked lists begin to intersect at node c1:\n\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\nNote that the linked lists must retain their original structure after the function returns.\nCustom Judge:\nThe inputs to the judge are given as follows (your program is not given these inputs):\n\nintersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\nlistA - The first linked list.\nlistB - The second linked list.\nskipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\nskipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\n\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.\n\u00a0\nExample 1:\n\n\nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.\n\nExample 2:\n\n\nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n\nExample 3:\n\n\nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n\n\u00a0\nConstraints:\n\nThe number of nodes of listA is in the m.\nThe number of nodes of listB is in the n.\n1 <= m, n <= 3 * 104\n1 <= Node.val <= 105\n0 <= skipA <= m\n0 <= skipB <= n\nintersectVal is 0 if listA and listB do not intersect.\nintersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.\n\n\u00a0\nFollow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "headA = [2,6,4], headB = [1,5], skipA = 3, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,9,1,2,4], headB = [3,2,4], skipA = 3, skipB = 1",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [4,1,8,4,5], headB = [5,6,1,8,4,5], skipA = 2, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9,11,13,15,17,19], headB = [2,4,6,8,10,12,14,16,18,15,17,19], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], headB = [16,17,18,19,20], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [10,9,8,7,6,5,4,3,2,1], skipA = 5, skipB = 9",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1], headB = [2,1], skipA = 0, skipB = 1",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,11,12,13,14,15,16,17,18,19,20], headB = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], skipA = 4, skipB = 9",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [7,8,9,10,11,12,13,14], headB = [1,2,3,4,5,6,14], skipA = 3, skipB = 6",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [11,12,13,14,15,6,7,8,9,10], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], headB = [21,22,15,16,17,18,19,20], skipA = 14, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [11,12,13,4,5,6,7,8,9,10], skipA = 3, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,4,3,2,1], headB = [7,6,5,4,3,2,1], skipA = 4, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [11,12,13,14,5,6,7,8,9,10], skipA = 4, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [100,200,300,400,500], headB = [1,2,3,400,500], skipA = 3, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80], headB = [79,78,77,76,75,74,73,72,71,80], skipA = 19, skipB = 9",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], headB = [16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,15], skipA = 14, skipB = 15",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30,40,50,60,70,80,90,100], headB = [55,65,75,85,95,100], skipA = 9, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [10,9,8,7,6,5,4,3,2,1,8,9,10], skipA = 9, skipB = 10",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30,40,50,60,70], headB = [15,25,35,40,50,60,70], skipA = 3, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [11,12,13,14,15,8,9,10], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1000,2000,3000,4000,5000], headB = [5001,5002,5003,5004,5005,4000,5000], skipA = 3, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], headB = [6,7,8,9,10,11,12,13,14,15], skipA = 5, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49], headB = [2,4,6,8,10,41,43,45,47,49], skipA = 10, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], headB = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], skipA = 19, skipB = 19",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], headB = [105,110,115,120,125,10], skipA = 1, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], headB = [21,22,23,24,25,10,11,12,13,14,15,16,17,18,19,20], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], headB = [15], skipA = 14, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [5,6,7,8,9,10], skipA = 4, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30,40,50], headB = [50,40,30,20,10,30,40,50], skipA = 4, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], headB = [31,32,33,34,35,36,37,38,39,40,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], skipA = 4, skipB = 10",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30,40,50,60,70,80,90,100], headB = [101,102,103,40,50,60,70,80,90,100], skipA = 3, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], headB = [2,4,6,8,10,12,14,16,18,20,15,17,19,21,23,25,27,29,31,33], skipA = 13, skipB = 10",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], headB = [31,32,33,34,35,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], skipA = 29, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [5,5,5,5,5,5,5,5,5,5,10], skipA = 4, skipB = 10",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9], headB = [2,4,6,8,10,9], skipA = 4, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [100,101,102,103,104,105], headB = [200,201,202,203,103,104,105], skipA = 4, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,10,15,20,25,30,35], headB = [8,13,18,25,30,35], skipA = 4, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80], headB = [85,90,95,100,25,30,35,40,45,50,55,60,65,70,75,80], skipA = 4, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,10,15,20,25,30,35,40,45,50], headB = [1,2,3,4,5,10,15,20,25,30,35,40,45,50], skipA = 4, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9,11,13,15,17], headB = [2,4,6,8,9,11,13,15,17], skipA = 4, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30,40,50,60,70], headB = [15,25,35,45,50,60,70], skipA = 4, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,10,15,20,25,30,35,40,45,50,55,60], headB = [65,70,75,80,5,10,15,20,25,30,35,40,45,50,55,60], skipA = 0, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [100,200,300], headB = [400,500,600,700,800,300], skipA = 2, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,0,1,8,4,5], headB = [2,0,1,8,4,5], skipA = 2, skipB = 1",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1], headB = [1], skipA = 0, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [100,200,300,400,500], headB = [501,502,503,504,505,400,500], skipA = 3, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1], headB = [2,3,4,5,1], skipA = 0, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [11,12,13,14,15,16,17,18,19,10], skipA = 9, skipB = 9",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000], headB = [1,2,3,4,5,6,7,8,9,4000,5000,6000,7000,8000,9000,10000], skipA = 3, skipB = 9",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9], headB = [10,11,12,13,14,15,16,7,8,9], skipA = 7, skipB = 7",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,1,1,1,1,1,1,1,1,1], headB = [1,1,1,1,1,1,1,1,1,1], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30,40,50,60,70,80,90,100], headB = [5,15,25,35,45,50,60,70,80,90,100], skipA = 4, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [99,98,97,96,95,94,93,92,91,90], headB = [89,88,87,86,85,90,91,92,93,94,95,96,97,98,99], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [7,8,9,10,11,12,13,14], headB = [1,2,3,4,10,11,12,13,14], skipA = 3, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], headB = [16,17,18,19,20,10,11,12,13,14,15], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [11,12,13,14,15,16,17,18,19,10], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3], headB = [4,5,6,3], skipA = 2, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9,11,13,15,17,19], headB = [2,4,6,8,10,12,14,16,18,19], skipA = 9, skipB = 9",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9,11,13,15,17,19], headB = [2,4,6,8,10,12,14,16,18,20], skipA = 10, skipB = 10",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], headB = [100,200,300,400,11,12,13,14,15,16,17,18,19,20], skipA = 9, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,9,8,7,6,5,4,3,2,1], headB = [1,2,3,4,5,4,3,2,1], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30,40,50], headB = [60,70,80,30,40,50], skipA = 3, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], headB = [51,52,53,54,55,56,57,58,59,60,41,42,43,44,45,46,47,48,49,50], skipA = 39, skipB = 10",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [7,5,6,2,3,8,4,5], headB = [9,1,4,2,3,8,4,5], skipA = 5, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [7,8,9,10,11,12,13], headB = [14,15,9,10,11,12,13], skipA = 3, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,10,15,20,25,30,35,40,45,50], headB = [55,60,65,70,75,20,25,30,35,40,45,50], skipA = 3, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], headB = [16,17,18,19,20,15], skipA = 14, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], headB = [101,102,103,104,105,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], skipA = 49, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], headB = [16,17,18,19,20,11,12,13,14,15], skipA = 10, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], headB = [21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], skipA = 20, skipB = 20",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [6,7,3,4,5], skipA = 2, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], headB = [21,22,23,24,25,26,27,28,29,30,8,9,10,11,12,13,14,15,16,17,18,19,20], skipA = 7, skipB = 10",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10], headB = [11,12,13,14,15,16,17,18,19,20,10], skipA = 9, skipB = 10",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], headB = [2,4,6,8,10,21,23,25,27,29], skipA = 10, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [100,200,300,400,500,600,700,800,900,1000], headB = [105,205,305,405,500,600,700,800,900,1000], skipA = 4, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30,40,50,60,70,80,90,100], headB = [101,102,103,104,105,100], skipA = 9, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [7,14,21,28,35,42,49,56,63,70,77,84,91,98], headB = [5,10,15,20,25,30,35,42,49,56,63,70,77,84,91,98], skipA = 5, skipB = 6",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30,40,50,60,70,80,90,100], headB = [101,102,103,104,105,50,60,70,80,90,100], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [7,8,9,1,2,3,4,5,6], headB = [10,11,12,7,8,9,1,2,3,4,5,6], skipA = 3, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], headB = [16,17,18,19,20,21,22,23,24,25,15], skipA = 14, skipB = 10",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9,11,13,15,17,19], headB = [2,4,6,8,10,12,14,16,18,9,11,13,15,17,19], skipA = 4, skipB = 9",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [5,6,7,8,9,10,11,12,13,14,15], headB = [16,17,18,19,20,5,6,7,8,9,10,11,12,13,14,15], skipA = 2, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [100,200,300,400,500], headB = [1,2,3,4,5,6,7,8,9,100], skipA = 4, skipB = 9",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [99,98,97,96,95,94], headB = [93,92,91,90,89,88,87,94], skipA = 5, skipB = 6",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9,11,13,15,17,19], headB = [2,4,6,8,10,12,14,16,18,20,15,17,19], skipA = 9, skipB = 10",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], headB = [16,17,18,19,20,10,11,12,13,14,15], skipA = 10, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], headB = [16,17,18,19,20,10], skipA = 10, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [6,7,8,9,10,4,5], skipA = 4, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5,6], headB = [3,4,5,6], skipA = 2, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [6,7,8,9,5], skipA = 4, skipB = 4",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3], headB = [4,5,1,2,3]",
        "output": "None"
      },
      {
        "input": "headA = [1,2,3], headB = [4,5,1,2,3], skipA = 3, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3], headB = [4,5,6], skipA = 3, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [6,7,8,4,5], skipA = 4, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [3,6,9,12], headB = [15,18,21,3]",
        "output": "None"
      },
      {
        "input": "headA = [3,6,9,12,15], headB = [2,4,6,8,10,12,15], skipA = 4, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1], headB = [1], skipA = 1, skipB = 1",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [2,6,4], headB = [1,5]",
        "output": "None"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [6,7,8,9,10], skipA = 5, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [], headB = [], skipA = 0, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9], headB = [2,4,6,8,10], skipA = 0, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [7,7,7,7], headB = [7,7,7,7], skipA = 0, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2], headB = [3,4,5,1,2], skipA = 0, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [0,9,1,2,4], headB = [3,2,4], skipA = 2, skipB = 1",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [6,7,8,9,10,5], skipA = 4, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30,40,50], headB = [60,70,80,40,50], skipA = 4, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [7,8,9,10], headB = [5,6,7,8,9,10], skipA = 0, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3], headB = [4,5,6,1,2,3], skipA = 2, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [6,7,8,9,10], skipA = 0, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3], headB = [4,5,1,2,3], skipA = 2, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3], headB = [4,5,6,7,2,3], skipA = 2, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,9,1,2,4], headB = [3,2,4]",
        "output": "None"
      },
      {
        "input": "headA = [4,1,8,4,5], headB = [5,6,1,8,4,5]",
        "output": "None"
      },
      {
        "input": "headA = [10,20,30], headB = [40,50,60,30], skipA = 2, skipB = 3",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1], headB = [2], skipA = 0, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [3,1,5,9], headB = [4,8,5,9], skipA = 2, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [1,2,3,4,5]",
        "output": "None"
      },
      {
        "input": "headA = [1], headB = [1]",
        "output": "None"
      },
      {
        "input": "headA = [1,3,5,7,9], headB = [2,4,6,8,10,5], skipA = 4, skipB = 5",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3], headB = [6,3,4], skipA = 2, skipB = 1",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2], headB = [3,4], skipA = 0, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [5,4,3,2,1], skipA = 0, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [7,8,9,10], headB = [5,6,7,8,9,10], skipA = 3, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [6,7,8,9,10]",
        "output": "None"
      },
      {
        "input": "headA = [1,2,3], headB = [4,5,6], skipA = 2, skipB = 2",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [10,20,30], headB = [10,20,30], skipA = 0, skipB = 0",
        "output": "Error: Solution.getIntersectionNode() got an unexpected keyword argument 'skipA'"
      },
      {
        "input": "headA = [1,3,5,7,9], headB = [2,4,6,8,10]",
        "output": "None"
      },
      {
        "input": "headA = [1,2,3,4,5], headB = [6,7,8,9,1]",
        "output": "None"
      }
    ]
  },
  {
    "id": 112,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\nA leaf is a node with no children.\n\u00a0\nExample 1:\n\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.\n\nExample 2:\n\n\nInput: root = [1,2,3], targetSum = 5\nOutput: false\nExplanation: There are two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n\nExample 3:\n\nInput: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5000].\n-1000 <= Node.val <= 1000\n-1000 <= targetSum <= 1000\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "root = [], targetSum = 0",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], targetSum = 10",
        "output": "True"
      },
      {
        "input": "root = [1,-2,-3,1,3,-2,null,-1], targetSum = 3",
        "output": "False"
      },
      {
        "input": "root = [1,2], targetSum = 3",
        "output": "True"
      },
      {
        "input": "root = [1,2,3], targetSum = 5",
        "output": "False"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22",
        "output": "True"
      },
      {
        "input": "root = [1,2], targetSum = 1",
        "output": "False"
      },
      {
        "input": "root = [-2,null,-3], targetSum = -5",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,null,null,4,5], targetSum = 10",
        "output": "False"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,40,60,90,110,140,160,190], targetSum = 400",
        "output": "False"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 26",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 30",
        "output": "False"
      },
      {
        "input": "root = [0,1,1,0,1,0,1,0,1,0,1,0,1,0,1], targetSum = 2",
        "output": "True"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], targetSum = 0",
        "output": "True"
      },
      {
        "input": "root = [10,9,8,7,6,5,4,3,2,1], targetSum = 54",
        "output": "False"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 26",
        "output": "True"
      },
      {
        "input": "root = [10,5,15,3,7,12,null,1,null,6,8,null,null,11,13], targetSum = 22",
        "output": "False"
      },
      {
        "input": "root = [-1,null,-2,null,-3,null,-4,null,-5,null,-6,null,-7,null,-8], targetSum = -16",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 27",
        "output": "False"
      },
      {
        "input": "root = [10,5,15,3,7,null,18], targetSum = 32",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 120",
        "output": "False"
      },
      {
        "input": "root = [0,1,1,0,1,0,1,0,1,0,1,0,1,0,1], targetSum = 3",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 31",
        "output": "False"
      },
      {
        "input": "root = [10,5,15,3,7,null,18], targetSum = 22",
        "output": "True"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 30",
        "output": "False"
      },
      {
        "input": "root = [100,50,200,null,150,null,300,125,null,null,null,250], targetSum = 475",
        "output": "False"
      },
      {
        "input": "root = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15], targetSum = -30",
        "output": "False"
      },
      {
        "input": "root = [10,20,30,40,50,60,70,80,90,100], targetSum = 100",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], targetSum = 93",
        "output": "False"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5], targetSum = 15",
        "output": "True"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 31",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,3,4,null,null,null,null,5,5,5,5], targetSum = 13",
        "output": "False"
      },
      {
        "input": "root = [100,-100,100,-100,100,-100,100,-100,100], targetSum = 0",
        "output": "True"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10], targetSum = 10",
        "output": "False"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 45",
        "output": "False"
      },
      {
        "input": "root = [10,20,30,40,50,60,70,80,90,100], targetSum = 550",
        "output": "False"
      },
      {
        "input": "root = [-1,2,-3,4,-5,6,-7,8,-9,10,-11,12,-13,14,-15], targetSum = 3",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], targetSum = 39",
        "output": "False"
      },
      {
        "input": "root = [1000,-1000,1000,-1000,1000,-1000,1000], targetSum = 0",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 100",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 9",
        "output": "False"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 27",
        "output": "True"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10], targetSum = 55",
        "output": "True"
      },
      {
        "input": "root = [10,20,30,40,50,60,70,80,90,100], targetSum = 400",
        "output": "False"
      },
      {
        "input": "root = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14], targetSum = 23",
        "output": "False"
      },
      {
        "input": "root = [1000,-1000,1000,-1000,null,1000,-1000,null,-1000,null,1000], targetSum = 0",
        "output": "False"
      },
      {
        "input": "root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], targetSum = 60",
        "output": "False"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,40,60,80,110,140,160,190], targetSum = 450",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 29",
        "output": "False"
      },
      {
        "input": "root = [0,-1,1,null,-2,2,null,null,-3,3], targetSum = -1",
        "output": "False"
      },
      {
        "input": "root = [-1,null,-2,-3,null,-4,null], targetSum = -10",
        "output": "True"
      },
      {
        "input": "root = [-10,-5,-15,-3,-7,null,-18], targetSum = -28",
        "output": "False"
      },
      {
        "input": "root = [1,-2,-3,1,3,-2,null,-1], targetSum = 2",
        "output": "True"
      },
      {
        "input": "root = [100,50,200,25,75,null,350,12,null,60,85,null,null,null,400], targetSum = 275",
        "output": "False"
      },
      {
        "input": "root = [-1,2,-3,4,-5,6,-7,8,-9,10,-11,12,-13,14,-15], targetSum = -15",
        "output": "True"
      },
      {
        "input": "root = [0,1,1,0,1,0,1,-1,-1,null,null,null,-1,null,-1,null,1,null,-1,null,-1,null,1,null,null,null,null,null,null,null,null], targetSum = 2",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], targetSum = 90",
        "output": "False"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 21",
        "output": "False"
      },
      {
        "input": "root = [-1,-2,-3,-4,null,-6,-7], targetSum = -14",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 64",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], targetSum = 38",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 60",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 32",
        "output": "False"
      },
      {
        "input": "root = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14], targetSum = 28",
        "output": "False"
      },
      {
        "input": "root = [0,1,1,0,1,0,null,null,1,0], targetSum = 1",
        "output": "True"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,40,60,90,110,140,160,190], targetSum = 250",
        "output": "False"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,140,160,180], targetSum = 450",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], targetSum = 1",
        "output": "False"
      },
      {
        "input": "root = [100,98,102,null,null,99,101,97,null,103], targetSum = 300",
        "output": "False"
      },
      {
        "input": "root = [-10,9,20,null,null,15,7], targetSum = 7",
        "output": "False"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,40,60,90,110,140,160,190], targetSum = 500",
        "output": "False"
      },
      {
        "input": "root = [-1,2,-3,4,-5,6,-7,8,-9,10,-11,12,-13,14,-15], targetSum = -16",
        "output": "False"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 18",
        "output": "True"
      }
    ]
  },
  {
    "id": 2078,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array"
    ],
    "problemDescription": "There are n houses evenly lined up on the street, and each house is beautifully painted. You are given a 0-indexed integer array colors of length n, where colors[i] represents the color of the ith house.\nReturn the maximum distance between two houses with different colors.\nThe distance between the ith and jth houses is abs(i - j), where abs(x) is the absolute value of x.\n\u00a0\nExample 1:\n\n\nInput: colors = [1,1,1,6,1,1,1]\nOutput: 3\nExplanation: In the above image, color 1 is blue, and color 6 is red.\nThe furthest two houses with different colors are house 0 and house 3.\nHouse 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.\nNote that houses 3 and 6 can also produce the optimal answer.\n\nExample 2:\n\n\nInput: colors = [1,8,3,8,3]\nOutput: 4\nExplanation: In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.\nThe furthest two houses with different colors are house 0 and house 4.\nHouse 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4.\n\nExample 3:\n\nInput: colors = [0,1]\nOutput: 1\nExplanation: The furthest two houses with different colors are house 0 and house 1.\nHouse 0 has color 0, and house 1 has color 1. The distance between them is abs(0 - 1) = 1.\n\n\u00a0\nConstraints:\n\nn ==\u00a0colors.length\n2 <= n <= 100\n0 <= colors[i] <= 100\nTest data are generated such that at least two houses have different colors.\n\n",
    "starterCode": "class Solution:\n    def maxDistance(self, colors: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "colors = [10,20,10,10,10]",
        "output": "3"
      },
      {
        "input": "colors = [10,20,30,40,50]",
        "output": "4"
      },
      {
        "input": "colors = [100,0,0,0,0,0,0,0,0,0]",
        "output": "9"
      },
      {
        "input": "colors = [3,1,3,3,3]",
        "output": "3"
      },
      {
        "input": "colors = [1,1,1,6,1,1,1]",
        "output": "3"
      },
      {
        "input": "colors = [1,2,3,4,5]",
        "output": "4"
      },
      {
        "input": "colors = [5,5,5,5,1]",
        "output": "4"
      },
      {
        "input": "colors = [5,5,5,5,5,2]",
        "output": "5"
      },
      {
        "input": "colors = [1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "colors = [7,7,7,7,7,7,7,7,7,8]",
        "output": "9"
      },
      {
        "input": "colors = [1,1,2,1,1]",
        "output": "2"
      },
      {
        "input": "colors = [1,1,2,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "colors = [100,99,98,97,96,95]",
        "output": "5"
      },
      {
        "input": "colors = [2,2,2,2,3,2]",
        "output": "4"
      },
      {
        "input": "colors = [5,5,5,5,5,5,5,5,5,2]",
        "output": "9"
      },
      {
        "input": "colors = [0,1]",
        "output": "1"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,2]",
        "output": "9"
      },
      {
        "input": "colors = [1,1,1,1,1,2]",
        "output": "5"
      },
      {
        "input": "colors = [1,8,3,8,3]",
        "output": "4"
      },
      {
        "input": "colors = [1,1,2,1,1,1,1,1,1,1]",
        "output": "7"
      },
      {
        "input": "colors = [10,9,8,7,6,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "colors = [5,5,5,5,5,5,5,2]",
        "output": "7"
      },
      {
        "input": "colors = [100,0,100,100,100]",
        "output": "3"
      },
      {
        "input": "colors = [1,2,1,2,1,2,1,2,1,2]",
        "output": "9"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,2,1]",
        "output": "8"
      },
      {
        "input": "colors = [4,4,4,4,4,4,4,4,4,2]",
        "output": "9"
      },
      {
        "input": "colors = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]",
        "output": "18"
      },
      {
        "input": "colors = [99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 0]",
        "output": "30"
      },
      {
        "input": "colors = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1]",
        "output": "33"
      },
      {
        "input": "colors = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "32"
      },
      {
        "input": "colors = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "32"
      },
      {
        "input": "colors = [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "57"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "55"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "20"
      },
      {
        "input": "colors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "29"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "21"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "31"
      },
      {
        "input": "colors = [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "19"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1]",
        "output": "71"
      },
      {
        "input": "colors = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]",
        "output": "29"
      },
      {
        "input": "colors = [1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10]",
        "output": "29"
      },
      {
        "input": "colors = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10]",
        "output": "20"
      },
      {
        "input": "colors = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3]",
        "output": "52"
      },
      {
        "input": "colors = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "77"
      },
      {
        "input": "colors = [10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10]",
        "output": "54"
      },
      {
        "input": "colors = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1]",
        "output": "80"
      },
      {
        "input": "colors = [34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35]",
        "output": "81"
      },
      {
        "input": "colors = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "59"
      },
      {
        "input": "colors = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "colors = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "77"
      },
      {
        "input": "colors = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "19"
      },
      {
        "input": "colors = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "21"
      },
      {
        "input": "colors = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "57"
      },
      {
        "input": "colors = [7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9]",
        "output": "75"
      },
      {
        "input": "colors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "17"
      },
      {
        "input": "colors = [1, 1, 1, 1, 2, 1, 1, 1, 1, 1]",
        "output": "5"
      },
      {
        "input": "colors = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1]",
        "output": "29"
      },
      {
        "input": "colors = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "52"
      },
      {
        "input": "colors = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1]",
        "output": "55"
      },
      {
        "input": "colors = [5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5]",
        "output": "10"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "57"
      },
      {
        "input": "colors = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0,1]",
        "output": "19"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2]",
        "output": "55"
      },
      {
        "input": "colors = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50]",
        "output": "90"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "19"
      },
      {
        "input": "colors = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0]",
        "output": "99"
      },
      {
        "input": "colors = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]",
        "output": "56"
      },
      {
        "input": "colors = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4]",
        "output": "75"
      },
      {
        "input": "colors = [34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35]",
        "output": "56"
      },
      {
        "input": "colors = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3]",
        "output": "77"
      },
      {
        "input": "colors = [1, 2, 2, 2, 2, 2, 2, 2, 2, 1]",
        "output": "8"
      },
      {
        "input": "colors = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "18"
      },
      {
        "input": "colors = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1]",
        "output": "53"
      },
      {
        "input": "colors = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5]",
        "output": "10"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "45"
      },
      {
        "input": "colors = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2]",
        "output": "52"
      },
      {
        "input": "colors = [1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "68"
      },
      {
        "input": "colors = [1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1]",
        "output": "78"
      },
      {
        "input": "colors = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,2]",
        "output": "78"
      },
      {
        "input": "colors = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "17"
      },
      {
        "input": "colors = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1]",
        "output": "30"
      },
      {
        "input": "colors = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1]",
        "output": "77"
      },
      {
        "input": "colors = [1,1,1,1,1,2,1,1,1,1,1]",
        "output": "5"
      },
      {
        "input": "colors = [100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100]",
        "output": "29"
      },
      {
        "input": "colors = [99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0]",
        "output": "71"
      },
      {
        "input": "colors = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "9"
      },
      {
        "input": "colors = [1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "11"
      },
      {
        "input": "colors = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "87"
      },
      {
        "input": "colors = [10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1]",
        "output": "19"
      },
      {
        "input": "colors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1]",
        "output": "49"
      }
    ]
  },
  {
    "id": 2974,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Sorting",
      "Simulation",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums of even length and there is also an empty array arr. Alice and Bob decided to play a game where in every round Alice and Bob will do one move. The rules of the game are as follows:\n\nEvery round, first Alice will remove the minimum element from nums, and then Bob does the same.\nNow, first Bob will append the removed element in the array arr, and then Alice does the same.\nThe game continues until nums becomes empty.\n\nReturn the resulting array arr.\n\u00a0\nExample 1:\n\nInput: nums = [5,4,2,3]\nOutput: [3,2,5,4]\nExplanation: In round one, first Alice removes 2 and then Bob removes 3. Then in arr firstly Bob appends 3 and then Alice appends 2. So arr = [3,2].\nAt the begining of round two, nums = [5,4]. Now, first Alice removes 4 and then Bob removes 5. Then both append in arr which becomes [3,2,5,4].\n\nExample 2:\n\nInput: nums = [2,5]\nOutput: [5,2]\nExplanation: In round one, first Alice removes 2 and then Bob removes 5. Then in arr firstly Bob appends and then Alice appends. So arr = [5,2].\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 100\n1 <= nums[i] <= 100\nnums.length % 2 == 0\n\n",
    "starterCode": "class Solution:\n    def numberGame(self, nums: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [90,100,80,70,60,50]",
        "output": "[60, 50, 80, 70, 100, 90]"
      },
      {
        "input": "nums = [100,1,99,2,98,3]",
        "output": "[2, 1, 98, 3, 100, 99]"
      },
      {
        "input": "nums = [6,2,8,4]",
        "output": "[4, 2, 8, 6]"
      },
      {
        "input": "nums = [10,1,3,8,7,2]",
        "output": "[2, 1, 7, 3, 10, 8]"
      },
      {
        "input": "nums = [1,2,3,4,5,6]",
        "output": "[2, 1, 4, 3, 6, 5]"
      },
      {
        "input": "nums = [10,9,8,7,6,5]",
        "output": "[6, 5, 8, 7, 10, 9]"
      },
      {
        "input": "nums = [5,4,2,3]",
        "output": "[3, 2, 5, 4]"
      },
      {
        "input": "nums = [4,3,2,1,6,5]",
        "output": "[2, 1, 4, 3, 6, 5]"
      },
      {
        "input": "nums = [100,1,99,2]",
        "output": "[2, 1, 100, 99]"
      },
      {
        "input": "nums = [2,5]",
        "output": "[5, 2]"
      },
      {
        "input": "nums = [6,4,3,2]",
        "output": "[3, 2, 6, 4]"
      },
      {
        "input": "nums = [1,3,2,4]",
        "output": "[2, 1, 4, 3]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70,77,84,91,98,105,112,119,126,133,140]",
        "output": "[14, 7, 28, 21, 42, 35, 56, 49, 70, 63, 84, 77, 98, 91, 112, 105, 126, 119, 140, 133]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9]"
      },
      {
        "input": "nums = [30,20,10,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]",
        "output": "[20, 10, 40, 30, 60, 50, 80, 70, 100, 90, 120, 110, 140, 130, 160, 150, 180, 170, 200, 190]"
      },
      {
        "input": "nums = [50,40,30,20,10,1,2,3,4,5]",
        "output": "[2, 1, 4, 3, 10, 5, 30, 20, 50, 40]"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11]"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 56]",
        "output": "[14, 7, 28, 21, 42, 35, 56, 49]"
      },
      {
        "input": "nums = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "Error: index out of range"
      },
      {
        "input": "nums = [41, 39, 37, 35, 33, 31, 29, 27]",
        "output": "[29, 27, 33, 31, 37, 35, 41, 39]"
      },
      {
        "input": "nums = [9,1,8,2,7,3,6,4,5,10]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9]"
      },
      {
        "input": "nums = [50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 32, 31, 34, 33, 36, 35, 38, 37, 40, 39, 42, 41, 44, 43, 46, 45, 48, 47, 50, 49]"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91]",
        "output": "[92, 91, 94, 93, 96, 95, 98, 97, 100, 99]"
      },
      {
        "input": "nums = [60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41]",
        "output": "[42, 41, 44, 43, 46, 45, 48, 47, 50, 49, 52, 51, 54, 53, 56, 55, 58, 57, 60, 59]"
      },
      {
        "input": "nums = [8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15]"
      },
      {
        "input": "nums = [42,31,25,14,19,28,37,46,5,13]",
        "output": "[13, 5, 19, 14, 28, 25, 37, 31, 46, 42]"
      },
      {
        "input": "nums = [45, 67, 23, 89, 34, 12, 6, 8, 33, 55]",
        "output": "[8, 6, 23, 12, 34, 33, 55, 45, 89, 67]"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29]"
      },
      {
        "input": "nums = [23,17,5,19,11,3,29,21,7,13,25,15]",
        "output": "[5, 3, 11, 7, 15, 13, 19, 17, 23, 21, 29, 25]"
      },
      {
        "input": "nums = [50, 20, 40, 30, 10, 60, 70, 80]",
        "output": "[20, 10, 40, 30, 60, 50, 80, 70]"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6]",
        "output": "[7, 6, 9, 8, 11, 10, 13, 12, 15, 14]"
      },
      {
        "input": "nums = [50,25,75,5,100,2,70,10,80,30,60,40]",
        "output": "[5, 2, 25, 10, 40, 30, 60, 50, 75, 70, 100, 80]"
      },
      {
        "input": "nums = [55,66,77,88,99,11,22,33,44,55,66,77,88,99,10]",
        "output": "Error: index out of range"
      },
      {
        "input": "nums = [21,22,23,24,25,26,27,28,29,30,31,32]",
        "output": "[22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 32, 31]"
      },
      {
        "input": "nums = [8,6,4,2,10,12,14,16]",
        "output": "[4, 2, 8, 6, 12, 10, 16, 14]"
      },
      {
        "input": "nums = [8, 6, 10, 12, 4, 2, 14, 16]",
        "output": "[4, 2, 8, 6, 12, 10, 16, 14]"
      },
      {
        "input": "nums = [33, 32, 31, 30, 29, 28, 27, 26]",
        "output": "[27, 26, 29, 28, 31, 30, 33, 32]"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]"
      },
      {
        "input": "nums = [1, 100, 50, 51, 99, 2, 49, 52, 48, 53]",
        "output": "[2, 1, 49, 48, 51, 50, 53, 52, 100, 99]"
      },
      {
        "input": "nums = [50,25,75,100,2,52,77,74,51,76,53,78,54,79,55,80,56,81,57,82]",
        "output": "[25, 2, 51, 50, 53, 52, 55, 54, 57, 56, 75, 74, 77, 76, 79, 78, 81, 80, 100, 82]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40]",
        "output": "[10, 5, 20, 15, 30, 25, 40, 35]"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,3,3,3,3]",
        "output": "[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9]"
      },
      {
        "input": "nums = [100,1,99,2,98,3,97,4,96,5,95,6,94,7,93,8,92,9,91,10]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 92, 91, 94, 93, 96, 95, 98, 97, 100, 99]"
      },
      {
        "input": "nums = [100, 1, 99, 2, 98, 3, 97, 4]",
        "output": "[2, 1, 4, 3, 98, 97, 100, 99]"
      },
      {
        "input": "nums = [9,1,6,8,3,7,4,5]",
        "output": "[3, 1, 5, 4, 7, 6, 9, 8]"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]",
        "output": "[92, 91, 94, 93, 96, 95, 98, 97, 100, 99]"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31]",
        "output": "[32, 31, 34, 33, 36, 35, 38, 37, 40, 39, 42, 41, 44, 43, 46, 45, 48, 47, 50, 49]"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15]",
        "output": "[16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29]"
      },
      {
        "input": "nums = [50,20,10,30,40,60]",
        "output": "[20, 10, 40, 30, 60, 50]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]"
      },
      {
        "input": "nums = [80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95]",
        "output": "[81, 80, 83, 82, 85, 84, 87, 86, 89, 88, 91, 90, 93, 92, 95, 94]"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46, 45, 44, 43]",
        "output": "[44, 43, 46, 45, 48, 47, 50, 49]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29]"
      },
      {
        "input": "nums = [9, 1, 8, 2, 7, 3, 6, 4, 5, 10]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9]"
      },
      {
        "input": "nums = [20,18,16,14,12,10,8,6,4,2]",
        "output": "[4, 2, 8, 6, 12, 10, 16, 14, 20, 18]"
      },
      {
        "input": "nums = [3, 3, 2, 2, 1, 1, 6, 6, 5, 5, 4, 4]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums = [95,85,75,65,55,45,35,25,15,5,90,80,70,60,50,40,30,20,10,0]",
        "output": "[5, 0, 15, 10, 25, 20, 35, 30, 45, 40, 55, 50, 65, 60, 75, 70, 85, 80, 95, 90]"
      },
      {
        "input": "nums = [50,40,30,20,10,60,70,80,90,100,10,20,30,40,50,60]",
        "output": "[10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 80, 70, 100, 90]"
      },
      {
        "input": "nums = [100, 1, 99, 2, 98, 3, 97, 4, 96, 5, 95, 6, 94, 7, 93, 8, 92, 9, 91, 10]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 92, 91, 94, 93, 96, 95, 98, 97, 100, 99]"
      },
      {
        "input": "nums = [30, 25, 22, 20, 21, 23, 24, 26]",
        "output": "[21, 20, 23, 22, 25, 24, 30, 26]"
      },
      {
        "input": "nums = [50, 50, 40, 40, 30, 30, 20, 20, 10, 10]",
        "output": "[10, 10, 20, 20, 30, 30, 40, 40, 50, 50]"
      },
      {
        "input": "nums = [45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26]",
        "output": "[27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44]"
      },
      {
        "input": "nums = [8, 7, 6, 5, 4, 3, 2, 1, 12, 11, 10, 9]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11]"
      },
      {
        "input": "nums = [100,1,99,2,98,3,97,4,96,5,95,6]",
        "output": "[2, 1, 4, 3, 6, 5, 96, 95, 98, 97, 100, 99]"
      },
      {
        "input": "nums = [1,3,5,7,9,2,4,6,8,10]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9]"
      },
      {
        "input": "nums = [6, 1, 9, 4, 3, 8, 7, 2]",
        "output": "[2, 1, 4, 3, 7, 6, 9, 8]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,0]",
        "output": "[1, 0, 3, 2, 5, 4, 7, 6, 9, 8]"
      },
      {
        "input": "nums = [23,45,67,12,34,56,78,89,90,10]",
        "output": "[12, 10, 34, 23, 56, 45, 78, 67, 90, 89]"
      },
      {
        "input": "nums = [9,4,1,7,3,8,2,6,5,10]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9]"
      },
      {
        "input": "nums = [34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15]",
        "output": "[16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 32, 31, 34, 33]"
      },
      {
        "input": "nums = [45,23,67,89,12,34,56,78]",
        "output": "[23, 12, 45, 34, 67, 56, 89, 78]"
      },
      {
        "input": "nums = [8,1,9,2,10,3,11,4,12,5,13,6,14,7,15]",
        "output": "Error: index out of range"
      },
      {
        "input": "nums = [34,12,78,56,32,89,21,67]",
        "output": "[21, 12, 34, 32, 67, 56, 89, 78]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]"
      },
      {
        "input": "nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]",
        "output": "[11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24]"
      },
      {
        "input": "nums = [50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50]",
        "output": "[50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]"
      },
      {
        "input": "nums = [6, 5, 4, 3, 2, 1]",
        "output": "[2, 1, 4, 3, 6, 5]"
      },
      {
        "input": "nums = [9, 1, 6, 3, 8, 4, 7, 2, 5, 10]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9]"
      },
      {
        "input": "nums = [6,5,4,3,2,1,12,11,10,9,8,7]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11]"
      },
      {
        "input": "nums = [6,1,10,3,8,5,7,2]",
        "output": "[2, 1, 5, 3, 7, 6, 10, 8]"
      },
      {
        "input": "nums = [9,1,6,8,3,4,7,2]",
        "output": "[2, 1, 4, 3, 7, 6, 9, 8]"
      },
      {
        "input": "nums = [100,1,99,2,98,3,97,4,96,5,95,6,94,7,93,8]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 94, 93, 96, 95, 98, 97, 100, 99]"
      },
      {
        "input": "nums = [21, 17, 19, 15, 16, 20, 18, 14]",
        "output": "[15, 14, 17, 16, 19, 18, 21, 20]"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24]",
        "output": "[4, 2, 8, 6, 12, 10, 16, 14, 20, 18, 24, 22]"
      },
      {
        "input": "nums = [45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "Error: index out of range"
      },
      {
        "input": "nums = [15, 10, 20, 5, 18, 13, 12, 8]",
        "output": "[8, 5, 12, 10, 15, 13, 20, 18]"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29]"
      },
      {
        "input": "nums = [45,23,67,89,12,34,56,78,90,10,21,32,43,54,65]",
        "output": "Error: index out of range"
      },
      {
        "input": "nums = [20,15,30,10,25,5,35,50,40,45]",
        "output": "[10, 5, 20, 15, 30, 25, 40, 35, 50, 45]"
      },
      {
        "input": "nums = [50,25,75,100,12,88,63,45,37,71,19,94]",
        "output": "[19, 12, 37, 25, 50, 45, 71, 63, 88, 75, 100, 94]"
      },
      {
        "input": "nums = [33,66,99,22,55,88,11,44,77,100]",
        "output": "[22, 11, 44, 33, 66, 55, 88, 77, 100, 99]"
      }
    ]
  },
  {
    "id": 1700,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Queue",
      "Array",
      "Simulation"
    ],
    "problemDescription": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\nThe number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:\n\nIf the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.\nOtherwise, they will leave it and go to the queue's end.\n\nThis continues until none of the queue students want to take the top sandwich and are thus unable to eat.\nYou are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i\u200b\u200b\u200b\u200b\u200b\u200bth sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j\u200b\u200b\u200b\u200b\u200b\u200bth student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.\n\u00a0\nExample 1:\n\nInput: students = [1,1,0,0], sandwiches = [0,1,0,1]\nOutput: 0 \nExplanation:\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\nHence all students are able to eat.\n\nExample 2:\n\nInput: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= students.length, sandwiches.length <= 100\nstudents.length == sandwiches.length\nsandwiches[i] is 0 or 1.\nstudents[i] is 0 or 1.\n\n",
    "starterCode": "class Solution:\n    def countStudents(self, students: List[int], sandwiches: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "students = [0,1,0,1], sandwiches = [1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]",
        "output": "3"
      },
      {
        "input": "students = [0,0,1,1], sandwiches = [1,1,0,0]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0], sandwiches = [0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,0], sandwiches = [0,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [0,1,0,1], sandwiches = [0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,1,0,0], sandwiches = [0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,1], sandwiches = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "students = [0,1,0,1,0,1,0,1,0,1], sandwiches = [1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,0,0,0,0,1,1], sandwiches = [0,0,0,1,1,1,0,1,1]",
        "output": "0"
      },
      {
        "input": "students = [1,0,0,1,1,0,0,1], sandwiches = [1,1,1,1,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [1,0,0,1,0,1,1,0], sandwiches = [1,1,0,0,1,1,0,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,1,0,0,0,0,0,0], sandwiches = [0,0,0,0,1,1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "students = [0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0], sandwiches = [1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,1,0,0,1,0,1,0,0,1], sandwiches = [1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,0,0,1,0,1,0], sandwiches = [0,0,1,0,1,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [0,1,1,1,0,1,0,0,1,0], sandwiches = [0,1,0,1,1,1,1,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0], sandwiches = [0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], sandwiches = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [0,1,0,1,0,1,0,1], sandwiches = [1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [0,0,1,1,0,0,1,1,0,0,1,1,0,0,1], sandwiches = [1,1,0,0,1,1,0,0,1,1,0,0,1,1,0]",
        "output": "2"
      },
      {
        "input": "students = [1,0,0,1,1,0,1,0,0,1], sandwiches = [1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,1,1,0,0,0,0,0], sandwiches = [1,1,1,1,1,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0], sandwiches = [0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,1,0,0,0,0,1,0,1,0,0,1], sandwiches = [1,1,0,0,1,1,0,0,1,0,1,0,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,0,0,0,0,1,1], sandwiches = [1,0,0,0,1,0,0,1,0]",
        "output": "3"
      },
      {
        "input": "students = [0,1,1,0,0,1,1,0,0,1], sandwiches = [1,0,0,1,1,0,0,1,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,1,1,1,0,0,0,0,0,0,1,1], sandwiches = [0,0,1,1,0,0,1,1,0,0,1,1,0,0]",
        "output": "2"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], sandwiches = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [0,1,0,1,0,1,0,1,0,1,0,1], sandwiches = [0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,1,1,1,0,0,0,0,0,0], sandwiches = [1,1,1,1,1,1,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,0,0,1,1,0,0], sandwiches = [0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0], sandwiches = [1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0,0,1,1,0,0,1,0,1], sandwiches = [0,1,0,1,1,0,0,1,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1], sandwiches = [1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,0,1,0,0,1,0,1,0,1,0,1,0], sandwiches = [1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0], sandwiches = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [0,1,1,0,1,0,1,0,1,0,0,1,0,1], sandwiches = [1,0,0,1,0,1,0,1,0,1,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,1,1,1,1,0,0,0], sandwiches = [1,1,1,0,0,0,1,1,1,0]",
        "output": "3"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1,0,1], sandwiches = [0,1,0,1,0,1,0,1,0,1,0]",
        "output": "1"
      },
      {
        "input": "students = [1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0], sandwiches = [0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1], sandwiches = [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], sandwiches = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "1"
      },
      {
        "input": "students = [1,1,0,0,1,1,0,0,1,1], sandwiches = [0,0,1,1,0,0,1,1,0,0]",
        "output": "2"
      },
      {
        "input": "students = [1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,0], sandwiches = [0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1]",
        "output": "0"
      },
      {
        "input": "students = [0,1,1,0,1,0,0,1], sandwiches = [1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [0,1,0,1,0,1,0,1,0], sandwiches = [1,1,0,0,1,1,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,0,1,1,1,1,1,1], sandwiches = [1,1,1,1,1,1,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [0,1,1,0,1,1,0,1,0,1,0], sandwiches = [1,1,0,1,0,1,0,0,1,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], sandwiches = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,0], sandwiches = [1,1,1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,0,0,1,0,0,1,1,0,1], sandwiches = [0,1,1,0,1,1,0,1,0,0]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0], sandwiches = [0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [0,0,1,1,0,0,1,1], sandwiches = [0,0,1,1,0,0,1,1]",
        "output": "0"
      },
      {
        "input": "students = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1], sandwiches = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,0,0,1,0,0,1,1,0], sandwiches = [0,0,1,1,0,0,1,1,0,0]",
        "output": "1"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], sandwiches = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0], sandwiches = [1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "students = [1,1,0,0,0,0,1,1], sandwiches = [1,1,0,0,0,0,1,1]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], sandwiches = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,0,0,1,1,1,1,1], sandwiches = [0,0,0,0,0,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,0,0,0,1,1,1,1,1,1], sandwiches = [1,1,1,1,1,1,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,0,0,1,0,1,1,0,0], sandwiches = [1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,0,0,1,1,0,0,1], sandwiches = [1,0,1,0,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,1,0,0,1,1,0,1,0,1], sandwiches = [1,1,0,1,1,0,0,0,1,0,1,0]",
        "output": "1"
      },
      {
        "input": "students = [0,1,0,1,0,1,0,1,0,1,0,1], sandwiches = [1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1,0], sandwiches = [0,1,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0,1,0,1], sandwiches = [0,1,0,1,0,1,0]",
        "output": "1"
      },
      {
        "input": "students = [0,0,0,0,0,0,1,1,1,1,1,1], sandwiches = [0,0,0,0,0,0,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "students = [1,0,0,1,0,1,1,0,1,0,1], sandwiches = [1,1,0,0,1,0,1,0,1,0,0]",
        "output": "1"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1], sandwiches = [0,0,1,1,0,0,1,1,1]",
        "output": "0"
      },
      {
        "input": "students = [0,1,1,0,1,1,0,0,1], sandwiches = [1,1,0,0,1,1,0,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0], sandwiches = [0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1,0,1,0], sandwiches = [0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], sandwiches = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,0,0,0,1,0,1,0,1,0,1,0], sandwiches = [1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,1,0,0,0,1], sandwiches = [0,1,1,0,0,0,1,1]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], sandwiches = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,0,1,1,1,1,1,0,0,1], sandwiches = [1,1,1,0,0,0,0,1,1,0,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,1,0,0,1,1,0,0], sandwiches = [0,0,1,1,0,0,1,1]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0], sandwiches = [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "students = [0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0], sandwiches = [1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0], sandwiches = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], sandwiches = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "69"
      },
      {
        "input": "students = [1,1,0,0,0,1,1,1,0,1,0,0], sandwiches = [0,1,1,0,0,1,0,1,1,0,0,1]",
        "output": "0"
      },
      {
        "input": "students = [0,0,0,1,1,1,0,1,0,1,0,1,0,1], sandwiches = [0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "0"
      },
      {
        "input": "students = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], sandwiches = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "0"
      },
      {
        "input": "students = [0,1,0,1,0,1,0,1,0,1], sandwiches = [0,0,0,0,1,1,1,1,0,0]",
        "output": "1"
      }
    ]
  },
  {
    "id": 1967,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "String"
    ],
    "problemDescription": "Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nExample 1:\n\nInput: patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"\nOutput: 3\nExplanation:\n- \"a\" appears as a substring in \"abc\".\n- \"abc\" appears as a substring in \"abc\".\n- \"bc\" appears as a substring in \"abc\".\n- \"d\" does not appear as a substring in \"abc\".\n3 of the strings in patterns appear as a substring in word.\n\nExample 2:\n\nInput: patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"\nOutput: 2\nExplanation:\n- \"a\" appears as a substring in \"aaaaabbbbb\".\n- \"b\" appears as a substring in \"aaaaabbbbb\".\n- \"c\" does not appear as a substring in \"aaaaabbbbb\".\n2 of the strings in patterns appear as a substring in word.\n\nExample 3:\n\nInput: patterns = [\"a\",\"a\",\"a\"], word = \"ab\"\nOutput: 3\nExplanation: Each of the patterns appears as a substring in word \"ab\".\n\n\u00a0\nConstraints:\n\n1 <= patterns.length <= 100\n1 <= patterns[i].length <= 100\n1 <= word.length <= 100\npatterns[i] and word consist of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def numOfStrings(self, patterns: List[str], word: str) -> int:\n        ",
    "testCases": [
      {
        "input": "patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"aa\",\"bb\",\"cc\"], word = \"abcabc\"",
        "output": "0"
      },
      {
        "input": "patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"aaa\"], word = \"aaaaa\"",
        "output": "1"
      },
      {
        "input": "patterns = [\"abc\"], word = \"abc\"",
        "output": "1"
      },
      {
        "input": "patterns = [\"xyz\",\"xy\",\"yz\"], word = \"xyz\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"hello\",\"world\"], word = \"helloworld\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"a\",\"a\",\"a\"], word = \"ab\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"z\"], word = \"abcz\"",
        "output": "1"
      },
      {
        "input": "patterns = [\"a\",\"b\",\"c\",\"d\",\"e\"], word = \"edcba\"",
        "output": "5"
      },
      {
        "input": "patterns = [\"hello\",\"world\",\"foo\",\"bar\"], word = \"helloworldfoo\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"repeated\",\"repeat\",\"eat\"], word = \"repeatedrepeat\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"this\",\"is\",\"a\",\"test\"], word = \"thisisatest\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"abc\",\"cab\",\"bac\"], word = \"abacabcabc\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"aabb\",\"bbcc\",\"ccdd\",\"ddaa\"], word = \"aabbccdd\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"a\",\"ab\",\"abc\",\"abcd\"], word = \"abcd\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"a\",\"aa\",\"aaa\",\"aaaa\"], word = \"aaaaaaaa\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"overlapping\",\"lapping\",\"lappingo\",\"verlapping\"], word = \"overlappinglappingoverlappingoverlapping\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"hello\",\"world\",\"python\",\"programming\"], word = \"helloworldpythonprogramming\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"xyz\",\"zyx\",\"zxy\"], word = \"xyzzyxzyxzxyzyx\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"xy\",\"yx\",\"xyz\",\"zyx\"], word = \"xyzzyx\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"lorem\",\"ipsum\",\"dolor\",\"sit\",\"amet\"], word = \"loremipsumdolorsitamet\"",
        "output": "5"
      },
      {
        "input": "patterns = [\"abcd\",\"bcde\",\"cdef\",\"defg\",\"efgh\",\"fghi\",\"ghij\",\"hijk\",\"ijkl\",\"jklm\",\"klmn\",\"lmno\",\"mnop\",\"nopq\",\"opqr\",\"pqrs\",\"qrst\",\"rstu\",\"stuv\",\"tuvw\",\"uvwx\",\"vwxy\",\"wxyz\"], word = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "23"
      },
      {
        "input": "patterns = [\"mnop\",\"nopq\",\"opqr\",\"pqrs\",\"qrst\"], word = \"mnopqrstu\"",
        "output": "5"
      },
      {
        "input": "patterns = [\"quick\",\"brown\",\"fox\"], word = \"thequickbrownfox\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"abcd\",\"abcde\",\"abcdef\"], word = \"abcdefgabcdefg\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"xyz\",\"zyx\",\"yxz\",\"xzy\",\"zyx\"], word = \"zyxzyxzyxzyx\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"ab\",\"ba\",\"aba\",\"bab\"], word = \"abababab\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"aaaa\",\"bbbb\",\"cccc\"], word = \"aaaabbbbccccaaaabbbbcccc\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"aba\", \"bba\", \"aaa\", \"bbb\"], word = \"abababababa\"",
        "output": "1"
      },
      {
        "input": "patterns = [\"repeated\",\"pattern\",\"substring\",\"string\"], word = \"repeatedpatternsubstringstring\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"ab\", \"bc\", \"cd\", \"de\", \"ef\", \"fg\"], word = \"abcdefg\"",
        "output": "6"
      },
      {
        "input": "patterns = [\"repeated\",\"substring\",\"example\"], word = \"repeatedsubstringexample\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"overlap\",\"lap\",\"ap\",\"p\"], word = \"overlaplapap\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"hello\", \"world\", \"python\", \"programming\"], word = \"programmingworldpython\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"longer\",\"substrings\",\"to\",\"check\"], word = \"thisisalongersubstringtocheck\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"unique\",\"un\",\"iq\"], word = \"uniqueiq\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"substring\",\"string\",\"sub\"], word = \"thisisjustasubstringexample\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"hello\",\"world\",\"hello\",\"world\"], word = \"helloworldhello\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"aaa\",\"aa\",\"a\"], word = \"aaaaaaaaaaaa\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"z\",\"zz\",\"zzz\"], word = \"zzzzzzzzz\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"ab\",\"bc\",\"cd\",\"de\",\"ef\"], word = \"abcdef\"",
        "output": "5"
      },
      {
        "input": "patterns = [\"123\", \"234\", \"345\"], word = \"1234567890\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"], word = \"abcdefghij\"",
        "output": "10"
      },
      {
        "input": "patterns = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], word = \"abcdef\"",
        "output": "6"
      },
      {
        "input": "patterns = [\"a\",\"ab\",\"abc\",\"abcd\",\"abcde\"], word = \"abcde\"",
        "output": "5"
      },
      {
        "input": "patterns = [\"one\",\"two\",\"three\"], word = \"onetwothreeonetwothree\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"aaa\",\"aab\",\"aba\",\"baa\",\"aabaa\",\"aaaba\",\"aaba\",\"baaa\"], word = \"aaaabaaaa\"",
        "output": "8"
      },
      {
        "input": "patterns = [\"hello\",\"world\",\"helloworld\"], word = \"helloworld\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"quick\",\"brown\",\"fox\"], word = \"thequickbrownfoxjumps\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"xyz\",\"zyx\",\"yzz\",\"zzz\"], word = \"xyzzyzyzzz\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"aaa\",\"bbb\",\"ccc\",\"abc\",\"bca\",\"cab\"], word = \"abcabcabc\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"abcd\",\"dcba\",\"abcdabcd\"], word = \"abcdabcdabcdabcd\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"a\",\"ab\",\"abc\",\"abcd\",\"abcde\"], word = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "5"
      },
      {
        "input": "patterns = [\"abc\",\"def\",\"ghi\",\"jkl\"], word = \"abcdefghijkl\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"aaaaa\",\"bbbbb\",\"ccccc\",\"ddddd\"], word = \"abcdeabcdeabcdeabcde\"",
        "output": "0"
      },
      {
        "input": "patterns = [\"ab\",\"bc\",\"cd\",\"de\"], word = \"abcdefg\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"pattern\",\"matching\",\"substrings\"], word = \"matchingpatternsubstring\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"ab\",\"ba\",\"abab\",\"baba\"], word = \"abababababababab\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"same\",\"sub\",\"string\",\"test\",\"case\"], word = \"substringtestcase\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"aaaa\",\"bbbb\",\"cccc\",\"ddd\"], word = \"aaaabbbbccccddd\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"apple\",\"banana\",\"cherry\"], word = \"cherrybananaapple\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"cat\",\"dog\",\"bird\",\"fish\"], word = \"fishdogcatbird\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"python\",\"java\",\"cpp\"], word = \"pythonjavacpp\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"aaa\",\"bbb\",\"ccc\",\"ddd\"], word = \"aaabbbcccddd\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"test\",\"sett\",\"best\"], word = \"bestsett\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"abc\",\"bca\",\"cab\",\"abcabc\"], word = \"abcabcabcabc\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"aaa\",\"aa\",\"a\"], word = \"aaaaaaaaaa\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"quick\",\"brown\",\"fox\",\"jump\",\"over\",\"lazy\",\"dog\"], word = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "7"
      },
      {
        "input": "patterns = [\"abc\",\"cab\",\"bca\"], word = \"abcabcabcabc\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"xyz\",\"zyx\",\"xy\",\"yx\",\"xzy\",\"yzx\"], word = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"aaa\",\"bbb\",\"ccc\",\"ddd\",\"eee\",\"fff\"], word = \"abcdefabcdefabcdef\"",
        "output": "0"
      },
      {
        "input": "patterns = [\"abc\",\"def\",\"ghi\"], word = \"defabc\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"quick\",\"brown\",\"fox\"], word = \"thequickbrownfoxjumpsoverthelazydog\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], word = \"abcdef ghijklmnopqrstuvwxyz\"",
        "output": "9"
      },
      {
        "input": "patterns = [\"aaa\",\"aa\",\"a\"], word = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"], word = \"abcdefghijabcdefghij\"",
        "output": "10"
      },
      {
        "input": "patterns = [\"test\", \"string\", \"finding\", \"substring\"], word = \"teststringfindingsubstring\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"aa\",\"aaa\",\"aaaa\"], word = \"aaaa\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"short\",\"shot\",\"dot\"], word = \"shortshot\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"foo\",\"bar\",\"foobar\",\"barfoo\"], word = \"foobarbarfoobarfoo\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"aba\",\"bab\",\"aba\"], word = \"ababababa\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"hello\",\"world\",\"python\"], word = \"pythonworldhello\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"], word = \"abcacbcbacbacbcbac\"",
        "output": "5"
      },
      {
        "input": "patterns = [\"banana\",\"ana\",\"nan\",\"ban\"], word = \"banananana\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"abc\",\"abcd\",\"abcde\"], word = \"abcdefgh\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"abcd\",\"dcba\",\"abcd\"], word = \"abcdcbaabcd\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"aaaa\",\"bbbb\",\"cccc\",\"dddd\"], word = \"abcdeabcdeabcde\"",
        "output": "0"
      },
      {
        "input": "patterns = [\"longpattern\",\"long\",\"pattern\"], word = \"longpatternlongpattern\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"ab\",\"bc\",\"cd\",\"de\",\"ef\",\"fg\",\"gh\",\"hi\",\"ij\"], word = \"abcdefghij\"",
        "output": "9"
      },
      {
        "input": "patterns = [\"abc\",\"bcd\",\"cde\",\"def\",\"efg\",\"fgh\",\"ghi\",\"hij\",\"ijk\",\"jkl\",\"klm\",\"lmn\",\"mno\",\"nop\",\"opq\",\"pqr\",\"qrs\",\"rst\",\"stu\",\"tuv\",\"uvw\",\"vwx\",\"wxy\",\"xyz\"], word = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "24"
      },
      {
        "input": "patterns = [\"zzz\",\"zzzz\",\"zzzzz\"], word = \"zzzzzzzzzz\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"ab\",\"bc\",\"cd\",\"de\"], word = \"abcde\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"abc\", \"bcd\", \"cde\", \"def\"], word = \"abcdefg\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"abc\",\"abcd\",\"abcde\",\"abcdef\"], word = \"abcdefg\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"test\",\"tset\",\"sett\",\"settset\"], word = \"testsettsettset\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"small\",\"medium\",\"large\",\"extra\",\"huge\"], word = \"smallmediumlargeextrahuge\"",
        "output": "5"
      },
      {
        "input": "patterns = [\"pattern\",\"tern\",\"ternary\",\"ternarysearch\"], word = \"binarysearchternarysearch\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"xyz\",\"zyx\",\"yzx\"], word = \"xyzzyxzyxzyx\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"abcd\",\"efgh\",\"ijkl\"], word = \"efghijklabcd\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"abc\",\"cab\",\"bac\",\"bca\",\"acb\",\"cba\"], word = \"abcabcabc\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"abc\",\"abcabc\",\"abcabcabc\"], word = \"abcabcabcabc\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"aaa\", \"bbb\", \"ccc\"], word = \"abacabadabc\"",
        "output": "0"
      },
      {
        "input": "patterns = [\"one\",\"two\",\"three\",\"onetwothree\"], word = \"onetwothreeonetwothree\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"search\",\"sear\",\"arch\"], word = \"searchingthesearchinthesearch\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"overlap\",\"lap\",\"lapping\"], word = \"lapping\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"abc\",\"def\",\"ghi\",\"jkl\"], word = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"abc\",\"def\",\"ghi\",\"jkl\"], word = \"abcdefghijk\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"xyz\", \"zyx\", \"wxy\", \"uvw\"], word = \"xyzzyxwxyuvw\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"abc\",\"def\",\"ghi\",\"jkl\"], word = \"abcdefghij\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"abcd\",\"efgh\",\"ijkl\",\"mnop\",\"qrst\",\"uvwx\",\"yz\"], word = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "7"
      },
      {
        "input": "patterns = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], word = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "9"
      },
      {
        "input": "patterns = [\"zz\", \"zzz\", \"zzzz\"], word = \"zzzzzzzzzz\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], word = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "26"
      },
      {
        "input": "patterns = [\"example\",\"ample\",\"mple\",\"ple\",\"le\",\"e\"], word = \"exampleexampleexample\"",
        "output": "6"
      },
      {
        "input": "patterns = [\"ab\",\"ba\",\"ac\",\"ca\",\"bc\",\"cb\"], word = \"abcbaacbba\"",
        "output": "5"
      },
      {
        "input": "patterns = [\"abc\",\"def\",\"ghi\"], word = \"abcdefghi\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"xyz\",\"zyx\",\"yzx\"], word = \"xyzzyxzyx\"",
        "output": "2"
      },
      {
        "input": "patterns = [\"zzz\",\"zz\",\"z\"], word = \"zzzzzzzzzz\"",
        "output": "3"
      },
      {
        "input": "patterns = [\"pattern\",\"tern\",\"ternary\",\"ary\"], word = \"patternarypatternary\"",
        "output": "4"
      },
      {
        "input": "patterns = [\"xyz\",\"abc\",\"def\",\"ghi\",\"jkl\"], word = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "0"
      },
      {
        "input": "patterns = [\"a\",\"ab\",\"abc\",\"abcd\"], word = \"abcdabcdabcd\"",
        "output": "4"
      }
    ]
  },
  {
    "id": 1678,
    "difficulty": "Easy",
    "tags": [
      "String"
    ],
    "problemDescription": "You own a Goal Parser that can interpret a string command. The command consists of an alphabet of \"G\", \"()\" and/or \"(al)\" in some order. The Goal Parser will interpret \"G\" as the string \"G\", \"()\" as the string \"o\", and \"(al)\" as the string \"al\". The interpreted strings are then concatenated in the original order.\nGiven the string command, return the Goal Parser's interpretation of command.\n\u00a0\nExample 1:\n\nInput: command = \"G()(al)\"\nOutput: \"Goal\"\nExplanation:\u00a0The Goal Parser interprets the command as follows:\nG -> G\n() -> o\n(al) -> al\nThe final concatenated result is \"Goal\".\n\nExample 2:\n\nInput: command = \"G()()()()(al)\"\nOutput: \"Gooooal\"\n\nExample 3:\n\nInput: command = \"(al)G(al)()()G\"\nOutput: \"alGalooG\"\n\n\u00a0\nConstraints:\n\n1 <= command.length <= 100\ncommand consists of \"G\", \"()\", and/or \"(al)\" in some order.\n\n",
    "starterCode": "class Solution:\n    def interpret(self, command: str) -> str:\n        ",
    "testCases": [
      {
        "input": "command = \"G()()()()(al)\"",
        "output": "Gooooal"
      },
      {
        "input": "command = \"G\"",
        "output": "G"
      },
      {
        "input": "command = \"()\"",
        "output": "o"
      },
      {
        "input": "command = \"(al)G(al)()()G\"",
        "output": "alGalooG"
      },
      {
        "input": "command = \"G()(G)()\"",
        "output": "Go(G)o"
      },
      {
        "input": "command = \"G(al)G(al)\"",
        "output": "GalGal"
      },
      {
        "input": "command = \"G()(al)\"",
        "output": "Goal"
      },
      {
        "input": "command = \"()()()()\"",
        "output": "oooo"
      },
      {
        "input": "command = \"G()G(al)G()\"",
        "output": "GoGalGo"
      },
      {
        "input": "command = \"G(al)G(al)G(al)\"",
        "output": "GalGalGal"
      },
      {
        "input": "command = \"(al)(al)(al)\"",
        "output": "alalal"
      },
      {
        "input": "command = \"(al)\"",
        "output": "al"
      },
      {
        "input": "command = \"(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "alGalGalGalGalGalGalGal"
      },
      {
        "input": "command = \"G(al)()()G(al)()()G(al)()()\"",
        "output": "GalooGalooGaloo"
      },
      {
        "input": "command = \"G(al)(al)G(al)(al)G(al)(al)\"",
        "output": "GalalGalalGalal"
      },
      {
        "input": "command = \"()()()()G(al)G(al)G(al)G(al)\"",
        "output": "ooooGalGalGalGal"
      },
      {
        "input": "command = \"()()()G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "oooGalGalGalGalGalGal"
      },
      {
        "input": "command = \"()G(al)G()G(al)()\"",
        "output": "oGalGoGalo"
      },
      {
        "input": "command = \"()G(al)()G(al)()G(al)()\"",
        "output": "oGaloGaloGalo"
      },
      {
        "input": "command = \"G()G()G()G()G()G()G()G()G()G()G()G()G()G()G(al)\"",
        "output": "GoGoGoGoGoGoGoGoGoGoGoGoGoGoGal"
      },
      {
        "input": "command = \"G(al)(al)(al)\"",
        "output": "Galalal"
      },
      {
        "input": "command = \"()(G(al)G(al))(G(al)G(al))\"",
        "output": "o(GalGal)(GalGal)"
      },
      {
        "input": "command = \"G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "GalGalGalGalGalGalGalGal"
      },
      {
        "input": "command = \"()G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "oGalGalGalGalGalGal"
      },
      {
        "input": "command = \"G(al)G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "GalGalGalGalGalGalGal"
      },
      {
        "input": "command = \"G(al)G()G(al)G()G(al)\"",
        "output": "GalGoGalGoGal"
      },
      {
        "input": "command = \"(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "alGalGalGalGalGalGalGalGalGal"
      },
      {
        "input": "command = \"G()(al)G()(al)G()(al)\"",
        "output": "GoalGoalGoal"
      },
      {
        "input": "command = \"(al)G(al)()G(al)()G(al)()G(al)()G(al)()\"",
        "output": "alGaloGaloGaloGaloGalo"
      },
      {
        "input": "command = \"(al)G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "alGalGalGalGalGalGal"
      },
      {
        "input": "command = \"()G(al)G()G(al)\"",
        "output": "oGalGoGal"
      },
      {
        "input": "command = \"(al)G(al)()()G(al)G(al)()()G(al)G(al)()()G\"",
        "output": "alGalooGalGalooGalGalooG"
      },
      {
        "input": "command = \"G(al)G(al)G(al)G(al)G(al)\"",
        "output": "GalGalGalGalGal"
      },
      {
        "input": "command = \"G(al)(al)(al)(al)\"",
        "output": "Galalalal"
      },
      {
        "input": "command = \"(al)G(al)(G(al)(G(al)G(al)))G(al)\"",
        "output": "alGal(Gal(GalGal))Gal"
      },
      {
        "input": "command = \"G()()G()()G()()\"",
        "output": "GooGooGoo"
      },
      {
        "input": "command = \"G(al)()G(al)()G(al)()G(al)()G(al)()\"",
        "output": "GaloGaloGaloGaloGalo"
      },
      {
        "input": "command = \"G(al)()G(al)()G(al)()G(al)()G(al)()G(al)()G(al)()G(al)()G(al)()G(al)()G(al)()\"",
        "output": "GaloGaloGaloGaloGaloGaloGaloGaloGaloGaloGalo"
      },
      {
        "input": "command = \"G()G()G(al)(al)G()\"",
        "output": "GoGoGalalGo"
      },
      {
        "input": "command = \"G(al)G(al)()()G(al)G(al)G(al)\"",
        "output": "GalGalooGalGalGal"
      },
      {
        "input": "command = \"G()(G()(G()(G())))\"",
        "output": "Go(Go(Go(Go)))"
      },
      {
        "input": "command = \"()G()G(al)()G(al)()G(al)\"",
        "output": "oGoGaloGaloGal"
      },
      {
        "input": "command = \"()G()()G()()G()()G(al)G()\"",
        "output": "oGooGooGooGalGo"
      },
      {
        "input": "command = \"G(al)G(al)G(al)G(al)\"",
        "output": "GalGalGalGal"
      },
      {
        "input": "command = \"G()(al)G()(al)G()(al)G()(al)\"",
        "output": "GoalGoalGoalGoal"
      },
      {
        "input": "command = \"G()()()()(al)G(al)G(al)G(al)\"",
        "output": "GooooalGalGalGal"
      },
      {
        "input": "command = \"G(al)G(al)()()G(al)G(al)()()\"",
        "output": "GalGalooGalGaloo"
      },
      {
        "input": "command = \"G()(G(al))(G(al))G()(G(al))(G(al))\"",
        "output": "Go(Gal)(Gal)Go(Gal)(Gal)"
      },
      {
        "input": "command = \"(al)(al)G(al)(al)G(al)(al)\"",
        "output": "alalGalalGalal"
      },
      {
        "input": "command = \"G(al)(al)(al)G\"",
        "output": "GalalalG"
      },
      {
        "input": "command = \"(al)G(al)()G(al)()G(al)()G(al)()\"",
        "output": "alGaloGaloGaloGalo"
      },
      {
        "input": "command = \"G(al)(al)(al)G(al)(al)(al)G(al)(al)(al)G\"",
        "output": "GalalalGalalalGalalalG"
      },
      {
        "input": "command = \"G(al)(G(al)G(al))(G(al))\"",
        "output": "Gal(GalGal)(Gal)"
      },
      {
        "input": "command = \"G()(G(al))G()(G(al))\"",
        "output": "Go(Gal)Go(Gal)"
      },
      {
        "input": "command = \"G()G()G()G()G()G()G()G()\"",
        "output": "GoGoGoGoGoGoGoGo"
      },
      {
        "input": "command = \"G(al)()G(al)()G(al)()G(al)()G(al)()G(al)()\"",
        "output": "GaloGaloGaloGaloGaloGalo"
      },
      {
        "input": "command = \"()()()G(al)G(al)G(al)()()()\"",
        "output": "oooGalGalGalooo"
      },
      {
        "input": "command = \"(al)()G(al)()G(al)G(al)\"",
        "output": "aloGaloGalGal"
      },
      {
        "input": "command = \"(al)(al)(al)(al)G(al)G()\"",
        "output": "alalalalGalGo"
      },
      {
        "input": "command = \"(al)(G)(al)(G)(al)(G)(al)\"",
        "output": "al(G)al(G)al(G)al"
      },
      {
        "input": "command = \"G(al)(al)G(al)\"",
        "output": "GalalGal"
      },
      {
        "input": "command = \"(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "alGalGalGalGalGal"
      },
      {
        "input": "command = \"()G(al)G(al)G(al)G(al)G(al)\"",
        "output": "oGalGalGalGalGal"
      },
      {
        "input": "command = \"G(al)G()(al)G()(al)G()(al)G()\"",
        "output": "GalGoalGoalGoalGo"
      },
      {
        "input": "command = \"G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "GalGalGalGalGalGalGalGalGalGal"
      },
      {
        "input": "command = \"G()(G()(G)())\"",
        "output": "Go(Go(G)o)"
      },
      {
        "input": "command = \"()()()()()()()()()()()()()()()()()()()()()G(al)\"",
        "output": "oooooooooooooooooooooGal"
      },
      {
        "input": "command = \"G(al)()G(al)()G(al)()G(al)()G(al)\"",
        "output": "GaloGaloGaloGaloGal"
      },
      {
        "input": "command = \"(al)G(al)(al)G(al)G\"",
        "output": "alGalalGalG"
      },
      {
        "input": "command = \"G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "GalGalGalGalGalGal"
      },
      {
        "input": "command = \"G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "GalGalGalGalGalGalGalGalGal"
      },
      {
        "input": "command = \"(al)()G(al)()G(al)()G(al)()\"",
        "output": "aloGaloGaloGalo"
      },
      {
        "input": "command = \"G(al)(G()(G)(G)())G(al)\"",
        "output": "Gal(Go(G)(G)o)Gal"
      },
      {
        "input": "command = \"G()G(al)G()G(al)\"",
        "output": "GoGalGoGal"
      },
      {
        "input": "command = \"(al)(al)(al)G(al)\"",
        "output": "alalalGal"
      },
      {
        "input": "command = \"G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "GalGalGalGalGalGalGalGalGalGalGalGal"
      },
      {
        "input": "command = \"(al)G(al)G(al)G(al)G(al)\"",
        "output": "alGalGalGalGal"
      },
      {
        "input": "command = \"(al)(G(al))(G(al))(G(al))(G(al))(G(al))\"",
        "output": "al(Gal)(Gal)(Gal)(Gal)(Gal)"
      },
      {
        "input": "command = \"()()()()()G(al)()()\"",
        "output": "oooooGaloo"
      },
      {
        "input": "command = \"()G(al)()G(al)()\"",
        "output": "oGaloGalo"
      },
      {
        "input": "command = \"(al)(al)(al)(al)(al)(al)(al)(al)\"",
        "output": "alalalalalalalal"
      },
      {
        "input": "command = \"()()()()(al)()()()(al)()()()\"",
        "output": "ooooaloooalooo"
      },
      {
        "input": "command = \"G(al)G()G(al)G()G(al)G()\"",
        "output": "GalGoGalGoGalGo"
      },
      {
        "input": "command = \"G()(G()(G()(G)())())\"",
        "output": "Go(Go(Go(G)o)o)"
      },
      {
        "input": "command = \"G(al)()G(al)()G(al)()G(al)()G(al)()G(al)()G(al)()G(al)()\"",
        "output": "GaloGaloGaloGaloGaloGaloGaloGalo"
      },
      {
        "input": "command = \"G(al)(al)G(al)G(al)\"",
        "output": "GalalGalGal"
      },
      {
        "input": "command = \"G(al)(G(al))(G(al))(G(al))G(al)\"",
        "output": "Gal(Gal)(Gal)(Gal)Gal"
      },
      {
        "input": "command = \"G()()()()(al)G(al)G(al)G(al)G(al)\"",
        "output": "GooooalGalGalGalGal"
      },
      {
        "input": "command = \"G()(G()(G()(G()())))\"",
        "output": "Go(Go(Go(Goo)))"
      },
      {
        "input": "command = \"G(al)()G(al)()G(al)()G(al)()G(al)G(al)\"",
        "output": "GaloGaloGaloGaloGalGal"
      },
      {
        "input": "command = \"(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)G(al)\"",
        "output": "alGalGalGalGalGalGalGalGalGalGalGal"
      },
      {
        "input": "command = \"G()G()G()G()G()G()G()G()G()G()G()G()G()G()G()G()\"",
        "output": "GoGoGoGoGoGoGoGoGoGoGoGoGoGoGoGo"
      },
      {
        "input": "command = \"(al)()()()()()()()()()()()()()()()()()()()()()()()()()()()()\"",
        "output": "aloooooooooooooooooooooooooooo"
      },
      {
        "input": "command = \"G()G()G()G()G(al)G(al)G(al)\"",
        "output": "GoGoGoGoGalGalGal"
      },
      {
        "input": "command = \"()()()()()()()()()()G(al)G(al)G(al)G(al)G(al)\"",
        "output": "ooooooooooGalGalGalGalGal"
      }
    ]
  },
  {
    "id": 2996,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "problemDescription": "You are given a 0-indexed array of integers nums.\nA prefix nums[0..i] is sequential if, for all 1 <= j <= i, nums[j] = nums[j - 1] + 1. In particular, the prefix consisting only of nums[0] is sequential.\nReturn the smallest integer x missing from nums such that x is greater than or equal to the sum of the longest sequential prefix.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,3,2,5]\nOutput: 6\nExplanation: The longest sequential prefix of nums is [1,2,3] with a sum of 6. 6 is not in the array, therefore 6 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n\nExample 2:\n\nInput: nums = [3,4,5,1,12,14,13]\nOutput: 15\nExplanation: The longest sequential prefix of nums is [3,4,5] with a sum of 12. 12, 13, and 14 belong to the array while 15 does not. Therefore 15 is the smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 50\n1 <= nums[i] <= 50\n\n",
    "starterCode": "class Solution:\n    def missingInteger(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,3,2,4,5]",
        "output": "6"
      },
      {
        "input": "nums = [10,11,12,8,9,13]",
        "output": "33"
      },
      {
        "input": "nums = [10,11,12,13,14]",
        "output": "60"
      },
      {
        "input": "nums = [1,3,5,7,9]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "55"
      },
      {
        "input": "nums = [50,49,48,47,46]",
        "output": "51"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14]",
        "output": "95"
      },
      {
        "input": "nums = [2,3,4,5,6]",
        "output": "20"
      },
      {
        "input": "nums = [1,2,4,3,5]",
        "output": "6"
      },
      {
        "input": "nums = [5,6,7,8,9]",
        "output": "35"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15]",
        "output": "110"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "15"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,1]",
        "output": "54"
      },
      {
        "input": "nums = [1,2,3,2,5]",
        "output": "6"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "2"
      },
      {
        "input": "nums = [3,4,5,1,12,14,13]",
        "output": "15"
      },
      {
        "input": "nums = [1,2,2,3,4]",
        "output": "5"
      },
      {
        "input": "nums = [1,2,3,5,6]",
        "output": "7"
      },
      {
        "input": "nums = [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "204"
      },
      {
        "input": "nums = [1,2,4,5,6]",
        "output": "3"
      },
      {
        "input": "nums = [7,8,9,10,12,13,14,15,16,17]",
        "output": "34"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "1265"
      },
      {
        "input": "nums = [5,6,7,8,10,11,12]",
        "output": "26"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,1,11,12,13,14,15,16,17,18,19,20]",
        "output": "54"
      },
      {
        "input": "nums = [1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "26"
      },
      {
        "input": "nums = [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "3"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,50]",
        "output": "1275"
      },
      {
        "input": "nums = [1,2,3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "51"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,1]",
        "output": "1274"
      },
      {
        "input": "nums = [3,5,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1]",
        "output": "31"
      },
      {
        "input": "nums = [5,6,7,8,10,11,12,13,14]",
        "output": "26"
      },
      {
        "input": "nums = [3,2,1,4,5,6,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "nums = [10,11,12,13,10,9,8]",
        "output": "46"
      },
      {
        "input": "nums = [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "3"
      },
      {
        "input": "nums = [50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "51"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "104"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50]",
        "output": "1176"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "465"
      },
      {
        "input": "nums = [7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]",
        "output": "609"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,11,13,14,15]",
        "output": "65"
      },
      {
        "input": "nums = [1,3,4,5,6,7,8,9,10,11]",
        "output": "2"
      },
      {
        "input": "nums = [5,4,3,2,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "21"
      },
      {
        "input": "nums = [1,2,4,5,6,3,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "nums = [5,6,7,8,9,10,1,2,3,4]",
        "output": "45"
      },
      {
        "input": "nums = [10,11,12,13,15,14,16,17,18,19]",
        "output": "46"
      },
      {
        "input": "nums = [2,3,5,4,6,7,8,9,10,11]",
        "output": "12"
      },
      {
        "input": "nums = [25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "975"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "6"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "315"
      },
      {
        "input": "nums = [25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]",
        "output": "925"
      },
      {
        "input": "nums = [10,11,12,13,15,16,17,18,19,20]",
        "output": "46"
      },
      {
        "input": "nums = [5,6,7,8,9,10,3,2,1]",
        "output": "45"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,1,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "54"
      },
      {
        "input": "nums = [1,2,3,4,6,7,8,9,10,11,12]",
        "output": "13"
      },
      {
        "input": "nums = [2,3,4,1,5,6,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "nums = [4,5,6,7,8,9,10,11,12,13,14,15,1]",
        "output": "114"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10,11,12,13]",
        "output": "14"
      },
      {
        "input": "nums = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15]",
        "output": "31"
      },
      {
        "input": "nums = [10,11,12,13,14,20,21,22,23]",
        "output": "60"
      },
      {
        "input": "nums = [3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]",
        "output": "6"
      },
      {
        "input": "nums = [3,5,4,6,7,8,9,10,11,12]",
        "output": "13"
      },
      {
        "input": "nums = [1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "2"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "2"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "11"
      },
      {
        "input": "nums = [1,2,4,5,7,8,10,11,13,14]",
        "output": "3"
      },
      {
        "input": "nums = [10,11,12,13,9,8,7,6,5,4,3,2,1]",
        "output": "46"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,1,11,12,13]",
        "output": "54"
      },
      {
        "input": "nums = [10,11,12,13,7,8,9]",
        "output": "46"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71]",
        "output": "6"
      },
      {
        "input": "nums = [5,6,7,8,9,3,2,1]",
        "output": "35"
      },
      {
        "input": "nums = [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "775"
      },
      {
        "input": "nums = [5,6,7,8,9,10,3,4,2,1]",
        "output": "45"
      },
      {
        "input": "nums = [3,4,5,6,7,8,9,10,1,2]",
        "output": "52"
      },
      {
        "input": "nums = [2,3,4,5,10,9,8,7,6,5,4,3,2]",
        "output": "14"
      },
      {
        "input": "nums = [1,2,4,5,6,7,8,9,10,11,12]",
        "output": "3"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "nums = [4,5,6,7,8,9,10,11,12,13,1,2]",
        "output": "85"
      },
      {
        "input": "nums = [49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "50"
      },
      {
        "input": "nums = [5,6,7,8,10,11,12,13,14,15]",
        "output": "26"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "210"
      },
      {
        "input": "nums = [20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "275"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,1,2,3,4]",
        "output": "1265"
      },
      {
        "input": "nums = [30,31,32,33,30,31,32,33]",
        "output": "126"
      },
      {
        "input": "nums = [7,8,9,10,11,12,13,14,15,16]",
        "output": "115"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,1,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "54"
      },
      {
        "input": "nums = [10,11,12,13,14,15,16,17,18,19,20]",
        "output": "165"
      },
      {
        "input": "nums = [3,5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "4"
      },
      {
        "input": "nums = [40,41,42,43,44,45,46,47,48,49,50,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]",
        "output": "495"
      },
      {
        "input": "nums = [40,41,42,43,44,45,46,47,48,49,50,1,2,3]",
        "output": "495"
      },
      {
        "input": "nums = [49,50,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]",
        "output": "99"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "325"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "55"
      },
      {
        "input": "nums = [25,26,27,28,29,30,31,32,33,34,35]",
        "output": "330"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]",
        "output": "425"
      },
      {
        "input": "nums = [5,6,7,8,3,4,2,1]",
        "output": "26"
      },
      {
        "input": "nums = [45,46,47,48,49,50,1,2,3]",
        "output": "285"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "55"
      },
      {
        "input": "nums = [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "319"
      },
      {
        "input": "nums = [45,46,47,48,49,50,1,2,3,4,5,6,7,8,9,10]",
        "output": "285"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "209"
      },
      {
        "input": "nums = [49,50,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "99"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "16"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "1275"
      },
      {
        "input": "nums = [30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "840"
      },
      {
        "input": "nums = [20,21,22,23,24,15,16,17,18,19]",
        "output": "110"
      },
      {
        "input": "nums = [3,5,4,6,7,8,9,10,11,12,13]",
        "output": "14"
      },
      {
        "input": "nums = [1,3,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "21"
      },
      {
        "input": "nums = [5,6,7,8,9,3,4,2,1]",
        "output": "35"
      },
      {
        "input": "nums = [30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,1,2,3,4,5]",
        "output": "840"
      },
      {
        "input": "nums = [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,1,2,3]",
        "output": "1269"
      },
      {
        "input": "nums = [10,11,12,15,16,17,18]",
        "output": "33"
      },
      {
        "input": "nums = [25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]",
        "output": "165"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10]",
        "output": "465"
      },
      {
        "input": "nums = [15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "360"
      },
      {
        "input": "nums = [30,31,28,29,32,33,34,35,36,37,38,39,40]",
        "output": "61"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,50]",
        "output": "435"
      },
      {
        "input": "nums = [15,16,17,18,19,20,1,2,3,4]",
        "output": "105"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51]",
        "output": "1225"
      },
      {
        "input": "nums = [2,3,1,4,5,6,7,8,9,10]",
        "output": "11"
      },
      {
        "input": "nums = [1,2,3,4,5,10,11,12,13,14,15,16]",
        "output": "17"
      }
    ]
  },
  {
    "id": 2273,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "problemDescription": "You are given a 0-indexed string array words, where words[i] consists of lowercase English letters.\nIn one operation, select any index i such that 0 < i < words.length and words[i - 1] and words[i] are anagrams, and delete words[i] from words. Keep performing this operation as long as you can select an index that satisfies the conditions.\nReturn words after performing all operations. It can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, \"dacb\" is an anagram of \"abdc\".\n\u00a0\nExample 1:\n\nInput: words = [\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"]\nOutput: [\"abba\",\"cd\"]\nExplanation:\nOne of the ways we can obtain the resultant array is by using the following operations:\n- Since words[2] = \"bbaa\" and words[1] = \"baba\" are anagrams, we choose index 2 and delete words[2].\n  Now words = [\"abba\",\"baba\",\"cd\",\"cd\"].\n- Since words[1] = \"baba\" and words[0] = \"abba\" are anagrams, we choose index 1 and delete words[1].\n  Now words = [\"abba\",\"cd\",\"cd\"].\n- Since words[2] = \"cd\" and words[1] = \"cd\" are anagrams, we choose index 2 and delete words[2].\n  Now words = [\"abba\",\"cd\"].\nWe can no longer perform any operations, so [\"abba\",\"cd\"] is the final answer.\nExample 2:\n\nInput: words = [\"a\",\"b\",\"c\",\"d\",\"e\"]\nOutput: [\"a\",\"b\",\"c\",\"d\",\"e\"]\nExplanation:\nNo two adjacent strings in words are anagrams of each other, so no operations are performed.\n\u00a0\nConstraints:\n\n1 <= words.length <= 100\n1 <= words[i].length <= 10\nwords[i] consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def removeAnagrams(self, words: List[str]) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "words = [\"abc\",\"cab\",\"bca\",\"xyz\",\"zyx\",\"yxz\"]",
        "output": "['abc', 'xyz']"
      },
      {
        "input": "words = [\"abc\",\"cba\",\"bca\",\"xyz\",\"zyx\"]",
        "output": "['abc', 'xyz']"
      },
      {
        "input": "words = [\"unique\",\"words\",\"here\",\"now\"]",
        "output": "['unique', 'words', 'here', 'now']"
      },
      {
        "input": "words = [\"test\",\"sett\",\"tset\",\"ttew\"]",
        "output": "['test', 'ttew']"
      },
      {
        "input": "words = [\"same\",\"same\",\"same\",\"same\",\"same\"]",
        "output": "['same']"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\"]",
        "output": "['a', 'b', 'c', 'd', 'e']"
      },
      {
        "input": "words = [\"aabbcc\",\"abcabc\",\"bcaacb\",\"bacbac\",\"cababc\"]",
        "output": "['aabbcc']"
      },
      {
        "input": "words = [\"test\",\"sett\",\"tset\",\"stet\",\"ttes\"]",
        "output": "['test']"
      },
      {
        "input": "words = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\"]",
        "output": "['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']"
      },
      {
        "input": "words = [\"hello\",\"billion\",\"oellh\",\"llheo\",\"note\",\"tone\"]",
        "output": "['hello', 'billion', 'oellh', 'note']"
      },
      {
        "input": "words = [\"abc\",\"cab\",\"bac\",\"bca\",\"xyz\"]",
        "output": "['abc', 'xyz']"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\"]",
        "output": "['abcd']"
      },
      {
        "input": "words = [\"hello\",\"olleh\",\"world\",\"dlrow\",\"python\",\"nohtyp\"]",
        "output": "['hello', 'world', 'python']"
      },
      {
        "input": "words = [\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"]",
        "output": "['abba', 'cd']"
      },
      {
        "input": "words = [\"deed\",\"deep\",\"peed\",\"depe\",\"dpee\"]",
        "output": "['deed', 'deep']"
      },
      {
        "input": "words = [\"hello\",\"world\",\"dlrow\",\"owrld\",\"worlc\"]",
        "output": "['hello', 'world', 'worlc']"
      },
      {
        "input": "words = [\"same\",\"same\",\"same\",\"same\"]",
        "output": "['same']"
      },
      {
        "input": "words = [\"abc\",\"cba\",\"bac\",\"bca\",\"cab\",\"acb\"]",
        "output": "['abc']"
      },
      {
        "input": "words = [\"aaa\",\"aa\",\"a\",\"aaaa\",\"aaa\"]",
        "output": "['aaa', 'aa', 'a', 'aaaa', 'aaa']"
      },
      {
        "input": "words = [\"aabbcc\",\"baccab\",\"abcabc\",\"xyz\",\"zyx\",\"yxz\"]",
        "output": "['aabbcc', 'xyz']"
      },
      {
        "input": "words = [\"listen\",\"silent\",\"enlist\",\"google\",\"gooegl\"]",
        "output": "['listen', 'google']"
      },
      {
        "input": "words = [\"abc\",\"cab\",\"bac\",\"bca\",\"acb\",\"cba\"]",
        "output": "['abc']"
      },
      {
        "input": "words = [\"aaa\",\"aa\",\"a\"]",
        "output": "['aaa', 'aa', 'a']"
      },
      {
        "input": "words = [\"deed\",\"deed\",\"deed\",\"deed\",\"deed\"]",
        "output": "['deed']"
      },
      {
        "input": "words = [\"hello\",\"world\",\"dlrow\",\"owrld\",\"werld\",\"hello\",\"olleh\",\"dlrow\",\"world\",\"rowld\",\"dlrow\",\"hello\",\"hello\",\"world\",\"world\",\"world\",\"dlrow\",\"dlrow\",\"dlrow\",\"dlrow\"]",
        "output": "['hello', 'world', 'werld', 'hello', 'dlrow', 'hello', 'world']"
      },
      {
        "input": "words = [\"triangle\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\"]",
        "output": "['triangle']"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\",\"a\",\"b\",\"c\",\"d\",\"e\"]",
        "output": "['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']"
      },
      {
        "input": "words = [\"listen\",\"silent\",\"enlist\",\"google\",\"gooegl\",\"abc\",\"cab\",\"bac\",\"xyz\",\"zyx\",\"yxz\"]",
        "output": "['listen', 'google', 'abc', 'xyz']"
      },
      {
        "input": "words = [\"rat\",\"car\",\"tar\",\"arc\",\"art\",\"cat\",\"tac\",\"act\",\"rat\",\"car\"]",
        "output": "['rat', 'car', 'tar', 'arc', 'art', 'cat', 'rat', 'car']"
      },
      {
        "input": "words = [\"racecar\",\"carrace\",\"acecar\",\"enlist\",\"inlets\",\"silent\",\"google\",\"gooegl\",\"abc\",\"bac\",\"cba\",\"xyz\",\"zyx\",\"yxz\",\"zyx\",\"xyz\",\"listen\",\"silent\",\"enlist\"]",
        "output": "['racecar', 'acecar', 'enlist', 'google', 'abc', 'xyz', 'listen']"
      },
      {
        "input": "words = [\"aabbcc\",\"aabbc\",\"aabc\",\"abc\",\"ab\",\"a\",\"abcd\",\"dcba\",\"bacd\",\"cadb\",\"abdc\",\"cabd\",\"mnop\",\"ponm\",\"omnp\",\"nmop\",\"mpno\",\"pmno\"]",
        "output": "['aabbcc', 'aabbc', 'aabc', 'abc', 'ab', 'a', 'abcd', 'mnop']"
      },
      {
        "input": "words = [\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\",\"ab\",\"ba\"]",
        "output": "['ab']"
      },
      {
        "input": "words = [\"hello\",\"olleh\",\"loleh\",\"ohell\",\"ehlol\",\"world\",\"dlrow\",\"rowld\",\"owlrd\",\"wrold\",\"hello\",\"olleh\",\"loleh\",\"ohell\",\"ehlol\"]",
        "output": "['hello', 'world', 'hello']"
      },
      {
        "input": "words = [\"listen\",\"silent\",\"enlist\",\"google\",\"gooegl\",\"abc\",\"cab\",\"bac\",\"xyz\",\"zyx\",\"zyxw\",\"wxyz\"]",
        "output": "['listen', 'google', 'abc', 'xyz', 'zyxw']"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"bacd\",\"cadb\",\"abdc\",\"cabd\",\"abcd\",\"dcba\",\"bacd\",\"cadb\",\"abdc\",\"cabd\",\"mnop\",\"ponm\",\"omnp\",\"nmop\",\"mpno\",\"pmno\"]",
        "output": "['abcd', 'mnop']"
      },
      {
        "input": "words = [\"aabbcc\",\"baccab\",\"abcabc\",\"xyz\",\"zyx\",\"yxz\",\"test\",\"sett\",\"tset\",\"stet\",\"ttes\"]",
        "output": "['aabbcc', 'xyz', 'test']"
      },
      {
        "input": "words = [\"listen\",\"silent\",\"enlist\",\"google\",\"gooegl\",\"abc\",\"cab\",\"bac\",\"bca\",\"acb\",\"cba\",\"xyz\",\"zyx\",\"yxz\"]",
        "output": "['listen', 'google', 'abc', 'xyz']"
      },
      {
        "input": "words = [\"rat\",\"tar\",\"art\",\"star\",\"rats\",\"tars\",\"arts\",\"tsar\",\"chart\",\"arch\",\"cart\",\"ract\",\"track\",\"krat\",\"tract\",\"crat\",\"carr\",\"rack\",\"crab\",\"back\",\"bark\",\"park\",\"parking\",\"arking\",\"king\",\"gnik\",\"pink\",\"kimp\",\"pink\",\"knip\",\"kpin\"]",
        "output": "['rat', 'star', 'chart', 'arch', 'cart', 'track', 'krat', 'tract', 'crat', 'carr', 'rack', 'crab', 'back', 'bark', 'park', 'parking', 'arking', 'king', 'pink', 'kimp', 'pink']"
      },
      {
        "input": "words = [\"rat\",\"tar\",\"art\",\"car\",\"arc\",\"par\",\"arp\",\"arc\",\"rac\",\"cat\",\"tac\",\"act\",\"cta\",\"atc\",\"tca\",\"pqr\",\"qrp\",\"rpq\",\"prq\",\"rqp\",\"qpr\",\"aabb\",\"bbaa\",\"abab\",\"abba\",\"aaaa\",\"bbba\",\"baab\",\"aabb\",\"baba\",\"bbaa\",\"cd\",\"cd\",\"efg\",\"feg\",\"gfe\",\"geg\",\"eee\",\"fff\",\"ggg\",\"hhh\",\"iii\",\"jjj\",\"kkk\",\"lll\",\"mmm\",\"nnn\",\"ooo\",\"ppp\",\"qqq\",\"rrr\",\"sss\",\"ttt\",\"uuu\",\"vvv\",\"www\",\"xxx\",\"yyy\",\"zzz\"]",
        "output": "['rat', 'car', 'par', 'arc', 'cat', 'pqr', 'aabb', 'aaaa', 'bbba', 'baab', 'cd', 'efg', 'geg', 'eee', 'fff', 'ggg', 'hhh', 'iii', 'jjj', 'kkk', 'lll', 'mmm', 'nnn', 'ooo', 'ppp', 'qqq', 'rrr', 'sss', 'ttt', 'uuu', 'vvv', 'www', 'xxx', 'yyy', 'zzz']"
      },
      {
        "input": "words = [\"race\",\"care\",\"acre\",\"racecar\",\"carrace\",\"racecar\",\"carrace\",\"abc\",\"bca\",\"cab\",\"xyz\",\"zyx\",\"yxz\",\"zyxzyx\",\"xzyzyz\",\"yzyzyx\"]",
        "output": "['race', 'racecar', 'abc', 'xyz', 'zyxzyx', 'xzyzyz', 'yzyzyx']"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\"]",
        "output": "['abcd']"
      },
      {
        "input": "words = [\"aaaa\",\"aaab\",\"aabb\",\"abbb\",\"bbbb\",\"bbb\",\"bb\",\"b\",\"a\",\"abc\",\"bac\",\"cba\",\"bca\",\"cab\",\"acb\",\"xyz\",\"zyx\",\"yxz\"]",
        "output": "['aaaa', 'aaab', 'aabb', 'abbb', 'bbbb', 'bbb', 'bb', 'b', 'a', 'abc', 'xyz']"
      },
      {
        "input": "words = [\"rat\",\"tar\",\"art\",\"dog\",\"god\",\"cat\",\"act\",\"tac\",\"tack\",\"rack\",\"track\",\"chart\",\"cart\"]",
        "output": "['rat', 'dog', 'cat', 'tack', 'rack', 'track', 'chart', 'cart']"
      },
      {
        "input": "words = [\"abcde\",\"edcba\",\"decba\",\"acdeb\",\"badce\",\"abcde\",\"edcba\",\"decba\",\"acdeb\",\"badce\",\"abcde\",\"edcba\",\"decba\",\"acdeb\",\"badce\",\"abcde\",\"edcba\",\"decba\",\"acdeb\",\"badce\"]",
        "output": "['abcde']"
      },
      {
        "input": "words = [\"anagram\",\"nagaram\",\"margana\",\"anagram\",\"margana\",\"anagram\",\"nagaram\",\"margana\",\"anagram\",\"nagaram\",\"margana\",\"anagram\",\"nagaram\",\"margana\",\"anagram\",\"nagaram\",\"margana\",\"anagram\",\"nagaram\",\"margana\"]",
        "output": "['anagram']"
      },
      {
        "input": "words = [\"python\",\"typhon\",\"hypton\",\"ypthon\",\"phonto\",\"opynth\",\"ypthon\",\"phonto\",\"opynth\",\"ypthon\",\"phonto\",\"opynth\",\"ypthon\",\"phonto\",\"opynth\"]",
        "output": "['python', 'phonto', 'opynth', 'phonto', 'opynth', 'phonto', 'opynth', 'phonto', 'opynth']"
      },
      {
        "input": "words = [\"dormitory\",\"dirtyroom\",\"dirtyroom\",\"dormitory\",\"dirtyroom\",\"dirtyroom\",\"dormitory\"]",
        "output": "['dormitory']"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\"]",
        "output": "['abcd']"
      },
      {
        "input": "words = [\"aaaaa\",\"aaabb\",\"aabba\",\"abbaa\",\"baaab\",\"baaba\",\"bbaaa\",\"abcde\",\"edcba\",\"decba\",\"cbade\",\"badec\"]",
        "output": "['aaaaa', 'aaabb', 'abcde']"
      },
      {
        "input": "words = [\"listen\",\"silent\",\"enlist\",\"google\",\"gooegl\",\"abc\",\"bca\",\"cab\",\"xyz\",\"zyx\",\"yxz\"]",
        "output": "['listen', 'google', 'abc', 'xyz']"
      },
      {
        "input": "words = [\"race\",\"care\",\"acre\",\"barc\",\"racecar\",\"carrace\",\"racecar\",\"carecar\",\"abcde\",\"edcba\",\"bcdea\",\"deabc\",\"acdeb\",\"decab\"]",
        "output": "['race', 'barc', 'racecar', 'abcde']"
      },
      {
        "input": "words = [\"triangle\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\",\"integral\"]",
        "output": "['triangle']"
      },
      {
        "input": "words = [\"aabbcc\",\"abcabc\",\"baccab\",\"abccba\",\"bacabc\",\"aabbcc\",\"abcd\",\"dcba\",\"cdab\",\"bcda\",\"badc\",\"cabd\"]",
        "output": "['aabbcc', 'abcd']"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"abcd\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\"]",
        "output": "['abcd']"
      },
      {
        "input": "words = [\"rat\",\"tar\",\"art\",\"dog\",\"god\",\"cat\",\"act\",\"tac\",\"abc\",\"bca\",\"cab\",\"xyz\",\"zyx\",\"yxz\"]",
        "output": "['rat', 'dog', 'cat', 'abc', 'xyz']"
      },
      {
        "input": "words = [\"abcdefghijklmnopqrstuvwxyz\",\"zyxwvutsrqponmlkjihgfedcba\",\"mnopqrstuvwxyzabcdefghijkl\",\"defghijklmnopqrstuvwxyzabc\",\"jklmnopqrstuvwxyzabcdefghi\",\"pqrsutvwxyzabcdefghijklmno\",\"nopqrstuvwxyzabcdefghijklm\",\"mnopqrstuvwxyzabcdefghijklmno\",\"opqrstuvwxyzabcdefghijklmno\",\"pqrsutvwxyzabcdefghijklmno\",\"nopqrstuvwxyzabcdefghijklm\",\"mnopqrstuvwxyzabcdefghijklmno\",\"opqrstuvwxyzabcdefghijklmno\",\"pqrsutvwxyzabcdefghijklmno\",\"nopqrstuvwxyzabcdefghijklm\",\"mnopqrstuvwxyzabcdefghijklmno\",\"opqrstuvwxyzabcdefghijklmno\",\"pqrsutvwxyzabcdefghijklmno\",\"nopqrstuvwxyzabcdefghijklm\",\"mnopqrstuvwxyzabcdefghijklmno\",\"opqrstuvwxyzabcdefghijklmno\",\"pqrsutvwxyzabcdefghijklmno\"]",
        "output": "['abcdefghijklmnopqrstuvwxyz', 'mnopqrstuvwxyzabcdefghijklmno', 'opqrstuvwxyzabcdefghijklmno', 'pqrsutvwxyzabcdefghijklmno', 'mnopqrstuvwxyzabcdefghijklmno', 'opqrstuvwxyzabcdefghijklmno', 'pqrsutvwxyzabcdefghijklmno', 'mnopqrstuvwxyzabcdefghijklmno', 'opqrstuvwxyzabcdefghijklmno', 'pqrsutvwxyzabcdefghijklmno', 'mnopqrstuvwxyzabcdefghijklmno', 'opqrstuvwxyzabcdefghijklmno', 'pqrsutvwxyzabcdefghijklmno']"
      },
      {
        "input": "words = [\"hello\",\"olleh\",\"world\",\"dlrow\",\"python\",\"nothpy\",\"java\",\"avaj\",\"abcd\",\"dcba\",\"bacd\",\"cadb\",\"abdc\",\"cabd\"]",
        "output": "['hello', 'world', 'python', 'java', 'abcd']"
      },
      {
        "input": "words = [\"anagram\",\"nagaram\",\"margana\",\"ramnaga\",\"gnamar\",\"gnamar\",\"gnamra\",\"gnamra\",\"gnamra\",\"gnamra\",\"gnamra\",\"gnamra\",\"gnamra\"]",
        "output": "['anagram', 'gnamar']"
      },
      {
        "input": "words = [\"listen\",\"silent\",\"enlist\",\"google\",\"gooegl\",\"abc\",\"bca\",\"cab\",\"xyz\",\"zyx\",\"zyx\",\"xyz\"]",
        "output": "['listen', 'google', 'abc', 'xyz']"
      },
      {
        "input": "words = [\"aabbcc\",\"baccab\",\"cbaabc\",\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\",\"xyz\",\"zyx\",\"yxz\",\"zyx\",\"xyz\"]",
        "output": "['aabbcc', 'abc', 'xyz']"
      },
      {
        "input": "words = [\"listen\",\"silent\",\"enlist\",\"google\",\"gooegl\",\"abc\",\"cab\",\"bac\",\"xyz\",\"zyx\",\"yxz\",\"uvw\",\"vuw\",\"wuv\"]",
        "output": "['listen', 'google', 'abc', 'xyz', 'uvw']"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"bacd\",\"cadb\",\"abdc\",\"cabd\",\"abcd\",\"dcba\",\"bacd\",\"cadb\",\"abdc\",\"cabd\"]",
        "output": "['abcd']"
      },
      {
        "input": "words = [\"python\",\"typhon\",\"nohtyp\",\"ypthon\",\"hypnot\",\"python\",\"typhon\",\"nohtyp\",\"ypthon\",\"hypnot\",\"python\",\"typhon\",\"nohtyp\",\"ypthon\",\"hypnot\",\"python\",\"typhon\",\"nohtyp\",\"ypthon\",\"hypnot\"]",
        "output": "['python']"
      },
      {
        "input": "words = [\"listen\",\"silent\",\"enlist\",\"google\",\"gooegl\",\"inlets\"]",
        "output": "['listen', 'google', 'inlets']"
      },
      {
        "input": "words = [\"aabbcc\",\"abcabc\",\"baccab\",\"cabcab\",\"abacbc\",\"bbacac\",\"acbbca\",\"aabbbc\",\"aabbbc\",\"aabbbc\"]",
        "output": "['aabbcc', 'aabbbc']"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"cdab\",\"bacd\",\"cadb\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\"]",
        "output": "['abcd']"
      },
      {
        "input": "words = [\"aabbcc\",\"abcabc\",\"baccab\",\"xyz\",\"zyx\",\"yxz\",\"mnop\",\"ponm\",\"omnp\",\"nmop\",\"mpno\",\"pmno\"]",
        "output": "['aabbcc', 'xyz', 'mnop']"
      },
      {
        "input": "words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\",\"abcd\",\"abdc\",\"acbd\",\"acdb\",\"adbc\",\"adcb\",\"bacd\",\"badc\",\"bcad\",\"bcda\",\"bdac\",\"bdca\",\"cabd\",\"cadb\",\"cbad\",\"cbda\",\"cdab\",\"cdba\",\"dabc\",\"dacb\",\"dbac\",\"dbca\",\"dcab\",\"dcba\",\"zzzz\",\"zzz\",\"zz\",\"z\"]",
        "output": "['abc', 'abcd', 'zzzz', 'zzz', 'zz', 'z']"
      },
      {
        "input": "words = [\"ab\",\"ba\",\"aabb\",\"bbaa\",\"abab\",\"baba\",\"abba\",\"baab\",\"ab\",\"ba\"]",
        "output": "['ab', 'aabb', 'ab']"
      },
      {
        "input": "words = [\"aabbcc\",\"baccab\",\"abcabc\",\"abc\",\"bac\",\"cab\",\"bac\",\"abc\",\"bac\",\"cab\",\"bac\",\"abc\",\"bac\",\"abc\",\"bac\",\"abc\",\"bac\",\"abc\",\"bac\",\"abc\",\"bac\",\"abc\",\"bac\",\"abc\",\"bac\",\"abc\",\"bac\",\"abc\",\"bac\",\"abc\",\"bac\",\"abc\"]",
        "output": "['aabbcc', 'abc']"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"abdc\",\"cbad\",\"bcad\",\"adbc\",\"dabc\",\"cdab\",\"dacb\",\"cadb\",\"acbd\",\"bdac\",\"bdca\",\"abcd\",\"dcba\",\"abdc\",\"cbad\",\"bcad\",\"adbc\",\"dabc\",\"cdab\",\"dacb\",\"cadb\",\"acbd\",\"bdac\",\"bdca\",\"abcd\",\"dcba\",\"abdc\",\"cbad\",\"bcad\",\"adbc\",\"dabc\",\"cdab\",\"dacb\",\"cadb\",\"acbd\",\"bdac\",\"bdca\",\"abcd\",\"dcba\",\"abdc\",\"cbad\",\"bcad\",\"adbc\",\"dabc\",\"cdab\",\"dacb\",\"cadb\",\"acbd\",\"bdac\",\"bdca\"]",
        "output": "['abcd']"
      },
      {
        "input": "words = [\"aabbcc\",\"abcabc\",\"baccab\",\"ccabba\",\"cabacb\",\"abcabc\",\"aabbcc\",\"xyzxyz\",\"zyxzyx\",\"yxzyxz\",\"zyxzyx\"]",
        "output": "['aabbcc', 'xyzxyz']"
      },
      {
        "input": "words = [\"anagram\",\"nagaram\",\"margana\",\"gnarama\",\"granama\",\"aaagmnr\",\"ab\",\"ba\",\"abc\",\"cba\",\"abcd\",\"dcba\",\"xyz\",\"zyx\",\"yxz\",\"test\",\"sett\",\"tset\",\"stet\",\"ttes\",\"deed\",\"deep\",\"peed\",\"depe\",\"dpee\",\"aabbcc\",\"baccab\",\"abcabc\",\"rat\",\"tar\",\"art\",\"dog\",\"god\",\"cat\",\"act\",\"tac\",\"abcd\",\"abdc\",\"acbd\",\"acdb\",\"adbc\",\"adcb\",\"bacd\",\"badc\",\"bcad\",\"bcda\",\"bdac\",\"bdca\",\"cabd\",\"cadb\",\"cbad\",\"cbda\",\"cdab\",\"cdba\",\"dabc\",\"dacb\",\"dbac\",\"dbca\",\"dcab\",\"dcba\",\"zzzz\",\"zzz\",\"zz\",\"z\"]",
        "output": "['anagram', 'ab', 'abc', 'abcd', 'xyz', 'test', 'deed', 'deep', 'aabbcc', 'rat', 'dog', 'cat', 'abcd', 'zzzz', 'zzz', 'zz', 'z']"
      },
      {
        "input": "words = [\"word\",\"drow\",\"dwor\",\"owrd\",\"abcd\",\"dcba\",\"cadb\",\"bdac\",\"abcd\",\"dcba\",\"cabd\",\"bdac\"]",
        "output": "['word', 'abcd']"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"abcd\",\"abdc\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\"]",
        "output": "['abcd']"
      },
      {
        "input": "words = [\"anagram\",\"nagaram\",\"margana\",\"anagram\",\"nagaram\",\"margana\",\"anagram\",\"nagaram\"]",
        "output": "['anagram']"
      },
      {
        "input": "words = [\"evil\",\"vile\",\"live\",\"veil\",\"liVE\",\"EVIL\"]",
        "output": "['evil', 'liVE', 'EVIL']"
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"cdab\",\"bacd\",\"adcb\",\"cbad\",\"bcda\",\"abcd\",\"dcba\",\"cdab\",\"bacd\",\"adcb\",\"cbad\",\"bcda\"]",
        "output": "['abcd']"
      },
      {
        "input": "words = [\"rat\",\"tar\",\"art\",\"car\",\"arc\",\"arc\",\"rca\",\"arc\",\"cat\",\"tac\",\"act\",\"dog\",\"god\",\"god\",\"ogd\"]",
        "output": "['rat', 'car', 'cat', 'dog']"
      },
      {
        "input": "words = [\"hello\",\"billion\",\"nillion\",\"illonbi\",\"onbilin\",\"nnoblli\",\"olnibin\",\"lobinin\",\"ollinbi\",\"bloninl\",\"bnoloni\",\"noblinl\",\"llinbon\",\"lobinln\",\"nilonbl\",\"nonlibl\",\"oblinln\",\"nlonbil\",\"oninlb\",\"nobinll\",\"binlonl\",\"onlibnl\",\"nbinlol\",\"inlboon\",\"libnoln\",\"onilnbl\",\"inlobnl\",\"lnoibnl\",\"nobllin\",\"oinlnbl\",\"onilb\",\"nlibl\",\"inlbn\",\"lnbol\",\"onbil\",\"ilnob\",\"lnoib\",\"nlobi\",\"olnib\",\"blnio\",\"bnlio\",\"nliob\",\"libon\",\"inlob\",\"onilb\",\"nobil\",\"inobl\",\"onlbi\",\"nobil\",\"lobin\",\"linbo\",\"inolb\",\"nolbi\",\"libno\",\"inlob\",\"onilb\",\"nobli\",\"inobl\",\"onlbi\",\"nobil\",\"lobin\",\"linbo\",\"inolb\",\"nolbi\",\"libno\"]",
        "output": "['hello', 'billion', 'nillion', 'illonbi', 'onbilin', 'nnoblli', 'olnibin', 'ollinbi', 'bloninl', 'bnoloni', 'noblinl', 'oninlb', 'nobinll', 'inlboon', 'libnoln', 'onilb', 'nlibl', 'inlbn', 'lnbol', 'onbil']"
      },
      {
        "input": "words = [\"aabb\",\"abab\",\"bbaa\",\"abcd\",\"dcba\",\"cdab\",\"bcda\",\"mnop\",\"ponm\",\"opnm\",\"nmop\",\"qrst\",\"srqt\",\"qstr\",\"tqrs\",\"stqr\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\"]",
        "output": "['aabb', 'abcd', 'mnop', 'qrst', 'abcd']"
      },
      {
        "input": "words = [\"triangle\",\"integral\",\"integral\",\"integral\",\"triangle\",\"integral\"]",
        "output": "['triangle']"
      },
      {
        "input": "words = [\"listen\",\"silent\",\"enlist\",\"google\",\"gooegl\",\"abc\",\"cab\",\"bac\",\"xyz\",\"zyx\",\"yxz\",\"test\",\"sett\",\"tset\",\"stet\",\"ttes\",\"deed\",\"deep\",\"peed\",\"depe\",\"dpee\"]",
        "output": "['listen', 'google', 'abc', 'xyz', 'test', 'deed', 'deep']"
      },
      {
        "input": "words = [\"deed\",\"deep\",\"peed\",\"depe\",\"dpee\",\"abcd\",\"dcba\",\"cbad\",\"adcb\",\"bacd\",\"cabd\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\"]",
        "output": "['deed', 'deep', 'abcd']"
      },
      {
        "input": "words = [\"aabbcc\",\"bbaacc\",\"abcabc\",\"cccccc\",\"bbbaaa\",\"aabbcc\",\"ccbbdd\"]",
        "output": "['aabbcc', 'cccccc', 'bbbaaa', 'aabbcc', 'ccbbdd']"
      },
      {
        "input": "words = [\"anagram\",\"nagaram\",\"margana\",\"gnarham\",\"ramnaga\",\"gramana\",\"amnagar\",\"mangara\",\"gnarama\",\"ramagna\",\"amnagra\",\"agranam\",\"mangnra\",\"gnanram\",\"rangnam\",\"anagram\",\"nagaram\",\"margana\",\"gnarham\",\"ramnaga\",\"gramana\",\"amnagar\",\"mangara\",\"gnarama\",\"ramagna\",\"amnagra\",\"agranam\",\"mangnra\",\"gnanram\",\"rangnam\"]",
        "output": "['anagram', 'gnarham', 'ramnaga', 'mangnra', 'anagram', 'gnarham', 'ramnaga', 'mangnra']"
      }
    ]
  },
  {
    "id": 349,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\n\u00a0\nExample 1:\n\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2]\n\nExample 2:\n\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [9,4]\nExplanation: [4,9] is also accepted.\n\n\u00a0\nConstraints:\n\n1 <= nums1.length, nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 1000\n\n",
    "starterCode": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums1 = [1,2,3,4], nums2 = [4,3,2,1]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "nums1 = [1,1,1,1], nums2 = [1,1,1,1]",
        "output": "[1]"
      },
      {
        "input": "nums1 = [1,3,5,7], nums2 = [2,4,6,8]",
        "output": "[]"
      },
      {
        "input": "nums1 = [0,0,0,0], nums2 = [0,0,0,0]",
        "output": "[0]"
      },
      {
        "input": "nums1 = [0,1,2,3,4,5], nums2 = [5,4,3,2,1,0]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [10,20,30,40], nums2 = [30,40,50,60]",
        "output": "[40, 30]"
      },
      {
        "input": "nums1 = [1000], nums2 = [1000]",
        "output": "[1000]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [1,2,2,1], nums2 = [2,2]",
        "output": "[2]"
      },
      {
        "input": "nums1 = [1000,1000,1000], nums2 = [1000,1000]",
        "output": "[1000]"
      },
      {
        "input": "nums1 = [10,20,30], nums2 = [30,40,50]",
        "output": "[30]"
      },
      {
        "input": "nums1 = [5,5,5,5], nums2 = [5,5,5,5]",
        "output": "[5]"
      },
      {
        "input": "nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
        "output": "[9, 4]"
      },
      {
        "input": "nums1 = [0,1000], nums2 = [500,1000]",
        "output": "[1000]"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [4,5,6]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1000,1000], nums2 = [1000,1000]",
        "output": "[1000]"
      },
      {
        "input": "nums1 = [500,500,500], nums2 = [500]",
        "output": "[500]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [3,4,5,6,7]",
        "output": "[3, 4, 5]"
      },
      {
        "input": "nums1 = [0], nums2 = [0]",
        "output": "[0]"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [0,2,4,6,8]",
        "output": "[]"
      },
      {
        "input": "nums1 = [0,0,0], nums2 = [0,0,0]",
        "output": "[0]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [50, 10, 20, 30, 40]",
        "output": "[40, 10, 50, 20, 30]"
      },
      {
        "input": "nums1 = [0, 0, 0, 0, 0], nums2 = [0, 0, 0, 0, 0]",
        "output": "[0]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [500, 600, 700, 800, 900]",
        "output": "[800, 900, 500, 600, 700]"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [50,51,52,53,54,55,56,57,58,59]",
        "output": "[50]"
      },
      {
        "input": "nums1 = [999, 998, 997, 996, 995], nums2 = [994, 993, 992, 991, 990]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[1]"
      },
      {
        "input": "nums1 = [3,6,9,12,15,18,21,24,27,30], nums2 = [9,18,27,36,45,54,63,72,81,90]",
        "output": "[9, 18, 27]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 3, 5, 7, 9]"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4], nums2 = [2,2,4,4,6,6,8,8]",
        "output": "[2, 4]"
      },
      {
        "input": "nums1 = [1000, 0, 500, 250, 750], nums2 = [750, 500, 250, 0, 1000]",
        "output": "[0, 1000, 750, 500, 250]"
      },
      {
        "input": "nums1 = [250, 251, 252, 253, 254, 255, 256, 257, 258, 259], nums2 = [255, 256, 257, 258, 259, 260, 261, 262, 263, 264]",
        "output": "[256, 257, 258, 259, 255]"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [2,4,6,8,10]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1]",
        "output": "[1]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
        "output": "[5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [1, 10, 100, 1000], nums2 = [1000, 100, 10, 1]",
        "output": "[1000, 1, 10, 100]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [300, 301, 302, 303, 304, 305, 306, 307, 308, 309], nums2 = [309, 310, 311, 312, 313, 314, 315, 316, 317, 318]",
        "output": "[309]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [999, 998, 997, 996, 995, 994, 993, 992, 991, 990], nums2 = [990, 991, 992, 993, 994, 995, 996, 997, 998, 999]",
        "output": "[992, 993, 994, 995, 996, 997, 998, 999, 990, 991]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [90, 100, 110, 120, 130, 140]",
        "output": "[90, 100]"
      },
      {
        "input": "nums1 = [1000], nums2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [900, 1000, 1100, 1200, 1300]",
        "output": "[1000, 900]"
      },
      {
        "input": "nums1 = [1,10,100,1000], nums2 = [1,10,100,1000]",
        "output": "[1000, 1, 10, 100]"
      },
      {
        "input": "nums1 = [5, 5, 5, 5, 5], nums2 = [5, 5, 5, 5, 5]",
        "output": "[5]"
      },
      {
        "input": "nums1 = [345, 678, 910, 1112, 1314], nums2 = [1314, 345, 567, 789, 910]",
        "output": "[345, 1314, 910]"
      },
      {
        "input": "nums1 = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [2, 4, 6, 8, 10]",
        "output": "[2, 4, 6, 8, 10]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1, 0, -1, -2]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [100, 200, 300, 400, 500]",
        "output": "[100, 200, 300, 400, 500]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [200, 400, 600, 800, 1000]",
        "output": "[200, 400]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 3, 5, 7, 9]",
        "output": "[1, 3, 5, 7, 9]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [5, 5, 5, 5, 5]",
        "output": "[5]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[10]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1, 2, 3], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [50,60,70,80,90]",
        "output": "[50]"
      },
      {
        "input": "nums1 = [999, 998, 997, 996, 995], nums2 = [995, 996, 997, 998, 999]",
        "output": "[995, 996, 997, 998, 999]"
      },
      {
        "input": "nums1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [4, 5, 6, 7, 8]",
        "output": "[4, 5]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], nums2 = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19], nums2 = [2,4,6,8,10,12,14,16,18,20]",
        "output": "[]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [50, 60, 70, 80, 90, 100]",
        "output": "[50]"
      },
      {
        "input": "nums1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], nums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], nums2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "[]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [40, 50, 60, 70, 80]",
        "output": "[40, 50]"
      },
      {
        "input": "nums1 = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991], nums2 = [996, 997, 998, 999, 1000]",
        "output": "[996, 997, 998, 999, 1000]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [500, 400, 300, 200, 100, 500, 400, 300, 200, 100]",
        "output": "[100, 200, 300, 400, 500]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1]"
      },
      {
        "input": "nums1 = [0, 1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1, 0]",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3], nums2 = [3, 3, 4, 4, 5, 5]",
        "output": "[3]"
      },
      {
        "input": "nums1 = [500, 501, 502, 503, 504, 505], nums2 = [500, 501, 502, 503, 504, 505, 506, 507, 508, 509]",
        "output": "[500, 501, 502, 503, 504, 505]"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], nums2 = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "[]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "[]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [50, 60, 70, 80, 90]",
        "output": "[50]"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], nums2 = [5, 15, 25, 35, 45]",
        "output": "[35, 5, 45, 15, 25]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3], nums2 = [3, 3, 3, 2, 2, 1, 1]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [500, 500, 500, 500, 500]",
        "output": "[500]"
      },
      {
        "input": "nums1 = [1, 1, 2, 3, 3], nums2 = [2, 2, 3, 3, 4, 4]",
        "output": "[2, 3]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "[100, 70, 40, 10, 80, 50, 20, 90, 60, 30]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [5,10,15,20,25,30]",
        "output": "[10, 5, 15]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "[100, 200, 300, 400, 500]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], nums2 = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[]"
      },
      {
        "input": "nums1 = [7, 14, 21, 28, 35], nums2 = [35, 42, 49, 56, 63]",
        "output": "[35]"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], nums2 = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]",
        "output": "[30, 15]"
      },
      {
        "input": "nums1 = [500, 501, 502, 503, 504, 505, 506, 507, 508, 509], nums2 = [505, 506, 507, 508, 509, 510, 511, 512, 513, 514]",
        "output": "[505, 506, 507, 508, 509]"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25], nums2 = [5, 25, 10, 15, 20, 5, 25, 10, 15, 20]",
        "output": "[5, 10, 15, 20, 25]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 100], nums2 = [100, 200, 300, 400, 500]",
        "output": "[100]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[2, 4, 6, 8, 10]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], nums2 = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[10, 20, 5, 15]"
      },
      {
        "input": "nums1 = [500,501,502,503,504,505,506,507,508,509], nums2 = [500,501,502,503,504,505,506,507,508,509]",
        "output": "[500, 501, 502, 503, 504, 505, 506, 507, 508, 509]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[10]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], nums2 = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9], nums2 = [2, 4, 6, 8, 10]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3], nums2 = [2, 2, 3, 3, 4, 4]",
        "output": "[2, 3]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [500, 400, 300, 200, 100]",
        "output": "[100, 200, 300, 400, 500]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], nums2 = [5, 5, 4, 4, 3, 3, 2, 2, 1, 1]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [1, 2, 3], nums2 = [4, 5, 6]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], nums2 = [5, 4, 3, 2, 1, 1, 2, 2, 3, 3]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [500, 500, 500, 500, 500], nums2 = [500, 500, 500, 500, 500]",
        "output": "[500]"
      },
      {
        "input": "nums1 = [5, 10, 15, 20, 25, 30], nums2 = [30, 25, 20, 15, 10, 5]",
        "output": "[5, 10, 15, 20, 25, 30]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [1, 100, 200, 300, 400, 500, 600, 700, 800, 900]",
        "output": "[800, 900, 100, 200, 300, 400, 500, 600, 700]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [150, 250, 350, 450, 550]",
        "output": "[]"
      },
      {
        "input": "nums1 = [100, 100, 100, 100], nums2 = [100, 100, 100]",
        "output": "[100]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [500, 600, 700, 800, 900]",
        "output": "[500]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [5,6,7,8,9,10,11,12,13,14]",
        "output": "[5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [100,200,300], nums2 = [300,400,500,600,700]",
        "output": "[300]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], nums2 = [2, 4, 6, 8, 10]",
        "output": "[2, 4]"
      },
      {
        "input": "nums1 = [100, 200, 300], nums2 = [100, 200, 300, 400, 500]",
        "output": "[200, 100, 300]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1000], nums2 = [1000, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 1000, 8, 9]"
      },
      {
        "input": "nums1 = [0, 100, 200, 300, 400], nums2 = [400, 300, 200, 100, 0]",
        "output": "[0, 100, 200, 300, 400]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [15, 25, 35, 45, 55]",
        "output": "[]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [100, 300, 500, 700, 900]",
        "output": "[100, 500, 300]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[]"
      },
      {
        "input": "nums1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], nums2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "[0]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [15, 20, 25, 30, 35]",
        "output": "[20, 30]"
      }
    ]
  },
  {
    "id": 1290,
    "difficulty": "Easy",
    "tags": [
      "Linked List",
      "Math"
    ],
    "problemDescription": "Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.\nReturn the decimal value of the number in the linked list.\nThe most significant bit is at the head of the linked list.\n\u00a0\nExample 1:\n\n\nInput: head = [1,0,1]\nOutput: 5\nExplanation: (101) in base 2 = (5) in base 10\n\nExample 2:\n\nInput: head = [0]\nOutput: 0\n\n\u00a0\nConstraints:\n\nThe Linked List is not empty.\nNumber of nodes will not exceed 30.\nEach node's value is either 0 or 1.\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def getDecimalValue(self, head: Optional[ListNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "head = [1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0]",
        "output": "1648386068"
      },
      {
        "input": "head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]",
        "output": "18880"
      },
      {
        "input": "head = [1,0,0,1,1,0,1]",
        "output": "77"
      },
      {
        "input": "head = [0]",
        "output": "0"
      },
      {
        "input": "head = [1,0,0,1,0,1]",
        "output": "37"
      },
      {
        "input": "head = [1,1,0,0]",
        "output": "12"
      },
      {
        "input": "head = [1]",
        "output": "1"
      },
      {
        "input": "head = [1,1,0,0,1,1,1,0,1,0]",
        "output": "826"
      },
      {
        "input": "head = [1,0,1]",
        "output": "5"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "2147483647"
      },
      {
        "input": "head = [1,0,0,1,0]",
        "output": "18"
      },
      {
        "input": "head = [1,1,1]",
        "output": "7"
      },
      {
        "input": "head = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "1073741825"
      },
      {
        "input": "head = [1,1,1,1]",
        "output": "15"
      },
      {
        "input": "head = [1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0]",
        "output": "954437176"
      },
      {
        "input": "head = [1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "648719018"
      },
      {
        "input": "head = [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "134217728"
      },
      {
        "input": "head = [1,0,1,1,0,1,1,0,1]",
        "output": "365"
      },
      {
        "input": "head = [1,0,0,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0,0,1,0,0]",
        "output": "1304806852"
      },
      {
        "input": "head = [1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "984263338"
      },
      {
        "input": "head = [1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "894784853"
      },
      {
        "input": "head = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1]",
        "output": "715827883"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "1"
      },
      {
        "input": "head = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0]",
        "output": "1431655766"
      },
      {
        "input": "head = [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "939524097"
      },
      {
        "input": "head = [1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0]",
        "output": "920350134"
      },
      {
        "input": "head = [1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0]",
        "output": "969831324"
      },
      {
        "input": "head = [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]",
        "output": "536870910"
      },
      {
        "input": "head = [1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0]",
        "output": "900557658"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1]",
        "output": "3"
      },
      {
        "input": "head = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "536870912"
      },
      {
        "input": "head = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "715827882"
      },
      {
        "input": "head = [0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0]",
        "output": "214748364"
      },
      {
        "input": "head = [1,1,0,1,0,1,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0]",
        "output": "899337574"
      },
      {
        "input": "head = [1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0]",
        "output": "843654290"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1]",
        "output": "3"
      },
      {
        "input": "head = [1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1]",
        "output": "966367641"
      },
      {
        "input": "head = [1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "760567125"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1073741823"
      },
      {
        "input": "head = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "357913941"
      },
      {
        "input": "head = [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "939524096"
      },
      {
        "input": "head = [0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1]",
        "output": "178956971"
      },
      {
        "input": "head = [1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0]",
        "output": "644245094"
      },
      {
        "input": "head = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1]",
        "output": "715827883"
      },
      {
        "input": "head = [0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1]",
        "output": "429496729"
      },
      {
        "input": "head = [1,0,1,1,0,1,1,1,0,1]",
        "output": "733"
      },
      {
        "input": "head = [1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1]",
        "output": "858993459"
      },
      {
        "input": "head = [1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0]",
        "output": "1010580540"
      },
      {
        "input": "head = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "536870913"
      },
      {
        "input": "head = [1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1]",
        "output": "697932185"
      },
      {
        "input": "head = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "1431655765"
      },
      {
        "input": "head = [1,1,0,1,0,1,1,0,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0]",
        "output": "900310682"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0]",
        "output": "4294967292"
      },
      {
        "input": "head = [1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0]",
        "output": "613566756"
      },
      {
        "input": "head = [1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0]",
        "output": "692736660"
      },
      {
        "input": "head = [0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0]",
        "output": "107374182"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "1"
      },
      {
        "input": "head = [0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0]",
        "output": "143165576"
      },
      {
        "input": "head = [1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1]",
        "output": "769045933"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1]",
        "output": "3"
      },
      {
        "input": "head = [1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1]",
        "output": "1002159035"
      }
    ]
  },
  {
    "id": 104,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth\u00a0is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\u00a0\nExample 1:\n\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 3\n\nExample 2:\n\nInput: root = [1,null,2]\nOutput: 2\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-100 <= Node.val <= 100\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "3"
      },
      {
        "input": "root = [1,2,2,3,3,null,null,4,4,5,5]",
        "output": "4"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "4"
      },
      {
        "input": "root = [1,null,3,2,null,4,5]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,null,null,5]",
        "output": "3"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,null,null,null,8]",
        "output": "4"
      },
      {
        "input": "root = [1,2,2,3,3,null,null,4,4]",
        "output": "4"
      },
      {
        "input": "root = [1,null,2]",
        "output": "2"
      },
      {
        "input": "root = [1,null,null,2,null,null,3,null,null,4,null,null,5]",
        "output": "1"
      },
      {
        "input": "root = [0]",
        "output": "1"
      },
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "3"
      },
      {
        "input": "root = [1]",
        "output": "1"
      },
      {
        "input": "root = []",
        "output": "0"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,8,null,6,null,4,null,1,null]",
        "output": "5"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "10"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,4,null,null,4]",
        "output": "4"
      },
      {
        "input": "root = [3,9,20,15,7,16,8,13,14,18,19,20,21,22,23]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,6,null,null,7]",
        "output": "5"
      },
      {
        "input": "root = [10,5,15,3,7,null,18]",
        "output": "3"
      },
      {
        "input": "root = [1,2,2,3,3,null,null,4,4,4,4]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,null,null,null,8,9]",
        "output": "4"
      },
      {
        "input": "root = [1,-2,-3,4,5,-6,-7,8,9,-10,-11,-12,-13,-14,-15]",
        "output": "4"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,null,16,null,17,null,null,null,null,18]",
        "output": "4"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "15"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "9"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,8,null,null,null,null,null,9]",
        "output": "5"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8]",
        "output": "8"
      },
      {
        "input": "root = [1,2,null,3,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14]",
        "output": "8"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,10,11,null,12]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,null,null,7,8,9]",
        "output": "6"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8]",
        "output": "8"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,16,17,18,19,null,null,20,null]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]",
        "output": "5"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,8,null,6,null,4,null,1,null,2]",
        "output": "6"
      },
      {
        "input": "root = [0,-1,-2,-3,-4,-5,-6]",
        "output": "3"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,null,null,6,5]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,16]",
        "output": "5"
      },
      {
        "input": "root = [1,null,2,3,null,null,4,5,null,null,null,6,7,null,null,8,9]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,null,6,null,7]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,null,null,null,8,9,10,11,12,13]",
        "output": "5"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,null,null,null,null,17,20]",
        "output": "4"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,4,5,null,null,4,5]",
        "output": "5"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,8,null,9,null,null,10]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,6,null,8,9,10,null,null,11,12]",
        "output": "5"
      },
      {
        "input": "root = [2,-1,-2,null,-3,null,-4,null,-5]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,7]",
        "output": "4"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20,null,21,null,22,null,23,null,24,null,25,null,26,null,27,null,28,null,29,null,30,null,31,null,32]",
        "output": "32"
      },
      {
        "input": "root = [10,9,20,null,null,15,7,12,13,14,15]",
        "output": "4"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,8,10,11,null,12]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,6,null,7,null,null,8,null,9]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,6,null,7,null,8,null,9]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "5"
      },
      {
        "input": "root = [3,9,null,15,7,25,30,35,null,null,null,40,null,null,null,null,45]",
        "output": "6"
      },
      {
        "input": "root = [2,1,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "6"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5]",
        "output": "5"
      },
      {
        "input": "root = [5,4,7,3,null,2,null,-1,null,9]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,null,null,6,7,8,9]",
        "output": "5"
      },
      {
        "input": "root = [1,null,2,null,null,null,3,null,null,null,null,4]",
        "output": "2"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "6"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,8,9]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,6,null,null,7,null,8]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,null,null,6,null,7,null,8,null,9,null,10,null,11]",
        "output": "9"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,null,null,6,null,null,7,null,null,8,null,null,9]",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,5,null,7,8,null,null,null,null,9]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,null,9,null,10,null,11,null,12]",
        "output": "5"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,1,null,18,null,null,21]",
        "output": "5"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,null,null,null,null,null,null,null,null,9,null,null,null,null,10]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,6,7,null,8,null,9]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,null,null,null,null,null,null,null,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "8"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "15"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,null,null,16,17,null,null,null,null,18]",
        "output": "4"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,4,4,null,null,4,4]",
        "output": "5"
      },
      {
        "input": "root = [0,1,2,3,4,5,6,null,null,7,8,9,10,null,null,11,12]",
        "output": "5"
      },
      {
        "input": "root = [50,25,75,10,35,65,100,null,null,30,40,60,80,null,null,null,null,90,110]",
        "output": "5"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20]",
        "output": "20"
      },
      {
        "input": "root = [0,2,4,1,null,3,-1,5,1,null,6,null,8]",
        "output": "4"
      },
      {
        "input": "root = [3,9,20,8,10,15,7,6,null,null,null,null,18]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]",
        "output": "6"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6]",
        "output": "6"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,null,null,16,17,null,null,18,19]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11,null,null,12,13,null,null,14,15]",
        "output": "5"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "12"
      },
      {
        "input": "root = [1,2,2,3,3,3,3,4,4,4,4,4,4,null,null,5,5]",
        "output": "5"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13]",
        "output": "13"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "9"
      },
      {
        "input": "root = [3,9,20,15,7,null,null,8,null,null,null,null,10]",
        "output": "5"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11]",
        "output": "11"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,null,9,null,null,10]",
        "output": "4"
      },
      {
        "input": "root = [1,null,null,null,null,null,null]",
        "output": "1"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,null,null,9,null,null,10,11,12,null,null,13,14,15,null,null,null,null,null,null,16]",
        "output": "6"
      },
      {
        "input": "root = [-10,9,20,null,null,15,7]",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,6,7,null,null,null,null,null,null,8,9]",
        "output": "4"
      },
      {
        "input": "root = [1,2,2,3,4,4,3]",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,8,9,null,null,null,10,null,11]",
        "output": "5"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1]",
        "output": "4"
      }
    ]
  },
  {
    "id": 1025,
    "difficulty": "Easy",
    "tags": [
      "Brainteaser",
      "Math",
      "Dynamic Programming",
      "Game Theory"
    ],
    "problemDescription": "Alice and Bob take turns playing a game, with Alice starting first.\nInitially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of:\n\nChoosing any x with 0 < x < n and n % x == 0.\nReplacing the number n on the chalkboard with n - x.\n\nAlso, if a player cannot make a move, they lose the game.\nReturn true if and only if Alice wins the game, assuming both players play optimally.\n\u00a0\nExample 1:\n\nInput: n = 2\nOutput: true\nExplanation: Alice chooses 1, and Bob has no more moves.\n\nExample 2:\n\nInput: n = 3\nOutput: false\nExplanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.\n\n\u00a0\nConstraints:\n\n1 <= n <= 1000\n\n",
    "starterCode": "class Solution:\n    def divisorGame(self, n: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "n = 8",
        "output": "True"
      },
      {
        "input": "n = 3",
        "output": "False"
      },
      {
        "input": "n = 4",
        "output": "True"
      },
      {
        "input": "n = 9",
        "output": "False"
      },
      {
        "input": "n = 6",
        "output": "True"
      },
      {
        "input": "n = 2",
        "output": "True"
      },
      {
        "input": "n = 1000",
        "output": "True"
      },
      {
        "input": "n = 7",
        "output": "False"
      },
      {
        "input": "n = 10",
        "output": "True"
      },
      {
        "input": "n = 5",
        "output": "False"
      },
      {
        "input": "n = 625",
        "output": "False"
      },
      {
        "input": "n = 576",
        "output": "True"
      },
      {
        "input": "n = 729",
        "output": "False"
      },
      {
        "input": "n = 49",
        "output": "False"
      },
      {
        "input": "n = 50",
        "output": "True"
      },
      {
        "input": "n = 300",
        "output": "True"
      },
      {
        "input": "n = 99",
        "output": "False"
      },
      {
        "input": "n = 64",
        "output": "True"
      },
      {
        "input": "n = 17",
        "output": "False"
      },
      {
        "input": "n = 649",
        "output": "False"
      },
      {
        "input": "n = 23",
        "output": "False"
      },
      {
        "input": "n = 343",
        "output": "False"
      },
      {
        "input": "n = 640",
        "output": "True"
      },
      {
        "input": "n = 819",
        "output": "False"
      },
      {
        "input": "n = 128",
        "output": "True"
      },
      {
        "input": "n = 1024",
        "output": "True"
      },
      {
        "input": "n = 299",
        "output": "False"
      },
      {
        "input": "n = 777",
        "output": "False"
      },
      {
        "input": "n = 701",
        "output": "False"
      },
      {
        "input": "n = 999",
        "output": "False"
      },
      {
        "input": "n = 129",
        "output": "False"
      },
      {
        "input": "n = 18",
        "output": "True"
      },
      {
        "input": "n = 32",
        "output": "True"
      },
      {
        "input": "n = 256",
        "output": "True"
      },
      {
        "input": "n = 997",
        "output": "False"
      },
      {
        "input": "n = 768",
        "output": "True"
      },
      {
        "input": "n = 127",
        "output": "False"
      },
      {
        "input": "n = 81",
        "output": "False"
      },
      {
        "input": "n = 150",
        "output": "True"
      },
      {
        "input": "n = 503",
        "output": "False"
      },
      {
        "input": "n = 24",
        "output": "True"
      },
      {
        "input": "n = 15",
        "output": "False"
      },
      {
        "input": "n = 400",
        "output": "True"
      },
      {
        "input": "n = 512",
        "output": "True"
      },
      {
        "input": "n = 31",
        "output": "False"
      },
      {
        "input": "n = 377",
        "output": "False"
      },
      {
        "input": "n = 499",
        "output": "False"
      },
      {
        "input": "n = 1",
        "output": "False"
      },
      {
        "input": "n = 500",
        "output": "True"
      },
      {
        "input": "n = 420",
        "output": "True"
      },
      {
        "input": "n = 13",
        "output": "False"
      }
    ]
  },
  {
    "id": 257,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "String",
      "Backtracking",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, return all root-to-leaf paths in any order.\nA leaf is a node with no children.\n\u00a0\nExample 1:\n\n\nInput: root = [1,2,3,null,5]\nOutput: [\"1->2->5\",\"1->3\"]\n\nExample 2:\n\nInput: root = [1]\nOutput: [\"1\"]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 100].\n-100 <= Node.val <= 100\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "['1->2->4', '1->2->5', '1->3->6', '1->3->7']"
      },
      {
        "input": "root = [1,2,3,null,5]",
        "output": "['1->2->5', '1->3']"
      },
      {
        "input": "root = [-10,9,20,null,null,15,7]",
        "output": "['-10->9', '-10->20->15', '-10->20->7']"
      },
      {
        "input": "root = [-10,-20,-30,-40,null,-50,-60]",
        "output": "['-10->-20->-40', '-10->-30->-50', '-10->-30->-60']"
      },
      {
        "input": "root = [1,null,2,null,3,null,4]",
        "output": "['1->2->3->4']"
      },
      {
        "input": "root = [-10,-5,0,5,9]",
        "output": "['-10->-5->5', '-10->-5->9', '-10->0']"
      },
      {
        "input": "root = [1]",
        "output": "['1']"
      },
      {
        "input": "root = [1,null,2,null,3]",
        "output": "['1->2->3']"
      },
      {
        "input": "root = [0,2,4,1,null,3,-1,5,1,null,6,null,8]",
        "output": "['0->2->1->5', '0->2->1->1', '0->4->3->6', '0->4->-1->8']"
      },
      {
        "input": "root = [3,1,null,null,2]",
        "output": "['3->1->2']"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,null,21,18,22]",
        "output": "['3->9', '3->20->15->21', '3->20->7->18', '3->20->7->22']"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "['1->2->3->4->5->6->7->8->9->10']"
      },
      {
        "input": "root = [2,-3,5,1,null,-4,6,-7,null,null,null,null,-8,-9,7]",
        "output": "['2->-3->1->-7->-9', '2->-3->1->-7->7', '2->5->-4', '2->5->6->-8']"
      },
      {
        "input": "root = [100,-50,50,null,-100,null,100,-50,null,50,null,-100,null,100]",
        "output": "['100->-50->-100->-50->-100', '100->50->100->50->100']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]",
        "output": "['1->2->4->8', '1->2->4->9', '1->2->5->10', '1->2->5->11', '1->3->6->12', '1->3->6->13', '1->3->7->14', '1->3->7->15']"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1,null,null,null,9]",
        "output": "['5->4->11->7', '5->4->11->2->9', '5->8->13', '5->8->4->5', '5->8->4->1']"
      },
      {
        "input": "root = [1,2,3,4,null,6,7,8,null,10,11,null,13,null,null,16]",
        "output": "['1->2->4->8', '1->3->6->10->16', '1->3->6->11', '1->3->7->13']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]",
        "output": "['1->2->4->8->16', '1->2->4->8->17', '1->2->4->9->18', '1->2->4->9->19', '1->2->5->10->20', '1->2->5->11', '1->3->6->12', '1->3->6->13', '1->3->7->14', '1->3->7->15']"
      },
      {
        "input": "root = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "['0->1->3->7', '0->1->3->8', '0->1->4->9', '0->1->4->10', '0->2->5->11', '0->2->5->12', '0->2->6->13', '0->2->6->14']"
      },
      {
        "input": "root = [10,-10,20,-20,30,-30,40,-40,50,-50,60,-60,70,-70,80,-80,90,-90,100,-100]",
        "output": "['10->-10->-20->-40->-80', '10->-10->-20->-40->90', '10->-10->-20->50->-90', '10->-10->-20->50->100', '10->-10->30->-50->-100', '10->-10->30->60', '10->20->-30->-60', '10->20->-30->70', '10->20->40->-70', '10->20->40->80']"
      },
      {
        "input": "root = [10,null,20,null,30,null,40,null,50,null,60,null,70,null,80]",
        "output": "['10->20->30->40->50->60->70->80']"
      },
      {
        "input": "root = [0,-2,1,null,null,-3,null,-4,null,null,5]",
        "output": "['0->-2', '0->1->-3->-4->5']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,null,null,9,null,null,10,null,null,11,null,null,12]",
        "output": "['1->2->4->8->11', '1->2->5->9', '1->3->6', '1->3->7->10->12']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,16,17,18,19,20]",
        "output": "['1->2->4->8', '1->2->4->9', '1->2->5->10->16', '1->2->5->11->17', '1->2->5->11->18', '1->3->6->12->19', '1->3->6->12->20', '1->3->6->13', '1->3->7->14', '1->3->7->15']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "['1->2->4->8', '1->2->4->9->16->30', '1->2->4->9->17', '1->2->5->10->18', '1->2->5->10->19', '1->2->5->11->20', '1->2->5->11->21', '1->3->6->12->22', '1->3->6->12->23', '1->3->6->13->24', '1->3->6->13->25', '1->3->7->14->26', '1->3->7->14->27', '1->3->7->15->28', '1->3->7->15->29']"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,8,9,10,11,null,null,16,17,18,19]",
        "output": "['1->2->4->8', '1->2->4->9->16', '1->2->4->9->17', '1->2->5->10->18', '1->2->5->10->19', '1->2->5->11', '1->3']"
      },
      {
        "input": "root = [8,5,1,7,6,9,12,null,null,2,null,null,null,null,null,null,3]",
        "output": "['8->5->7', '8->5->6->2->3', '8->1->9', '8->1->12']"
      },
      {
        "input": "root = [1,2,3,null,5,null,6,null,null,null,7,null,8]",
        "output": "['1->2->5', '1->3->6->7->8']"
      },
      {
        "input": "root = [1,2,2,3,3,null,null,4,4,4,4]",
        "output": "['1->2->3->4', '1->2->3->4', '1->2->3->4', '1->2->3->4', '1->2']"
      },
      {
        "input": "root = [0,-1,-2,-3,-4,-5,-6,-7,null,-8,-9,-10,-11,-12,null,-13,null,null,-14]",
        "output": "['0->-1->-3->-7->-13', '0->-1->-4->-8->-14', '0->-1->-4->-9', '0->-2->-5->-10', '0->-2->-5->-11', '0->-2->-6->-12']"
      },
      {
        "input": "root = [0,-3,9,-10,null,5]",
        "output": "['0->-3->-10', '0->9->5']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "['1->2->4->8->12', '1->2->5->9->13', '1->3->6->10->14', '1->3->7->11->15']"
      },
      {
        "input": "root = [0,-1,1,-2,-3,2,3,-4,-5,-6,-7,4,5,6,7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31]",
        "output": "['0->-1->-2->-4->-8->-24', '0->-1->-2->-4->-8->-25', '0->-1->-2->-4->-9->-26', '0->-1->-2->-4->-9->-27', '0->-1->-2->-5->-10->-28', '0->-1->-2->-5->-10->-29', '0->-1->-2->-5->-11->-30', '0->-1->-2->-5->-11->-31', '0->-1->-3->-6->-12', '0->-1->-3->-6->-13', '0->-1->-3->-7->-14', '0->-1->-3->-7->-15', '0->1->2->4->-16', '0->1->2->4->-17', '0->1->2->5->-18', '0->1->2->5->-19', '0->1->3->6->-20', '0->1->3->6->-21', '0->1->3->7->-22', '0->1->3->7->-23']"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,7,null,null,null,null,8]",
        "output": "['1->2->4->7', '1->3->5', '1->3->6->8']"
      },
      {
        "input": "root = [3,9,20,15,7,6,8,1,2,null,null,null,null,null,4]",
        "output": "['3->9->15->1', '3->9->15->2', '3->9->7', '3->20->6', '3->20->8->4']"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "['1->2->3->4->5->6->7->8->9']"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "['0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0', '0->0->0->0->0']"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,12,null,null,18]",
        "output": "['3->9', '3->20->15->12', '3->20->7->18']"
      },
      {
        "input": "root = [100,-50,50,-25,25,-75,75,null,null,-100,100,-125,125]",
        "output": "['100->-50->-25', '100->-50->25->-100', '100->-50->25->100', '100->50->-75->-125', '100->50->-75->125', '100->50->75']"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,null,null,null,null,16,20]",
        "output": "['10->5->3', '10->5->7', '10->15->18->16', '10->15->18->20']"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "['1->2->3->4->5->6->7->8->9->10->11->12->13->14->15']"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1]",
        "output": "['5->4->11->7', '5->4->11->2', '5->8->13', '5->8->4->1']"
      },
      {
        "input": "root = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]",
        "output": "['-1->-2->-4->-8', '-1->-2->-4->-9', '-1->-2->-5->-10', '-1->-3->-6', '-1->-3->-7']"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "['1->2->3->4->5->6->7->8->9']"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "['1->2->3->4->5->6->7->8->9->10']"
      },
      {
        "input": "root = [5,-4,8,-11,null,17,4,7,2,null,null,null,1]",
        "output": "['5->-4->-11->7', '5->-4->-11->2', '5->8->17', '5->8->4->1']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,16]",
        "output": "['1->2->4->8', '1->2->4->9', '1->2->5->10', '1->2->5->11', '1->3->6->12', '1->3->6->13', '1->3->7->14', '1->3->7->15']"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8]",
        "output": "['1->2->3->4->5->6->7->8']"
      },
      {
        "input": "root = [10,5,-3,3,2,null,11,3,-2,null,1]",
        "output": "['10->5->3->3', '10->5->3->-2', '10->5->2->1', '10->-3->11']"
      },
      {
        "input": "root = [100,-100,50,-50,25,0,75,null,-75,-25,null,20,null,null,null,60]",
        "output": "['100->-100->-50->-75->60', '100->-100->25->-25', '100->50->0->20', '100->50->75']"
      },
      {
        "input": "root = [3,9,20,8,null,15,7,4,6,null,null,13,18]",
        "output": "['3->9->8->4', '3->9->8->6', '3->20->15', '3->20->7->13', '3->20->7->18']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,null,15]",
        "output": "['1->2->4->8', '1->2->4->9', '1->2->5->10', '1->2->5->11', '1->3->6->12', '1->3->6->13', '1->3->7->15']"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8]",
        "output": "['1->2->3->4->5->6->7->8']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "['1->2->4->8->16', '1->2->4->8->17', '1->2->4->9->18', '1->2->4->9->19', '1->2->5->10->20', '1->2->5->10->21', '1->2->5->11->22', '1->2->5->11->23', '1->3->6->12->24', '1->3->6->12->25', '1->3->6->13->26', '1->3->6->13->27', '1->3->7->14->28', '1->3->7->14->29', '1->3->7->15->30']"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,null,null,8,null,null,null,9]",
        "output": "['1->2->4->7->9', '1->2->5->8', '1->3->6']"
      },
      {
        "input": "root = [2,-3,3,-4,-5,-6,-7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "['2->-3->-4->8->16', '2->-3->-4->8->17', '2->-3->-4->9->18', '2->-3->-4->9->19', '2->-3->-5->10->20', '2->-3->-5->11', '2->3->-6->12', '2->3->-6->13', '2->3->-7->14', '2->3->-7->15']"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,8,null,9,null,null,10,11,null,null,12,null]",
        "output": "['1->2->4->7->10', '1->2->4->7->11', '1->2->4->8', '1->2->5->9->12', '1->3->6']"
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4]",
        "output": "['3->5->6', '3->5->2->7', '3->5->2->4', '3->1->0', '3->1->8']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,-1]",
        "output": "['1->2->4->8', '1->2->4->9', '1->2->5->10', '1->2->5->11', '1->3->6->12', '1->3->6->13', '1->3->7->14', '1->3->7->15->-1']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,null,null,15,16,17,18,19,20]",
        "output": "['1->2->4->8->15', '1->2->4->9->16', '1->2->4->9->17', '1->2->5->10->18', '1->2->5->10->19', '1->2->5->11->20', '1->3->6->12', '1->3->6->13', '1->3->7->14']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "['1->2->4->8->16', '1->2->4->8->17', '1->2->4->9->18', '1->2->4->9->19', '1->2->5->10->20', '1->2->5->11', '1->3->6->12', '1->3->6->13', '1->3->7->14', '1->3->7->15']"
      },
      {
        "input": "root = [1,2,2,3,null,3,null,4,null,4]",
        "output": "['1->2->3->4', '1->2->3->4']"
      },
      {
        "input": "root = [1,2,3,null,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "['1->2->4->7->13', '1->2->4->7->14', '1->2->4->8->15', '1->3->5->9', '1->3->5->10', '1->3->6->11', '1->3->6->12']"
      },
      {
        "input": "root = [1,2,3,4,null,6,7,8,9,null,11,12,null,14,15,null,null,16,17]",
        "output": "['1->2->4->8->14', '1->2->4->8->15', '1->2->4->9', '1->3->6->11->16', '1->3->6->11->17', '1->3->7->12']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "['1->2->4->8', '1->2->4->9', '1->2->5->10', '1->2->5->11', '1->3->6->12', '1->3->6->13', '1->3->7->14', '1->3->7->15']"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,null]",
        "output": "['1->2->4->8', '1->2->4->9', '1->2->5->10', '1->2->5->11', '1->3->6->12', '1->3->6->13', '1->3->7->14']"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,8,null,9,null,10]",
        "output": "['1->2->4->6->9', '1->2->4->7->10', '1->2->5->8', '1->3']"
      },
      {
        "input": "root = [1,null,null]",
        "output": "['1']"
      },
      {
        "input": "root = [1,2,2,3,4,4,3]",
        "output": "['1->2->3', '1->2->4', '1->2->4', '1->2->3']"
      },
      {
        "input": "root = [0,-3,9,-10,null,5,-1,-6,null,-8,null,null,null,-11,null,-12,null,13,-13,-14]",
        "output": "['0->-3->-10->-6->-11->13', '0->-3->-10->-6->-11->-13', '0->9->5->-8->-12->-14', '0->9->-1']"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20]",
        "output": "['1->2->3->4->5->6->7->8->9->10->11->12->13->14->15->16->17->18->19->20']"
      },
      {
        "input": "root = [2,-3,-3,-4,null,-5,-4,null,-6,null,-7]",
        "output": "['2->-3->-4->-6', '2->-3->-5->-7', '2->-3->-4']"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,13,14,18,19]",
        "output": "['3->9', '3->20->15->13', '3->20->15->14', '3->20->7->18', '3->20->7->19']"
      },
      {
        "input": "root = [3,9,20,8,10,15,7,null,null,null,null,14,16,12,17]",
        "output": "['3->9->8', '3->9->10', '3->20->15->14', '3->20->15->16', '3->20->7->12', '3->20->7->17']"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,null,8,9,null,null,10,11]",
        "output": "['1->2->4->7->10', '1->2->4->7->11', '1->2->5->8', '1->2->5->9', '1->3->6']"
      },
      {
        "input": "root = [0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]",
        "output": "['0->-1->-3->-7->-15', '0->-1->-3->-8', '0->-1->-4->-9', '0->-1->-4->-10', '0->-2->-5->-11', '0->-2->-5->-12', '0->-2->-6->-13', '0->-2->-6->-14']"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6]",
        "output": "['10->5->3->1', '10->5->7->6', '10->15->18']"
      },
      {
        "input": "root = [3,9,20,8,null,15,7,6,10,null,null,13,17,16]",
        "output": "['3->9->8->6->16', '3->9->8->10', '3->20->15', '3->20->7->13', '3->20->7->17']"
      },
      {
        "input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1]",
        "output": "['5->4->11->7', '5->4->11->2', '5->8->13', '5->8->4->5', '5->8->4->1']"
      }
    ]
  },
  {
    "id": 1974,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "String"
    ],
    "problemDescription": "There is a special typewriter with lowercase English letters 'a' to 'z' arranged in a circle with a pointer. A character can only be typed if the pointer is pointing to that character. The pointer is initially pointing to the character 'a'.\n\nEach second, you may perform one of the following operations:\n\nMove the pointer one character counterclockwise or clockwise.\nType the character the pointer is currently on.\n\nGiven a string word, return the minimum number of seconds to type out the characters in word.\n\u00a0\nExample 1:\n\nInput: word = \"abc\"\nOutput: 5\nExplanation: \nThe characters are printed as follows:\n- Type the character 'a' in 1 second since the pointer is initially on 'a'.\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer clockwise to 'c' in 1 second.\n- Type the character 'c' in 1 second.\n\nExample 2:\n\nInput: word = \"bza\"\nOutput: 7\nExplanation:\nThe characters are printed as follows:\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer counterclockwise to 'z' in 2 seconds.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'a' in 1 second.\n- Type the character 'a' in 1 second.\n\nExample 3:\n\nInput: word = \"zjpc\"\nOutput: 34\nExplanation:\nThe characters are printed as follows:\n- Move the pointer counterclockwise to 'z' in 1 second.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'j' in 10 seconds.\n- Type the character 'j' in 1 second.\n- Move the pointer clockwise to 'p' in 6 seconds.\n- Type the character 'p' in 1 second.\n- Move the pointer counterclockwise to 'c' in 13 seconds.\n- Type the character 'c' in 1 second.\n\n\u00a0\nConstraints:\n\n1 <= word.length <= 100\nword consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def minTimeToType(self, word: str) -> int:\n        ",
    "testCases": [
      {
        "input": "word = \"aaabbbccc\"",
        "output": "11"
      },
      {
        "input": "word = \"zyxwvut\"",
        "output": "14"
      },
      {
        "input": "word = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "29"
      },
      {
        "input": "word = \"mnbvcxzlkjhgfdsapoiuytrewq\"",
        "output": "178"
      },
      {
        "input": "word = \"qpwoeirutyalskdjfhgzmxncbv\"",
        "output": "191"
      },
      {
        "input": "word = \"zjpc\"",
        "output": "34"
      },
      {
        "input": "word = \"abcdz\"",
        "output": "12"
      },
      {
        "input": "word = \"pqrstuvwxyzabcdefghijklmno\"",
        "output": "62"
      },
      {
        "input": "word = \"aaa\"",
        "output": "3"
      },
      {
        "input": "word = \"mnopqrstuvwxyzabcdefghijkl\"",
        "output": "63"
      },
      {
        "input": "word = \"z\"",
        "output": "2"
      },
      {
        "input": "word = \"aaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "26"
      },
      {
        "input": "word = \"qpwoeirutyalskdjfhgzmxncbva\"",
        "output": "197"
      },
      {
        "input": "word = \"za\"",
        "output": "4"
      },
      {
        "input": "word = \"zzz\"",
        "output": "4"
      },
      {
        "input": "word = \"qpwoeirutyalskdjfhgzmxcvbn\"",
        "output": "193"
      },
      {
        "input": "word = \"mnonmonmomnonmon\"",
        "output": "47"
      },
      {
        "input": "word = \"a\"",
        "output": "1"
      },
      {
        "input": "word = \"bza\"",
        "output": "7"
      },
      {
        "input": "word = \"abc\"",
        "output": "5"
      },
      {
        "input": "word = \"az\"",
        "output": "3"
      },
      {
        "input": "word = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "52"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "51"
      },
      {
        "input": "word = \"abacabadabacaba\"",
        "output": "37"
      },
      {
        "input": "word = \"mnbvcxzlkjhgfdsapoiuytrewqmnbvcxzlkjhgfdsapoiuytrewq\"",
        "output": "348"
      },
      {
        "input": "word = \"adgjmpsvxzbehiklnortuwfyqc\"",
        "output": "110"
      },
      {
        "input": "word = \"bbaaccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "79"
      },
      {
        "input": "word = \"aazzbbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "81"
      },
      {
        "input": "word = \"mamamamamamamamamamamamamam\"",
        "output": "351"
      },
      {
        "input": "word = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "47"
      },
      {
        "input": "word = \"abcdezyxwvut\"",
        "output": "27"
      },
      {
        "input": "word = \"zaqwsxcderfvgytujnhytgfrdxcvbnmzaqwsxcderfv\"",
        "output": "328"
      },
      {
        "input": "word = \"mnopqrstuvmnopqrstuvmnopqrstuv\"",
        "output": "87"
      },
      {
        "input": "word = \"qwertyuioplkjhgfdsazxcvbnmnbvcxzlkjhgfdsapoiuytrewq\"",
        "output": "323"
      },
      {
        "input": "word = \"mamamamamamamamamamamamamamamamamamamamamamamamamamama\"",
        "output": "702"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyzzzzzzzzzzzzzzzzzzzz\"",
        "output": "70"
      },
      {
        "input": "word = \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm\"",
        "output": "346"
      },
      {
        "input": "word = \"lkjhgfdsapoiuytrewqzxcvbnm\"",
        "output": "174"
      },
      {
        "input": "word = \"mjmlkdjfhakjdhfkahdfkldshfklsjdhfkjd\"",
        "output": "217"
      },
      {
        "input": "word = \"aaaabbbbccccddddeeeeffffgggghhhhiiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz\"",
        "output": "130"
      },
      {
        "input": "word = \"aaaabbbbccccddddeeeeffffgggghhhhiiii\"",
        "output": "44"
      },
      {
        "input": "word = \"lkjhgfdsapoiuytrewqmasdfghjkl\"",
        "output": "178"
      },
      {
        "input": "word = \"qponmlkjihgfedcba\"",
        "output": "43"
      },
      {
        "input": "word = \"jklmnopqrstuvwxyzaaaazzzzz\"",
        "output": "53"
      },
      {
        "input": "word = \"wvutsrqponmlkjihgfedcba\"",
        "output": "49"
      },
      {
        "input": "word = \"wertyuioplkjhgfdsamnbvcxzabcd\"",
        "output": "164"
      },
      {
        "input": "word = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "33"
      },
      {
        "input": "word = \"abcdpqrsuvxyzefghijkmnotwxyz\"",
        "output": "79"
      },
      {
        "input": "word = \"qwertypasdfghjklzxcvbnmqwertypasdfghjklzxcvbnm\"",
        "output": "312"
      },
      {
        "input": "word = \"bdfhjlnprtvxz\"",
        "output": "38"
      },
      {
        "input": "word = \"qzcvmlkjhgfdsapoiuytrwer\"",
        "output": "157"
      },
      {
        "input": "word = \"mnopqrstuvwxynmlkjihgfedcbazyxw\"",
        "output": "83"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyza\"",
        "output": "53"
      },
      {
        "input": "word = \"zyzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "30"
      },
      {
        "input": "word = \"qwerasdfzxcv\"",
        "output": "99"
      },
      {
        "input": "word = \"abcdefghijklnmopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "104"
      },
      {
        "input": "word = \"abcdpqrsuvxyzefghijkmnotw\"",
        "output": "73"
      },
      {
        "input": "word = \"dcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "62"
      },
      {
        "input": "word = \"fedcbaZYXWVUTSRQPONMLKJIHGFEDCBA\"",
        "output": "74"
      },
      {
        "input": "word = \"acdfghjklmnpqrstvwxyz\"",
        "output": "46"
      },
      {
        "input": "word = \"mnopqrstuzyxwvutsrqponmlkjihgfedcba\"",
        "output": "85"
      },
      {
        "input": "word = \"zxcvbnmlkjhgfdsapoiuytrewqzxcvbnmlkjhgfdsapoiuytrewq\"",
        "output": "320"
      },
      {
        "input": "word = \"lkjhgfdsapoiuytrewqzxcvbnmzxcvbnmlkjhgfdsapoiuytrewq\"",
        "output": "342"
      },
      {
        "input": "word = \"fedcbazyxwvutsrqponmlkjihg\"",
        "output": "56"
      },
      {
        "input": "word = \"aaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbb\"",
        "output": "40"
      },
      {
        "input": "word = \"mnopqrlkjihgfedcbazyxwvut\"",
        "output": "66"
      },
      {
        "input": "word = \"qpwoeirutyalskdjfhgzxcvbnm\"",
        "output": "172"
      },
      {
        "input": "word = \"mlkjihgfedcba\"",
        "output": "37"
      },
      {
        "input": "word = \"yzab\"",
        "output": "9"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "102"
      },
      {
        "input": "word = \"qzmlkihgfedcba\"",
        "output": "58"
      },
      {
        "input": "word = \"bcadefghijklmnopqrstuvwxyz\"",
        "output": "55"
      },
      {
        "input": "word = \"aaaaaaaaaaaabbbbbbbbccccccccdddddd\"",
        "output": "37"
      },
      {
        "input": "word = \"llllllllllllllllllllllllllllllllllllllllllllllllllllllll\"",
        "output": "67"
      },
      {
        "input": "word = \"nlbnlkbnlkbnlkbnlkbnlkbnlkbnlkbnlkbnlkbnlkbnlkbnlkbnlkb\"",
        "output": "392"
      },
      {
        "input": "word = \"lkjhgfdsazxcvbnmmnbvcxzlkjhgfdsa\"",
        "output": "176"
      },
      {
        "input": "word = \"mnopqrsvxyz\"",
        "output": "36"
      },
      {
        "input": "word = \"poiuytrewqlkjhgfdsamnbvcxzpoiuytrewqlkjhgfdsamnbvcxz\"",
        "output": "341"
      },
      {
        "input": "word = \"qwertypoiuytrewertyuiop\"",
        "output": "178"
      },
      {
        "input": "word = \"aaaaabbbbbcccccdddddeeeee\"",
        "output": "29"
      },
      {
        "input": "word = \"uqwertyuioplkjhgfdsamnbvcxz\"",
        "output": "170"
      },
      {
        "input": "word = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "104"
      },
      {
        "input": "word = \"qrstuvzxcvbnmlkjhgfedcba\"",
        "output": "88"
      },
      {
        "input": "word = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "35"
      },
      {
        "input": "word = \"qwerasdfzxcvqwerasdfzxcvqwerasdfzxcv\"",
        "output": "287"
      },
      {
        "input": "word = \"lkmlkmlkmlkmlkmlkmlkmlkmlkmlkmlkmlkmlkmlkmlkmlkmlkmlkm\"",
        "output": "136"
      },
      {
        "input": "word = \"zazazazazazazazazazazazazazazaz\"",
        "output": "62"
      },
      {
        "input": "word = \"aazzzzyyyyxxxwwvvuuttrrssqqppoonnmmlkkjjiihhggffeeddaa\"",
        "output": "82"
      },
      {
        "input": "word = \"jqpnfjwmsvkmrekjijgqpxvukz\"",
        "output": "175"
      },
      {
        "input": "word = \"lkjhgfdsapoiuytrewqasdfghjklmnbvcxz\"",
        "output": "212"
      },
      {
        "input": "word = \"ejpmytlrzwhgodicuvnkxfsab\"",
        "output": "190"
      },
      {
        "input": "word = \"qwertyuioplkjhgfdsazxcvbnmqwertyuioplkjhgfdsazxcvbnm\"",
        "output": "310"
      },
      {
        "input": "word = \"qrstuvwxyzaeiou\"",
        "output": "55"
      },
      {
        "input": "word = \"aeiouyaeiouyaeiouyaeiouy\"",
        "output": "126"
      },
      {
        "input": "word = \"zyxwvutsrqponmlkjihgfedcbaa\"",
        "output": "53"
      },
      {
        "input": "word = \"poiuytrewqasdfghjklzxcvbnmpoiuytrewqasdfghjklzxcvbnmpoiuytrewq\"",
        "output": "414"
      },
      {
        "input": "word = \"abcdefghjklmnopqrstuvwxyzzyxwvutsrqponmlkjihgfedcba\"",
        "output": "101"
      },
      {
        "input": "word = \"qazwsxedcrfvtgbyhnujmikolpqwazxsedcrfvtgbyhnujmikolpqwaz\"",
        "output": "361"
      },
      {
        "input": "word = \"mzaixmsdcvnbmqwerty\"",
        "output": "169"
      },
      {
        "input": "word = \"zabcdefghijklmnopqrstuvwxyz\"",
        "output": "54"
      },
      {
        "input": "word = \"poiuytrewqlkjhgfdsamnbvcxz\"",
        "output": "171"
      },
      {
        "input": "word = \"zyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyx\"",
        "output": "111"
      },
      {
        "input": "word = \"aaaaaaaaaaaaaaaaaaaaaaaaaaab\"",
        "output": "29"
      },
      {
        "input": "word = \"pppppppppppppppppppppppppppp\"",
        "output": "39"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"",
        "output": "103"
      },
      {
        "input": "word = \"abcdefghijkmnopqrstuvwxyz\"",
        "output": "50"
      },
      {
        "input": "word = \"azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "58"
      },
      {
        "input": "word = \"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\"",
        "output": "97"
      },
      {
        "input": "word = \"zaazaaazzaa\"",
        "output": "17"
      },
      {
        "input": "word = \"zzzaaazzzaaazzzaaazzzaaazzzaaazzz\"",
        "output": "44"
      },
      {
        "input": "word = \"zyxcbaqwertyuiopasdfghjklmnbvcxz\"",
        "output": "181"
      },
      {
        "input": "word = \"asdfghjklqwertyuiopzxcvbnm\"",
        "output": "158"
      },
      {
        "input": "word = \"pqrstuvwxyzyxwvutsrqponmlkjihgfedcba\"",
        "output": "82"
      },
      {
        "input": "word = \"zabcdefghijklmnopqrstuvwxyza\"",
        "output": "56"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxyzza\"",
        "output": "54"
      },
      {
        "input": "word = \"tgbnhyujmkiolpvcxz\"",
        "output": "125"
      },
      {
        "input": "word = \"qwertyuiopasdfghjklzxcvbnm\"",
        "output": "176"
      },
      {
        "input": "word = \"qazwsxedcrfvtgbyhnujmikolp\"",
        "output": "177"
      },
      {
        "input": "word = \"zyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyxzyx\"",
        "output": "118"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "77"
      },
      {
        "input": "word = \"mnbvcxzlkjhgfdsapoiuytrewqasdfghjklpoiuytrewq\"",
        "output": "295"
      },
      {
        "input": "word = \"lkjlkjlkjlkjlkjlkjlkjlkjlkjlkjlkjlkjlkjlkjlkjlkjlkjlkj\"",
        "output": "135"
      },
      {
        "input": "word = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"",
        "output": "103"
      },
      {
        "input": "word = \"bcbcbcbcbcbcbcbcbcbcbcbcbcbcbcbc\"",
        "output": "64"
      },
      {
        "input": "word = \"mnopqrstuvwx\"",
        "output": "35"
      },
      {
        "input": "word = \"zyxwvutsrqponmlkjihgfedcbaqwertyuiop\"",
        "output": "129"
      },
      {
        "input": "word = \"abacabadabacabadabacaba\"",
        "output": "59"
      },
      {
        "input": "word = \"fedcbazyxwvutsrqponmlkjihgfedcba\"",
        "output": "68"
      },
      {
        "input": "word = \"zaqwsxcderfvgytuhjnmkiolp\"",
        "output": "156"
      }
    ]
  },
  {
    "id": 2824,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "Given a 0-indexed integer array nums of length n and an integer target, return the number of pairs (i, j) where 0 <= i < j < n and nums[i] + nums[j] < target.\n\u00a0\nExample 1:\n\nInput: nums = [-1,1,2,3,1], target = 2\nOutput: 3\nExplanation: There are 3 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target\n- (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target \n- (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target\nNote that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target.\n\nExample 2:\n\nInput: nums = [-6,2,5,-2,-7,-1,3], target = -2\nOutput: 10\nExplanation: There are 10 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 < 1 and nums[0] + nums[1] = -4 < target\n- (0, 3) since 0 < 3 and nums[0] + nums[3] = -8 < target\n- (0, 4) since 0 < 4 and nums[0] + nums[4] = -13 < target\n- (0, 5) since 0 < 5 and nums[0] + nums[5] = -7 < target\n- (0, 6) since 0 < 6 and nums[0] + nums[6] = -3 < target\n- (1, 4) since 1 < 4 and nums[1] + nums[4] = -5 < target\n- (3, 4) since 3 < 4 and nums[3] + nums[4] = -9 < target\n- (3, 5) since 3 < 5 and nums[3] + nums[5] = -3 < target\n- (4, 5) since 4 < 5 and nums[4] + nums[5] = -8 < target\n- (4, 6) since 4 < 6 and nums[4] + nums[6] = -4 < target\n\n\u00a0\nConstraints:\n\n1 <= nums.length == n <= 50\n-50 <= nums[i], target <= 50\n\n",
    "starterCode": "class Solution:\n    def countPairs(self, nums: List[int], target: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,5,5,5,5], target = 15",
        "output": "10"
      },
      {
        "input": "nums = [-10,-20,-30,-40,-50], target = -80",
        "output": "1"
      },
      {
        "input": "nums = [1,3,5,7,9], target = 10",
        "output": "4"
      },
      {
        "input": "nums = [1,1,1,1,1], target = 3",
        "output": "10"
      },
      {
        "input": "nums = [0,0,0,0,0], target = 0",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5], target = 10",
        "output": "10"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5], target = -3",
        "output": "9"
      },
      {
        "input": "nums = [-5,-4,-3,-2,-1], target = -5",
        "output": "6"
      },
      {
        "input": "nums = [-6,2,5,-2,-7,-1,3], target = -2",
        "output": "10"
      },
      {
        "input": "nums = [0,0,0,0,0], target = 1",
        "output": "10"
      },
      {
        "input": "nums = [0,0,0,0], target = 1",
        "output": "6"
      },
      {
        "input": "nums = [10,20,30,40,50], target = 100",
        "output": "10"
      },
      {
        "input": "nums = [-1,1,2,3,1], target = 2",
        "output": "3"
      },
      {
        "input": "nums = [-5,-4,-3,-2,-1], target = -8",
        "output": "1"
      },
      {
        "input": "nums = [50,-50,25,-25], target = 0",
        "output": "2"
      },
      {
        "input": "nums = [-5, -10, 3, 8, 0, -2], target = 1",
        "output": "9"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], target = -15",
        "output": "6"
      },
      {
        "input": "nums = [25, -25, 0, 15, -15, 10, -10, 5, -5, 20, -20], target = 0",
        "output": "25"
      },
      {
        "input": "nums = [25, 15, 5, -5, -15, -25, 35, 45, 55, -45], target = 0",
        "output": "13"
      },
      {
        "input": "nums = [-15, -25, -35, -45, -55], target = -70",
        "output": "4"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1], target = -2",
        "output": "10"
      },
      {
        "input": "nums = [-1, -1, -2, -3, -4, -5, -6, -7, -8, -9], target = -3",
        "output": "42"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, -10, -20, -30, -40, -50], target = 25",
        "output": "32"
      },
      {
        "input": "nums = [-3, -2, -1, 0, 1, 2, 3], target = 1",
        "output": "12"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10], target = 0",
        "output": "90"
      },
      {
        "input": "nums = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45], target = 5",
        "output": "90"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0], target = 0",
        "output": "0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47], target = 50",
        "output": "64"
      },
      {
        "input": "nums = [-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30], target = -10",
        "output": "25"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], target = 1",
        "output": "1128"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 30",
        "output": "160"
      },
      {
        "input": "nums = [-49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11], target = -50",
        "output": "134"
      },
      {
        "input": "nums = [45, 46, 47, 48, 49, 50, -45, -46, -47, -48, -49, -50], target = 0",
        "output": "30"
      },
      {
        "input": "nums = [5, 2, 7, 1, 8, 4, 3, 6], target = 10",
        "output": "16"
      },
      {
        "input": "nums = [5, -5, 15, -15, 25, -25, 35], target = 0",
        "output": "6"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 50, 45, 35, 25, 15, 5, 0, -5, -15, -25, -35, -45, -50, -45, -35, -25, -15, -5, 0, 5, 15, 25, 35, 45, 50, 45, 35, 25, 15, 5, 0, -5, -15, -25, -35, -45, -50, -45, -35, -25, -15, -5], target = 10",
        "output": "604"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], target = 1",
        "output": "45"
      },
      {
        "input": "nums = [50, -50, 40, -40, 30, -30, 20, -20, 10, -10], target = 1",
        "output": "25"
      },
      {
        "input": "nums = [-1, 0, 1, 2, -2, -3, 3], target = 1",
        "output": "12"
      },
      {
        "input": "nums = [5, -5, 15, -15, 25, -25], target = 0",
        "output": "6"
      },
      {
        "input": "nums = [-10, 0, 10, -20, 20, -30, 30, -40, 40, -50, 50], target = 10",
        "output": "30"
      },
      {
        "input": "nums = [-45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45], target = -5",
        "output": "72"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 50, -1, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29, -31, -33, -35, -37, -39, -41, -43, -45, -47, -49, -50], target = 10",
        "output": "775"
      },
      {
        "input": "nums = [0, 1, -1, 2, -2, 3, -3], target = 0",
        "output": "9"
      },
      {
        "input": "nums = [-4, -3, -2, -1, 0, 1, 2, 3, 4], target = 1",
        "output": "20"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17], target = 15",
        "output": "8"
      },
      {
        "input": "nums = [30, 20, 10, 0, -10, -20, -30], target = 10",
        "output": "12"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], target = 50",
        "output": "625"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], target = 8",
        "output": "25"
      },
      {
        "input": "nums = [-2, -3, -4, -5, -6, 1, 2, 3, 4, 5], target = -5",
        "output": "9"
      },
      {
        "input": "nums = [48, 49, 50, -48, -49, -50], target = 0",
        "output": "6"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 15",
        "output": "12"
      },
      {
        "input": "nums = [-40, -30, -20, -10, 0, 10, 20, 30, 40, 50], target = 10",
        "output": "20"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1], target = -5",
        "output": "41"
      },
      {
        "input": "nums = [25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25], target = 10",
        "output": "35"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], target = 50",
        "output": "576"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 180",
        "output": "43"
      },
      {
        "input": "nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10], target = 1",
        "output": "20"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55, 65, 75, 85, 95, 105], target = 200",
        "output": "44"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0], target = 1",
        "output": "21"
      },
      {
        "input": "nums = [25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, 30, 35, 40, 45, 50, -30, -35, -40, -45, -50], target = 15",
        "output": "129"
      },
      {
        "input": "nums = [-1, 0, 1, 0, -1, 1, 0], target = 1",
        "output": "14"
      },
      {
        "input": "nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10], target = 0",
        "output": "20"
      },
      {
        "input": "nums = [49, 48, 47, 46, 45, 44, 43, 42, 41, 40], target = 90",
        "output": "25"
      },
      {
        "input": "nums = [100, -50, 25, -25, 0, 50, -100], target = 0",
        "output": "9"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target = 25",
        "output": "29"
      },
      {
        "input": "nums = [-40, -30, -20, -10, 0, 10, 20, 30, 40], target = -15",
        "output": "12"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], target = 0",
        "output": "25"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], target = 30",
        "output": "27"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1], target = -15",
        "output": "6"
      },
      {
        "input": "nums = [-1, 0, 1, -2, 2, -3, 3, -4, 4, -5, 5], target = 2",
        "output": "35"
      },
      {
        "input": "nums = [30, 20, 10, 0, -10, -20, -30, -40, -50, -60], target = -5",
        "output": "33"
      },
      {
        "input": "nums = [49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30], target = 90",
        "output": "170"
      },
      {
        "input": "nums = [30, 20, 10, 0, -10, -20, -30, -40, -50], target = -25",
        "output": "16"
      },
      {
        "input": "nums = [23, 24, 25, 26, 27, 28, 29, 30], target = 50",
        "output": "4"
      },
      {
        "input": "nums = [-50, 0, 50, -40, 40], target = 10",
        "output": "6"
      },
      {
        "input": "nums = [15, 25, 35, 45, 55], target = 100",
        "output": "9"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3], target = 0",
        "output": "6"
      },
      {
        "input": "nums = [-25, -25, -25, -25, -25], target = -50",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 11",
        "output": "20"
      },
      {
        "input": "nums = [-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0], target = -10",
        "output": "1245"
      },
      {
        "input": "nums = [-40, -30, -20, -10, 0, 10, 20, 30], target = -5",
        "output": "16"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0], target = 1",
        "output": "10"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30, 40, -40, 50, -50, 0], target = -5",
        "output": "25"
      },
      {
        "input": "nums = [10, -10, 20, -20, 30, -30], target = 0",
        "output": "6"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 150",
        "output": "36"
      },
      {
        "input": "nums = [-5, 0, 5, 10, 15, 20, 25, 30, 35, 40], target = 20",
        "output": "9"
      },
      {
        "input": "nums = [-49, -48, -47, -46, -45, -44, -43, -42, -41, -40], target = -80",
        "output": "45"
      },
      {
        "input": "nums = [45, -45, 44, -44, 43, -43, 42], target = 0",
        "output": "9"
      },
      {
        "input": "nums = [-10, 0, 10, 20, 30, 40, 50], target = 0",
        "output": "1"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5], target = 0",
        "output": "20"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 20",
        "output": "75"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1], target = 6",
        "output": "4"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1], target = 7",
        "output": "6"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, -1, -1, -1, -1, -1], target = 0",
        "output": "10"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4, 5], target = 4",
        "output": "9"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 20",
        "output": "20"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4, 5], target = 3",
        "output": "6"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 10",
        "output": "0"
      },
      {
        "input": "nums = [49, -49, 48, -48, 47, -47, 46, -46, 45, -45], target = 0",
        "output": "20"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70], target = -100",
        "output": "4"
      },
      {
        "input": "nums = [-5, -5, -5, -5, -5, 5, 5, 5, 5, 5], target = 0",
        "output": "10"
      },
      {
        "input": "nums = [-10, -20, -30, 10, 20, 30, 0], target = -15",
        "output": "6"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 21",
        "output": "90"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 190",
        "output": "44"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 15",
        "output": "36"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], target = -11",
        "output": "20"
      },
      {
        "input": "nums = [5, 8, -3, 6, 2, 7, 4, 1, -5, -10], target = 5",
        "output": "24"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46], target = 99",
        "output": "9"
      },
      {
        "input": "nums = [23, 17, 42, 8, 3, 19, 5, 28], target = 30",
        "output": "11"
      },
      {
        "input": "nums = [-1, 0, 1, -2, 2, -3, 3], target = 1",
        "output": "12"
      },
      {
        "input": "nums = [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15], target = 45",
        "output": "46"
      }
    ]
  },
  {
    "id": 506,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\n\nThe 1st place athlete's rank is \"Gold Medal\".\nThe 2nd place athlete's rank is \"Silver Medal\".\nThe 3rd place athlete's rank is \"Bronze Medal\".\nFor the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\").\n\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.\n\u00a0\nExample 1:\n\nInput: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1st, 2nd, 3rd, 4th, 5th].\nExample 2:\n\nInput: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1st, 5th, 3rd, 2nd, 4th].\n\n\n\u00a0\nConstraints:\n\nn == score.length\n1 <= n <= 104\n0 <= score[i] <= 106\nAll the values in score are unique.\n\n",
    "starterCode": "class Solution:\n    def findRelativeRanks(self, score: List[int]) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "score = [100,90,80,70,60,50,40,30,20,10]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10']"
      },
      {
        "input": "score = [5,4,3,2,1]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5']"
      },
      {
        "input": "score = [0,1000000]",
        "output": "['Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [100,90,95,80,75]",
        "output": "['Gold Medal', 'Bronze Medal', 'Silver Medal', '4', '5']"
      },
      {
        "input": "score = [10,3,8,9,4]",
        "output": "['Gold Medal', '5', 'Bronze Medal', 'Silver Medal', '4']"
      },
      {
        "input": "score = [100]",
        "output": "['Gold Medal']"
      },
      {
        "input": "score = [1,2,3,4,5,6,7,8,9,10]",
        "output": "['10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [40,10,30,20]",
        "output": "['Gold Medal', '4', 'Silver Medal', 'Bronze Medal']"
      },
      {
        "input": "score = [42]",
        "output": "['Gold Medal']"
      },
      {
        "input": "score = [20,10,30,50,40]",
        "output": "['4', '5', 'Bronze Medal', 'Gold Medal', 'Silver Medal']"
      },
      {
        "input": "score = [40,10,20,30]",
        "output": "['Gold Medal', '4', 'Bronze Medal', 'Silver Medal']"
      },
      {
        "input": "score = [1000000,0,500000,250000,750000]",
        "output": "['Gold Medal', '5', 'Bronze Medal', '4', 'Silver Medal']"
      },
      {
        "input": "score = [33,27,22,15,6]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5']"
      },
      {
        "input": "score = [1]",
        "output": "['Gold Medal']"
      },
      {
        "input": "score = [1,2,3,4,5]",
        "output": "['5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [5,20,15,10,25]",
        "output": "['5', 'Silver Medal', 'Bronze Medal', '4', 'Gold Medal']"
      },
      {
        "input": "score = [3, 1, 2]",
        "output": "['Gold Medal', 'Bronze Medal', 'Silver Medal']"
      },
      {
        "input": "score = [3, 1, 2, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "['13', '15', '14', '11', '12', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [34, 7, 23, 32, 5, 62]",
        "output": "['Silver Medal', '5', '4', 'Bronze Medal', '6', 'Gold Medal']"
      },
      {
        "input": "score = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']"
      },
      {
        "input": "score = [123, 456, 789, 101112, 131415, 161718, 192021, 222324, 252627, 282930]",
        "output": "['10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [50, 20, 30, 10, 40, 60]",
        "output": "['Silver Medal', '5', '4', '6', 'Bronze Medal', 'Gold Medal']"
      },
      {
        "input": "score = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22']"
      },
      {
        "input": "score = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "['15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [1000000, 999999, 999998, 999997, 999996]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5']"
      },
      {
        "input": "score = [789, 654, 321, 987, 456, 123, 890, 567, 234]",
        "output": "['Bronze Medal', '4', '7', 'Gold Medal', '6', '9', 'Silver Medal', '5', '8']"
      },
      {
        "input": "score = [12345, 12346, 12347, 12348, 12349, 12350, 12351, 12352, 12353, 12354]",
        "output": "['10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105]",
        "output": "['15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [100, 90, 95, 85, 70, 60, 50, 40, 30, 20, 10]",
        "output": "['Gold Medal', 'Bronze Medal', 'Silver Medal', '4', '5', '6', '7', '8', '9', '10', '11']"
      },
      {
        "input": "score = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]",
        "output": "['20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [23, 34, 12, 45, 56, 78, 89, 90, 101, 112, 134, 145, 156, 167, 178]",
        "output": "['14', '13', '15', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [8, 6, 7, 5, 3, 0, 9, 10, 12, 14, 13, 11, 15, 17, 16, 18, 20, 19, 21, 23, 22, 24, 26, 25, 27, 29, 28, 30]",
        "output": "['23', '25', '24', '26', '27', '28', '22', '21', '19', '17', '18', '20', '16', '14', '15', '13', '11', '12', '10', '8', '9', '7', '5', '6', '4', 'Silver Medal', 'Bronze Medal', 'Gold Medal']"
      },
      {
        "input": "score = [33, 11, 44, 22, 55, 66, 77, 88, 99, 100]",
        "output": "['8', '10', '7', '9', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "['100', '99', '98', '97', '96', '95', '94', '93', '92', '91', '90', '89', '88', '87', '86', '85', '84', '83', '82', '81', '80', '79', '78', '77', '76', '75', '74', '73', '72', '71', '70', '69', '68', '67', '66', '65', '64', '63', '62', '61', '60', '59', '58', '57', '56', '55', '54', '53', '52', '51', '50', '49', '48', '47', '46', '45', '44', '43', '42', '41', '40', '39', '38', '37', '36', '35', '34', '33', '32', '31', '30', '29', '28', '27', '26', '25', '24', '23', '22', '21', '20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [3456, 1234, 7890, 4567, 8901, 2345, 5678]",
        "output": "['5', '7', 'Silver Medal', '4', 'Gold Medal', '6', 'Bronze Medal']"
      },
      {
        "input": "score = [54321, 65432, 76543, 87654, 98765, 43210, 32109, 21098, 10987, 9876, 8765, 7654, 6543, 5432, 4321, 3210, 2109, 1098, 987, 876, 765, 654, 543, 432, 321, 210, 109, 98, 87, 76, 65, 54, 43, 32, 21, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "['5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45']"
      },
      {
        "input": "score = [9999, 8888, 7777, 6666, 5555, 4444, 3333, 2222, 1111, 0]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10']"
      },
      {
        "input": "score = [1, 10, 100, 1000, 10000, 100000, 1000000, 999999, 99999, 9999, 999, 99, 9]",
        "output": "['13', '11', '9', '7', '5', 'Bronze Medal', 'Gold Medal', 'Silver Medal', '4', '6', '8', '10', '12']"
      },
      {
        "input": "score = [100000, 1, 10000, 1000, 100, 10, 0]",
        "output": "['Gold Medal', '6', 'Silver Medal', 'Bronze Medal', '4', '5', '7']"
      },
      {
        "input": "score = [5, 20, 15, 10, 25, 30, 35, 40, 45, 50]",
        "output": "['10', '7', '8', '9', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300]",
        "output": "['30', '29', '28', '27', '26', '25', '24', '23', '22', '21', '20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [42, 23, 35, 56, 78, 89, 12, 34, 56, 78, 90, 101, 112, 134, 145]",
        "output": "['11', '14', '12', '9', '7', '6', '15', '13', '10', '8', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10']"
      },
      {
        "input": "score = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145]",
        "output": "['15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [42, 84, 126, 168, 210, 252, 294, 336, 378, 420, 462, 504, 546, 588, 630]",
        "output": "['15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17']"
      },
      {
        "input": "score = [1000000, 0, 500000, 250000, 750000, 125000]",
        "output": "['Gold Medal', '6', 'Bronze Medal', '4', 'Silver Medal', '5']"
      },
      {
        "input": "score = [23, 15, 45, 67, 89, 12, 34]",
        "output": "['5', '6', 'Bronze Medal', 'Silver Medal', 'Gold Medal', '7', '4']"
      },
      {
        "input": "score = [999, 1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999, 11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999, 100000, 100001, 100002, 100003, 100004, 100005, 100006, 100007, 100008, 100009, 100010]",
        "output": "['30', '29', '28', '27', '26', '25', '24', '23', '22', '21', '20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [99, 34, 23, 44, 55, 12, 67, 89, 100]",
        "output": "['Silver Medal', '7', '8', '6', '5', '9', '4', 'Bronze Medal', 'Gold Medal']"
      },
      {
        "input": "score = [300, 290, 280, 270, 260, 250, 240, 230, 220, 210, 200, 190, 180, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']"
      },
      {
        "input": "score = [5, 999, 1000, 9999, 10000, 99999, 100000, 999999, 1000000]",
        "output": "['9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "['20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [1, 1000, 10, 100, 10000]",
        "output": "['5', 'Silver Medal', '4', 'Bronze Medal', 'Gold Medal']"
      },
      {
        "input": "score = [88, 77, 66, 55, 44, 33, 22, 11]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8']"
      },
      {
        "input": "score = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]",
        "output": "['7', '10', '6', '11', 'Bronze Medal', 'Gold Medal', '9', 'Silver Medal', '4', '8', '5']"
      },
      {
        "input": "score = [30, 40, 20, 10, 50, 60, 70, 80, 90, 100]",
        "output": "['8', '7', '9', '10', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [5]",
        "output": "['Gold Medal']"
      },
      {
        "input": "score = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000]",
        "output": "['20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [123, 456, 789, 101, 202, 303, 404, 505, 606, 707, 808, 909]",
        "output": "['11', '7', 'Bronze Medal', '12', '10', '9', '8', '6', '5', '4', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "['15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [85, 67, 92, 78, 99, 56, 88, 77, 100, 95]",
        "output": "['6', '9', '4', '7', 'Silver Medal', '10', '5', '8', 'Gold Medal', 'Bronze Medal']"
      },
      {
        "input": "score = [1, 3, 6, 9, 12, 15, 18, 21, 24, 27]",
        "output": "['10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [23, 45, 12, 67, 34, 89, 90, 11, 2, 3, 5, 7, 9, 13, 15, 17, 19, 21, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]",
        "output": "['42', '30', '48', '19', '36', '7', '6', '49', '54', '53', '52', '51', '50', '47', '46', '45', '44', '43', '41', '40', '39', '38', '37', '35', '34', '33', '32', '31', '29', '28', '27', '26', '25', '24', '23', '22', '21', '20', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [1000000, 0, 500000, 250000, 750000]",
        "output": "['Gold Medal', '5', 'Bronze Medal', '4', 'Silver Medal']"
      },
      {
        "input": "score = [88, 1, 56, 91, 67, 29, 42, 74, 35, 81, 100, 23, 64, 50, 79, 38, 95, 47, 61, 85]",
        "output": "['4', '20', '12', 'Bronze Medal', '9', '18', '15', '8', '17', '6', 'Gold Medal', '19', '10', '13', '7', '16', 'Silver Medal', '14', '11', '5']"
      },
      {
        "input": "score = [100000, 50000, 25000, 12500, 6250, 3125, 1562, 781, 390, 195]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10']"
      },
      {
        "input": "score = [1, 1000000, 500000, 250000, 750000, 100000, 600000, 300000, 800000, 400000, 900000]",
        "output": "['11', 'Gold Medal', '6', '9', '4', '10', '5', '8', 'Bronze Medal', '7', 'Silver Medal']"
      },
      {
        "input": "score = [1, 10000, 1000, 100, 10, 100000, 1000000]",
        "output": "['7', 'Bronze Medal', '4', '5', '6', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10']"
      },
      {
        "input": "score = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "['20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [1, 100, 1000, 10000, 100000]",
        "output": "['5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 999999999, 99999999, 9999999, 999999, 99999, 9999, 999, 99, 9]",
        "output": "['19', '17', '15', '13', '11', '9', '7', '5', 'Bronze Medal', 'Gold Medal', 'Silver Medal', '4', '6', '8', '10', '12', '14', '16', '18']"
      },
      {
        "input": "score = [8, 1, 3, 7, 4, 6, 5, 2]",
        "output": "['Gold Medal', '8', '6', 'Silver Medal', '5', 'Bronze Medal', '4', '7']"
      },
      {
        "input": "score = [78, 56, 34, 12, 90, 67, 45, 23, 89, 10]",
        "output": "['Bronze Medal', '5', '7', '9', 'Gold Medal', '4', '6', '8', 'Silver Medal', '10']"
      },
      {
        "input": "score = [9, 3, 15, 12, 6, 24, 18, 30, 27, 21]",
        "output": "['8', '10', '6', '7', '9', 'Bronze Medal', '5', 'Gold Medal', 'Silver Medal', '4']"
      },
      {
        "input": "score = [7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8']"
      },
      {
        "input": "score = [87, 68, 94, 78, 85, 91, 89, 76, 82, 93]",
        "output": "['5', '10', 'Gold Medal', '8', '6', 'Bronze Medal', '4', '9', '7', 'Silver Medal']"
      },
      {
        "input": "score = [100, 200, 150, 300, 250, 400, 350, 500, 450, 600, 550, 700, 650, 800, 750, 900, 850, 1000, 950, 1100, 1050]",
        "output": "['21', '19', '20', '17', '18', '15', '16', '13', '14', '11', '12', '9', '10', '7', '8', '5', '6', 'Bronze Medal', '4', 'Gold Medal', 'Silver Medal']"
      },
      {
        "input": "score = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210]",
        "output": "['20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10']"
      },
      {
        "input": "score = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "['Gold Medal', 'Silver Medal', 'Bronze Medal', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']"
      },
      {
        "input": "score = [999999, 0, 500000, 250000, 750000, 100000]",
        "output": "['Gold Medal', '6', 'Bronze Medal', '4', 'Silver Medal', '5']"
      },
      {
        "input": "score = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "['10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [987, 654, 321, 123, 456, 789, 111, 222, 333, 444, 555, 666, 777, 888, 999]",
        "output": "['Silver Medal', '7', '12', '14', '9', '4', '15', '13', '11', '10', '8', '6', '5', 'Bronze Medal', 'Gold Medal']"
      },
      {
        "input": "score = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000, 30000, 31000, 32000, 33000, 34000, 35000, 36000, 37000, 38000, 39000, 40000, 41000, 42000, 43000, 44000, 45000, 46000, 47000, 48000, 49000, 50000]",
        "output": "['50', '49', '48', '47', '46', '45', '44', '43', '42', '41', '40', '39', '38', '37', '36', '35', '34', '33', '32', '31', '30', '29', '28', '27', '26', '25', '24', '23', '22', '21', '20', '19', '18', '17', '16', '15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [50, 20, 30, 10, 40]",
        "output": "['Gold Medal', '4', 'Bronze Medal', '5', 'Silver Medal']"
      },
      {
        "input": "score = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "['15', '14', '13', '12', '11', '10', '9', '8', '7', '6', '5', '4', 'Bronze Medal', 'Silver Medal', 'Gold Medal']"
      },
      {
        "input": "score = [42, 24, 66, 100, 35, 90, 28, 72, 55, 88]",
        "output": "['7', '10', '5', 'Gold Medal', '8', 'Silver Medal', '9', '4', '6', 'Bronze Medal']"
      }
    ]
  },
  {
    "id": 1475,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Array",
      "Monotonic Stack"
    ],
    "problemDescription": "You are given an integer array prices where prices[i] is the price of the ith item in a shop.\nThere is a special discount for items in the shop. If you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. Otherwise, you will not receive any discount at all.\nReturn an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.\n\u00a0\nExample 1:\n\nInput: prices = [8,4,6,2,3]\nOutput: [4,2,4,2,3]\nExplanation: \nFor item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.\nFor item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.\nFor item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.\nFor items 3 and 4 you will not receive any discount at all.\n\nExample 2:\n\nInput: prices = [1,2,3,4,5]\nOutput: [1,2,3,4,5]\nExplanation: In this case, for all items, you will not receive any discount at all.\n\nExample 3:\n\nInput: prices = [10,1,1,6]\nOutput: [9,0,1,6]\n\n\u00a0\nConstraints:\n\n1 <= prices.length <= 500\n1 <= prices[i] <= 1000\n\n",
    "starterCode": "class Solution:\n    def finalPrices(self, prices: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "prices = [5,5,5,5,5]",
        "output": "[0, 0, 0, 0, 5]"
      },
      {
        "input": "prices = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "prices = [8,4,6,2,3]",
        "output": "[4, 2, 4, 2, 3]"
      },
      {
        "input": "prices = [5,10,15,20,25,30,35,40,45,50]",
        "output": "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
      },
      {
        "input": "prices = [9,8,7,6,5]",
        "output": "[1, 1, 1, 1, 5]"
      },
      {
        "input": "prices = [1,1,1,1,1,1,1,1,1]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "prices = [1,3,5,7,9,11,13,15,17]",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17]"
      },
      {
        "input": "prices = [60,70,80,90,100]",
        "output": "[60, 70, 80, 90, 100]"
      },
      {
        "input": "prices = [10,10,10,10,10,10]",
        "output": "[0, 0, 0, 0, 0, 10]"
      },
      {
        "input": "prices = [5,1,4,2,3]",
        "output": "[4, 1, 2, 2, 3]"
      },
      {
        "input": "prices = [50,45,40,35,30,25,20,15,10,5]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "prices = [100,50,25,12,6,3,1]",
        "output": "[50, 25, 13, 6, 3, 2, 1]"
      },
      {
        "input": "prices = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "prices = [10,1,1,6]",
        "output": "[9, 0, 1, 6]"
      },
      {
        "input": "prices = [1,2,3,2,1]",
        "output": "[0, 0, 1, 1, 1]"
      },
      {
        "input": "prices = [5,1,3,4,6,2]",
        "output": "[4, 1, 1, 2, 4, 2]"
      },
      {
        "input": "prices = [3,3,3,2,2,1]",
        "output": "[0, 0, 1, 0, 1, 1]"
      },
      {
        "input": "prices = [9,8,7,6,5,4,3,2,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "prices = [100,90,80,70,60]",
        "output": "[10, 10, 10, 10, 60]"
      },
      {
        "input": "prices = [100,200,300,200,100]",
        "output": "[0, 0, 100, 100, 100]"
      },
      {
        "input": "prices = [1,1,1,1,1]",
        "output": "[0, 0, 0, 0, 1]"
      },
      {
        "input": "prices = [1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "prices = [2,3,1]",
        "output": "[1, 2, 1]"
      },
      {
        "input": "prices = [100,50,50,100,50,25,25,100]",
        "output": "[50, 0, 0, 50, 25, 0, 25, 100]"
      },
      {
        "input": "prices = [10, 5, 10, 5, 10, 5, 10, 5, 10, 5, 10, 5, 10, 5, 10]",
        "output": "[5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 5, 10]"
      },
      {
        "input": "prices = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0]",
        "output": "[50, 25, 13, 6, 3, 2, 1, 0, 0, 0]"
      },
      {
        "input": "prices = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "prices = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]"
      },
      {
        "input": "prices = [1, 2, 3, 2, 3, 4, 5, 4, 5, 6]",
        "output": "[1, 0, 1, 2, 3, 0, 1, 4, 5, 6]"
      },
      {
        "input": "prices = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "[0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 2]"
      },
      {
        "input": "prices = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
      },
      {
        "input": "prices = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 10]"
      },
      {
        "input": "prices = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96]",
        "output": "[1, 98, 2, 96, 3, 94, 4, 92, 5, 96]"
      },
      {
        "input": "prices = [10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 10]"
      },
      {
        "input": "prices = [10, 5, 15, 5, 20, 10, 25, 15, 30, 20]",
        "output": "[5, 0, 10, 5, 10, 10, 10, 15, 10, 20]"
      },
      {
        "input": "prices = [7, 6, 5, 4, 3, 2, 1, 2, 3, 4]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 2, 3, 4]"
      },
      {
        "input": "prices = [1,10,1,10,1,10,1,10,1,10]",
        "output": "[0, 9, 0, 9, 0, 9, 0, 9, 1, 10]"
      },
      {
        "input": "prices = [7, 5, 6, 4, 3, 2, 1, 8, 9, 10]",
        "output": "[2, 1, 2, 1, 1, 1, 1, 8, 9, 10]"
      },
      {
        "input": "prices = [2, 3, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1]",
        "output": "[0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1]"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]",
        "output": "[0, 1, 2, 3, 4, 1, 2, 3, 4, 5]"
      },
      {
        "input": "prices = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6, 1, 10, 2, 9, 3, 8, 4, 7, 5, 6]",
        "output": "[0, 8, 1, 6, 2, 4, 3, 2, 4, 5, 1, 8, 2, 6, 3, 4, 4, 2, 5, 6]"
      },
      {
        "input": "prices = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 1000]"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]",
        "output": "[0, 0, 0, 0, 0, 1, 1, 1, 1, 1]"
      },
      {
        "input": "prices = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]",
        "output": "[0, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5]"
      },
      {
        "input": "prices = [5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1]",
        "output": "[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      },
      {
        "input": "prices = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1]",
        "output": "[500, 250, 125, 63, 31, 16, 8, 4, 2, 1]"
      },
      {
        "input": "prices = [10,20,30,40,50,40,30,20,10]",
        "output": "[0, 0, 0, 0, 10, 10, 10, 10, 10]"
      },
      {
        "input": "prices = [10, 20, 10, 20, 10, 20, 10, 20, 10, 20]",
        "output": "[0, 10, 0, 10, 0, 10, 0, 10, 10, 20]"
      },
      {
        "input": "prices = [1, 2, 3, 2, 1, 2, 3, 2, 1]",
        "output": "[0, 0, 1, 1, 0, 0, 1, 1, 1]"
      },
      {
        "input": "prices = [30, 20, 10, 10, 20, 30, 40, 50, 40, 30, 20, 10]",
        "output": "[10, 10, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10]"
      },
      {
        "input": "prices = [5,4,3,2,1,2,3,4,5]",
        "output": "[1, 1, 1, 1, 1, 2, 3, 4, 5]"
      },
      {
        "input": "prices = [8,6,7,6,5,4,3,2,1]",
        "output": "[2, 0, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "prices = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "prices = [300, 200, 100, 50, 25, 12, 6, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[100, 100, 50, 25, 13, 6, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"
      },
      {
        "input": "prices = [8,4,6,2,3,8,4,6,2,3]",
        "output": "[4, 2, 4, 0, 1, 4, 2, 4, 2, 3]"
      },
      {
        "input": "prices = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10]",
        "output": "[0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 1, 10]"
      },
      {
        "input": "prices = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
        "output": "[1, 1, 2, 1, 3, 1, 4, 1, 5, 7]"
      },
      {
        "input": "prices = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]"
      },
      {
        "input": "prices = [15, 10, 5, 10, 15, 5, 10, 15, 20, 10]",
        "output": "[5, 5, 0, 5, 10, 5, 0, 5, 10, 10]"
      },
      {
        "input": "prices = [10, 20, 30, 10, 20, 30, 10, 20, 30]",
        "output": "[0, 10, 20, 0, 10, 20, 10, 20, 30]"
      },
      {
        "input": "prices = [3,6,5,1,8,7,9,2,4,10]",
        "output": "[2, 1, 4, 1, 1, 5, 7, 2, 4, 10]"
      },
      {
        "input": "prices = [2,3,2,3,2,3,2,3,2,3]",
        "output": "[0, 1, 0, 1, 0, 1, 0, 1, 2, 3]"
      },
      {
        "input": "prices = [8,5,7,6,4,5,3,2,1]",
        "output": "[3, 1, 1, 2, 1, 2, 1, 1, 1]"
      },
      {
        "input": "prices = [100, 50, 25, 12, 6, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "[50, 25, 13, 6, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "prices = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "prices = [50, 20, 30, 10, 20, 30, 40, 50, 60, 70]",
        "output": "[30, 10, 20, 10, 20, 30, 40, 50, 60, 70]"
      },
      {
        "input": "prices = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5]"
      },
      {
        "input": "prices = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -5]"
      },
      {
        "input": "prices = [500, 100, 200, 300, 400, 500, 600, 700, 800, 900]",
        "output": "[400, 100, 200, 300, 400, 500, 600, 700, 800, 900]"
      },
      {
        "input": "prices = [100, 1, 200, 2, 300, 3, 400, 4, 500, 5]",
        "output": "[99, 1, 198, 2, 297, 3, 396, 4, 495, 5]"
      },
      {
        "input": "prices = [999, 1000, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980]",
        "output": "[1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 980]"
      },
      {
        "input": "prices = [100, 200, 150, 250, 300, 220, 180, 160, 170]",
        "output": "[100, 50, 150, 30, 80, 40, 20, 160, 170]"
      },
      {
        "input": "prices = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "prices = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "prices = [5, 10, 15, 20, 15, 10, 5, 10, 15, 20, 15, 10, 5]",
        "output": "[0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5]"
      },
      {
        "input": "prices = [3, 3, 3, 3, 1, 1, 1, 1, 5, 5, 5, 5]",
        "output": "[0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 5]"
      },
      {
        "input": "prices = [5, 15, 25, 10, 20, 5, 30, 25, 40, 10]",
        "output": "[0, 5, 15, 5, 15, 5, 5, 15, 30, 10]"
      },
      {
        "input": "prices = [5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1]",
        "output": "[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1]"
      },
      {
        "input": "prices = [8, 7, 6, 5, 4, 3, 2, 1, 9, 8, 7, 6, 5]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5]"
      },
      {
        "input": "prices = [1000,1000,1000,1000,1000]",
        "output": "[0, 0, 0, 0, 1000]"
      },
      {
        "input": "prices = [5,1,4,3,2,6,7,8,10,9]",
        "output": "[4, 1, 1, 1, 2, 6, 7, 8, 1, 9]"
      },
      {
        "input": "prices = [8, 4, 6, 2, 3, 5, 7, 1, 9, 10]",
        "output": "[4, 2, 4, 1, 2, 4, 6, 1, 9, 10]"
      },
      {
        "input": "prices = [500, 400, 300, 200, 100, 50, 25, 12, 6, 3, 1]",
        "output": "[100, 100, 100, 100, 50, 25, 13, 6, 3, 2, 1]"
      },
      {
        "input": "prices = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "prices = [250, 200, 150, 100, 50, 100, 150, 200, 250, 300]",
        "output": "[50, 50, 50, 50, 50, 100, 150, 200, 250, 300]"
      },
      {
        "input": "prices = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "prices = [20, 18, 16, 14, 12, 10, 8, 6, 4, 2]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "prices = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6]"
      },
      {
        "input": "prices = [1, 10, 1, 10, 1, 10, 1, 10]",
        "output": "[0, 9, 0, 9, 0, 9, 1, 10]"
      },
      {
        "input": "prices = [30, 25, 20, 15, 10, 5, 10, 15, 20, 25]",
        "output": "[5, 5, 5, 5, 5, 5, 10, 15, 20, 25]"
      },
      {
        "input": "prices = [4, 3, 2, 1, 2, 3, 4, 5, 6, 7]",
        "output": "[1, 1, 1, 1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "prices = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]",
        "output": "[1, 1, 1, 1, 0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "prices = [19,17,15,13,11,9,7,5,3,1]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 1]"
      },
      {
        "input": "prices = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 50]"
      },
      {
        "input": "prices = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "prices = [2, 2, 2, 2, 2, 1, 1, 1, 1, 1]",
        "output": "[0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      },
      {
        "input": "prices = [5, 10, 5, 10, 5, 10, 5, 10, 5, 10]",
        "output": "[0, 5, 0, 5, 0, 5, 0, 5, 5, 10]"
      },
      {
        "input": "prices = [7, 6, 5, 4, 3, 2, 1, 0, 0, 0]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 0, 0, 0]"
      },
      {
        "input": "prices = [1,2,2,1,1,2,2,1,1]",
        "output": "[0, 0, 1, 0, 0, 0, 1, 0, 1]"
      },
      {
        "input": "prices = [100, 50, 25, 200, 100, 50, 25, 200]",
        "output": "[50, 25, 0, 100, 50, 25, 25, 200]"
      },
      {
        "input": "prices = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8]",
        "output": "[1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8]"
      },
      {
        "input": "prices = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3]",
        "output": "[0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 2, 3]"
      },
      {
        "input": "prices = [9,8,7,6,5,4,3,2,1,10]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 10]"
      },
      {
        "input": "prices = [1,3,5,7,9,11,13,15,17,19]",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "prices = [1, 10, 1, 10, 1, 10, 1, 10, 1, 10]",
        "output": "[0, 9, 0, 9, 0, 9, 0, 9, 1, 10]"
      },
      {
        "input": "prices = [3, 2, 3, 2, 3, 2, 3, 2, 3, 2]",
        "output": "[1, 0, 1, 0, 1, 0, 1, 0, 1, 2]"
      },
      {
        "input": "prices = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]"
      },
      {
        "input": "prices = [1, 3, 2, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 1]",
        "output": "[0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "prices = [10, 20, 30, 40, 50, 40, 30, 20, 10, 5]",
        "output": "[0, 0, 0, 0, 10, 10, 10, 10, 5, 5]"
      },
      {
        "input": "prices = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "[0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10]"
      },
      {
        "input": "prices = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]"
      },
      {
        "input": "prices = [50, 40, 30, 20, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]",
        "output": "[10, 10, 10, 10, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]"
      },
      {
        "input": "prices = [5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
        "output": "[4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "prices = [50, 25, 75, 100, 50, 75, 100, 125]",
        "output": "[25, 25, 25, 50, 50, 75, 100, 125]"
      },
      {
        "input": "prices = [100, 200, 300, 400, 500, 400, 300, 200, 100]",
        "output": "[0, 0, 0, 0, 100, 100, 100, 100, 100]"
      }
    ]
  },
  {
    "id": 2053,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Counting"
    ],
    "problemDescription": "A distinct string is a string that is present only once in an array.\nGiven an array of strings arr, and an integer k, return the kth distinct string present in arr. If there are fewer than k distinct strings, return an empty string \"\".\nNote that the strings are considered in the order in which they appear in the array.\n\u00a0\nExample 1:\n\nInput: arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2\nOutput: \"a\"\nExplanation:\nThe only distinct strings in arr are \"d\" and \"a\".\n\"d\" appears 1st, so it is the 1st distinct string.\n\"a\" appears 2nd, so it is the 2nd distinct string.\nSince k == 2, \"a\" is returned. \n\nExample 2:\n\nInput: arr = [\"aaa\",\"aa\",\"a\"], k = 1\nOutput: \"aaa\"\nExplanation:\nAll strings in arr are distinct, so the 1st string \"aaa\" is returned.\n\nExample 3:\n\nInput: arr = [\"a\",\"b\",\"a\"], k = 3\nOutput: \"\"\nExplanation:\nThe only distinct string is \"b\". Since there are fewer than 3 distinct strings, we return an empty string \"\".\n\n\u00a0\nConstraints:\n\n1 <= k <= arr.length <= 1000\n1 <= arr[i].length <= 5\narr[i] consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def kthDistinct(self, arr: List[str], k: int) -> str:\n        ",
    "testCases": [
      {
        "input": "arr = [\"a\"], k = 1",
        "output": "a"
      },
      {
        "input": "arr = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"d\"], k = 1",
        "output": "d"
      },
      {
        "input": "arr = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"kiwi\"], k = 2",
        "output": "kiwi"
      },
      {
        "input": "arr = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"grape\"], k = 2",
        "output": "grape"
      },
      {
        "input": "arr = [\"aaa\",\"aa\",\"a\"], k = 1",
        "output": "aaa"
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], k = 6",
        "output": "f"
      },
      {
        "input": "arr = [\"repeat\",\"repeat\",\"repeat\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"apple\",\"banana\",\"cherry\",\"date\"], k = 1",
        "output": "apple"
      },
      {
        "input": "arr = [\"hello\",\"world\",\"hello\",\"world\"], k = 2",
        "output": ""
      },
      {
        "input": "arr = [\"x\",\"y\",\"z\",\"x\",\"y\",\"z\"], k = 2",
        "output": ""
      },
      {
        "input": "arr = [\"apple\",\"apple\",\"banana\",\"banana\",\"cherry\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"apple\",\"banana\",\"apple\",\"orange\"], k = 2",
        "output": "orange"
      },
      {
        "input": "arr = [\"repeat\",\"repeat\",\"repeat\",\"repeat\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"], k = 10",
        "output": "j"
      },
      {
        "input": "arr = [\"unique\",\"distinct\",\"strings\",\"unique\"], k = 2",
        "output": "strings"
      },
      {
        "input": "arr = [\"unique\"], k = 1",
        "output": "unique"
      },
      {
        "input": "arr = [\"same\",\"same\",\"same\",\"same\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"apple\",\"banana\",\"cherry\"], k = 1",
        "output": "apple"
      },
      {
        "input": "arr = [\"hello\",\"world\",\"hello\",\"python\",\"world\",\"code\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"a\",\"b\",\"a\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"one\",\"two\",\"three\",\"four\",\"five\"], k = 5",
        "output": "five"
      },
      {
        "input": "arr = [\"a\",\"a\",\"a\",\"a\",\"a\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"test\",\"test\",\"test\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2",
        "output": "a"
      },
      {
        "input": "arr = [\"hello\",\"world\",\"hello\",\"python\",\"world\"], k = 1",
        "output": "python"
      },
      {
        "input": "arr = [\"single\"], k = 2",
        "output": ""
      },
      {
        "input": "arr = [\"xyz\",\"zyx\",\"zyx\",\"xyz\",\"zyx\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"abcd\",\"abcde\",\"abcdef\",\"abcdefg\",\"abcdefgh\",\"abcdefghi\",\"abcdefghij\"], k = 5",
        "output": "abcdefgh"
      },
      {
        "input": "arr = [\"unique\",\"strings\",\"only\",\"here\",\"unique\",\"strings\",\"here\",\"unique\"], k = 2",
        "output": ""
      },
      {
        "input": "arr = [\"longer\",\"string\",\"values\",\"are\",\"also\",\"allowed\",\"in\",\"this\",\"example\"], k = 2",
        "output": "string"
      },
      {
        "input": "arr = [\"unique1\",\"unique2\",\"unique3\",\"unique4\",\"unique5\",\"unique6\",\"unique7\",\"unique8\",\"unique9\",\"unique10\"], k = 5",
        "output": "unique5"
      },
      {
        "input": "arr = [\"same\",\"word\",\"same\",\"word\",\"same\",\"word\",\"same\",\"word\",\"same\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\"], k = 7",
        "output": "seven"
      },
      {
        "input": "arr = [\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"test\",\"testing\",\"test\",\"testing\",\"test\",\"testing\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\", \"yzab\", \"cdef\", \"ghij\", \"klmn\", \"opqr\", \"stuv\", \"wxyz\"], k = 13",
        "output": "wxyz"
      },
      {
        "input": "arr = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\",\"twenty\"], k = 20",
        "output": "twenty"
      },
      {
        "input": "arr = [\"short\",\"longerstring\",\"shorter\",\"longeststring\",\"short\",\"shorter\",\"longerstring\"], k = 2",
        "output": ""
      },
      {
        "input": "arr = [\"abcd\",\"abc\",\"ab\",\"a\",\"abcd\",\"abc\",\"ab\",\"a\",\"abcd\",\"abc\",\"ab\",\"a\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"abc\", \"def\", \"ghi\", \"abc\", \"jkl\", \"ghi\", \"mno\"], k = 4",
        "output": ""
      },
      {
        "input": "arr = [\"same\",\"same\",\"same\",\"same\",\"same\",\"same\",\"same\",\"same\",\"same\",\"same\",\"unique\"], k = 1",
        "output": "unique"
      },
      {
        "input": "arr = [\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"unique\"], k = 6",
        "output": ""
      },
      {
        "input": "arr = [\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], k = 26",
        "output": "z"
      },
      {
        "input": "arr = [\"unique\", \"distinct\", \"unique\", \"distinct\", \"unique\", \"distinct\", \"unique\", \"distinct\", \"unique\", \"distinct\"], k = 5",
        "output": ""
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], k = 27",
        "output": ""
      },
      {
        "input": "arr = [\"test\",\"testcase\",\"testing\",\"test\",\"testcase\",\"test\",\"test\",\"testcase\",\"testing\",\"testing\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"xy\",\"yx\",\"xx\",\"yy\",\"xz\",\"zx\",\"yz\",\"zy\",\"xxyy\",\"xyxy\",\"yxyx\",\"yxyy\",\"xyyx\",\"xyyy\",\"yyxx\",\"yyxy\",\"yyyx\",\"yyyy\"], k = 10",
        "output": "xyxy"
      },
      {
        "input": "arr = [\"xyz\",\"zyx\",\"wxy\",\"yxw\",\"uvw\",\"vuw\",\"wuv\",\"abc\",\"cab\",\"bac\"], k = 2",
        "output": "zyx"
      },
      {
        "input": "arr = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"abc\",\"def\",\"ghi\"], k = 5",
        "output": "vwx"
      },
      {
        "input": "arr = [\"same\",\"different\",\"same\",\"different\",\"same\",\"different\",\"same\",\"different\"], k = 2",
        "output": ""
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\",\"d\",\"a\",\"b\",\"c\",\"d\",\"a\",\"b\",\"c\",\"d\",\"a\",\"b\",\"c\",\"d\",\"a\",\"b\",\"c\",\"d\",\"a\",\"b\",\"c\",\"d\"], k = 10",
        "output": ""
      },
      {
        "input": "arr = [\"aaaaa\",\"aaaab\",\"aaaba\",\"aabaa\",\"abaaa\",\"baaaa\",\"abcde\",\"bcdea\",\"cdeab\",\"decab\",\"efghi\",\"fghie\",\"ghief\",\"hiefg\",\"iefgh\",\"jklmn\",\"klmno\",\"lmnop\",\"mnopq\",\"nopqr\",\"opqrs\",\"pqrst\",\"qrstu\",\"rstuv\",\"stuvw\",\"tuvwx\",\"uvwxy\",\"vwxyz\"], k = 15",
        "output": "iefgh"
      },
      {
        "input": "arr = [\"unique\",\"string\",\"in\",\"this\",\"array\"], k = 5",
        "output": "array"
      },
      {
        "input": "arr = [\"loop\",\"pool\",\"look\",\"cool\",\"cool\",\"lopo\",\"loopo\"], k = 3",
        "output": "look"
      },
      {
        "input": "arr = [\"repeated\",\"repeated\",\"repeated\",\"repeated\",\"repeated\",\"repeated\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\",\"abcd\",\"abdc\",\"acbd\",\"acdb\",\"adbc\",\"adcb\",\"bacd\",\"badc\",\"bcad\",\"bcda\",\"bdac\",\"bdca\",\"cabd\",\"cadb\",\"cbad\",\"cbda\",\"cdab\",\"cdba\",\"dabc\",\"dacb\",\"dbac\",\"dbca\",\"dcab\",\"dcba\"], k = 25",
        "output": "dabc"
      },
      {
        "input": "arr = [\"same\",\"word\",\"same\",\"word\",\"same\"], k = 2",
        "output": ""
      },
      {
        "input": "arr = [\"complex\",\"input\",\"with\",\"various\",\"strings\",\"complex\",\"input\",\"with\",\"various\",\"strings\",\"complex\",\"input\",\"with\",\"various\",\"strings\"], k = 5",
        "output": ""
      },
      {
        "input": "arr = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], k = 9",
        "output": ""
      },
      {
        "input": "arr = [\"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"repeat\", \"unique\"], k = 21",
        "output": ""
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], k = 15",
        "output": "o"
      },
      {
        "input": "arr = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\"], k = 15",
        "output": ""
      },
      {
        "input": "arr = [\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\"], k = 2",
        "output": ""
      },
      {
        "input": "arr = [\"unique\",\"strings\",\"here\",\"are\",\"distinct\",\"elements\",\"with\",\"no\",\"repeats\"], k = 10",
        "output": ""
      },
      {
        "input": "arr = [\"apple\",\"banana\",\"apple\",\"cherry\",\"date\",\"banana\",\"fig\"], k = 4",
        "output": ""
      },
      {
        "input": "arr = [\"abcd\",\"ab\",\"a\",\"abcde\",\"abcd\",\"abc\",\"ab\",\"a\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\"], k = 7",
        "output": "seven"
      },
      {
        "input": "arr = [\"first\",\"second\",\"third\",\"fourth\",\"fifth\",\"sixth\",\"seventh\",\"eighth\",\"ninth\",\"tenth\"], k = 1",
        "output": "first"
      },
      {
        "input": "arr = [\"aabb\",\"abab\",\"bbaa\",\"abba\",\"baab\",\"baba\",\"aabb\",\"abab\"], k = 1",
        "output": "bbaa"
      },
      {
        "input": "arr = [\"a\",\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"d\",\"d\",\"d\",\"d\",\"d\"], k = 4",
        "output": ""
      },
      {
        "input": "arr = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\"], k = 5",
        "output": "five"
      },
      {
        "input": "arr = [\"repeat\",\"repeat\",\"distinct\",\"repeat\",\"distinct\",\"distinct\",\"distinct\",\"repeat\",\"distinct\",\"distinct\",\"distinct\",\"distinct\",\"distinct\",\"distinct\",\"distinct\",\"distinct\",\"distinct\",\"distinct\",\"distinct\",\"distinct\"], k = 6",
        "output": ""
      },
      {
        "input": "arr = [\"same\",\"same\",\"same\",\"same\",\"same\",\"same\",\"same\",\"same\",\"same\",\"same\",\"different\"], k = 2",
        "output": ""
      },
      {
        "input": "arr = [\"abcd\",\"abdc\",\"acbd\",\"acdb\",\"adbc\",\"adcb\",\"bacd\",\"badc\",\"bcad\",\"bcda\",\"bdac\",\"bdca\",\"cabd\",\"cadb\",\"cbad\",\"cbda\",\"cdab\",\"cdba\",\"dabc\",\"dacb\",\"dbac\",\"dbca\",\"dcab\",\"dcba\"], k = 20",
        "output": "dacb"
      },
      {
        "input": "arr = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"], k = 10",
        "output": ""
      },
      {
        "input": "arr = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"grape\",\"kiwi\",\"grape\"], k = 4",
        "output": ""
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], k = 5",
        "output": "e"
      },
      {
        "input": "arr = [\"same\",\"same\",\"same\",\"same\",\"same\",\"unique\",\"unique\",\"unique\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"abcd\",\"abcde\",\"abcdef\",\"abcdefg\",\"abcdefgh\"], k = 3",
        "output": "abcdef"
      },
      {
        "input": "arr = [\"aabb\",\"abab\",\"abba\",\"baab\",\"baba\",\"bbaa\",\"aaaa\",\"bbbb\",\"cccc\",\"dddd\"], k = 5",
        "output": "baba"
      },
      {
        "input": "arr = [\"aaa\",\"aab\",\"aac\",\"aad\",\"aae\",\"aaf\",\"aag\",\"aah\",\"aai\",\"aaj\",\"aak\"], k = 10",
        "output": "aaj"
      },
      {
        "input": "arr = [\"only\",\"one\",\"distinct\",\"string\",\"here\",\"in\",\"this\",\"array\"], k = 1",
        "output": "only"
      },
      {
        "input": "arr = [\"apple\",\"banana\",\"apple\",\"orange\",\"banana\",\"grape\",\"kiwi\"], k = 4",
        "output": ""
      },
      {
        "input": "arr = [\"apple\", \"banana\", \"cherry\", \"banana\", \"date\", \"elderberry\", \"fig\", \"grape\", \"fig\", \"honeydew\"], k = 5",
        "output": "grape"
      },
      {
        "input": "arr = [\"repeat\",\"repeat\",\"repeat\",\"distinct\",\"distinct\",\"distinct\",\"kth\",\"distinct\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\"], k = 10",
        "output": "ten"
      },
      {
        "input": "arr = [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"a\", \"ab\", \"abc\", \"abcd\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], k = 10",
        "output": "m"
      },
      {
        "input": "arr = [\"repeated\",\"repeated\",\"repeated\",\"repeated\",\"repeated\",\"repeated\",\"repeated\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"x\", \"y\", \"z\", \"x\", \"y\", \"z\", \"x\", \"y\", \"z\", \"x\", \"y\", \"z\", \"x\", \"y\", \"z\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"aaaaa\",\"aaaab\",\"aaaba\",\"aabaa\",\"abaaa\",\"baaaa\",\"abcde\",\"bcdea\",\"cdeab\",\"decab\"], k = 8",
        "output": "bcdea"
      },
      {
        "input": "arr = [\"test\",\"testing\",\"tested\",\"testable\",\"testify\",\"testing\"], k = 2",
        "output": "tested"
      },
      {
        "input": "arr = [\"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"test\",\"testing\",\"tested\",\"testing\",\"tested\",\"test\",\"testing\"], k = 2",
        "output": ""
      },
      {
        "input": "arr = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"], k = 5",
        "output": "mno"
      },
      {
        "input": "arr = [\"x\",\"y\",\"x\",\"y\",\"x\",\"y\",\"z\",\"w\",\"z\",\"w\",\"z\",\"w\",\"v\",\"u\",\"v\",\"u\",\"t\",\"s\",\"r\",\"q\",\"p\"], k = 10",
        "output": ""
      },
      {
        "input": "arr = [\"repeat\",\"distinct\",\"repeat\",\"distinct\",\"repeat\",\"distinct\",\"repeat\",\"distinct\",\"repeat\",\"distinct\"], k = 5",
        "output": ""
      },
      {
        "input": "arr = [\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\",\"unique\"], k = 1",
        "output": ""
      },
      {
        "input": "arr = [\"abcd\",\"dcba\",\"adbc\",\"bdac\",\"cadb\",\"dacb\",\"abcd\",\"dcba\"], k = 5",
        "output": ""
      },
      {
        "input": "arr = [\"apple\",\"banana\",\"cherry\",\"apple\",\"banana\",\"date\",\"fig\",\"grape\",\"fig\"], k = 4",
        "output": ""
      },
      {
        "input": "arr = [\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yza\"], k = 10",
        "output": ""
      },
      {
        "input": "arr = [\"same\",\"same\",\"same\",\"different\",\"different\",\"unique\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"repeated\",\"distinct\",\"value\",\"repeated\",\"value\",\"distinct\",\"unique\"], k = 4",
        "output": ""
      },
      {
        "input": "arr = [\"same\",\"same\",\"different\",\"different\",\"unique\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"abc\",\"def\",\"abc\",\"def\",\"abc\",\"def\",\"abc\",\"def\",\"ghi\",\"jkl\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"abcd\",\"abcde\",\"abcdef\",\"abc\",\"ab\",\"a\",\"\",\"a\",\"ab\",\"abc\"], k = 5",
        "output": ""
      },
      {
        "input": "arr = [\"abcd\",\"dcba\",\"abcd\",\"dcba\",\"abcd\",\"dcba\"], k = 3",
        "output": ""
      },
      {
        "input": "arr = [\"apple\",\"banana\",\"cherry\",\"apple\",\"banana\",\"date\",\"fig\",\"grape\"], k = 4",
        "output": "grape"
      },
      {
        "input": "arr = [\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\",\"x\",\"y\",\"z\"], k = 5",
        "output": ""
      }
    ]
  },
  {
    "id": 1903,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Math",
      "String"
    ],
    "problemDescription": "You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string \"\" if no odd integer exists.\nA substring is a contiguous sequence of characters within a string.\n\u00a0\nExample 1:\n\nInput: num = \"52\"\nOutput: \"5\"\nExplanation: The only non-empty substrings are \"5\", \"2\", and \"52\". \"5\" is the only odd number.\n\nExample 2:\n\nInput: num = \"4206\"\nOutput: \"\"\nExplanation: There are no odd numbers in \"4206\".\n\nExample 3:\n\nInput: num = \"35427\"\nOutput: \"35427\"\nExplanation: \"35427\" is already an odd number.\n\n\u00a0\nConstraints:\n\n1 <= num.length <= 105\nnum only consists of digits and does not contain any leading zeros.\n\n",
    "starterCode": "class Solution:\n    def largestOddNumber(self, num: str) -> str:\n        ",
    "testCases": [
      {
        "input": "num = \"52\"",
        "output": "5"
      },
      {
        "input": "num = \"9\"",
        "output": "9"
      },
      {
        "input": "num = \"86420\"",
        "output": ""
      },
      {
        "input": "num = \"1111111111\"",
        "output": "1111111111"
      },
      {
        "input": "num = \"2468\"",
        "output": ""
      },
      {
        "input": "num = \"1\"",
        "output": "1"
      },
      {
        "input": "num = \"9876543210\"",
        "output": "987654321"
      },
      {
        "input": "num = \"0\"",
        "output": ""
      },
      {
        "input": "num = \"98765\"",
        "output": "98765"
      },
      {
        "input": "num = \"2468013579\"",
        "output": "2468013579"
      },
      {
        "input": "num = \"2222222222\"",
        "output": ""
      },
      {
        "input": "num = \"8\"",
        "output": ""
      },
      {
        "input": "num = \"987654321\"",
        "output": "987654321"
      },
      {
        "input": "num = \"2\"",
        "output": ""
      },
      {
        "input": "num = \"56789\"",
        "output": "56789"
      },
      {
        "input": "num = \"321\"",
        "output": "321"
      },
      {
        "input": "num = \"123\"",
        "output": "123"
      },
      {
        "input": "num = \"1357924680\"",
        "output": "13579"
      },
      {
        "input": "num = \"4206\"",
        "output": ""
      },
      {
        "input": "num = \"123456789\"",
        "output": "123456789"
      },
      {
        "input": "num = \"35427\"",
        "output": "35427"
      },
      {
        "input": "num = \"24680\"",
        "output": ""
      },
      {
        "input": "num = \"1234567890\"",
        "output": "123456789"
      },
      {
        "input": "num = \"24681\"",
        "output": "24681"
      },
      {
        "input": "num = \"11111\"",
        "output": "11111"
      },
      {
        "input": "num = \"13579\"",
        "output": "13579"
      },
      {
        "input": "num = \"13579135791357913577\"",
        "output": "13579135791357913577"
      },
      {
        "input": "num = \"98765432109876543210\"",
        "output": "9876543210987654321"
      },
      {
        "input": "num = \"10000000000000000000000000000000000000000000000002\"",
        "output": "1"
      },
      {
        "input": "num = \"246802468024680246802468024680246802468024680\"",
        "output": ""
      },
      {
        "input": "num = \"02468\"",
        "output": ""
      },
      {
        "input": "num = \"9012345678\"",
        "output": "901234567"
      },
      {
        "input": "num = \"0000000000\"",
        "output": ""
      },
      {
        "input": "num = \"111222333444555\"",
        "output": "111222333444555"
      },
      {
        "input": "num = \"135791357913579135791357913579135791357913579\"",
        "output": "135791357913579135791357913579135791357913579"
      },
      {
        "input": "num = \"2468101214161820\"",
        "output": "2468101214161"
      },
      {
        "input": "num = \"50505050505050505055\"",
        "output": "50505050505050505055"
      },
      {
        "input": "num = \"902468013579\"",
        "output": "902468013579"
      },
      {
        "input": "num = \"99999999999999999998\"",
        "output": "9999999999999999999"
      },
      {
        "input": "num = \"987654321987654321987654321987654321987654321\"",
        "output": "987654321987654321987654321987654321987654321"
      },
      {
        "input": "num = \"13579111315\"",
        "output": "13579111315"
      },
      {
        "input": "num = \"0246802468024680246802468024680246802468024680\"",
        "output": ""
      },
      {
        "input": "num = \"1234567890123456789012345678901234567890123456789\"",
        "output": "1234567890123456789012345678901234567890123456789"
      },
      {
        "input": "num = \"1111111111111111111111111111111111111111111111111\"",
        "output": "1111111111111111111111111111111111111111111111111"
      },
      {
        "input": "num = \"123456789012345678901\"",
        "output": "123456789012345678901"
      },
      {
        "input": "num = \"246802468024680246805\"",
        "output": "246802468024680246805"
      },
      {
        "input": "num = \"1000000000000000000000000000000000000000000000000\"",
        "output": "1"
      },
      {
        "input": "num = \"5000000000000000000000000000000000000000000000003\"",
        "output": "5000000000000000000000000000000000000000000000003"
      },
      {
        "input": "num = \"987654320\"",
        "output": "9876543"
      },
      {
        "input": "num = \"111111111111111111111111111111111111111111111111\"",
        "output": "111111111111111111111111111111111111111111111111"
      },
      {
        "input": "num = \"8642086420\"",
        "output": ""
      },
      {
        "input": "num = \"10\"",
        "output": "1"
      },
      {
        "input": "num = \"8080808080808080808080808080808080808080808080807\"",
        "output": "8080808080808080808080808080808080808080808080807"
      },
      {
        "input": "num = \"1000000000000000000000000000000000000000000000001\"",
        "output": "1000000000000000000000000000000000000000000000001"
      },
      {
        "input": "num = \"2468012345\"",
        "output": "2468012345"
      },
      {
        "input": "num = \"0246802468\"",
        "output": ""
      },
      {
        "input": "num = \"124\"",
        "output": "1"
      },
      {
        "input": "num = \"246802468024680246802468024680\"",
        "output": ""
      },
      {
        "input": "num = \"1000000000100000000010000000001000000000100000001\"",
        "output": "1000000000100000000010000000001000000000100000001"
      },
      {
        "input": "num = \"1919191919191919191919191919191919191919191919\"",
        "output": "1919191919191919191919191919191919191919191919"
      },
      {
        "input": "num = \"2000000002000000002\"",
        "output": ""
      },
      {
        "input": "num = \"9999999998\"",
        "output": "999999999"
      },
      {
        "input": "num = \"87654321\"",
        "output": "87654321"
      },
      {
        "input": "num = \"10000000000000000001\"",
        "output": "10000000000000000001"
      },
      {
        "input": "num = \"1357997531\"",
        "output": "1357997531"
      },
      {
        "input": "num = \"987654321987654321987654321987654321987654321987654321\"",
        "output": "987654321987654321987654321987654321987654321987654321"
      },
      {
        "input": "num = \"00000000000000000001\"",
        "output": "00000000000000000001"
      },
      {
        "input": "num = \"987654321987654321987654321\"",
        "output": "987654321987654321987654321"
      },
      {
        "input": "num = \"9999999999999999999999999999999999999999999999998\"",
        "output": "999999999999999999999999999999999999999999999999"
      },
      {
        "input": "num = \"246801357924680\"",
        "output": "2468013579"
      },
      {
        "input": "num = \"11111111111111111112\"",
        "output": "1111111111111111111"
      },
      {
        "input": "num = \"20000000000000000000000000000000000000000000000002\"",
        "output": ""
      },
      {
        "input": "num = \"13579111315171921\"",
        "output": "13579111315171921"
      },
      {
        "input": "num = \"864200000\"",
        "output": ""
      },
      {
        "input": "num = \"13579135791357913579\"",
        "output": "13579135791357913579"
      },
      {
        "input": "num = \"2020202020202020202020202020202020202020202020\"",
        "output": ""
      },
      {
        "input": "num = \"1001001001001001001001001001001001001001001001001\"",
        "output": "1001001001001001001001001001001001001001001001001"
      },
      {
        "input": "num = \"24680246802468024689\"",
        "output": "24680246802468024689"
      },
      {
        "input": "num = \"246810\"",
        "output": "24681"
      },
      {
        "input": "num = \"999999999999999999\"",
        "output": "999999999999999999"
      },
      {
        "input": "num = \"12345678909876543210\"",
        "output": "1234567890987654321"
      },
      {
        "input": "num = \"99999999999999999999\"",
        "output": "99999999999999999999"
      },
      {
        "input": "num = \"0123456789\"",
        "output": "0123456789"
      },
      {
        "input": "num = \"1234567890123456789\"",
        "output": "1234567890123456789"
      },
      {
        "input": "num = \"9876543210987654321098765432109876543210987654321\"",
        "output": "9876543210987654321098765432109876543210987654321"
      },
      {
        "input": "num = \"101010101010101010101010101010101010101010101010101\"",
        "output": "101010101010101010101010101010101010101010101010101"
      },
      {
        "input": "num = \"00000000000000000000000000000000000000000000000\"",
        "output": ""
      },
      {
        "input": "num = \"2468024680246802468024680246802468024680246802468\"",
        "output": ""
      },
      {
        "input": "num = \"9876543219\"",
        "output": "9876543219"
      },
      {
        "input": "num = \"9876543210987654321098765432109876543210\"",
        "output": "987654321098765432109876543210987654321"
      },
      {
        "input": "num = \"12345678901\"",
        "output": "12345678901"
      },
      {
        "input": "num = \"2999999999999999999999999999999999999999999999998\"",
        "output": "299999999999999999999999999999999999999999999999"
      },
      {
        "input": "num = \"999999999\"",
        "output": "999999999"
      },
      {
        "input": "num = \"98765432101234567890\"",
        "output": "9876543210123456789"
      },
      {
        "input": "num = \"11223344556677889900\"",
        "output": "112233445566778899"
      },
      {
        "input": "num = \"543210987654321098765432109876543210987654321\"",
        "output": "543210987654321098765432109876543210987654321"
      },
      {
        "input": "num = \"13579135791357913578\"",
        "output": "1357913579135791357"
      },
      {
        "input": "num = \"100000000000000000001\"",
        "output": "100000000000000000001"
      },
      {
        "input": "num = \"555555555555555555555555555555555555555555555555\"",
        "output": "555555555555555555555555555555555555555555555555"
      },
      {
        "input": "num = \"123456789012345678902\"",
        "output": "1234567890123456789"
      },
      {
        "input": "num = \"111222333444555666777888999\"",
        "output": "111222333444555666777888999"
      },
      {
        "input": "num = \"864208642086420\"",
        "output": ""
      },
      {
        "input": "num = \"024680246802468\"",
        "output": ""
      },
      {
        "input": "num = \"9999999999\"",
        "output": "9999999999"
      },
      {
        "input": "num = \"135791357913579135791357913579\"",
        "output": "135791357913579135791357913579"
      },
      {
        "input": "num = \"9999999999999999999999999999999999999999999999999\"",
        "output": "9999999999999999999999999999999999999999999999999"
      },
      {
        "input": "num = \"86420864208642086420\"",
        "output": ""
      },
      {
        "input": "num = \"98765432109876543211\"",
        "output": "98765432109876543211"
      },
      {
        "input": "num = \"01234567890123456789\"",
        "output": "01234567890123456789"
      },
      {
        "input": "num = \"10000000000000000000\"",
        "output": "1"
      },
      {
        "input": "num = \"1000000001\"",
        "output": "1000000001"
      },
      {
        "input": "num = \"1999999999999999999999999999999999999999999999999\"",
        "output": "1999999999999999999999999999999999999999999999999"
      },
      {
        "input": "num = \"24680246802468024680\"",
        "output": ""
      },
      {
        "input": "num = \"222222222222222222222222222222222222222222222222\"",
        "output": ""
      },
      {
        "input": "num = \"135790\"",
        "output": "13579"
      },
      {
        "input": "num = \"8642097531\"",
        "output": "8642097531"
      },
      {
        "input": "num = \"10000000000000000000000000000000000000000000000001\"",
        "output": "10000000000000000000000000000000000000000000000001"
      },
      {
        "input": "num = \"123456789012345678901234567890\"",
        "output": "12345678901234567890123456789"
      },
      {
        "input": "num = \"12345678901234567891\"",
        "output": "12345678901234567891"
      },
      {
        "input": "num = \"1357913579135791357913579135791357913579135791357\"",
        "output": "1357913579135791357913579135791357913579135791357"
      },
      {
        "input": "num = \"12345678901234567890123456789012345678901234567890\"",
        "output": "1234567890123456789012345678901234567890123456789"
      },
      {
        "input": "num = \"246802468024680\"",
        "output": ""
      },
      {
        "input": "num = \"987654321987654321\"",
        "output": "987654321987654321"
      },
      {
        "input": "num = \"2222222222222222222222222222222222222222222222221\"",
        "output": "2222222222222222222222222222222222222222222222221"
      },
      {
        "input": "num = \"9876543210987654321\"",
        "output": "9876543210987654321"
      },
      {
        "input": "num = \"2222222222222222222222222222222222222222222222222\"",
        "output": ""
      },
      {
        "input": "num = \"00000000000000000000\"",
        "output": ""
      },
      {
        "input": "num = \"135791113151719\"",
        "output": "135791113151719"
      },
      {
        "input": "num = \"987654321098765432\"",
        "output": "98765432109876543"
      },
      {
        "input": "num = \"135791113151719111\"",
        "output": "135791113151719111"
      },
      {
        "input": "num = \"11111111111111111111\"",
        "output": "11111111111111111111"
      },
      {
        "input": "num = \"998877665544332211\"",
        "output": "998877665544332211"
      },
      {
        "input": "num = \"12345678901234567890\"",
        "output": "1234567890123456789"
      },
      {
        "input": "num = \"135791357913579\"",
        "output": "135791357913579"
      },
      {
        "input": "num = \"09876543210987654321\"",
        "output": "09876543210987654321"
      },
      {
        "input": "num = \"22222222221\"",
        "output": "22222222221"
      },
      {
        "input": "num = \"10000000000000000000000000000000000000000001\"",
        "output": "10000000000000000000000000000000000000000001"
      },
      {
        "input": "num = \"1357913579\"",
        "output": "1357913579"
      },
      {
        "input": "num = \"22222222222222222222\"",
        "output": ""
      },
      {
        "input": "num = \"9999999999999999999999999999999999999999998\"",
        "output": "999999999999999999999999999999999999999999"
      }
    ]
  },
  {
    "id": 3146,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String"
    ],
    "problemDescription": "You are given two strings s and t such that every character occurs at most once in s and t is a permutation of s.\nThe permutation difference between s and t is defined as the sum of the absolute difference between the index of the occurrence of each character in s and the index of the occurrence of the same character in t.\nReturn the permutation difference between s and t.\n\u00a0\nExample 1:\n\nInput: s = \"abc\", t = \"bac\"\nOutput: 2\nExplanation:\nFor s = \"abc\" and t = \"bac\", the permutation difference of s and t is equal to the sum of:\n\nThe absolute difference between the index of the occurrence of \"a\" in s and the index of the occurrence of \"a\" in t.\nThe absolute difference between the index of the occurrence of \"b\" in s and the index of the occurrence of \"b\" in t.\nThe absolute difference between the index of the occurrence of \"c\" in s and the index of the occurrence of \"c\" in t.\n\nThat is, the permutation difference between s and t is equal to |0 - 1| + |1 - 0| + |2 - 2| = 2.\n\nExample 2:\n\nInput: s = \"abcde\", t = \"edbac\"\nOutput: 12\nExplanation: The permutation difference between s and t is equal to |0 - 3| + |1 - 2| + |2 - 4| + |3 - 1| + |4 - 0| = 12.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 26\nEach character occurs at most once in s.\nt is a permutation of s.\ns consists only of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def findPermutationDifference(self, s: str, t: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "338"
      },
      {
        "input": "s = \"mnopqr\", t = \"qrpmno\"",
        "output": "18"
      },
      {
        "input": "s = \"abcde\", t = \"edbac\"",
        "output": "12"
      },
      {
        "input": "s = \"abcxyz\", t = \"xyzabc\"",
        "output": "18"
      },
      {
        "input": "s = \"qrstuv\", t = \"vutsrq\"",
        "output": "18"
      },
      {
        "input": "s = \"abc\", t = \"bac\"",
        "output": "2"
      },
      {
        "input": "s = \"mnopqr\", t = \"rqponm\"",
        "output": "18"
      },
      {
        "input": "s = \"uvwxy\", t = \"yxuvw\"",
        "output": "12"
      },
      {
        "input": "s = \"mnopqr\", t = \"qrponm\"",
        "output": "18"
      },
      {
        "input": "s = \"a\", t = \"a\"",
        "output": "0"
      },
      {
        "input": "s = \"abcd\", t = \"dcba\"",
        "output": "8"
      },
      {
        "input": "s = \"xyz\", t = \"zyx\"",
        "output": "4"
      },
      {
        "input": "s = \"ab\", t = \"ba\"",
        "output": "2"
      },
      {
        "input": "s = \"mnopqrstuvwxyzabcdefghijkl\", t = \"qrstuvwxyzabcdefghijklmno\"",
        "output": "154"
      },
      {
        "input": "s = \"abcdpqrs\", t = \"srqpdcba\"",
        "output": "32"
      },
      {
        "input": "s = \"abcdefghijknopq\", t = \"qponljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"qazwsxedcrfvtgbyhnujmiklop\", t = \"plokmijnuhbygvtfcrdxeszwaq\"",
        "output": "338"
      },
      {
        "input": "s = \"opqrstuvwxyz\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "Error: 'n'"
      },
      {
        "input": "s = \"fedcba\", t = \"abcdef\"",
        "output": "18"
      },
      {
        "input": "s = \"lkjhgfedcba\", t = \"abcdefghjkl\"",
        "output": "60"
      },
      {
        "input": "s = \"abcdefg\", t = \"gfedcba\"",
        "output": "24"
      },
      {
        "input": "s = \"abcdfghijklmnopqrstuvwxyzef\", t = \"efghijklmnopqrstuvwxyzabcd\"",
        "output": "198"
      },
      {
        "input": "s = \"lmnopqrstuvwxy\", t = \"yxwvutsrqponml\"",
        "output": "98"
      },
      {
        "input": "s = \"mnopqrstu\", t = \"tusrqpmon\"",
        "output": "40"
      },
      {
        "input": "s = \"ijklmnopqr\", t = \"rqponmlkji\"",
        "output": "50"
      },
      {
        "input": "s = \"abcdefghijl\", t = \"ljihgfedcba\"",
        "output": "60"
      },
      {
        "input": "s = \"fghjklmno\", t = \"onmlkjihgf\"",
        "output": "Error: 'i'"
      },
      {
        "input": "s = \"hijklmnop\", t = \"ponmlkjih\"",
        "output": "40"
      },
      {
        "input": "s = \"qzjrwbyfc\", t = \"bfywzcrjq\"",
        "output": "38"
      },
      {
        "input": "s = \"abcdefghijknopqrstu\", t = \"ustsrqpnljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"xyzabcdefghijklmnopqrstuvw\", t = \"wvutsrqponmlkjihgfedcbazyx\"",
        "output": "338"
      },
      {
        "input": "s = \"abcdefghijklmnop\", t = \"ponmlkjihgfedcba\"",
        "output": "128"
      },
      {
        "input": "s = \"abcdefghijkno\", t = \"onljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"nopqrstuvwxyzabcde\", t = \"edcbaonmlkjihgfptsrqvuwxzy\"",
        "output": "Error: 'm'"
      },
      {
        "input": "s = \"abcdefghijknopqrs\", t = \"srqpnljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"abcdefghijknopqrstuvwx\", t = \"xwvustsrqpnljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"abcdefghij\", t = \"ghijabcdfe\"",
        "output": "48"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"kjihgfedcba\"",
        "output": "60"
      },
      {
        "input": "s = \"zabcdefghijklmnopqrstuvwxy\", t = \"yzxwvutsrqponmlkjihgfedcba\"",
        "output": "314"
      },
      {
        "input": "s = \"jklmnopqrabcdefghistuvwxy\", t = \"tuvxyabcdefghistuvwklmnoj\"",
        "output": "267"
      },
      {
        "input": "s = \"abcdefghij\", t = \"jabcdefghi\"",
        "output": "18"
      },
      {
        "input": "s = \"pqrstuv\", t = \"vutsrqp\"",
        "output": "24"
      },
      {
        "input": "s = \"vwxyzabcdefghijklmnopqrst\", t = \"rstqponmlkjihgfedcbazyxwv\"",
        "output": "312"
      },
      {
        "input": "s = \"mnopqrlkjihgfedcba\", t = \"abcdefghijklmnopqrstuvwxzyml\"",
        "output": "Error: 's'"
      },
      {
        "input": "s = \"asdfghjkl\", t = \"lkjhgfdsa\"",
        "output": "40"
      },
      {
        "input": "s = \"abcdefghij\", t = \"ihgfedcbaj\"",
        "output": "40"
      },
      {
        "input": "s = \"abcdefghij\", t = \"jihgfedcba\"",
        "output": "50"
      },
      {
        "input": "s = \"abcdef\", t = \"fedcba\"",
        "output": "18"
      },
      {
        "input": "s = \"abcdefghklmnopqrstuvwxyz\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "Error: 'j'"
      },
      {
        "input": "s = \"pqrstuvw\", t = \"vutsrqwp\"",
        "output": "26"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"fedcbaghijk\"",
        "output": "18"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", t = \"abcdefghijklmnopqrstuvwxyza\"",
        "output": "26"
      },
      {
        "input": "s = \"qrstuvwxyza\", t = \"azyxwvutsrqponmlkjihgfe\"",
        "output": "Error: 'p'"
      },
      {
        "input": "s = \"xyzabcdefghijklmnopqrstuvw\", t = \"vutsrqponmlkjihgfedcbazyxw\"",
        "output": "312"
      },
      {
        "input": "s = \"thequickbrown\", t = \"nkbrohwiqctue\"",
        "output": "82"
      },
      {
        "input": "s = \"lmnopqrt\", t = \"tqrponml\"",
        "output": "32"
      },
      {
        "input": "s = \"mnopqrstuvwxyz\", t = \"zzyxwvutsrqponmlkjihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"abcdefghijkmnopqrstuvwxyzl\", t = \"lmnopqrstuvwxyzabcdefghijk\"",
        "output": "330"
      },
      {
        "input": "s = \"xyzuvw\", t = \"uvwzyx\"",
        "output": "18"
      },
      {
        "input": "s = \"aquickbrownfoxjumped\", t = \"xqjumoifpvwkenrdcba\"",
        "output": "Error: 'v'"
      },
      {
        "input": "s = \"abcdefghilmnopqrstuvwxyzjk\", t = \"jklmnopqrstuvwxyzabcdefghi\"",
        "output": "306"
      },
      {
        "input": "s = \"abc\", t = \"cba\"",
        "output": "4"
      },
      {
        "input": "s = \"abcdefghij\", t = \"ijklmnopab\"",
        "output": "Error: 'k'"
      },
      {
        "input": "s = \"abcdefghijkmnopqrstvuwxyz\", t = \"xyzuvwtpqrsmnkjihgfedcba\"",
        "output": "297"
      },
      {
        "input": "s = \"acdefghijklmnopqrstuvwxyzb\", t = \"bzabcdefghijklmnopqrstuvwxy\"",
        "output": "141"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", t = \"qpjohuxivtnrckdsmgflweazyb\"",
        "output": "246"
      },
      {
        "input": "s = \"abcdefghijknop\", t = \"ponljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"abcdxyz\", t = \"zyxcba\"",
        "output": "21"
      },
      {
        "input": "s = \"abcdefghijknopqrstuvw\", t = \"wvustsrqpnljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", t = \"qrstuvwxyabcdefghijklmnop\"",
        "output": "288"
      },
      {
        "input": "s = \"abcdefghijkmnopqrstuvwxyz\", t = \"zyxwvustsrqpnljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"abcdefghijknopqrstuv\", t = \"vustsrqpnljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"abcdefghijkmnopqrstuvwxyzl\", t = \"lnopqrstuvwxyzabcdefghijkml\"",
        "output": "337"
      },
      {
        "input": "s = \"qrstuv\", t = \"tvusqr\"",
        "output": "18"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"kabcdefghij\"",
        "output": "20"
      },
      {
        "input": "s = \"mnopqrstvuwxyz\", t = \"zyxwvuprstqomnkljihgfedcba\"",
        "output": "Error: 'k'"
      },
      {
        "input": "s = \"rplumabc\", t = \"mucrlpba\"",
        "output": "22"
      },
      {
        "input": "s = \"abcdefghijknopqr\", t = \"rqpnljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"mnopqrstuvwxyzabcde\", t = \"edcbamnopqrstuvwxyz\"",
        "output": "140"
      },
      {
        "input": "s = \"aeiouy\", t = \"uyioea\"",
        "output": "16"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", t = \"bacdefghijklmnopqrstuvwxyza\"",
        "output": "28"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxy\", t = \"yxwvutsrqponmlkjihgfedcba\"",
        "output": "312"
      },
      {
        "input": "s = \"zxcvbnm\", t = \"mnbvcxz\"",
        "output": "24"
      },
      {
        "input": "s = \"abcdefghijknopqrstuvwxy\", t = \"yxwvustsrqpnljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"abcdefghijknopqrst\", t = \"tsrqpnljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"lkjhgfdsapoiuytrewqmnbvcxz\", t = \"xcvbnmqwertypoiuytsdfghjkl\"",
        "output": "318"
      },
      {
        "input": "s = \"xyzxyz\", t = \"zzzyyx\"",
        "output": "15"
      },
      {
        "input": "s = \"abcdefghij\", t = \"efghijklab\"",
        "output": "Error: 'k'"
      },
      {
        "input": "s = \"xyzabcdefghijklmnopqrstuvw\", t = \"stuvwxabcdefghijklmnopqrzy\"",
        "output": "210"
      },
      {
        "input": "s = \"abcdefghijkmnopqrstuvwxyz\", t = \"zyxwvutsrqponmlkjihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"abcdefghij\", t = \"ijhgfedcba\"",
        "output": "50"
      },
      {
        "input": "s = \"qwertyuiopasdfghjklzxcvbnm\", t = \"mnbvcxzlkjhgfdsapoiuytrewq\"",
        "output": "338"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", t = \"bcazdefghijklmnopqrstuvwxy\"",
        "output": "48"
      },
      {
        "input": "s = \"tuvrstxyzwqpomnlkjihgfedcba\", t = \"cabfedghijklmnopqrstuvwxyz\"",
        "output": "338"
      },
      {
        "input": "s = \"abcxyz\", t = \"zyxcba\"",
        "output": "18"
      },
      {
        "input": "s = \"qwertyuiop\", t = \"poiuytrewq\"",
        "output": "50"
      },
      {
        "input": "s = \"abcdefghijn\", t = \"nljihgfedcba\"",
        "output": "Error: 'l'"
      },
      {
        "input": "s = \"abcdefghijk\", t = \"kijhgfedcba\"",
        "output": "60"
      },
      {
        "input": "s = \"abcdefghijlm\", t = \"mljihgfedcba\"",
        "output": "72"
      },
      {
        "input": "s = \"mnopqrstu\", t = \"ustqrpmno\"",
        "output": "40"
      },
      {
        "input": "s = \"abcdefgh\", t = \"hgfedcba\"",
        "output": "32"
      },
      {
        "input": "s = \"qrstuvw\", t = \"tuvwsrq\"",
        "output": "24"
      },
      {
        "input": "s = \"hijklmnopqrstuvwxyzabcde\", t = \"mnopqrstuvwxyzabcdefghijkl\"",
        "output": "Error: 'f'"
      },
      {
        "input": "s = \"abcdefghijklm\", t = \"mlkjihgfedcba\"",
        "output": "84"
      },
      {
        "input": "s = \"abcdefghij\", t = \"abcdefghij\"",
        "output": "0"
      },
      {
        "input": "s = \"ghijklmn\", t = \"nmlkjihg\"",
        "output": "32"
      }
    ]
  },
  {
    "id": 2578,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Math",
      "Sorting"
    ],
    "problemDescription": "Given a positive integer num, split it into two non-negative integers num1 and num2 such that:\n\nThe concatenation of num1 and num2 is a permutation of num.\n\n\t\nIn other words, the sum of the number of occurrences of each digit in num1 and num2 is equal to the number of occurrences of that digit in num.\n\n\nnum1 and num2 can contain leading zeros.\n\nReturn the minimum possible sum of num1 and num2.\nNotes:\n\nIt is guaranteed that num does not contain any leading zeros.\nThe order of occurrence of the digits in num1 and num2 may differ from the order of occurrence of num.\n\n\u00a0\nExample 1:\n\nInput: num = 4325\nOutput: 59\nExplanation: We can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum.\n\nExample 2:\n\nInput: num = 687\nOutput: 75\nExplanation: We can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75.\n\n\u00a0\nConstraints:\n\n10 <= num <= 109\n\n",
    "starterCode": "class Solution:\n    def splitNum(self, num: int) -> int:\n        ",
    "testCases": [
      {
        "input": "num = 10",
        "output": "1"
      },
      {
        "input": "num = 687",
        "output": "75"
      },
      {
        "input": "num = 4325",
        "output": "59"
      },
      {
        "input": "num = 1111111111",
        "output": "22222"
      },
      {
        "input": "num = 1234",
        "output": "37"
      },
      {
        "input": "num = 222",
        "output": "24"
      },
      {
        "input": "num = 1000000000",
        "output": "1"
      },
      {
        "input": "num = 111111",
        "output": "222"
      },
      {
        "input": "num = 123456789",
        "output": "16047"
      },
      {
        "input": "num = 9876543210",
        "output": "16047"
      },
      {
        "input": "num = 111222333",
        "output": "12456"
      },
      {
        "input": "num = 1999999999",
        "output": "119998"
      },
      {
        "input": "num = 1020304050",
        "output": "159"
      },
      {
        "input": "num = 29392342",
        "output": "4588"
      },
      {
        "input": "num = 1001",
        "output": "2"
      },
      {
        "input": "num = 543321",
        "output": "369"
      },
      {
        "input": "num = 5555555555",
        "output": "111110"
      },
      {
        "input": "num = 999999",
        "output": "1998"
      },
      {
        "input": "num = 9191919191",
        "output": "23198"
      },
      {
        "input": "num = 1000000",
        "output": "1"
      },
      {
        "input": "num = 1357924680",
        "output": "16047"
      },
      {
        "input": "num = 314159",
        "output": "284"
      },
      {
        "input": "num = 444444444444444444",
        "output": "888888888"
      },
      {
        "input": "num = 2233445566778899",
        "output": "46913578"
      },
      {
        "input": "num = 567894321",
        "output": "16047"
      },
      {
        "input": "num = 99991111",
        "output": "2398"
      },
      {
        "input": "num = 5647382910",
        "output": "16047"
      },
      {
        "input": "num = 1000000009",
        "output": "10"
      },
      {
        "input": "num = 100100100100",
        "output": "22"
      },
      {
        "input": "num = 4444444444",
        "output": "88888"
      },
      {
        "input": "num = 99887766554433221100",
        "output": "246913578"
      },
      {
        "input": "num = 303030303030",
        "output": "666"
      },
      {
        "input": "num = 4444455555",
        "output": "89010"
      },
      {
        "input": "num = 111222333444",
        "output": "234678"
      },
      {
        "input": "num = 111222333444555666777888999",
        "output": "12456901345788"
      },
      {
        "input": "num = 3030303030",
        "output": "366"
      },
      {
        "input": "num = 111122223333444455556666777788889999",
        "output": "224466891133557798"
      },
      {
        "input": "num = 594939291909",
        "output": "160998"
      },
      {
        "input": "num = 7070707070",
        "output": "854"
      },
      {
        "input": "num = 12345678987654321",
        "output": "135802467"
      },
      {
        "input": "num = 8642013579",
        "output": "16047"
      },
      {
        "input": "num = 8642086420",
        "output": "4936"
      },
      {
        "input": "num = 1298765432",
        "output": "36047"
      },
      {
        "input": "num = 111222333444555",
        "output": "12456900"
      },
      {
        "input": "num = 222333444555666777888999",
        "output": "456901345788"
      },
      {
        "input": "num = 2222222222",
        "output": "44444"
      },
      {
        "input": "num = 2020202020",
        "output": "244"
      },
      {
        "input": "num = 222222222222222222222222222222222222",
        "output": "444444444444444444"
      },
      {
        "input": "num = 1357913579",
        "output": "27158"
      },
      {
        "input": "num = 2323232323",
        "output": "44566"
      },
      {
        "input": "num = 6060606060",
        "output": "732"
      },
      {
        "input": "num = 31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679",
        "output": "12223444445666667888901112333355557777779999998"
      },
      {
        "input": "num = 1000000001",
        "output": "2"
      },
      {
        "input": "num = 87654321",
        "output": "3825"
      },
      {
        "input": "num = 999998888877777666665555544444333332222211111",
        "output": "12244566890113345577898"
      },
      {
        "input": "num = 12345678901234567890",
        "output": "246913578"
      },
      {
        "input": "num = 1111222233334444",
        "output": "22446688"
      },
      {
        "input": "num = 2468024680",
        "output": "4936"
      },
      {
        "input": "num = 1122334455",
        "output": "24690"
      },
      {
        "input": "num = 333311112222",
        "output": "224466"
      },
      {
        "input": "num = 999111222333",
        "output": "234738"
      },
      {
        "input": "num = 123456789012",
        "output": "136047"
      },
      {
        "input": "num = 999888777666555444333222111",
        "output": "12456901345788"
      },
      {
        "input": "num = 8080808080",
        "output": "976"
      },
      {
        "input": "num = 321123321123",
        "output": "224466"
      },
      {
        "input": "num = 98765432109876543210",
        "output": "246913578"
      },
      {
        "input": "num = 1223334444",
        "output": "35688"
      },
      {
        "input": "num = 1010101010",
        "output": "122"
      },
      {
        "input": "num = 999988887777666655554444333322221111",
        "output": "224466891133557798"
      },
      {
        "input": "num = 8051726349",
        "output": "16047"
      },
      {
        "input": "num = 4040404040",
        "output": "488"
      },
      {
        "input": "num = 777777777777777777",
        "output": "1555555554"
      },
      {
        "input": "num = 5959595959",
        "output": "111598"
      },
      {
        "input": "num = 987654321",
        "output": "16047"
      },
      {
        "input": "num = 2929292929",
        "output": "45298"
      },
      {
        "input": "num = 54321",
        "output": "159"
      },
      {
        "input": "num = 765432109876543210",
        "output": "24691357"
      },
      {
        "input": "num = 333322221111",
        "output": "224466"
      },
      {
        "input": "num = 9999999999",
        "output": "199998"
      },
      {
        "input": "num = 112233445566778899",
        "output": "246913578"
      },
      {
        "input": "num = 1234567890123456789",
        "output": "246913578"
      },
      {
        "input": "num = 5432109876",
        "output": "16047"
      },
      {
        "input": "num = 1234321",
        "output": "1357"
      },
      {
        "input": "num = 5678901234",
        "output": "16047"
      },
      {
        "input": "num = 8070605040302010",
        "output": "3825"
      },
      {
        "input": "num = 5432112345",
        "output": "24690"
      },
      {
        "input": "num = 2468013579",
        "output": "16047"
      },
      {
        "input": "num = 1234567890987654321",
        "output": "246913578"
      },
      {
        "input": "num = 12233344445555566666677777778888888899999999",
        "output": "3568911233455577779998"
      },
      {
        "input": "num = 1234567890",
        "output": "16047"
      },
      {
        "input": "num = 9090909090",
        "output": "1098"
      },
      {
        "input": "num = 7654321098",
        "output": "16047"
      },
      {
        "input": "num = 8888888888888888888",
        "output": "9777777776"
      },
      {
        "input": "num = 5050505050",
        "output": "610"
      },
      {
        "input": "num = 333333333333333333",
        "output": "666666666"
      },
      {
        "input": "num = 5432109876543210",
        "output": "2469147"
      },
      {
        "input": "num = 98765432100",
        "output": "16047"
      },
      {
        "input": "num = 90909090909090",
        "output": "10998"
      }
    ]
  },
  {
    "id": 3194,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "You have an array of floating point numbers averages which is initially empty. You are given an array nums of n integers where n is even.\nYou repeat the following procedure n / 2 times:\n\nRemove the smallest element, minElement, and the largest element maxElement,\u00a0from nums.\nAdd (minElement + maxElement) / 2 to averages.\n\nReturn the minimum element in averages.\n\u00a0\nExample 1:\n\nInput: nums = [7,8,3,4,15,13,4,1]\nOutput: 5.5\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[7,8,3,4,15,13,4,1]\n[]\n\n\n1\n[7,8,3,4,13,4]\n[8]\n\n\n2\n[7,8,4,4]\n[8,8]\n\n\n3\n[7,4]\n[8,8,6]\n\n\n4\n[]\n[8,8,6,5.5]\n\n\n\nThe smallest element of averages, 5.5, is returned.\nExample 2:\n\nInput: nums = [1,9,8,3,10,5]\nOutput: 5.5\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[1,9,8,3,10,5]\n[]\n\n\n1\n[9,8,3,5]\n[5.5]\n\n\n2\n[8,5]\n[5.5,6]\n\n\n3\n[]\n[5.5,6,6.5]\n\n\n\n\nExample 3:\n\nInput: nums = [1,2,3,7,8,9]\nOutput: 5.0\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[1,2,3,7,8,9]\n[]\n\n\n1\n[2,3,7,8]\n[5]\n\n\n2\n[3,7]\n[5,5]\n\n\n3\n[]\n[5,5,5]\n\n\n\n\n\u00a0\nConstraints:\n\n2 <= n == nums.length <= 50\nn is even.\n1 <= nums[i] <= 50\n\n",
    "starterCode": "class Solution:\n    def minimumAverage(self, nums: List[int]) -> float:\n        ",
    "testCases": [
      {
        "input": "nums = [2,1,5,4,9,8]",
        "output": "4.5"
      },
      {
        "input": "nums = [1,9,8,3,10,5]",
        "output": "5.5"
      },
      {
        "input": "nums = [10,20,30,40,50,60]",
        "output": "35.0"
      },
      {
        "input": "nums = [25,25,25,25,25,25]",
        "output": "25.0"
      },
      {
        "input": "nums = [2,3,10,1,11,5,4,8]",
        "output": "4.5"
      },
      {
        "input": "nums = [50,49,48,47,46,45]",
        "output": "47.5"
      },
      {
        "input": "nums = [2,4,6,8,10,12]",
        "output": "7.0"
      },
      {
        "input": "nums = [1,5,9,13,17,21]",
        "output": "11.0"
      },
      {
        "input": "nums = [2,3,1,4,6,5]",
        "output": "3.5"
      },
      {
        "input": "nums = [1,3,5,7,9,11]",
        "output": "6.0"
      },
      {
        "input": "nums = [2,2,2,2,2,2]",
        "output": "2.0"
      },
      {
        "input": "nums = [1,2,3,4,5,6]",
        "output": "3.5"
      },
      {
        "input": "nums = [50,1,25,2,50,24]",
        "output": "24.5"
      },
      {
        "input": "nums = [42,3,51,6,32,28]",
        "output": "24.0"
      },
      {
        "input": "nums = [30,20,10,40,60,50]",
        "output": "35.0"
      },
      {
        "input": "nums = [25,10,30,5,40,15]",
        "output": "20.0"
      },
      {
        "input": "nums = [7,8,3,4,15,13,4,1]",
        "output": "5.5"
      },
      {
        "input": "nums = [5,5,5,5,5,5]",
        "output": "5.0"
      },
      {
        "input": "nums = [45,30,35,20,50,40]",
        "output": "35.0"
      },
      {
        "input": "nums = [50,1,50,2,50,3]",
        "output": "25.5"
      },
      {
        "input": "nums = [15,15,15,15,15,15]",
        "output": "15.0"
      },
      {
        "input": "nums = [1,2,3,7,8,9]",
        "output": "5.0"
      },
      {
        "input": "nums = [10,20,30,40]",
        "output": "25.0"
      },
      {
        "input": "nums = [25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50]",
        "output": "-12.5"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30,33,36]",
        "output": "19.5"
      },
      {
        "input": "nums = [7, 3, 9, 1, 5, 11, 13, 2, 8, 6, 10, 4]",
        "output": "6.5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "5.5"
      },
      {
        "input": "nums = [48,46,44,42,40,38,36,34]",
        "output": "41.0"
      },
      {
        "input": "nums = [1,5,9,13,17,21,25,29]",
        "output": "15.0"
      },
      {
        "input": "nums = [27, 37, 23, 33, 29, 39, 21, 31]",
        "output": "30.0"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "2.0"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 1, 8, 15]",
        "output": "18.0"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "6.5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "8.5"
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]",
        "output": "7.0"
      },
      {
        "input": "nums = [45, 30, 15, 5, 50, 35, 20, 10, 40, 25]",
        "output": "27.5"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 1]",
        "output": "25.0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 1, 2, 3, 4, 5]",
        "output": "7.5"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80]",
        "output": "45.0"
      },
      {
        "input": "nums = [24, 12, 36, 6, 48, 24]",
        "output": "24.0"
      },
      {
        "input": "nums = [10,11,12,13,14,15,16,17,18,19,20,21]",
        "output": "15.5"
      },
      {
        "input": "nums = [1,99,2,98,3,97,4,96,5,95,6,94]",
        "output": "50.0"
      },
      {
        "input": "nums = [23, 17, 11, 5, 31, 29, 25, 19, 35, 33, 37, 13]",
        "output": "21.0"
      },
      {
        "input": "nums = [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]",
        "output": "30.0"
      },
      {
        "input": "nums = [49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30]",
        "output": "39.5"
      },
      {
        "input": "nums = [20,10,20,10,20,10,20,10,20,10,20,10]",
        "output": "15.0"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "3.0"
      },
      {
        "input": "nums = [29, 10, 34, 15, 40, 5, 30, 20]",
        "output": "22.0"
      },
      {
        "input": "nums = [8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128]",
        "output": "68.0"
      },
      {
        "input": "nums = [49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38]",
        "output": "43.5"
      },
      {
        "input": "nums = [23,29,27,25,21,28,26,22,24,20,19,30,18,31,17,32,16,33,15,34,14,35,13,36,12,37,11,38,10,39,9,40,8,41,7,42,6,43,5,44,4,45,3,46,2,47,1,48,50]",
        "output": "25.0"
      },
      {
        "input": "nums = [42,42,42,42,42,42,42,42,42,42]",
        "output": "42.0"
      },
      {
        "input": "nums = [4,8,12,16,20,24,28,32]",
        "output": "18.0"
      },
      {
        "input": "nums = [17, 18, 19, 20, 21, 22, 23, 24, 25, 26]",
        "output": "21.5"
      },
      {
        "input": "nums = [48, 49, 50, 1, 2, 3, 47, 46, 45, 44]",
        "output": "25.5"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "5.5"
      },
      {
        "input": "nums = [8, 16, 24, 32, 40, 48, 56, 64]",
        "output": "36.0"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "10.0"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
        "output": "20.0"
      },
      {
        "input": "nums = [50, 25, 1, 30, 45, 20, 15, 40]",
        "output": "25.5"
      },
      {
        "input": "nums = [45,45,45,45,45,45,45,45,45,45,45,45]",
        "output": "45.0"
      },
      {
        "input": "nums = [1, 50, 2, 49, 3, 48, 4, 47, 5, 46]",
        "output": "25.5"
      },
      {
        "input": "nums = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "25.5"
      },
      {
        "input": "nums = [28,28,28,28,28,28,28,28,28,28,28,28,28,28]",
        "output": "28.0"
      },
      {
        "input": "nums = [49,48,47,46,45,44,43,42,41,40,39,38]",
        "output": "43.5"
      },
      {
        "input": "nums = [23,46,69,92,115,138,161,184,207,230,253,276,299,322,345,368]",
        "output": "195.5"
      },
      {
        "input": "nums = [29,29,29,29,1,1,1,1,14,14,14,14]",
        "output": "14.0"
      },
      {
        "input": "nums = [29,19,28,18,27,17,26,16,25,15,24,14]",
        "output": "21.5"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70]",
        "output": "38.5"
      },
      {
        "input": "nums = [50,49,48,47,46,45,44,43,42,41]",
        "output": "45.5"
      },
      {
        "input": "nums = [34,34,12,12,56,56,28,28,42,42]",
        "output": "34.0"
      },
      {
        "input": "nums = [3, 11, 7, 15, 9, 17, 5, 13]",
        "output": "10.0"
      },
      {
        "input": "nums = [1, 50, 2, 49, 3, 48, 4, 47, 5, 46, 6, 45, 7, 44, 8, 43, 9, 42, 10, 41]",
        "output": "25.5"
      },
      {
        "input": "nums = [4,8,12,16,20,24,28,32,36,40]",
        "output": "22.0"
      },
      {
        "input": "nums = [47,47,47,47,47,47,47,47,47,47,47,47]",
        "output": "47.0"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "3.0"
      },
      {
        "input": "nums = [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]",
        "output": "8.0"
      },
      {
        "input": "nums = [20, 10, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "65.0"
      },
      {
        "input": "nums = [8, 16, 24, 32, 40, 48, 12, 20]",
        "output": "22.0"
      },
      {
        "input": "nums = [15,25,35,45,55,65,75,85]",
        "output": "50.0"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "5.0"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41]",
        "output": "45.5"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]",
        "output": "10.5"
      },
      {
        "input": "nums = [15, 20, 5, 10, 25, 30, 35, 40, 50, 55]",
        "output": "27.5"
      },
      {
        "input": "nums = [30,30,29,29,28,28,27,27,26,26,25,25]",
        "output": "27.5"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "55.0"
      },
      {
        "input": "nums = [45, 42, 43, 41, 44, 46, 47, 48]",
        "output": "44.5"
      },
      {
        "input": "nums = [29,29,29,29,29,29,29,29,29,29,29,29]",
        "output": "29.0"
      },
      {
        "input": "nums = [3, 9, 15, 21, 27, 33, 39, 45, 51, 57]",
        "output": "30.0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "5.5"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "output": "12.0"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15]",
        "output": "8.0"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]",
        "output": "21.0"
      },
      {
        "input": "nums = [28, 22, 16, 10, 4, 32, 26, 20, 14, 8, 30, 12]",
        "output": "18.0"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "11.0"
      },
      {
        "input": "nums = [22, 38, 26, 40, 24, 36, 28, 34]",
        "output": "31.0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1.0"
      },
      {
        "input": "nums = [45,46,47,48,49,50,1,2,3,4,5,6,7,8,9,10]",
        "output": "8.5"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "65.0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "10.5"
      },
      {
        "input": "nums = [15,25,35,5,30,20,40,10]",
        "output": "22.5"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78, 91, 4, 8, 12]",
        "output": "32.5"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30]",
        "output": "16.5"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "25.5"
      },
      {
        "input": "nums = [2, 6, 10, 14, 18, 22, 26, 30, 34, 38]",
        "output": "20.0"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 1, 8, 15, 22, 29]",
        "output": "21.5"
      },
      {
        "input": "nums = [10,20,30,40,50,1]",
        "output": "25.0"
      },
      {
        "input": "nums = [1, 50, 2, 49, 3, 48, 4, 47]",
        "output": "25.5"
      },
      {
        "input": "nums = [4, 8, 15, 16, 23, 42, 1, 2, 3, 5, 7, 11, 13, 17, 19, 29]",
        "output": "11.0"
      },
      {
        "input": "nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 9]",
        "output": "4.0"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24]",
        "output": "13.0"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,30]",
        "output": "15.5"
      },
      {
        "input": "nums = [42, 43, 44, 45, 46, 47, 48, 49, 50, 1]",
        "output": "25.5"
      },
      {
        "input": "nums = [10,20,30,40,50,1,2,3,4,5]",
        "output": "7.5"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 5, 15, 25]",
        "output": "22.5"
      },
      {
        "input": "nums = [17,18,19,20,21,22,23,24,25,26]",
        "output": "21.5"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 50, 40, 30, 20, 10]",
        "output": "27.5"
      },
      {
        "input": "nums = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45]",
        "output": "22.5"
      },
      {
        "input": "nums = [12, 24, 36, 48, 18, 30, 42, 54]",
        "output": "33.0"
      },
      {
        "input": "nums = [8,24,3,12,18,6,21,9,15,1,19,7,22,10,16,4,23,2,11,13,17,14,25,20,5]",
        "output": "13.0"
      },
      {
        "input": "nums = [50,1,49,2,48,3,47,4,46,5,45,6]",
        "output": "25.5"
      },
      {
        "input": "nums = [10,20,30,40,50,5,15,25,35,45]",
        "output": "27.5"
      },
      {
        "input": "nums = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34]",
        "output": "29.5"
      },
      {
        "input": "nums = [25,24,23,22,21,20,19,18]",
        "output": "21.5"
      },
      {
        "input": "nums = [7, 14, 21, 28, 35, 42, 49, 50]",
        "output": "28.5"
      },
      {
        "input": "nums = [21,18,15,12,9,6,3,0]",
        "output": "10.5"
      },
      {
        "input": "nums = [49, 2, 48, 3, 47, 4, 46, 5, 45, 6]",
        "output": "25.5"
      },
      {
        "input": "nums = [45, 44, 43, 42, 41, 40, 39, 38, 37, 36]",
        "output": "40.5"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]",
        "output": "12.0"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80]",
        "output": "45.0"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "2.0"
      },
      {
        "input": "nums = [33, 17, 47, 31, 27, 13, 41, 23, 39, 29, 35, 19]",
        "output": "29.0"
      }
    ]
  },
  {
    "id": 21,
    "difficulty": "Easy",
    "tags": [
      "Recursion",
      "Linked List"
    ],
    "problemDescription": "You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\n\u00a0\nExample 1:\n\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExample 2:\n\nInput: list1 = [], list2 = []\nOutput: []\n\nExample 3:\n\nInput: list1 = [], list2 = [0]\nOutput: [0]\n\n\u00a0\nConstraints:\n\nThe number of nodes in both lists is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth list1 and list2 are sorted in non-decreasing order.\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "list1 = [1,1,1], list2 = [1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "list1 = [10, 20, 30], list2 = [5, 15, 25, 35]",
        "output": "[5, 10, 15, 20, 25, 30, 35]"
      },
      {
        "input": "list1 = [-1,0,2], list2 = [-2,-1,0]",
        "output": "[-2, -1, -1, 0, 0, 2]"
      },
      {
        "input": "list1 = [1,3,5,7,9], list2 = [2,4,6,8,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "list1 = [10], list2 = [10]",
        "output": "[10, 10]"
      },
      {
        "input": "list1 = [100], list2 = [50,75,100]",
        "output": "[50, 75, 100, 100]"
      },
      {
        "input": "list1 = [-100,0,100], list2 = [-50,50]",
        "output": "[-100, -50, 0, 50, 100]"
      },
      {
        "input": "list1 = [5], list2 = [4]",
        "output": "[4, 5]"
      },
      {
        "input": "list1 = [1,3,5,7], list2 = [2,4,6,8]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "list1 = [], list2 = []",
        "output": "None"
      },
      {
        "input": "list1 = [5], list2 = [1,2,3]",
        "output": "[1, 2, 3, 5]"
      },
      {
        "input": "list1 = [-100, 0, 100], list2 = [-50, 50]",
        "output": "[-100, -50, 0, 50, 100]"
      },
      {
        "input": "list1 = [], list2 = [0]",
        "output": "[0]"
      },
      {
        "input": "list1 = [-10, -5, 0], list2 = [-20, -15, -10]",
        "output": "[-20, -15, -10, -10, -5, 0]"
      },
      {
        "input": "list1 = [1,1,1,1], list2 = [1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "list1 = [-1,-2,-3], list2 = [-4,-5,-6]",
        "output": "[-4, -5, -6, -1, -2, -3]"
      },
      {
        "input": "list1 = [1,2,4], list2 = [1,3,4]",
        "output": "[1, 1, 2, 3, 4, 4]"
      },
      {
        "input": "list1 = [1,2,3], list2 = [4,5,6]",
        "output": "[1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "list1 = [1, 2, 3, 4, 5], list2 = [6, 7, 8, 9, 10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], list2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "list1 = [-100, -50, 0, 50, 100], list2 = [-200, -150, -100, -50, 0]",
        "output": "[-200, -150, -100, -100, -50, -50, 0, 0, 50, 100]"
      },
      {
        "input": "list1 = [-99,-98,-97], list2 = [-96,-95,-94]",
        "output": "[-99, -98, -97, -96, -95, -94]"
      },
      {
        "input": "list1 = [-100, -99, -98], list2 = [-100, -99, -98]",
        "output": "[-100, -100, -99, -99, -98, -98]"
      },
      {
        "input": "list1 = [-10,-5,0,5,10], list2 = [-20,-15,-10,-5,0]",
        "output": "[-20, -15, -10, -10, -5, -5, 0, 0, 5, 10]"
      },
      {
        "input": "list1 = [30, 40, 50], list2 = [10, 20, 30, 40, 50, 60]",
        "output": "[10, 20, 30, 30, 40, 40, 50, 50, 60]"
      },
      {
        "input": "list1 = [2, 4, 6, 8], list2 = [1, 3, 5, 7, 9, 11, 13, 15]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15]"
      },
      {
        "input": "list1 = [-99, -50, -20, 0, 20, 50], list2 = [-98, -49, -19, -1, 19, 49]",
        "output": "[-99, -98, -50, -49, -20, -19, -1, 0, 19, 20, 49, 50]"
      },
      {
        "input": "list1 = [-10, -5, 0, 5, 10], list2 = [-11, -6, -1, 6, 11]",
        "output": "[-11, -10, -6, -5, -1, 0, 5, 6, 10, 11]"
      },
      {
        "input": "list1 = [1], list2 = [2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "list1 = [0, 1, 2, 3, 4], list2 = [-4, -3, -2, -1, 0]",
        "output": "[-4, -3, -2, -1, 0, 0, 1, 2, 3, 4]"
      },
      {
        "input": "list1 = [1,3,5,7,9,11,13], list2 = [2,4,6,8,10,12,14]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "list1 = [50, 100, 150, 200, 250, 300], list2 = [25, 75, 125, 175, 225, 275, 325]",
        "output": "[25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325]"
      },
      {
        "input": "list1 = [50, 45, 40, 35, 30], list2 = [25, 20, 15, 10, 5, 0]",
        "output": "[25, 20, 15, 10, 5, 0, 50, 45, 40, 35, 30]"
      },
      {
        "input": "list1 = [1,2,3,4,5,6,7,8,9,10], list2 = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "list1 = [-1, 2, 4, 6, 8], list2 = [0, 3, 5, 7, 9]",
        "output": "[-1, 0, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "list1 = [10, 20, 30, 40, 50], list2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[2, 4, 6, 8, 10, 10, 12, 14, 16, 18, 20, 20, 30, 40, 50]"
      },
      {
        "input": "list1 = [0, 2, 4, 6, 8, 10], list2 = [1, 3, 5, 7, 9]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "list1 = [-1, -2, -3, -4, -5], list2 = [-5, -4, -3, -2, -1]",
        "output": "[-5, -4, -3, -2, -1, -2, -3, -4, -5, -1]"
      },
      {
        "input": "list1 = [-99, -98, -97, -96], list2 = [-95, -94, -93, -92]",
        "output": "[-99, -98, -97, -96, -95, -94, -93, -92]"
      },
      {
        "input": "list1 = [1, 2, 3, 4, 5], list2 = [0, -1, -2, -3, -4, -5]",
        "output": "[0, -1, -2, -3, -4, -5, 1, 2, 3, 4, 5]"
      },
      {
        "input": "list1 = [-5, -4, -3, -2, -1], list2 = [0, 1, 2, 3, 4, 5]",
        "output": "[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "list1 = [-1, 2, -3, 4, -5], list2 = [1, -2, 3, -4, 5]",
        "output": "[-1, 1, -2, 2, -3, 3, -4, 4, -5, 5]"
      },
      {
        "input": "list1 = [10,20,30,40,50,60,70,80,90,100], list2 = [5,15,25,35,45,55,65,75,85,95]",
        "output": "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]"
      },
      {
        "input": "list1 = [1, 3, 5, 7, 9], list2 = [10, 20, 30, 40, 50]",
        "output": "[1, 3, 5, 7, 9, 10, 20, 30, 40, 50]"
      },
      {
        "input": "list1 = [0,2,4,6,8], list2 = [1,3,5,7,9]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "list1 = [-100, -50, 0, 50, 100], list2 = []",
        "output": "[-100, -50, 0, 50, 100]"
      },
      {
        "input": "list1 = [-10, -8, -6, -4, -2], list2 = [-9, -7, -5, -3, -1]",
        "output": "[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]"
      },
      {
        "input": "list1 = [-100, -50, 0, 50, 100], list2 = [-75, -25, 25, 75]",
        "output": "[-100, -75, -50, -25, 0, 25, 50, 75, 100]"
      },
      {
        "input": "list1 = [1], list2 = [2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "list1 = [1, 3, 5, 7, 9], list2 = [1, 3, 5, 7, 9]",
        "output": "[1, 1, 3, 3, 5, 5, 7, 7, 9, 9]"
      },
      {
        "input": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], list2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "list1 = [-50, -40, -30], list2 = [-20, -10, 0, 10, 20, 30]",
        "output": "[-50, -40, -30, -20, -10, 0, 10, 20, 30]"
      },
      {
        "input": "list1 = [1, 3, 5, 7, 9], list2 = [2, 4, 6, 8, 10, 12, 14]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14]"
      },
      {
        "input": "list1 = [100, 101, 102, 103], list2 = [104, 105, 106, 107]",
        "output": "[100, 101, 102, 103, 104, 105, 106, 107]"
      },
      {
        "input": "list1 = [-100, -50, -10], list2 = [-200, -150, -100, -50, -10]",
        "output": "[-200, -150, -100, -100, -50, -50, -10, -10]"
      },
      {
        "input": "list1 = [1], list2 = [1, 2, 3, 4, 5]",
        "output": "[1, 1, 2, 3, 4, 5]"
      },
      {
        "input": "list1 = [10, 20, 30], list2 = [5, 15, 25, 35, 45, 55, 65]",
        "output": "[5, 10, 15, 20, 25, 30, 35, 45, 55, 65]"
      },
      {
        "input": "list1 = [100, 90, 80, 70, 60], list2 = [50, 40, 30, 20, 10]",
        "output": "[50, 40, 30, 20, 10, 100, 90, 80, 70, 60]"
      },
      {
        "input": "list1 = [10], list2 = [5, 15, 25, 35, 45]",
        "output": "[5, 10, 15, 25, 35, 45]"
      },
      {
        "input": "list1 = [100, 200, 300], list2 = [50, 150, 250, 350]",
        "output": "[50, 100, 150, 200, 250, 300, 350]"
      },
      {
        "input": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], list2 = [5]",
        "output": "[1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "list1 = [-99, -50, 0, 25, 75, 100], list2 = [-100, -75, -25, -1, 50, 100]",
        "output": "[-100, -99, -75, -50, -25, -1, 0, 25, 50, 75, 100, 100]"
      },
      {
        "input": "list1 = [1,3,5,7,9,11,13,15,17,19], list2 = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 30]"
      },
      {
        "input": "list1 = [2, 4, 6, 8, 10], list2 = [1, 3, 5, 7, 9]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "list1 = [100], list2 = [-100, -50, 0, 50, 75]",
        "output": "[-100, -50, 0, 50, 75, 100]"
      },
      {
        "input": "list1 = [1, 2, 3], list2 = [4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "list1 = [1, 2, 3, 4, 5], list2 = []",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "list1 = [-1,0,1,2,3], list2 = [-3,-2,-1,0,1]",
        "output": "[-3, -2, -1, -1, 0, 0, 1, 1, 2, 3]"
      },
      {
        "input": "list1 = [10,20,30,40,50], list2 = [5,15,25,35,45]",
        "output": "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
      },
      {
        "input": "list1 = [1, 3, 5, 7, 9], list2 = [2, 4, 6, 8, 10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "list1 = [-1, -3, -5, -7, -9], list2 = [-2, -4, -6, -8, -10]",
        "output": "[-2, -4, -6, -8, -10, -1, -3, -5, -7, -9]"
      },
      {
        "input": "list1 = [10, 20, 30], list2 = [5, 15, 25, 35, 45]",
        "output": "[5, 10, 15, 20, 25, 30, 35, 45]"
      },
      {
        "input": "list1 = [-1, 0, 1], list2 = [-2, -1, 0, 1, 2]",
        "output": "[-2, -1, -1, 0, 0, 1, 1, 2]"
      },
      {
        "input": "list1 = [50], list2 = [50, 50, 50, 50, 50]",
        "output": "[50, 50, 50, 50, 50, 50]"
      },
      {
        "input": "list1 = [1, 2, 3], list2 = [1, 2, 3, 4, 5]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 5]"
      },
      {
        "input": "list1 = [50], list2 = [-50, 0, 50, 100]",
        "output": "[-50, 0, 50, 50, 100]"
      },
      {
        "input": "list1 = [-5, -3, -1], list2 = [-4, -2, 0, 2, 4]",
        "output": "[-5, -4, -3, -2, -1, 0, 2, 4]"
      },
      {
        "input": "list1 = [5, 10, 15, 20], list2 = [25, 30, 35, 40, 45, 50]",
        "output": "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
      },
      {
        "input": "list1 = [-99, -50, 0, 25, 75], list2 = [-100, -25, -1, 50, 100]",
        "output": "[-100, -99, -50, -25, -1, 0, 25, 50, 75, 100]"
      },
      {
        "input": "list1 = [-10, -5, 0, 5, 10], list2 = [-20, -15, -10, 0, 15, 20]",
        "output": "[-20, -15, -10, -10, -5, 0, 0, 5, 10, 15, 20]"
      },
      {
        "input": "list1 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], list2 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20]"
      },
      {
        "input": "list1 = [1,3,5,7,9,11,13,15,17,19], list2 = [2,4,6,8,10,12,14,16,18,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "list1 = [0, 0, 0, 0, 0], list2 = [0, 0, 0, 0, 0]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "list1 = [1, 3, 5, 7, 9], list2 = [2, 4, 6, 8, 10, 11, 12]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
      },
      {
        "input": "list1 = [-50, -40, -30, -20, -10], list2 = [-60, -55, -45, -35, -25]",
        "output": "[-60, -55, -50, -45, -40, -35, -30, -25, -20, -10]"
      },
      {
        "input": "list1 = [-3, -2, -1, 0, 1, 2, 3], list2 = [-4, -3, -2, -1, 0, 1, 2, 3, 4]",
        "output": "[-4, -3, -3, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4]"
      },
      {
        "input": "list1 = [0, 0, 0, 0], list2 = [-1, -2, -3, -4]",
        "output": "[-1, -2, -3, -4, 0, 0, 0, 0]"
      },
      {
        "input": "list1 = [-10, -5, 0, 5, 10], list2 = [-20, -15, -10, -5, 0, 5, 10]",
        "output": "[-20, -15, -10, -10, -5, -5, 0, 0, 5, 5, 10, 10]"
      },
      {
        "input": "list1 = [-10, -5, 0, 5, 10], list2 = [-15, -10, -5, 0, 5]",
        "output": "[-15, -10, -10, -5, -5, 0, 0, 5, 5, 10]"
      },
      {
        "input": "list1 = [], list2 = [-50, -25, 0, 25, 50, 75]",
        "output": "[-50, -25, 0, 25, 50, 75]"
      },
      {
        "input": "list1 = [1, 2, 3, 4, 5], list2 = [5, 6, 7, 8, 9]",
        "output": "[1, 2, 3, 4, 5, 5, 6, 7, 8, 9]"
      },
      {
        "input": "list1 = [100,200,300], list2 = [50,150,250,350]",
        "output": "[50, 100, 150, 200, 250, 300, 350]"
      },
      {
        "input": "list1 = [10, 20, 30, 40, 50], list2 = [5, 15, 25, 35, 45]",
        "output": "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
      },
      {
        "input": "list1 = [-1, 0, 3, 10, 20, 30, 40, 50], list2 = [1, 2, 4, 5, 8, 13, 21, 25, 35, 45, 55]",
        "output": "[-1, 0, 1, 2, 3, 4, 5, 8, 10, 13, 20, 21, 25, 30, 35, 40, 45, 50, 55]"
      },
      {
        "input": "list1 = [-20, -10, 0, 10, 20], list2 = [-15, -5, 5, 15, 25]",
        "output": "[-20, -15, -10, -5, 0, 5, 10, 15, 20, 25]"
      },
      {
        "input": "list1 = [1, 3, 5, 7, 9, 11], list2 = [2, 4, 6, 8, 10, 12]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
      },
      {
        "input": "list1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49], list2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]"
      },
      {
        "input": "list1 = [10, 20, 30, 40, 50], list2 = [5, 15, 25, 35, 45, 55]",
        "output": "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]"
      },
      {
        "input": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]"
      },
      {
        "input": "list1 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], list2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "list1 = [1,2,3,4,5,6,7,8,9,10], list2 = [11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "list1 = [-99, -98, -97, -96, -95], list2 = [-94, -93, -92, -91, -90]",
        "output": "[-99, -98, -97, -96, -95, -94, -93, -92, -91, -90]"
      },
      {
        "input": "list1 = [10,20,30,40,50], list2 = [25,35,45,55,65]",
        "output": "[10, 20, 25, 30, 35, 40, 45, 50, 55, 65]"
      },
      {
        "input": "list1 = [100], list2 = [-100]",
        "output": "[-100, 100]"
      },
      {
        "input": "list1 = [1, 4, 7, 10], list2 = [2, 5, 8, 11]",
        "output": "[1, 2, 4, 5, 7, 8, 10, 11]"
      },
      {
        "input": "list1 = [-1,0,1], list2 = [-2,-3,-4,-5,-6,-7,-8,-9,-10]",
        "output": "[-2, -3, -4, -5, -6, -7, -8, -9, -10, -1, 0, 1]"
      },
      {
        "input": "list1 = [50, 60, 70, 80, 90], list2 = [40, 55, 65, 75, 85]",
        "output": "[40, 50, 55, 60, 65, 70, 75, 80, 85, 90]"
      },
      {
        "input": "list1 = [5, 10, 15, 20, 25], list2 = [3, 8, 13, 18, 23]",
        "output": "[3, 5, 8, 10, 13, 15, 18, 20, 23, 25]"
      },
      {
        "input": "list1 = [-1, -2, -3, -4, -5], list2 = [-1, -2, -3, -4, -5]",
        "output": "[-1, -2, -3, -4, -5, -1, -2, -3, -4, -5]"
      },
      {
        "input": "list1 = [-50, -40, -30, -20, -10], list2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[-50, -40, -30, -20, -10, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "list1 = [-10, -20, -30, -40, -50], list2 = [-5, -15, -25, -35, -45]",
        "output": "[-10, -20, -30, -40, -50, -5, -15, -25, -35, -45]"
      }
    ]
  },
  {
    "id": 543,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, return the length of the diameter of the tree.\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.\n\u00a0\nExample 1:\n\n\nInput: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n\nExample 2:\n\nInput: root = [1,2]\nOutput: 1\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-100 <= Node.val <= 100\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "4"
      },
      {
        "input": "root = [4,-7,-3,null,null,-9,-3,9,-7,-4,null,6,null,-6,-6,null,null,0,6,5,null,9,null,null,-1,-4,null,null,null,-2]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,4,5]",
        "output": "3"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5]",
        "output": "4"
      },
      {
        "input": "root = [3,1,4,null,2]",
        "output": "3"
      },
      {
        "input": "root = [1,2,3]",
        "output": "2"
      },
      {
        "input": "root = [1,2,3,4,null,null,5]",
        "output": "4"
      },
      {
        "input": "root = [1,2,null,4,5]",
        "output": "2"
      },
      {
        "input": "root = [1,2]",
        "output": "1"
      },
      {
        "input": "root = [4,-7,-3,null,null,-9,-3,9,-4,null,6,null,-6,-6,null,null,0,6,5,null,9,null,null,-1,-4,null,null,null,-2]",
        "output": "8"
      },
      {
        "input": "root = [4,2,null,3,null,1]",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,null,null,4,5]",
        "output": "3"
      },
      {
        "input": "root = [3,1,2]",
        "output": "2"
      },
      {
        "input": "root = [1]",
        "output": "0"
      },
      {
        "input": "root = [1,null,2,null,3]",
        "output": "2"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,null,4,null,null,5]",
        "output": "1"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "9"
      },
      {
        "input": "root = [1,null,2,3,null,null,4,5,null,null,6,null,7,null,8]",
        "output": "7"
      },
      {
        "input": "root = [1,null,2,3,null,null,4,5,null,null,null,null,null,null,6]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,6,null,null,7]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,null,9,null,10,null,11]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,null,10,11,12,13,14,15,null,null,null,null,16]",
        "output": "8"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "14"
      },
      {
        "input": "root = [1,2,3,4,null,6,7,null,null,8,9,null,null,null,null,10]",
        "output": "6"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,6,7,null,null,8,9]",
        "output": "6"
      },
      {
        "input": "root = [1,null,2,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "8"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]",
        "output": "8"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11]",
        "output": "10"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,null,null,null,null,8]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,null,null,null,4,null,null,null,null,null,5,null,null,null,null,6]",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,6,7,8,9,10,11,12,13]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,6,null,null,7,null,null,8]",
        "output": "6"
      },
      {
        "input": "root = [1,null,2,null,null,null,3,null,null,null,null,4,null,null,null,null,5]",
        "output": "1"
      },
      {
        "input": "root = [1,2,3,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "8"
      },
      {
        "input": "root = [1,2,null,4,null,6,7,8,9]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,null,null,6,7,null,null,8,null,null,9]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,null,null,10,11,null,null,12,13]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,null,7,8,null,null,9,null,null,10,11]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,8,9,null,null,null,null,10,11]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,6,null,7,null,8,null,9]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,null,null,null,9,null,null,null,null,10,null,null,null,null,11]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,null,null,11,null,null,12,null,null,13,null,null,14]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,null,4,null,null,5,6]",
        "output": "4"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,null,null,10,11]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,null,null,null,null,7,null,null,8,null,null,null,null,null,null,9,null,null,10]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,null,4,5,null,null,6,7,null,8,null,null,9]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,null,4,null,null,5,null,null,6]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,null,4,5,6,7,8,9,10,null,null,11,12]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,6,null,null,7,null,8]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,null,null,null,null,null,null,null,4,null,null,null,null,5]",
        "output": "2"
      },
      {
        "input": "root = [1,2,3,null,null,4,null,null,5,null,6,null,null,7,null,null,8,null,9]",
        "output": "5"
      },
      {
        "input": "root = [1,2,null,null,3,null,null,null,4,null,null,null,null,5,null,null,null,null,null,6]",
        "output": "2"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "14"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,null,null,9,null,null,10,null,null,11,null,null,12,null,null,13]",
        "output": "10"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,null,9,null,10,null,11,null,12]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,10,11,null,null,12,13]",
        "output": "7"
      },
      {
        "input": "root = [1,2,null,null,3,null,null,4,null,null,5,null,null,6,null,null,7]",
        "output": "2"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "6"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "14"
      },
      {
        "input": "root = [1,2,null,3,4,null,null,5,6,null,null,7,8,null,null,9,10]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,null,null,7,8,null,null,null,null,9]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,6,7,null,null,null,null,8,9]",
        "output": "5"
      },
      {
        "input": "root = [1,2,null,null,3,null,null,4,null,null,5,null,null,6,null,null,7,null,null,8,null,null,9,null,null,10]",
        "output": "2"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,6,7]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,null,8,9]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,8,9,null,null,null,10,null,null,11,null,null,12]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "8"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,8,null,null,null,9,10,11]",
        "output": "7"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,6,7,8,9,null,null,10]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,null,6,7,8,9,10,11,12,13,14,15]",
        "output": "7"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "9"
      },
      {
        "input": "root = [1,2,null,3,4,5,null,null,6,7,null,null,8,9]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,null,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "11"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,10,11,null,null,null,null,null,12,13]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,null,6,7]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,8,9,10,11,12,13]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,null,null,null,null,null,10,11,12]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13]",
        "output": "11"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,null,null,null,10,11,12,13,14,15]",
        "output": "7"
      },
      {
        "input": "root = [1,null,2,3,null,4,null,5,null,6,null,7]",
        "output": "6"
      }
    ]
  },
  {
    "id": 1791,
    "difficulty": "Easy",
    "tags": [
      "Graph"
    ],
    "problemDescription": "There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.\nYou are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.\n\u00a0\nExample 1:\n\n\nInput: edges = [[1,2],[2,3],[4,2]]\nOutput: 2\nExplanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.\n\nExample 2:\n\nInput: edges = [[1,2],[5,1],[1,3],[1,4]]\nOutput: 1\n\n\u00a0\nConstraints:\n\n3 <= n <= 105\nedges.length == n - 1\nedges[i].length == 2\n1 <= ui, vi <= n\nui != vi\nThe given edges represent a valid star graph.\n\n",
    "starterCode": "class Solution:\n    def findCenter(self, edges: List[List[int]]) -> int:\n        ",
    "testCases": [
      {
        "input": "edges = [[10,20],[10,30],[10,40],[10,50],[10,60]]",
        "output": "10"
      },
      {
        "input": "edges = [[3,1],[1,2],[1,4],[1,5]]",
        "output": "1"
      },
      {
        "input": "edges = [[7,3],[7,4],[7,2],[7,5],[7,6],[7,1]]",
        "output": "7"
      },
      {
        "input": "edges = [[10,5],[10,8],[10,3],[10,1]]",
        "output": "10"
      },
      {
        "input": "edges = [[4,3],[5,3],[2,3],[1,3]]",
        "output": "3"
      },
      {
        "input": "edges = [[1,2],[2,3],[4,2]]",
        "output": "2"
      },
      {
        "input": "edges = [[1,2],[5,1],[1,3],[1,4]]",
        "output": "1"
      },
      {
        "input": "edges = [[3,1],[2,1]]",
        "output": "1"
      },
      {
        "input": "edges = [[3,1],[3,2],[3,4],[3,5]]",
        "output": "3"
      },
      {
        "input": "edges = [[7,4],[7,5],[7,3],[7,1],[7,2]]",
        "output": "7"
      },
      {
        "input": "edges = [[3,5],[3,1],[3,2],[3,6]]",
        "output": "3"
      },
      {
        "input": "edges = [[5,1],[1,2],[1,3],[1,4],[7,1]]",
        "output": "1"
      },
      {
        "input": "edges = [[6,4],[6,5],[6,2],[6,3]]",
        "output": "6"
      },
      {
        "input": "edges = [[10,3],[10,2],[10,5],[10,1],[10,4]]",
        "output": "10"
      },
      {
        "input": "edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15]]",
        "output": "1"
      },
      {
        "input": "edges = [[100000, 1], [100000, 2], [100000, 3], [100000, 4], [100000, 5], [100000, 6], [100000, 7], [100000, 8], [100000, 9], [100000, 10], [100000, 11], [100000, 12], [100000, 13], [100000, 14], [100000, 15]]",
        "output": "100000"
      },
      {
        "input": "edges = [[99999,1],[99999,2],[99999,3],[99999,4],[99999,5],[99999,6],[99999,7],[99999,8],[99999,9],[99999,10],[99999,11],[99999,12],[99999,13],[99999,14],[99999,15],[99999,16],[99999,17],[99999,18],[99999,19],[99999,20]]",
        "output": "99999"
      },
      {
        "input": "edges = [[55555, 1], [55555, 2], [55555, 3], [55555, 4], [55555, 5], [55555, 6], [55555, 7], [55555, 8], [55555, 9], [55555, 10], [55555, 11], [55555, 12], [55555, 13], [55555, 14], [55555, 15], [55555, 16], [55555, 17], [55555, 18], [55555, 19], [55555, 20], [55555, 21], [55555, 22], [55555, 23], [55555, 24], [55555, 25]]",
        "output": "55555"
      },
      {
        "input": "edges = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39], [39, 40], [40, 41], [41, 42], [42, 43], [43, 44], [44, 45], [45, 46], [46, 47], [47, 48], [48, 49], [49, 50], [50, 1]]",
        "output": "2"
      },
      {
        "input": "edges = [[2, 1], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 27], [2, 28], [2, 29], [2, 30], [2, 31], [2, 32], [2, 33], [2, 34], [2, 35], [2, 36], [2, 37], [2, 38], [2, 39], [2, 40], [2, 41], [2, 42], [2, 43], [2, 44], [2, 45], [2, 46], [2, 47], [2, 48], [2, 49], [2, 50], [2, 51], [2, 52], [2, 53], [2, 54], [2, 55], [2, 56], [2, 57], [2, 58], [2, 59], [2, 60]]",
        "output": "2"
      },
      {
        "input": "edges = [[1, 200000], [200000, 2], [200000, 3], [200000, 4], [200000, 5], [200000, 6], [200000, 7], [200000, 8], [200000, 9], [200000, 10], [200000, 11], [200000, 12], [200000, 13], [200000, 14], [200000, 15], [200000, 16], [200000, 17], [200000, 18], [200000, 19], [200000, 20]]",
        "output": "200000"
      },
      {
        "input": "edges = [[10, 100], [100, 11], [100, 12], [100, 13], [100, 14], [100, 15], [100, 16], [100, 17], [100, 18], [100, 19], [100, 20], [100, 21], [100, 22], [100, 23], [100, 24], [100, 25], [100, 26], [100, 27], [100, 28], [100, 29], [100, 30], [100, 31], [100, 32], [100, 33], [100, 34], [100, 35], [100, 36], [100, 37], [100, 38], [100, 39], [100, 40], [100, 41], [100, 42], [100, 43], [100, 44], [100, 45], [100, 46], [100, 47], [100, 48], [100, 49], [100, 50], [100, 51], [100, 52], [100, 53], [100, 54], [100, 55], [100, 56], [100, 57], [100, 58], [100, 59], [100, 60], [100, 61], [100, 62], [100, 63], [100, 64], [100, 65], [100, 66], [100, 67], [100, 68], [100, 69], [100, 70], [100, 71], [100, 72], [100, 73], [100, 74], [100, 75], [100, 76], [100, 77], [100, 78], [100, 79], [100, 80], [100, 81], [100, 82], [100, 83], [100, 84], [100, 85], [100, 86], [100, 87], [100, 88], [100, 89], [100, 90], [100, 91], [100, 92], [100, 93], [100, 94], [100, 95], [100, 96], [100, 97], [100, 98], [100, 99], [100, 100]]",
        "output": "100"
      },
      {
        "input": "edges = [[1000,2],[1000,3],[1000,4],[1000,5],[1000,6],[1000,7],[1000,8],[1000,9],[1000,10],[1000,11],[1000,12],[1000,13],[1000,14],[1000,15],[1000,16],[1000,17],[1000,18],[1000,19],[1000,20],[1000,21],[1000,22],[1000,23],[1000,24],[1000,25],[1000,26],[1000,27],[1000,28],[1000,29],[1000,30]]",
        "output": "1000"
      },
      {
        "input": "edges = [[25000, 24999], [25000, 24998], [25000, 24997], [25000, 24996], [25000, 24995], [25000, 24994], [25000, 24993], [25000, 24992], [25000, 24991], [25000, 24990], [25000, 24989], [25000, 24988], [25000, 24987], [25000, 24986], [25000, 24985], [25000, 24984], [25000, 24983], [25000, 24982], [25000, 24981], [25000, 24980]]",
        "output": "25000"
      },
      {
        "input": "edges = [[500, 250], [500, 125], [500, 375], [500, 625], [500, 875], [500, 150], [500, 300], [500, 450], [500, 600], [500, 750], [500, 900], [500, 275], [500, 325], [500, 375], [500, 425], [500, 475]]",
        "output": "500"
      },
      {
        "input": "edges = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15],[1,16],[1,17],[1,18],[1,19],[1,20],[1,21],[1,22],[1,23],[1,24],[1,25],[1,26],[1,27],[1,28],[1,29],[1,30]]",
        "output": "1"
      },
      {
        "input": "edges = [[99999, 1], [99999, 2], [99999, 3], [99999, 4], [99999, 5], [99999, 6], [99999, 7], [99999, 8], [99999, 9], [99999, 10], [99999, 11], [99999, 12], [99999, 13], [99999, 14], [99999, 15]]",
        "output": "99999"
      },
      {
        "input": "edges = [[99999, 1], [99999, 2], [99999, 3], [99999, 4], [99999, 5], [99999, 6], [99999, 7], [99999, 8], [99999, 9], [99999, 10], [99999, 11], [99999, 12], [99999, 13], [99999, 14], [99999, 15], [99999, 16], [99999, 17], [99999, 18], [99999, 19], [99999, 20], [99999, 21], [99999, 22], [99999, 23], [99999, 24], [99999, 25], [99999, 26], [99999, 27], [99999, 28], [99999, 29], [99999, 30], [99999, 31], [99999, 32], [99999, 33], [99999, 34], [99999, 35], [99999, 36], [99999, 37], [99999, 38], [99999, 39], [99999, 40], [99999, 41], [99999, 42], [99999, 43], [99999, 44], [99999, 45], [99999, 46], [99999, 47], [99999, 48], [99999, 49], [99999, 50]]",
        "output": "99999"
      },
      {
        "input": "edges = [[100000,1],[100000,2],[100000,3],[100000,4],[100000,5],[100000,6],[100000,7],[100000,8],[100000,9],[100000,10],[100000,11],[100000,12],[100000,13],[100000,14],[100000,15],[100000,16],[100000,17],[100000,18],[100000,19],[100000,20]]",
        "output": "100000"
      },
      {
        "input": "edges = [[99,1],[99,2],[99,3],[99,4],[99,5],[99,6],[99,7],[99,8],[99,9],[99,10]]",
        "output": "99"
      },
      {
        "input": "edges = [[1, 99999], [2, 99999], [3, 99999], [4, 99999], [5, 99999], [6, 99999], [7, 99999], [8, 99999], [9, 99999]]",
        "output": "99999"
      },
      {
        "input": "edges = [[1000, 500], [1000, 600], [1000, 700], [1000, 800], [1000, 900], [1000, 200], [1000, 300], [1000, 400], [1000, 100], [1000, 150], [1000, 250], [1000, 350], [1000, 450], [1000, 550], [1000, 650], [1000, 750], [1000, 850], [1000, 950], [1000, 1000], [1000, 1100], [1000, 1200], [1000, 1300], [1000, 1400]]",
        "output": "1000"
      },
      {
        "input": "edges = [[23456,12345],[23456,22345],[23456,32345],[23456,42345],[23456,52345],[23456,62345],[23456,72345],[23456,82345],[23456,92345],[23456,102345]]",
        "output": "23456"
      },
      {
        "input": "edges = [[3, 1], [3, 2], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 20], [3, 21], [3, 22], [3, 23], [3, 24], [3, 25], [3, 26], [3, 27], [3, 28], [3, 29], [3, 30], [3, 31], [3, 32], [3, 33], [3, 34], [3, 35], [3, 36], [3, 37], [3, 38], [3, 39], [3, 40], [3, 41], [3, 42], [3, 43], [3, 44], [3, 45], [3, 46], [3, 47], [3, 48], [3, 49], [3, 50], [3, 51], [3, 52], [3, 53], [3, 54], [3, 55], [3, 56], [3, 57], [3, 58], [3, 59], [3, 60], [3, 61], [3, 62], [3, 63], [3, 64], [3, 65], [3, 66], [3, 67], [3, 68], [3, 69], [3, 70], [3, 71], [3, 72], [3, 73], [3, 74], [3, 75], [3, 76], [3, 77], [3, 78], [3, 79], [3, 80], [3, 81], [3, 82], [3, 83], [3, 84], [3, 85], [3, 86], [3, 87], [3, 88], [3, 89], [3, 90], [3, 91], [3, 92], [3, 93], [3, 94], [3, 95], [3, 96], [3, 97], [3, 98], [3, 99], [3, 100]]",
        "output": "3"
      },
      {
        "input": "edges = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,1]]",
        "output": "2"
      },
      {
        "input": "edges = [[10000, 9999], [10000, 5000], [10000, 2500], [10000, 7500], [10000, 6250], [10000, 8750], [10000, 3125], [10000, 6875], [10000, 1875], [10000, 8125], [10000, 9375], [10000, 1250], [10000, 3750], [10000, 6250], [10000, 8750], [10000, 4375], [10000, 7500], [10000, 21875], [10000, 8125], [10000, 5625]]",
        "output": "10000"
      },
      {
        "input": "edges = [[67890,54321],[67890,23456],[67890,34567],[67890,45678],[67890,56789],[67890,68901],[67890,79012],[67890,80123],[67890,91234],[67890,10234],[67890,11345],[67890,12456],[67890,13567],[67890,14678],[67890,15789],[67890,16890],[67890,17901],[67890,18012],[67890,19123],[67890,20234]]",
        "output": "67890"
      },
      {
        "input": "edges = [[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [1, 27], [1, 28], [1, 29], [1, 30]]",
        "output": "1"
      },
      {
        "input": "edges = [[2, 1], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15]]",
        "output": "2"
      },
      {
        "input": "edges = [[50, 1], [50, 2], [50, 3], [50, 4], [50, 5], [50, 6], [50, 7], [50, 8], [50, 9], [50, 10], [50, 11], [50, 12], [50, 13], [50, 14], [50, 15]]",
        "output": "50"
      },
      {
        "input": "edges = [[50000, 1], [50000, 50001], [50000, 50002], [50000, 50003], [50000, 50004]]",
        "output": "50000"
      },
      {
        "input": "edges = [[100, 50], [100, 25], [100, 75], [100, 20], [100, 80], [100, 90], [100, 10], [100, 40], [100, 60], [100, 30]]",
        "output": "100"
      },
      {
        "input": "edges = [[100,50],[100,99],[100,23],[100,75],[100,1000],[100,10],[100,30],[100,60],[100,40],[100,80]]",
        "output": "100"
      },
      {
        "input": "edges = [[99999, 99998], [99999, 99997], [99999, 99996], [99999, 99995], [99999, 99994], [99999, 99993], [99999, 99992], [99999, 99991], [99999, 99990], [99999, 99989], [99999, 99988], [99999, 99987], [99999, 99986], [99999, 99985], [99999, 99984], [99999, 99983], [99999, 99982], [99999, 99981], [99999, 99980]]",
        "output": "99999"
      },
      {
        "input": "edges = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 1]]",
        "output": "2"
      },
      {
        "input": "edges = [[50000,50001],[50000,50002],[50000,50003],[50000,50004],[50000,50005],[50000,50006],[50000,50007],[50000,50008],[50000,50009],[50000,50010]]",
        "output": "50000"
      },
      {
        "input": "edges = [[50, 1], [50, 51], [50, 52], [50, 53], [50, 54], [50, 55], [50, 56], [50, 57], [50, 58], [50, 59], [50, 60], [50, 61], [50, 62], [50, 63], [50, 64], [50, 65]]",
        "output": "50"
      },
      {
        "input": "edges = [[50000, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [1, 27], [1, 28], [1, 29], [1, 30], [1, 31], [1, 32], [1, 33], [1, 34], [1, 35], [1, 36], [1, 37], [1, 38], [1, 39], [1, 40], [1, 41], [1, 42], [1, 43], [1, 44], [1, 45], [1, 46], [1, 47], [1, 48], [1, 49], [1, 50]]",
        "output": "1"
      },
      {
        "input": "edges = [[50, 1], [50, 2], [50, 3], [50, 4], [50, 5], [50, 6], [50, 7], [50, 8], [50, 9], [50, 10], [50, 11], [50, 12], [50, 13], [50, 14], [50, 15], [50, 16], [50, 17], [50, 18], [50, 19], [50, 20]]",
        "output": "50"
      },
      {
        "input": "edges = [[100000, 99999], [100000, 99998], [100000, 99997], [100000, 99996], [100000, 99995], [100000, 1], [100000, 2], [100000, 3], [100000, 4]]",
        "output": "100000"
      },
      {
        "input": "edges = [[50000, 1], [50000, 2], [50000, 3], [50000, 4], [50000, 5], [50000, 6], [50000, 7], [50000, 8], [50000, 9], [50000, 10]]",
        "output": "50000"
      },
      {
        "input": "edges = [[500,1000],[1000,1500],[1000,2000],[1000,3000],[1000,4000],[1000,5000],[1000,6000],[1000,7000],[1000,8000],[1000,9000],[1000,11000]]",
        "output": "1000"
      },
      {
        "input": "edges = [[100000,99999],[100000,99998],[100000,99997],[100000,1]]",
        "output": "100000"
      },
      {
        "input": "edges = [[30, 1], [30, 2], [30, 3], [30, 4], [30, 5], [30, 6], [30, 7], [30, 8], [30, 9], [30, 10], [30, 11], [30, 12], [30, 13], [30, 14], [30, 15], [30, 16], [30, 17], [30, 18], [30, 19], [30, 20], [30, 21], [30, 22], [30, 23], [30, 24], [30, 25], [30, 26], [30, 27], [30, 28], [30, 29]]",
        "output": "30"
      },
      {
        "input": "edges = [[200000, 1], [200000, 2], [200000, 3], [200000, 4], [200000, 5], [200000, 6], [200000, 7], [200000, 8], [200000, 9], [200000, 10], [200000, 11], [200000, 12], [200000, 13], [200000, 14], [200000, 15], [200000, 16], [200000, 17], [200000, 18], [200000, 19], [200000, 20], [200000, 21], [200000, 22], [200000, 23], [200000, 24], [200000, 25], [200000, 26], [200000, 27], [200000, 28], [200000, 29], [200000, 30], [200000, 31], [200000, 32], [200000, 33], [200000, 34], [200000, 35], [200000, 36], [200000, 37], [200000, 38], [200000, 39], [200000, 40]]",
        "output": "200000"
      },
      {
        "input": "edges = [[2,1],[2,4],[3,2],[2,6],[5,2],[7,2],[8,2],[9,2],[10,2]]",
        "output": "2"
      },
      {
        "input": "edges = [[100, 1], [100, 2], [100, 3], [100, 4], [100, 5], [100, 6], [100, 7], [100, 8], [100, 9], [100, 10], [100, 11], [100, 12], [100, 13], [100, 14], [100, 15], [100, 16], [100, 17], [100, 18], [100, 19], [100, 20], [100, 21], [100, 22], [100, 23], [100, 24], [100, 25], [100, 26], [100, 27], [100, 28], [100, 29], [100, 30], [100, 31], [100, 32], [100, 33], [100, 34], [100, 35], [100, 36], [100, 37], [100, 38], [100, 39], [100, 40], [100, 41], [100, 42], [100, 43], [100, 44], [100, 45], [100, 46], [100, 47], [100, 48], [100, 49], [100, 50]]",
        "output": "100"
      },
      {
        "input": "edges = [[100000, 1], [100000, 2], [100000, 3], [100000, 4], [100000, 5], [100000, 6], [100000, 7], [100000, 8], [100000, 9], [100000, 10]]",
        "output": "100000"
      }
    ]
  },
  {
    "id": 1196,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array",
      "Sorting"
    ],
    "problemDescription": "You have some apples and a basket that can carry up to 5000 units of weight.\nGiven an integer array weight where weight[i] is the weight of the ith apple, return the maximum number of apples you can put in the basket.\n\u00a0\nExample 1:\n\nInput: weight = [100,200,150,1000]\nOutput: 4\nExplanation: All 4 apples can be carried by the basket since their sum of weights is 1450.\n\nExample 2:\n\nInput: weight = [900,950,800,1000,700,800]\nOutput: 5\nExplanation: The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them.\n\n\u00a0\nConstraints:\n\n1 <= weight.length <= 103\n1 <= weight[i] <= 103\n\n",
    "starterCode": "class Solution:\n    def maxNumberOfApples(self, weight: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "weight = [1000,1000,1000,1000,1000]",
        "output": "5"
      },
      {
        "input": "weight = [1000,1000,1000,1000,1000,1000,1000]",
        "output": "5"
      },
      {
        "input": "weight = [1000]*5 + [1]",
        "output": "Error: Solution.maxNumberOfApples() missing 1 required positional argument: 'weight'"
      },
      {
        "input": "weight = [1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000]",
        "output": "5"
      },
      {
        "input": "weight = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "weight = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "30"
      },
      {
        "input": "weight = [900,950,800,1000,700,800]",
        "output": "5"
      },
      {
        "input": "weight = [100,200,150,1000]",
        "output": "4"
      },
      {
        "input": "weight = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "weight = [500,500,500,500,500,500,500,500,500,500]",
        "output": "10"
      },
      {
        "input": "weight = [2500, 1250, 625, 312, 156, 78, 39, 19, 9, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "19"
      },
      {
        "input": "weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "25"
      },
      {
        "input": "weight = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500]",
        "output": "10"
      },
      {
        "input": "weight = [499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480]",
        "output": "10"
      },
      {
        "input": "weight = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125]",
        "output": "25"
      },
      {
        "input": "weight = [250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250]",
        "output": "20"
      },
      {
        "input": "weight = [300, 200, 300, 200, 300, 200, 300, 200, 300, 200, 300, 200, 300, 200, 300, 200, 300, 200, 300, 200, 300, 200, 300, 200]",
        "output": "20"
      },
      {
        "input": "weight = [999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 1]",
        "output": "6"
      },
      {
        "input": "weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "50"
      },
      {
        "input": "weight = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]",
        "output": "25"
      },
      {
        "input": "weight = [500, 1000, 1500, 2000, 2500, 500, 1000]",
        "output": "5"
      },
      {
        "input": "weight = [300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300]",
        "output": "15"
      },
      {
        "input": "weight = [103, 205, 175, 1003, 997, 985, 875, 850, 780, 740, 660, 580, 500, 450, 400, 350, 300, 250, 200, 150]",
        "output": "13"
      },
      {
        "input": "weight = [150, 250, 200, 300, 100, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "11"
      },
      {
        "input": "weight = [1, 1000, 2, 999, 3, 998, 4, 997, 5, 996, 6, 995, 7, 994, 8, 993, 9, 992, 10, 991, 11, 990, 12, 989, 13, 988, 14, 987, 15, 986, 16, 985, 17, 984, 18, 983, 19, 982, 20, 981, 21, 980, 22, 979, 23, 978, 24, 977, 25, 976, 26, 975, 27, 974, 28, 973, 29, 972, 30, 971, 31, 970, 32, 969, 33, 968, 34, 967, 35, 966, 36, 965, 37, 964, 38, 963, 39, 962, 40, 961, 41, 960, 42, 959, 43, 958, 44, 957, 45, 956, 46, 955, 47, 954, 48, 953, 49, 952, 50, 951]",
        "output": "53"
      },
      {
        "input": "weight = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500]",
        "output": "10"
      },
      {
        "input": "weight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000]",
        "output": "9"
      },
      {
        "input": "weight = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "28"
      },
      {
        "input": "weight = [333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333]",
        "output": "15"
      },
      {
        "input": "weight = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500]",
        "output": "10"
      },
      {
        "input": "weight = [499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499]",
        "output": "10"
      },
      {
        "input": "weight = [999, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "20"
      },
      {
        "input": "weight = [250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250]",
        "output": "20"
      },
      {
        "input": "weight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400]",
        "output": "9"
      },
      {
        "input": "weight = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]",
        "output": "12"
      },
      {
        "input": "weight = [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975]",
        "output": "5"
      },
      {
        "input": "weight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "9"
      },
      {
        "input": "weight = [999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999]",
        "output": "5"
      },
      {
        "input": "weight = [450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450]",
        "output": "11"
      },
      {
        "input": "weight = [300, 200, 100, 50, 25, 10, 5, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "20"
      },
      {
        "input": "weight = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "50"
      },
      {
        "input": "weight = [900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100, 900, 100]",
        "output": "21"
      },
      {
        "input": "weight = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1, 1000, 500, 250, 125, 62, 31, 15, 7, 3, 1, 1000, 500, 250, 125, 62, 31, 15, 7, 3, 1]",
        "output": "29"
      },
      {
        "input": "weight = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 50, 25, 10, 5, 2, 1]",
        "output": "15"
      },
      {
        "input": "weight = [1, 10, 100, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1]",
        "output": "8"
      },
      {
        "input": "weight = [999, 1, 998, 2, 997, 3, 996, 4, 995, 5, 994, 6, 993, 7, 992, 8, 991, 9, 990, 10, 989, 11, 988, 12, 987, 13, 986, 14, 985, 15, 984, 16, 983, 17, 982, 18, 981, 19, 980, 20, 979, 21, 978, 22, 977, 23, 976, 24, 975, 25, 974, 26, 973, 27, 972, 28, 971, 29, 970, 30, 969, 31, 968, 32, 967, 33, 966, 34, 965, 35, 964, 36, 963, 37, 962, 38, 961, 39, 960, 40]",
        "output": "44"
      },
      {
        "input": "weight = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]",
        "output": "9"
      },
      {
        "input": "weight = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500]",
        "output": "10"
      },
      {
        "input": "weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "99"
      },
      {
        "input": "weight = [250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250]",
        "output": "20"
      },
      {
        "input": "weight = [499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475]",
        "output": "10"
      },
      {
        "input": "weight = [999, 1, 998, 2, 997, 3, 996, 4, 995, 5]",
        "output": "10"
      },
      {
        "input": "weight = [1000, 2000, 3000, 4000, 5000, 1000, 2000, 3000, 4000, 5000, 1000, 2000, 3000, 4000, 5000]",
        "output": "4"
      },
      {
        "input": "weight = [1000, 100, 200, 300, 400, 500, 600, 700, 800, 900, 100, 200, 300, 400, 500, 600, 700, 800, 900, 100]",
        "output": "14"
      },
      {
        "input": "weight = [500, 400, 300, 200, 100, 500, 400, 300, 200, 100, 500, 400, 300, 200, 100, 500, 400, 300, 200, 100]",
        "output": "18"
      },
      {
        "input": "weight = [1, 10, 100, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]",
        "output": "7"
      },
      {
        "input": "weight = [5000, 5000, 5000, 5000, 5000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "15"
      },
      {
        "input": "weight = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500]",
        "output": "10"
      },
      {
        "input": "weight = [500, 1000, 1500, 500, 300, 200, 700, 800, 1200, 900, 1100, 600, 400, 1300, 1400, 1600, 1700, 1800, 1900, 2000]",
        "output": "9"
      },
      {
        "input": "weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "30"
      }
    ]
  },
  {
    "id": 2529,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Binary Search",
      "Counting"
    ],
    "problemDescription": "Given an array nums sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers.\n\nIn other words, if the number of positive integers in nums is pos and the number of negative integers is neg, then return the maximum of pos and neg.\n\nNote that 0 is neither positive nor negative.\n\u00a0\nExample 1:\n\nInput: nums = [-2,-1,-1,1,2,3]\nOutput: 3\nExplanation: There are 3 positive integers and 3 negative integers. The maximum count among them is 3.\n\nExample 2:\n\nInput: nums = [-3,-2,-1,0,0,1,2]\nOutput: 3\nExplanation: There are 2 positive integers and 3 negative integers. The maximum count among them is 3.\n\nExample 3:\n\nInput: nums = [5,20,66,1314]\nOutput: 4\nExplanation: There are 4 positive integers and 0 negative integers. The maximum count among them is 4.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 2000\n-2000 <= nums[i] <= 2000\nnums is sorted in a non-decreasing order.\n\n\u00a0\nFollow up: Can you solve the problem in O(log(n)) time complexity?\n",
    "starterCode": "class Solution:\n    def maximumCount(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [-2,-1,-1,1,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0]",
        "output": "10"
      },
      {
        "input": "nums = [5,20,66,1314]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [-1000,-500,-250,-100,-50,-25,-10,-5,-2,-1,0,1,2,5,10,25,50,100,250,500,1000]",
        "output": "10"
      },
      {
        "input": "nums = [-10,-5,-1,-1,0,0,1,2,3,5,10]",
        "output": "5"
      },
      {
        "input": "nums = [-5,-3,-1,0,2,4,6]",
        "output": "3"
      },
      {
        "input": "nums = [-5,-4,-3,-2,-1]",
        "output": "5"
      },
      {
        "input": "nums = [0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]",
        "output": "10"
      },
      {
        "input": "nums = [-5,-3,-1,0,1,2,4]",
        "output": "3"
      },
      {
        "input": "nums = [-1000,-500,-100,-50,-10,-5,-1,0,1,5,10,50,100,500,1000]",
        "output": "7"
      },
      {
        "input": "nums = [0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [-1000, -500, 0, 500, 1000]",
        "output": "2"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [-3,-2,-1,0,0,1,2]",
        "output": "3"
      },
      {
        "input": "nums = [-10,-5,-1,0,1,5,10]",
        "output": "3"
      },
      {
        "input": "nums = [-2000,-1000,-500,-250,-100,-50,-25,-10,-5,-2,-1,0,1,2,5,10,25,50,100,250,500,1000,1500,2000]",
        "output": "12"
      },
      {
        "input": "nums = [-5,-4,-3,0,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [-10,-5,-1,-1,0,0,1,2,3,5]",
        "output": "4"
      },
      {
        "input": "nums = [-1, 0, 1]",
        "output": "1"
      },
      {
        "input": "nums = [-1,0,1]",
        "output": "1"
      },
      {
        "input": "nums = [-2,-2,-2,0,1,1,1]",
        "output": "3"
      },
      {
        "input": "nums = [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]",
        "output": "1"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "47"
      },
      {
        "input": "nums = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [-2000, -1999, -1998, -1997, -1996, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "15"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5]",
        "output": "10"
      },
      {
        "input": "nums = [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1]",
        "output": "20"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "50"
      },
      {
        "input": "nums = [-2000, -1500, -1000, -500, -250, -125, -62, -31, -15, -7, -3, -1, 0, 1, 3, 7, 15, 31, 62, 125, 250, 500, 1000, 1500, 2000]",
        "output": "12"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]",
        "output": "1"
      },
      {
        "input": "nums = [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "10"
      },
      {
        "input": "nums = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "10"
      },
      {
        "input": "nums = [-5,-4,-3,-2,-1,0,0,0,0,0,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [-1500, -1000, -500, -100, -10, -1, 0, 1, 10, 100, 500, 1000, 1500]",
        "output": "6"
      },
      {
        "input": "nums = [-100, -50, -25, -10, -5, 0, 5, 10, 25, 50, 100]",
        "output": "5"
      },
      {
        "input": "nums = [-100, -50, -25, -10, -5, 0, 5, 10, 25, 50, 100, 150, 175, 190, 195, 200]",
        "output": "10"
      },
      {
        "input": "nums = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "10"
      },
      {
        "input": "nums = [-1000, -500, -100, -50, -10, -5, -1, 0, 1, 5, 10, 50, 100, 500, 1000]",
        "output": "7"
      },
      {
        "input": "nums = [-1500, -1250, -1000, -750, -500, -250, 0, 250, 500, 750, 1000, 1250, 1500]",
        "output": "6"
      },
      {
        "input": "nums = [-2000,0,2000]",
        "output": "1"
      },
      {
        "input": "nums = [-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, 0, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "51"
      },
      {
        "input": "nums = [-1000,-500,-250,-125,-62,-31,-15,-7,-3,-1,0,0,0,0,0,0,1,3,7,15,31,62,125,250,500,1000]",
        "output": "10"
      },
      {
        "input": "nums = [-100, -99, -98, -97, -96, -95, 0, 95, 96, 97, 98, 99, 100]",
        "output": "6"
      },
      {
        "input": "nums = [-1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]",
        "output": "5"
      },
      {
        "input": "nums = [-1000, -500, -250, -100, -50, -25, -10, -5, -2, -1, 0, 1, 2, 5, 10, 25, 50, 100, 250, 500, 1000]",
        "output": "10"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [-2000,-1999,-1998,0,0,0,1999,2000]",
        "output": "3"
      },
      {
        "input": "nums = [-1000,-999,-998,-997,-996,-995,-994,-993,-992,-991,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [-1000,-900,-800,-700,-600,-500,-400,-300,-200,-100,0,100,200,300,400,500,600,700,800,900,1000]",
        "output": "10"
      },
      {
        "input": "nums = [-2000, -1500, -1000, -750, -500, -250, 0, 250, 500, 750, 1000, 1500, 2000]",
        "output": "6"
      },
      {
        "input": "nums = [-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50]",
        "output": "5"
      },
      {
        "input": "nums = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1]",
        "output": "10"
      },
      {
        "input": "nums = [-1000,0,1000]",
        "output": "1"
      },
      {
        "input": "nums = [-1, 0, 0, 0, 0, 0, 0, 1]",
        "output": "1"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "nums = [-1000,-500,-250,-125,-62,-31,-15,-7,-3,-1,0,0,1,3,7,15,31,62,125,250,500,1000]",
        "output": "10"
      },
      {
        "input": "nums = [-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2]",
        "output": "10"
      },
      {
        "input": "nums = [-2000,-1999,-1998,-1997,-1996,-1995,-1994,-1993,-1992,-1991,-1990,-1989,-1988,-1987,-1986,-1985,-1984,-1983,-1982,-1981,-1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000]",
        "output": "21"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "nums = [-500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500]",
        "output": "5"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "10"
      },
      {
        "input": "nums = [-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "100"
      },
      {
        "input": "nums = [-1000, -500, -250, -125, -62, -31, -15, -7, -3, -1, 0, 1, 3, 7, 15, 31, 62, 125, 250, 500, 1000]",
        "output": "10"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "17"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [-2000, -1500, -1000, -500, -1, 0, 1, 500, 1000, 1500, 2000]",
        "output": "5"
      },
      {
        "input": "nums = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]",
        "output": "10"
      },
      {
        "input": "nums = [-1000,-500,-250,-125,-62,-31,-15,-7,-3,-1,0,0,0,0,0,0,0,0,0,0,1,3,7,15,31,62,125,250,500,1000]",
        "output": "10"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [-2000, -1500, -1000, -500, -100, -50, -10, -5, -2, -1, 0, 1, 2, 5, 10, 50, 100, 500, 1000, 1500, 2000]",
        "output": "10"
      },
      {
        "input": "nums = [-500,-250,-100,-50,-25,-10,0,10,25,50,100,250,500]",
        "output": "6"
      },
      {
        "input": "nums = [-2000, -1999, -1998, -1997, 1998, 1999, 2000]",
        "output": "4"
      },
      {
        "input": "nums = [-1999, -1998, -1997, -1996, -1995, 0, 1995, 1996, 1997, 1998, 1999]",
        "output": "5"
      },
      {
        "input": "nums = [-2000, -1999, -1998, -1997, -1996, -1995, -1994, -1993, -1992, -1991, -1990, -1989, -1988, -1987, -1986, -1985, -1984, -1983, -1982, -1981, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "30"
      },
      {
        "input": "nums = [-1000,-500,-250,-125,-62,-31,-15,-7,-3,-1,0,1,3,7,15,31,62,125,250,500,1000]",
        "output": "10"
      },
      {
        "input": "nums = [-2000,-1999,-1998,-1997,-1996,-1995,-1994,-1993,-1992,-1991,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [-2000, -2000, -1000, -500, 0, 0, 0, 0, 0, 0, 500, 1000, 2000, 2000, 2000, 2000, 2000, 2000]",
        "output": "8"
      },
      {
        "input": "nums = [-2000, -1999, -1998, -1000, -1, 0, 1, 1000, 1999, 2000]",
        "output": "5"
      },
      {
        "input": "nums = [-2000,-1500,-1000,-500,-250,-100,-50,-25,-10,-5,-1,0,1,5,10,25,50,100,250,500,1000,1500,2000]",
        "output": "11"
      },
      {
        "input": "nums = [-50,-25,-10,-5,-1,0,1,5,10,25,50,100,150,200,250,300,350,400,450,500]",
        "output": "14"
      },
      {
        "input": "nums = [-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, 0, 1, 2, 3, 4, 5]",
        "output": "11"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [-2000, -1999, -1998, -1997, -1996, -1995, -1994, -1993, -1992, -1991, -1990, -1989, -1988, -1987, -1986, -1985, -1984, -1983, -1982, -1981, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000]",
        "output": "20"
      },
      {
        "input": "nums = [-2000,-1500,-1000,-500,0,500,1000,1500,2000]",
        "output": "4"
      },
      {
        "input": "nums = [-15,-10,-5,0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]",
        "output": "20"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]",
        "output": "10"
      },
      {
        "input": "nums = [-2000,-1500,-1000,-500,-250,-100,-50,-25,-10,-5,-1,0,1,5,10,25,50,100,250,500,1000,1500,2000,2000,2000,2000,2000]",
        "output": "15"
      },
      {
        "input": "nums = [-2000,-1999,-1998,-1997,-1996,-1995,-1994,-1993,-1992,-1991,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000]",
        "output": "10"
      },
      {
        "input": "nums = [-1000,-999,-998,-997,0,0,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1]",
        "output": "5"
      }
    ]
  },
  {
    "id": 1614,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "String"
    ],
    "problemDescription": "Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.\n\u00a0\nExample 1:\n\nInput: s = \"(1+(2*3)+((8)/4))+1\"\nOutput: 3\nExplanation:\nDigit 8 is inside of 3 nested parentheses in the string.\n\nExample 2:\n\nInput: s = \"(1)+((2))+(((3)))\"\nOutput: 3\nExplanation:\nDigit 3 is inside of 3 nested parentheses in the string.\n\nExample 3:\n\nInput: s = \"()(())((()()))\"\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 100\ns consists of digits 0-9 and characters '+', '-', '*', '/', '(', and ')'.\nIt is guaranteed that parentheses expression s is a VPS.\n\n",
    "starterCode": "class Solution:\n    def maxDepth(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"(1+(2*3)+((8)/4))+1\"",
        "output": "3"
      },
      {
        "input": "s = \"(a+(b*c)+((d/e)+f))\"",
        "output": "3"
      },
      {
        "input": "s = \"()()()\"",
        "output": "1"
      },
      {
        "input": "s = \"(a+b)+((c*d)+e)\"",
        "output": "2"
      },
      {
        "input": "s = \"(1+2)\"",
        "output": "1"
      },
      {
        "input": "s = \"1+(2*3)\"",
        "output": "1"
      },
      {
        "input": "s = \"\"",
        "output": "0"
      },
      {
        "input": "s = \"(())\"",
        "output": "2"
      },
      {
        "input": "s = \"((1+3)*(2-4))\"",
        "output": "2"
      },
      {
        "input": "s = \"\"\"",
        "output": "Error: Solution.maxDepth() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"(1)\"",
        "output": "1"
      },
      {
        "input": "s = \"((())()())\"",
        "output": "3"
      },
      {
        "input": "s = \"((1+2)*3/(4-5))\"",
        "output": "2"
      },
      {
        "input": "s = \"(1)+((2))+(((3)))\"",
        "output": "3"
      },
      {
        "input": "s = \"()(())((()()))\"",
        "output": "3"
      },
      {
        "input": "s = \"()\"",
        "output": "1"
      },
      {
        "input": "s = \"(a+b+c)*(d/e/f)+((g-(h*i))+j)\"",
        "output": "3"
      },
      {
        "input": "s = \"(a)\"",
        "output": "1"
      },
      {
        "input": "s = \"((()))\"",
        "output": "3"
      },
      {
        "input": "s = \"((a+b)*c)+(((d+e)*f)+g)\"",
        "output": "3"
      },
      {
        "input": "s = \"(1+(2*(((3+4)*5)+(6/(7*((8-9)+10))))))\"",
        "output": "7"
      },
      {
        "input": "s = \"(a+(b+(c+(d+(e+(f+(g+(h+(i+(j+(k+(l+(m+(n+(o+(p+(q+(r+(s+(t+(u+(v+(w+(x+(y+(z+(a+b))))))))))))))))))))))))))\"",
        "output": "27"
      },
      {
        "input": "s = \"(((((1+2)*(3+4))-((5+6)*(7+8)))+(((9+0)*(1+2))-((3+4)*(5+6))))\"",
        "output": "5"
      },
      {
        "input": "s = \"((a+(b*c))+((d+e)/(f-g)))+((h*(i-j)))\"",
        "output": "3"
      },
      {
        "input": "s = \"((a+b)+(((c+d)+((e+f)+((g+h)+((i+j)+((k+l)+((m+n)+((o+p)+((q+r)+((s+t)+u))))))))))\"",
        "output": "12"
      },
      {
        "input": "s = \"((x+y)+((z+w)*((a+b)*(c+d))))\"",
        "output": "4"
      },
      {
        "input": "s = \"(((a+b)+((c+d)*(e+f)))+((g-h)*((i+j)/(k-l))))\"",
        "output": "4"
      },
      {
        "input": "s = \"(1+(((2+((3+((4+((5+((6+((7+((8+((9+(10)))))))))))))))))))\"",
        "output": "19"
      },
      {
        "input": "s = \"(((a+b)+(c*d))+(((e-f)-(g*h)))+((i+j)*(k+l)))\"",
        "output": "4"
      },
      {
        "input": "s = \"(x+(y*(z+(w/(v+(u+((t)+s))))))\"",
        "output": "8"
      },
      {
        "input": "s = \"(((a+b)+c)+((d+e)+f))+(((g+h)+i)+(j+(k+l)))\"",
        "output": "3"
      },
      {
        "input": "s = \"(a+(b*(c+(d/(e+f)+g)+h)+i)\"",
        "output": "5"
      },
      {
        "input": "s = \"((a+b)+(c*(d+(e/(f+(g+(h+(i+(j))))))))\"",
        "output": "9"
      },
      {
        "input": "s = \"(1+(2*(3+(4*(5+(6+(7*(8+(9*(10)))))))))\"",
        "output": "10"
      },
      {
        "input": "s = \"(((((((a+b)*c)+d)+e)+f)+g)+h)\"",
        "output": "7"
      },
      {
        "input": "s = \"(1+(2*(3+(4*(5+(6+(7+(8+(9))))))))\"",
        "output": "9"
      },
      {
        "input": "s = \"(((a+(b*c))+((d+(e*f))+(g+(h*i))))+((j+(k*l))+((m+(n*o))+(p+(q+(r+(s+t))))))\"",
        "output": "7"
      },
      {
        "input": "s = \"(1+(2*((3+4)*(5+6)*((7+8)*(9+10))))+11)\"",
        "output": "5"
      },
      {
        "input": "s = \"((a+(b*(c+(d*(e+f)))))+(((g-h)+(i-j))*((k-l)+(m*n))))\"",
        "output": "6"
      },
      {
        "input": "s = \"((a+b)*((c-d)+e))+((f+(g/h))-((i*j)))\"",
        "output": "3"
      },
      {
        "input": "s = \"(1+((2+((3+((4+((5+6)+7))+8))+9))+10)+11\"",
        "output": "9"
      },
      {
        "input": "s = \"((a+b)+(((c+d)+((e+f)+((g+h)*(i+j))))*(k+l)))\"",
        "output": "6"
      },
      {
        "input": "s = \"((a+(b*c))+(d/((e+f)*(g-h))))\"",
        "output": "4"
      },
      {
        "input": "s = \"(((((x+(y*z))+(w*((a+b)*c)))+((d+e)+((f*g)+((h+i)+((j+k)*l)))))\"",
        "output": "8"
      },
      {
        "input": "s = \"((x+(y*z))+((u-(v*w))+(((p+q)*r)/s)))\"",
        "output": "5"
      },
      {
        "input": "s = \"(a+(b*(c+d)))+((e+f)*((g+h)*(i+j)))+(((k+l)*(m+n))+(o+(p*(q+r))))\"",
        "output": "4"
      },
      {
        "input": "s = \"(a+(b*(c+d)))+((e/f)-(g*h))\"",
        "output": "3"
      },
      {
        "input": "s = \"((1+(2*(3+(4*(5+(6*(7+(8*(9))))))))+10)\"",
        "output": "10"
      },
      {
        "input": "s = \"(a+(b*(c+d))+e+(f/(g-h)))\"",
        "output": "3"
      },
      {
        "input": "s = \"(((((1+2)*3)+4)*5)+((6+(7*(8+9)))/10))\"",
        "output": "5"
      },
      {
        "input": "s = \"(((((a+(b+(c+(d+(e+(f+(g+(h+(i+(j+(k+(l+(m+(n+(o+p))))))))))))+q)+r)+s)+t)+u)+v\"",
        "output": "19"
      },
      {
        "input": "s = \"((a+b)+((c+d)+((e+f)+((g+h)+((i+j)+((k+l)+((m+n)+((o+p)+((q+r)+((s+t)+((u+v)+((w+x)+((y+z))))))))))))\"",
        "output": "14"
      },
      {
        "input": "s = \"((((a+b)+((c+d)*(e+f)))+((g+h)+((i+j)*(k+l))))+(m+(n*(o+p))))\"",
        "output": "5"
      },
      {
        "input": "s = \"((((a+b)*c)+((d+e)*f))+(((g+h)*i)+((j+k)*l)))+((((m+n)*o)+((p+q)*r))+(((s+t)*u)+((v+w)*x))))\"",
        "output": "4"
      },
      {
        "input": "s = \"(1+(2+(3+(4+(5+(6+(7+(8+(9))))))))\"",
        "output": "9"
      },
      {
        "input": "s = \"(((1+2)*3)+((4+5)*(6/7)))+(((8+9)*((10-11)/12)))+13\"",
        "output": "4"
      },
      {
        "input": "s = \"((x+(y*((z+w)*v)))+(((u-t)-s)+(((r-q)+(p-o))*(n-m))))\"",
        "output": "5"
      },
      {
        "input": "s = \"(1+((2*((3+4)*(5-6)))/(7+(8*(9-10)))))\"",
        "output": "5"
      },
      {
        "input": "s = \"(a+(b*(c+d)))+((e+f)/(g-h))\"",
        "output": "3"
      },
      {
        "input": "s = \"(1+((2+3)*(4/5)))+((6-(7+8))*(((9/10)-11)+(12*13)))\"",
        "output": "4"
      },
      {
        "input": "s = \"((1)+((2)+(((3)+((4)+(5)))+(6))))\"",
        "output": "6"
      },
      {
        "input": "s = \"((1+2)*((3/4)-5)+((6*7)+8))\"",
        "output": "3"
      },
      {
        "input": "s = \"(a+(b+(c+(d+(e+(f+(g+(h+(i+(j+(k+(l+(m+(n+(o+p))))))))))))+q)+r)+s\"",
        "output": "15"
      },
      {
        "input": "s = \"((x+(y*z))+((u-(v*w))+(((p+q)*r)/s)))+((t+(u*v))+(((w+x)*y)/z))\"",
        "output": "5"
      },
      {
        "input": "s = \"((1+2)*((3+4)*((5+6)*((7+8)*((9+0))))))\"",
        "output": "6"
      },
      {
        "input": "s = \"(a+((b+((c+((d+e)*f))*g))*h))\"",
        "output": "7"
      },
      {
        "input": "s = \"(((((1+2)+3)+4)+5)+6)+7\"",
        "output": "5"
      },
      {
        "input": "s = \"((a+(b+(c+(d+(e+(f+(g+(h+(i+(j+(k+(l+(m+(n+(o+(p+(q+(r+(s+(t+(u+(v+(w+(x+(y+(z*1))))))))))))))))))))))))\"",
        "output": "27"
      },
      {
        "input": "s = \"(a+(b*(c+(d*(e+(f*(g+(h*(i+(j)))))))))+(k+(l*(m+(n*(o+(p*(q+(r*(s+(t))))))))))\"",
        "output": "11"
      },
      {
        "input": "s = \"(((((1+2)*3)+4)*5)+6)\"",
        "output": "5"
      },
      {
        "input": "s = \"(((a+b)+((c+d)*(e/f)))+(((g-h)+(i/j))*((k+l)*(m-n))))\"",
        "output": "4"
      },
      {
        "input": "s = \"((1+((2+3)*4))+(((5-6)+7)+((8+9)*10)))+(((11+(12*13))+14)+15)\"",
        "output": "4"
      },
      {
        "input": "s = \"(a+((b+c)*(d+((e+f)*(g+(h+i)))))+((j-k)*((l-m)+((n-o)*(p+((q-r)+s)))))\"",
        "output": "7"
      },
      {
        "input": "s = \"(1+(2*(3+(4*(5+(6+(7+(8+(9+0))))))))\"",
        "output": "9"
      },
      {
        "input": "s = \"((1+2)*((3+(4*(5+(6/7))))+((8-(9*10))+((11*12)+((13/14)+15))))\"",
        "output": "6"
      },
      {
        "input": "s = \"1+((2+(3*(4+5)))/6)+(((7-8)*9)/10)\"",
        "output": "4"
      },
      {
        "input": "s = \"((1+(2+(3+(4+(5+(6+(7+(8+(9+(10+(11+(12+(13+(14+(15+(16+(17+(18+(19+(20+(21+(22+(23+(24+(25+(26+(27+(28+(29+(30)))))))))))))))))))))))))+31)+32)+33\"",
        "output": "31"
      },
      {
        "input": "s = \"(a+(b+(c+(d+(e+(f+(g+(h+(i+(j)))))))))\"",
        "output": "10"
      },
      {
        "input": "s = \"(((((a+b)+(c*d))-(e/f))*g)+(h-(i+j)))\"",
        "output": "5"
      },
      {
        "input": "s = \"(((((1*2)+3)-4)+((5-6)*7))+8)+((9+((10-11)+12))+13)+14)",
        "output": "Error: Solution.maxDepth() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"(((a+(b*c))+((d+(e*f))+((g+(h*i))+((j+(k*l))+((m+(n*o))+((p+(q*r))+((s+(t*u))+((v+(w*x))+((y+(z*1))+2))))))))\"",
        "output": "12"
      },
      {
        "input": "s = \"(a+(b+(c+(d+(e+(f+(g+(h+(i+(j+(k+(l+(m+(n+(o+(p+(q+(r+(s+(t+(u+(v+(w+(x+(y+(z+(a+(b+(c+(d+(e+(f+(g+(h+(i+(j+(k+(l+(m+(n+(o+p))))))))))))))))))))))))))))))))+a)+b)+c)+d)+e)+f)+g)+h)+i)+j)+k)+l)+m)+n)+o)+p)+q)+r)+s)+t)+u)+v)+w)+x)+y)+z\"",
        "output": "41"
      },
      {
        "input": "s = \"(1+((2+(3*(4/5)))+((6-(7*8))))\"",
        "output": "5"
      },
      {
        "input": "s = \"(((((a+(b*(c/(d-e))))+((f+g)*((h-i)+j)))+((k-l)/(m*(n-o))))+(((p+q)*((r-s)+t))+((u-v)/(w*(x-y))))))",
        "output": "Error: Solution.maxDepth() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"(1+(2*((3+4)*(5+(6*(7+(8+9))))))+(10*((11-12)+(13*((14-15)+(16*(17+18))))))\"",
        "output": "7"
      },
      {
        "input": "s = \"(1+(2+(3+(4+(5+(6+(7+(8+(9+(10+(11+(12+(13+(14+(15+(16+(17+(18+(19+(20)))))))))))))))))\")",
        "output": "Error: Solution.maxDepth() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"((x+(y*z))+(u/(v-((w+x)*(y-z)))))+(a+b)-(c*d)\"",
        "output": "5"
      },
      {
        "input": "s = \"(((a+b)*(c-d))+(((e+f)*(g-h))+(((i+j)*(k-l))+(((m+n)*(o-p))+((q+r)*(s-t)))))\"",
        "output": "6"
      },
      {
        "input": "s = \"(((a+b)*((c-d)+e))-(((f+g)*h)-(i/j)))\"",
        "output": "4"
      },
      {
        "input": "s = \"(((((1+2)*3)+((4-5)*6))+(((7/8)+9)*10)))\"",
        "output": "5"
      },
      {
        "input": "s = \"(((((1)+2)*3)+(((((4)+5)*6)+((7)+8))))\"",
        "output": "7"
      },
      {
        "input": "s = \"(a+(b+(c+(d+(e+(f+(g+(h+(i+(j+(k+(l+(m+(n+(o+(p+(q+(r+(s+(t+(u+(v+(w+(x+(y+z))))))))))))))))))))))\"",
        "output": "25"
      },
      {
        "input": "s = \"(((1+2)*((3-4)+(5/6)))+(((7*8)-9)+((10+11)*12)))\"",
        "output": "4"
      },
      {
        "input": "s = \"(a+(b+(c+(d+(e+(f+(g+(h+(i+(j+(k+(l+(m+(n+(o+(p+(q+(r+(s+(t+(u+(v+(w+(x+(y+(z+(a+b)))))))))))))))))))))))))\"",
        "output": "27"
      },
      {
        "input": "s = \"((a+(b*c)+(d/e))-(((f+g)*(h-i))+((j/k)+(l*m))))\"",
        "output": "4"
      },
      {
        "input": "s = \"(a+(b*(c/(d-e))))+(((f+g)*((h-i)+j))+((k-l)/(m*(n-o))))\"",
        "output": "4"
      },
      {
        "input": "s = \"((a+(b+(c+(d+(e+(f+(g+(h+(i+(j+(k+(l+(m+(n+(o+(p+(q+(r+(s+(t+(u+(v+(w+(x+(y+z))))))))))))))))))))))))\"",
        "output": "26"
      },
      {
        "input": "s = \"(a+(b*(c+d)))+((e+f)/(g-(h*i)))\"",
        "output": "3"
      },
      {
        "input": "s = \"(a+(b*(c+d)))+(((e+f)*(g-h)))+1\"",
        "output": "3"
      },
      {
        "input": "s = \"(a+(b*(c+(d/(e+(f*(g+(h/(i+j))))))))\"",
        "output": "9"
      },
      {
        "input": "s = \"(1+(2*(3+4)/(5-6))+((7+8)*9))\"",
        "output": "3"
      },
      {
        "input": "s = \"((((((((((1+2)+3)+4)+5)+6)+7)+8)+9)+10)\"",
        "output": "10"
      },
      {
        "input": "s = \"(((((1+2)*3)+4)+((5+6)+7))+8)+((9+((10+11)*12))+13)+14)",
        "output": "Error: Solution.maxDepth() missing 1 required positional argument: 's'"
      },
      {
        "input": "s = \"(((((x*y)+z)+((a*b)+c))+(((d*e)+f)+((g*h)+i))))\"",
        "output": "5"
      },
      {
        "input": "s = \"(a+(b+(c+(d+(e+(f+(g+(h+(i+(j+(k+(l+(m+(n+(o+(p+(q+(r+(s+(t+(u+(v+(w+(x+(y+z)))))))))))))))))))))+a)+b)+c\"",
        "output": "25"
      },
      {
        "input": "s = \"((((1+(2+(3+(4+(5+(6+(7+(8+(9+(10+(11+(12+(13+(14+(15+(16+(17+(18+(19+(20))))))))))))))))+21)+22)+23)+24)+25)+26\"",
        "output": "23"
      }
    ]
  },
  {
    "id": 2855,
    "difficulty": "Easy",
    "tags": [
      "Array"
    ],
    "problemDescription": "You are given a 0-indexed array nums of length n containing distinct positive integers. Return the minimum number of right shifts required to sort nums and -1 if this is not possible.\nA right shift is defined as shifting the element at index i to index (i + 1) % n, for all indices.\n\u00a0\nExample 1:\n\nInput: nums = [3,4,5,1,2]\nOutput: 2\nExplanation: \nAfter the first right shift, nums = [2,3,4,5,1].\nAfter the second right shift, nums = [1,2,3,4,5].\nNow nums is sorted; therefore the answer is 2.\n\nExample 2:\n\nInput: nums = [1,3,5]\nOutput: 0\nExplanation: nums is already sorted therefore, the answer is 0.\nExample 3:\n\nInput: nums = [2,1,4]\nOutput: -1\nExplanation: It's impossible to sort the array using right shifts.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 100\nnums contains distinct integers.\n\n",
    "starterCode": "class Solution:\n    def minimumRightShifts(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [100,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [4,5,6,1,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [1]",
        "output": "0"
      },
      {
        "input": "nums = [50,10,20,30,40]",
        "output": "4"
      },
      {
        "input": "nums = [1,3,5]",
        "output": "0"
      },
      {
        "input": "nums = [2,1,4]",
        "output": "-1"
      },
      {
        "input": "nums = [4,5,1,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [2,3,4,5,1]",
        "output": "1"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "0"
      },
      {
        "input": "nums = [5,1,2,3,4]",
        "output": "4"
      },
      {
        "input": "nums = [100,1,2,3,4,5,6,7,8,99]",
        "output": "9"
      },
      {
        "input": "nums = [3,1,2]",
        "output": "2"
      },
      {
        "input": "nums = [2,3,1]",
        "output": "1"
      },
      {
        "input": "nums = [3,4,5,1,2]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "nums = [3,1,2,4,5]",
        "output": "-1"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,1]",
        "output": "1"
      },
      {
        "input": "nums = [1,3,2,4,5]",
        "output": "-1"
      },
      {
        "input": "nums = [5,4,2,1,3]",
        "output": "-1"
      },
      {
        "input": "nums = [3,5,7,9,11,2,4,6,8,10,1]",
        "output": "-1"
      },
      {
        "input": "nums = [3, 5, 4, 1, 2]",
        "output": "-1"
      },
      {
        "input": "nums = [15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "14"
      },
      {
        "input": "nums = [6,7,8,9,10,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [4,2,5,1,3]",
        "output": "-1"
      },
      {
        "input": "nums = [2, 3, 4, 5, 1]",
        "output": "1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "0"
      },
      {
        "input": "nums = [12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11]",
        "output": "11"
      },
      {
        "input": "nums = [7,8,9,10,1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "nums = [9,1,2,3,4,5,6,7,8]",
        "output": "8"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "0"
      },
      {
        "input": "nums = [5, 1, 2, 3, 4]",
        "output": "4"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]",
        "output": "-1"
      },
      {
        "input": "nums = [2, 3, 1, 4, 5, 6, 7, 8, 9, 10]",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 3, 5, 4]",
        "output": "1"
      },
      {
        "input": "nums = [90,80,70,60,50,40,30,20,10,1,2,3,4,5,6,7,8,9]",
        "output": "-1"
      },
      {
        "input": "nums = [7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "nums = [15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "14"
      },
      {
        "input": "nums = [10,20,30,40,50,1,2,3,4,5,6,7,8,9]",
        "output": "9"
      },
      {
        "input": "nums = [30, 40, 50, 60, 70, 80, 90, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "12"
      },
      {
        "input": "nums = [5,1,2,3,4,6,7,8,9,10]",
        "output": "-1"
      },
      {
        "input": "nums = [4,5,6,7,8,9,10,1,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [3,1,4,2]",
        "output": "-1"
      },
      {
        "input": "nums = [7,8,9,1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "nums = [7, 8, 9, 10, 1, 2, 3, 4, 5, 6]",
        "output": "6"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "-1"
      },
      {
        "input": "nums = [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,1,2]",
        "output": "2"
      },
      {
        "input": "nums = [5,6,7,8,9,10,1,2,3,4]",
        "output": "4"
      },
      {
        "input": "nums = [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "8"
      },
      {
        "input": "nums = [10,11,12,13,1,2,3,4,5,6,7,8,9]",
        "output": "9"
      },
      {
        "input": "nums = [7,8,9,10,11,1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "nums = [2,5,1,3,4]",
        "output": "-1"
      },
      {
        "input": "nums = [3,4,5,6,7,8,9,1,2]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,4,5,3]",
        "output": "1"
      },
      {
        "input": "nums = [3,5,4,1,2]",
        "output": "-1"
      },
      {
        "input": "nums = [9,10,11,1,2,3,4,5,6,7,8]",
        "output": "8"
      },
      {
        "input": "nums = [5,1,3,4,2]",
        "output": "-1"
      },
      {
        "input": "nums = [3,1,2,5,4]",
        "output": "-1"
      },
      {
        "input": "nums = [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 1, 2, 3, 4]",
        "output": "4"
      },
      {
        "input": "nums = [1,2,3,5,4]",
        "output": "1"
      },
      {
        "input": "nums = [2,3,4,1,5]",
        "output": "-1"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "9"
      },
      {
        "input": "nums = [4,3,1,2,5]",
        "output": "-1"
      },
      {
        "input": "nums = [1, 3, 2]",
        "output": "1"
      },
      {
        "input": "nums = [30,31,32,33,34,35,36,37,38,39,40,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]",
        "output": "29"
      },
      {
        "input": "nums = [8,9,10,11,1,2,3,4,5,6,7]",
        "output": "7"
      },
      {
        "input": "nums = [5,2,3,4,1]",
        "output": "-1"
      },
      {
        "input": "nums = [5,6,7,8,9,1,2,3,4]",
        "output": "4"
      },
      {
        "input": "nums = [20,30,40,50,60,70,80,90,10,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19]",
        "output": "-1"
      },
      {
        "input": "nums = [4,5,6,7,8,9,1,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [1,3,5,7,9,11,2,4,6,8,10]",
        "output": "-1"
      },
      {
        "input": "nums = [2,3,4,5,1,6]",
        "output": "-1"
      },
      {
        "input": "nums = [3,4,5,6,7,8,9,10,1,2]",
        "output": "2"
      },
      {
        "input": "nums = [15,25,35,45,55,10,20,30,40]",
        "output": "-1"
      },
      {
        "input": "nums = [9,10,11,12,13,1,2,3,4,5,6,7,8]",
        "output": "8"
      },
      {
        "input": "nums = [7,8,9,10,11,12,13,1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "nums = [10,1,2,3,4,5,6,7,8,9]",
        "output": "9"
      },
      {
        "input": "nums = [4,1,2,5,3]",
        "output": "-1"
      },
      {
        "input": "nums = [4, 5, 1, 2, 3]",
        "output": "3"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,1]",
        "output": "1"
      },
      {
        "input": "nums = [3, 4, 5, 6, 7, 8, 9, 1, 2]",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "0"
      },
      {
        "input": "nums = [3,1,2,4,6,5]",
        "output": "-1"
      },
      {
        "input": "nums = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1]",
        "output": "1"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]",
        "output": "-1"
      },
      {
        "input": "nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "nums = [1,14,2,13,3,12,4,11,5,10,6,9,7,8]",
        "output": "-1"
      },
      {
        "input": "nums = [98, 99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97]",
        "output": "97"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "-1"
      },
      {
        "input": "nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]",
        "output": "99"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 1, 2, 3, 4]",
        "output": "4"
      },
      {
        "input": "nums = [100,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150]",
        "output": "-1"
      },
      {
        "input": "nums = [8,1,2,3,4,5,6,7]",
        "output": "7"
      },
      {
        "input": "nums = [11,12,13,14,15,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [1, 2, 4, 3]",
        "output": "1"
      },
      {
        "input": "nums = [2,3,4,5,1,6,7]",
        "output": "-1"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,1,2,3,4]",
        "output": "4"
      },
      {
        "input": "nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "9"
      },
      {
        "input": "nums = [4,5,6,7,8,9,10,11,1,2,3]",
        "output": "3"
      },
      {
        "input": "nums = [3,2,1]",
        "output": "-1"
      },
      {
        "input": "nums = [9,10,1,2,3,4,5,6,7,8]",
        "output": "8"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1]",
        "output": "1"
      },
      {
        "input": "nums = [10,11,12,13,14,1,2,3,4,5,6,7,8,9]",
        "output": "9"
      },
      {
        "input": "nums = [2,4,1,5,3]",
        "output": "-1"
      },
      {
        "input": "nums = [100,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]",
        "output": "99"
      },
      {
        "input": "nums = [2,3,1,5,4]",
        "output": "-1"
      },
      {
        "input": "nums = [5,3,4,1,2]",
        "output": "-1"
      },
      {
        "input": "nums = [99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]",
        "output": "18"
      },
      {
        "input": "nums = [100,1,2,3,4,5,6,7,8,9]",
        "output": "9"
      },
      {
        "input": "nums = [9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8]",
        "output": "8"
      },
      {
        "input": "nums = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7]",
        "output": "7"
      },
      {
        "input": "nums = [99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20]",
        "output": "18"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,11,1,12]",
        "output": "-1"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4]",
        "output": "-1"
      },
      {
        "input": "nums = [2, 3, 5, 4, 1]",
        "output": "-1"
      },
      {
        "input": "nums = [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 1, 2, 3, 4]",
        "output": "4"
      },
      {
        "input": "nums = [6,7,8,9,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "nums = [15,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "14"
      },
      {
        "input": "nums = [1,3,2]",
        "output": "1"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10,1,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "-1"
      },
      {
        "input": "nums = [2,1,3,4,5]",
        "output": "-1"
      },
      {
        "input": "nums = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4]",
        "output": "4"
      },
      {
        "input": "nums = [8,9,10,1,2,3,4,5,6,7]",
        "output": "7"
      },
      {
        "input": "nums = [20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "19"
      },
      {
        "input": "nums = [3,4,1,2,5]",
        "output": "-1"
      },
      {
        "input": "nums = [50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]",
        "output": "49"
      },
      {
        "input": "nums = [11,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "nums = [2,3,1,4,5]",
        "output": "-1"
      },
      {
        "input": "nums = [99,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98]",
        "output": "97"
      },
      {
        "input": "nums = [8,9,10,11,12,13,14,15,1,2,3,4,5,6,7]",
        "output": "7"
      }
    ]
  },
  {
    "id": 1556,
    "difficulty": "Easy",
    "tags": [
      "String"
    ],
    "problemDescription": "Given an integer n, add a dot (\".\") as the thousands separator and return it in string format.\n\u00a0\nExample 1:\n\nInput: n = 987\nOutput: \"987\"\n\nExample 2:\n\nInput: n = 1234\nOutput: \"1.234\"\n\n\u00a0\nConstraints:\n\n0 <= n <= 231 - 1\n\n",
    "starterCode": "class Solution:\n    def thousandSeparator(self, n: int) -> str:\n        ",
    "testCases": [
      {
        "input": "n = 0",
        "output": "0"
      },
      {
        "input": "n = 1234",
        "output": "1.234"
      },
      {
        "input": "n = 1000000",
        "output": "1.000.000"
      },
      {
        "input": "n = 2147483647",
        "output": "2.147.483.647"
      },
      {
        "input": "n = 123456789",
        "output": "123.456.789"
      },
      {
        "input": "n = 1234567",
        "output": "1.234.567"
      },
      {
        "input": "n = 123456",
        "output": "123.456"
      },
      {
        "input": "n = 56789",
        "output": "56.789"
      },
      {
        "input": "n = 1000",
        "output": "1.000"
      },
      {
        "input": "n = 987",
        "output": "987"
      },
      {
        "input": "n = 111222333444555666777888999",
        "output": "111.222.333.444.555.666.777.888.999"
      },
      {
        "input": "n = 123456789012",
        "output": "123.456.789.012"
      },
      {
        "input": "n = 999999999",
        "output": "999.999.999"
      },
      {
        "input": "n = 1000000000000000",
        "output": "1.000.000.000.000.000"
      },
      {
        "input": "n = 1234567890123456789",
        "output": "1.234.567.890.123.456.789"
      },
      {
        "input": "n = 123456789123456789",
        "output": "123.456.789.123.456.789"
      },
      {
        "input": "n = 999999999999",
        "output": "999.999.999.999"
      },
      {
        "input": "n = 100",
        "output": "100"
      },
      {
        "input": "n = 456789012",
        "output": "456.789.012"
      },
      {
        "input": "n = 1000000000000",
        "output": "1.000.000.000.000"
      },
      {
        "input": "n = 123",
        "output": "123"
      },
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 1001001",
        "output": "1.001.001"
      },
      {
        "input": "n = 1234567890123456",
        "output": "1.234.567.890.123.456"
      },
      {
        "input": "n = 10000",
        "output": "10.000"
      },
      {
        "input": "n = 111111111111111",
        "output": "111.111.111.111.111"
      },
      {
        "input": "n = 1001",
        "output": "1.001"
      },
      {
        "input": "n = 9876543210987654321",
        "output": "9.876.543.210.987.654.321"
      },
      {
        "input": "n = 101010101",
        "output": "101.010.101"
      },
      {
        "input": "n = 10000000000",
        "output": "10.000.000.000"
      },
      {
        "input": "n = 100000",
        "output": "100.000"
      },
      {
        "input": "n = 98765432109876543210987654321",
        "output": "98.765.432.109.876.543.210.987.654.321"
      },
      {
        "input": "n = 9876543210",
        "output": "9.876.543.210"
      },
      {
        "input": "n = 999",
        "output": "999"
      },
      {
        "input": "n = 1000000000",
        "output": "1.000.000.000"
      },
      {
        "input": "n = 1234567890123",
        "output": "1.234.567.890.123"
      },
      {
        "input": "n = 111111111",
        "output": "111.111.111"
      },
      {
        "input": "n = 1010101010",
        "output": "1.010.101.010"
      },
      {
        "input": "n = 456789012345",
        "output": "456.789.012.345"
      },
      {
        "input": "n = 1234567890",
        "output": "1.234.567.890"
      },
      {
        "input": "n = 567890123",
        "output": "567.890.123"
      },
      {
        "input": "n = 987654321",
        "output": "987.654.321"
      },
      {
        "input": "n = 987654321098",
        "output": "987.654.321.098"
      },
      {
        "input": "n = 123456789012345",
        "output": "123.456.789.012.345"
      },
      {
        "input": "n = 123456789123",
        "output": "123.456.789.123"
      },
      {
        "input": "n = 999999",
        "output": "999.999"
      },
      {
        "input": "n = 987654321098765",
        "output": "987.654.321.098.765"
      },
      {
        "input": "n = 1111111111",
        "output": "1.111.111.111"
      },
      {
        "input": "n = 54321",
        "output": "54.321"
      },
      {
        "input": "n = 10",
        "output": "10"
      }
    ]
  },
  {
    "id": 3063,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Linked List",
      "Counting"
    ],
    "problemDescription": "Given the head of a linked list containing k distinct elements, return the head to a linked list of length k containing the frequency of each distinct element in the given linked list in any order.\n\u00a0\nExample 1: \n\nInput:   head = [1,1,2,1,2,3] \nOutput:   [3,2,1] \nExplanation:  There are 3 distinct elements in the list. The frequency of 1 is 3, the frequency of 2 is 2 and the frequency of 3 is 1. Hence, we return 3 -> 2 -> 1.\nNote that 1 -> 2 -> 3, 1 -> 3 -> 2, 2 -> 1 -> 3, 2 -> 3 -> 1, and 3 -> 1 -> 2 are also valid answers.\n\nExample 2: \n\nInput:   head = [1,1,2,2,2] \nOutput:   [2,3] \nExplanation:  There are 2 distinct elements in the list. The frequency of 1 is 2 and the frequency of 2 is 3. Hence, we return 2 -> 3.\n\nExample 3: \n\nInput:   head = [6,5,4,3,2,1] \nOutput:   [1,1,1,1,1,1] \nExplanation:  There are 6 distinct elements in the list. The frequency of each of them is 1. Hence, we return 1 -> 1 -> 1 -> 1 -> 1 -> 1.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [1, 105].\n1 <= Node.val <= 105\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def frequenciesOfElements(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [1,1,2,1,2,3]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "head = [6,5,4,3,2,1]",
        "output": "[1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1,1,2,2,2]",
        "output": "[3, 2]"
      },
      {
        "input": "head = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5]",
        "output": "[7, 6, 5, 4, 3]"
      },
      {
        "input": "head = [50000,50000,50000,49999,49999,49999,49999,49999,49998,49998,49998,49998,49998,49997,49997,49997,49997,49997,49997,49996,49996,49996,49996,49996,49996,49996,49996,49996]",
        "output": "[9, 6, 5, 5, 3]"
      },
      {
        "input": "head = [7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 10]",
        "output": "[1, 3, 2, 5]"
      },
      {
        "input": "head = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "head = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "[15, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "[15, 15]"
      },
      {
        "input": "head = [7,7,7,7,7,7,7,7,7,7,8,8,9,9,9,10]",
        "output": "[1, 3, 2, 10]"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]",
        "output": "[10, 10, 10]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [1,2,1,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1]",
        "output": "[1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "head = [100000,100000,99999,99999,99999,99998,99998,99997]",
        "output": "[1, 2, 3, 2]"
      },
      {
        "input": "head = [10,20,20,10,30,30,30,10,20,20,10,30,30,30,10,20,20,10,30,30,30,10,20,20,10,30,30,30]",
        "output": "[12, 8, 8]"
      },
      {
        "input": "head = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
        "output": "[10, 10, 10, 10]"
      },
      {
        "input": "head = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7]",
        "output": "[7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6]",
        "output": "[8, 7, 6, 5, 4, 3]"
      },
      {
        "input": "head = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,20,20,20,20,20]",
        "output": "[5, 20]"
      },
      {
        "input": "head = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "[10, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [10,10,10,10,10,20,20,20,30,30,30,30,30,40,40,40,40]",
        "output": "[4, 5, 3, 5]"
      },
      {
        "input": "head = [100000,100000,100000,99999,99999,99998,99998,99998,99997,99997]",
        "output": "[2, 3, 2, 3]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[30]"
      },
      {
        "input": "head = [200000,200000,200000,200000,200000,200000,200000,200000,200000,200000]",
        "output": "[10]"
      },
      {
        "input": "head = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]",
        "output": "[6, 5, 4, 3, 2, 3]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "head = [7,7,7,7,7,7,7,7,7,7,8,8,8,8,9,9,9]",
        "output": "[3, 4, 10]"
      },
      {
        "input": "head = [50000, 50000, 49999, 49999, 49998, 49998, 49997, 49997, 49996, 49996, 49995, 49995, 49994, 49994, 49993]",
        "output": "[1, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[31]"
      },
      {
        "input": "head = [5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5]",
        "output": "[6, 6, 6, 6, 6]"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,10,10,10,10,10,10,10]",
        "output": "[10, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [100000, 100000, 100000, 99999, 99999, 99998, 99998, 99997, 99997, 99996]",
        "output": "[1, 2, 2, 2, 3]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[65]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "head = [100000,99999,99998,99997,99996,99995,99994,99993,99992,99991,99990]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "head = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8]",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5]",
        "output": "[6, 5, 4, 3, 2]"
      },
      {
        "input": "head = [100000,100000,100000,99999,99999,99998,99997,99997,99996,99996,99996]",
        "output": "[3, 2, 1, 2, 3]"
      },
      {
        "input": "head = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3]"
      },
      {
        "input": "head = [10,10,20,20,30,30,40,40,50,50,60,60]",
        "output": "[2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "[20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [100000,100000,99999,99999,99998,99998,99998,99997,99997]",
        "output": "[2, 3, 2, 2]"
      },
      {
        "input": "head = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]",
        "output": "[8, 8, 8]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [20000,20000,20000,19999,19999,19998,19998,19998,19997,19997,19997,19997,19996,19996,19996,19996,19996,19995,19995,19995,19995,19995,19995,19995]",
        "output": "[7, 5, 4, 3, 2, 3]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,10,20,30,40,50,60,70,80,90,100,10,20,30,40,50,60,70,80,90,100]",
        "output": "[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"
      }
    ]
  },
  {
    "id": 1859,
    "difficulty": "Easy",
    "tags": [
      "String",
      "Sorting"
    ],
    "problemDescription": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\nA sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.\n\nFor example, the sentence \"This is a sentence\" can be shuffled as \"sentence4 a3 is2 This1\" or \"is2 sentence4 This1 a3\".\n\nGiven a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.\n\u00a0\nExample 1:\n\nInput: s = \"is2 sentence4 This1 a3\"\nOutput: \"This is a sentence\"\nExplanation: Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers.\n\nExample 2:\n\nInput: s = \"Myself2 Me1 I4 and3\"\nOutput: \"Me Myself and I\"\nExplanation: Sort the words in s to their original positions \"Me1 Myself2 and3 I4\", then remove the numbers.\n\n\u00a0\nConstraints:\n\n2 <= s.length <= 200\ns consists of lowercase and uppercase English letters, spaces, and digits from 1 to 9.\nThe number of words in s is between 1 and 9.\nThe words in s are separated by a single space.\ns contains no leading or trailing spaces.\n\n",
    "starterCode": "class Solution:\n    def sortSentence(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"eight8 seven7 six6 five5 four4 three3 two2 one1\"",
        "output": "one two three four five six seven eight"
      },
      {
        "input": "s = \"seven7 six6 five5 four4 three3 two2 one1\"",
        "output": "one two three four five six seven"
      },
      {
        "input": "s = \"nine9 eight8 seven7 six6 five5 four4 three3 two2 one1\"",
        "output": "one two three four five six seven eight nine"
      },
      {
        "input": "s = \"three3 two2 one1\"",
        "output": "one two three"
      },
      {
        "input": "s = \"is2 sentence4 This1 a3\"",
        "output": "This is a sentence"
      },
      {
        "input": "s = \"five5 four4 three3 two2 one1\"",
        "output": "one two three four five"
      },
      {
        "input": "s = \"A9 B8 C7 D6 E5 F4 G3 H2 I1\"",
        "output": "I H G F E D C B A"
      },
      {
        "input": "s = \"Myself2 Me1 I4 and3\"",
        "output": "Me Myself and I"
      },
      {
        "input": "s = \"nine9 eight8 seven7 six6 five5 four4 three3 two2 one1 zero0\"",
        "output": "one two three four five six seven eight nine zero"
      },
      {
        "input": "s = \"six6 five5 four4 three3 two2 one1\"",
        "output": "one two three four five six"
      },
      {
        "input": "s = \"one1\"",
        "output": "one"
      },
      {
        "input": "s = \"two1 one2\"",
        "output": "two one"
      },
      {
        "input": "s = \"four4 three3 two2 one1\"",
        "output": "one two three four"
      },
      {
        "input": "s = \"Data6 Science7 Is2 Important1 Fascinating4\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Deep2 Learning3 For1 Beginners5\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"quick5 brown3 fox2 jumps9 over8 lazy4 the7 dog6 a1\"",
        "output": "a fox brown lazy quick dog the over jumps"
      },
      {
        "input": "s = \"Wave7 Energy6\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Quick5 brown4 fox3 jumps2 over1\"",
        "output": "over jumps fox brown Quick"
      },
      {
        "input": "s = \"big2 bigger3 biggest1\"",
        "output": "biggest big bigger"
      },
      {
        "input": "s = \"Sustainable1 Energy\"",
        "output": "Error: invalid literal for int() with base 10: 'y'"
      },
      {
        "input": "s = \"Python5 is4 the2 best1 language6\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"order10 words9 in8 correct7 sequence6 is5 important4 for3 understanding2 this1\"",
        "output": "this understanding for important is sequence correct in words order1"
      },
      {
        "input": "s = \"Algorithms8 are2 very3 interesting7 indeed9\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Tensor5 Flow4 PyTorch3\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Python9 Java3 C1 Cpp4 Go5 Rust8\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Artificial5 Intelligence4 Development3 Engaging2\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Hydro3 Power2\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"last9 first1 middle5\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"alpha9 beta8 gamma7 delta6 epsilon5\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Metaverse9\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"a1 bc2 def3 ghij4 klmno5 pqrstu6 vwxyz7 abcdefg8 hijklmno9\"",
        "output": "a bc def ghij klmno pqrstu vwxyz abcdefg hijklmno"
      },
      {
        "input": "s = \"Cybersecurity9 Challenges8\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Quantum7 Computing6\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Python7 coding6 is4 fun1 today9\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Extended4 Reality3\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Serverless7 Computing6\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Innovate8 Continuously6 To2 Be5 The1 Best9\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"abc1 def2 ghi3 jkl4 mno5 pqr6 stu7 vwx8 yza9\"",
        "output": "abc def ghi jkl mno pqr stu vwx yza"
      },
      {
        "input": "s = \"Carbon9 Footprint8\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"nested10 structures9 are8 not7 supported6 in5 this4 problem3 but2 lets1 try\"",
        "output": "Error: invalid literal for int() with base 10: 'y'"
      },
      {
        "input": "s = \"Quick5 brown4 fox3 jumps9 over2 lazy8 the1\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Data2 Science1\"",
        "output": "Science Data"
      },
      {
        "input": "s = \"alpha10 beta9 gamma8 delta7 epsilon6 zeta5 eta4 theta3 iota2 kappa1\"",
        "output": "kappa iota theta eta zeta epsilon delta gamma beta alpha1"
      },
      {
        "input": "s = \"Quick5 Brown4 Fox3 Jumps2 Over1\"",
        "output": "Over Jumps Fox Brown Quick"
      },
      {
        "input": "s = \"Digital2 Transformation1\"",
        "output": "Transformation Digital"
      },
      {
        "input": "s = \"Cryptocurrency7 Investing6\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Of6 Things5\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"zebra9 yellow8 xenon7 winter6 volcano5 umbrella4 tornado3 storm2 rainbow1\"",
        "output": "rainbow storm tornado umbrella volcano winter xenon yellow zebra"
      },
      {
        "input": "s = \"Climate5 Change4\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"short1 longerWord2 evenLongerWord3\"",
        "output": "short longerWord evenLongerWord"
      },
      {
        "input": "s = \"one9 two8 three7 four6 five5 six4 seven3 eight2 nine1\"",
        "output": "nine eight seven six five four three two one"
      },
      {
        "input": "s = \"Ethereum5 Wallet4\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"apple8 banana7 cherry6 date5 elderberry4 fig3 grape2 huckleberry1\"",
        "output": "huckleberry grape fig elderberry date cherry banana apple"
      },
      {
        "input": "s = \"apple9 banana8 cherry7 date6 elderberry5 fig4 grape3 honeydew2 ice1\"",
        "output": "ice honeydew grape fig elderberry date cherry banana apple"
      },
      {
        "input": "s = \"MixedCASE1 Word2 with3 DIFFERENT4 cases5\"",
        "output": "MixedCASE Word with DIFFERENT cases"
      },
      {
        "input": "s = \"Python1 is2 great3\"",
        "output": "Python is great"
      },
      {
        "input": "s = \"a9 b8 c7 d6 e5 f4 g3 h2 i1\"",
        "output": "i h g f e d c b a"
      },
      {
        "input": "s = \"Virtual8 Reality7\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"single1\"",
        "output": "single"
      },
      {
        "input": "s = \"one1 two2 three3 four4 five5 six6 seven7 eight8 nine9\"",
        "output": "one two three four five six seven eight nine"
      },
      {
        "input": "s = \"Edge9 cases8 need7 special6 handling5 and4 attention3\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"DevSecOps8 Practices7\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Machine9 Learning8 Algorithms7\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Emission7 Reduction6\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"reverse9 order8 words7 in6 a5 sentence4 for3 testing2 purposes1\"",
        "output": "purposes testing for sentence a in words order reverse"
      },
      {
        "input": "s = \"Solar7 Power6\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Big5 Data4 Analytics3\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"sun8 moon7 stars6 galaxy5 universe4 planets3 asteroid2 comet1\"",
        "output": "comet asteroid planets universe galaxy stars moon sun"
      },
      {
        "input": "s = \"only1 word\"",
        "output": "Error: invalid literal for int() with base 10: 'd'"
      },
      {
        "input": "s = \"two2 one1 three3 four4 five5 six6 seven7 eight8 nine9\"",
        "output": "one two three four five six seven eight nine"
      },
      {
        "input": "s = \"Autonomous5 Vehicles4\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"complex1 testing2 cases3 with4 multiple5 digits6 and7 shuffled8 order9\"",
        "output": "complex testing cases with multiple digits and shuffled order"
      },
      {
        "input": "s = \"Quick5 brown4 fox1 jumps9 over3 lazy2\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Sustainability1\"",
        "output": "Sustainability"
      },
      {
        "input": "s = \"same1 same1 same1 same1 same1\"",
        "output": "Error: sequence item 1: expected str instance, NoneType found"
      },
      {
        "input": "s = \"Robotics7\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Tidal5 Energy4\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Hard2 Work3 Makes1 Success4\"",
        "output": "Makes Hard Work Success"
      },
      {
        "input": "s = \"Edge3 Computing2\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Fog1 Computing\"",
        "output": "Error: invalid literal for int() with base 10: 'g'"
      },
      {
        "input": "s = \"Alibaba2 Cloud3 Is1 Amazing5\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"A5 B4 C3 D2 E1 F6 G7 H8 I9\"",
        "output": "E D C B A F G H I"
      },
      {
        "input": "s = \"Alphabetically9 Better8 Christmas7 Does6 Everyone5 Feel4 Good3 Happy2 Indeed1\"",
        "output": "Indeed Happy Good Feel Everyone Does Christmas Better Alphabetically"
      },
      {
        "input": "s = \"sun9 moon8 star7 planet6 comet5 asteroid4 meteor3 satellite2 galaxy1\"",
        "output": "galaxy satellite meteor asteroid comet planet star moon sun"
      },
      {
        "input": "s = \"The9 quick8 brown7 fox6 jumps5 over4 lazy3 dog2 one1\"",
        "output": "one dog lazy over jumps fox brown quick The"
      },
      {
        "input": "s = \"handle1 edge2 cases3 like4 when5 the6 number7 of8 digits9 is9 exactly9\"",
        "output": "Error: sequence item 9: expected str instance, NoneType found"
      },
      {
        "input": "s = \"short6 longer5 very4 much3 more2 words1\"",
        "output": "words more much very longer short"
      },
      {
        "input": "s = \"first1 second2 third3 fourth4 fifth5 sixth6 seventh7 eighth8 ninth9\"",
        "output": "first second third fourth fifth sixth seventh eighth ninth"
      },
      {
        "input": "s = \"Two2 Words1\"",
        "output": "Words Two"
      },
      {
        "input": "s = \"Continuous5 Deployment4 Integration3\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Understanding9 Neural8 Networks7\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Complicated1 Sorting2 becomes3 significantly4 more5 challenging6 when7 words8 overlap9\"",
        "output": "Complicated Sorting becomes significantly more challenging when words overlap"
      },
      {
        "input": "s = \"Python10 Java9 C8 Cpp7 Rust6 Go5 Ruby4 Swift3 Kotlin2 TypeScript1\"",
        "output": "TypeScript Kotlin Swift Ruby Go Rust Cpp C Java Python1"
      },
      {
        "input": "s = \"zZ9 yY8 xX7 wW6 vV5 uU4 tT3 sS2 rR1\"",
        "output": "rR sS tT uU vV wW xX yY zZ"
      },
      {
        "input": "s = \"AI4 Ethics3\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Geothermal1 Energy\"",
        "output": "Error: invalid literal for int() with base 10: 'y'"
      },
      {
        "input": "s = \"Complex9 Sentences6 with5 various4 lengths3 can2 be1\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Kubernetes8 Docker7 For2 DevOps3\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"A9 lot8 of7 testing6 needs5 to4 be3 done2 always1\"",
        "output": "always done be to needs testing of lot A"
      },
      {
        "input": "s = \"z9 y8 x7 w6 v5 u4 t3 s2 r1\"",
        "output": "r s t u v w x y z"
      },
      {
        "input": "s = \"hello9 world8 how7 are6 you5 I4 am3\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"IoT8 Internet7\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Cloud4 Native3\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"random4 words7 in2 different1 order5\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Blockchain9 Technology8\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"twoWords2 oneWord1\"",
        "output": "oneWord twoWords"
      },
      {
        "input": "s = \"ab9 cd8 ef7 gh6 ij5 kl4 mn3 op2 qr1\"",
        "output": "qr op mn kl ij gh ef cd ab"
      },
      {
        "input": "s = \"Open3 Source2 Software1\"",
        "output": "Software Source Open"
      },
      {
        "input": "s = \"Python9 Is8 Great7 Language6\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"a9 quick8 brown7 fox6 jumps5 over4 lazy3 dogs2 one1\"",
        "output": "one dogs lazy over jumps fox brown quick a"
      },
      {
        "input": "s = \"Fossil1 Fuels\"",
        "output": "Error: invalid literal for int() with base 10: 's'"
      },
      {
        "input": "s = \"Quick5 brown3 fox1 jumps9 over4 lazy2\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Biomass9 Energy8\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Automation6\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Global3 Warming2\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"NFTs5\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Digital9 Twin8\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"aA9 bB8 cC7 dD6 eE5 fF4 gG3 hH2 iI1\"",
        "output": "iI hH gG fF eE dD cC bB aA"
      },
      {
        "input": "s = \"shuffle7 sentence6 original5 reconstruct4 and3 a2 is1\"",
        "output": "is a and reconstruct original sentence shuffle"
      },
      {
        "input": "s = \"Microservices9 Architecture8 Design7\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"shuffle9 words8 correctly7 to6 get5 the4 right3 order2 one1\"",
        "output": "one order right the get to correctly words shuffle"
      },
      {
        "input": "s = \"5G4\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"HELLO1 woRLD2\"",
        "output": "HELLO woRLD"
      },
      {
        "input": "s = \"Short1 words2 can3 also4 be5 tricky6\"",
        "output": "Short words can also be tricky"
      },
      {
        "input": "s = \"Renewable9 Energy8\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Python3 Java2 C1 Ruby4 Go5\"",
        "output": "C Java Python Ruby Go"
      },
      {
        "input": "s = \"Electric3 Cars2\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"mixed8 case7 word6 CASE5 Mixed4 CASE3 mixed2 CASE1\"",
        "output": "CASE mixed CASE Mixed CASE word case mixed"
      },
      {
        "input": "s = \"Decentralized8 Finance7\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Python3 Java2 C1\"",
        "output": "C Java Python"
      },
      {
        "input": "s = \"Quick5 brown4 fox3 jumps9 over2 lazy1 dog8\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"This8 is7 a6 sample5 sentence4 with3 various2 words1\"",
        "output": "words various with sentence sample a is This"
      },
      {
        "input": "s = \"ninja9 samurai8 katana7 wakizashi6 tanto5 yoroi4 kusarigama3 tsurugi2 ninja1\"",
        "output": "ninja tsurugi kusarigama yoroi tanto wakizashi katana samurai ninja"
      },
      {
        "input": "s = \"This9 Sentence8 Is7 Very6 Complex5 Indeed4\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Nuclear3 Energy2\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Augmented6 Reality5\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Alibaba9 Cloud7 is3 amazing8 an2 excellent1 offering6\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"quick5 brown4 fox3 jumps9 over2 lazy1 dog8\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"alpha9 beta8 gamma7 delta6 epsilon5 zeta4 eta3 theta2 iota1\"",
        "output": "iota theta eta zeta epsilon delta gamma beta alpha"
      },
      {
        "input": "s = \"zebra9 yak8 xenon7 wolf6 vulture5 unicorn4 tiger3 snake2 rabbit1\"",
        "output": "rabbit snake tiger unicorn vulture wolf xenon yak zebra"
      },
      {
        "input": "s = \"repeated1 same2 numbers3 in4 different5 words6 should7 not8 be9 valid10\"",
        "output": "repeated same numbers in different words should not be valid1"
      },
      {
        "input": "s = \"reverse9 order8 words7 in6 this5 shuffled4 sentence3 into2 proper1\"",
        "output": "proper into sentence shuffled this in words order reverse"
      },
      {
        "input": "s = \"Single1\"",
        "output": "Single"
      },
      {
        "input": "s = \"Wind5 Energy4\"",
        "output": "Error: list assignment index out of range"
      },
      {
        "input": "s = \"Smart3 Contracts2\"",
        "output": "Error: list assignment index out of range"
      }
    ]
  },
  {
    "id": 942,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array",
      "Two Pointers",
      "String"
    ],
    "problemDescription": "A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:\n\ns[i] == 'I' if perm[i] < perm[i + 1], and\ns[i] == 'D' if perm[i] > perm[i + 1].\n\nGiven a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.\n\u00a0\nExample 1:\nInput: s = \"IDID\"\nOutput: [0,4,1,3,2]\nExample 2:\nInput: s = \"III\"\nOutput: [0,1,2,3]\nExample 3:\nInput: s = \"DDI\"\nOutput: [3,2,0,1]\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 105\ns[i] is either 'I' or 'D'.\n\n",
    "starterCode": "class Solution:\n    def diStringMatch(self, s: str) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "s = \"DDI\"",
        "output": "[3, 2, 0, 1]"
      },
      {
        "input": "s = \"DDIDDI\"",
        "output": "[6, 5, 0, 4, 3, 1, 2]"
      },
      {
        "input": "s = \"IDDD\"",
        "output": "[0, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDDDDDDD\"",
        "output": "[8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"I\"",
        "output": "[0, 1]"
      },
      {
        "input": "s = \"IIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "s = \"D\"",
        "output": "[1, 0]"
      },
      {
        "input": "s = \"IIII\"",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "s = \"IDDDIII\"",
        "output": "[0, 7, 6, 5, 1, 2, 3, 4]"
      },
      {
        "input": "s = \"DDII\"",
        "output": "[4, 3, 0, 1, 2]"
      },
      {
        "input": "s = \"IDIDIDIDID\"",
        "output": "[0, 10, 1, 9, 2, 8, 3, 7, 4, 6, 5]"
      },
      {
        "input": "s = \"IIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "s = \"DDDDDD\"",
        "output": "[6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"III\"",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "s = \"IDID\"",
        "output": "[0, 4, 1, 3, 2]"
      },
      {
        "input": "s = \"DDDD\"",
        "output": "[4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"DDIDDID\"",
        "output": "[7, 6, 0, 5, 4, 1, 3, 2]"
      },
      {
        "input": "s = \"IDIDIDID\"",
        "output": "[0, 8, 1, 7, 2, 6, 3, 5, 4]"
      },
      {
        "input": "s = \"IIDDD\"",
        "output": "[0, 1, 5, 4, 3, 2]"
      },
      {
        "input": "s = \"DDDII\"",
        "output": "[5, 4, 3, 0, 1, 2]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]"
      },
      {
        "input": "s = \"IDDDDDDDDDDDDD\"",
        "output": "[0, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDIIIDDDIIID\"",
        "output": "[12, 11, 0, 1, 2, 10, 9, 8, 3, 4, 5, 7, 6]"
      },
      {
        "input": "s = \"IDDDDDDDII\"",
        "output": "[0, 10, 9, 8, 7, 6, 5, 4, 1, 2, 3]"
      },
      {
        "input": "s = \"DDDDDDIIIII\"",
        "output": "[11, 10, 9, 8, 7, 6, 0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "s = \"IDDDDDDDDIIIII\"",
        "output": "[0, 14, 13, 12, 11, 10, 9, 8, 7, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "s = \"IIDIIDIIDI\"",
        "output": "[0, 1, 10, 2, 3, 9, 4, 5, 8, 6, 7]"
      },
      {
        "input": "s = \"DDIDDIDDID\"",
        "output": "[10, 9, 0, 8, 7, 1, 6, 5, 2, 4, 3]"
      },
      {
        "input": "s = \"DDDDDDIDID\"",
        "output": "[10, 9, 8, 7, 6, 5, 0, 4, 1, 3, 2]"
      },
      {
        "input": "s = \"DDDDDDDDDIDDDD\"",
        "output": "[14, 13, 12, 11, 10, 9, 8, 7, 6, 0, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IIIIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "s = \"IDDDDDIIIIII\"",
        "output": "[0, 12, 11, 10, 9, 8, 1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDD\"",
        "output": "[16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"DDDDDDIII\"",
        "output": "[9, 8, 7, 6, 5, 4, 0, 1, 2, 3]"
      },
      {
        "input": "s = \"IIDDDDIIIDDD\"",
        "output": "[0, 1, 12, 11, 10, 9, 2, 3, 4, 8, 7, 6, 5]"
      },
      {
        "input": "s = \"DDDDDDDDDIIIII\"",
        "output": "[14, 13, 12, 11, 10, 9, 8, 7, 6, 0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "s = \"DDDDIIIID\"",
        "output": "[9, 8, 7, 6, 0, 1, 2, 3, 5, 4]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDID\"",
        "output": "[0, 14, 1, 13, 2, 12, 3, 11, 4, 10, 5, 9, 6, 8, 7]"
      },
      {
        "input": "s = \"DDDDDDDDDI\"",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1]"
      },
      {
        "input": "s = \"DDDIDIDIDI\"",
        "output": "[10, 9, 8, 0, 7, 1, 6, 2, 5, 3, 4]"
      },
      {
        "input": "s = \"DDDDDDDDDID\"",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 0, 2, 1]"
      },
      {
        "input": "s = \"DDDDIDIDIDID\"",
        "output": "[12, 11, 10, 9, 0, 8, 1, 7, 2, 6, 3, 5, 4]"
      },
      {
        "input": "s = \"IIDIIIIIIIIDIDDDDD\"",
        "output": "[0, 1, 18, 2, 3, 4, 5, 6, 7, 8, 9, 17, 10, 16, 15, 14, 13, 12, 11]"
      },
      {
        "input": "s = \"IDDDIIIIIIII\"",
        "output": "[0, 12, 11, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "s = \"DDDDIIIIIIIDIDIDIDIDID\"",
        "output": "[22, 21, 20, 19, 0, 1, 2, 3, 4, 5, 6, 18, 7, 17, 8, 16, 9, 15, 10, 14, 11, 13, 12]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIID\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13]"
      },
      {
        "input": "s = \"IDIDIDIDIDID\"",
        "output": "[0, 12, 1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]"
      },
      {
        "input": "s = \"IIIIIIIDDDDD\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 12, 11, 10, 9, 8, 7]"
      },
      {
        "input": "s = \"IDDDDDDDDDDDID\"",
        "output": "[0, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 1, 3, 2]"
      },
      {
        "input": "s = \"IIDIIIDDD\"",
        "output": "[0, 1, 9, 2, 3, 4, 8, 7, 6, 5]"
      },
      {
        "input": "s = \"IIIIIIIIIID\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10]"
      },
      {
        "input": "s = \"IIIIIIIDDD\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 10, 9, 8, 7]"
      },
      {
        "input": "s = \"DDDDDDDDDDIIIIIIIIIID\"",
        "output": "[21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10]"
      },
      {
        "input": "s = \"IDIDIDIDIDI\"",
        "output": "[0, 11, 1, 10, 2, 9, 3, 8, 4, 7, 5, 6]"
      },
      {
        "input": "s = \"DDDDDDDDDDII\"",
        "output": "[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0, 1, 2]"
      },
      {
        "input": "s = \"IDDDIIDDDIIDDDIIII\"",
        "output": "[0, 18, 17, 16, 1, 2, 15, 14, 13, 3, 4, 12, 11, 10, 5, 6, 7, 8, 9]"
      },
      {
        "input": "s = \"DDDDIIIIDDDD\"",
        "output": "[12, 11, 10, 9, 0, 1, 2, 3, 8, 7, 6, 5, 4]"
      },
      {
        "input": "s = \"IIIIIIIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
      },
      {
        "input": "s = \"IDIDIDDDDD\"",
        "output": "[0, 10, 1, 9, 2, 8, 7, 6, 5, 4, 3]"
      },
      {
        "input": "s = \"IIIIIIIIIIIDDDDDDDDIIIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 28, 27, 26, 25, 24, 23, 22, 21, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "s = \"IDIDIDIDDDD\"",
        "output": "[0, 11, 1, 10, 2, 9, 3, 8, 7, 6, 5, 4]"
      },
      {
        "input": "s = \"DDDDDDDDDDDD\"",
        "output": "[12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"IIIIIDDDDDID\"",
        "output": "[0, 1, 2, 3, 4, 12, 11, 10, 9, 8, 5, 7, 6]"
      },
      {
        "input": "s = \"IDDDDDDDDDDDDIIIIIIIII\"",
        "output": "[0, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "s = \"IIDIDIDIDI\"",
        "output": "[0, 1, 10, 2, 9, 3, 8, 4, 7, 5, 6]"
      },
      {
        "input": "s = \"IIIIIDDDDDDDDD\"",
        "output": "[0, 1, 2, 3, 4, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5]"
      },
      {
        "input": "s = \"IIDIDIDIDID\"",
        "output": "[0, 1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]"
      },
      {
        "input": "s = \"DDDIDIDIDID\"",
        "output": "[11, 10, 9, 0, 8, 1, 7, 2, 6, 3, 5, 4]"
      },
      {
        "input": "s = \"IIIDDDIIID\"",
        "output": "[0, 1, 2, 10, 9, 8, 3, 4, 5, 7, 6]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIIIIID\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18]"
      },
      {
        "input": "s = \"DDIIDDIDID\"",
        "output": "[10, 9, 0, 1, 8, 7, 2, 6, 3, 5, 4]"
      },
      {
        "input": "s = \"DDDDIDDDDDDD\"",
        "output": "[12, 11, 10, 9, 0, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDD\"",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"DIIDIDIDID\"",
        "output": "[10, 0, 1, 9, 2, 8, 3, 7, 4, 6, 5]"
      },
      {
        "input": "s = \"IDDDDDDDDIII\"",
        "output": "[0, 12, 11, 10, 9, 8, 7, 6, 5, 1, 2, 3, 4]"
      },
      {
        "input": "s = \"DDDDDDDDD\"",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"DDDIDDDDDDDD\"",
        "output": "[12, 11, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IIIIDDDDIII\"",
        "output": "[0, 1, 2, 3, 11, 10, 9, 8, 4, 5, 6, 7]"
      },
      {
        "input": "s = \"IIDIDID\"",
        "output": "[0, 1, 7, 2, 6, 3, 5, 4]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "s = \"IDIDDDIDID\"",
        "output": "[0, 10, 1, 9, 8, 7, 2, 6, 3, 5, 4]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDDDDDD\"",
        "output": "[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"DDDDDDDDDD\"",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"DDDDDDDDDDI\"",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDID\"",
        "output": "[0, 16, 1, 15, 2, 14, 3, 13, 4, 12, 5, 11, 6, 10, 7, 9, 8]"
      },
      {
        "input": "s = \"DDDDDDDDDDDII\"",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0, 1, 2]"
      },
      {
        "input": "s = \"IIIIIDIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 12, 5, 6, 7, 8, 9, 10, 11]"
      },
      {
        "input": "s = \"IIDDDDDDDDDD\"",
        "output": "[0, 1, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "s = \"IIIIIIIDDDD\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 11, 10, 9, 8, 7]"
      },
      {
        "input": "s = \"IIIIDDDDDDID\"",
        "output": "[0, 1, 2, 3, 12, 11, 10, 9, 8, 7, 4, 6, 5]"
      },
      {
        "input": "s = \"DDDDDIDDDDD\"",
        "output": "[11, 10, 9, 8, 7, 0, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDDDIIII\"",
        "output": "[8, 7, 6, 5, 0, 1, 2, 3, 4]"
      },
      {
        "input": "s = \"IIIIIIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
      },
      {
        "input": "s = \"IIIIIIIIIIIDDDDDDDDDD\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11]"
      },
      {
        "input": "s = \"DDDDDDDIIIII\"",
        "output": "[12, 11, 10, 9, 8, 7, 6, 0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "s = \"IDIDIDIDDDDD\"",
        "output": "[0, 12, 1, 11, 2, 10, 3, 9, 8, 7, 6, 5, 4]"
      },
      {
        "input": "s = \"DDIDIDIDID\"",
        "output": "[10, 9, 0, 8, 1, 7, 2, 6, 3, 5, 4]"
      },
      {
        "input": "s = \"DDIIDDDIIID\"",
        "output": "[11, 10, 0, 1, 9, 8, 7, 2, 3, 4, 6, 5]"
      },
      {
        "input": "s = \"IIDDDDDDII\"",
        "output": "[0, 1, 10, 9, 8, 7, 6, 5, 2, 3, 4]"
      },
      {
        "input": "s = \"IIDIDIDID\"",
        "output": "[0, 1, 9, 2, 8, 3, 7, 4, 6, 5]"
      },
      {
        "input": "s = \"DDDDDDDIIIIIII\"",
        "output": "[14, 13, 12, 11, 10, 9, 8, 0, 1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIIDDDDDDDDDDDD\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14]"
      },
      {
        "input": "s = \"IIIIIDDDDIII\"",
        "output": "[0, 1, 2, 3, 4, 12, 11, 10, 9, 5, 6, 7, 8]"
      },
      {
        "input": "s = \"DIDIDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[25, 0, 24, 1, 23, 2, 22, 3, 21, 4, 20, 5, 19, 6, 18, 7, 17, 8, 16, 9, 15, 10, 14, 11, 13, 12]"
      },
      {
        "input": "s = \"DDDDIIIIIIIDDDIIIIIDDDIIII\"",
        "output": "[26, 25, 24, 23, 0, 1, 2, 3, 4, 5, 6, 22, 21, 20, 7, 8, 9, 10, 11, 19, 18, 17, 12, 13, 14, 15, 16]"
      },
      {
        "input": "s = \"IIIDDDDDDD\"",
        "output": "[0, 1, 2, 10, 9, 8, 7, 6, 5, 4, 3]"
      },
      {
        "input": "s = \"IIIIIDDDDD\"",
        "output": "[0, 1, 2, 3, 4, 10, 9, 8, 7, 6, 5]"
      },
      {
        "input": "s = \"DDDDDDDDDDIIII\"",
        "output": "[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 1, 2, 3, 4]"
      },
      {
        "input": "s = \"IDDDDDDDDDDD\"",
        "output": "[0, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDDDIIIIIIIIIIIIDDDDD\"",
        "output": "[21, 20, 19, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 16, 15, 14, 13, 12]"
      },
      {
        "input": "s = \"IIIIIDDDDDD\"",
        "output": "[0, 1, 2, 3, 4, 11, 10, 9, 8, 7, 6, 5]"
      },
      {
        "input": "s = \"IIDIIIIIDDDD\"",
        "output": "[0, 1, 12, 2, 3, 4, 5, 6, 11, 10, 9, 8, 7]"
      },
      {
        "input": "s = \"DDDDDDDDIII\"",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 0, 1, 2, 3]"
      },
      {
        "input": "s = \"DDIDIDIDIDID\"",
        "output": "[12, 11, 0, 10, 1, 9, 2, 8, 3, 7, 4, 6, 5]"
      },
      {
        "input": "s = \"DDDDDDDDDIDIDID\"",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 0, 6, 1, 5, 2, 4, 3]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "s = \"IIDDDIIIDDD\"",
        "output": "[0, 1, 11, 10, 9, 2, 3, 4, 8, 7, 6, 5]"
      },
      {
        "input": "s = \"DIDIDIDIDI\"",
        "output": "[10, 0, 9, 1, 8, 2, 7, 3, 6, 4, 5]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDD\"",
        "output": "[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"DDDDDDIDDDII\"",
        "output": "[12, 11, 10, 9, 8, 7, 0, 6, 5, 4, 1, 2, 3]"
      },
      {
        "input": "s = \"IDIDDDDDDD\"",
        "output": "[0, 10, 1, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDIDIDIDIDID\"",
        "output": "[0, 24, 1, 23, 2, 22, 3, 21, 4, 20, 5, 19, 6, 18, 7, 17, 8, 16, 9, 15, 10, 14, 11, 13, 12]"
      },
      {
        "input": "s = \"DDDDIIIIIII\"",
        "output": "[11, 10, 9, 8, 0, 1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "s = \"DDDDDDIIID\"",
        "output": "[10, 9, 8, 7, 6, 5, 0, 1, 2, 4, 3]"
      },
      {
        "input": "s = \"IDIDIDIDIDIDIDIDIDID\"",
        "output": "[0, 20, 1, 19, 2, 18, 3, 17, 4, 16, 5, 15, 6, 14, 7, 13, 8, 12, 9, 11, 10]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDD\"",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"IIDDDDDDID\"",
        "output": "[0, 1, 10, 9, 8, 7, 6, 5, 2, 4, 3]"
      },
      {
        "input": "s = \"IIIIIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
      },
      {
        "input": "s = \"DDDDDDIIII\"",
        "output": "[10, 9, 8, 7, 6, 5, 0, 1, 2, 3, 4]"
      },
      {
        "input": "s = \"DDDDIIDDII\"",
        "output": "[10, 9, 8, 7, 0, 1, 6, 5, 2, 3, 4]"
      },
      {
        "input": "s = \"DIDIDIDIDID\"",
        "output": "[11, 0, 10, 1, 9, 2, 8, 3, 7, 4, 6, 5]"
      },
      {
        "input": "s = \"DDDDDDDDDDDID\"",
        "output": "[13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 0, 2, 1]"
      },
      {
        "input": "s = \"DDDDDDDDDDD\"",
        "output": "[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "s = \"DDIIIDDDII\"",
        "output": "[10, 9, 0, 1, 2, 8, 7, 6, 3, 4, 5]"
      },
      {
        "input": "s = \"DDDDDDDDDIIIIIIIIIIDDDDDDDD\"",
        "output": "[27, 26, 25, 24, 23, 22, 21, 20, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 18, 17, 16, 15, 14, 13, 12, 11, 10]"
      },
      {
        "input": "s = \"DDDDDIIIIII\"",
        "output": "[11, 10, 9, 8, 7, 0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "s = \"IIDDDDDIII\"",
        "output": "[0, 1, 10, 9, 8, 7, 6, 2, 3, 4, 5]"
      },
      {
        "input": "s = \"IDIDDDDDDDDDDD\"",
        "output": "[0, 14, 1, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDIIIIIIIIIIIII\"",
        "output": "[26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
      },
      {
        "input": "s = \"IIDDDDIIID\"",
        "output": "[0, 1, 10, 9, 8, 7, 2, 3, 4, 6, 5]"
      },
      {
        "input": "s = \"IIIIIIIIIIIID\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12]"
      },
      {
        "input": "s = \"DDIIDDDIID\"",
        "output": "[10, 9, 0, 1, 8, 7, 6, 2, 3, 5, 4]"
      },
      {
        "input": "s = \"DIDIDIDID\"",
        "output": "[9, 0, 8, 1, 7, 2, 6, 3, 5, 4]"
      },
      {
        "input": "s = \"IIIIIIIDDDDDDD\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 14, 13, 12, 11, 10, 9, 8, 7]"
      },
      {
        "input": "s = \"IDDDDDDDDD\"",
        "output": "[0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IIIIIIIIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "s = \"IIIIIIIIIIID\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11]"
      },
      {
        "input": "s = \"IDIDIDDDDDD\"",
        "output": "[0, 11, 1, 10, 2, 9, 8, 7, 6, 5, 4, 3]"
      },
      {
        "input": "s = \"IIDDDDDDDD\"",
        "output": "[0, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "s = \"IIDDDDDDDDID\"",
        "output": "[0, 1, 12, 11, 10, 9, 8, 7, 6, 5, 2, 4, 3]"
      },
      {
        "input": "s = \"IIIIIIIII\"",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "s = \"IDDDDDDDDDD\"",
        "output": "[0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"IIIIIDIDIDIDIDIDIDDD\"",
        "output": "[0, 1, 2, 3, 4, 20, 5, 19, 6, 18, 7, 17, 8, 16, 9, 15, 10, 14, 13, 12, 11]"
      },
      {
        "input": "s = \"DDDDDDDDDDDDDDDIDDD\"",
        "output": "[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 4, 3, 2, 1]"
      },
      {
        "input": "s = \"DDDDDDDDDDDIII\"",
        "output": "[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 0, 1, 2, 3]"
      },
      {
        "input": "s = \"DIIIDDDIIIID\"",
        "output": "[12, 0, 1, 2, 11, 10, 9, 3, 4, 5, 6, 8, 7]"
      },
      {
        "input": "s = \"IDDDIDDDID\"",
        "output": "[0, 10, 9, 8, 1, 7, 6, 5, 2, 4, 3]"
      }
    ]
  },
  {
    "id": 2331,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "You are given the root of a full binary tree with the following properties:\n\nLeaf nodes have either the value 0 or 1, where 0 represents False and 1 represents True.\nNon-leaf nodes have either the value 2 or 3, where 2 represents the boolean OR and 3 represents the boolean AND.\n\nThe evaluation of a node is as follows:\n\nIf the node is a leaf node, the evaluation is the value of the node, i.e. True or False.\nOtherwise, evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.\n\nReturn the boolean result of evaluating the root node.\nA full binary tree is a binary tree where each node has either 0 or 2 children.\nA leaf node is a node that has zero children.\n\u00a0\nExample 1:\n\n\nInput: root = [2,1,3,null,null,0,1]\nOutput: true\nExplanation: The above diagram illustrates the evaluation process.\nThe AND node evaluates to False AND True = False.\nThe OR node evaluates to True OR False = True.\nThe root node evaluates to True, so we return true.\nExample 2:\n\nInput: root = [0]\nOutput: false\nExplanation: The root node is a leaf node and it evaluates to false, so we return false.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 1000].\n0 <= Node.val <= 3\nEvery node has either 0 or 2 children.\nLeaf nodes have a value of 0 or 1.\nNon-leaf nodes have a value of 2 or 3.\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def evaluateTree(self, root: Optional[TreeNode]) -> bool:\n        ",
    "testCases": [
      {
        "input": "root = [3,1,1,null,null,0,0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,1,null,null,0,1]",
        "output": "True"
      },
      {
        "input": "root = [2,3,2,null,null,1,1,null,null,null,null]",
        "output": "True"
      },
      {
        "input": "root = [2,1,1]",
        "output": "True"
      },
      {
        "input": "root = [2,3,3,1,1,0,0]",
        "output": "True"
      },
      {
        "input": "root = [3,2,2,3,3,3,3,1,1,1,1,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "root = [3,2,2,null,null,0,0,null,null,1,0,null,null,1,1]",
        "output": "True"
      },
      {
        "input": "root = [3,0,0,null,null,null,null]",
        "output": "False"
      },
      {
        "input": "root = [3,0,1,null,null,null,null]",
        "output": "False"
      },
      {
        "input": "root = [3,0,0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,3,2,2,2,2,0,0,0,0,0,0,0,0]",
        "output": "False"
      },
      {
        "input": "root = [3,0,1]",
        "output": "False"
      },
      {
        "input": "root = [2,2,3,0,1,0,1]",
        "output": "True"
      },
      {
        "input": "root = [2,3,2,null,null,0,1,null,null,0,1]",
        "output": "True"
      },
      {
        "input": "root = [0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,3,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [3,2,2,0,0,1,1]",
        "output": "False"
      },
      {
        "input": "root = [3,3,2,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,1,3,null,null,0,1]",
        "output": "True"
      },
      {
        "input": "root = [2,2,2,1,0,0,1]",
        "output": "True"
      },
      {
        "input": "root = [2,3,2,0,1,1,0]",
        "output": "True"
      },
      {
        "input": "root = [2,1,1,null,null,null,null]",
        "output": "True"
      },
      {
        "input": "root = [3,2,3,3,2,1,1,1,0,0,0,0,0,0,0]",
        "output": "False"
      },
      {
        "input": "root = [2,2,3,2,2,2,3,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [3,2,3,3,2,2,2,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,3,3,2,2,2,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,2,3,1,0,3,1,0,1,0,1,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,3,3,2,2,3,3,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [3,2,3,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "True"
      },
      {
        "input": "root = [3,2,2,1,0,1,0,0,1,1,0,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [3,2,3,2,3,2,3,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,2,3,2,1,0,1,null,null,null,null,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,2,3,1,3,0,1,0,1,3,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [3,2,3,2,1,1,0,0,0,1,0,0,1,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,2,3,1,3,0,1,0,1,1,0,0,1,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,3,2,3,2,3,2,2,2,2,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,2,3,2,3,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,2,2,3,3,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,3,3,3,3,3,3,3,3,3,3,3,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,2,3,3,3,2,2,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,2,2,3,2,3,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,3,2,2,2,3,2,3,2,3,2,3,2,3,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "root = [2,3,3,2,2,1,0,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,3,2,2,2,2,3,3,3,3,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,2,3,2,3,2,3,2,3,2,3,2,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,2,0,1,3,1,0,0,1,1,0,1,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,3,2,2,3,3,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,2,3,1,1,0,0,1,0,1,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,3,2,0,1,0,1,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,3,2,0,0,1,3,1,0,1,3,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [3,3,3,3,3,3,3,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [3,2,2,0,1,1,0,3,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,2,1,0,1,2,1,0,0,1,1,0,0]",
        "output": "True"
      },
      {
        "input": "root = [2,2,2,1,2,1,3,0,0,0,1,1,0,1,0]",
        "output": "True"
      },
      {
        "input": "root = [3,3,3,2,2,2,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [3,3,3,2,1,1,0,2,0,1,1,0,2,0,1]",
        "output": "False"
      },
      {
        "input": "root = [3,2,2,3,3,3,3,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,2,2,1,0,3,3,1,0,1,0,1,0,1,0,3,1,0,1,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,2,3,2,3,2,3,3,2,3,2,3,2,3,2,3,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,3,1,1,0,0,0,0,1,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,2,3,3,1,1,0,2,0,1,1,0,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,2,2,3,3,3,3,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,2,2,1,0,0,1,3,1,0,1,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [2,2,3,2,3,2,3,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,2,2,2,2,2,2,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [3,2,3,1,1,1,1,3,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3,0,0,0,0,3,0]",
        "output": "False"
      },
      {
        "input": "root = [2,2,3,2,2,3,3,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,3,2,3,2,3,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [3,3,3,2,2,2,2,1,0,1,0,1,0,1,0,3,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,2,3,2,3,2,3,3,3,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,2,3,0,1,2,1,3,0,1,0,1,3,0,1]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,1,0,3,1,1,0,0,1,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [3,2,2,1,0,1,0,3,1,0,1,0,3,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [3,2,2,2,2,2,2,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [2,2,2,2,2,2,2,2,2,2,2,2,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,2,3,3,2,2,2,3,3,3,3,2,2,2,2,3,3,3,3,2,2,2,2,1,1,1,1,0,0,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,3,2,3,2,3,2,0,1,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,2,2,2,0,0,1,3,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,2,3,2,3,1,1,0,0,1,0,1,0,0,1]",
        "output": "False"
      },
      {
        "input": "root = [2,3,3,2,3,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,1,0,3,1,3,0,1,2,1,0,1,2,3,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,3,2,2,0,1,1,0,0,1,1,1,0,0]",
        "output": "True"
      },
      {
        "input": "root = [3,2,2,3,3,3,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,2,2,3,3,0,1,1,0,0,1,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,2,3,2,3,2,3,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,2,2,3,3,1,1,3,1,0,3,0,1,3,0]",
        "output": "True"
      },
      {
        "input": "root = [3,3,3,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,3,3,1,0,1,2,0,1,0,1,0,1,1]",
        "output": "False"
      },
      {
        "input": "root = [2,1,2,3,0,3,1,1,0,3,0,1,1,0,1,0,3,0,1,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [3,3,3,3,3,2,2,3,3,3,3,2,2,3,3,3,3,2,2,0,0,0,0,0,0,0,0]",
        "output": "False"
      },
      {
        "input": "root = [3,2,2,2,1,3,0,1,0,0,1,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [2,2,3,1,1,0,0,1,1,0,0,1,1]",
        "output": "True"
      },
      {
        "input": "root = [2,2,3,2,3,1,0,1,1,0,0,1,0,1,1]",
        "output": "True"
      },
      {
        "input": "root = [3,3,3,2,2,1,1,1,0,0,1,0,0,0,1]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,3,2,3,2,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1]",
        "output": "True"
      },
      {
        "input": "root = [3,3,3,3,3,2,2,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "root = [2,2,2,3,3,3,3,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,1,2,3,0,1,1,null,null,null,null,0,0]",
        "output": "True"
      },
      {
        "input": "root = [3,2,2,1,1,3,3,0,1,0,1,0,1,0,1,3,0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,3,3,2,3,2,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,1,1,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [2,3,3,3,2,2,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [3,2,2,3,3,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,2,1,1,0,0,1,0,1,0,1,0,0]",
        "output": "False"
      },
      {
        "input": "root = [3,2,3,3,1,1,0,2,1,0,1,2,1,0,0]",
        "output": "False"
      },
      {
        "input": "root = [3,2,2,3,1,0,1,2,0,1,0,2,1,0,0]",
        "output": "False"
      },
      {
        "input": "root = [2,3,2,3,2,2,3,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1]",
        "output": "Error: 'NoneType' object has no attribute 'left'"
      },
      {
        "input": "root = [3,3,2,3,1,2,0,1,0,0,1,0,1,1,0]",
        "output": "False"
      },
      {
        "input": "root = [3,2,2,3,1,3,3,1,0,1,0,1,0,0,1]",
        "output": "False"
      }
    ]
  },
  {
    "id": 121,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\u00a0\nExample 1:\n\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\nExample 2:\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n\n\u00a0\nConstraints:\n\n1 <= prices.length <= 105\n0 <= prices[i] <= 104\n\n",
    "starterCode": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "prices = [10,9,8,2]",
        "output": "0"
      },
      {
        "input": "prices = [1]",
        "output": "0"
      },
      {
        "input": "prices = [2,1,2,1,0,1,2]",
        "output": "2"
      },
      {
        "input": "prices = [2,1]",
        "output": "0"
      },
      {
        "input": "prices = [7,6,4,3,1]",
        "output": "0"
      },
      {
        "input": "prices = [3,3,5,0,0,3,1,4]",
        "output": "4"
      },
      {
        "input": "prices = [7,1,5,3,6,4]",
        "output": "5"
      },
      {
        "input": "prices = [1,2,3,4,5]",
        "output": "4"
      },
      {
        "input": "prices = [1,2]",
        "output": "1"
      },
      {
        "input": "prices = [8,9,7,9,8,7,9,10,7,9,8,10,11,10,12]",
        "output": "5"
      },
      {
        "input": "prices = [1,2,3,2,1,4,3,2,1,5,4,3,2,1,6]",
        "output": "5"
      },
      {
        "input": "prices = [7,1,5,3,6,4,1,2,3,8,2,10]",
        "output": "9"
      },
      {
        "input": "prices = [1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "prices = [8,6,7,3,3,5,1,0,6,5]",
        "output": "6"
      },
      {
        "input": "prices = [1,5,3,8,12,10,9,15,18,5,7]",
        "output": "17"
      },
      {
        "input": "prices = [3,2,6,5,0,3,1,5,3,7,10,4,8,12,6,14,2,18,9,20,1,22,10,24,5,26,11,28,12,30,13,32,14,34,15,36,16,38,17,40]",
        "output": "40"
      },
      {
        "input": "prices = [8,3,6,2,8,8,8,4,2,0,9,5,7,6,2]",
        "output": "9"
      },
      {
        "input": "prices = [4,1,2,3,5,6,1,2,3,1,5,6,7,8,1,2,3,1]",
        "output": "7"
      },
      {
        "input": "prices = [897,456,680,509,535,695,890,456,509,535,695,890,456,509,535,695]",
        "output": "434"
      },
      {
        "input": "prices = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "prices = [100, 180, 260, 40, 310, 535, 695, 10, 1]",
        "output": "655"
      },
      {
        "input": "prices = [1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "prices = [100,90,80,50,20,10]",
        "output": "0"
      },
      {
        "input": "prices = [1,2,3,2,3,4,2,3,4,5,3,4,5,6,4,5,6,7,5,6,7,8]",
        "output": "7"
      },
      {
        "input": "prices = [3,2,6,5,0,3]",
        "output": "4"
      },
      {
        "input": "prices = [100,180,260,40,310,535,695]",
        "output": "655"
      },
      {
        "input": "prices = [1,9,2,8,3,7,4,6,5,10]",
        "output": "9"
      },
      {
        "input": "prices = [1,9,6,9,1,7,1,1,5,9,9,9,8,9,8,9,10,9,8,9,10]",
        "output": "9"
      },
      {
        "input": "prices = [1,2,4,2,5,7,2,4,9,0]",
        "output": "8"
      },
      {
        "input": "prices = [10,9,8,7,6,5,4,3,2,1,0]",
        "output": "0"
      },
      {
        "input": "prices = [8,6,4,6,8,9,3,4,5,1]",
        "output": "5"
      },
      {
        "input": "prices = [7, 1, 5, 3, 6, 4, 10, 2, 8, 15]",
        "output": "14"
      },
      {
        "input": "prices = [5,2,3,4,1,6,8,7,8,9]",
        "output": "8"
      },
      {
        "input": "prices = [100,180,260,310,40,535,695]",
        "output": "655"
      },
      {
        "input": "prices = [1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10]",
        "output": "9"
      },
      {
        "input": "prices = [10,10,10,5,5,5,10,10,15,15]",
        "output": "10"
      },
      {
        "input": "prices = [8, 5, 12, 9, 19, 1, 7, 17, 3, 18]",
        "output": "17"
      },
      {
        "input": "prices = [30,15,50,10,60,35,100,40,90,50,120,60,130,70,140,80,150,90]",
        "output": "140"
      },
      {
        "input": "prices = [10,9,8,7,6,5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "prices = [50,20,30,10,50,20,30,10,50,20,30,10,50,20,30,10,50,20,30,10,50]",
        "output": "40"
      },
      {
        "input": "prices = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "1"
      },
      {
        "input": "prices = [8,4,6,2,3,10,14,11,13]",
        "output": "12"
      },
      {
        "input": "prices = [100,90,80,70,60,50,40,30,20,10]",
        "output": "0"
      },
      {
        "input": "prices = [1,5,3,7,10,4,8,12,6,14,2,18,9,20,1,22,10,24,5,26,11,28,12,30,13,32,14,34,15,36]",
        "output": "35"
      },
      {
        "input": "prices = [5,4,3,2,1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "prices = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "0"
      },
      {
        "input": "prices = [7,1,5,3,6,4,8,9,2,1,5,6,3,10]",
        "output": "9"
      },
      {
        "input": "prices = [10,20,10,20,10,20,10,20,10,20,10,20,10,20]",
        "output": "10"
      },
      {
        "input": "prices = [1,3,2,5,7,11,8,12,14,15]",
        "output": "14"
      },
      {
        "input": "prices = [1,2,3,2,1,2,3,2,1,2,3,2,1,2,3]",
        "output": "2"
      },
      {
        "input": "prices = [10,1,1,6,9,1,2,1,8,1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "prices = [1, 5, 3, 8, 12, 7, 9, 2, 3, 15, 10]",
        "output": "14"
      },
      {
        "input": "prices = [8,6,7,8,4,9,1,9,4,5]",
        "output": "8"
      },
      {
        "input": "prices = [1,2,3,4,5,4,3,2,1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "prices = [1,2,1,3,1,2,3,1,2,3,4]",
        "output": "3"
      },
      {
        "input": "prices = [5,2,3,0,3,1,6,2,8,3,4]",
        "output": "8"
      },
      {
        "input": "prices = [7,1,5,3,6,4,10,2,3,4,5,6,7,8,9,1]",
        "output": "9"
      },
      {
        "input": "prices = [7,1,5,3,6,4,1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "prices = [1,5,3,6,7,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "prices = [10,1,1,1,10,1,1,1,10,1,1,1,10,1,1,1]",
        "output": "9"
      },
      {
        "input": "prices = [1,9,1,9,1,9,1,9,1,9]",
        "output": "8"
      },
      {
        "input": "prices = [100,200,300,100,150,200,250,100,150,200,250,300,100,150,200,250]",
        "output": "200"
      },
      {
        "input": "prices = [1,3,2,8,4,9,3,5,2,10,1,3,7,2,4,9,1,6,3,5]",
        "output": "9"
      },
      {
        "input": "prices = [1,9,18,2,7,21,12,17,6,19]",
        "output": "20"
      },
      {
        "input": "prices = [1,3,1,3,1,3,1,3,1,3,1,3,1,3,1]",
        "output": "2"
      },
      {
        "input": "prices = [10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "9"
      },
      {
        "input": "prices = [5,11,3,50,60,90,70,80,65,30,55,95]",
        "output": "92"
      },
      {
        "input": "prices = [1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "prices = [8,6,4,3,3,5,10,0,6,2,9,10,4,7,1]",
        "output": "10"
      },
      {
        "input": "prices = [1,2,3,4,1,2,3,4,5,6,1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "prices = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "prices = [2,2,5,11,1,3,4,11,1,2,11,3,4]",
        "output": "10"
      },
      {
        "input": "prices = [1,7,2,9,4,6,3,8,5,10]",
        "output": "9"
      },
      {
        "input": "prices = [9,8,7,6,5,4,3,2,1,0]",
        "output": "0"
      },
      {
        "input": "prices = [1,2,2,2,2,2,2,2,2,2]",
        "output": "1"
      },
      {
        "input": "prices = [10,22,5,75,65,80]",
        "output": "75"
      },
      {
        "input": "prices = [1,2,4,2,5,7,2,4,9,0,9]",
        "output": "9"
      },
      {
        "input": "prices = [1,9,6,9,2,8,7,1,9,4,9,2,3,8,1,6,5,8,1,1,5]",
        "output": "8"
      },
      {
        "input": "prices = [5,3,6,7,2,8,1,4,9,10,1,11]",
        "output": "10"
      },
      {
        "input": "prices = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "prices = [1,2,3,2,4,5,4,3,2,1,9,8,7,6,5,4,3,2,1]",
        "output": "8"
      },
      {
        "input": "prices = [1,9,6,9,1,7,1,1,5,9,9,9,8]",
        "output": "8"
      },
      {
        "input": "prices = [1,9,6,9,1,7,1,1,5,9,9,9]",
        "output": "8"
      },
      {
        "input": "prices = [5,2,6,1,9,12,9,12,12,1,5,3,3,5,2,8,10,9,1,2]",
        "output": "11"
      },
      {
        "input": "prices = [1,3,2,8,4,9,3,5,10,6,2,3,1,5,20,3,1,2,3,10]",
        "output": "19"
      },
      {
        "input": "prices = [10,7,5,8,11,9]",
        "output": "6"
      },
      {
        "input": "prices = [1,5,3,7,10,4,8,12,6,14,2,18,9,20,1,22,10,24,5,26,11,28,12,30,13,32]",
        "output": "31"
      },
      {
        "input": "prices = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "9"
      },
      {
        "input": "prices = [3, 3, 5, 0, 0, 3, 1, 4]",
        "output": "4"
      },
      {
        "input": "prices = [1,2,4,2,5,7,2,4,9,0,1,2,4,2,5,7,2,4,9,0,1,2,4,2,5,7,2,4,9,0]",
        "output": "9"
      },
      {
        "input": "prices = [1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100]",
        "output": "99"
      },
      {
        "input": "prices = [1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]",
        "output": "3"
      },
      {
        "input": "prices = [100,90,80,70,60,50,40,30,20,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "9"
      },
      {
        "input": "prices = [5,9,1,6,2,8,3,7,4,10]",
        "output": "9"
      },
      {
        "input": "prices = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "0"
      },
      {
        "input": "prices = [10,1,1,10,1,1,10,1,1,10,1,1,10,1,1,10,1,1,10,1,1,10,1,1]",
        "output": "9"
      },
      {
        "input": "prices = [310,310,275,275,260,260,260,230,230,230]",
        "output": "0"
      },
      {
        "input": "prices = [1, 2, 4, 2, 5, 7, 2, 4, 9, 0]",
        "output": "8"
      },
      {
        "input": "prices = [1, 3, 2, 4, 7, 5, 8, 11, 9, 13]",
        "output": "12"
      }
    ]
  },
  {
    "id": 1827,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array"
    ],
    "problemDescription": "You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.\\r\n\\r\n\\r\n\tFor example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].\\r\n\\r\n\\r\nReturn the minimum number of operations needed to make nums strictly increasing.\\r\n\\r\nAn array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.\\r\n\\r\n\u00a0\\r\nExample 1:\\r\n\\r\n\\r\nInput: nums = [1,1,1]\\r\nOutput: 3\\r\nExplanation: You can do the following operations:\\r\n1) Increment nums[2], so nums becomes [1,1,2].\\r\n2) Increment nums[1], so nums becomes [1,2,2].\\r\n3) Increment nums[2], so nums becomes [1,2,3].\\r\n\\r\n\\r\nExample 2:\\r\n\\r\n\\r\nInput: nums = [1,5,2,4,1]\\r\nOutput: 14\\r\n\\r\n\\r\nExample 3:\\r\n\\r\n\\r\nInput: nums = [8]\\r\nOutput: 0\\r\n\\r\n\\r\n\u00a0\\r\nConstraints:\\r\n\\r\n\\r\n\t1 <= nums.length <= 5000\\r\n\t1 <= nums[i] <= 104\\r\n",
    "starterCode": "class Solution:\n    def minOperations(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "20"
      },
      {
        "input": "nums = [10000,1,1,1,1]",
        "output": "40006"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4]",
        "output": "25"
      },
      {
        "input": "nums = [1]",
        "output": "0"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,1]",
        "output": "109"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5]",
        "output": "7"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5]",
        "output": "25"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4]",
        "output": "16"
      },
      {
        "input": "nums = [8]",
        "output": "0"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1]",
        "output": "3"
      },
      {
        "input": "nums = [10000, 10000, 10000, 10000, 10000]",
        "output": "10"
      },
      {
        "input": "nums = [10000,10000,10000,10000]",
        "output": "6"
      },
      {
        "input": "nums = [1,5,2,4,1]",
        "output": "14"
      },
      {
        "input": "nums = [100000,90000,80000,70000,60000]",
        "output": "100010"
      },
      {
        "input": "nums = [1,100,1000,10000,100000]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7]",
        "output": "35"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10]",
        "output": "2"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20]",
        "output": "400"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "66"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1]",
        "output": "10"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "380"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "4095"
      },
      {
        "input": "nums = [10000,9000,8000,7000,6000,5000,4000,3000,2000,1000]",
        "output": "45045"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "380"
      },
      {
        "input": "nums = [3,3,3,3,2,2,2,2,1,1,1,1,0,0,0,0,-1,-1,-1,-1]",
        "output": "230"
      },
      {
        "input": "nums = [1,100,50,200,100,300,150,400,200,500]",
        "output": "504"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "190"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "0"
      },
      {
        "input": "nums = [1, 5, 10, 15, 20, 25, 20, 25, 30, 35]",
        "output": "8"
      },
      {
        "input": "nums = [10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991]",
        "output": "90"
      },
      {
        "input": "nums = [5, 6, 6, 10, 8, 11, 11, 11]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1]",
        "output": "20"
      },
      {
        "input": "nums = [100,200,300,200,100,200,300,400,500]",
        "output": "410"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "90"
      },
      {
        "input": "nums = [1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,11,1,12,1,13,1,14,1,15]",
        "output": "273"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "0"
      },
      {
        "input": "nums = [1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981]",
        "output": "380"
      },
      {
        "input": "nums = [10,9,10,8,10,7,10,6,10,5,10,4,10,3,10,2,10,1,10]",
        "output": "216"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "870"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10]",
        "output": "300"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]",
        "output": "0"
      },
      {
        "input": "nums = [5,3,2,1,0]",
        "output": "24"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "6215"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]",
        "output": "225"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "0"
      },
      {
        "input": "nums = [59, 57, 55, 53, 51, 49, 47, 45, 43, 41, 39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "1305"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 21, 20, 22, 21, 23, 22, 24, 23, 25]",
        "output": "35"
      },
      {
        "input": "nums = [10000, 1000, 100, 10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "189064"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14,17,16,19,18,21]",
        "output": "18"
      },
      {
        "input": "nums = [5000,4999,4998,4997,4996,4995,4994,4993,4992,4991,4990,4989,4988,4987,4986,4985,4984,4983,4982,4981,4980,4979,4978,4977,4976,4975,4974,4973,4972,4971,4970]",
        "output": "930"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2]",
        "output": "180"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15]",
        "output": "35"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]",
        "output": "375"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "480"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "100"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "25"
      },
      {
        "input": "nums = [5,6,6,8,8,9,9,10,10,10,11]",
        "output": "18"
      },
      {
        "input": "nums = [100,90,80,70,60,50,40,30,20,10,5,3,2,1]",
        "output": "930"
      },
      {
        "input": "nums = [5, 3, 5, 3, 5, 3, 5, 3, 5, 3]",
        "output": "55"
      },
      {
        "input": "nums = [5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "172"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "65"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4]",
        "output": "189"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5]",
        "output": "6"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "45"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]",
        "output": "36"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]",
        "output": "81"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10]",
        "output": "80"
      },
      {
        "input": "nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9]",
        "output": "486"
      },
      {
        "input": "nums = [10000,9999,9998,9997,9996,9995,9994,9993,9992,9991,9990]",
        "output": "110"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14]",
        "output": "14"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 1, 3, 2, 4, 3, 5, 4, 6]",
        "output": "24"
      },
      {
        "input": "nums = [100,200,300,400,500,600,700,800,900,1000,50,150,250,350,450,550,650,750,850,950]",
        "output": "5055"
      },
      {
        "input": "nums = [10000, 9000, 8000, 7000, 6000, 5000, 4000, 3000, 2000, 1000]",
        "output": "45045"
      },
      {
        "input": "nums = [1000,2000,3000,4000,5000,4000,3000,2000,1000,500,250,125,62,31,15,7,3,1,1,1,1,1,1,1,1]",
        "output": "89209"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "280"
      },
      {
        "input": "nums = [5,4,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "260"
      },
      {
        "input": "nums = [2, 3, 3, 5, 5, 5, 6, 7, 8, 8, 9, 9, 9]",
        "output": "25"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11]",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 10, 11, 10, 12, 11, 13, 12, 14]",
        "output": "15"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "464"
      },
      {
        "input": "nums = [10, 9, 10, 9, 10, 9, 10, 9, 10, 9]",
        "output": "50"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7]",
        "output": "133"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "212"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "189"
      },
      {
        "input": "nums = [1,3,5,2,4,6,7,8,9,10]",
        "output": "17"
      },
      {
        "input": "nums = [100,50,100,50,100,50,100,50,100,50,100,50,100,50,100,50,100,50,100,50]",
        "output": "690"
      },
      {
        "input": "nums = [1,3,2,4,3,5,4,6,5,7,6,8,7,9,8,10,9,11,10,12]",
        "output": "99"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "1128"
      },
      {
        "input": "nums = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "22935"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "4140"
      },
      {
        "input": "nums = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "171"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14]",
        "output": "14"
      },
      {
        "input": "nums = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 100, 100, 100]",
        "output": "7278"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]",
        "output": "72"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "0"
      },
      {
        "input": "nums = [100,100,100,100,100,101,101,101,101,101,102,102,102,102,102,103,103,103,103,103,104,104,104,104,104,105,105,105,105,105]",
        "output": "360"
      },
      {
        "input": "nums = [5,4,3,2,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "155"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]",
        "output": "75"
      },
      {
        "input": "nums = [1, 1, 10, 10, 100, 100, 1000, 1000, 10000, 10000]",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6]",
        "output": "36"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10]",
        "output": "280"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "100"
      },
      {
        "input": "nums = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "45"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 6, 7, 8, 9, 10]",
        "output": "40"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "496"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "100"
      },
      {
        "input": "nums = [5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5,5,4,3,2,1,1,2,3,4,5]",
        "output": "1325"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12]",
        "output": "99"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2]",
        "output": "180"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "45"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "190"
      },
      {
        "input": "nums = [1,10,20,30,40,50,60,70,80,90,100,90,80,70,60,50,40,30,20,10]",
        "output": "495"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "105"
      },
      {
        "input": "nums = [1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10]",
        "output": "252"
      }
    ]
  },
  {
    "id": 2089,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums and a target element target.\nA target index is an index i such that nums[i] == target.\nReturn a list of the target indices of nums after sorting nums in non-decreasing order. If there are no target indices, return an empty list. The returned list must be sorted in increasing order.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,5,2,3], target = 2\nOutput: [1,2]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe indices where nums[i] == 2 are 1 and 2.\n\nExample 2:\n\nInput: nums = [1,2,5,2,3], target = 3\nOutput: [3]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe index where nums[i] == 3 is 3.\n\nExample 3:\n\nInput: nums = [1,2,5,2,3], target = 5\nOutput: [4]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe index where nums[i] == 5 is 4.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i], target <= 100\n\n",
    "starterCode": "class Solution:\n    def targetIndices(self, nums: List[int], target: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [100,99,98,97,96], target = 98",
        "output": "[2]"
      },
      {
        "input": "nums = [10,20,30,40,50], target = 50",
        "output": "[4]"
      },
      {
        "input": "nums = [7,7,7,7,7], target = 8",
        "output": "[]"
      },
      {
        "input": "nums = [10,20,30,40,50], target = 25",
        "output": "[]"
      },
      {
        "input": "nums = [1,3,5,7,9], target = 0",
        "output": "[]"
      },
      {
        "input": "nums = [50,40,30,20,10], target = 15",
        "output": "[]"
      },
      {
        "input": "nums = [100,100,100], target = 100",
        "output": "[0, 1, 2]"
      },
      {
        "input": "nums = [1,2,5,2,3], target = 3",
        "output": "[3]"
      },
      {
        "input": "nums = [2,4,6,8,10], target = 2",
        "output": "[0]"
      },
      {
        "input": "nums = [5,5,5,5,5], target = 5",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "nums = [1,1,1,1,1], target = 1",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "nums = [5,4,3,2,1], target = 3",
        "output": "[2]"
      },
      {
        "input": "nums = [1,3,5,7,9], target = 2",
        "output": "[]"
      },
      {
        "input": "nums = [1,2,2,2,3,4], target = 2",
        "output": "[1, 2, 3]"
      },
      {
        "input": "nums = [1,2,5,2,3], target = 2",
        "output": "[1, 2]"
      },
      {
        "input": "nums = [50,50,50,50,50], target = 50",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "nums = [5,5,5,5,5], target = 6",
        "output": "[]"
      },
      {
        "input": "nums = [1,3,5,7,9], target = 10",
        "output": "[]"
      },
      {
        "input": "nums = [100,1,100,1,100], target = 1",
        "output": "[0, 1]"
      },
      {
        "input": "nums = [1,2,5,2,3], target = 5",
        "output": "[4]"
      },
      {
        "input": "nums = [1,1,1,1,1], target = 2",
        "output": "[]"
      },
      {
        "input": "nums = [1,3,5,7,9], target = 4",
        "output": "[]"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 4",
        "output": "[6, 7]"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1], target = 3",
        "output": "[2]"
      },
      {
        "input": "nums = [90,80,70,60,50,40,30,20,10], target = 45",
        "output": "[]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], target = 50",
        "output": "[4]"
      },
      {
        "input": "nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90], target = 95",
        "output": "[5]"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], target = 5",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 2, 4, 6, 8, 10], target = 7",
        "output": "[6]"
      },
      {
        "input": "nums = [1,10,2,9,3,8,4,7,5,6], target = 5",
        "output": "[4]"
      },
      {
        "input": "nums = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45], target = 27",
        "output": "[8]"
      },
      {
        "input": "nums = [7,6,5,4,3,2,1], target = 4",
        "output": "[3]"
      },
      {
        "input": "nums = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6], target = 5",
        "output": "[4]"
      },
      {
        "input": "nums = [5,10,15,20,25,30,35,40,45,50,55,60], target = 35",
        "output": "[6]"
      },
      {
        "input": "nums = [100,100,99,99,98,98,97,97], target = 99",
        "output": "[4, 5]"
      },
      {
        "input": "nums = [45,44,43,42,41,40,39,38,37,36,35,34,33,32,31], target = 37",
        "output": "[6]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 1",
        "output": "[0]"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20], target = 8",
        "output": "[3]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 10",
        "output": "[]"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], target = 5",
        "output": "[4]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], target = 20",
        "output": "[]"
      },
      {
        "input": "nums = [5,3,8,6,2,7,4,1], target = 4",
        "output": "[3]"
      },
      {
        "input": "nums = [42,24,36,18,54,30,48,27,60,39], target = 30",
        "output": "[3]"
      },
      {
        "input": "nums = [5, 3, 8, 6, 2, 7, 4, 1], target = 5",
        "output": "[4]"
      },
      {
        "input": "nums = [100, 50, 30, 70, 20], target = 30",
        "output": "[1]"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], target = 50",
        "output": "[4]"
      },
      {
        "input": "nums = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], target = 8",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [42, 23, 37, 23, 42, 37], target = 37",
        "output": "[2, 3]"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,4,4,4,4,5,5,5,6,6,6,6,7,7,8,8,9,9,10,10], target = 4",
        "output": "[7, 8, 9, 10]"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7], target = 15",
        "output": "[8]"
      },
      {
        "input": "nums = [100,99,98,97,96,95], target = 98",
        "output": "[3]"
      },
      {
        "input": "nums = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], target = 55",
        "output": "[5]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], target = 15",
        "output": "[7]"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10], target = 10",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 10",
        "output": "[9]"
      },
      {
        "input": "nums = [2, 2, 2, 2, 2, 1, 1, 1, 1, 1], target = 2",
        "output": "[5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], target = 55",
        "output": "[]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 1",
        "output": "[0]"
      },
      {
        "input": "nums = [7,14,21,28,35,42,49,56,63,70], target = 35",
        "output": "[4]"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5], target = 3",
        "output": "[6, 7, 8]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], target = 20",
        "output": "[9]"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96], target = 97",
        "output": "[1]"
      },
      {
        "input": "nums = [8,6,6,6,8,6,8,6,8,6,6,6,6,6], target = 6",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [42,27,89,10,56,23,50,78,34,67], target = 50",
        "output": "[5]"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7], target = 8",
        "output": "[]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], target = 10",
        "output": "[18, 19]"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], target = 40",
        "output": "[3]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = 11",
        "output": "[]"
      },
      {
        "input": "nums = [8, 6, 7, 5, 3, 0, 9], target = 7",
        "output": "[4]"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], target = 5",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10], target = 5",
        "output": "[4]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = 10",
        "output": "[9]"
      },
      {
        "input": "nums = [1,3,2,5,4,7,6,9,8,11,10,13,12,15,14], target = 13",
        "output": "[12]"
      },
      {
        "input": "nums = [50,20,30,40,10], target = 30",
        "output": "[2]"
      },
      {
        "input": "nums = [100, 1, 50, 20, 30, 60, 40], target = 30",
        "output": "[2]"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1], target = 6",
        "output": "[5]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 15",
        "output": "[14]"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 10], target = 10",
        "output": "[9]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], target = 15",
        "output": "[14]"
      },
      {
        "input": "nums = [50, 50, 50, 50, 50, 50], target = 50",
        "output": "[0, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], target = 8",
        "output": "[7]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 11",
        "output": "[]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50], target = 20",
        "output": "[1]"
      },
      {
        "input": "nums = [10,20,10,20,10,20,10,20,10,20], target = 20",
        "output": "[5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [10,11,12,13,14,15,16,17,18,19,20], target = 15",
        "output": "[5]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], target = 17",
        "output": "[]"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91], target = 95",
        "output": "[4]"
      },
      {
        "input": "nums = [50,20,30,10,40], target = 30",
        "output": "[2]"
      },
      {
        "input": "nums = [50,50,50,50,50,50,50,50,50,50,50,50,50,50,50], target = 50",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5], target = 6",
        "output": "[]"
      },
      {
        "input": "nums = [3,1,2,5,4,2,3,3,5,1], target = 3",
        "output": "[4, 5, 6]"
      },
      {
        "input": "nums = [50,50,50,50,50,50,50,50,50,50], target = 50",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums = [1], target = 2",
        "output": "[]"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], target = 6",
        "output": "[]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], target = 18",
        "output": "[8]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], target = 5",
        "output": "[4]"
      },
      {
        "input": "nums = [100, 1, 100, 1, 100, 1, 100], target = 1",
        "output": "[0, 1, 2]"
      },
      {
        "input": "nums = [3,1,2,3,1,2,3,1,2,3], target = 2",
        "output": "[3, 4, 5]"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1], target = 5",
        "output": "[4]"
      },
      {
        "input": "nums = [50, 20, 30, 40, 10], target = 20",
        "output": "[1]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19], target = 10",
        "output": "[]"
      },
      {
        "input": "nums = [50, 20, 30, 40, 10, 60, 70, 80, 90, 100], target = 40",
        "output": "[3]"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], target = 10",
        "output": "[9]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 21",
        "output": "[]"
      },
      {
        "input": "nums = [3, 1, 2, 5, 4], target = 4",
        "output": "[3]"
      },
      {
        "input": "nums = [7,8,9,10,11,12,13,14,15,16,17,18,19,20], target = 15",
        "output": "[8]"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10], target = 15",
        "output": "[5]"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100], target = 55",
        "output": "[]"
      },
      {
        "input": "nums = [10, 20, 10, 20, 10, 20], target = 10",
        "output": "[0, 1, 2]"
      },
      {
        "input": "nums = [50,40,30,20,10], target = 30",
        "output": "[2]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500], target = 250",
        "output": "[]"
      },
      {
        "input": "nums = [50,40,30,20,10], target = 20",
        "output": "[1]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 15",
        "output": "[14]"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1], target = 6",
        "output": "[5]"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49], target = 25",
        "output": "[12]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 5",
        "output": "[4]"
      },
      {
        "input": "nums = [3,1,2,4,5,3,3,3,3,3,3,3,3,3,3], target = 3",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
      },
      {
        "input": "nums = [42,37,58,54,19,91,49,100,65,28,74,99,96,33,80,78,60,82,97,71], target = 74",
        "output": "[11]"
      }
    ]
  },
  {
    "id": 1046,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an array of integers stones where stones[i] is the weight of the ith stone.\nWe are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:\n\nIf x == y, both stones are destroyed, and\nIf x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.\n\nAt the end of the game, there is at most one stone left.\nReturn the weight of the last remaining stone. If there are no stones left, return 0.\n\u00a0\nExample 1:\n\nInput: stones = [2,7,4,1,8,1]\nOutput: 1\nExplanation: \nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.\n\nExample 2:\n\nInput: stones = [1]\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= stones.length <= 30\n1 <= stones[i] <= 1000\n\n",
    "starterCode": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "stones = [9,3,2,10,8]",
        "output": "2"
      },
      {
        "input": "stones = [5,5,5,5,5]",
        "output": "5"
      },
      {
        "input": "stones = [5, 5, 5, 5, 5]",
        "output": "5"
      },
      {
        "input": "stones = [3, 3, 3, 3, 3]",
        "output": "3"
      },
      {
        "input": "stones = [10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "stones = [10,4,2,10]",
        "output": "2"
      },
      {
        "input": "stones = [1000,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "535"
      },
      {
        "input": "stones = [3,7,8,9]",
        "output": "3"
      },
      {
        "input": "stones = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10]",
        "output": "1"
      },
      {
        "input": "stones = [30,1,29,2,28,3,27,4,26,5,25,6,24,7,23,8,22,9,21,10,20,11,19,12,18,13,17,14,16,15]",
        "output": "1"
      },
      {
        "input": "stones = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "stones = [3,3,3,3]",
        "output": "0"
      },
      {
        "input": "stones = [10,4,3,100]",
        "output": "83"
      },
      {
        "input": "stones = [5,8,1,2,7]",
        "output": "1"
      },
      {
        "input": "stones = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "stones = [1000,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "971"
      },
      {
        "input": "stones = [2,2,2,2,2,2,2,2,2,2]",
        "output": "0"
      },
      {
        "input": "stones = [10, 4, 3, 100, 56, 89]",
        "output": "28"
      },
      {
        "input": "stones = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]",
        "output": "0"
      },
      {
        "input": "stones = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1]",
        "output": "1"
      },
      {
        "input": "stones = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "stones = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "stones = [10, 4, 3, 100, 5]",
        "output": "78"
      },
      {
        "input": "stones = [1]",
        "output": "1"
      },
      {
        "input": "stones = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1]",
        "output": "1"
      },
      {
        "input": "stones = [1000,999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971]",
        "output": "1"
      },
      {
        "input": "stones = [10,4,3,100,2]",
        "output": "81"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "1"
      },
      {
        "input": "stones = [6,6,6,6,6]",
        "output": "6"
      },
      {
        "input": "stones = [5, 8, 12, 9, 11, 10]",
        "output": "1"
      },
      {
        "input": "stones = [1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1]",
        "output": "995"
      },
      {
        "input": "stones = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "stones = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "0"
      },
      {
        "input": "stones = [2,7,4,1,8,1]",
        "output": "1"
      },
      {
        "input": "stones = [299,298,297,296,295,294,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275,274,273,272,271,270,269,268,267,266,265,264,263,262,261,260,259,258,257,256,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240]",
        "output": "0"
      },
      {
        "input": "stones = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 1]",
        "output": "1"
      },
      {
        "input": "stones = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "1"
      },
      {
        "input": "stones = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]",
        "output": "971"
      },
      {
        "input": "stones = [299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270]",
        "output": "1"
      },
      {
        "input": "stones = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "0"
      },
      {
        "input": "stones = [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970]",
        "output": "1"
      },
      {
        "input": "stones = [5,8,12,19,22,33,44,55,66,77,88,99,100]",
        "output": "0"
      },
      {
        "input": "stones = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 999, 899, 799, 699, 599, 499, 399, 299, 199, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90]",
        "output": "76"
      },
      {
        "input": "stones = [999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "0"
      },
      {
        "input": "stones = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "stones = [9,8,7,6,5,4,3,2,1]",
        "output": "1"
      },
      {
        "input": "stones = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1]",
        "output": "499"
      },
      {
        "input": "stones = [500, 400, 300, 200, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]",
        "output": "0"
      },
      {
        "input": "stones = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "1"
      },
      {
        "input": "stones = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "stones = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60]",
        "output": "2"
      },
      {
        "input": "stones = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300]",
        "output": "10"
      },
      {
        "input": "stones = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "1"
      },
      {
        "input": "stones = [500, 400, 300, 200, 100, 50, 25, 10, 5, 1]",
        "output": "9"
      },
      {
        "input": "stones = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "2"
      },
      {
        "input": "stones = [800, 700, 600, 500, 400, 300, 200, 100, 900, 850, 800, 750, 700, 650, 600, 550, 500, 450, 400, 350, 300, 250, 200, 150, 100, 50, 49, 48, 47, 46]",
        "output": "44"
      },
      {
        "input": "stones = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 15, 14, 13, 12, 11, 20, 19, 18, 17, 16]",
        "output": "0"
      },
      {
        "input": "stones = [250, 500, 750, 1000, 250, 500, 750, 1000, 250, 500, 750, 1000, 250, 500, 750, 1000, 250, 500, 750, 1000, 250, 500, 750, 1000, 250, 500, 750, 1000, 250, 500]",
        "output": "250"
      },
      {
        "input": "stones = [300,200,100,50,25,12,6,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "stones = [800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "1"
      },
      {
        "input": "stones = [10,9,8,7,6,5,4,3,2,1,100,200,300,400,500,600,700,800,900,1000]",
        "output": "45"
      },
      {
        "input": "stones = [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912]",
        "output": "1"
      },
      {
        "input": "stones = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]",
        "output": "1"
      },
      {
        "input": "stones = [500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510]",
        "output": "1"
      },
      {
        "input": "stones = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1]",
        "output": "7"
      },
      {
        "input": "stones = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300]",
        "output": "10"
      },
      {
        "input": "stones = [800,100,200,300,400,500,600,700,900,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000]",
        "output": "100"
      },
      {
        "input": "stones = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 501]",
        "output": "499"
      },
      {
        "input": "stones = [333, 666, 999, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]",
        "output": "0"
      },
      {
        "input": "stones = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "0"
      },
      {
        "input": "stones = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
        "output": "1"
      },
      {
        "input": "stones = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "stones = [500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471]",
        "output": "1"
      },
      {
        "input": "stones = [999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 1]",
        "output": "1"
      },
      {
        "input": "stones = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "0"
      },
      {
        "input": "stones = [20,10,5,25,15,30,35,50,40,60]",
        "output": "0"
      },
      {
        "input": "stones = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]",
        "output": "1"
      },
      {
        "input": "stones = [999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970]",
        "output": "1"
      },
      {
        "input": "stones = [500, 300, 200, 400, 100, 150, 250, 600, 700, 800, 900]",
        "output": "0"
      },
      {
        "input": "stones = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90]",
        "output": "3"
      },
      {
        "input": "stones = [500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529]",
        "output": "1"
      },
      {
        "input": "stones = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900]",
        "output": "100"
      },
      {
        "input": "stones = [5,8,2,9,7,3,6,10,1,4]",
        "output": "1"
      },
      {
        "input": "stones = [1, 10, 100, 1000, 10, 100, 1000, 1, 10, 100, 1000, 1, 10, 100, 1000, 1, 10, 100, 1000, 1, 10, 100, 1000, 1, 10, 100, 1000, 1, 10]",
        "output": "213"
      },
      {
        "input": "stones = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "0"
      },
      {
        "input": "stones = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1]",
        "output": "6"
      },
      {
        "input": "stones = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100,5,10,15,20,25]",
        "output": "5"
      },
      {
        "input": "stones = [500, 500, 500, 500, 499, 499, 499, 499, 498, 498, 498, 498, 497, 497, 497, 497, 496, 496, 496, 496, 495, 495, 495, 495, 494, 494, 494, 494, 493, 493]",
        "output": "0"
      },
      {
        "input": "stones = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]",
        "output": "0"
      },
      {
        "input": "stones = [500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,500,499]",
        "output": "1"
      },
      {
        "input": "stones = [2, 2, 3, 3, 5, 5, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16, 16, 18, 18, 20, 20, 22, 22, 24, 24, 26, 26, 28, 28]",
        "output": "0"
      },
      {
        "input": "stones = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "0"
      },
      {
        "input": "stones = [100, 100, 100, 100, 99, 99, 99, 99, 98, 98, 98, 98]",
        "output": "0"
      },
      {
        "input": "stones = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "100"
      },
      {
        "input": "stones = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59]",
        "output": "0"
      },
      {
        "input": "stones = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "10"
      },
      {
        "input": "stones = [300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270]",
        "output": "255"
      },
      {
        "input": "stones = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "stones = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970]",
        "output": "955"
      },
      {
        "input": "stones = [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1"
      },
      {
        "input": "stones = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]",
        "output": "1"
      },
      {
        "input": "stones = [1000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]",
        "output": "565"
      },
      {
        "input": "stones = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1000, 999, 998, 997, 996, 995, 994, 993, 992, 991]",
        "output": "0"
      },
      {
        "input": "stones = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1]",
        "output": "9"
      },
      {
        "input": "stones = [50, 45, 40, 35, 30, 25, 20, 15, 10, 5]",
        "output": "5"
      },
      {
        "input": "stones = [1000,500,250,125,62,31,15,7,3,1]",
        "output": "6"
      },
      {
        "input": "stones = [1, 1000, 2, 999, 3, 998, 4, 997, 5, 996, 6, 995, 7, 994, 8, 993, 9, 992, 10, 991, 11, 990, 12, 989, 13, 988, 14, 987]",
        "output": "0"
      },
      {
        "input": "stones = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]",
        "output": "0"
      },
      {
        "input": "stones = [300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271]",
        "output": "1"
      },
      {
        "input": "stones = [29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1000]",
        "output": "565"
      },
      {
        "input": "stones = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]",
        "output": "1"
      },
      {
        "input": "stones = [300, 100, 200, 300, 100, 200, 300, 100, 200, 300, 100, 200, 300, 100, 200, 300, 100, 200, 300, 100, 200, 300, 100, 200, 300, 100, 200, 300, 100, 200]",
        "output": "0"
      },
      {
        "input": "stones = [317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162]",
        "output": "0"
      },
      {
        "input": "stones = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60]",
        "output": "2"
      },
      {
        "input": "stones = [300, 200, 100, 50, 25, 12, 6, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "0"
      },
      {
        "input": "stones = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]",
        "output": "0"
      },
      {
        "input": "stones = [100,200,300,400,500,600,700,800,900,1000,100,200,300,400,500,600,700,800,900,1000,100,200,300,400,500,600,700,800,900,1000,100,200,300,400,500,600,700,800,900,1000]",
        "output": "0"
      },
      {
        "input": "stones = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]",
        "output": "10"
      },
      {
        "input": "stones = [10, 4, 6, 9, 2, 11, 3, 7, 5, 8]",
        "output": "1"
      },
      {
        "input": "stones = [999, 1, 998, 2, 997, 3, 996, 4, 995, 5, 994, 6, 993, 7, 992, 8, 991, 9, 990, 10, 989, 11, 988, 12, 987, 13, 986, 14, 985, 15]",
        "output": "858"
      },
      {
        "input": "stones = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971]",
        "output": "1"
      },
      {
        "input": "stones = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]",
        "output": "0"
      },
      {
        "input": "stones = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "1"
      }
    ]
  },
  {
    "id": 566,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Matrix",
      "Simulation"
    ],
    "problemDescription": "In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\nYou are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\nIf the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n\u00a0\nExample 1:\n\n\nInput: mat = [[1,2],[3,4]], r = 1, c = 4\nOutput: [[1,2,3,4]]\n\nExample 2:\n\n\nInput: mat = [[1,2],[3,4]], r = 2, c = 4\nOutput: [[1,2],[3,4]]\n\n\u00a0\nConstraints:\n\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 100\n-1000 <= mat[i][j] <= 1000\n1 <= r, c <= 300\n\n",
    "starterCode": "class Solution:\n    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "mat = [[1,2,3],[4,5,6]], r = 1, c = 6",
        "output": "[[1, 2, 3, 4, 5, 6]]"
      },
      {
        "input": "mat = [[1,2],[3,4]], r = 1, c = 4",
        "output": "[[1, 2, 3, 4]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6]], r = 3, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6]], r = 3, c = 1",
        "output": "[[1, 2, 3], [4, 5, 6]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6]], r = 1, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6]], r = 3, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6]], r = 1, c = 1",
        "output": "[[1, 2, 3], [4, 5, 6]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9]], r = 1, c = 9",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8]], r = 1, c = 8",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8]]"
      },
      {
        "input": "mat = [[1,2],[3,4]], r = 2, c = 2",
        "output": "[[1, 2], [3, 4]]"
      },
      {
        "input": "mat = [[1,2],[3,4]], r = 2, c = 4",
        "output": "[[1, 2], [3, 4]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8]], r = 4, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8]], r = 8, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9]], r = 9, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8]], r = 2, c = 4",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6]], r = 2, c = 2",
        "output": "[[1, 2, 3], [4, 5, 6]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6]], r = 6, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9]], r = 3, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
      },
      {
        "input": "mat = [[1,2],[3,4]], r = 4, c = 1",
        "output": "[[1], [2], [3], [4]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6]], r = 2, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6]]"
      },
      {
        "input": "mat = [[10,20,30],[40,50,60],[70,80,90],[100,110,120]], r = 2, c = 6",
        "output": "[[10, 20, 30, 40, 50, 60], [70, 80, 90, 100, 110, 120]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]], r = 20, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20]]"
      },
      {
        "input": "mat = [[5,6,7],[8,9,10]], r = 6, c = 1",
        "output": "[[5], [6], [7], [8], [9], [10]]"
      },
      {
        "input": "mat = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], r = 6, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12]], r = 3, c = 4",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]], r = 12, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]]"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]], r = 20, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8]], r = 8, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12]], r = 12, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16]], r = 1, c = 16",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8]], r = 4, c = 1",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12]], r = 4, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]"
      },
      {
        "input": "mat = [[10, 20, 30], [40, 50, 60], [70, 80, 90]], r = 9, c = 1",
        "output": "[[10], [20], [30], [40], [50], [60], [70], [80], [90]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10]], r = 2, c = 5",
        "output": "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], r = 18, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], r = 16, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8]], r = 2, c = 8",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], r = 4, c = 2",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"
      },
      {
        "input": "mat = [[1000,-1000,500],[-500,1000,-1000],[0,0,0]], r = 3, c = 3",
        "output": "[[1000, -1000, 500], [-500, 1000, -1000], [0, 0, 0]]"
      },
      {
        "input": "mat = [[-1, 2, -3], [4, -5, 6], [-7, 8, -9]], r = 3, c = 3",
        "output": "[[-1, 2, -3], [4, -5, 6], [-7, 8, -9]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]], r = 1, c = 20",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]], r = 6, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]"
      },
      {
        "input": "mat = [[1, 2], [3, 4]], r = 4, c = 1",
        "output": "[[1], [2], [3], [4]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], r = 1, c = 15",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], r = 3, c = 5",
        "output": "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]"
      },
      {
        "input": "mat = [[0,0,0],[0,0,0],[0,0,0]], r = 9, c = 1",
        "output": "[[0], [0], [0], [0], [0], [0], [0], [0], [0]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], r = 6, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8]], r = 1, c = 8",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8]]"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], r = 5, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], r = 8, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16]]"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], r = 5, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]"
      },
      {
        "input": "mat = [[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]], r = 1, c = 9",
        "output": "[[-1, -2, -3, -4, -5, -6, -7, -8, -9]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], r = 2, c = 5",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], r = 3, c = 7",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]"
      },
      {
        "input": "mat = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12]], r = 6, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]"
      },
      {
        "input": "mat = [[1, 2], [3, 4], [5, 6], [7, 8]], r = 2, c = 4",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8]], r = 8, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], r = 5, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]"
      },
      {
        "input": "mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], r = 2, c = 5",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
      },
      {
        "input": "mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], r = 3, c = 4",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], r = 9, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18]]"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], r = 1, c = 15",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8]], r = 2, c = 4",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]], r = 3, c = 4",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8],[9,10,11,12]], r = 4, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]], r = 4, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12]], r = 3, c = 4",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8]], r = 4, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8]]"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], r = 15, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[7,8,9,10,11,12]], r = 3, c = 4",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"
      },
      {
        "input": "mat = [[-1,2,-3,4],[-5,6,-7,8],[-9,10,-11,12]], r = 2, c = 6",
        "output": "[[-1, 2, -3, 4, -5, 6], [-7, 8, -9, 10, -11, 12]]"
      },
      {
        "input": "mat = [[-1,-2,-3],[-4,-5,-6],[-7,-8,-9]], r = 3, c = 3",
        "output": "[[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], r = 1, c = 18",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]], r = 2, c = 10",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8],[9,10,11,12]], r = 1, c = 12",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], r = 5, c = 2",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], r = 15, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]], r = 4, c = 5",
        "output": "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6]], r = 3, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]], r = 4, c = 4",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12]], r = 2, c = 6",
        "output": "[[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]], r = 2, c = 6",
        "output": "[[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]"
      },
      {
        "input": "mat = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], r = 10, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]], r = 1, c = 19",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6],[7,8],[9,10]], r = 5, c = 2",
        "output": "[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]], r = 4, c = 5",
        "output": "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], r = 2, c = 8",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16]]"
      },
      {
        "input": "mat = [[1,2],[3,4],[5,6]], r = 1, c = 3",
        "output": "[[1, 2], [3, 4], [5, 6]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], r = 2, c = 9",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12]], r = 1, c = 12",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]"
      },
      {
        "input": "mat = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]], r = 5, c = 4",
        "output": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]], r = 16, c = 1",
        "output": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16]]"
      },
      {
        "input": "mat = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], r = 1, c = 16",
        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]"
      },
      {
        "input": "mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], r = 1, c = 3",
        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
      },
      {
        "input": "mat = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], r = 3, c = 6",
        "output": "[[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]"
      },
      {
        "input": "mat = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]], r = 3, c = 5",
        "output": "[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]"
      },
      {
        "input": "mat = [[10,20,30,40,50],[60,70,80,90,100],[110,120,130,140,150]], r = 5, c = 3",
        "output": "[[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120], [130, 140, 150]]"
      }
    ]
  },
  {
    "id": 2108,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers",
      "String"
    ],
    "problemDescription": "Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\".\nA string is palindromic if it reads the same forward and backward.\n\u00a0\nExample 1:\n\nInput: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]\nOutput: \"ada\"\nExplanation: The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first.\n\nExample 2:\n\nInput: words = [\"notapalindrome\",\"racecar\"]\nOutput: \"racecar\"\nExplanation: The first and only string that is palindromic is \"racecar\".\n\nExample 3:\n\nInput: words = [\"def\",\"ghi\"]\nOutput: \"\"\nExplanation: There are no palindromic strings, so the empty string is returned.\n\n\u00a0\nConstraints:\n\n1 <= words.length <= 100\n1 <= words[i].length <= 100\nwords[i] consists only of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        ",
    "testCases": [
      {
        "input": "words = [\"hello\",\"world\",\"python\",\"madam\"]",
        "output": "madam"
      },
      {
        "input": "words = [\"hello\",\"world\",\"python\"]",
        "output": ""
      },
      {
        "input": "words = [\"abba\",\"abcba\",\"abcdedcba\",\"nonpalindrome\"]",
        "output": "abba"
      },
      {
        "input": "words = [\"level\",\"deified\",\"civic\",\"rotor\"]",
        "output": "level"
      },
      {
        "input": "words = [\"abccba\",\"def\",\"ghi\",\"jklmnoponmlkj\"]",
        "output": "abccba"
      },
      {
        "input": "words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]",
        "output": "ada"
      },
      {
        "input": "words = [\"madam\",\"refer\",\"level\",\"world\"]",
        "output": "madam"
      },
      {
        "input": "words = [\"madam\",\"racecar\",\"refer\",\"deed\",\"peep\",\"noon\"]",
        "output": "madam"
      },
      {
        "input": "words = [\"reviled\",\"civic\",\"rotor\",\"redder\",\"repaper\",\"deed\"]",
        "output": "civic"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\"]",
        "output": "a"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\"]",
        "output": "a"
      },
      {
        "input": "words = [\"racecar\",\"ada\",\"cool\",\"abc\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"noon\",\"level\",\"deified\",\"rotor\",\"redder\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"notapalindrome\",\"racecar\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"Was\",\"it\",\"a\",\"car\",\"or\",\"a\",\"cat\",\"I\",\"saw\"]",
        "output": "a"
      },
      {
        "input": "words = [\"racecar\",\"car\",\"level\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"noon\",\"moon\",\"refer\",\"deed\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"abcde\",\"fghij\",\"klmno\",\"pqrst\"]",
        "output": ""
      },
      {
        "input": "words = [\"madam\",\"refer\",\"deed\",\"peep\",\"level\"]",
        "output": "madam"
      },
      {
        "input": "words = [\"abacaba\",\"racecar\",\"kayak\",\"detartrated\",\"repaper\"]",
        "output": "abacaba"
      },
      {
        "input": "words = [\"hello\",\"world\",\"python\",\"programming\"]",
        "output": ""
      },
      {
        "input": "words = [\"level\",\"deified\",\"civic\",\"rotor\",\"kayak\",\"reviled\"]",
        "output": "level"
      },
      {
        "input": "words = [\"noon\",\"level\",\"world\",\"deified\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"abccba\",\"defed\",\"ghi\",\"jkllkj\"]",
        "output": "abccba"
      },
      {
        "input": "words = [\"def\",\"ghi\"]",
        "output": ""
      },
      {
        "input": "words = [\"noon\",\"civic\",\"rotor\",\"deified\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"abcba\",\"xyz\",\"madam\",\"noon\"]",
        "output": "abcba"
      },
      {
        "input": "words = [\"step\",\"on\",\"no\",\"pets\"]",
        "output": ""
      },
      {
        "input": "words = [\"noon\",\"racecar\",\"kayak\",\"reviled\",\"civic\",\"madam\",\"refer\",\"deed\",\"detartrated\",\"repaper\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"notapalindrome\",\"almostapalindrome\",\"palindromebutnot\",\"thisisnotapalindrome\",\"palindromic\",\"palindrome\",\"palindromes\",\"palindromicly\"]",
        "output": ""
      },
      {
        "input": "words = [\"abba\",\"acca\",\"adda\",\"aedd\",\"aeeea\",\"aeeeea\",\"aeeeeea\",\"aeeeeeea\"]",
        "output": "abba"
      },
      {
        "input": "words = [\"algorithm\",\"datastructure\",\"python\",\"java\",\"csharp\",\"javascript\",\"typescript\",\"ruby\",\"swift\",\"kotlin\"]",
        "output": ""
      },
      {
        "input": "words = [\"notapalindrome\",\"stillnotapalindrome\",\"palindrome\",\"palindromic\",\"racecar\",\"noon\",\"level\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"a\",\"bb\",\"ccc\",\"dddd\",\"eeeee\",\"ffffff\",\"ggggggg\",\"hhhhhhhh\",\"iiiiiiiii\",\"jjjjjjjjjj\"]",
        "output": "a"
      },
      {
        "input": "words = [\"abccba\",\"defed\",\"fedcbafedcba\",\"zxyzyx\",\"mnoponm\",\"qwertyytrewq\",\"poiuytghjklkjhgfdsapoiuytrewq\"]",
        "output": "abccba"
      },
      {
        "input": "words = [\"racecar\",\"level\",\"civic\",\"rotor\",\"deified\",\"repaper\",\"reviver\",\"rotator\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"nonpalindrome\",\"notapalindrome\",\"neverpalindrome\",\"nopalin\",\"palindromeisnothere\",\"stillnotapalindrome\"]",
        "output": ""
      },
      {
        "input": "words = [\"racecar\",\"refer\",\"reviler\",\"repaper\",\"rotor\",\"level\",\"kayak\",\"stats\",\"repaper\",\"reviler\",\"rotor\",\"level\",\"kayak\",\"stats\",\"repaper\",\"reviler\",\"rotor\",\"level\",\"kayak\",\"stats\",\"ananab\",\"banana\",\"anana\",\"level\",\"deed\",\"civic\",\"rotor\",\"detartrated\",\"redivider\",\"deified\",\"racecar\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"noon\",\"civic\",\"rotor\",\"deed\",\"peep\",\"reed\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"x\",\"y\",\"z\",\"aa\",\"bb\",\"cc\",\"aaa\",\"bbb\",\"ccc\",\"aaaa\",\"bbbb\",\"cccc\",\"abcba\",\"abccba\",\"abba\",\"racecar\",\"madam\",\"refer\",\"deed\",\"peep\"]",
        "output": "x"
      },
      {
        "input": "words = [\"nonpalindromic\",\"string\",\"without\",\"any\",\"palindrome\",\"here\"]",
        "output": ""
      },
      {
        "input": "words = [\"deed\",\"peep\",\"noon\",\"radar\",\"repaper\",\"reviver\",\"rotator\"]",
        "output": "deed"
      },
      {
        "input": "words = [\"racecar\",\"deified\",\"civic\",\"rotor\",\"level\",\"repaper\",\"rotor\",\"reviled\",\"detartrated\",\"redivider\",\"deed\",\"peep\",\"radar\",\"redder\",\"refer\",\"rotator\",\"reviver\",\"rotor\",\"racecar\",\"madam\",\"refer\",\"racecar\",\"deified\",\"civic\",\"rotor\",\"level\",\"repaper\",\"rotor\",\"reviled\",\"detartrated\",\"redivider\",\"deed\",\"peep\",\"radar\",\"redder\",\"refer\",\"rotator\",\"reviver\",\"rotor\",\"racecar\",\"madam\",\"refer\",\"racecar\",\"deified\",\"civic\",\"rotor\",\"level\",\"repaper\",\"rotor\",\"reviled\",\"detartrated\",\"redivider\",\"deed\",\"peep\",\"radar\",\"redder\",\"refer\",\"rotator\",\"reviver\",\"rotor\",\"racecar\",\"madam\",\"refer\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"aabbccdd\",\"ddccbbaa\",\"abcdeedcba\",\"abcdefghihgfedcba\",\"abcdefghijkjihgfedcba\",\"abcdefghijllkjihgfedcba\",\"abcdefghijllkjihgfedcbaf\",\"mnopqrstsrqponm\"]",
        "output": "abcdeedcba"
      },
      {
        "input": "words = [\"a\",\"bb\",\"ccc\",\"dddd\",\"eeeee\"]",
        "output": "a"
      },
      {
        "input": "words = [\"xylophone\",\"guitar\",\"piano\",\"violin\",\"flute\",\"saxophone\",\"trombone\",\"trumpet\",\"harp\",\"xylophone\",\"guitar\",\"piano\",\"violin\",\"flute\",\"saxophone\",\"trombone\",\"trumpet\",\"harp\",\"a\",\"ab\",\"aba\",\"abcba\",\"abcdedcba\",\"abcdecba\",\"abba\",\"abcba\"]",
        "output": "a"
      },
      {
        "input": "words = [\"racecar\",\"refer\",\"deed\",\"peep\",\"wow\",\"madam\",\"rotor\",\"level\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"zzzzzzzz\",\"zzzyzzzz\",\"zzzyyzzz\",\"zzzyyyzz\",\"zzzyyyyzzz\",\"zzzyyyyyzzzz\",\"zzzyyyyyyzzzzz\"]",
        "output": "zzzzzzzz"
      },
      {
        "input": "words = [\"notapalindrome\",\"noon\",\"racecar\",\"rotor\",\"notapalindrome\",\"reviled\",\"detartrated\",\"redivider\",\"notapalindrome\",\"deed\",\"peep\",\"radar\",\"redder\",\"refer\",\"rotator\",\"reviver\",\"rotor\",\"racecar\",\"madam\",\"refer\",\"notapalindrome\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"noon\",\"level\",\"rotor\",\"deified\",\"civic\",\"radar\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"abcdcba\",\"dcba\",\"efgh\",\"hgef\",\"ijkl\",\"lkji\",\"mnop\",\"ponm\",\"qrst\",\"tsrq\",\"uvw\",\"wvu\",\"xyz\",\"zyx\",\"racecar\",\"level\",\"deified\",\"rotor\",\"deed\",\"peep\",\"wow\",\"civic\",\"radar\",\"refer\",\"detartrated\",\"repaper\"]",
        "output": "abcdcba"
      },
      {
        "input": "words = [\"this\",\"is\",\"not\",\"a\",\"palindrome\",\"racecar\",\"madam\",\"refer\",\"repaper\",\"rotor\",\"level\",\"kayak\",\"stats\",\"repaper\",\"reviler\",\"rotor\",\"level\",\"kayak\",\"stats\",\"ananab\",\"banana\",\"anana\",\"level\",\"deed\",\"civic\",\"rotor\",\"detartrated\",\"redivider\",\"deified\",\"racecar\"]",
        "output": "a"
      },
      {
        "input": "words = [\"repaper\",\"deed\",\"civic\",\"level\",\"rotor\",\"kayak\",\"racecar\",\"reviled\"]",
        "output": "repaper"
      },
      {
        "input": "words = [\"bobby\",\"radar\",\"level\",\"rotor\",\"deed\",\"peep\",\"wow\",\"madam\"]",
        "output": "radar"
      },
      {
        "input": "words = [\"abccba\",\"abcde\",\"fghij\",\"klmno\",\"pqrst\",\"xyzzyx\",\"mnopqr\",\"stuvuts\"]",
        "output": "abccba"
      },
      {
        "input": "words = [\"abccba\",\"bcb\",\"a\",\"bb\",\"ccc\",\"dddd\",\"eeeee\",\"ffffff\",\"ggggggg\",\"hhhhhhhh\",\"iiiiiiiii\",\"jjjjjjjjjj\"]",
        "output": "abccba"
      },
      {
        "input": "words = [\"abcdedcba\",\"abcdecba\",\"abba\",\"abcba\",\"a\",\"ab\",\"aba\",\"noon\",\"civic\",\"rotor\",\"level\",\"deified\",\"redivider\",\"detartrated\",\"deed\",\"peep\",\"racecar\",\"refer\",\"reviler\",\"repaper\",\"rotor\",\"level\",\"kayak\",\"stats\",\"repaper\",\"reviler\",\"rotor\",\"level\",\"kayak\",\"stats\",\"ananab\",\"banana\",\"anana\",\"level\",\"deed\",\"civic\",\"rotor\",\"detartrated\",\"redivider\",\"deified\",\"racecar\"]",
        "output": "abcdedcba"
      },
      {
        "input": "words = [\"verylongpalindromesequenceeosuqeeqosuerosequencemosuqeeqoserev\",\"nonpalindrome\",\"anotherlongword\",\"racecar\",\"level\",\"deified\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"nonpalindrome\",\"another\",\"longwordthatshouldnotbeapalindrome\",\"almostapalindromemordnilapalmo\",\"racecar\",\"noon\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"aabbcc\",\"racecar\",\"level\",\"noon\",\"civic\",\"rotor\",\"kayak\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"aabb\",\"abba\",\"abcba\",\"abcdedcba\",\"abcdeedcba\",\"abcdefgfedcba\",\"ghijklmnonmlkjihg\",\"poiuytrewqmrewtuyiop\"]",
        "output": "abba"
      },
      {
        "input": "words = [\"noon\",\"civic\",\"rotor\",\"level\",\"deified\",\"redivider\",\"detartrated\",\"deed\",\"peep\",\"racecar\",\"refer\",\"reviler\",\"repaper\",\"rotor\",\"level\",\"kayak\",\"stats\",\"repaper\",\"reviler\",\"rotor\",\"level\",\"kayak\",\"stats\",\"ananab\",\"banana\",\"anana\",\"level\",\"deed\",\"civic\",\"rotor\",\"detartrated\",\"redivider\",\"deified\",\"racecar\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"abacaba\",\"bcb\",\"abcba\",\"a\",\"racecar\",\"level\",\"deified\",\"rotor\",\"deed\",\"peep\",\"wow\",\"civic\",\"radar\",\"refer\",\"detartrated\",\"repaper\"]",
        "output": "abacaba"
      },
      {
        "input": "words = [\"madam\",\"refer\",\"stats\",\"civic\",\"rotor\",\"kayak\"]",
        "output": "madam"
      },
      {
        "input": "words = [\"zxcvbnm\",\"mnbvcxz\",\"qwertyuiop\",\"poiuytrewq\",\"asdfghjkl\",\"lkjhgfdsa\",\"qwertyuiopasdfghjklzxcvbnm\",\"mnbvcxzlkjhgfdsapoiuytrewq\",\"noon\",\"civic\",\"rotor\",\"level\",\"deified\",\"redivider\",\"detartrated\",\"deed\",\"peep\",\"racecar\",\"refer\",\"reviler\",\"repaper\",\"rotor\",\"level\",\"kayak\",\"stats\",\"repaper\",\"reviler\",\"rotor\",\"level\",\"kayak\",\"stats\",\"ananab\",\"banana\",\"anana\",\"level\",\"deed\",\"civic\",\"rotor\",\"detartrated\",\"redivider\",\"deified\",\"racecar\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"madam\",\"refer\",\"deed\",\"peep\",\"reed\",\"level\",\"deified\",\"repaper\",\"deed\",\"wow\",\"did\",\"civic\",\"rotor\",\"kayak\",\"reviled\",\"redder\",\"repaper\",\"peep\",\"deed\",\"madam\",\"refer\",\"civic\",\"rotor\",\"kayak\",\"reviled\"]",
        "output": "madam"
      },
      {
        "input": "words = [\"no\",\"on\",\"civic\",\"rotor\",\"deed\",\"peep\",\"noon\",\"radar\",\"racecar\",\"redder\",\"repaper\",\"level\",\"deified\"]",
        "output": "civic"
      },
      {
        "input": "words = [\"level\",\"deified\",\"civic\",\"rotor\",\"refer\",\"deed\",\"peep\",\"wow\",\"madam\"]",
        "output": "level"
      },
      {
        "input": "words = [\"xylophone\",\"keyboard\",\"guitar\",\"piano\",\"violin\",\"flute\",\"drums\",\"harp\",\"saxophone\",\"trumpet\"]",
        "output": ""
      },
      {
        "input": "words = [\"xylophone\",\"guitar\",\"piano\",\"drums\",\"violin\",\"harp\",\"flute\",\"trumpet\"]",
        "output": ""
      },
      {
        "input": "words = [\"a\",\"bb\",\"ccc\",\"dddd\",\"eeeee\",\"ffffff\"]",
        "output": "a"
      },
      {
        "input": "words = [\"aabb\",\"bbcc\",\"ccdd\",\"ddeeff\",\"ffeeggee\",\"hhiijjkk\",\"llmmnnoopp\",\"qqrrssttuuvvww\",\"xxxyyyyzzzz\"]",
        "output": ""
      },
      {
        "input": "words = [\"racecar\",\"refer\",\"deified\",\"civic\",\"level\",\"rotor\",\"kayak\",\"reviled\",\"deed\",\"noon\",\"madam\",\"repaper\",\"elppa\",\"stuvuts\",\"xyzzyx\"]",
        "output": "racecar"
      },
      {
        "input": "words = [\"noon\",\"level\",\"deified\",\"rotor\",\"repaper\",\"reviled\",\"detartrated\",\"redivider\",\"deed\",\"peep\",\"radar\",\"redder\",\"refer\",\"rotator\",\"reviver\",\"rotor\",\"racecar\",\"madam\",\"refer\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"12321\",\"1234321\",\"123454321\",\"12345654321\",\"1234567654321\",\"123456787654321\",\"12345678987654321\",\"1234567890987654321\",\"123456789010987654321\",\"12345678901210987654321\",\"1234567890123210987654321\"]",
        "output": "12321"
      },
      {
        "input": "words = [\"qwerty\",\"asdfgh\",\"zxcvbn\",\"police\",\"museum\",\"kayak\"]",
        "output": "kayak"
      },
      {
        "input": "words = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"abcba\",\"abccba\",\"abcdcba\",\"abcdeba\",\"abcdefedcba\",\"abcdeedcba\"]",
        "output": "a"
      },
      {
        "input": "words = [\"ab\",\"aba\",\"abcba\",\"abcdedcba\",\"abcdeedcba\",\"abcdefgfedcba\"]",
        "output": "aba"
      },
      {
        "input": "words = [\"banana\",\"ananab\",\"mango\",\"orange\",\"grape\",\"apple\",\"elppa\"]",
        "output": ""
      },
      {
        "input": "words = [\"noon\",\"level\",\"civic\",\"rotor\",\"deified\",\"repaper\",\"reviver\",\"rotator\",\"a\",\"bb\",\"ccc\",\"dddd\",\"eeeee\",\"ffffff\",\"ggggggg\",\"hhhhhhhh\",\"iiiiiiiii\",\"jjjjjjjjjj\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"xyzzyx\",\"xyzyx\",\"xyx\",\"xx\",\"x\",\"aaa\",\"abba\",\"abcba\",\"abcdedcba\",\"abcdefghihgfedcba\"]",
        "output": "xyzzyx"
      },
      {
        "input": "words = [\"madam\",\"refer\",\"level\",\"deified\",\"rotor\",\"kayak\",\"reviled\",\"rotor\",\"redder\",\"repaper\"]",
        "output": "madam"
      },
      {
        "input": "words = [\"aaaaaaaa\",\"abccba\",\"abcddcba\",\"abcdedcba\",\"abcdefghihgfedcba\",\"abcdefghgfedcba\",\"abcdeffedcba\"]",
        "output": "aaaaaaaa"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]",
        "output": "a"
      },
      {
        "input": "words = [\"abba\",\"acca\",\"adca\",\"aeia\",\"afda\",\"agga\"]",
        "output": "abba"
      },
      {
        "input": "words = [\"a\",\"ab\",\"abc\",\"abcd\",\"abcde\",\"abcdef\",\"abcdefg\",\"abcdefgh\",\"abcdefghi\",\"abcdefghij\",\"abcdefghijk\",\"abcdefghijkl\",\"abcdefghijklm\",\"abcdefghijklmn\",\"abcdefghijklmno\",\"abcdefghijklmnop\",\"abcdefghijklmnopq\",\"abcdefghijklmnopqr\",\"abcdefghijklmnopqrs\",\"abcdefghijklmnopqrst\",\"abcdefghijklmnopqrstu\",\"abcdefghijklmnopqrstuv\",\"abcdefghijklmnopqrstuvw\",\"abcdefghijklmnopqrstuvwx\",\"abcdefghijklmnopqrstuvwxy\",\"abcdefghijklmnopqrstuvwxyz\"]",
        "output": "a"
      },
      {
        "input": "words = [\"abcdeedcba\",\"fghihgf\",\"jklmlkj\",\"nopon\",\"qrsrstq\",\"tuvut\",\"xyzzyx\",\"abcdedcba\",\"fghigfh\",\"jklkjl\",\"mnoponm\",\"qrstsrq\",\"tuvutuv\",\"xyzyx\",\"abccba\",\"madam\",\"refer\",\"noon\",\"peep\",\"deed\",\"racecar\",\"repaper\",\"redder\"]",
        "output": "abcdeedcba"
      },
      {
        "input": "words = [\"level\",\"deified\",\"civic\",\"rotor\",\"kayak\",\"madam\",\"racecar\",\"refer\",\"reviled\"]",
        "output": "level"
      },
      {
        "input": "words = [\"aabbcc\",\"baccab\",\"racecar\",\"madam\",\"refer\",\"reviler\",\"repaper\",\"repaper\",\"rotor\",\"level\",\"kayak\",\"stats\",\"rotor\",\"refer\",\"reviler\",\"repaper\",\"rotor\",\"level\",\"kayak\",\"stats\"]",
        "output": "baccab"
      },
      {
        "input": "words = [\"notapalindrome\",\"almostapalindrome\",\"palindromebutnot\",\"thisisnotapalindrome\",\"palindromic\",\"palindrome\",\"palindromes\",\"palindromicly\",\"a\",\"aa\",\"aaa\",\"aaaa\",\"abcba\",\"abccba\",\"abcdcba\",\"abcdeba\",\"abcdefedcba\",\"abcdeedcba\"]",
        "output": "a"
      },
      {
        "input": "words = [\"anana\",\"banana\",\"ananab\",\"level\",\"deed\",\"civic\",\"rotor\",\"detartrated\",\"redivider\",\"deified\",\"kayak\",\"stats\",\"repaper\",\"reviler\",\"rotor\",\"level\",\"kayak\",\"stats\",\"repaper\",\"reviler\",\"rotor\",\"level\",\"kayak\",\"stats\"]",
        "output": "anana"
      },
      {
        "input": "words = [\"abccba\",\"defg\",\"hijklm\",\"nopqrst\",\"uvwxyz\"]",
        "output": "abccba"
      },
      {
        "input": "words = [\"deified\",\"repaper\",\"detartrated\",\"reviled\",\"redder\",\"repaid\",\"deed\"]",
        "output": "deified"
      },
      {
        "input": "words = [\"aabbccddeeff\",\"ffeeddccbbaa\",\"abcdefedcba\",\"abcdefgihgfedcba\",\"abcdefghijkjihgfedcba\",\"abcdefghijllkjihgfedcba\",\"abcdefghijllkjihgfedcbaf\"]",
        "output": "abcdefedcba"
      },
      {
        "input": "words = [\"abac\",\"abcba\",\"abccba\",\"abcdedcba\",\"abcdeedcba\",\"abcdeedcbaf\",\"abcdeedcba\",\"abcdefedcbaf\",\"abcdefedcba\",\"abcdefgihgfedcba\",\"abcdefghihgfedcba\",\"abcdefghihgfedcba123\"]",
        "output": "abcba"
      },
      {
        "input": "words = [\"thisisnotapalindrome\",\"neitheristhis\",\"butthisoneis\",\"civic\",\"rotor\",\"madam\",\"refer\",\"noon\",\"deed\",\"racecar\",\"repaper\",\"redder\",\"level\",\"deified\",\"abccba\",\"abcba\",\"abba\",\"baab\",\"abcdedcba\",\"fghigfh\",\"jklkjl\",\"mnoponm\",\"qrstsrq\",\"tuvutuv\",\"xyzyx\"]",
        "output": "civic"
      },
      {
        "input": "words = [\"noon\",\"level\",\"deified\",\"rotor\",\"reviled\"]",
        "output": "noon"
      },
      {
        "input": "words = [\"level\",\"deified\",\"rotor\",\"redder\",\"repaper\",\"deed\",\"peep\",\"wow\",\"civic\",\"radar\"]",
        "output": "level"
      },
      {
        "input": "words = [\"madam\",\"refer\",\"level\",\"deified\",\"rotor\",\"reviled\"]",
        "output": "madam"
      },
      {
        "input": "words = [\"deified\",\"level\",\"civic\",\"rotor\",\"kayak\",\"reviled\",\"madam\",\"refer\",\"noon\",\"peep\",\"redder\",\"repaper\",\"racecar\",\"deed\"]",
        "output": "deified"
      },
      {
        "input": "words = [\"aabb\",\"bbaa\",\"abba\",\"baab\",\"abcba\",\"abccba\",\"madam\",\"refer\",\"noon\",\"deed\",\"racecar\",\"repaper\",\"redder\",\"civic\",\"rotor\",\"kayak\",\"reviled\",\"deified\",\"level\",\"rotor\",\"redder\",\"repaper\",\"level\",\"deified\"]",
        "output": "abba"
      },
      {
        "input": "words = [\"xylophone\",\"guitar\",\"piano\",\"drums\",\"flute\",\"violin\",\"harp\"]",
        "output": ""
      },
      {
        "input": "words = [\"abcd\",\"dcba\",\"efgh\",\"hgef\",\"ijkl\",\"lkji\",\"mnop\",\"ponm\",\"qrst\",\"tsrq\",\"uvw\",\"wvu\",\"xyz\",\"zyx\"]",
        "output": ""
      },
      {
        "input": "words = [\"noon\",\"civic\",\"rotor\",\"level\",\"deified\",\"redivider\",\"detartrated\",\"deed\",\"peep\",\"racecar\"]",
        "output": "noon"
      }
    ]
  },
  {
    "id": 2913,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums.\nThe distinct count of a subarray of nums is defined as:\n\nLet nums[i..j] be a subarray of nums consisting of all the indices from i to j such that 0 <= i <= j < nums.length. Then the number of distinct values in nums[i..j] is called the distinct count of nums[i..j].\n\nReturn the sum of the squares of distinct counts of all subarrays of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,1]\nOutput: 15\nExplanation: Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15.\n\nExample 2:\n\nInput: nums = [1,1]\nOutput: 3\nExplanation: Three possible subarrays are:\n[1]: 1 distinct value\n[1]: 1 distinct value\n[1,1]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,3,3,2,2,1]",
        "output": "85"
      },
      {
        "input": "nums = [10,20,10,20,10]",
        "output": "45"
      },
      {
        "input": "nums = [1,2,2,1]",
        "output": "25"
      },
      {
        "input": "nums = [1,3,2,3,1]",
        "output": "70"
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [100,100,99,99,98]",
        "output": "49"
      },
      {
        "input": "nums = [1,2,3,4]",
        "output": "50"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "105"
      },
      {
        "input": "nums = [5,6,7,8,9]",
        "output": "105"
      },
      {
        "input": "nums = [7,7,7,7,7,7]",
        "output": "21"
      },
      {
        "input": "nums = [1,2,1]",
        "output": "15"
      },
      {
        "input": "nums = [5,5,5,5]",
        "output": "10"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "105"
      },
      {
        "input": "nums = [10,10,10]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5]",
        "output": "184"
      },
      {
        "input": "nums = [4,4,4,4]",
        "output": "10"
      },
      {
        "input": "nums = [4,5,6,7]",
        "output": "50"
      },
      {
        "input": "nums = [1,2]",
        "output": "6"
      },
      {
        "input": "nums = [2,3,2,3]",
        "output": "28"
      },
      {
        "input": "nums = [1,2,3]",
        "output": "20"
      },
      {
        "input": "nums = [1,1]",
        "output": "3"
      },
      {
        "input": "nums = [5]",
        "output": "1"
      },
      {
        "input": "nums = [5,4,3,2,1,1,2,3,4,5,5,4,3,2,1]",
        "output": "1730"
      },
      {
        "input": "nums = [3,4,3,2,3,1]",
        "output": "120"
      },
      {
        "input": "nums = [1,2,2,1,3,3,3,4,4,4,4]",
        "output": "410"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3]",
        "output": "171"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]",
        "output": "755"
      },
      {
        "input": "nums = [3, 1, 2, 3, 1, 2, 3, 1, 2]",
        "output": "293"
      },
      {
        "input": "nums = [10,20,30,20,10,30,20,10]",
        "output": "220"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "1210"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90]",
        "output": "1716"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]",
        "output": "1811"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "825"
      },
      {
        "input": "nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]",
        "output": "551"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]",
        "output": "778"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "210"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3,1,2,3]",
        "output": "551"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "78"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 3, 2, 1]",
        "output": "220"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91]",
        "output": "1210"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4]",
        "output": "263"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6]",
        "output": "778"
      },
      {
        "input": "nums = [1,2,3,2,1]",
        "output": "70"
      },
      {
        "input": "nums = [3, 1, 2, 3, 4, 5, 3, 2]",
        "output": "370"
      },
      {
        "input": "nums = [10,20,10,30,20,40,50,10]",
        "output": "367"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1]",
        "output": "278"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]",
        "output": "4635"
      },
      {
        "input": "nums = [1, 3, 3, 1, 2, 2, 3, 1]",
        "output": "194"
      },
      {
        "input": "nums = [50, 50, 51, 51, 52, 52, 53, 53, 54, 54]",
        "output": "415"
      },
      {
        "input": "nums = [1,2,3,2,1,3,2,1,3,2,1]",
        "output": "451"
      },
      {
        "input": "nums = [5,6,5,7,8,7,6,5,9,10,9,8,7,6]",
        "output": "1899"
      },
      {
        "input": "nums = [1,1,2,2,3,3]",
        "output": "77"
      },
      {
        "input": "nums = [10,20,30,20,10,30]",
        "output": "111"
      },
      {
        "input": "nums = [10,20,30,20,10,30,20,10,30]",
        "output": "288"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5]",
        "output": "415"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "4830"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "120"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "4830"
      },
      {
        "input": "nums = [5,5,4,4,3,3,2,2,1,1]",
        "output": "415"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "415"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]",
        "output": "1210"
      },
      {
        "input": "nums = [3, 1, 2, 3, 4, 2, 5]",
        "output": "240"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "55"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
        "output": "778"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1]",
        "output": "1210"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1]",
        "output": "10560"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4]",
        "output": "438"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "1210"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "5440"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "1210"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1]",
        "output": "1645"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50]",
        "output": "105"
      },
      {
        "input": "nums = [1,2,3,2,1,4,5,4,3,2,1]",
        "output": "861"
      },
      {
        "input": "nums = [10, 20, 10, 30, 20, 30, 40, 50]",
        "output": "298"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5]",
        "output": "930"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,5,4,3,2,1]",
        "output": "1645"
      },
      {
        "input": "nums = [1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]",
        "output": "553"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]",
        "output": "930"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "5415"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]",
        "output": "438"
      },
      {
        "input": "nums = [1,2,3,4,5,4,3,2,1,2,3,4,5]",
        "output": "1285"
      },
      {
        "input": "nums = [1,2,3,2,1,4,5,3]",
        "output": "367"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5]",
        "output": "36"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]",
        "output": "10560"
      },
      {
        "input": "nums = [1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 5, 4, 3, 2, 1]",
        "output": "1794"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1]",
        "output": "825"
      },
      {
        "input": "nums = [9, 7, 5, 3, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]",
        "output": "3910"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10560"
      },
      {
        "input": "nums = [7,8,9,7,8,9,7,8,9,7,8,9]",
        "output": "551"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9]",
        "output": "5415"
      },
      {
        "input": "nums = [1,2,3,4,3,2,1,2,3,4,3,2,1]",
        "output": "962"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "8670850"
      },
      {
        "input": "nums = [1,1,2,1,2,2,3,3,3,3,4,4,4,4,4]",
        "output": "751"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]",
        "output": "6455"
      },
      {
        "input": "nums = [1, 3, 2, 3, 4, 5, 4, 3, 2, 1]",
        "output": "611"
      },
      {
        "input": "nums = [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]",
        "output": "415"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "1210"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "55"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,1,2,3]",
        "output": "419"
      },
      {
        "input": "nums = [10, 20, 30, 20, 10, 30]",
        "output": "111"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "1210"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5]",
        "output": "4635"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5]",
        "output": "1285"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]",
        "output": "2366"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2]",
        "output": "350"
      }
    ]
  },
  {
    "id": 507,
    "difficulty": "Easy",
    "tags": [
      "Math"
    ],
    "problemDescription": "A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.\nGiven an integer n, return true if n is a perfect number, otherwise return false.\n\u00a0\nExample 1:\n\nInput: num = 28\nOutput: true\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.\n\nExample 2:\n\nInput: num = 7\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= num <= 108\n\n",
    "starterCode": "class Solution:\n    def checkPerfectNumber(self, num: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "num = 8128",
        "output": "True"
      },
      {
        "input": "num = 10",
        "output": "False"
      },
      {
        "input": "num = 100000000",
        "output": "False"
      },
      {
        "input": "num = 28",
        "output": "True"
      },
      {
        "input": "num = 12",
        "output": "False"
      },
      {
        "input": "num = 7",
        "output": "False"
      },
      {
        "input": "num = 6",
        "output": "True"
      },
      {
        "input": "num = 33550336",
        "output": "True"
      },
      {
        "input": "num = 27",
        "output": "False"
      },
      {
        "input": "num = 1",
        "output": "False"
      },
      {
        "input": "num = 100",
        "output": "False"
      },
      {
        "input": "num = 496",
        "output": "True"
      },
      {
        "input": "num = 99999999",
        "output": "False"
      },
      {
        "input": "num = 1046527",
        "output": "False"
      },
      {
        "input": "num = 1234567",
        "output": "False"
      },
      {
        "input": "num = 99999998",
        "output": "False"
      },
      {
        "input": "num = 10000000",
        "output": "False"
      },
      {
        "input": "num = 56949850",
        "output": "False"
      },
      {
        "input": "num = 81284288",
        "output": "False"
      },
      {
        "input": "num = 37",
        "output": "False"
      },
      {
        "input": "num = 82589933",
        "output": "False"
      },
      {
        "input": "num = 672280688",
        "output": "False"
      },
      {
        "input": "num = 2096128",
        "output": "False"
      },
      {
        "input": "num = 67891011",
        "output": "False"
      },
      {
        "input": "num = 2305843008139952128",
        "output": "Execution timed out"
      },
      {
        "input": "num = 32766",
        "output": "False"
      },
      {
        "input": "num = 496000",
        "output": "False"
      },
      {
        "input": "num = 96141120",
        "output": "False"
      },
      {
        "input": "num = 11111111",
        "output": "False"
      },
      {
        "input": "num = 497",
        "output": "False"
      },
      {
        "input": "num = 987654321",
        "output": "False"
      },
      {
        "input": "num = 33550337",
        "output": "False"
      },
      {
        "input": "num = 1048576",
        "output": "False"
      },
      {
        "input": "num = 2",
        "output": "False"
      },
      {
        "input": "num = 495",
        "output": "False"
      },
      {
        "input": "num = 2147483647",
        "output": "False"
      },
      {
        "input": "num = 4690",
        "output": "False"
      },
      {
        "input": "num = 8128000",
        "output": "False"
      },
      {
        "input": "num = 100000",
        "output": "False"
      },
      {
        "input": "num = 1073741823",
        "output": "False"
      },
      {
        "input": "num = 600851475143",
        "output": "False"
      },
      {
        "input": "num = 672",
        "output": "False"
      },
      {
        "input": "num = 50000000",
        "output": "False"
      },
      {
        "input": "num = 67229820",
        "output": "False"
      },
      {
        "input": "num = 56456456",
        "output": "False"
      },
      {
        "input": "num = 98304",
        "output": "False"
      },
      {
        "input": "num = 1073741824",
        "output": "False"
      },
      {
        "input": "num = 98765432",
        "output": "False"
      },
      {
        "input": "num = 10000",
        "output": "False"
      },
      {
        "input": "num = 119439360",
        "output": "False"
      }
    ]
  },
  {
    "id": 561,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array",
      "Counting Sort",
      "Sorting"
    ],
    "problemDescription": "Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.\n\u00a0\nExample 1:\n\nInput: nums = [1,4,3,2]\nOutput: 4\nExplanation: All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4.\nExample 2:\n\nInput: nums = [6,2,6,5,1,2]\nOutput: 9\nExplanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\n\n\u00a0\nConstraints:\n\n1 <= n <= 104\nnums.length == 2 * n\n-104 <= nums[i] <= 104\n\n",
    "starterCode": "class Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [1,3,5,7,9,11,13,15]",
        "output": "28"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5]",
        "output": "20"
      },
      {
        "input": "nums = [-10000,-9999,-9998,-9997,-9996,-9995,-9994,-9993]",
        "output": "-39988"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "25"
      },
      {
        "input": "nums = [1,4,3,2]",
        "output": "4"
      },
      {
        "input": "nums = [-2,-1,0,1,2,3,4,5]",
        "output": "4"
      },
      {
        "input": "nums = [6,2,6,5,1,2]",
        "output": "9"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100]",
        "output": "250"
      },
      {
        "input": "nums = [1,3,5,7,9,11]",
        "output": "15"
      },
      {
        "input": "nums = [-2,-1,-3,-4,-5,-6,-7,-8]",
        "output": "-20"
      },
      {
        "input": "nums = [2,2,2,2,2,2]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5,6]",
        "output": "9"
      },
      {
        "input": "nums = [10000,-10000,10000,-10000]",
        "output": "0"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1]",
        "output": "4"
      },
      {
        "input": "nums = [-100,-200,-300,-400,-500,-600]",
        "output": "-1200"
      },
      {
        "input": "nums = [0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [100,200,300,400,500,600]",
        "output": "900"
      },
      {
        "input": "nums = [-1,2,3,-4]",
        "output": "-2"
      },
      {
        "input": "nums = [-1,2,-3,4,-5,6]",
        "output": "-2"
      },
      {
        "input": "nums = [5,5,5,5,5,5]",
        "output": "15"
      },
      {
        "input": "nums = [-1,4,-3,2]",
        "output": "-1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8]",
        "output": "16"
      },
      {
        "input": "nums = [8,7,6,5,4,3,2,1]",
        "output": "16"
      },
      {
        "input": "nums = [-2,-4,-6,-8,-10,-12]",
        "output": "-24"
      },
      {
        "input": "nums = [-10000,10000,-9999,9999,-9998,9998]",
        "output": "-9999"
      },
      {
        "input": "nums = [-1,0,-3,2,5,-4]",
        "output": "-3"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5,-6]",
        "output": "-12"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "625"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "120"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100]",
        "output": "-50"
      },
      {
        "input": "nums = [1000,-1000,500,-500,250,-250,750,-750,125,-125,625,-625]",
        "output": "-500"
      },
      {
        "input": "nums = [100, 200, 100, 200, 100, 200, 100, 200, 100, 200, 100, 200, 100, 200, 100, 200]",
        "output": "1200"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]",
        "output": "-110"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "2500"
      },
      {
        "input": "nums = [5, 8, 12, 19, 23, 35, 48, 67, 88, 99, 101, 102, 103, 104, 105, 106]",
        "output": "485"
      },
      {
        "input": "nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]",
        "output": "12"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "100"
      },
      {
        "input": "nums = [100, -200, 300, -400, 500, -600, 700, -800, 900, -1000]",
        "output": "-800"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "8"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "64"
      },
      {
        "input": "nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]",
        "output": "30"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7]",
        "output": "44"
      },
      {
        "input": "nums = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250]",
        "output": "-6250"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]",
        "output": "435"
      },
      {
        "input": "nums = [-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9,-10,10]",
        "output": "-5"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, -1000, -2000, -3000, -4000, -5000, -6000, -7000, -8000, -9000, -10000]",
        "output": "-5000"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81]",
        "output": "900"
      },
      {
        "input": "nums = [10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80, 80, 90, 90, 100, 100]",
        "output": "550"
      },
      {
        "input": "nums = [-10, 10, -20, 20, -30, 30, -40, 40, -50, 50, -60, 60, -70, 70, -80, 80]",
        "output": "-40"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "0"
      },
      {
        "input": "nums = [10000, -10000, 9999, -9999, 9998, -9998]",
        "output": "-9999"
      },
      {
        "input": "nums = [100, -100, 200, -200, 300, -300, 400, -400, 500, -500]",
        "output": "-300"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]",
        "output": "12"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "output": "-10"
      },
      {
        "input": "nums = [-5000, -4000, -3000, -2000, -1000, 0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]",
        "output": "16000"
      },
      {
        "input": "nums = [1000, -1000, 500, -500, 250, -250, 125, -125, 625, -625, 312, -312, 156, -156, 78, -78]",
        "output": "-704"
      },
      {
        "input": "nums = [-1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, 0]",
        "output": "-1"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -110, -120, -130, -140, -150, -160]",
        "output": "-720"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "55"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]",
        "output": "256"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]",
        "output": "-72"
      },
      {
        "input": "nums = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981]",
        "output": "9900"
      },
      {
        "input": "nums = [-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "-275"
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]",
        "output": "-42"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "6"
      },
      {
        "input": "nums = [-5000, -4999, -4998, -4997, -4996, -4995, -4994, -4993, -4992, -4991, -4990, -4989, -4988, -4987, -4986, -4985]",
        "output": "-39944"
      },
      {
        "input": "nums = [-10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991]",
        "output": "-49980"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 150, 250, 350, 450, 550]",
        "output": "1500"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600]",
        "output": "6400"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]",
        "output": "200"
      },
      {
        "input": "nums = [-10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993]",
        "output": "-39988"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "100"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010]",
        "output": "7525"
      },
      {
        "input": "nums = [-10,-20,-30,-40,-50,-60,-70,-80,-90,-100,-110,-120,-130,-140,-150,-160]",
        "output": "-720"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "100"
      },
      {
        "input": "nums = [100,-100,200,-200,300,-300,400,-400,500,-500]",
        "output": "-300"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "225"
      },
      {
        "input": "nums = [-5000, 5000, -4999, 4999, -4998, 4998, -4997, 4997, -4996, 4996]",
        "output": "-4998"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "0"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "50"
      },
      {
        "input": "nums = [10000, -10000, 5000, -5000, 7500, -7500, 2500, -2500]",
        "output": "-5000"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]",
        "output": "-5"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, -1, -10, -100, -1000, -10000, 2, 20, 200, 2000, 20000, 3, 30, 300, 3000, 30000]",
        "output": "14141"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8]",
        "output": "-4"
      },
      {
        "input": "nums = [1, 10000, 2, 9999, 3, 9998, 4, 9997, 5, 9996]",
        "output": "20005"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "1000"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]",
        "output": "640"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "0"
      },
      {
        "input": "nums = [10000, -10000, 9999, -9999, 9998, -9998, 9997, -9997, 9996, -9996]",
        "output": "-9998"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "100"
      },
      {
        "input": "nums = [10000, -10000, 9999, -9999, 9998, -9998, 1, 2, 3, 4]",
        "output": "-9993"
      },
      {
        "input": "nums = [500, 400, 300, 200, 100, 0, -100, -200, -300, -400, -500, -600, -700, -800, -900]",
        "output": "-1600"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000]",
        "output": "36000"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "16"
      },
      {
        "input": "nums = [9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989]",
        "output": "49965"
      },
      {
        "input": "nums = [-10, 10, -20, 20, -30, 30, -40, 40, -50, 50, -60, 60]",
        "output": "-30"
      },
      {
        "input": "nums = [10000, -10000, 5000, -5000, 2500, -2500]",
        "output": "-7500"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160]",
        "output": "640"
      },
      {
        "input": "nums = [10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000]",
        "output": "80000"
      },
      {
        "input": "nums = [1, -1, 2, -2, 3, -3, 4, -4, 5, -5]",
        "output": "-3"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "500"
      },
      {
        "input": "nums = [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100]",
        "output": "-3000"
      },
      {
        "input": "nums = [-10000,10000,-9999,9999,-9998,9998,-9997,9997,-9996,9996,-9995,9995,-9994,9994,-9993,9993]",
        "output": "-4"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80]",
        "output": "320"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "275"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "20"
      },
      {
        "input": "nums = [10000, -10000, 5000, -5000, 2500, -2500, 1250, -1250, 625, -625]",
        "output": "-6875"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10, -10, -20, -30, -40, -50, -60]",
        "output": "130"
      },
      {
        "input": "nums = [100, 100, 90, 90, 80, 80, 70, 70, 60, 60, 50, 50, 40, 40, 30, 30]",
        "output": "520"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "2525"
      },
      {
        "input": "nums = [10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000, 10000, -10000]",
        "output": "0"
      }
    ]
  },
  {
    "id": 2570,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "problemDescription": "You are given two 2D integer arrays nums1 and nums2.\n\nnums1[i] = [idi, vali]\u00a0indicate that the number with the id idi has a value equal to vali.\nnums2[i] = [idi, vali]\u00a0indicate that the number with the id idi has a value equal to vali.\n\nEach array contains unique ids and is sorted in ascending order by id.\nMerge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:\n\nOnly ids that appear in at least one of the two arrays should be included in the resulting array.\nEach id should be included only once and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays, then assume its value in that array to be 0.\n\nReturn the resulting array. The returned array must be sorted in ascending order by id.\n\u00a0\nExample 1:\n\nInput: nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]\nOutput: [[1,6],[2,3],[3,2],[4,6]]\nExplanation: The resulting array contains the following:\n- id = 1, the value of this id is 2 + 4 = 6.\n- id = 2, the value of this id is 3.\n- id = 3, the value of this id is 2.\n- id = 4, the value of this id is 5 + 1 = 6.\n\nExample 2:\n\nInput: nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]\nOutput: [[1,3],[2,4],[3,6],[4,3],[5,5]]\nExplanation: There are no common ids, so we just include each id with its value in the resulting list.\n\n\u00a0\nConstraints:\n\n1 <= nums1.length, nums2.length <= 200\nnums1[i].length == nums2[j].length == 2\n1 <= idi, vali <= 1000\nBoth arrays contain unique ids.\nBoth arrays are in\u00a0strictly ascending order by id.\n\n",
    "starterCode": "class Solution:\n    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]",
        "output": "[(1, 6), (2, 3), (3, 2), (4, 6)]"
      },
      {
        "input": "nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]",
        "output": "[(1, 3), (2, 4), (3, 6), (4, 3), (5, 5)]"
      },
      {
        "input": "nums1 = [[1,5],[2,3]], nums2 = [[1,5],[2,3]]",
        "output": "[(1, 10), (2, 6)]"
      },
      {
        "input": "nums1 = [[1,5]], nums2 = [[2,3]]",
        "output": "[(1, 5), (2, 3)]"
      },
      {
        "input": "nums1 = [[1,1000],[2,999],[3,998]], nums2 = [[4,997],[5,996],[6,995]]",
        "output": "[(1, 1000), (2, 999), (3, 998), (4, 997), (5, 996), (6, 995)]"
      },
      {
        "input": "nums1 = [[500,1000],[600,900],[700,800]], nums2 = [[550,850],[650,750],[750,650]]",
        "output": "[(500, 1000), (550, 850), (600, 900), (650, 750), (700, 800), (750, 650)]"
      },
      {
        "input": "nums1 = [[1,2],[3,4],[5,6],[7,8]], nums2 = [[1,9],[3,8],[5,7],[7,6]]",
        "output": "[(1, 11), (3, 12), (5, 13), (7, 14)]"
      },
      {
        "input": "nums1 = [[1,5],[3,15],[5,25],[7,35]], nums2 = [[2,10],[4,20],[6,30],[8,40]]",
        "output": "[(1, 5), (2, 10), (3, 15), (4, 20), (5, 25), (6, 30), (7, 35), (8, 40)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], nums2 = [[1,10],[2,20],[3,30],[4,40],[5,50]]",
        "output": "[(1, 11), (2, 22), (3, 33), (4, 44), (5, 55), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]"
      },
      {
        "input": "nums1 = [[1,999],[2,998],[3,997],[4,996],[5,995]], nums2 = [[1,1]]",
        "output": "[(1, 1000), (2, 998), (3, 997), (4, 996), (5, 995)]"
      },
      {
        "input": "nums1 = [[50,1],[100,1],[150,1],[200,1]], nums2 = [[25,1],[75,1],[125,1],[175,1],[225,1]]",
        "output": "[(25, 1), (50, 1), (75, 1), (100, 1), (125, 1), (150, 1), (175, 1), (200, 1), (225, 1)]"
      },
      {
        "input": "nums1 = [[1,50],[2,50],[3,50],[4,50],[5,50]], nums2 = [[1,50],[2,50],[3,50],[4,50],[5,50]]",
        "output": "[(1, 100), (2, 100), (3, 100), (4, 100), (5, 100)]"
      },
      {
        "input": "nums1 = [[1,1000],[2,999],[3,998]], nums2 = [[1,1],[2,2],[3,3]]",
        "output": "[(1, 1001), (2, 1001), (3, 1001)]"
      },
      {
        "input": "nums1 = [[1,999]], nums2 = [[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]]",
        "output": "[(1, 999), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3]], nums2 = [[1,2],[2,3],[3,4]]",
        "output": "[(1, 3), (2, 5), (3, 7)]"
      },
      {
        "input": "nums1 = [[1,1]], nums2 = [[999,1000],[998,999],[997,998],[996,997],[995,996]]",
        "output": "[(1, 1), (995, 996), (996, 997), (997, 998), (998, 999), (999, 1000)]"
      },
      {
        "input": "nums1 = [[1,2],[5,6],[9,10]], nums2 = [[2,3],[4,5],[6,7],[8,9],[10,11]]",
        "output": "[(1, 2), (2, 3), (4, 5), (5, 6), (6, 7), (8, 9), (9, 10), (10, 11)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], nums2 = [[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18)]"
      },
      {
        "input": "nums1 = [[1,999]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[(1, 1000), (2, 2), (3, 3), (4, 4), (5, 5)]"
      },
      {
        "input": "nums1 = [[100,100],[200,200],[300,300]], nums2 = [[101,101],[201,201],[301,301]]",
        "output": "[(100, 100), (101, 101), (200, 200), (201, 201), (300, 300), (301, 301)]"
      },
      {
        "input": "nums1 = [[100,100],[200,200],[300,300]], nums2 = [[100,100],[200,200],[300,300]]",
        "output": "[(100, 200), (200, 400), (300, 600)]"
      },
      {
        "input": "nums1 = [[10,20],[30,40],[50,60],[70,80]], nums2 = [[20,30],[40,50],[60,70],[80,90]]",
        "output": "[(10, 20), (20, 30), (30, 40), (40, 50), (50, 60), (60, 70), (70, 80), (80, 90)]"
      },
      {
        "input": "nums1 = [[100,100],[101,101],[102,102],[103,103],[104,104]], nums2 = [[99,99],[100,1],[101,1],[102,1],[103,1],[104,1],[105,99]]",
        "output": "[(99, 99), (100, 101), (101, 102), (102, 103), (103, 104), (104, 105), (105, 99)]"
      },
      {
        "input": "nums1 = [[1,1],[3,3],[5,5],[7,7]], nums2 = [[2,2],[4,4],[6,6],[8,8]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8)]"
      },
      {
        "input": "nums1 = [[10,100],[20,200],[30,300]], nums2 = [[5,50],[15,150],[25,250],[35,350]]",
        "output": "[(5, 50), (10, 100), (15, 150), (20, 200), (25, 250), (30, 300), (35, 350)]"
      },
      {
        "input": "nums1 = [[1,10],[2,20],[3,30],[4,40],[5,50],[6,60],[7,70]], nums2 = [[1,100],[2,200],[3,300],[4,400],[5,500],[6,600],[7,700]]",
        "output": "[(1, 110), (2, 220), (3, 330), (4, 440), (5, 550), (6, 660), (7, 770)]"
      },
      {
        "input": "nums1 = [[1,1],[3,3],[5,5],[7,7],[9,9]], nums2 = [[2,2],[4,4],[6,6],[8,8],[10,10]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]"
      },
      {
        "input": "nums1 = [[1,100],[2,200],[3,300]], nums2 = [[1,900],[2,800],[3,700],[4,600],[5,500]]",
        "output": "[(1, 1000), (2, 1000), (3, 1000), (4, 600), (5, 500)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4]], nums2 = [[1,9],[2,8],[3,7],[5,6],[6,5]]",
        "output": "[(1, 10), (2, 10), (3, 10), (4, 4), (5, 6), (6, 5)]"
      },
      {
        "input": "nums1 = [[10,10],[20,20],[30,30],[40,40],[50,50]], nums2 = [[10,10],[20,20],[30,30],[40,40],[50,50]]",
        "output": "[(10, 20), (20, 40), (30, 60), (40, 80), (50, 100)]"
      },
      {
        "input": "nums1 = [[1,100],[5,200],[10,300]], nums2 = [[2,150],[5,250],[8,350]]",
        "output": "[(1, 100), (2, 150), (5, 450), (8, 350), (10, 300)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5]], nums2 = [[1,5],[2,4],[3,3],[4,2],[5,1]]",
        "output": "[(1, 6), (2, 6), (3, 6), (4, 6), (5, 6)]"
      },
      {
        "input": "nums1 = [[1,1],[2,1],[3,1],[4,1],[5,1]], nums2 = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1]]",
        "output": "[(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 1), (7, 1)]"
      },
      {
        "input": "nums1 = [[1,200],[2,199],[3,198],[4,197],[5,196]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[(1, 201), (2, 201), (3, 201), (4, 201), (5, 201)]"
      },
      {
        "input": "nums1 = [[1,500],[100,150],[200,250]], nums2 = [[50,200],[150,300],[250,350],[300,400]]",
        "output": "[(1, 500), (50, 200), (100, 150), (150, 300), (200, 250), (250, 350), (300, 400)]"
      },
      {
        "input": "nums1 = [[100,1],[101,1],[102,1],[103,1],[104,1]], nums2 = [[105,1],[106,1],[107,1],[108,1],[109,1]]",
        "output": "[(100, 1), (101, 1), (102, 1), (103, 1), (104, 1), (105, 1), (106, 1), (107, 1), (108, 1), (109, 1)]"
      },
      {
        "input": "nums1 = [[1,10],[3,20],[5,30],[7,40]], nums2 = [[2,15],[4,25],[6,35],[8,45]]",
        "output": "[(1, 10), (2, 15), (3, 20), (4, 25), (5, 30), (6, 35), (7, 40), (8, 45)]"
      },
      {
        "input": "nums1 = [[1,10],[3,20],[5,30],[7,40],[9,50]], nums2 = [[2,10],[4,20],[6,30],[8,40],[10,50]]",
        "output": "[(1, 10), (2, 10), (3, 20), (4, 20), (5, 30), (6, 30), (7, 40), (8, 40), (9, 50), (10, 50)]"
      },
      {
        "input": "nums1 = [[1,10],[3,15],[6,20]], nums2 = [[2,5],[3,10],[7,30]]",
        "output": "[(1, 10), (2, 5), (3, 25), (6, 20), (7, 30)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5]], nums2 = [[1,10],[2,20],[3,30],[4,40],[5,50]]",
        "output": "[(1, 11), (2, 22), (3, 33), (4, 44), (5, 55)]"
      },
      {
        "input": "nums1 = [[1,10],[2,20],[3,30],[4,40]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "[(1, 11), (2, 22), (3, 33), (4, 44), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]"
      },
      {
        "input": "nums1 = [[50,100],[150,200],[250,300]], nums2 = [[100,250],[200,350],[300,400]]",
        "output": "[(50, 100), (100, 250), (150, 200), (200, 350), (250, 300), (300, 400)]"
      },
      {
        "input": "nums1 = [[1,999],[2,998],[3,997]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[(1, 1000), (2, 1000), (3, 1000), (4, 4), (5, 5)]"
      },
      {
        "input": "nums1 = [[1,50],[2,30],[4,20]], nums2 = [[1,20],[2,50],[3,40],[5,60]]",
        "output": "[(1, 70), (2, 80), (3, 40), (4, 20), (5, 60)]"
      },
      {
        "input": "nums1 = [[1,999],[2,998],[3,997]], nums2 = [[4,996],[5,995],[6,994]]",
        "output": "[(1, 999), (2, 998), (3, 997), (4, 996), (5, 995), (6, 994)]"
      },
      {
        "input": "nums1 = [[1,1],[2,1],[3,1],[4,1],[5,1]], nums2 = [[1,2],[2,2],[3,2],[4,2],[5,2]]",
        "output": "[(1, 3), (2, 3), (3, 3), (4, 3), (5, 3)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], nums2 = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1]]",
        "output": "[(1, 11), (2, 11), (3, 11), (4, 11), (5, 11), (6, 11), (7, 11), (8, 11), (9, 11), (10, 11)]"
      },
      {
        "input": "nums1 = [[1,100],[2,200],[3,300]], nums2 = [[2,250],[3,350],[4,400]]",
        "output": "[(1, 100), (2, 450), (3, 650), (4, 400)]"
      },
      {
        "input": "nums1 = [[1,200],[3,400],[5,600],[7,800]], nums2 = [[2,100],[4,300],[6,500],[8,700]]",
        "output": "[(1, 200), (2, 100), (3, 400), (4, 300), (5, 600), (6, 500), (7, 800), (8, 700)]"
      },
      {
        "input": "nums1 = [[1,100],[2,200],[3,300]], nums2 = [[1,100],[2,200],[3,300]]",
        "output": "[(1, 200), (2, 400), (3, 600)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5]], nums2 = [[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]"
      },
      {
        "input": "nums1 = [[5,50],[10,100],[15,150],[20,200],[25,250]], nums2 = [[3,30],[6,60],[9,90],[12,120],[18,180]]",
        "output": "[(3, 30), (5, 50), (6, 60), (9, 90), (10, 100), (12, 120), (15, 150), (18, 180), (20, 200), (25, 250)]"
      },
      {
        "input": "nums1 = [[1,100],[200,200]], nums2 = [[50,50],[150,150]]",
        "output": "[(1, 100), (50, 50), (150, 150), (200, 200)]"
      },
      {
        "input": "nums1 = [[1,50],[4,75],[7,100],[10,125]], nums2 = [[2,60],[3,80],[5,90],[6,105],[8,130],[9,145]]",
        "output": "[(1, 50), (2, 60), (3, 80), (4, 75), (5, 90), (6, 105), (7, 100), (8, 130), (9, 145), (10, 125)]"
      },
      {
        "input": "nums1 = [[1,100],[2,200],[3,300],[4,400],[5,500],[6,600],[7,700],[8,800],[9,900],[10,1000]], nums2 = [[1,100],[2,200],[3,300],[4,400],[5,500],[6,600],[7,700],[8,800],[9,900],[10,1000]]",
        "output": "[(1, 200), (2, 400), (3, 600), (4, 800), (5, 1000), (6, 1200), (7, 1400), (8, 1600), (9, 1800), (10, 2000)]"
      },
      {
        "input": "nums1 = [[500,500]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (500, 500)]"
      },
      {
        "input": "nums1 = [[999,1000]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (999, 1000)]"
      },
      {
        "input": "nums1 = [[100,100],[200,200],[300,300],[400,400]], nums2 = [[150,150],[250,250],[350,350],[450,450]]",
        "output": "[(100, 100), (150, 150), (200, 200), (250, 250), (300, 300), (350, 350), (400, 400), (450, 450)]"
      },
      {
        "input": "nums1 = [[1,999]], nums2 = [[1,1]]",
        "output": "[(1, 1000)]"
      },
      {
        "input": "nums1 = [[10,10],[20,20],[30,30]], nums2 = [[5,5],[15,15],[25,25],[35,35]]",
        "output": "[(5, 5), (10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35)]"
      },
      {
        "input": "nums1 = [[1,9],[2,8],[3,7],[4,6],[5,5]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[(1, 10), (2, 10), (3, 10), (4, 10), (5, 10)]"
      },
      {
        "input": "nums1 = [[1,1],[2,1],[3,1],[4,1],[5,1]], nums2 = [[1,9],[2,8],[3,7],[4,6],[5,5]]",
        "output": "[(1, 10), (2, 9), (3, 8), (4, 7), (5, 6)]"
      },
      {
        "input": "nums1 = [[100,1],[200,2],[300,3]], nums2 = [[150,4],[250,5],[350,6]]",
        "output": "[(100, 1), (150, 4), (200, 2), (250, 5), (300, 3), (350, 6)]"
      },
      {
        "input": "nums1 = [[1,500],[100,500],[1000,500]], nums2 = [[50,500],[250,500],[500,500],[750,500]]",
        "output": "[(1, 500), (50, 500), (100, 500), (250, 500), (500, 500), (750, 500), (1000, 500)]"
      },
      {
        "input": "nums1 = [[1,1]], nums2 = [[1,999],[2,998],[3,997],[4,996],[5,995]]",
        "output": "[(1, 1000), (2, 998), (3, 997), (4, 996), (5, 995)]"
      },
      {
        "input": "nums1 = [[1,200],[100,300],[200,400]], nums2 = [[1,100],[150,200],[200,100]]",
        "output": "[(1, 300), (100, 300), (150, 200), (200, 500)]"
      },
      {
        "input": "nums1 = [[100,200],[102,202],[104,204],[106,206],[108,208]], nums2 = [[101,201],[103,203],[105,205],[107,207],[109,209]]",
        "output": "[(100, 200), (101, 201), (102, 202), (103, 203), (104, 204), (105, 205), (106, 206), (107, 207), (108, 208), (109, 209)]"
      },
      {
        "input": "nums1 = [[1,1],[1000,1000]], nums2 = [[500,500],[1000,500]]",
        "output": "[(1, 1), (500, 500), (1000, 1500)]"
      },
      {
        "input": "nums1 = [[5,1],[10,10],[15,15],[20,20]], nums2 = [[2,2],[4,4],[6,6],[8,8],[12,12],[14,14],[16,16],[18,18],[22,22]]",
        "output": "[(2, 2), (4, 4), (5, 1), (6, 6), (8, 8), (10, 10), (12, 12), (14, 14), (15, 15), (16, 16), (18, 18), (20, 20), (22, 22)]"
      },
      {
        "input": "nums1 = [[1,1000],[1000,1]], nums2 = [[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "[(1, 1000), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (1000, 1)]"
      },
      {
        "input": "nums1 = [[1,1000],[2,1000],[3,1000]], nums2 = [[4,1000],[5,1000],[6,1000],[7,1000],[8,1000]]",
        "output": "[(1, 1000), (2, 1000), (3, 1000), (4, 1000), (5, 1000), (6, 1000), (7, 1000), (8, 1000)]"
      },
      {
        "input": "nums1 = [[1,100],[3,150],[5,200],[7,250]], nums2 = [[2,120],[4,180],[6,240],[8,300]]",
        "output": "[(1, 100), (2, 120), (3, 150), (4, 180), (5, 200), (6, 240), (7, 250), (8, 300)]"
      },
      {
        "input": "nums1 = [[100,1],[200,2],[300,3],[400,4],[500,5]], nums2 = [[100,10],[200,20],[300,30],[400,40],[500,50]]",
        "output": "[(100, 11), (200, 22), (300, 33), (400, 44), (500, 55)]"
      },
      {
        "input": "nums1 = [[10,10],[20,20],[30,30]], nums2 = [[15,15],[25,25],[35,35]]",
        "output": "[(10, 10), (15, 15), (20, 20), (25, 25), (30, 30), (35, 35)]"
      },
      {
        "input": "nums1 = [[1,1]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[(1, 2), (2, 2), (3, 3), (4, 4), (5, 5)]"
      },
      {
        "input": "nums1 = [[1,1],[1000,1000]], nums2 = [[500,500],[1000,1000]]",
        "output": "[(1, 1), (500, 500), (1000, 2000)]"
      },
      {
        "input": "nums1 = [[10,100],[20,200],[30,300]], nums2 = [[10,10],[20,20],[40,40]]",
        "output": "[(10, 110), (20, 220), (30, 300), (40, 40)]"
      },
      {
        "input": "nums1 = [[1,900],[2,800],[3,700],[4,600],[5,500]], nums2 = [[6,400],[7,300],[8,200],[9,100]]",
        "output": "[(1, 900), (2, 800), (3, 700), (4, 600), (5, 500), (6, 400), (7, 300), (8, 200), (9, 100)]"
      },
      {
        "input": "nums1 = [[100,100],[200,200],[300,300]], nums2 = [[101,101],[102,102],[103,103],[104,104],[105,105]]",
        "output": "[(100, 100), (101, 101), (102, 102), (103, 103), (104, 104), (105, 105), (200, 200), (300, 300)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5]], nums2 = [[3,10],[4,20],[5,30],[6,40],[7,50]]",
        "output": "[(1, 1), (2, 2), (3, 13), (4, 24), (5, 35), (6, 40), (7, 50)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[(1, 2), (2, 4), (3, 6), (4, 8), (5, 10)]"
      },
      {
        "input": "nums1 = [[1,2],[3,4],[5,6]], nums2 = [[2,3],[4,5],[6,7]]",
        "output": "[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]"
      },
      {
        "input": "nums1 = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8]], nums2 = [[1,8],[2,7],[3,6],[4,5],[5,4],[6,3],[7,2]]",
        "output": "[(1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (6, 10), (7, 10)]"
      },
      {
        "input": "nums1 = [[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]], nums2 = [[1,999]]",
        "output": "[(1, 1000), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5]], nums2 = [[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15)]"
      },
      {
        "input": "nums1 = [[10,50],[20,60],[30,70]], nums2 = [[5,10],[15,20],[25,30],[35,40]]",
        "output": "[(5, 10), (10, 50), (15, 20), (20, 60), (25, 30), (30, 70), (35, 40)]"
      },
      {
        "input": "nums1 = [[50,500],[100,1000]], nums2 = [[25,250],[75,750],[125,1250]]",
        "output": "[(25, 250), (50, 500), (75, 750), (100, 1000), (125, 1250)]"
      },
      {
        "input": "nums1 = [[1,100],[3,200],[5,300],[7,400]], nums2 = [[2,150],[4,250],[6,350],[8,450]]",
        "output": "[(1, 100), (2, 150), (3, 200), (4, 250), (5, 300), (6, 350), (7, 400), (8, 450)]"
      },
      {
        "input": "nums1 = [[1,1000],[2,999],[3,998],[4,997],[5,996]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "[(1, 1001), (2, 1001), (3, 1001), (4, 1001), (5, 1001)]"
      },
      {
        "input": "nums1 = [[1,5],[100,5],[200,5]], nums2 = [[50,5],[150,5],[250,5],[300,5],[350,5]]",
        "output": "[(1, 5), (50, 5), (100, 5), (150, 5), (200, 5), (250, 5), (300, 5), (350, 5)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5]], nums2 = [[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "[(1, 1), (2, 2), (3, 3), (4, 4), (5, 10), (6, 6), (7, 7), (8, 8), (9, 9)]"
      },
      {
        "input": "nums1 = [[1,10],[4,20],[6,30]], nums2 = [[2,15],[4,25],[5,35]]",
        "output": "[(1, 10), (2, 15), (4, 45), (5, 35), (6, 30)]"
      },
      {
        "input": "nums1 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]], nums2 = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
        "output": "[(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16), (9, 18)]"
      }
    ]
  },
  {
    "id": 993,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.\nTwo nodes of a binary tree are cousins if they have the same depth with different parents.\nNote that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.\n\u00a0\nExample 1:\n\n\nInput: root = [1,2,3,4], x = 4, y = 3\nOutput: false\n\nExample 2:\n\n\nInput: root = [1,2,3,null,4,null,5], x = 5, y = 4\nOutput: true\n\nExample 3:\n\n\nInput: root = [1,2,3,null,4], x = 2, y = 3\nOutput: false\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [2, 100].\n1 <= Node.val <= 100\nEach node has a unique value.\nx != y\nx and y are exist in the tree.\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,null,null,null,5,null,6], x = 5, y = 6",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,4,null,5], x = 5, y = 4",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11], x = 9, y = 11",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,null,4,null,null,5,null,6], x = 5, y = 6",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], x = 2, y = 3",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,8,null,null,9], x = 6, y = 8",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,10,11,null,null,null,null,12,13], x = 10, y = 11",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4], x = 4, y = 3",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,null,6,7], x = 6, y = 7",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,4], x = 2, y = 3",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,null,4,5], x = 4, y = 5",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11], x = 3, y = 7",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], x = 4, y = 7",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11], x = 2, y = 3",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,null,null,6,7], x = 6, y = 7",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,null,6,7,8,9], x = 8, y = 9",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,4,null,null,5,6,null,null,null,null,7,8], x = 7, y = 8",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,null,6,7], x = 6, y = 7",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11], x = 4, y = 9",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9], x = 4, y = 9",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,4,null,null,5], x = 5, y = 4",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11], x = 4, y = 6",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,null,null,6,null,null,7], x = 6, y = 7",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9], x = 8, y = 5",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], x = 4, y = 6",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,null,null,null,null,5], x = 4, y = 5",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], x = 5, y = 7",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,null,null,7,8], x = 7, y = 8",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,6,7], x = 6, y = 7",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], x = 6, y = 5",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], x = 8, y = 11",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11,null,null,12], x = 12, y = 11",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,null,null,null,null,5], x = 2, y = 3",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,6,null,null,7], x = 6, y = 7",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,null,null,9,null,null,10], x = 8, y = 10",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,4,5], x = 4, y = 5",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7], x = 6, y = 7",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,null,4,null,null,5,6], x = 5, y = 6",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11], x = 10, y = 11",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7], x = 4, y = 5",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7,null,null,8,9], x = 8, y = 9",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,null,null,null], x = 4, y = 3",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,6,7], x = 4, y = 7",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11], x = 8, y = 9",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,null,8,9], x = 8, y = 9",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], x = 10, y = 14",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,8,9,10,11], x = 10, y = 11",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,null,null,6,7], x = 6, y = 5",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,null,null,null,8,9], x = 8, y = 9",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,null,8,9], x = 8, y = 9",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], x = 3, y = 15",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,null,null,null,5,6], x = 5, y = 6",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,null,null,10,11,null,null,12,13], x = 12, y = 13",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,6], x = 6, y = 5",
        "output": "False"
      }
    ]
  },
  {
    "id": 441,
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Binary Search"
    ],
    "problemDescription": "You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\nGiven the integer n, return the number of complete rows of the staircase you will build.\n\u00a0\nExample 1:\n\n\nInput: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.\n\nExample 2:\n\n\nInput: n = 8\nOutput: 3\nExplanation: Because the 4th row is incomplete, we return 3.\n\n\u00a0\nConstraints:\n\n1 <= n <= 231 - 1\n\n",
    "starterCode": "class Solution:\n    def arrangeCoins(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 8",
        "output": "3"
      },
      {
        "input": "n = 100",
        "output": "13"
      },
      {
        "input": "n = 30",
        "output": "7"
      },
      {
        "input": "n = 15",
        "output": "5"
      },
      {
        "input": "n = 22",
        "output": "6"
      },
      {
        "input": "n = 21",
        "output": "6"
      },
      {
        "input": "n = 2147483647",
        "output": "65535"
      },
      {
        "input": "n = 1804289383",
        "output": "60070"
      },
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 180",
        "output": "18"
      },
      {
        "input": "n = 10",
        "output": "4"
      },
      {
        "input": "n = 5",
        "output": "2"
      },
      {
        "input": "n = 210",
        "output": "20"
      },
      {
        "input": "n = 45",
        "output": "9"
      },
      {
        "input": "n = 171",
        "output": "18"
      },
      {
        "input": "n = 3",
        "output": "2"
      },
      {
        "input": "n = 576",
        "output": "33"
      },
      {
        "input": "n = 2147483646",
        "output": "65535"
      },
      {
        "input": "n = 12",
        "output": "4"
      },
      {
        "input": "n = 7",
        "output": "3"
      },
      {
        "input": "n = 70",
        "output": "11"
      },
      {
        "input": "n = 1000",
        "output": "44"
      },
      {
        "input": "n = 28",
        "output": "7"
      },
      {
        "input": "n = 64",
        "output": "10"
      },
      {
        "input": "n = 16",
        "output": "5"
      },
      {
        "input": "n = 10000",
        "output": "140"
      },
      {
        "input": "n = 1001",
        "output": "44"
      },
      {
        "input": "n = 2",
        "output": "1"
      },
      {
        "input": "n = 80",
        "output": "12"
      },
      {
        "input": "n = 165",
        "output": "17"
      },
      {
        "input": "n = 6678",
        "output": "115"
      },
      {
        "input": "n = 101",
        "output": "13"
      },
      {
        "input": "n = 100000",
        "output": "446"
      },
      {
        "input": "n = 18",
        "output": "5"
      },
      {
        "input": "n = 256",
        "output": "22"
      },
      {
        "input": "n = 36",
        "output": "8"
      },
      {
        "input": "n = 500",
        "output": "31"
      },
      {
        "input": "n = 1000000000",
        "output": "44720"
      },
      {
        "input": "n = 1999",
        "output": "62"
      },
      {
        "input": "n = 987654321",
        "output": "44443"
      },
      {
        "input": "n = 5000000",
        "output": "3161"
      },
      {
        "input": "n = 325",
        "output": "25"
      },
      {
        "input": "n = 441",
        "output": "29"
      },
      {
        "input": "n = 136",
        "output": "16"
      },
      {
        "input": "n = 500000000",
        "output": "31622"
      },
      {
        "input": "n = 1000000",
        "output": "1413"
      },
      {
        "input": "n = 6",
        "output": "3"
      },
      {
        "input": "n = 123456789",
        "output": "15712"
      },
      {
        "input": "n = 120",
        "output": "15"
      },
      {
        "input": "n = 1999999999",
        "output": "63245"
      },
      {
        "input": "n = 123456",
        "output": "496"
      },
      {
        "input": "n = 5050",
        "output": "100"
      },
      {
        "input": "n = 55",
        "output": "10"
      },
      {
        "input": "n = 84",
        "output": "12"
      }
    ]
  },
  {
    "id": 1337,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Binary Search",
      "Matrix",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row.\nA row i is weaker than a row j if one of the following is true:\n\nThe number of soldiers in row i is less than the number of soldiers in row j.\nBoth rows have the same number of soldiers and i < j.\n\nReturn the indices of the k weakest rows in the matrix ordered from weakest to strongest.\n\u00a0\nExample 1:\n\nInput: mat = \n[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \nk = 3\nOutput: [2,0,3]\nExplanation: \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are [2,0,3,1,4].\n\nExample 2:\n\nInput: mat = \n[[1,0,0,0],\n [1,1,1,1],\n [1,0,0,0],\n [1,0,0,0]], \nk = 2\nOutput: [0,2]\nExplanation: \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are [0,2,3,1].\n\n\u00a0\nConstraints:\n\nm == mat.length\nn == mat[i].length\n2 <= n, m <= 100\n1 <= k <= m\nmatrix[i][j] is either 0 or 1.\n\n",
    "starterCode": "class Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "mat = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], k = 2",
        "output": "[0, 1]"
      },
      {
        "input": "mat = [[0,0,0,0],[1,0,0,0],[1,1,0,0],[1,1,1,0]], k = 2",
        "output": "[0, 1]"
      },
      {
        "input": "mat = [[1,1,1,1],[0,0,0,0],[1,0,0,0],[0,1,1,1]], k = 3",
        "output": "[1, 2, 0]"
      },
      {
        "input": "mat = [[0,0,0,0],[0,0,0,0],[1,1,1,1],[1,1,1,1]], k = 2",
        "output": "[0, 1]"
      },
      {
        "input": "mat = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]], k = 1",
        "output": "[0]"
      },
      {
        "input": "mat = [[1,1,0,0,0],[1,1,1,1,0],[1,0,0,0,0],[1,1,0,0,0],[1,1,1,1,1]], k = 3",
        "output": "[2, 0, 3]"
      },
      {
        "input": "mat = [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]], k = 4",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "mat = [[1,1,1,0,0],[1,1,0,0,0],[1,0,0,0,0],[0,0,0,0,0]], k = 4",
        "output": "[3, 2, 1, 0]"
      },
      {
        "input": "mat = [[1,1,1,0,0],[1,1,1,1,0],[1,0,0,0,0],[1,1,0,0,0],[1,1,1,1,1]], k = 4",
        "output": "[2, 3, 0, 1]"
      },
      {
        "input": "mat = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], k = 1",
        "output": "[0]"
      },
      {
        "input": "mat = [[1,0,0,0],[1,1,1,1],[1,0,0,0],[1,0,0,0]], k = 2",
        "output": "[0, 2]"
      },
      {
        "input": "mat = [[1,1,1,0,0],[1,1,1,1,0],[1,0,0,0,0],[1,1,0,0,0],[1,1,1,1,1]], k = 5",
        "output": "[2, 3, 0, 1, 4]"
      },
      {
        "input": "mat = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], k = 4",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "mat = [[1,1,1,0],[1,0,0,0],[1,1,0,0]], k = 2",
        "output": "[1, 2]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 7",
        "output": "[9, 10, 8, 7, 6, 5, 4]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 10",
        "output": "[10, 11, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,0,0,0],[1,1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0,0],[1,1,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[6, 5, 4, 3, 2]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,0,0,0],[1,1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0,0],[1,1,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]], k = 4",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]], k = 3",
        "output": "[0, 1, 2]"
      },
      {
        "input": "mat = [[1,1,1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]], k = 2",
        "output": "[4, 3]"
      },
      {
        "input": "mat = [[1,1,0,0,0,0,0],[0,0,0,0,0,0,0],[1,1,1,1,0,0,0],[1,0,0,0,0,0,0],[1,1,1,1,1,1,0],[0,0,0,0,0,0,0],[1,1,1,1,1,1,1]], k = 7",
        "output": "[1, 5, 3, 0, 2, 4, 6]"
      },
      {
        "input": "mat = [[1,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1],[1,1,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 6",
        "output": "[1, 8, 9, 0, 3, 4]"
      },
      {
        "input": "mat = [[1,1,1,1,1,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,0,0,0,0,0],[1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]], k = 6",
        "output": "[5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0]], k = 5",
        "output": "[4, 3, 2, 1, 0]"
      },
      {
        "input": "mat = [[1,1,0,0,0,0,0],[1,1,1,1,0,0,0],[1,1,1,0,0,0,0],[1,0,0,0,0,0,0],[1,1,1,1,1,0,0]], k = 5",
        "output": "[3, 0, 2, 1, 4]"
      },
      {
        "input": "mat = [[1,1,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]], k = 2",
        "output": "[3, 4]"
      },
      {
        "input": "mat = [[1,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0]], k = 6",
        "output": "[1, 3, 5, 0, 2, 4]"
      },
      {
        "input": "mat = [[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,1,1]], k = 3",
        "output": "[0, 1, 2]"
      },
      {
        "input": "mat = [[1,1,1,0,0,0,0],[1,1,1,1,1,0,0],[1,1,0,0,0,0,0],[0,0,0,0,0,0,0],[1,1,1,1,0,0,0],[1,1,0,0,0,0,0]], k = 3",
        "output": "[3, 2, 5]"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]], k = 2",
        "output": "[0, 1]"
      },
      {
        "input": "mat = [[1,0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,1,1]], k = 7",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "mat = [[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[1,1,1,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[1, 7, 6, 5, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[5, 6, 7, 4, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]], k = 3",
        "output": "[5, 4, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,0,0,0],[1,1,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0],[1,1,1,0,0,0,0],[1,1,0,0,0,0,0]], k = 5",
        "output": "[3, 1, 5, 4, 0]"
      },
      {
        "input": "mat = [[1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0]], k = 3",
        "output": "[3, 2, 0]"
      },
      {
        "input": "mat = [[1,1,1,1,1,0,0,0],[1,1,1,1,1,1,0,0],[1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]], k = 4",
        "output": "[4, 3, 2, 0]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,0,0,0,0]], k = 5",
        "output": "[4, 3, 2, 1, 0]"
      },
      {
        "input": "mat = [[1,1,1,1,1],[0,0,0,0,0],[1,1,1,0,0],[1,1,0,0,0],[1,0,0,0,0],[0,0,0,0,0],[1,1,1,1,1],[1,1,1,1,1]], k = 4",
        "output": "[1, 5, 4, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0],[1,1,1,0,0,0,0,0],[1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]], k = 3",
        "output": "[5, 4, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,1,0,0,0],[1,1,0,0,0,0,0,0],[1,1,1,1,1,1,1,0],[0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0]], k = 3",
        "output": "[3, 4, 1]"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0],[1,0,0,0,0,0,0],[1,1,0,0,0,0,0],[1,1,1,0,0,0,0],[1,1,1,1,0,0,0],[1,1,1,1,1,0,0],[1,1,1,1,1,1,0]], k = 4",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,0,0],[1,1,1,0,0,0],[1,1,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0]], k = 3",
        "output": "[4, 3, 2]"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "mat = [[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0]], k = 4",
        "output": "[1, 0, 3, 2]"
      },
      {
        "input": "mat = [[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[0, 1, 2, 3, 4]"
      },
      {
        "input": "mat = [[1,1,1,0,0,0,0],[1,1,0,0,0,0,0],[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[1,1,1,1,1,1,1]], k = 3",
        "output": "[3, 2, 1]"
      },
      {
        "input": "mat = [[1,1,1,1,0,0,0],[1,1,0,0,0,0,0],[1,1,1,1,1,1,0],[0,0,0,0,0,0,0],[1,0,0,0,0,0,0]], k = 5",
        "output": "[3, 4, 1, 0, 2]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,0,0,0],[0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,1,0,0],[1,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[1, 4, 2, 0, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]], k = 4",
        "output": "[4, 3, 2, 1]"
      },
      {
        "input": "mat = [[1,1,1,1,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 4",
        "output": "[8, 9, 7, 0]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]], k = 10",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1]], k = 3",
        "output": "[0, 1, 2]"
      },
      {
        "input": "mat = [[1,0,0,0,0],[1,1,0,0,0],[1,1,1,0,0],[1,1,1,1,0],[1,1,1,1,1],[0,0,0,0,0]], k = 6",
        "output": "[5, 0, 1, 2, 3, 4]"
      },
      {
        "input": "mat = [[1,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[1, 0, 2, 3, 4]"
      },
      {
        "input": "mat = [[1,1,0,0,0],[1,1,1,0,0],[1,1,1,1,0],[1,1,0,0,0],[1,0,0,0,0],[0,0,0,0,0]], k = 3",
        "output": "[5, 4, 0]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0]], k = 4",
        "output": "[5, 1, 6, 4]"
      },
      {
        "input": "mat = [[1,1,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]], k = 3",
        "output": "[2, 3, 4]"
      },
      {
        "input": "mat = [[1,1,1,1,1,0,0,0],[1,1,1,0,0,0,0,0],[1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]], k = 5",
        "output": "[4, 3, 2, 1, 0]"
      },
      {
        "input": "mat = [[1,1,0,0,0],[1,1,1,0,0],[1,1,1,1,0],[1,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,1,0,0],[1,1,0,0,0]], k = 6",
        "output": "[4, 5, 0, 7, 1, 6]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0]], k = 5",
        "output": "[3, 4, 5, 0, 1]"
      },
      {
        "input": "mat = [[1,1,0,0],[1,0,0,0],[1,1,1,0],[1,1,1,1],[1,1,1,1],[1,1,0,0]], k = 4",
        "output": "[1, 0, 5, 2]"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1]], k = 4",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]], k = 10",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
      },
      {
        "input": "mat = [[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]], k = 5",
        "output": "[1, 3, 4, 0, 2]"
      },
      {
        "input": "mat = [[1,1,1,1,0,0,0],[1,1,1,0,0,0,0],[1,1,0,0,0,0,0],[1,0,0,0,0,0,0],[0,0,0,0,0,0,0]], k = 4",
        "output": "[4, 3, 2, 1]"
      },
      {
        "input": "mat = [[1,1,1,0,0,0,0],[1,1,0,0,0,0,0],[1,0,0,0,0,0,0],[1,1,1,1,0,0,0],[1,1,1,0,0,0,0],[1,1,0,0,0,0,0]], k = 4",
        "output": "[2, 1, 5, 0]"
      },
      {
        "input": "mat = [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 7",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "mat = [[1,1,1,0,0,0],[1,1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,0,0],[1,1,1,1,1,0],[1,1,1,1,1,1],[1,1,1,1,1,1]], k = 6",
        "output": "[2, 0, 3, 4, 1, 5]"
      },
      {
        "input": "mat = [[1,1,1,1,0,0,0,0,0,0,0,0],[1,1,1,1,1,0,0,0,0,0,0,0],[1,1,1,1,1,1,0,0,0,0,0,0],[1,1,1,1,1,1,1,0,0,0,0,0],[1,1,1,1,1,1,1,1,0,0,0,0]], k = 4",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]], k = 6",
        "output": "[10, 9, 8, 7, 6, 5]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]], k = 3",
        "output": "[0, 1, 2]"
      },
      {
        "input": "mat = [[1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,0,0,0],[1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1]], k = 4",
        "output": "[0, 1, 2, 3]"
      },
      {
        "input": "mat = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]], k = 3",
        "output": "[0, 1, 2]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]], k = 2",
        "output": "[0, 1]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]], k = 5",
        "output": "[9, 8, 7, 6, 5]"
      },
      {
        "input": "mat = [[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,0,0],[1,1,1,1,1,1,1,0,0,0],[1,1,1,1,1,1,0,0,0,0],[1,1,1,1,1,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]], k = 7",
        "output": "[9, 8, 7, 6, 5, 4, 3]"
      }
    ]
  },
  {
    "id": 844,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Two Pointers",
      "String",
      "Simulation"
    ],
    "problemDescription": "Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.\nNote that after backspacing an empty text, the text will continue empty.\n\u00a0\nExample 1:\n\nInput: s = \"ab#c\", t = \"ad#c\"\nOutput: true\nExplanation: Both s and t become \"ac\".\n\nExample 2:\n\nInput: s = \"ab##\", t = \"c#d#\"\nOutput: true\nExplanation: Both s and t become \"\".\n\nExample 3:\n\nInput: s = \"a#c\", t = \"b\"\nOutput: false\nExplanation: s becomes \"c\" while t becomes \"b\".\n\n\u00a0\nConstraints:\n\n1 <= s.length, t.length <= 200\ns and t only contain lowercase letters and '#' characters.\n\n\u00a0\nFollow up: Can you solve it in O(n) time and O(1) space?\n",
    "starterCode": "class Solution:\n    def backspaceCompare(self, s: str, t: str) -> bool:\n        ",
    "testCases": [
      {
        "input": "s = \"###\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"#a#c\", t = \"c\"",
        "output": "True"
      },
      {
        "input": "s = \"xywrrmp\", t = \"xywrrmu#p\"",
        "output": "True"
      },
      {
        "input": "s = \"bbbextm#w\", t = \"bb#bbbextm#w\"",
        "output": "False"
      },
      {
        "input": "s = \"ab\", t = \"a#b\"",
        "output": "False"
      },
      {
        "input": "s = \"abc#d\", t = \"abzd#\"",
        "output": "False"
      },
      {
        "input": "s = \"ab#\", t = \"a#b\"",
        "output": "False"
      },
      {
        "input": "s = \"abc#d\", t = \"abcd#\"",
        "output": "False"
      },
      {
        "input": "s = \"xywrrmp\", t = \"xywrrmp\"",
        "output": "True"
      },
      {
        "input": "s = \"a####b\", t = \"b\"",
        "output": "True"
      },
      {
        "input": "s = \"ab#\", t = \"ab#\"",
        "output": "True"
      },
      {
        "input": "s = \"######\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"aaa###a\", t = \"aaaa##a\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", t = \"dcba\"",
        "output": "False"
      },
      {
        "input": "s = \"a#c\", t = \"b\"",
        "output": "False"
      },
      {
        "input": "s = \"abc#d\", t = \"abz#d\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd####\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"#####\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"ab#c\", t = \"ad#c\"",
        "output": "True"
      },
      {
        "input": "s = \"hello#world#\", t = \"hello#wor#ld\"",
        "output": "False"
      },
      {
        "input": "s = \"#a#c\", t = \"b\"",
        "output": "False"
      },
      {
        "input": "s = \"a##c\", t = \"#a#c\"",
        "output": "True"
      },
      {
        "input": "s = \"####\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"a###b\", t = \"b\"",
        "output": "True"
      },
      {
        "input": "s = \"a###b\", t = \"a###b\"",
        "output": "True"
      },
      {
        "input": "s = \"ab##\", t = \"c#d#\"",
        "output": "True"
      },
      {
        "input": "s = \"ab#cd\", t = \"a#b#cd\"",
        "output": "False"
      },
      {
        "input": "s = \"y#fo##f\", t = \"y#f#o##f\"",
        "output": "True"
      },
      {
        "input": "s = \"ab#cd#e##f\", t = \"acdf\"",
        "output": "False"
      },
      {
        "input": "s = \"abc###d##e##f##g##h##i##j##k##l##m##n##o##p##q##r##s##t##u##v##w##x##y##z##\", t = \"abc\"",
        "output": "False"
      },
      {
        "input": "s = \"ab#cde##fg#\", t = \"ab#def#g#\"",
        "output": "False"
      },
      {
        "input": "s = \"ab#cd#e##f\", t = \"abcdef##\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdef#####\", t = \"ab\"",
        "output": "False"
      },
      {
        "input": "s = \"###abc###def###ghi###jkl###mno###pqr###stu###vwx###yz#\", t = \"abc###def###ghi###jkl###mno###pqr###stu###vwx###yz###\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#cd#ef#gh##ij##klm#nop##qrst##uvw#xyz####\", t = \"a#b#cd#ef#gh##ij##klm#nop##qrst##uvw#xy#z#\"",
        "output": "False"
      },
      {
        "input": "s = \"#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"#\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij#klmnopqrst#uvwxyz#\", t = \"uvwxyz#tsrqponmlkjihgfedcba\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#c#d#e#f#g\", t = \"\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdef#ghijkl#mnopqr#stuvwx#yz##\", t = \"yz##xwvu#tsrqpon#mlkjihg#fedcba\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#cd#ef#gh##ij##klm#nop##qrst##uvw#xyz###\", t = \"abcdef#ghijklmnopqrstuvwxyz###\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd#efgh#ijkl#mnop#qrst#uvwx#yz##\", t = \"zyxw#vuts#rqpon#mlkj#ihgf#edcb#a\"",
        "output": "False"
      },
      {
        "input": "s = \"x###y##z\", t = \"xyz###\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "False"
      },
      {
        "input": "s = \"zzzzzzzzzz####zzzzzzzzzz##\", t = \"zzzzzzzzzzzzzzzzzz\"",
        "output": "False"
      },
      {
        "input": "s = \"a##b##c##d##e##f##g##h##i##j##k##l##m##n##o##p##q##r##s##t##u##v##w##x##y##z##\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd##efghijkl##mnopqr##stuv##wxyz####\", t = \"abcd##efghijkl##mnopqr##stuv##wxy##z###\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd#e#f#gh#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "False"
      },
      {
        "input": "s = \"f####jkl###xyz##\", t = \"jkxyz#\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"abcdefghijklmnopqrstuvwxyz#\"",
        "output": "False"
      },
      {
        "input": "s = \"ab#cdef###gh#ij#kl##mno###pqr####stu#####vwxyz##\", t = \"vwxyz##\"",
        "output": "False"
      },
      {
        "input": "s = \"ab#c#d#efg\", t = \"abcdefg###\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefg#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"z#y#x#w#v#u#t#s#r#q#p#o#n#m#l#k#j#i#h#g#f#e#d#c#b#a#\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#c#d#e#f#\", t = \"#f#e#d#c#b#a#\"",
        "output": "True"
      },
      {
        "input": "s = \"abcde#fghij#klmno#pqrs#tu#v#w#x#y#z#\", t = \"abcdefghijklmnopqrstuvwxy\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"z#y#x#w#v#u#t#s#r#q#p#o#n#m#l#k#j#i#h#g#f#e#d#c#b#a#\"",
        "output": "True"
      },
      {
        "input": "s = \"z#x#c#v#b#n#m#w#q#o#p#l#k#j#i#h#g#f#e#d#c#b#a#\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"##ab#c#d#e#f##g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"z##y##x##w##v##u##t##s##r##q##p##o##n##m##l##k##j##i##h##g##f##e##d##c##b##a\"",
        "output": "False"
      },
      {
        "input": "s = \"x#y#z#\", t = \"x#y#z#\"",
        "output": "True"
      },
      {
        "input": "s = \"a###a###a###a###a###a###a###a###a###a###\", t = \"a#\"",
        "output": "True"
      },
      {
        "input": "s = \"a#b#b#c#d#d#e#e#f#f#g#g#h#h#i#i#j#j#k#k#l#l#m#m#n#n#o#o#p#p#q#q#r#r#s#s#t#t#u#u#v#v#w#w#x#x#y#y#z#z#\", t = \"zz#yy#xx#ww#vv#uu#tt#ss#rr#qq#pp#oo#nn#mm#ll#kk#jj#ii#hh#gg#ff#ee#dd#cc#bb#aa\"",
        "output": "False"
      },
      {
        "input": "s = \"abc#d##ef###\", t = \"ab##ef\"",
        "output": "False"
      },
      {
        "input": "s = \"z#y#x#w#v#u#t#s#r#q#p#o#n#m#l#k#j#i#h#g#f#e#d#c#b#a#\", t = \"zyxwvutsrqponmlkjihgfedcba#\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#cd#ef#gh##ij##klm#nop##qrst##uvw#xyz###\", t = \"a#b#cd#ef#gh##ij##klm#nop##qrst##uvw#xy##z###\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#c#d#e#f#g#h#i#j#\", t = \"abcdefghij#\"",
        "output": "False"
      },
      {
        "input": "s = \"abcabcabcabc#abcabcabcabc#\", t = \"abcabcabcabcabcabcabcabc\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz#abc#d##\", t = \"abcdefghijklmnopqrstuvwxy#\"",
        "output": "False"
      },
      {
        "input": "s = \"abcde#f#ghi#jkl#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"z\"",
        "output": "False"
      },
      {
        "input": "s = \"######abc\", t = \"abc######\"",
        "output": "False"
      },
      {
        "input": "s = \"abc#de#fgh#ijk#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"z#y#x#w#v#u#t#s#r#q#p#o#n#m#l#k#j#i#h#g#f#e#d#c#b#a\"",
        "output": "False"
      },
      {
        "input": "s = \"abcde#f#gh#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"zxywvutsrqponmlkjihgfedcba\"",
        "output": "False"
      },
      {
        "input": "s = \"abcde##fgh##ij##k#\", t = \"abcd#efgh#ij##k\"",
        "output": "False"
      },
      {
        "input": "s = \"a##b##c##d##e##f##g##\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz#abcdefghijklmnopqrstuvwxyz#\", t = \"abcdefghijklmnopqrstuvwxyz#abcdefghijklmnopqrstuvwxyz#\"",
        "output": "True"
      },
      {
        "input": "s = \"#a#b#c#d#e#f#g#h#i#j#k#\", t = \"abcdefghijk#\"",
        "output": "False"
      },
      {
        "input": "s = \"a##b##c##d##e##f##g##h##i##j##k##l##m##n##o##p##q##r##s##t##u##v##w##x##y##z##\", t = \"#z##y##x##w##v##u##t##s##r##q##p##o##n##m##l##k##j##i##h##g##f##e##d##c##b##a##\"",
        "output": "True"
      },
      {
        "input": "s = \"a##b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "False"
      },
      {
        "input": "s = \"#a#b#c#d#e#f#\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"####abc##d##ef###g####\", t = \"abc##d##ef###g####\"",
        "output": "True"
      },
      {
        "input": "s = \"#a#a#a#a#a#a#a#a#a#a#\", t = \"a#a#a#a#a#a#a#a#a#a#\"",
        "output": "True"
      },
      {
        "input": "s = \"ab#cd##ef#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"efghijklmnopqrstuvwxyz\"",
        "output": "False"
      },
      {
        "input": "s = \"a##b##c##d##e##f##g##h##i##j##k##l##m##n##o##p##q##r##s##t##u##v##w##x##y##z##\", t = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "False"
      },
      {
        "input": "s = \"longstring#####anotherstring\", t = \"longanotherstring\"",
        "output": "False"
      },
      {
        "input": "s = \"###xyz\", t = \"xyz###\"",
        "output": "False"
      },
      {
        "input": "s = \"a##b##c##d##e##f##g##h##i##j##k##l##m##n##o##p##q##r##s##t##u##v##w##x##y##z##\", t = \"a##b##c##d##e##f##g##h##i##j##k##l##m##n##o##p##q##r##s##t##u##v##w##x##y##z##\"",
        "output": "True"
      },
      {
        "input": "s = \"#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "False"
      },
      {
        "input": "s = \"#a##b##c##d##e##f##g##h##i##j##k##l##m##n##o##p##q##r##s##t##u##v##w##x##y##z##\", t = \"z##y##x##w##v##u##t##s##r##q##p##o##n##m##l##k##j##i##h##g##f##e##d##c##b##a##\"",
        "output": "True"
      },
      {
        "input": "s = \"#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\"",
        "output": "True"
      },
      {
        "input": "s = \"xy#z##\", t = \"xzz#\"",
        "output": "False"
      },
      {
        "input": "s = \"abc#def##ghi###jkl####mno#####pqr######stu#######vwx########yz#########\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"x####y\", t = \"xy#\"",
        "output": "False"
      },
      {
        "input": "s = \"qwerty#uiop##asdfghjkl##zxcvbnm##\", t = \"qwerty#uiop##asdfghjkl##zxcvbnm##\"",
        "output": "True"
      },
      {
        "input": "s = \"abc#d##e\", t = \"ab##de\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefg#####hijkl#####mnop#####qrstu#####vwxyz\", t = \"hijklmnopqrstuuvwxyz\"",
        "output": "False"
      },
      {
        "input": "s = \"abcde######\", t = \"fghij#####\"",
        "output": "True"
      },
      {
        "input": "s = \"#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"xylophone##music####\", t = \"xylophone###music####\"",
        "output": "False"
      },
      {
        "input": "s = \"a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"zxywvutsrqponmlkjihgfedcba\"",
        "output": "False"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz##\", t = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyz##\"",
        "output": "False"
      },
      {
        "input": "s = \"z#z#z#z#z#\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"ab#cd#ef#gh#ij#kl#mn#op#qr#st#uv#wx#yz#\", t = \"yz#xw#vu#ts#rq#po#nm#lk#ji#hg#fe#dc#ba\"",
        "output": "False"
      },
      {
        "input": "s = \"abcde###fghijk###lmnop###qrstuvwxyz###\", t = \"qrstuvwxyz###mnop###fghijk###abcde###\"",
        "output": "False"
      },
      {
        "input": "s = \"#a#b#b#c#d#d#e#e#f#f#g#g#h#h#i#i#j#j#k#k#l#l#m#m#n#n#o#o#p#p#q#q#r#r#s#s#t#t#u#u#v#v#w#w#x#x#y#y#z#z#\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"a###b#c###d#e###f#g###h#i###j#k###l#m###n#o###p#q###r#s###t#u###v#w###x###y###z###\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"a###b###c###d###e###f###g###h###i###j###k###l###m###n###o###p###q###r###s###t###u###v###w###x###y###z###\", t = \"\"",
        "output": "True"
      },
      {
        "input": "s = \"ab##cd##ef##gh##ij##kl##mn##op##qr##st##uv##wx##yz##\", t = \"a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\"",
        "output": "True"
      },
      {
        "input": "s = \"abc#de#f##g#hi#jkl##mno###pqr####stu#####vwxyz##\", t = \"abc#de#f##g#hi#jkl##mno###pqr####stu#####\"",
        "output": "False"
      },
      {
        "input": "s = \"##abc#d##ef#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#\", t = \"abcdefghijklnopqrstuvwxyz\"",
        "output": "False"
      }
    ]
  },
  {
    "id": 2960,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Counting",
      "Simulation"
    ],
    "problemDescription": "You are given a 0-indexed integer array batteryPercentages having length n, denoting the battery percentages of n 0-indexed devices.\nYour task is to test each device i in order from 0 to n - 1, by performing the following test operations:\n\nIf batteryPercentages[i] is greater than 0:\n\n\t\nIncrement the count of tested devices.\nDecrease the battery percentage of all devices with indices j in the range [i + 1, n - 1] by 1, ensuring their battery percentage never goes below 0, i.e, batteryPercentages[j] = max(0, batteryPercentages[j] - 1).\nMove to the next device.\n\n\nOtherwise, move to the next device without performing any test.\n\nReturn an integer denoting the number of devices that will be tested after performing the test operations in order.\n\u00a0\nExample 1:\n\nInput: batteryPercentages = [1,1,2,1,3]\nOutput: 3\nExplanation: Performing the test operations in order starting from device 0:\nAt device 0, batteryPercentages[0] > 0, so there is now 1 tested device, and batteryPercentages becomes [1,0,1,0,2].\nAt device 1, batteryPercentages[1] == 0, so we move to the next device without testing.\nAt device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages becomes [1,0,1,0,1].\nAt device 3, batteryPercentages[3] == 0, so we move to the next device without testing.\nAt device 4, batteryPercentages[4] > 0, so there are now 3 tested devices, and batteryPercentages stays the same.\nSo, the answer is 3.\n\nExample 2:\n\nInput: batteryPercentages = [0,1,2]\nOutput: 2\nExplanation: Performing the test operations in order starting from device 0:\nAt device 0, batteryPercentages[0] == 0, so we move to the next device without testing.\nAt device 1, batteryPercentages[1] > 0, so there is now 1 tested device, and batteryPercentages becomes [0,1,1].\nAt device 2, batteryPercentages[2] > 0, so there are now 2 tested devices, and batteryPercentages stays the same.\nSo, the answer is 2.\n\n\u00a0\nConstraints:\n\n1 <= n == batteryPercentages.length <= 100 \n0 <= batteryPercentages[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def countTestedDevices(self, batteryPercentages: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "batteryPercentages = [100,99,98,97,96]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [50,49,48,47,46]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [100,100,100]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [100,0,100,0,100]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [3,2,1,0,4,3,2,1]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [3,0,2,0,1]",
        "output": "2"
      },
      {
        "input": "batteryPercentages = [1,1,2,1,3]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [0,1,0,1,0]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [1]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [0,0,0]",
        "output": "0"
      },
      {
        "input": "batteryPercentages = [3,2,1,0,4,3,2,1,0]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [50,40,30,20,10]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [50,0,50,0,50]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [0,1,2]",
        "output": "2"
      },
      {
        "input": "batteryPercentages = [100]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "batteryPercentages = [100,99,98,97]",
        "output": "4"
      },
      {
        "input": "batteryPercentages = [50,50,50,50,50]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [1,0,1,0,1]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [0,0,0,0]",
        "output": "0"
      },
      {
        "input": "batteryPercentages = [1,0,1,0,1,0,1]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [0]",
        "output": "0"
      },
      {
        "input": "batteryPercentages = [10,20,30,40,50]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [5,5,5,5,5]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [1,0,2,0,3,0,4]",
        "output": "4"
      },
      {
        "input": "batteryPercentages = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [5, 3, 0, 2, 1, 0, 4, 0, 3]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [1,0,1,0,1,0,1,0,1,0]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [3, 0, 3, 0, 3, 0, 3, 0, 3, 0]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [5,0,5,0,5,0,5,0]",
        "output": "4"
      },
      {
        "input": "batteryPercentages = [0,1,0,2,0,3,0,4]",
        "output": "4"
      },
      {
        "input": "batteryPercentages = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [100, 0, 99, 1, 98, 2, 97, 3, 96, 4]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [2,1,2,1,2,1,2,1,2,1,2,1]",
        "output": "2"
      },
      {
        "input": "batteryPercentages = [3,2,1,0,5,4,3,2,1]",
        "output": "4"
      },
      {
        "input": "batteryPercentages = [0, 10, 0, 20, 0, 30, 0, 40, 0, 50]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [20, 20, 19, 19, 18, 18, 17, 17, 16, 16]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [5,10,5,10,5,10,5,10,5,10]",
        "output": "8"
      },
      {
        "input": "batteryPercentages = [10, 0, 10, 0, 10, 0, 10]",
        "output": "4"
      },
      {
        "input": "batteryPercentages = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80]",
        "output": "20"
      },
      {
        "input": "batteryPercentages = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [3, 0, 5, 2, 8, 0, 6]",
        "output": "4"
      },
      {
        "input": "batteryPercentages = [3, 2, 1, 0, 4, 5]",
        "output": "4"
      },
      {
        "input": "batteryPercentages = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "9"
      },
      {
        "input": "batteryPercentages = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [100, 0, 100, 0, 100, 0, 100]",
        "output": "4"
      },
      {
        "input": "batteryPercentages = [20, 0, 15, 5, 0, 10, 0, 0, 0, 5]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [50, 25, 0, 75, 100, 0, 0, 25, 50, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "7"
      },
      {
        "input": "batteryPercentages = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [3, 2, 2, 1, 1, 0, 0, 1, 1, 0]",
        "output": "2"
      },
      {
        "input": "batteryPercentages = [10,9,8,7,6,5,4,3,2,1,0]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [100,99,98,97,96,95,94]",
        "output": "7"
      },
      {
        "input": "batteryPercentages = [5,5,5,5,5,5,5,5,5,5]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [10,20,30,40,50,60,70,80,90,100]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [0, 1, 0, 2, 0, 3, 0, 4, 0, 5]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [0, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [0,100,0,100,0,100,0,100]",
        "output": "4"
      },
      {
        "input": "batteryPercentages = [1,2,3,4,5,4,3,2,1,0,9,8,7,6,5,4,3,2,1,0]",
        "output": "7"
      },
      {
        "input": "batteryPercentages = [50, 25, 0, 75, 50, 25, 0, 75, 50, 25]",
        "output": "8"
      },
      {
        "input": "batteryPercentages = [0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100, 50, 100]",
        "output": "20"
      },
      {
        "input": "batteryPercentages = [10, 0, 10, 0, 10, 0, 10, 0, 10, 0]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [90, 0, 90, 0, 90, 0, 90, 0, 90, 0, 90, 0, 90, 0, 90, 0, 90, 0, 90, 0, 90, 0, 90, 0, 90, 0, 90, 0, 90, 0]",
        "output": "15"
      },
      {
        "input": "batteryPercentages = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6]",
        "output": "6"
      },
      {
        "input": "batteryPercentages = [100,0,99,0,98,0,97,0,96,0]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1]",
        "output": "2"
      },
      {
        "input": "batteryPercentages = [100, 99, 98, 97, 96, 95]",
        "output": "6"
      },
      {
        "input": "batteryPercentages = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 100]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [0, 0, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6, 0]",
        "output": "6"
      },
      {
        "input": "batteryPercentages = [3, 2, 1, 0, 4, 5, 0, 6]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70]",
        "output": "31"
      },
      {
        "input": "batteryPercentages = [3,2,1,0,1,2,3]",
        "output": "3"
      },
      {
        "input": "batteryPercentages = [100, 100, 0, 0, 50, 50, 0, 0, 25, 25]",
        "output": "6"
      },
      {
        "input": "batteryPercentages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "20"
      },
      {
        "input": "batteryPercentages = [0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [10,9,8,7,6,5,4,3,2,1]",
        "output": "5"
      },
      {
        "input": "batteryPercentages = [0,0,1,0,0,1,0,0,1,0,0,1,0,0]",
        "output": "1"
      },
      {
        "input": "batteryPercentages = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]",
        "output": "29"
      },
      {
        "input": "batteryPercentages = [1, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 1]",
        "output": "10"
      },
      {
        "input": "batteryPercentages = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "0"
      },
      {
        "input": "batteryPercentages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "10"
      }
    ]
  },
  {
    "id": 599,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "String"
    ],
    "problemDescription": "Given two arrays of strings list1 and list2, find the common strings with the least index sum.\nA common string is a string that appeared in both list1 and list2.\nA common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings.\nReturn all the common strings with the least index sum. Return the answer in any order.\n\u00a0\nExample 1:\n\nInput: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]\nOutput: [\"Shogun\"]\nExplanation: The only common string is \"Shogun\".\n\nExample 2:\n\nInput: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]\nOutput: [\"Shogun\"]\nExplanation: The common string with the least index sum is \"Shogun\" with index sum = (0 + 1) = 1.\n\nExample 3:\n\nInput: list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"]\nOutput: [\"sad\",\"happy\"]\nExplanation: There are three common strings:\n\"happy\" with index sum = (0 + 1) = 1.\n\"sad\" with index sum = (1 + 0) = 1.\n\"good\" with index sum = (2 + 2) = 4.\nThe strings with the least index sum are \"sad\" and \"happy\".\n\n\u00a0\nConstraints:\n\n1 <= list1.length, list2.length <= 1000\n1 <= list1[i].length, list2[i].length <= 30\nlist1[i] and list2[i] consist of spaces ' ' and English letters.\nAll the strings of list1 are unique.\nAll the strings of list2 are unique.\nThere is at least a common string between list1 and list2.\n\n",
    "starterCode": "class Solution:\n    def findRestaurant(self, list1: List[str], list2: List[str]) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "list1 = [\"a\",\"b\",\"c\",\"d\",\"e\"], list2 = [\"e\",\"d\",\"c\",\"b\",\"a\"]",
        "output": "['a', 'b', 'c', 'd', 'e']"
      },
      {
        "input": "list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"]",
        "output": "['happy', 'sad']"
      },
      {
        "input": "list1 = [\"apple\",\"banana\"], list2 = [\"banana\",\"apple\"]",
        "output": "['apple', 'banana']"
      },
      {
        "input": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]",
        "output": "['Shogun']"
      },
      {
        "input": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]",
        "output": "['Shogun']"
      },
      {
        "input": "list1 = [\"carrot\",\"apple\",\"banana\",\"date\"], list2 = [\"banana\",\"date\",\"apple\",\"fig\",\"carrot\"]",
        "output": "['banana']"
      },
      {
        "input": "list1 = [\"x\",\"y\",\"z\"], list2 = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]",
        "output": "['x']"
      },
      {
        "input": "list1 = [\"Hotel California\",\"Fever Tree\",\"Hotel Armenia\",\"Hotel Greece\"], list2 = [\"Hotel Greece\",\"Hotel Armenia\",\"Fever Tree\",\"Hotel California\"]",
        "output": "['Hotel California', 'Fever Tree', 'Hotel Armenia', 'Hotel Greece']"
      },
      {
        "input": "list1 = [\"dog\",\"cat\",\"bird\",\"fish\"], list2 = [\"fish\",\"bird\",\"cat\",\"dog\",\"ant\",\"bee\",\"fly\",\"spider\"]",
        "output": "['dog', 'cat', 'bird', 'fish']"
      },
      {
        "input": "list1 = [\"Quickly\",\"Brown\",\"Fox\",\"Jumps\",\"Over\",\"Lazy\",\"Dog\"], list2 = [\"Dog\",\"Lazy\",\"Over\",\"Jumps\",\"Fox\",\"Brown\",\"Quickly\"]",
        "output": "['Quickly', 'Brown', 'Fox', 'Jumps', 'Over', 'Lazy', 'Dog']"
      },
      {
        "input": "list1 = [\"RestaurantA\",\"RestaurantB\",\"RestaurantC\"], list2 = [\"RestaurantD\",\"RestaurantB\",\"RestaurantE\",\"RestaurantA\"]",
        "output": "['RestaurantB']"
      },
      {
        "input": "list1 = [\"Alpha\",\"Bravo\",\"Charlie\",\"Delta\"], list2 = [\"Echo\",\"Delta\",\"Bravo\",\"Alpha\"]",
        "output": "['Alpha', 'Bravo']"
      },
      {
        "input": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\",\"Pizza Hut\"], list2 = [\"Pizza Hut\",\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "output": "['Shogun', 'Tapioca Express', 'Burger King', 'KFC', 'Pizza Hut']"
      },
      {
        "input": "list1 = [\"restaurant1\",\"restaurant2\",\"restaurant3\",\"restaurant4\",\"restaurant5\"], list2 = [\"restaurant5\",\"restaurant4\",\"restaurant3\",\"restaurant2\",\"restaurant1\"]",
        "output": "['restaurant1', 'restaurant2', 'restaurant3', 'restaurant4', 'restaurant5']"
      },
      {
        "input": "list1 = [\"one\",\"two\",\"three\",\"four\",\"five\"], list2 = [\"six\",\"seven\",\"eight\",\"nine\",\"one\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\"]",
        "output": "['one']"
      },
      {
        "input": "list1 = [\"Fast Food\",\"Quick Eats\",\"Snack Bar\",\"Food Truck\"], list2 = [\"Food Truck\",\"Quick Eats\",\"Snack Bar\",\"Fast Food\"]",
        "output": "['Quick Eats']"
      },
      {
        "input": "list1 = [\"starbucks\",\"costa\",\"dunkin\",\"tim hortons\"], list2 = [\"tim hortons\",\"dunkin\",\"costa\",\"starbucks\"]",
        "output": "['starbucks', 'costa', 'dunkin', 'tim hortons']"
      },
      {
        "input": "list1 = [\"pancakes\",\"waffles\",\"omelette\"], list2 = [\"omelette\",\"pancakes\",\"waffles\",\"french toast\"]",
        "output": "['pancakes']"
      },
      {
        "input": "list1 = [\"Steakhouse\",\"Seafood Grill\",\"Wine Bar\"], list2 = [\"Wine Bar\",\"Seafood Grill\",\"Steakhouse\"]",
        "output": "['Steakhouse', 'Seafood Grill', 'Wine Bar']"
      },
      {
        "input": "list1 = [\"Poke Bar\",\"Sushi Spot\",\"Tataki House\"], list2 = [\"Tataki House\",\"Poke Bar\",\"Sushi Spot\"]",
        "output": "['Poke Bar']"
      },
      {
        "input": "list1 = [\"laptop\",\"phone\",\"tablet\",\"monitor\"], list2 = [\"monitor\",\"tablet\",\"phone\",\"laptop\"]",
        "output": "['laptop', 'phone', 'tablet', 'monitor']"
      },
      {
        "input": "list1 = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"], list2 = [\"g\",\"f\",\"e\",\"d\",\"c\",\"b\",\"a\"]",
        "output": "['a', 'b', 'c', 'd', 'e', 'f', 'g']"
      },
      {
        "input": "list1 = [\"coffee\",\"tea\",\"soda\",\"juice\"], list2 = [\"juice\",\"soda\",\"coffee\",\"tea\"]",
        "output": "['coffee']"
      },
      {
        "input": "list1 = [\"Pasta Palace\",\"Dumplings Galore\",\"Steakhouse\",\"Soup Kitchen\"], list2 = [\"Soup Kitchen\",\"Steakhouse\",\"Dumplings Galore\",\"Pasta Palace\"]",
        "output": "['Pasta Palace', 'Dumplings Galore', 'Steakhouse', 'Soup Kitchen']"
      },
      {
        "input": "list1 = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"], list2 = [\"six\",\"five\",\"four\",\"three\",\"two\",\"one\"]",
        "output": "['one', 'two', 'three', 'four', 'five', 'six']"
      },
      {
        "input": "list1 = [\"X\",\"Y\",\"Z\",\"W\",\"V\"], list2 = [\"V\",\"W\",\"X\",\"Y\",\"Z\",\"A\",\"B\",\"C\",\"D\",\"E\"]",
        "output": "['X']"
      },
      {
        "input": "list1 = [\"One\",\"Two\",\"Three\",\"Four\",\"Five\"], list2 = [\"Six\",\"Seven\",\"Eight\",\"One\",\"Five\"]",
        "output": "['One']"
      },
      {
        "input": "list1 = [\"Red\",\"Blue\",\"Green\",\"Yellow\",\"Black\"], list2 = [\"Orange\",\"Black\",\"Pink\",\"Green\",\"Purple\",\"Red\"]",
        "output": "['Red', 'Green', 'Black']"
      },
      {
        "input": "list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]",
        "output": "['Shogun', 'Tapioca Express', 'Burger King', 'KFC']"
      },
      {
        "input": "list1 = [\"Paris\",\"Lyon\",\"Marseille\",\"Toulouse\"], list2 = [\"Lyon\",\"Toulouse\",\"Marseille\",\"Paris\"]",
        "output": "['Lyon']"
      },
      {
        "input": "list1 = [\"apple\",\"banana\",\"cherry\",\"date\",\"elderberry\"], list2 = [\"elderberry\",\"date\",\"cherry\",\"banana\",\"apple\"]",
        "output": "['apple', 'banana', 'cherry', 'date', 'elderberry']"
      },
      {
        "input": "list1 = [\"coke\",\"pepsi\",\"sprite\",\"fanta\"], list2 = [\"fanta\",\"sprite\",\"pepsi\",\"coke\"]",
        "output": "['coke', 'pepsi', 'sprite', 'fanta']"
      },
      {
        "input": "list1 = [\"French Laundry\",\"California Bistro\",\"New England Clam Chowder\",\"Texas BBQ\"], list2 = [\"Texas BBQ\",\"New England Clam Chowder\",\"California Bistro\",\"French Laundry\"]",
        "output": "['French Laundry', 'California Bistro', 'New England Clam Chowder', 'Texas BBQ']"
      },
      {
        "input": "list1 = [\"happy\",\"joy\",\"sad\",\"angry\"], list2 = [\"sad\",\"happy\",\"angry\",\"joy\"]",
        "output": "['happy']"
      },
      {
        "input": "list1 = [\"XYZ\",\"ABC\",\"DEF\",\"GHI\"], list2 = [\"JKL\",\"MNO\",\"XYZ\",\"PQR\"]",
        "output": "['XYZ']"
      },
      {
        "input": "list1 = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\"], list2 = [\"J\",\"I\",\"H\",\"G\",\"F\",\"E\",\"D\",\"C\",\"B\",\"A\"]",
        "output": "['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']"
      },
      {
        "input": "list1 = [\"Pizza Palace\",\"Pasta House\",\"Taco Bistro\"], list2 = [\"Taco Bistro\",\"Pizza Palace\",\"Pasta House\"]",
        "output": "['Pizza Palace']"
      },
      {
        "input": "list1 = [\"mexican\",\"italian\",\"japanese\",\"chinese\"], list2 = [\"thai\",\"japanese\",\"italian\",\"mexican\",\"indian\"]",
        "output": "['mexican', 'italian', 'japanese']"
      },
      {
        "input": "list1 = [\"coffee\",\"tea\",\"soda\",\"water\"], list2 = [\"water\",\"soda\",\"coffee\",\"tea\"]",
        "output": "['coffee']"
      },
      {
        "input": "list1 = [\"pizza\",\"burger\",\"sushi\",\"taco\"], list2 = [\"taco\",\"burger\",\"pizza\",\"ramen\"]",
        "output": "['pizza', 'burger']"
      },
      {
        "input": "list1 = [\"Central Perk\",\"The Beanery\",\"Mocha Cafe\"], list2 = [\"Latte Lounge\",\"The Beanery\",\"Central Perk\",\"Espresso Bar\"]",
        "output": "['Central Perk', 'The Beanery']"
      },
      {
        "input": "list1 = [\"hello\",\"world\",\"python\",\"programming\"], list2 = [\"java\",\"programming\",\"python\",\"world\",\"hello\"]",
        "output": "['hello', 'world', 'python', 'programming']"
      },
      {
        "input": "list1 = [\"cat cafe\",\"dog cafe\",\"parrot cafe\"], list2 = [\"parrot cafe\",\"dog cafe\",\"cat cafe\",\"rabbit cafe\"]",
        "output": "['cat cafe', 'dog cafe', 'parrot cafe']"
      },
      {
        "input": "list1 = [\"India Gate\",\"Great Wall\",\"Berlin Wall\",\"Eiffel Tower\"], list2 = [\"Eiffel Tower\",\"Berlin Wall\",\"Great Wall\",\"India Gate\"]",
        "output": "['India Gate', 'Great Wall', 'Berlin Wall', 'Eiffel Tower']"
      },
      {
        "input": "list1 = [\"Los Angeles\",\"New York\",\"Chicago\"], list2 = [\"Chicago\",\"Los Angeles\",\"Houston\",\"New York\"]",
        "output": "['Los Angeles']"
      },
      {
        "input": "list1 = [\"pasta\",\"pizza\",\"lasagna\"], list2 = [\"pizza\",\"lasagna\",\"pasta\",\"ravioli\"]",
        "output": "['pizza']"
      },
      {
        "input": "list1 = [\"Fast\",\"Food\",\"Place\",\"Awesome\"], list2 = [\"Awesome\",\"Place\",\"Food\",\"Fast\"]",
        "output": "['Fast', 'Food', 'Place', 'Awesome']"
      },
      {
        "input": "list1 = [\"x\",\"y\",\"z\"], list2 = [\"a\",\"b\",\"c\",\"d\",\"x\",\"y\",\"z\"]",
        "output": "['x']"
      },
      {
        "input": "list1 = [\"red\",\"blue\",\"green\",\"yellow\"], list2 = [\"yellow\",\"green\",\"blue\",\"red\"]",
        "output": "['red', 'blue', 'green', 'yellow']"
      },
      {
        "input": "list1 = [\"X\",\"Y\",\"Z\"], list2 = [\"W\",\"V\",\"U\",\"X\",\"T\",\"S\",\"R\",\"Q\",\"P\",\"O\",\"N\",\"M\",\"L\",\"K\",\"J\",\"I\",\"H\",\"G\",\"F\",\"E\",\"D\",\"C\",\"B\",\"A\",\"Z\"]",
        "output": "['X']"
      },
      {
        "input": "list1 = [\"apple pie\",\"cherry pie\",\"blueberry pie\"], list2 = [\"blueberry pie\",\"cherry pie\",\"apple pie\",\"pumpkin pie\"]",
        "output": "['apple pie', 'cherry pie', 'blueberry pie']"
      },
      {
        "input": "list1 = [\"x\",\"y\",\"z\"], list2 = [\"z\",\"x\",\"y\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"]",
        "output": "['x']"
      },
      {
        "input": "list1 = [\"taco\",\"burrito\",\"nachos\",\"enchilada\"], list2 = [\"enchilada\",\"taco\",\"nachos\",\"burrito\"]",
        "output": "['taco']"
      },
      {
        "input": "list1 = [\"mango\",\"pineapple\",\"kiwi\",\"grapefruit\"], list2 = [\"grapefruit\",\"kiwi\",\"pineapple\",\"mango\"]",
        "output": "['mango', 'pineapple', 'kiwi', 'grapefruit']"
      },
      {
        "input": "list1 = [\"red\",\"blue\",\"green\",\"yellow\"], list2 = [\"yellow\",\"green\",\"blue\",\"red\",\"purple\",\"orange\",\"pink\",\"brown\"]",
        "output": "['red', 'blue', 'green', 'yellow']"
      },
      {
        "input": "list1 = [\"orange\",\"grape\",\"melon\",\"kiwi\"], list2 = [\"kiwi\",\"melon\",\"grape\",\"orange\",\"pineapple\",\"mango\"]",
        "output": "['orange', 'grape', 'melon', 'kiwi']"
      },
      {
        "input": "list1 = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"], list2 = [\"F\",\"E\",\"D\",\"C\",\"B\",\"A\"]",
        "output": "['A', 'B', 'C', 'D', 'E', 'F']"
      },
      {
        "input": "list1 = [\"FastFood\",\"Italian\",\"Chinese\",\"American\",\"Mexican\"], list2 = [\"Thai\",\"Indian\",\"American\",\"Chinese\",\"Japanese\"]",
        "output": "['Chinese', 'American']"
      },
      {
        "input": "list1 = [\"apple\",\"orange\",\"banana\",\"grape\"], list2 = [\"grape\",\"orange\",\"banana\",\"apple\"]",
        "output": "['orange']"
      },
      {
        "input": "list1 = [\"Sushi Spot\",\"Ramen Joint\",\"BBQ Pit\",\"Pizza Place\"], list2 = [\"Pizza Place\",\"BBQ Pit\",\"Ramen Joint\",\"Sushi Spot\"]",
        "output": "['Sushi Spot', 'Ramen Joint', 'BBQ Pit', 'Pizza Place']"
      },
      {
        "input": "list1 = [\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\"], list2 = [\"W\",\"X\",\"Y\",\"Z\",\"V\",\"U\",\"T\",\"S\",\"R\",\"Q\",\"P\",\"O\",\"N\",\"M\"]",
        "output": "['M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V']"
      },
      {
        "input": "list1 = [\"bread\",\"butter\",\"jam\",\"cheese\"], list2 = [\"cheese\",\"jam\",\"butter\",\"bread\"]",
        "output": "['bread', 'butter', 'jam', 'cheese']"
      },
      {
        "input": "list1 = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], list2 = [\"H\",\"I\",\"J\",\"K\",\"A\",\"L\",\"M\",\"F\",\"N\"]",
        "output": "['A']"
      },
      {
        "input": "list1 = [\"Savory Bites\",\"Italian Delight\",\"Vegan Cafe\",\"Bakery\"], list2 = [\"Bakery\",\"Vegan Cafe\",\"Italian Delight\",\"Savory Bites\"]",
        "output": "['Savory Bites', 'Italian Delight', 'Vegan Cafe', 'Bakery']"
      },
      {
        "input": "list1 = [\"XYZ\",\"ABC\",\"DEF\",\"GHI\",\"JKL\"], list2 = [\"JKL\",\"GHI\",\"DEF\",\"ABC\",\"XYZ\"]",
        "output": "['XYZ', 'ABC', 'DEF', 'GHI', 'JKL']"
      },
      {
        "input": "list1 = [\"salad\",\"steak\",\"soup\",\"chicken\"], list2 = [\"chicken\",\"salad\",\"soup\",\"steak\"]",
        "output": "['salad']"
      },
      {
        "input": "list1 = [\"pizza\",\"burger\",\"sushi\",\"taco\"], list2 = [\"salad\",\"burger\",\"taco\",\"pizza\"]",
        "output": "['burger']"
      },
      {
        "input": "list1 = [\"Unique\",\"String\",\"Here\",\"Now\"], list2 = [\"Not\",\"Here\",\"Unique\",\"String\"]",
        "output": "['Unique']"
      },
      {
        "input": "list1 = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"], list2 = [\"j\",\"i\",\"h\",\"g\",\"f\",\"e\",\"d\",\"c\",\"b\",\"a\"]",
        "output": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']"
      },
      {
        "input": "list1 = [\"Pizza\",\"Burger\",\"Pasta\"], list2 = [\"Sushi\",\"Pizza\",\"Pasta\",\"Burger\"]",
        "output": "['Pizza']"
      },
      {
        "input": "list1 = [\"Java Hut\",\"Code Brew\",\"Data Cafe\"], list2 = [\"Algo Eatery\",\"Data Cafe\",\"Java Hut\",\"Code Brew\"]",
        "output": "['Java Hut']"
      },
      {
        "input": "list1 = [\"Foo Bar\",\"Foo Baz\",\"Bar Baz\",\"Foo Bar Baz\"], list2 = [\"Bar Baz\",\"Foo Baz\",\"Foo Bar\",\"Foo Bar Baz\",\"Baz Bar\"]",
        "output": "['Foo Bar', 'Foo Baz', 'Bar Baz']"
      },
      {
        "input": "list1 = [\"Burger King\",\"Shogun\",\"KFC\",\"Tapioca Express\"], list2 = [\"KFC\",\"Tapioca Express\",\"Shogun\",\"Burger King\",\"Sushi\"]",
        "output": "['KFC']"
      },
      {
        "input": "list1 = [\"Breakfast\",\"Lunch\",\"Dinner\"], list2 = [\"Dinner\",\"Breakfast\",\"Lunch\"]",
        "output": "['Breakfast']"
      },
      {
        "input": "list1 = [\"x\",\"y\",\"z\",\"a\",\"b\",\"c\"], list2 = [\"c\",\"b\",\"a\",\"z\",\"y\",\"x\"]",
        "output": "['x', 'y', 'z', 'a', 'b', 'c']"
      },
      {
        "input": "list1 = [\"pizza\",\"burger\",\"sushi\",\"taco\"], list2 = [\"salad\",\"taco\",\"pizza\",\"burger\"]",
        "output": "['pizza']"
      },
      {
        "input": "list1 = [\"Cafe 99\",\"Mediterranean Grill\",\"Taco Joint\",\"BBQ Pit\"], list2 = [\"BBQ Pit\",\"Taco Joint\",\"Mediterranean Grill\",\"Cafe 99\"]",
        "output": "['Cafe 99', 'Mediterranean Grill', 'Taco Joint', 'BBQ Pit']"
      },
      {
        "input": "list1 = [\"alpha\",\"beta\",\"gamma\",\"delta\",\"epsilon\"], list2 = [\"epsilon\",\"delta\",\"gamma\",\"beta\",\"alpha\",\"omega\",\"psi\"]",
        "output": "['alpha', 'beta', 'gamma', 'delta', 'epsilon']"
      },
      {
        "input": "list1 = [\"One\",\"Two\",\"Three\",\"Four\",\"Five\"], list2 = [\"Five\",\"Four\",\"Three\",\"Two\",\"One\"]",
        "output": "['One', 'Two', 'Three', 'Four', 'Five']"
      },
      {
        "input": "list1 = [\"Coffee Spot\",\"Deluxe Lounge\",\"Burger Spot\",\"Pancake House\"], list2 = [\"Pancake House\",\"Burger Spot\",\"Deluxe Lounge\",\"Coffee Spot\"]",
        "output": "['Coffee Spot', 'Deluxe Lounge', 'Burger Spot', 'Pancake House']"
      },
      {
        "input": "list1 = [\"hello\",\"world\",\"python\",\"programming\"], list2 = [\"java\",\"c++\",\"programming\",\"hello\",\"ruby\",\"go\",\"swift\"]",
        "output": "['hello']"
      },
      {
        "input": "list1 = [\"X\",\"Y\",\"Z\",\"W\"], list2 = [\"W\",\"V\",\"U\",\"X\",\"Y\",\"Z\"]",
        "output": "['X', 'W']"
      },
      {
        "input": "list1 = [\"Restaurant1\",\"Restaurant2\",\"Restaurant3\",\"Restaurant4\"], list2 = [\"Restaurant5\",\"Restaurant6\",\"Restaurant7\",\"Restaurant1\",\"Restaurant8\"]",
        "output": "['Restaurant1']"
      },
      {
        "input": "list1 = [\"restaurant1\",\"restaurant2\",\"restaurant3\",\"restaurant4\",\"restaurant5\"], list2 = [\"restaurant6\",\"restaurant5\",\"restaurant4\",\"restaurant3\",\"restaurant2\",\"restaurant1\"]",
        "output": "['restaurant1', 'restaurant2', 'restaurant3', 'restaurant4', 'restaurant5']"
      },
      {
        "input": "list1 = [\"Alpha\",\"Beta\",\"Gamma\",\"Delta\"], list2 = [\"Epsilon\",\"Zeta\",\"Delta\",\"Alpha\",\"Eta\",\"Theta\"]",
        "output": "['Alpha']"
      },
      {
        "input": "list1 = [\"Paris Bistro\",\"La Belle Vie\",\"Sushi Place\",\"Taco Bell\"], list2 = [\"Taco Bell\",\"Sushi Place\",\"La Belle Vie\",\"Pizza Hut\"]",
        "output": "['La Belle Vie', 'Sushi Place', 'Taco Bell']"
      },
      {
        "input": "list1 = [\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], list2 = [\"z\",\"y\",\"x\",\"w\",\"v\",\"u\",\"t\",\"s\",\"r\",\"q\",\"p\",\"o\",\"n\",\"m\"]",
        "output": "['m', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
      },
      {
        "input": "list1 = [\"New York\",\"Los Angeles\",\"Chicago\",\"Houston\"], list2 = [\"Phoenix\",\"San Antonio\",\"Houston\",\"San Diego\",\"Dallas\",\"San Jose\",\"Austin\",\"Jacksonville\",\"Fort Worth\",\"Columbus\",\"Charlotte\",\"San Francisco\",\"Indianapolis\",\"Seattle\",\"Denver\",\"Washington\",\"Boston\",\"El Paso\",\"Nashville\",\"Detroit\",\"Oklahoma City\",\"Portland\",\"Las Vegas\",\"Memphis\",\"Louisville\",\"Milwaukee\",\"Albuquerque\",\"Tucson\",\"Fresno\",\"Sacramento\",\"Long Beach\",\"Kansas City\",\"Mesa\",\"Virginia Beach\",\"Atlanta\",\"Colorado Springs\",\"Omaha\",\"Raleigh\",\"Miami\",\"Oakland\",\"Tulsa\",\"Orlando\",\"Minneapolis\",\"Wichita\",\"Arlington\",\"New Orleans\",\"Baltimore\",\"Honolulu\",\"Fort Wayne\",\"Cincinnati\",\"Alexandria\",\"Tampa\",\"Buffalo\",\"Greensboro\",\"Shreveport\",\"Akron\",\"Tacoma\",\"Grand Rapids\",\"Dayton\",\"Henderson\",\"Newark\",\"Anchorage\",\"Oxnard\",\"Santa Ana\",\"Riverside\",\"Moreno Valley\",\"Chesapeake\",\"Garland\",\"Irving\",\"Huntington Beach\",\"Santa Clarita\",\"Fremont\",\"Providence\",\"Glendale\",\"Oceanside\",\"Longview\",\"Knoxville\",\"Aurora\",\"Rockford\",\"Spokane\",\"Tacoma\",\"Modesto\",\"Fontana\",\"Columbus\",\"Springfield\",\"Ogdensburg\",\"Anaheim\"]",
        "output": "['Houston']"
      },
      {
        "input": "list1 = [\"Alice\",\"Bob\",\"Charlie\",\"David\"], list2 = [\"David\",\"Charlie\",\"Bob\",\"Alice\"]",
        "output": "['Alice', 'Bob', 'Charlie', 'David']"
      },
      {
        "input": "list1 = [\"apple\",\"banana\",\"cherry\",\"date\",\"elderberry\"], list2 = [\"elderberry\",\"date\",\"cherry\",\"banana\",\"apple\",\"fig\",\"grape\"]",
        "output": "['apple', 'banana', 'cherry', 'date', 'elderberry']"
      },
      {
        "input": "list1 = [\"Grill Room\",\"BBQ Joint\",\"Smokers Bar\"], list2 = [\"Smokers Bar\",\"Grill Room\",\"BBQ Joint\"]",
        "output": "['Grill Room']"
      },
      {
        "input": "list1 = [\"pasta\",\"burger\",\"pizza\",\"sushi\"], list2 = [\"pizza\",\"sushi\",\"burger\",\"pasta\"]",
        "output": "['pizza']"
      },
      {
        "input": "list1 = [\"Sushi Bar\",\"Pasta Place\",\"Taco Stand\",\"Burger Joint\"], list2 = [\"Steak House\",\"Taco Stand\",\"Pasta Place\",\"Sushi Bar\"]",
        "output": "['Sushi Bar', 'Pasta Place', 'Taco Stand']"
      }
    ]
  },
  {
    "id": 13,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Math",
      "String"
    ],
    "problemDescription": "Roman numerals are represented by seven different symbols:\u00a0I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example,\u00a02 is written as II\u00a0in Roman numeral, just two ones added together. 12 is written as\u00a0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9.\u00a0\nX can be placed before L (50) and C (100) to make 40 and 90.\u00a0\nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n\u00a0\nExample 1:\n\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\n\nExample 2:\n\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n\nExample 3:\n\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 15\ns contains only\u00a0the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\nIt is guaranteed\u00a0that s is a valid roman numeral in the range [1, 3999].\n\n",
    "starterCode": "class Solution:\n    def romanToInt(self, s: str) -> int:\n        ",
    "testCases": [
      {
        "input": "s = \"XCIX\"",
        "output": "99"
      },
      {
        "input": "s = \"MMCMXCIX\"",
        "output": "2999"
      },
      {
        "input": "s = \"MMMCMXCIX\"",
        "output": "3999"
      },
      {
        "input": "s = \"DCXXI\"",
        "output": "621"
      },
      {
        "input": "s = \"XC\"",
        "output": "90"
      },
      {
        "input": "s = \"VIII\"",
        "output": "8"
      },
      {
        "input": "s = \"XV\"",
        "output": "15"
      },
      {
        "input": "s = \"XXVII\"",
        "output": "27"
      },
      {
        "input": "s = \"IX\"",
        "output": "9"
      },
      {
        "input": "s = \"DCCLXXIX\"",
        "output": "779"
      },
      {
        "input": "s = \"XX\"",
        "output": "20"
      },
      {
        "input": "s = \"CDXLIV\"",
        "output": "444"
      },
      {
        "input": "s = \"LVIII\"",
        "output": "58"
      },
      {
        "input": "s = \"CM\"",
        "output": "900"
      },
      {
        "input": "s = \"D\"",
        "output": "500"
      },
      {
        "input": "s = \"X\"",
        "output": "10"
      },
      {
        "input": "s = \"IV\"",
        "output": "4"
      },
      {
        "input": "s = \"XXV\"",
        "output": "25"
      },
      {
        "input": "s = \"XXX\"",
        "output": "30"
      },
      {
        "input": "s = \"XL\"",
        "output": "40"
      },
      {
        "input": "s = \"MMMDCCCLXXXVIII\"",
        "output": "3888"
      },
      {
        "input": "s = \"XXXIX\"",
        "output": "39"
      },
      {
        "input": "s = \"XLIV\"",
        "output": "44"
      },
      {
        "input": "s = \"CCCXCIX\"",
        "output": "399"
      },
      {
        "input": "s = \"CD\"",
        "output": "400"
      },
      {
        "input": "s = \"LXX\"",
        "output": "70"
      },
      {
        "input": "s = \"CCC\"",
        "output": "300"
      },
      {
        "input": "s = \"MMM\"",
        "output": "3000"
      },
      {
        "input": "s = \"MCMXCIV\"",
        "output": "1994"
      },
      {
        "input": "s = \"III\"",
        "output": "3"
      },
      {
        "input": "s = \"MDCCCLXXIV\"",
        "output": "1874"
      },
      {
        "input": "s = \"CMXCIX\"",
        "output": "999"
      },
      {
        "input": "s = \"MMCDXCIX\"",
        "output": "2499"
      },
      {
        "input": "s = \"M\"",
        "output": "1000"
      },
      {
        "input": "s = \"CCXLVI\"",
        "output": "246"
      },
      {
        "input": "s = \"CC\"",
        "output": "200"
      },
      {
        "input": "s = \"DCCLXXIV\"",
        "output": "774"
      },
      {
        "input": "s = \"MCCCLXXXIX\"",
        "output": "1389"
      },
      {
        "input": "s = \"CMLXXXVII\"",
        "output": "987"
      },
      {
        "input": "s = \"XCIV\"",
        "output": "94"
      },
      {
        "input": "s = \"MDCCLXXVI\"",
        "output": "1776"
      },
      {
        "input": "s = \"DCCLXXVI\"",
        "output": "776"
      },
      {
        "input": "s = \"CMXLVII\"",
        "output": "947"
      },
      {
        "input": "s = \"MMMCMLXXIV\"",
        "output": "3974"
      },
      {
        "input": "s = \"MDCCCLXXI\"",
        "output": "1871"
      },
      {
        "input": "s = \"MMMDCCCLXXVII\"",
        "output": "3877"
      },
      {
        "input": "s = \"MMMCMXCXCIX\"",
        "output": "4089"
      },
      {
        "input": "s = \"MMMLXXVIII\"",
        "output": "3078"
      },
      {
        "input": "s = \"CCCLXXIV\"",
        "output": "374"
      },
      {
        "input": "s = \"MCMXLIV\"",
        "output": "1944"
      },
      {
        "input": "s = \"MMCDLXXI\"",
        "output": "2471"
      },
      {
        "input": "s = \"DCCCLXXXVIII\"",
        "output": "888"
      },
      {
        "input": "s = \"MMDCCCLXXIV\"",
        "output": "2874"
      },
      {
        "input": "s = \"MMCDXLIV\"",
        "output": "2444"
      },
      {
        "input": "s = \"MMDCCCLXXVII\"",
        "output": "2877"
      },
      {
        "input": "s = \"MMMDCCCXCIX\"",
        "output": "3899"
      },
      {
        "input": "s = \"LXXXIX\"",
        "output": "89"
      },
      {
        "input": "s = \"DCCCLXXVIII\"",
        "output": "878"
      },
      {
        "input": "s = \"MMXXIII\"",
        "output": "2023"
      },
      {
        "input": "s = \"LXXXVII\"",
        "output": "87"
      },
      {
        "input": "s = \"MMMCMXCXC\"",
        "output": "4080"
      },
      {
        "input": "s = \"DCCCXC\"",
        "output": "890"
      },
      {
        "input": "s = \"MMCMCCXCIX\"",
        "output": "3199"
      },
      {
        "input": "s = \"MMMDCCCLXXX\"",
        "output": "3880"
      },
      {
        "input": "s = \"MDCCCCLXXV\"",
        "output": "1975"
      },
      {
        "input": "s = \"MCMXCMLXXIX\"",
        "output": "2869"
      },
      {
        "input": "s = \"MMMDCCCLXXIX\"",
        "output": "3879"
      },
      {
        "input": "s = \"CDXC\"",
        "output": "490"
      },
      {
        "input": "s = \"MCMLXXI\"",
        "output": "1971"
      },
      {
        "input": "s = \"MCMLIV\"",
        "output": "1954"
      },
      {
        "input": "s = \"MMDCCCXCIX\"",
        "output": "2899"
      },
      {
        "input": "s = \"CCXCIX\"",
        "output": "299"
      },
      {
        "input": "s = \"MMMCMXCCLXXVIII\"",
        "output": "4168"
      },
      {
        "input": "s = \"CDXCIX\"",
        "output": "499"
      },
      {
        "input": "s = \"MMMCMLXXIX\"",
        "output": "3979"
      },
      {
        "input": "s = \"DCCLXXVIII\"",
        "output": "778"
      },
      {
        "input": "s = \"MDCCCLXXVIII\"",
        "output": "1878"
      },
      {
        "input": "s = \"MMDCCCLXXXVIII\"",
        "output": "2888"
      },
      {
        "input": "s = \"MCMXLVII\"",
        "output": "1947"
      },
      {
        "input": "s = \"DCXXVIII\"",
        "output": "628"
      },
      {
        "input": "s = \"CCXLVIII\"",
        "output": "248"
      },
      {
        "input": "s = \"MMMCDXLIV\"",
        "output": "3444"
      },
      {
        "input": "s = \"DCCCXCIX\"",
        "output": "899"
      },
      {
        "input": "s = \"DCCCXCIV\"",
        "output": "894"
      },
      {
        "input": "s = \"DCCCLXXIV\"",
        "output": "874"
      },
      {
        "input": "s = \"MCMLXXIII\"",
        "output": "1973"
      },
      {
        "input": "s = \"MMMCDXCIX\"",
        "output": "3499"
      },
      {
        "input": "s = \"MMCDLXXVIII\"",
        "output": "2478"
      },
      {
        "input": "s = \"LVIV\"",
        "output": "59"
      },
      {
        "input": "s = \"MMCDXXI\"",
        "output": "2421"
      },
      {
        "input": "s = \"MDCCCLXXVII\"",
        "output": "1877"
      },
      {
        "input": "s = \"LXXXIV\"",
        "output": "84"
      },
      {
        "input": "s = \"CMXLIV\"",
        "output": "944"
      },
      {
        "input": "s = \"MCMLXXXIV\"",
        "output": "1984"
      }
    ]
  },
  {
    "id": 415,
    "difficulty": "Easy",
    "tags": [
      "Math",
      "String",
      "Simulation"
    ],
    "problemDescription": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\n\u00a0\nExample 1:\n\nInput: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"\n\nExample 2:\n\nInput: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"\n\nExample 3:\n\nInput: num1 = \"0\", num2 = \"0\"\nOutput: \"0\"\n\n\u00a0\nConstraints:\n\n1 <= num1.length, num2.length <= 104\nnum1 and num2 consist of only digits.\nnum1 and num2 don't have any leading zeros except for the zero itself.\n\n",
    "starterCode": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        ",
    "testCases": [
      {
        "input": "num1 = \"500\", num2 = \"500\"",
        "output": "1000"
      },
      {
        "input": "num1 = \"11\", num2 = \"123\"",
        "output": "134"
      },
      {
        "input": "num1 = \"1000\", num2 = \"2000\"",
        "output": "3000"
      },
      {
        "input": "num1 = \"10000\", num2 = \"20000\"",
        "output": "30000"
      },
      {
        "input": "num1 = \"123456789\", num2 = \"987654321\"",
        "output": "1111111110"
      },
      {
        "input": "num1 = \"10\", num2 = \"10\"",
        "output": "20"
      },
      {
        "input": "num1 = \"1\", num2 = \"1\"",
        "output": "2"
      },
      {
        "input": "num1 = \"111111\", num2 = \"111111\"",
        "output": "222222"
      },
      {
        "input": "num1 = \"9999\", num2 = \"1\"",
        "output": "10000"
      },
      {
        "input": "num1 = \"456\", num2 = \"77\"",
        "output": "533"
      },
      {
        "input": "num1 = \"0\", num2 = \"0\"",
        "output": "0"
      },
      {
        "input": "num1 = \"999999999\", num2 = \"1\"",
        "output": "1000000000"
      },
      {
        "input": "num1 = \"1111\", num2 = \"1111\"",
        "output": "2222"
      },
      {
        "input": "num1 = \"1\", num2 = \"99999\"",
        "output": "100000"
      },
      {
        "input": "num1 = \"9876543210\", num2 = \"9876543210\"",
        "output": "19753086420"
      },
      {
        "input": "num1 = \"999\", num2 = \"1\"",
        "output": "1000"
      },
      {
        "input": "num1 = \"123456789012345678901234567890\", num2 = \"987654321098765432109876543210\"",
        "output": "1111111110111111111011111111100"
      },
      {
        "input": "num1 = \"100000000000000000000000000000000000000000000000000\", num2 = \"1\"",
        "output": "100000000000000000000000000000000000000000000000001"
      },
      {
        "input": "num1 = \"999999999999999999999999999999999999999999999999999999999999999\", num2 = \"1\"",
        "output": "1000000000000000000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"500000000000000000000000000000\", num2 = \"500000000000000000000000000000\"",
        "output": "1000000000000000000000000000000"
      },
      {
        "input": "num1 = \"55555555555555555555\", num2 = \"44444444444444444444\"",
        "output": "99999999999999999999"
      },
      {
        "input": "num1 = \"1000000000000000000000000000000\", num2 = \"999999999999999999999999999999\"",
        "output": "1999999999999999999999999999999"
      },
      {
        "input": "num1 = \"00000000000000000000000000000000000000000000000000\", num2 = \"00000000000000000000000000000000000000000000000000\"",
        "output": "00000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"1000000000\", num2 = \"999999999\"",
        "output": "1999999999"
      },
      {
        "input": "num1 = \"0000000000000000000000000000000000000000000000000000000000000000\", num2 = \"0\"",
        "output": "0000000000000000000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"9999999999999999999999999999999\", num2 = \"9999999999999999999999999999999\"",
        "output": "19999999999999999999999999999998"
      },
      {
        "input": "num1 = \"100000000000000000000000000000\", num2 = \"200000000000000000000000000000\"",
        "output": "300000000000000000000000000000"
      },
      {
        "input": "num1 = \"222222222222222222222222222222222222222222222222222\", num2 = \"777777777777777777777777777777777777777777777777777\"",
        "output": "999999999999999999999999999999999999999999999999999"
      },
      {
        "input": "num1 = \"12345678901234567890\", num2 = \"98765432109876543210\"",
        "output": "111111111011111111100"
      },
      {
        "input": "num1 = \"9999999999999999999999999\", num2 = \"1\"",
        "output": "10000000000000000000000000"
      },
      {
        "input": "num1 = \"1111111111111111111111111111111111111111111111111111111111111111\", num2 = \"2222222222222222222222222222222222222222222222222222222222222222\"",
        "output": "3333333333333333333333333333333333333333333333333333333333333333"
      },
      {
        "input": "num1 = \"11111111111111111111111111111111111111111111111111111111111111111111111111111\", num2 = \"8888888888888888888888888888888888888888888888888888888888888888888888888888\"",
        "output": "19999999999999999999999999999999999999999999999999999999999999999999999999999"
      },
      {
        "input": "num1 = \"999999999999999999999999999999999999999999999999999\", num2 = \"1\"",
        "output": "1000000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"1\", num2 = \"99999999999999999999999999999999999999999999999999\"",
        "output": "100000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"987654321\", num2 = \"123456789\"",
        "output": "1111111110"
      },
      {
        "input": "num1 = \"11111111111111111111\", num2 = \"22222222222222222222\"",
        "output": "33333333333333333333"
      },
      {
        "input": "num1 = \"50000000000000000000000000000000000000000000000000\", num2 = \"50000000000000000000000000000000000000000000000000\"",
        "output": "100000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"10\", num2 = \"999999999999999999999999999999\"",
        "output": "1000000000000000000000000000009"
      },
      {
        "input": "num1 = \"100000000000000000000000000000000000000000000000000000000000000000000000000000\", num2 = \"100000000000000000000000000000000000000000000000000000000000000000000000000000\"",
        "output": "200000000000000000000000000000000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"50000000000000000000000000000000000000000000000000000000000000000000000000000\", num2 = \"50000000000000000000000000000000000000000000000000000000000000000000000000000\"",
        "output": "100000000000000000000000000000000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"9999999999999999999999999999999\", num2 = \"1\"",
        "output": "10000000000000000000000000000000"
      },
      {
        "input": "num1 = \"5678901234567890\", num2 = \"9876543210987654\"",
        "output": "15555444445555544"
      },
      {
        "input": "num1 = \"999999999999999999999999999999999999\", num2 = \"1\"",
        "output": "1000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"1000000000000000000000000000000000000000000000000000000000000000\", num2 = \"1000000000000000000000000000000000000000000000000000000000000000\"",
        "output": "2000000000000000000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"111111111111111111111111111111111111\", num2 = \"222222222222222222222222222222222222\"",
        "output": "333333333333333333333333333333333333"
      },
      {
        "input": "num1 = \"111111111111111111111111111111\", num2 = \"222222222222222222222222222222\"",
        "output": "333333333333333333333333333333"
      },
      {
        "input": "num1 = \"1234567890\", num2 = \"9876543210\"",
        "output": "11111111100"
      },
      {
        "input": "num1 = \"5555555555555555555555555555555555555555555555555555555555555555555555555555\", num2 = \"44444444444444444444444444444444444444444444444444444444444444444444444444444\"",
        "output": "49999999999999999999999999999999999999999999999999999999999999999999999999999"
      },
      {
        "input": "num1 = \"987654321098765432109876543210\", num2 = \"123456789012345678901234567890\"",
        "output": "1111111110111111111011111111100"
      },
      {
        "input": "num1 = \"0\", num2 = \"9999999999999999999999999\"",
        "output": "9999999999999999999999999"
      },
      {
        "input": "num1 = \"9999999999999999999999999999999999999999999999999\", num2 = \"9999999999999999999999999999999999999999999999999\"",
        "output": "19999999999999999999999999999999999999999999999998"
      },
      {
        "input": "num1 = \"2222222222222222222222222222222\", num2 = \"7777777777777777777777777777777\"",
        "output": "9999999999999999999999999999999"
      },
      {
        "input": "num1 = \"5\", num2 = \"5\"",
        "output": "10"
      },
      {
        "input": "num1 = \"1111111111111111111111111111111\", num2 = \"8888888888888888888888888888888\"",
        "output": "9999999999999999999999999999999"
      },
      {
        "input": "num1 = \"10000000000000000000000000000000\", num2 = \"1\"",
        "output": "10000000000000000000000000000001"
      },
      {
        "input": "num1 = \"1\", num2 = \"999999999999999999999999999999\"",
        "output": "1000000000000000000000000000000"
      },
      {
        "input": "num1 = \"555555555555555555\", num2 = \"444444444444444444\"",
        "output": "999999999999999999"
      },
      {
        "input": "num1 = \"10000000000000000000\", num2 = \"1\"",
        "output": "10000000000000000001"
      },
      {
        "input": "num1 = \"999999999999999999999999999999999999999999999999999999999999999999999999999\", num2 = \"999999999999999999999999999999999999999999999999999999999999999999999999999\"",
        "output": "1999999999999999999999999999999999999999999999999999999999999999999999999998"
      },
      {
        "input": "num1 = \"56789123456789123456789\", num2 = \"432109876543210987654321\"",
        "output": "488899000000000111111110"
      },
      {
        "input": "num1 = \"10000000000000000000\", num2 = \"10000000000000000000\"",
        "output": "20000000000000000000"
      },
      {
        "input": "num1 = \"1\", num2 = \"0\"",
        "output": "1"
      },
      {
        "input": "num1 = \"999999999999999999999999999998\", num2 = \"2\"",
        "output": "1000000000000000000000000000000"
      },
      {
        "input": "num1 = \"99999999999999999999999999999999999999999999999999\", num2 = \"1\"",
        "output": "100000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"99999999999999999999\", num2 = \"1\"",
        "output": "100000000000000000000"
      },
      {
        "input": "num1 = \"0\", num2 = \"999999999999999999\"",
        "output": "999999999999999999"
      },
      {
        "input": "num1 = \"111111111111111111111111111111\", num2 = \"111111111111111111111111111111\"",
        "output": "222222222222222222222222222222"
      },
      {
        "input": "num1 = \"9999999999999999999999999999999999999999999999999\", num2 = \"1\"",
        "output": "10000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"999999999999999999999999999999999999999999999999999999999999999999999999999\", num2 = \"1\"",
        "output": "1000000000000000000000000000000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"4294967295\", num2 = \"1\"",
        "output": "4294967296"
      },
      {
        "input": "num1 = \"10000000000000000000000000\", num2 = \"20000000000000000000000000\"",
        "output": "30000000000000000000000000"
      },
      {
        "input": "num1 = \"1\", num2 = \"9999999999999999999999999\"",
        "output": "10000000000000000000000000"
      },
      {
        "input": "num1 = \"9\", num2 = \"999999999999999999\"",
        "output": "1000000000000000008"
      },
      {
        "input": "num1 = \"0\", num2 = \"99999999999999999999999999999999999999999999999999\"",
        "output": "99999999999999999999999999999999999999999999999999"
      },
      {
        "input": "num1 = \"111111111111111111111111111111111111111111111111111\", num2 = \"88888888888888888888888888888888888888888888888888\"",
        "output": "199999999999999999999999999999999999999999999999999"
      },
      {
        "input": "num1 = \"99999999999999999999999999999999999999999999999999\", num2 = \"99999999999999999999999999999999999999999999999999\"",
        "output": "199999999999999999999999999999999999999999999999998"
      },
      {
        "input": "num1 = \"1010101010101010101010101010101010101010101010101010101010101010\", num2 = \"1\"",
        "output": "1010101010101010101010101010101010101010101010101010101010101011"
      },
      {
        "input": "num1 = \"54321\", num2 = \"678901234567890\"",
        "output": "678901234622211"
      },
      {
        "input": "num1 = \"999999999999999999999999999999\", num2 = \"1\"",
        "output": "1000000000000000000000000000000"
      },
      {
        "input": "num1 = \"0\", num2 = \"10000000000000000000000000000000\"",
        "output": "10000000000000000000000000000000"
      },
      {
        "input": "num1 = \"1\", num2 = \"999999999999999999999999999999999999999999999999999999999999999999999999999\"",
        "output": "1000000000000000000000000000000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"999999999999999999\", num2 = \"1\"",
        "output": "1000000000000000000"
      },
      {
        "input": "num1 = \"111111111111111111111111111111111111111111111111111111111111111\", num2 = \"222222222222222222222222222222222222222222222222222222222222222\"",
        "output": "333333333333333333333333333333333333333333333333333333333333333"
      },
      {
        "input": "num1 = \"1\", num2 = \"9999999999999999999999999999999999999999999999999\"",
        "output": "10000000000000000000000000000000000000000000000000"
      },
      {
        "input": "num1 = \"999999999999999999999999999999\", num2 = \"999999999999999999999999999999\"",
        "output": "1999999999999999999999999999998"
      },
      {
        "input": "num1 = \"1\", num2 = \"2\"",
        "output": "3"
      },
      {
        "input": "num1 = \"11111111111111111111111111111111111111111111111111\", num2 = \"8888888888888888888888888888888888888888888888888\"",
        "output": "19999999999999999999999999999999999999999999999999"
      },
      {
        "input": "num1 = \"12345678901234567890123456789012345678901234567890\", num2 = \"98765432109876543210987654321098765432109876543210\"",
        "output": "111111111011111111101111111110111111111011111111100"
      },
      {
        "input": "num1 = \"555555555555555555555555555555\", num2 = \"444444444444444444444444444444\"",
        "output": "999999999999999999999999999999"
      },
      {
        "input": "num1 = \"55555555555555555555555555555555555555555555555555\", num2 = \"55555555555555555555555555555555555555555555555555\"",
        "output": "111111111111111111111111111111111111111111111111110"
      },
      {
        "input": "num1 = \"123456789123456789123456789123456789123456789123456789\", num2 = \"987654321987654321987654321987654321987654321987654321\"",
        "output": "1111111111111111111111111111111111111111111111111111110"
      },
      {
        "input": "num1 = \"246802468024680246802468024680\", num2 = \"135791357913579135791357913579\"",
        "output": "382593825938259382593825938259"
      }
    ]
  },
  {
    "id": 1030,
    "difficulty": "Easy",
    "tags": [
      "Geometry",
      "Array",
      "Math",
      "Matrix",
      "Sorting"
    ],
    "problemDescription": "You are given four integers row, cols, rCenter, and cCenter. There is a rows x cols matrix and you are on the cell with the coordinates (rCenter, cCenter).\nReturn the coordinates of all cells in the matrix, sorted by their distance from (rCenter, cCenter) from the smallest distance to the largest distance. You may return the answer in any order that satisfies this condition.\nThe distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|.\n\u00a0\nExample 1:\n\nInput: rows = 1, cols = 2, rCenter = 0, cCenter = 0\nOutput: [[0,0],[0,1]]\nExplanation: The distances from (0, 0) to other cells are: [0,1]\n\nExample 2:\n\nInput: rows = 2, cols = 2, rCenter = 0, cCenter = 1\nOutput: [[0,1],[0,0],[1,1],[1,0]]\nExplanation: The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.\n\nExample 3:\n\nInput: rows = 2, cols = 3, rCenter = 1, cCenter = 2\nOutput: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\nExplanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].\n\n\u00a0\nConstraints:\n\n1 <= rows, cols <= 100\n0 <= rCenter < rows\n0 <= cCenter < cols\n\n",
    "starterCode": "class Solution:\n    def allCellsDistOrder(self, rows: int, cols: int, rCenter: int, cCenter: int) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "rows = 100, cols = 100, rCenter = 50, cCenter = 50",
        "output": "Execution timed out"
      },
      {
        "input": "rows = 5, cols = 7, rCenter = 3, cCenter = 4",
        "output": "[[3, 4], [2, 4], [3, 5], [4, 4], [3, 3], [1, 4], [2, 5], [2, 3], [3, 6], [4, 5], [4, 3], [3, 2], [0, 4], [1, 5], [1, 3], [2, 6], [2, 2], [4, 6], [4, 2], [3, 1], [0, 5], [0, 3], [1, 6], [1, 2], [2, 1], [4, 1], [3, 0], [0, 6], [0, 2], [1, 1], [2, 0], [4, 0], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 2, cols = 3, rCenter = 1, cCenter = 2",
        "output": "[[1, 2], [0, 2], [1, 1], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 3, cols = 4, rCenter = 1, cCenter = 1",
        "output": "[[1, 1], [0, 1], [1, 2], [2, 1], [1, 0], [0, 2], [0, 0], [1, 3], [2, 2], [2, 0], [0, 3], [2, 3]]"
      },
      {
        "input": "rows = 4, cols = 4, rCenter = 2, cCenter = 2",
        "output": "[[2, 2], [1, 2], [2, 3], [3, 2], [2, 1], [0, 2], [1, 3], [1, 1], [3, 3], [3, 1], [2, 0], [0, 3], [0, 1], [1, 0], [3, 0], [0, 0]]"
      },
      {
        "input": "rows = 5, cols = 5, rCenter = 2, cCenter = 2",
        "output": "[[2, 2], [1, 2], [2, 3], [3, 2], [2, 1], [0, 2], [1, 3], [1, 1], [2, 4], [3, 3], [4, 2], [3, 1], [2, 0], [0, 3], [0, 1], [1, 4], [1, 0], [3, 4], [4, 3], [4, 1], [3, 0], [0, 4], [0, 0], [4, 4], [4, 0]]"
      },
      {
        "input": "rows = 1, cols = 2, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1]]"
      },
      {
        "input": "rows = 4, cols = 4, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0], [1, 3], [2, 2], [3, 1], [2, 3], [3, 2], [3, 3]]"
      },
      {
        "input": "rows = 3, cols = 3, rCenter = 2, cCenter = 2",
        "output": "[[2, 2], [1, 2], [2, 1], [0, 2], [1, 1], [2, 0], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 10, cols = 10, rCenter = 5, cCenter = 5",
        "output": "[[5, 5], [4, 5], [5, 6], [6, 5], [5, 4], [3, 5], [4, 6], [4, 4], [5, 7], [6, 6], [7, 5], [6, 4], [5, 3], [2, 5], [3, 6], [3, 4], [4, 7], [4, 3], [5, 8], [6, 7], [7, 6], [8, 5], [7, 4], [6, 3], [5, 2], [1, 5], [2, 6], [2, 4], [3, 7], [3, 3], [4, 8], [4, 2], [5, 9], [6, 8], [7, 7], [8, 6], [9, 5], [8, 4], [7, 3], [6, 2], [5, 1], [0, 5], [1, 6], [1, 4], [2, 7], [2, 3], [3, 8], [3, 2], [4, 9], [4, 1], [6, 9], [7, 8], [8, 7], [9, 6], [9, 4], [8, 3], [7, 2], [6, 1], [5, 0], [0, 6], [0, 4], [1, 7], [1, 3], [2, 8], [2, 2], [3, 9], [3, 1], [4, 0], [7, 9], [8, 8], [9, 7], [9, 3], [8, 2], [7, 1], [6, 0], [0, 7], [0, 3], [1, 8], [1, 2], [2, 9], [2, 1], [3, 0], [8, 9], [9, 8], [9, 2], [8, 1], [7, 0], [0, 8], [0, 2], [1, 9], [1, 1], [2, 0], [9, 9], [9, 1], [8, 0], [0, 9], [0, 1], [1, 0], [9, 0], [0, 0]]"
      },
      {
        "input": "rows = 2, cols = 2, rCenter = 0, cCenter = 1",
        "output": "[[0, 1], [1, 1], [0, 0], [1, 0]]"
      },
      {
        "input": "rows = 3, cols = 3, rCenter = 1, cCenter = 1",
        "output": "[[1, 1], [0, 1], [1, 2], [2, 1], [1, 0], [0, 2], [0, 0], [2, 2], [2, 0]]"
      },
      {
        "input": "rows = 3, cols = 3, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [1, 2], [2, 1], [2, 2]]"
      },
      {
        "input": "rows = 4, cols = 7, rCenter = 3, cCenter = 0",
        "output": "[[3, 0], [2, 0], [3, 1], [1, 0], [2, 1], [3, 2], [0, 0], [1, 1], [2, 2], [3, 3], [0, 1], [1, 2], [2, 3], [3, 4], [0, 2], [1, 3], [2, 4], [3, 5], [0, 3], [1, 4], [2, 5], [3, 6], [0, 4], [1, 5], [2, 6], [0, 5], [1, 6], [0, 6]]"
      },
      {
        "input": "rows = 50, cols = 30, rCenter = 25, cCenter = 15",
        "output": "[[25, 15], [24, 15], [25, 16], [26, 15], [25, 14], [23, 15], [24, 16], [24, 14], [25, 17], [26, 16], [27, 15], [26, 14], [25, 13], [22, 15], [23, 16], [23, 14], [24, 17], [24, 13], [25, 18], [26, 17], [27, 16], [28, 15], [27, 14], [26, 13], [25, 12], [21, 15], [22, 16], [22, 14], [23, 17], [23, 13], [24, 18], [24, 12], [25, 19], [26, 18], [27, 17], [28, 16], [29, 15], [28, 14], [27, 13], [26, 12], [25, 11], [20, 15], [21, 16], [21, 14], [22, 17], [22, 13], [23, 18], [23, 12], [24, 19], [24, 11], [25, 20], [26, 19], [27, 18], [28, 17], [29, 16], [30, 15], [29, 14], [28, 13], [27, 12], [26, 11], [25, 10], [19, 15], [20, 16], [20, 14], [21, 17], [21, 13], [22, 18], [22, 12], [23, 19], [23, 11], [24, 20], [24, 10], [25, 21], [26, 20], [27, 19], [28, 18], [29, 17], [30, 16], [31, 15], [30, 14], [29, 13], [28, 12], [27, 11], [26, 10], [25, 9], [18, 15], [19, 16], [19, 14], [20, 17], [20, 13], [21, 18], [21, 12], [22, 19], [22, 11], [23, 20], [23, 10], [24, 21], [24, 9], [25, 22], [26, 21], [27, 20], [28, 19], [29, 18], [30, 17], [31, 16], [32, 15], [31, 14], [30, 13], [29, 12], [28, 11], [27, 10], [26, 9], [25, 8], [17, 15], [18, 16], [18, 14], [19, 17], [19, 13], [20, 18], [20, 12], [21, 19], [21, 11], [22, 20], [22, 10], [23, 21], [23, 9], [24, 22], [24, 8], [25, 23], [26, 22], [27, 21], [28, 20], [29, 19], [30, 18], [31, 17], [32, 16], [33, 15], [32, 14], [31, 13], [30, 12], [29, 11], [28, 10], [27, 9], [26, 8], [25, 7], [16, 15], [17, 16], [17, 14], [18, 17], [18, 13], [19, 18], [19, 12], [20, 19], [20, 11], [21, 20], [21, 10], [22, 21], [22, 9], [23, 22], [23, 8], [24, 23], [24, 7], [25, 24], [26, 23], [27, 22], [28, 21], [29, 20], [30, 19], [31, 18], [32, 17], [33, 16], [34, 15], [33, 14], [32, 13], [31, 12], [30, 11], [29, 10], [28, 9], [27, 8], [26, 7], [25, 6], [15, 15], [16, 16], [16, 14], [17, 17], [17, 13], [18, 18], [18, 12], [19, 19], [19, 11], [20, 20], [20, 10], [21, 21], [21, 9], [22, 22], [22, 8], [23, 23], [23, 7], [24, 24], [24, 6], [25, 25], [26, 24], [27, 23], [28, 22], [29, 21], [30, 20], [31, 19], [32, 18], [33, 17], [34, 16], [35, 15], [34, 14], [33, 13], [32, 12], [31, 11], [30, 10], [29, 9], [28, 8], [27, 7], [26, 6], [25, 5], [14, 15], [15, 16], [15, 14], [16, 17], [16, 13], [17, 18], [17, 12], [18, 19], [18, 11], [19, 20], [19, 10], [20, 21], [20, 9], [21, 22], [21, 8], [22, 23], [22, 7], [23, 24], [23, 6], [24, 25], [24, 5], [25, 26], [26, 25], [27, 24], [28, 23], [29, 22], [30, 21], [31, 20], [32, 19], [33, 18], [34, 17], [35, 16], [36, 15], [35, 14], [34, 13], [33, 12], [32, 11], [31, 10], [30, 9], [29, 8], [28, 7], [27, 6], [26, 5], [25, 4], [13, 15], [14, 16], [14, 14], [15, 17], [15, 13], [16, 18], [16, 12], [17, 19], [17, 11], [18, 20], [18, 10], [19, 21], [19, 9], [20, 22], [20, 8], [21, 23], [21, 7], [22, 24], [22, 6], [23, 25], [23, 5], [24, 26], [24, 4], [25, 27], [26, 26], [27, 25], [28, 24], [29, 23], [30, 22], [31, 21], [32, 20], [33, 19], [34, 18], [35, 17], [36, 16], [37, 15], [36, 14], [35, 13], [34, 12], [33, 11], [32, 10], [31, 9], [30, 8], [29, 7], [28, 6], [27, 5], [26, 4], [25, 3], [12, 15], [13, 16], [13, 14], [14, 17], [14, 13], [15, 18], [15, 12], [16, 19], [16, 11], [17, 20], [17, 10], [18, 21], [18, 9], [19, 22], [19, 8], [20, 23], [20, 7], [21, 24], [21, 6], [22, 25], [22, 5], [23, 26], [23, 4], [24, 27], [24, 3], [25, 28], [26, 27], [27, 26], [28, 25], [29, 24], [30, 23], [31, 22], [32, 21], [33, 20], [34, 19], [35, 18], [36, 17], [37, 16], [38, 15], [37, 14], [36, 13], [35, 12], [34, 11], [33, 10], [32, 9], [31, 8], [30, 7], [29, 6], [28, 5], [27, 4], [26, 3], [25, 2], [11, 15], [12, 16], [12, 14], [13, 17], [13, 13], [14, 18], [14, 12], [15, 19], [15, 11], [16, 20], [16, 10], [17, 21], [17, 9], [18, 22], [18, 8], [19, 23], [19, 7], [20, 24], [20, 6], [21, 25], [21, 5], [22, 26], [22, 4], [23, 27], [23, 3], [24, 28], [24, 2], [25, 29], [26, 28], [27, 27], [28, 26], [29, 25], [30, 24], [31, 23], [32, 22], [33, 21], [34, 20], [35, 19], [36, 18], [37, 17], [38, 16], [39, 15], [38, 14], [37, 13], [36, 12], [35, 11], [34, 10], [33, 9], [32, 8], [31, 7], [30, 6], [29, 5], [28, 4], [27, 3], [26, 2], [25, 1], [10, 15], [11, 16], [11, 14], [12, 17], [12, 13], [13, 18], [13, 12], [14, 19], [14, 11], [15, 20], [15, 10], [16, 21], [16, 9], [17, 22], [17, 8], [18, 23], [18, 7], [19, 24], [19, 6], [20, 25], [20, 5], [21, 26], [21, 4], [22, 27], [22, 3], [23, 28], [23, 2], [24, 29], [24, 1], [26, 29], [27, 28], [28, 27], [29, 26], [30, 25], [31, 24], [32, 23], [33, 22], [34, 21], [35, 20], [36, 19], [37, 18], [38, 17], [39, 16], [40, 15], [39, 14], [38, 13], [37, 12], [36, 11], [35, 10], [34, 9], [33, 8], [32, 7], [31, 6], [30, 5], [29, 4], [28, 3], [27, 2], [26, 1], [25, 0], [9, 15], [10, 16], [10, 14], [11, 17], [11, 13], [12, 18], [12, 12], [13, 19], [13, 11], [14, 20], [14, 10], [15, 21], [15, 9], [16, 22], [16, 8], [17, 23], [17, 7], [18, 24], [18, 6], [19, 25], [19, 5], [20, 26], [20, 4], [21, 27], [21, 3], [22, 28], [22, 2], [23, 29], [23, 1], [24, 0], [27, 29], [28, 28], [29, 27], [30, 26], [31, 25], [32, 24], [33, 23], [34, 22], [35, 21], [36, 20], [37, 19], [38, 18], [39, 17], [40, 16], [41, 15], [40, 14], [39, 13], [38, 12], [37, 11], [36, 10], [35, 9], [34, 8], [33, 7], [32, 6], [31, 5], [30, 4], [29, 3], [28, 2], [27, 1], [26, 0], [8, 15], [9, 16], [9, 14], [10, 17], [10, 13], [11, 18], [11, 12], [12, 19], [12, 11], [13, 20], [13, 10], [14, 21], [14, 9], [15, 22], [15, 8], [16, 23], [16, 7], [17, 24], [17, 6], [18, 25], [18, 5], [19, 26], [19, 4], [20, 27], [20, 3], [21, 28], [21, 2], [22, 29], [22, 1], [23, 0], [28, 29], [29, 28], [30, 27], [31, 26], [32, 25], [33, 24], [34, 23], [35, 22], [36, 21], [37, 20], [38, 19], [39, 18], [40, 17], [41, 16], [42, 15], [41, 14], [40, 13], [39, 12], [38, 11], [37, 10], [36, 9], [35, 8], [34, 7], [33, 6], [32, 5], [31, 4], [30, 3], [29, 2], [28, 1], [27, 0], [7, 15], [8, 16], [8, 14], [9, 17], [9, 13], [10, 18], [10, 12], [11, 19], [11, 11], [12, 20], [12, 10], [13, 21], [13, 9], [14, 22], [14, 8], [15, 23], [15, 7], [16, 24], [16, 6], [17, 25], [17, 5], [18, 26], [18, 4], [19, 27], [19, 3], [20, 28], [20, 2], [21, 29], [21, 1], [22, 0], [29, 29], [30, 28], [31, 27], [32, 26], [33, 25], [34, 24], [35, 23], [36, 22], [37, 21], [38, 20], [39, 19], [40, 18], [41, 17], [42, 16], [43, 15], [42, 14], [41, 13], [40, 12], [39, 11], [38, 10], [37, 9], [36, 8], [35, 7], [34, 6], [33, 5], [32, 4], [31, 3], [30, 2], [29, 1], [28, 0], [6, 15], [7, 16], [7, 14], [8, 17], [8, 13], [9, 18], [9, 12], [10, 19], [10, 11], [11, 20], [11, 10], [12, 21], [12, 9], [13, 22], [13, 8], [14, 23], [14, 7], [15, 24], [15, 6], [16, 25], [16, 5], [17, 26], [17, 4], [18, 27], [18, 3], [19, 28], [19, 2], [20, 29], [20, 1], [21, 0], [30, 29], [31, 28], [32, 27], [33, 26], [34, 25], [35, 24], [36, 23], [37, 22], [38, 21], [39, 20], [40, 19], [41, 18], [42, 17], [43, 16], [44, 15], [43, 14], [42, 13], [41, 12], [40, 11], [39, 10], [38, 9], [37, 8], [36, 7], [35, 6], [34, 5], [33, 4], [32, 3], [31, 2], [30, 1], [29, 0], [5, 15], [6, 16], [6, 14], [7, 17], [7, 13], [8, 18], [8, 12], [9, 19], [9, 11], [10, 20], [10, 10], [11, 21], [11, 9], [12, 22], [12, 8], [13, 23], [13, 7], [14, 24], [14, 6], [15, 25], [15, 5], [16, 26], [16, 4], [17, 27], [17, 3], [18, 28], [18, 2], [19, 29], [19, 1], [20, 0], [31, 29], [32, 28], [33, 27], [34, 26], [35, 25], [36, 24], [37, 23], [38, 22], [39, 21], [40, 20], [41, 19], [42, 18], [43, 17], [44, 16], [45, 15], [44, 14], [43, 13], [42, 12], [41, 11], [40, 10], [39, 9], [38, 8], [37, 7], [36, 6], [35, 5], [34, 4], [33, 3], [32, 2], [31, 1], [30, 0], [4, 15], [5, 16], [5, 14], [6, 17], [6, 13], [7, 18], [7, 12], [8, 19], [8, 11], [9, 20], [9, 10], [10, 21], [10, 9], [11, 22], [11, 8], [12, 23], [12, 7], [13, 24], [13, 6], [14, 25], [14, 5], [15, 26], [15, 4], [16, 27], [16, 3], [17, 28], [17, 2], [18, 29], [18, 1], [19, 0], [32, 29], [33, 28], [34, 27], [35, 26], [36, 25], [37, 24], [38, 23], [39, 22], [40, 21], [41, 20], [42, 19], [43, 18], [44, 17], [45, 16], [46, 15], [45, 14], [44, 13], [43, 12], [42, 11], [41, 10], [40, 9], [39, 8], [38, 7], [37, 6], [36, 5], [35, 4], [34, 3], [33, 2], [32, 1], [31, 0], [3, 15], [4, 16], [4, 14], [5, 17], [5, 13], [6, 18], [6, 12], [7, 19], [7, 11], [8, 20], [8, 10], [9, 21], [9, 9], [10, 22], [10, 8], [11, 23], [11, 7], [12, 24], [12, 6], [13, 25], [13, 5], [14, 26], [14, 4], [15, 27], [15, 3], [16, 28], [16, 2], [17, 29], [17, 1], [18, 0], [33, 29], [34, 28], [35, 27], [36, 26], [37, 25], [38, 24], [39, 23], [40, 22], [41, 21], [42, 20], [43, 19], [44, 18], [45, 17], [46, 16], [47, 15], [46, 14], [45, 13], [44, 12], [43, 11], [42, 10], [41, 9], [40, 8], [39, 7], [38, 6], [37, 5], [36, 4], [35, 3], [34, 2], [33, 1], [32, 0], [2, 15], [3, 16], [3, 14], [4, 17], [4, 13], [5, 18], [5, 12], [6, 19], [6, 11], [7, 20], [7, 10], [8, 21], [8, 9], [9, 22], [9, 8], [10, 23], [10, 7], [11, 24], [11, 6], [12, 25], [12, 5], [13, 26], [13, 4], [14, 27], [14, 3], [15, 28], [15, 2], [16, 29], [16, 1], [17, 0], [34, 29], [35, 28], [36, 27], [37, 26], [38, 25], [39, 24], [40, 23], [41, 22], [42, 21], [43, 20], [44, 19], [45, 18], [46, 17], [47, 16], [48, 15], [47, 14], [46, 13], [45, 12], [44, 11], [43, 10], [42, 9], [41, 8], [40, 7], [39, 6], [38, 5], [37, 4], [36, 3], [35, 2], [34, 1], [33, 0], [1, 15], [2, 16], [2, 14], [3, 17], [3, 13], [4, 18], [4, 12], [5, 19], [5, 11], [6, 20], [6, 10], [7, 21], [7, 9], [8, 22], [8, 8], [9, 23], [9, 7], [10, 24], [10, 6], [11, 25], [11, 5], [12, 26], [12, 4], [13, 27], [13, 3], [14, 28], [14, 2], [15, 29], [15, 1], [16, 0], [35, 29], [36, 28], [37, 27], [38, 26], [39, 25], [40, 24], [41, 23], [42, 22], [43, 21], [44, 20], [45, 19], [46, 18], [47, 17], [48, 16], [49, 15], [48, 14], [47, 13], [46, 12], [45, 11], [44, 10], [43, 9], [42, 8], [41, 7], [40, 6], [39, 5], [38, 4], [37, 3], [36, 2], [35, 1], [34, 0], [0, 15], [1, 16], [1, 14], [2, 17], [2, 13], [3, 18], [3, 12], [4, 19], [4, 11], [5, 20], [5, 10], [6, 21], [6, 9], [7, 22], [7, 8], [8, 23], [8, 7], [9, 24], [9, 6], [10, 25], [10, 5], [11, 26], [11, 4], [12, 27], [12, 3], [13, 28], [13, 2], [14, 29], [14, 1], [15, 0], [36, 29], [37, 28], [38, 27], [39, 26], [40, 25], [41, 24], [42, 23], [43, 22], [44, 21], [45, 20], [46, 19], [47, 18], [48, 17], [49, 16], [49, 14], [48, 13], [47, 12], [46, 11], [45, 10], [44, 9], [43, 8], [42, 7], [41, 6], [40, 5], [39, 4], [38, 3], [37, 2], [36, 1], [35, 0], [0, 16], [0, 14], [1, 17], [1, 13], [2, 18], [2, 12], [3, 19], [3, 11], [4, 20], [4, 10], [5, 21], [5, 9], [6, 22], [6, 8], [7, 23], [7, 7], [8, 24], [8, 6], [9, 25], [9, 5], [10, 26], [10, 4], [11, 27], [11, 3], [12, 28], [12, 2], [13, 29], [13, 1], [14, 0], [37, 29], [38, 28], [39, 27], [40, 26], [41, 25], [42, 24], [43, 23], [44, 22], [45, 21], [46, 20], [47, 19], [48, 18], [49, 17], [49, 13], [48, 12], [47, 11], [46, 10], [45, 9], [44, 8], [43, 7], [42, 6], [41, 5], [40, 4], [39, 3], [38, 2], [37, 1], [36, 0], [0, 17], [0, 13], [1, 18], [1, 12], [2, 19], [2, 11], [3, 20], [3, 10], [4, 21], [4, 9], [5, 22], [5, 8], [6, 23], [6, 7], [7, 24], [7, 6], [8, 25], [8, 5], [9, 26], [9, 4], [10, 27], [10, 3], [11, 28], [11, 2], [12, 29], [12, 1], [13, 0], [38, 29], [39, 28], [40, 27], [41, 26], [42, 25], [43, 24], [44, 23], [45, 22], [46, 21], [47, 20], [48, 19], [49, 18], [49, 12], [48, 11], [47, 10], [46, 9], [45, 8], [44, 7], [43, 6], [42, 5], [41, 4], [40, 3], [39, 2], [38, 1], [37, 0], [0, 18], [0, 12], [1, 19], [1, 11], [2, 20], [2, 10], [3, 21], [3, 9], [4, 22], [4, 8], [5, 23], [5, 7], [6, 24], [6, 6], [7, 25], [7, 5], [8, 26], [8, 4], [9, 27], [9, 3], [10, 28], [10, 2], [11, 29], [11, 1], [12, 0], [39, 29], [40, 28], [41, 27], [42, 26], [43, 25], [44, 24], [45, 23], [46, 22], [47, 21], [48, 20], [49, 19], [49, 11], [48, 10], [47, 9], [46, 8], [45, 7], [44, 6], [43, 5], [42, 4], [41, 3], [40, 2], [39, 1], [38, 0], [0, 19], [0, 11], [1, 20], [1, 10], [2, 21], [2, 9], [3, 22], [3, 8], [4, 23], [4, 7], [5, 24], [5, 6], [6, 25], [6, 5], [7, 26], [7, 4], [8, 27], [8, 3], [9, 28], [9, 2], [10, 29], [10, 1], [11, 0], [40, 29], [41, 28], [42, 27], [43, 26], [44, 25], [45, 24], [46, 23], [47, 22], [48, 21], [49, 20], [49, 10], [48, 9], [47, 8], [46, 7], [45, 6], [44, 5], [43, 4], [42, 3], [41, 2], [40, 1], [39, 0], [0, 20], [0, 10], [1, 21], [1, 9], [2, 22], [2, 8], [3, 23], [3, 7], [4, 24], [4, 6], [5, 25], [5, 5], [6, 26], [6, 4], [7, 27], [7, 3], [8, 28], [8, 2], [9, 29], [9, 1], [10, 0], [41, 29], [42, 28], [43, 27], [44, 26], [45, 25], [46, 24], [47, 23], [48, 22], [49, 21], [49, 9], [48, 8], [47, 7], [46, 6], [45, 5], [44, 4], [43, 3], [42, 2], [41, 1], [40, 0], [0, 21], [0, 9], [1, 22], [1, 8], [2, 23], [2, 7], [3, 24], [3, 6], [4, 25], [4, 5], [5, 26], [5, 4], [6, 27], [6, 3], [7, 28], [7, 2], [8, 29], [8, 1], [9, 0], [42, 29], [43, 28], [44, 27], [45, 26], [46, 25], [47, 24], [48, 23], [49, 22], [49, 8], [48, 7], [47, 6], [46, 5], [45, 4], [44, 3], [43, 2], [42, 1], [41, 0], [0, 22], [0, 8], [1, 23], [1, 7], [2, 24], [2, 6], [3, 25], [3, 5], [4, 26], [4, 4], [5, 27], [5, 3], [6, 28], [6, 2], [7, 29], [7, 1], [8, 0], [43, 29], [44, 28], [45, 27], [46, 26], [47, 25], [48, 24], [49, 23], [49, 7], [48, 6], [47, 5], [46, 4], [45, 3], [44, 2], [43, 1], [42, 0], [0, 23], [0, 7], [1, 24], [1, 6], [2, 25], [2, 5], [3, 26], [3, 4], [4, 27], [4, 3], [5, 28], [5, 2], [6, 29], [6, 1], [7, 0], [44, 29], [45, 28], [46, 27], [47, 26], [48, 25], [49, 24], [49, 6], [48, 5], [47, 4], [46, 3], [45, 2], [44, 1], [43, 0], [0, 24], [0, 6], [1, 25], [1, 5], [2, 26], [2, 4], [3, 27], [3, 3], [4, 28], [4, 2], [5, 29], [5, 1], [6, 0], [45, 29], [46, 28], [47, 27], [48, 26], [49, 25], [49, 5], [48, 4], [47, 3], [46, 2], [45, 1], [44, 0], [0, 25], [0, 5], [1, 26], [1, 4], [2, 27], [2, 3], [3, 28], [3, 2], [4, 29], [4, 1], [5, 0], [46, 29], [47, 28], [48, 27], [49, 26], [49, 4], [48, 3], [47, 2], [46, 1], [45, 0], [0, 26], [0, 4], [1, 27], [1, 3], [2, 28], [2, 2], [3, 29], [3, 1], [4, 0], [47, 29], [48, 28], [49, 27], [49, 3], [48, 2], [47, 1], [46, 0], [0, 27], [0, 3], [1, 28], [1, 2], [2, 29], [2, 1], [3, 0], [48, 29], [49, 28], [49, 2], [48, 1], [47, 0], [0, 28], [0, 2], [1, 29], [1, 1], [2, 0], [49, 29], [49, 1], [48, 0], [0, 29], [0, 1], [1, 0], [49, 0], [0, 0]]"
      },
      {
        "input": "rows = 6, cols = 6, rCenter = 3, cCenter = 0",
        "output": "[[3, 0], [2, 0], [3, 1], [4, 0], [1, 0], [2, 1], [3, 2], [4, 1], [5, 0], [0, 0], [1, 1], [2, 2], [3, 3], [4, 2], [5, 1], [0, 1], [1, 2], [2, 3], [3, 4], [4, 3], [5, 2], [0, 2], [1, 3], [2, 4], [3, 5], [4, 4], [5, 3], [0, 3], [1, 4], [2, 5], [4, 5], [5, 4], [0, 4], [1, 5], [5, 5], [0, 5]]"
      },
      {
        "input": "rows = 40, cols = 40, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [0, 5], [1, 4], [2, 3], [3, 2], [4, 1], [5, 0], [0, 6], [1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 0], [0, 7], [1, 6], [2, 5], [3, 4], [4, 3], [5, 2], [6, 1], [7, 0], [0, 8], [1, 7], [2, 6], [3, 5], [4, 4], [5, 3], [6, 2], [7, 1], [8, 0], [0, 9], [1, 8], [2, 7], [3, 6], [4, 5], [5, 4], [6, 3], [7, 2], [8, 1], [9, 0], [0, 10], [1, 9], [2, 8], [3, 7], [4, 6], [5, 5], [6, 4], [7, 3], [8, 2], [9, 1], [10, 0], [0, 11], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [6, 5], [7, 4], [8, 3], [9, 2], [10, 1], [11, 0], [0, 12], [1, 11], [2, 10], [3, 9], [4, 8], [5, 7], [6, 6], [7, 5], [8, 4], [9, 3], [10, 2], [11, 1], [12, 0], [0, 13], [1, 12], [2, 11], [3, 10], [4, 9], [5, 8], [6, 7], [7, 6], [8, 5], [9, 4], [10, 3], [11, 2], [12, 1], [13, 0], [0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8], [7, 7], [8, 6], [9, 5], [10, 4], [11, 3], [12, 2], [13, 1], [14, 0], [0, 15], [1, 14], [2, 13], [3, 12], [4, 11], [5, 10], [6, 9], [7, 8], [8, 7], [9, 6], [10, 5], [11, 4], [12, 3], [13, 2], [14, 1], [15, 0], [0, 16], [1, 15], [2, 14], [3, 13], [4, 12], [5, 11], [6, 10], [7, 9], [8, 8], [9, 7], [10, 6], [11, 5], [12, 4], [13, 3], [14, 2], [15, 1], [16, 0], [0, 17], [1, 16], [2, 15], [3, 14], [4, 13], [5, 12], [6, 11], [7, 10], [8, 9], [9, 8], [10, 7], [11, 6], [12, 5], [13, 4], [14, 3], [15, 2], [16, 1], [17, 0], [0, 18], [1, 17], [2, 16], [3, 15], [4, 14], [5, 13], [6, 12], [7, 11], [8, 10], [9, 9], [10, 8], [11, 7], [12, 6], [13, 5], [14, 4], [15, 3], [16, 2], [17, 1], [18, 0], [0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10], [10, 9], [11, 8], [12, 7], [13, 6], [14, 5], [15, 4], [16, 3], [17, 2], [18, 1], [19, 0], [0, 20], [1, 19], [2, 18], [3, 17], [4, 16], [5, 15], [6, 14], [7, 13], [8, 12], [9, 11], [10, 10], [11, 9], [12, 8], [13, 7], [14, 6], [15, 5], [16, 4], [17, 3], [18, 2], [19, 1], [20, 0], [0, 21], [1, 20], [2, 19], [3, 18], [4, 17], [5, 16], [6, 15], [7, 14], [8, 13], [9, 12], [10, 11], [11, 10], [12, 9], [13, 8], [14, 7], [15, 6], [16, 5], [17, 4], [18, 3], [19, 2], [20, 1], [21, 0], [0, 22], [1, 21], [2, 20], [3, 19], [4, 18], [5, 17], [6, 16], [7, 15], [8, 14], [9, 13], [10, 12], [11, 11], [12, 10], [13, 9], [14, 8], [15, 7], [16, 6], [17, 5], [18, 4], [19, 3], [20, 2], [21, 1], [22, 0], [0, 23], [1, 22], [2, 21], [3, 20], [4, 19], [5, 18], [6, 17], [7, 16], [8, 15], [9, 14], [10, 13], [11, 12], [12, 11], [13, 10], [14, 9], [15, 8], [16, 7], [17, 6], [18, 5], [19, 4], [20, 3], [21, 2], [22, 1], [23, 0], [0, 24], [1, 23], [2, 22], [3, 21], [4, 20], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 13], [12, 12], [13, 11], [14, 10], [15, 9], [16, 8], [17, 7], [18, 6], [19, 5], [20, 4], [21, 3], [22, 2], [23, 1], [24, 0], [0, 25], [1, 24], [2, 23], [3, 22], [4, 21], [5, 20], [6, 19], [7, 18], [8, 17], [9, 16], [10, 15], [11, 14], [12, 13], [13, 12], [14, 11], [15, 10], [16, 9], [17, 8], [18, 7], [19, 6], [20, 5], [21, 4], [22, 3], [23, 2], [24, 1], [25, 0], [0, 26], [1, 25], [2, 24], [3, 23], [4, 22], [5, 21], [6, 20], [7, 19], [8, 18], [9, 17], [10, 16], [11, 15], [12, 14], [13, 13], [14, 12], [15, 11], [16, 10], [17, 9], [18, 8], [19, 7], [20, 6], [21, 5], [22, 4], [23, 3], [24, 2], [25, 1], [26, 0], [0, 27], [1, 26], [2, 25], [3, 24], [4, 23], [5, 22], [6, 21], [7, 20], [8, 19], [9, 18], [10, 17], [11, 16], [12, 15], [13, 14], [14, 13], [15, 12], [16, 11], [17, 10], [18, 9], [19, 8], [20, 7], [21, 6], [22, 5], [23, 4], [24, 3], [25, 2], [26, 1], [27, 0], [0, 28], [1, 27], [2, 26], [3, 25], [4, 24], [5, 23], [6, 22], [7, 21], [8, 20], [9, 19], [10, 18], [11, 17], [12, 16], [13, 15], [14, 14], [15, 13], [16, 12], [17, 11], [18, 10], [19, 9], [20, 8], [21, 7], [22, 6], [23, 5], [24, 4], [25, 3], [26, 2], [27, 1], [28, 0], [0, 29], [1, 28], [2, 27], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [15, 14], [16, 13], [17, 12], [18, 11], [19, 10], [20, 9], [21, 8], [22, 7], [23, 6], [24, 5], [25, 4], [26, 3], [27, 2], [28, 1], [29, 0], [0, 30], [1, 29], [2, 28], [3, 27], [4, 26], [5, 25], [6, 24], [7, 23], [8, 22], [9, 21], [10, 20], [11, 19], [12, 18], [13, 17], [14, 16], [15, 15], [16, 14], [17, 13], [18, 12], [19, 11], [20, 10], [21, 9], [22, 8], [23, 7], [24, 6], [25, 5], [26, 4], [27, 3], [28, 2], [29, 1], [30, 0], [0, 31], [1, 30], [2, 29], [3, 28], [4, 27], [5, 26], [6, 25], [7, 24], [8, 23], [9, 22], [10, 21], [11, 20], [12, 19], [13, 18], [14, 17], [15, 16], [16, 15], [17, 14], [18, 13], [19, 12], [20, 11], [21, 10], [22, 9], [23, 8], [24, 7], [25, 6], [26, 5], [27, 4], [28, 3], [29, 2], [30, 1], [31, 0], [0, 32], [1, 31], [2, 30], [3, 29], [4, 28], [5, 27], [6, 26], [7, 25], [8, 24], [9, 23], [10, 22], [11, 21], [12, 20], [13, 19], [14, 18], [15, 17], [16, 16], [17, 15], [18, 14], [19, 13], [20, 12], [21, 11], [22, 10], [23, 9], [24, 8], [25, 7], [26, 6], [27, 5], [28, 4], [29, 3], [30, 2], [31, 1], [32, 0], [0, 33], [1, 32], [2, 31], [3, 30], [4, 29], [5, 28], [6, 27], [7, 26], [8, 25], [9, 24], [10, 23], [11, 22], [12, 21], [13, 20], [14, 19], [15, 18], [16, 17], [17, 16], [18, 15], [19, 14], [20, 13], [21, 12], [22, 11], [23, 10], [24, 9], [25, 8], [26, 7], [27, 6], [28, 5], [29, 4], [30, 3], [31, 2], [32, 1], [33, 0], [0, 34], [1, 33], [2, 32], [3, 31], [4, 30], [5, 29], [6, 28], [7, 27], [8, 26], [9, 25], [10, 24], [11, 23], [12, 22], [13, 21], [14, 20], [15, 19], [16, 18], [17, 17], [18, 16], [19, 15], [20, 14], [21, 13], [22, 12], [23, 11], [24, 10], [25, 9], [26, 8], [27, 7], [28, 6], [29, 5], [30, 4], [31, 3], [32, 2], [33, 1], [34, 0], [0, 35], [1, 34], [2, 33], [3, 32], [4, 31], [5, 30], [6, 29], [7, 28], [8, 27], [9, 26], [10, 25], [11, 24], [12, 23], [13, 22], [14, 21], [15, 20], [16, 19], [17, 18], [18, 17], [19, 16], [20, 15], [21, 14], [22, 13], [23, 12], [24, 11], [25, 10], [26, 9], [27, 8], [28, 7], [29, 6], [30, 5], [31, 4], [32, 3], [33, 2], [34, 1], [35, 0], [0, 36], [1, 35], [2, 34], [3, 33], [4, 32], [5, 31], [6, 30], [7, 29], [8, 28], [9, 27], [10, 26], [11, 25], [12, 24], [13, 23], [14, 22], [15, 21], [16, 20], [17, 19], [18, 18], [19, 17], [20, 16], [21, 15], [22, 14], [23, 13], [24, 12], [25, 11], [26, 10], [27, 9], [28, 8], [29, 7], [30, 6], [31, 5], [32, 4], [33, 3], [34, 2], [35, 1], [36, 0], [0, 37], [1, 36], [2, 35], [3, 34], [4, 33], [5, 32], [6, 31], [7, 30], [8, 29], [9, 28], [10, 27], [11, 26], [12, 25], [13, 24], [14, 23], [15, 22], [16, 21], [17, 20], [18, 19], [19, 18], [20, 17], [21, 16], [22, 15], [23, 14], [24, 13], [25, 12], [26, 11], [27, 10], [28, 9], [29, 8], [30, 7], [31, 6], [32, 5], [33, 4], [34, 3], [35, 2], [36, 1], [37, 0], [0, 38], [1, 37], [2, 36], [3, 35], [4, 34], [5, 33], [6, 32], [7, 31], [8, 30], [9, 29], [10, 28], [11, 27], [12, 26], [13, 25], [14, 24], [15, 23], [16, 22], [17, 21], [18, 20], [19, 19], [20, 18], [21, 17], [22, 16], [23, 15], [24, 14], [25, 13], [26, 12], [27, 11], [28, 10], [29, 9], [30, 8], [31, 7], [32, 6], [33, 5], [34, 4], [35, 3], [36, 2], [37, 1], [38, 0], [0, 39], [1, 38], [2, 37], [3, 36], [4, 35], [5, 34], [6, 33], [7, 32], [8, 31], [9, 30], [10, 29], [11, 28], [12, 27], [13, 26], [14, 25], [15, 24], [16, 23], [17, 22], [18, 21], [19, 20], [20, 19], [21, 18], [22, 17], [23, 16], [24, 15], [25, 14], [26, 13], [27, 12], [28, 11], [29, 10], [30, 9], [31, 8], [32, 7], [33, 6], [34, 5], [35, 4], [36, 3], [37, 2], [38, 1], [39, 0], [1, 39], [2, 38], [3, 37], [4, 36], [5, 35], [6, 34], [7, 33], [8, 32], [9, 31], [10, 30], [11, 29], [12, 28], [13, 27], [14, 26], [15, 25], [16, 24], [17, 23], [18, 22], [19, 21], [20, 20], [21, 19], [22, 18], [23, 17], [24, 16], [25, 15], [26, 14], [27, 13], [28, 12], [29, 11], [30, 10], [31, 9], [32, 8], [33, 7], [34, 6], [35, 5], [36, 4], [37, 3], [38, 2], [39, 1], [2, 39], [3, 38], [4, 37], [5, 36], [6, 35], [7, 34], [8, 33], [9, 32], [10, 31], [11, 30], [12, 29], [13, 28], [14, 27], [15, 26], [16, 25], [17, 24], [18, 23], [19, 22], [20, 21], [21, 20], [22, 19], [23, 18], [24, 17], [25, 16], [26, 15], [27, 14], [28, 13], [29, 12], [30, 11], [31, 10], [32, 9], [33, 8], [34, 7], [35, 6], [36, 5], [37, 4], [38, 3], [39, 2], [3, 39], [4, 38], [5, 37], [6, 36], [7, 35], [8, 34], [9, 33], [10, 32], [11, 31], [12, 30], [13, 29], [14, 28], [15, 27], [16, 26], [17, 25], [18, 24], [19, 23], [20, 22], [21, 21], [22, 20], [23, 19], [24, 18], [25, 17], [26, 16], [27, 15], [28, 14], [29, 13], [30, 12], [31, 11], [32, 10], [33, 9], [34, 8], [35, 7], [36, 6], [37, 5], [38, 4], [39, 3], [4, 39], [5, 38], [6, 37], [7, 36], [8, 35], [9, 34], [10, 33], [11, 32], [12, 31], [13, 30], [14, 29], [15, 28], [16, 27], [17, 26], [18, 25], [19, 24], [20, 23], [21, 22], [22, 21], [23, 20], [24, 19], [25, 18], [26, 17], [27, 16], [28, 15], [29, 14], [30, 13], [31, 12], [32, 11], [33, 10], [34, 9], [35, 8], [36, 7], [37, 6], [38, 5], [39, 4], [5, 39], [6, 38], [7, 37], [8, 36], [9, 35], [10, 34], [11, 33], [12, 32], [13, 31], [14, 30], [15, 29], [16, 28], [17, 27], [18, 26], [19, 25], [20, 24], [21, 23], [22, 22], [23, 21], [24, 20], [25, 19], [26, 18], [27, 17], [28, 16], [29, 15], [30, 14], [31, 13], [32, 12], [33, 11], [34, 10], [35, 9], [36, 8], [37, 7], [38, 6], [39, 5], [6, 39], [7, 38], [8, 37], [9, 36], [10, 35], [11, 34], [12, 33], [13, 32], [14, 31], [15, 30], [16, 29], [17, 28], [18, 27], [19, 26], [20, 25], [21, 24], [22, 23], [23, 22], [24, 21], [25, 20], [26, 19], [27, 18], [28, 17], [29, 16], [30, 15], [31, 14], [32, 13], [33, 12], [34, 11], [35, 10], [36, 9], [37, 8], [38, 7], [39, 6], [7, 39], [8, 38], [9, 37], [10, 36], [11, 35], [12, 34], [13, 33], [14, 32], [15, 31], [16, 30], [17, 29], [18, 28], [19, 27], [20, 26], [21, 25], [22, 24], [23, 23], [24, 22], [25, 21], [26, 20], [27, 19], [28, 18], [29, 17], [30, 16], [31, 15], [32, 14], [33, 13], [34, 12], [35, 11], [36, 10], [37, 9], [38, 8], [39, 7], [8, 39], [9, 38], [10, 37], [11, 36], [12, 35], [13, 34], [14, 33], [15, 32], [16, 31], [17, 30], [18, 29], [19, 28], [20, 27], [21, 26], [22, 25], [23, 24], [24, 23], [25, 22], [26, 21], [27, 20], [28, 19], [29, 18], [30, 17], [31, 16], [32, 15], [33, 14], [34, 13], [35, 12], [36, 11], [37, 10], [38, 9], [39, 8], [9, 39], [10, 38], [11, 37], [12, 36], [13, 35], [14, 34], [15, 33], [16, 32], [17, 31], [18, 30], [19, 29], [20, 28], [21, 27], [22, 26], [23, 25], [24, 24], [25, 23], [26, 22], [27, 21], [28, 20], [29, 19], [30, 18], [31, 17], [32, 16], [33, 15], [34, 14], [35, 13], [36, 12], [37, 11], [38, 10], [39, 9], [10, 39], [11, 38], [12, 37], [13, 36], [14, 35], [15, 34], [16, 33], [17, 32], [18, 31], [19, 30], [20, 29], [21, 28], [22, 27], [23, 26], [24, 25], [25, 24], [26, 23], [27, 22], [28, 21], [29, 20], [30, 19], [31, 18], [32, 17], [33, 16], [34, 15], [35, 14], [36, 13], [37, 12], [38, 11], [39, 10], [11, 39], [12, 38], [13, 37], [14, 36], [15, 35], [16, 34], [17, 33], [18, 32], [19, 31], [20, 30], [21, 29], [22, 28], [23, 27], [24, 26], [25, 25], [26, 24], [27, 23], [28, 22], [29, 21], [30, 20], [31, 19], [32, 18], [33, 17], [34, 16], [35, 15], [36, 14], [37, 13], [38, 12], [39, 11], [12, 39], [13, 38], [14, 37], [15, 36], [16, 35], [17, 34], [18, 33], [19, 32], [20, 31], [21, 30], [22, 29], [23, 28], [24, 27], [25, 26], [26, 25], [27, 24], [28, 23], [29, 22], [30, 21], [31, 20], [32, 19], [33, 18], [34, 17], [35, 16], [36, 15], [37, 14], [38, 13], [39, 12], [13, 39], [14, 38], [15, 37], [16, 36], [17, 35], [18, 34], [19, 33], [20, 32], [21, 31], [22, 30], [23, 29], [24, 28], [25, 27], [26, 26], [27, 25], [28, 24], [29, 23], [30, 22], [31, 21], [32, 20], [33, 19], [34, 18], [35, 17], [36, 16], [37, 15], [38, 14], [39, 13], [14, 39], [15, 38], [16, 37], [17, 36], [18, 35], [19, 34], [20, 33], [21, 32], [22, 31], [23, 30], [24, 29], [25, 28], [26, 27], [27, 26], [28, 25], [29, 24], [30, 23], [31, 22], [32, 21], [33, 20], [34, 19], [35, 18], [36, 17], [37, 16], [38, 15], [39, 14], [15, 39], [16, 38], [17, 37], [18, 36], [19, 35], [20, 34], [21, 33], [22, 32], [23, 31], [24, 30], [25, 29], [26, 28], [27, 27], [28, 26], [29, 25], [30, 24], [31, 23], [32, 22], [33, 21], [34, 20], [35, 19], [36, 18], [37, 17], [38, 16], [39, 15], [16, 39], [17, 38], [18, 37], [19, 36], [20, 35], [21, 34], [22, 33], [23, 32], [24, 31], [25, 30], [26, 29], [27, 28], [28, 27], [29, 26], [30, 25], [31, 24], [32, 23], [33, 22], [34, 21], [35, 20], [36, 19], [37, 18], [38, 17], [39, 16], [17, 39], [18, 38], [19, 37], [20, 36], [21, 35], [22, 34], [23, 33], [24, 32], [25, 31], [26, 30], [27, 29], [28, 28], [29, 27], [30, 26], [31, 25], [32, 24], [33, 23], [34, 22], [35, 21], [36, 20], [37, 19], [38, 18], [39, 17], [18, 39], [19, 38], [20, 37], [21, 36], [22, 35], [23, 34], [24, 33], [25, 32], [26, 31], [27, 30], [28, 29], [29, 28], [30, 27], [31, 26], [32, 25], [33, 24], [34, 23], [35, 22], [36, 21], [37, 20], [38, 19], [39, 18], [19, 39], [20, 38], [21, 37], [22, 36], [23, 35], [24, 34], [25, 33], [26, 32], [27, 31], [28, 30], [29, 29], [30, 28], [31, 27], [32, 26], [33, 25], [34, 24], [35, 23], [36, 22], [37, 21], [38, 20], [39, 19], [20, 39], [21, 38], [22, 37], [23, 36], [24, 35], [25, 34], [26, 33], [27, 32], [28, 31], [29, 30], [30, 29], [31, 28], [32, 27], [33, 26], [34, 25], [35, 24], [36, 23], [37, 22], [38, 21], [39, 20], [21, 39], [22, 38], [23, 37], [24, 36], [25, 35], [26, 34], [27, 33], [28, 32], [29, 31], [30, 30], [31, 29], [32, 28], [33, 27], [34, 26], [35, 25], [36, 24], [37, 23], [38, 22], [39, 21], [22, 39], [23, 38], [24, 37], [25, 36], [26, 35], [27, 34], [28, 33], [29, 32], [30, 31], [31, 30], [32, 29], [33, 28], [34, 27], [35, 26], [36, 25], [37, 24], [38, 23], [39, 22], [23, 39], [24, 38], [25, 37], [26, 36], [27, 35], [28, 34], [29, 33], [30, 32], [31, 31], [32, 30], [33, 29], [34, 28], [35, 27], [36, 26], [37, 25], [38, 24], [39, 23], [24, 39], [25, 38], [26, 37], [27, 36], [28, 35], [29, 34], [30, 33], [31, 32], [32, 31], [33, 30], [34, 29], [35, 28], [36, 27], [37, 26], [38, 25], [39, 24], [25, 39], [26, 38], [27, 37], [28, 36], [29, 35], [30, 34], [31, 33], [32, 32], [33, 31], [34, 30], [35, 29], [36, 28], [37, 27], [38, 26], [39, 25], [26, 39], [27, 38], [28, 37], [29, 36], [30, 35], [31, 34], [32, 33], [33, 32], [34, 31], [35, 30], [36, 29], [37, 28], [38, 27], [39, 26], [27, 39], [28, 38], [29, 37], [30, 36], [31, 35], [32, 34], [33, 33], [34, 32], [35, 31], [36, 30], [37, 29], [38, 28], [39, 27], [28, 39], [29, 38], [30, 37], [31, 36], [32, 35], [33, 34], [34, 33], [35, 32], [36, 31], [37, 30], [38, 29], [39, 28], [29, 39], [30, 38], [31, 37], [32, 36], [33, 35], [34, 34], [35, 33], [36, 32], [37, 31], [38, 30], [39, 29], [30, 39], [31, 38], [32, 37], [33, 36], [34, 35], [35, 34], [36, 33], [37, 32], [38, 31], [39, 30], [31, 39], [32, 38], [33, 37], [34, 36], [35, 35], [36, 34], [37, 33], [38, 32], [39, 31], [32, 39], [33, 38], [34, 37], [35, 36], [36, 35], [37, 34], [38, 33], [39, 32], [33, 39], [34, 38], [35, 37], [36, 36], [37, 35], [38, 34], [39, 33], [34, 39], [35, 38], [36, 37], [37, 36], [38, 35], [39, 34], [35, 39], [36, 38], [37, 37], [38, 36], [39, 35], [36, 39], [37, 38], [38, 37], [39, 36], [37, 39], [38, 38], [39, 37], [38, 39], [39, 38], [39, 39]]"
      },
      {
        "input": "rows = 8, cols = 3, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [1, 2], [2, 1], [3, 0], [2, 2], [3, 1], [4, 0], [3, 2], [4, 1], [5, 0], [4, 2], [5, 1], [6, 0], [5, 2], [6, 1], [7, 0], [6, 2], [7, 1], [7, 2]]"
      },
      {
        "input": "rows = 7, cols = 7, rCenter = 0, cCenter = 6",
        "output": "[[0, 6], [1, 6], [0, 5], [2, 6], [1, 5], [0, 4], [3, 6], [2, 5], [1, 4], [0, 3], [4, 6], [3, 5], [2, 4], [1, 3], [0, 2], [5, 6], [4, 5], [3, 4], [2, 3], [1, 2], [0, 1], [6, 6], [5, 5], [4, 4], [3, 3], [2, 2], [1, 1], [0, 0], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1], [1, 0], [6, 4], [5, 3], [4, 2], [3, 1], [2, 0], [6, 3], [5, 2], [4, 1], [3, 0], [6, 2], [5, 1], [4, 0], [6, 1], [5, 0], [6, 0]]"
      },
      {
        "input": "rows = 1, cols = 100, rCenter = 0, cCenter = 50",
        "output": "[[0, 50], [0, 51], [0, 49], [0, 52], [0, 48], [0, 53], [0, 47], [0, 54], [0, 46], [0, 55], [0, 45], [0, 56], [0, 44], [0, 57], [0, 43], [0, 58], [0, 42], [0, 59], [0, 41], [0, 60], [0, 40], [0, 61], [0, 39], [0, 62], [0, 38], [0, 63], [0, 37], [0, 64], [0, 36], [0, 65], [0, 35], [0, 66], [0, 34], [0, 67], [0, 33], [0, 68], [0, 32], [0, 69], [0, 31], [0, 70], [0, 30], [0, 71], [0, 29], [0, 72], [0, 28], [0, 73], [0, 27], [0, 74], [0, 26], [0, 75], [0, 25], [0, 76], [0, 24], [0, 77], [0, 23], [0, 78], [0, 22], [0, 79], [0, 21], [0, 80], [0, 20], [0, 81], [0, 19], [0, 82], [0, 18], [0, 83], [0, 17], [0, 84], [0, 16], [0, 85], [0, 15], [0, 86], [0, 14], [0, 87], [0, 13], [0, 88], [0, 12], [0, 89], [0, 11], [0, 90], [0, 10], [0, 91], [0, 9], [0, 92], [0, 8], [0, 93], [0, 7], [0, 94], [0, 6], [0, 95], [0, 5], [0, 96], [0, 4], [0, 97], [0, 3], [0, 98], [0, 2], [0, 99], [0, 1], [0, 0]]"
      },
      {
        "input": "rows = 5, cols = 5, rCenter = 4, cCenter = 4",
        "output": "[[4, 4], [3, 4], [4, 3], [2, 4], [3, 3], [4, 2], [1, 4], [2, 3], [3, 2], [4, 1], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 2], [1, 1], [2, 0], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 9, cols = 4, rCenter = 4, cCenter = 3",
        "output": "[[4, 3], [3, 3], [5, 3], [4, 2], [2, 3], [3, 2], [6, 3], [5, 2], [4, 1], [1, 3], [2, 2], [3, 1], [7, 3], [6, 2], [5, 1], [4, 0], [0, 3], [1, 2], [2, 1], [3, 0], [8, 3], [7, 2], [6, 1], [5, 0], [0, 2], [1, 1], [2, 0], [8, 2], [7, 1], [6, 0], [0, 1], [1, 0], [8, 1], [7, 0], [0, 0], [8, 0]]"
      },
      {
        "input": "rows = 50, cols = 50, rCenter = 25, cCenter = 25",
        "output": "[[25, 25], [24, 25], [25, 26], [26, 25], [25, 24], [23, 25], [24, 26], [24, 24], [25, 27], [26, 26], [27, 25], [26, 24], [25, 23], [22, 25], [23, 26], [23, 24], [24, 27], [24, 23], [25, 28], [26, 27], [27, 26], [28, 25], [27, 24], [26, 23], [25, 22], [21, 25], [22, 26], [22, 24], [23, 27], [23, 23], [24, 28], [24, 22], [25, 29], [26, 28], [27, 27], [28, 26], [29, 25], [28, 24], [27, 23], [26, 22], [25, 21], [20, 25], [21, 26], [21, 24], [22, 27], [22, 23], [23, 28], [23, 22], [24, 29], [24, 21], [25, 30], [26, 29], [27, 28], [28, 27], [29, 26], [30, 25], [29, 24], [28, 23], [27, 22], [26, 21], [25, 20], [19, 25], [20, 26], [20, 24], [21, 27], [21, 23], [22, 28], [22, 22], [23, 29], [23, 21], [24, 30], [24, 20], [25, 31], [26, 30], [27, 29], [28, 28], [29, 27], [30, 26], [31, 25], [30, 24], [29, 23], [28, 22], [27, 21], [26, 20], [25, 19], [18, 25], [19, 26], [19, 24], [20, 27], [20, 23], [21, 28], [21, 22], [22, 29], [22, 21], [23, 30], [23, 20], [24, 31], [24, 19], [25, 32], [26, 31], [27, 30], [28, 29], [29, 28], [30, 27], [31, 26], [32, 25], [31, 24], [30, 23], [29, 22], [28, 21], [27, 20], [26, 19], [25, 18], [17, 25], [18, 26], [18, 24], [19, 27], [19, 23], [20, 28], [20, 22], [21, 29], [21, 21], [22, 30], [22, 20], [23, 31], [23, 19], [24, 32], [24, 18], [25, 33], [26, 32], [27, 31], [28, 30], [29, 29], [30, 28], [31, 27], [32, 26], [33, 25], [32, 24], [31, 23], [30, 22], [29, 21], [28, 20], [27, 19], [26, 18], [25, 17], [16, 25], [17, 26], [17, 24], [18, 27], [18, 23], [19, 28], [19, 22], [20, 29], [20, 21], [21, 30], [21, 20], [22, 31], [22, 19], [23, 32], [23, 18], [24, 33], [24, 17], [25, 34], [26, 33], [27, 32], [28, 31], [29, 30], [30, 29], [31, 28], [32, 27], [33, 26], [34, 25], [33, 24], [32, 23], [31, 22], [30, 21], [29, 20], [28, 19], [27, 18], [26, 17], [25, 16], [15, 25], [16, 26], [16, 24], [17, 27], [17, 23], [18, 28], [18, 22], [19, 29], [19, 21], [20, 30], [20, 20], [21, 31], [21, 19], [22, 32], [22, 18], [23, 33], [23, 17], [24, 34], [24, 16], [25, 35], [26, 34], [27, 33], [28, 32], [29, 31], [30, 30], [31, 29], [32, 28], [33, 27], [34, 26], [35, 25], [34, 24], [33, 23], [32, 22], [31, 21], [30, 20], [29, 19], [28, 18], [27, 17], [26, 16], [25, 15], [14, 25], [15, 26], [15, 24], [16, 27], [16, 23], [17, 28], [17, 22], [18, 29], [18, 21], [19, 30], [19, 20], [20, 31], [20, 19], [21, 32], [21, 18], [22, 33], [22, 17], [23, 34], [23, 16], [24, 35], [24, 15], [25, 36], [26, 35], [27, 34], [28, 33], [29, 32], [30, 31], [31, 30], [32, 29], [33, 28], [34, 27], [35, 26], [36, 25], [35, 24], [34, 23], [33, 22], [32, 21], [31, 20], [30, 19], [29, 18], [28, 17], [27, 16], [26, 15], [25, 14], [13, 25], [14, 26], [14, 24], [15, 27], [15, 23], [16, 28], [16, 22], [17, 29], [17, 21], [18, 30], [18, 20], [19, 31], [19, 19], [20, 32], [20, 18], [21, 33], [21, 17], [22, 34], [22, 16], [23, 35], [23, 15], [24, 36], [24, 14], [25, 37], [26, 36], [27, 35], [28, 34], [29, 33], [30, 32], [31, 31], [32, 30], [33, 29], [34, 28], [35, 27], [36, 26], [37, 25], [36, 24], [35, 23], [34, 22], [33, 21], [32, 20], [31, 19], [30, 18], [29, 17], [28, 16], [27, 15], [26, 14], [25, 13], [12, 25], [13, 26], [13, 24], [14, 27], [14, 23], [15, 28], [15, 22], [16, 29], [16, 21], [17, 30], [17, 20], [18, 31], [18, 19], [19, 32], [19, 18], [20, 33], [20, 17], [21, 34], [21, 16], [22, 35], [22, 15], [23, 36], [23, 14], [24, 37], [24, 13], [25, 38], [26, 37], [27, 36], [28, 35], [29, 34], [30, 33], [31, 32], [32, 31], [33, 30], [34, 29], [35, 28], [36, 27], [37, 26], [38, 25], [37, 24], [36, 23], [35, 22], [34, 21], [33, 20], [32, 19], [31, 18], [30, 17], [29, 16], [28, 15], [27, 14], [26, 13], [25, 12], [11, 25], [12, 26], [12, 24], [13, 27], [13, 23], [14, 28], [14, 22], [15, 29], [15, 21], [16, 30], [16, 20], [17, 31], [17, 19], [18, 32], [18, 18], [19, 33], [19, 17], [20, 34], [20, 16], [21, 35], [21, 15], [22, 36], [22, 14], [23, 37], [23, 13], [24, 38], [24, 12], [25, 39], [26, 38], [27, 37], [28, 36], [29, 35], [30, 34], [31, 33], [32, 32], [33, 31], [34, 30], [35, 29], [36, 28], [37, 27], [38, 26], [39, 25], [38, 24], [37, 23], [36, 22], [35, 21], [34, 20], [33, 19], [32, 18], [31, 17], [30, 16], [29, 15], [28, 14], [27, 13], [26, 12], [25, 11], [10, 25], [11, 26], [11, 24], [12, 27], [12, 23], [13, 28], [13, 22], [14, 29], [14, 21], [15, 30], [15, 20], [16, 31], [16, 19], [17, 32], [17, 18], [18, 33], [18, 17], [19, 34], [19, 16], [20, 35], [20, 15], [21, 36], [21, 14], [22, 37], [22, 13], [23, 38], [23, 12], [24, 39], [24, 11], [25, 40], [26, 39], [27, 38], [28, 37], [29, 36], [30, 35], [31, 34], [32, 33], [33, 32], [34, 31], [35, 30], [36, 29], [37, 28], [38, 27], [39, 26], [40, 25], [39, 24], [38, 23], [37, 22], [36, 21], [35, 20], [34, 19], [33, 18], [32, 17], [31, 16], [30, 15], [29, 14], [28, 13], [27, 12], [26, 11], [25, 10], [9, 25], [10, 26], [10, 24], [11, 27], [11, 23], [12, 28], [12, 22], [13, 29], [13, 21], [14, 30], [14, 20], [15, 31], [15, 19], [16, 32], [16, 18], [17, 33], [17, 17], [18, 34], [18, 16], [19, 35], [19, 15], [20, 36], [20, 14], [21, 37], [21, 13], [22, 38], [22, 12], [23, 39], [23, 11], [24, 40], [24, 10], [25, 41], [26, 40], [27, 39], [28, 38], [29, 37], [30, 36], [31, 35], [32, 34], [33, 33], [34, 32], [35, 31], [36, 30], [37, 29], [38, 28], [39, 27], [40, 26], [41, 25], [40, 24], [39, 23], [38, 22], [37, 21], [36, 20], [35, 19], [34, 18], [33, 17], [32, 16], [31, 15], [30, 14], [29, 13], [28, 12], [27, 11], [26, 10], [25, 9], [8, 25], [9, 26], [9, 24], [10, 27], [10, 23], [11, 28], [11, 22], [12, 29], [12, 21], [13, 30], [13, 20], [14, 31], [14, 19], [15, 32], [15, 18], [16, 33], [16, 17], [17, 34], [17, 16], [18, 35], [18, 15], [19, 36], [19, 14], [20, 37], [20, 13], [21, 38], [21, 12], [22, 39], [22, 11], [23, 40], [23, 10], [24, 41], [24, 9], [25, 42], [26, 41], [27, 40], [28, 39], [29, 38], [30, 37], [31, 36], [32, 35], [33, 34], [34, 33], [35, 32], [36, 31], [37, 30], [38, 29], [39, 28], [40, 27], [41, 26], [42, 25], [41, 24], [40, 23], [39, 22], [38, 21], [37, 20], [36, 19], [35, 18], [34, 17], [33, 16], [32, 15], [31, 14], [30, 13], [29, 12], [28, 11], [27, 10], [26, 9], [25, 8], [7, 25], [8, 26], [8, 24], [9, 27], [9, 23], [10, 28], [10, 22], [11, 29], [11, 21], [12, 30], [12, 20], [13, 31], [13, 19], [14, 32], [14, 18], [15, 33], [15, 17], [16, 34], [16, 16], [17, 35], [17, 15], [18, 36], [18, 14], [19, 37], [19, 13], [20, 38], [20, 12], [21, 39], [21, 11], [22, 40], [22, 10], [23, 41], [23, 9], [24, 42], [24, 8], [25, 43], [26, 42], [27, 41], [28, 40], [29, 39], [30, 38], [31, 37], [32, 36], [33, 35], [34, 34], [35, 33], [36, 32], [37, 31], [38, 30], [39, 29], [40, 28], [41, 27], [42, 26], [43, 25], [42, 24], [41, 23], [40, 22], [39, 21], [38, 20], [37, 19], [36, 18], [35, 17], [34, 16], [33, 15], [32, 14], [31, 13], [30, 12], [29, 11], [28, 10], [27, 9], [26, 8], [25, 7], [6, 25], [7, 26], [7, 24], [8, 27], [8, 23], [9, 28], [9, 22], [10, 29], [10, 21], [11, 30], [11, 20], [12, 31], [12, 19], [13, 32], [13, 18], [14, 33], [14, 17], [15, 34], [15, 16], [16, 35], [16, 15], [17, 36], [17, 14], [18, 37], [18, 13], [19, 38], [19, 12], [20, 39], [20, 11], [21, 40], [21, 10], [22, 41], [22, 9], [23, 42], [23, 8], [24, 43], [24, 7], [25, 44], [26, 43], [27, 42], [28, 41], [29, 40], [30, 39], [31, 38], [32, 37], [33, 36], [34, 35], [35, 34], [36, 33], [37, 32], [38, 31], [39, 30], [40, 29], [41, 28], [42, 27], [43, 26], [44, 25], [43, 24], [42, 23], [41, 22], [40, 21], [39, 20], [38, 19], [37, 18], [36, 17], [35, 16], [34, 15], [33, 14], [32, 13], [31, 12], [30, 11], [29, 10], [28, 9], [27, 8], [26, 7], [25, 6], [5, 25], [6, 26], [6, 24], [7, 27], [7, 23], [8, 28], [8, 22], [9, 29], [9, 21], [10, 30], [10, 20], [11, 31], [11, 19], [12, 32], [12, 18], [13, 33], [13, 17], [14, 34], [14, 16], [15, 35], [15, 15], [16, 36], [16, 14], [17, 37], [17, 13], [18, 38], [18, 12], [19, 39], [19, 11], [20, 40], [20, 10], [21, 41], [21, 9], [22, 42], [22, 8], [23, 43], [23, 7], [24, 44], [24, 6], [25, 45], [26, 44], [27, 43], [28, 42], [29, 41], [30, 40], [31, 39], [32, 38], [33, 37], [34, 36], [35, 35], [36, 34], [37, 33], [38, 32], [39, 31], [40, 30], [41, 29], [42, 28], [43, 27], [44, 26], [45, 25], [44, 24], [43, 23], [42, 22], [41, 21], [40, 20], [39, 19], [38, 18], [37, 17], [36, 16], [35, 15], [34, 14], [33, 13], [32, 12], [31, 11], [30, 10], [29, 9], [28, 8], [27, 7], [26, 6], [25, 5], [4, 25], [5, 26], [5, 24], [6, 27], [6, 23], [7, 28], [7, 22], [8, 29], [8, 21], [9, 30], [9, 20], [10, 31], [10, 19], [11, 32], [11, 18], [12, 33], [12, 17], [13, 34], [13, 16], [14, 35], [14, 15], [15, 36], [15, 14], [16, 37], [16, 13], [17, 38], [17, 12], [18, 39], [18, 11], [19, 40], [19, 10], [20, 41], [20, 9], [21, 42], [21, 8], [22, 43], [22, 7], [23, 44], [23, 6], [24, 45], [24, 5], [25, 46], [26, 45], [27, 44], [28, 43], [29, 42], [30, 41], [31, 40], [32, 39], [33, 38], [34, 37], [35, 36], [36, 35], [37, 34], [38, 33], [39, 32], [40, 31], [41, 30], [42, 29], [43, 28], [44, 27], [45, 26], [46, 25], [45, 24], [44, 23], [43, 22], [42, 21], [41, 20], [40, 19], [39, 18], [38, 17], [37, 16], [36, 15], [35, 14], [34, 13], [33, 12], [32, 11], [31, 10], [30, 9], [29, 8], [28, 7], [27, 6], [26, 5], [25, 4], [3, 25], [4, 26], [4, 24], [5, 27], [5, 23], [6, 28], [6, 22], [7, 29], [7, 21], [8, 30], [8, 20], [9, 31], [9, 19], [10, 32], [10, 18], [11, 33], [11, 17], [12, 34], [12, 16], [13, 35], [13, 15], [14, 36], [14, 14], [15, 37], [15, 13], [16, 38], [16, 12], [17, 39], [17, 11], [18, 40], [18, 10], [19, 41], [19, 9], [20, 42], [20, 8], [21, 43], [21, 7], [22, 44], [22, 6], [23, 45], [23, 5], [24, 46], [24, 4], [25, 47], [26, 46], [27, 45], [28, 44], [29, 43], [30, 42], [31, 41], [32, 40], [33, 39], [34, 38], [35, 37], [36, 36], [37, 35], [38, 34], [39, 33], [40, 32], [41, 31], [42, 30], [43, 29], [44, 28], [45, 27], [46, 26], [47, 25], [46, 24], [45, 23], [44, 22], [43, 21], [42, 20], [41, 19], [40, 18], [39, 17], [38, 16], [37, 15], [36, 14], [35, 13], [34, 12], [33, 11], [32, 10], [31, 9], [30, 8], [29, 7], [28, 6], [27, 5], [26, 4], [25, 3], [2, 25], [3, 26], [3, 24], [4, 27], [4, 23], [5, 28], [5, 22], [6, 29], [6, 21], [7, 30], [7, 20], [8, 31], [8, 19], [9, 32], [9, 18], [10, 33], [10, 17], [11, 34], [11, 16], [12, 35], [12, 15], [13, 36], [13, 14], [14, 37], [14, 13], [15, 38], [15, 12], [16, 39], [16, 11], [17, 40], [17, 10], [18, 41], [18, 9], [19, 42], [19, 8], [20, 43], [20, 7], [21, 44], [21, 6], [22, 45], [22, 5], [23, 46], [23, 4], [24, 47], [24, 3], [25, 48], [26, 47], [27, 46], [28, 45], [29, 44], [30, 43], [31, 42], [32, 41], [33, 40], [34, 39], [35, 38], [36, 37], [37, 36], [38, 35], [39, 34], [40, 33], [41, 32], [42, 31], [43, 30], [44, 29], [45, 28], [46, 27], [47, 26], [48, 25], [47, 24], [46, 23], [45, 22], [44, 21], [43, 20], [42, 19], [41, 18], [40, 17], [39, 16], [38, 15], [37, 14], [36, 13], [35, 12], [34, 11], [33, 10], [32, 9], [31, 8], [30, 7], [29, 6], [28, 5], [27, 4], [26, 3], [25, 2], [1, 25], [2, 26], [2, 24], [3, 27], [3, 23], [4, 28], [4, 22], [5, 29], [5, 21], [6, 30], [6, 20], [7, 31], [7, 19], [8, 32], [8, 18], [9, 33], [9, 17], [10, 34], [10, 16], [11, 35], [11, 15], [12, 36], [12, 14], [13, 37], [13, 13], [14, 38], [14, 12], [15, 39], [15, 11], [16, 40], [16, 10], [17, 41], [17, 9], [18, 42], [18, 8], [19, 43], [19, 7], [20, 44], [20, 6], [21, 45], [21, 5], [22, 46], [22, 4], [23, 47], [23, 3], [24, 48], [24, 2], [25, 49], [26, 48], [27, 47], [28, 46], [29, 45], [30, 44], [31, 43], [32, 42], [33, 41], [34, 40], [35, 39], [36, 38], [37, 37], [38, 36], [39, 35], [40, 34], [41, 33], [42, 32], [43, 31], [44, 30], [45, 29], [46, 28], [47, 27], [48, 26], [49, 25], [48, 24], [47, 23], [46, 22], [45, 21], [44, 20], [43, 19], [42, 18], [41, 17], [40, 16], [39, 15], [38, 14], [37, 13], [36, 12], [35, 11], [34, 10], [33, 9], [32, 8], [31, 7], [30, 6], [29, 5], [28, 4], [27, 3], [26, 2], [25, 1], [0, 25], [1, 26], [1, 24], [2, 27], [2, 23], [3, 28], [3, 22], [4, 29], [4, 21], [5, 30], [5, 20], [6, 31], [6, 19], [7, 32], [7, 18], [8, 33], [8, 17], [9, 34], [9, 16], [10, 35], [10, 15], [11, 36], [11, 14], [12, 37], [12, 13], [13, 38], [13, 12], [14, 39], [14, 11], [15, 40], [15, 10], [16, 41], [16, 9], [17, 42], [17, 8], [18, 43], [18, 7], [19, 44], [19, 6], [20, 45], [20, 5], [21, 46], [21, 4], [22, 47], [22, 3], [23, 48], [23, 2], [24, 49], [24, 1], [26, 49], [27, 48], [28, 47], [29, 46], [30, 45], [31, 44], [32, 43], [33, 42], [34, 41], [35, 40], [36, 39], [37, 38], [38, 37], [39, 36], [40, 35], [41, 34], [42, 33], [43, 32], [44, 31], [45, 30], [46, 29], [47, 28], [48, 27], [49, 26], [49, 24], [48, 23], [47, 22], [46, 21], [45, 20], [44, 19], [43, 18], [42, 17], [41, 16], [40, 15], [39, 14], [38, 13], [37, 12], [36, 11], [35, 10], [34, 9], [33, 8], [32, 7], [31, 6], [30, 5], [29, 4], [28, 3], [27, 2], [26, 1], [25, 0], [0, 26], [0, 24], [1, 27], [1, 23], [2, 28], [2, 22], [3, 29], [3, 21], [4, 30], [4, 20], [5, 31], [5, 19], [6, 32], [6, 18], [7, 33], [7, 17], [8, 34], [8, 16], [9, 35], [9, 15], [10, 36], [10, 14], [11, 37], [11, 13], [12, 38], [12, 12], [13, 39], [13, 11], [14, 40], [14, 10], [15, 41], [15, 9], [16, 42], [16, 8], [17, 43], [17, 7], [18, 44], [18, 6], [19, 45], [19, 5], [20, 46], [20, 4], [21, 47], [21, 3], [22, 48], [22, 2], [23, 49], [23, 1], [24, 0], [27, 49], [28, 48], [29, 47], [30, 46], [31, 45], [32, 44], [33, 43], [34, 42], [35, 41], [36, 40], [37, 39], [38, 38], [39, 37], [40, 36], [41, 35], [42, 34], [43, 33], [44, 32], [45, 31], [46, 30], [47, 29], [48, 28], [49, 27], [49, 23], [48, 22], [47, 21], [46, 20], [45, 19], [44, 18], [43, 17], [42, 16], [41, 15], [40, 14], [39, 13], [38, 12], [37, 11], [36, 10], [35, 9], [34, 8], [33, 7], [32, 6], [31, 5], [30, 4], [29, 3], [28, 2], [27, 1], [26, 0], [0, 27], [0, 23], [1, 28], [1, 22], [2, 29], [2, 21], [3, 30], [3, 20], [4, 31], [4, 19], [5, 32], [5, 18], [6, 33], [6, 17], [7, 34], [7, 16], [8, 35], [8, 15], [9, 36], [9, 14], [10, 37], [10, 13], [11, 38], [11, 12], [12, 39], [12, 11], [13, 40], [13, 10], [14, 41], [14, 9], [15, 42], [15, 8], [16, 43], [16, 7], [17, 44], [17, 6], [18, 45], [18, 5], [19, 46], [19, 4], [20, 47], [20, 3], [21, 48], [21, 2], [22, 49], [22, 1], [23, 0], [28, 49], [29, 48], [30, 47], [31, 46], [32, 45], [33, 44], [34, 43], [35, 42], [36, 41], [37, 40], [38, 39], [39, 38], [40, 37], [41, 36], [42, 35], [43, 34], [44, 33], [45, 32], [46, 31], [47, 30], [48, 29], [49, 28], [49, 22], [48, 21], [47, 20], [46, 19], [45, 18], [44, 17], [43, 16], [42, 15], [41, 14], [40, 13], [39, 12], [38, 11], [37, 10], [36, 9], [35, 8], [34, 7], [33, 6], [32, 5], [31, 4], [30, 3], [29, 2], [28, 1], [27, 0], [0, 28], [0, 22], [1, 29], [1, 21], [2, 30], [2, 20], [3, 31], [3, 19], [4, 32], [4, 18], [5, 33], [5, 17], [6, 34], [6, 16], [7, 35], [7, 15], [8, 36], [8, 14], [9, 37], [9, 13], [10, 38], [10, 12], [11, 39], [11, 11], [12, 40], [12, 10], [13, 41], [13, 9], [14, 42], [14, 8], [15, 43], [15, 7], [16, 44], [16, 6], [17, 45], [17, 5], [18, 46], [18, 4], [19, 47], [19, 3], [20, 48], [20, 2], [21, 49], [21, 1], [22, 0], [29, 49], [30, 48], [31, 47], [32, 46], [33, 45], [34, 44], [35, 43], [36, 42], [37, 41], [38, 40], [39, 39], [40, 38], [41, 37], [42, 36], [43, 35], [44, 34], [45, 33], [46, 32], [47, 31], [48, 30], [49, 29], [49, 21], [48, 20], [47, 19], [46, 18], [45, 17], [44, 16], [43, 15], [42, 14], [41, 13], [40, 12], [39, 11], [38, 10], [37, 9], [36, 8], [35, 7], [34, 6], [33, 5], [32, 4], [31, 3], [30, 2], [29, 1], [28, 0], [0, 29], [0, 21], [1, 30], [1, 20], [2, 31], [2, 19], [3, 32], [3, 18], [4, 33], [4, 17], [5, 34], [5, 16], [6, 35], [6, 15], [7, 36], [7, 14], [8, 37], [8, 13], [9, 38], [9, 12], [10, 39], [10, 11], [11, 40], [11, 10], [12, 41], [12, 9], [13, 42], [13, 8], [14, 43], [14, 7], [15, 44], [15, 6], [16, 45], [16, 5], [17, 46], [17, 4], [18, 47], [18, 3], [19, 48], [19, 2], [20, 49], [20, 1], [21, 0], [30, 49], [31, 48], [32, 47], [33, 46], [34, 45], [35, 44], [36, 43], [37, 42], [38, 41], [39, 40], [40, 39], [41, 38], [42, 37], [43, 36], [44, 35], [45, 34], [46, 33], [47, 32], [48, 31], [49, 30], [49, 20], [48, 19], [47, 18], [46, 17], [45, 16], [44, 15], [43, 14], [42, 13], [41, 12], [40, 11], [39, 10], [38, 9], [37, 8], [36, 7], [35, 6], [34, 5], [33, 4], [32, 3], [31, 2], [30, 1], [29, 0], [0, 30], [0, 20], [1, 31], [1, 19], [2, 32], [2, 18], [3, 33], [3, 17], [4, 34], [4, 16], [5, 35], [5, 15], [6, 36], [6, 14], [7, 37], [7, 13], [8, 38], [8, 12], [9, 39], [9, 11], [10, 40], [10, 10], [11, 41], [11, 9], [12, 42], [12, 8], [13, 43], [13, 7], [14, 44], [14, 6], [15, 45], [15, 5], [16, 46], [16, 4], [17, 47], [17, 3], [18, 48], [18, 2], [19, 49], [19, 1], [20, 0], [31, 49], [32, 48], [33, 47], [34, 46], [35, 45], [36, 44], [37, 43], [38, 42], [39, 41], [40, 40], [41, 39], [42, 38], [43, 37], [44, 36], [45, 35], [46, 34], [47, 33], [48, 32], [49, 31], [49, 19], [48, 18], [47, 17], [46, 16], [45, 15], [44, 14], [43, 13], [42, 12], [41, 11], [40, 10], [39, 9], [38, 8], [37, 7], [36, 6], [35, 5], [34, 4], [33, 3], [32, 2], [31, 1], [30, 0], [0, 31], [0, 19], [1, 32], [1, 18], [2, 33], [2, 17], [3, 34], [3, 16], [4, 35], [4, 15], [5, 36], [5, 14], [6, 37], [6, 13], [7, 38], [7, 12], [8, 39], [8, 11], [9, 40], [9, 10], [10, 41], [10, 9], [11, 42], [11, 8], [12, 43], [12, 7], [13, 44], [13, 6], [14, 45], [14, 5], [15, 46], [15, 4], [16, 47], [16, 3], [17, 48], [17, 2], [18, 49], [18, 1], [19, 0], [32, 49], [33, 48], [34, 47], [35, 46], [36, 45], [37, 44], [38, 43], [39, 42], [40, 41], [41, 40], [42, 39], [43, 38], [44, 37], [45, 36], [46, 35], [47, 34], [48, 33], [49, 32], [49, 18], [48, 17], [47, 16], [46, 15], [45, 14], [44, 13], [43, 12], [42, 11], [41, 10], [40, 9], [39, 8], [38, 7], [37, 6], [36, 5], [35, 4], [34, 3], [33, 2], [32, 1], [31, 0], [0, 32], [0, 18], [1, 33], [1, 17], [2, 34], [2, 16], [3, 35], [3, 15], [4, 36], [4, 14], [5, 37], [5, 13], [6, 38], [6, 12], [7, 39], [7, 11], [8, 40], [8, 10], [9, 41], [9, 9], [10, 42], [10, 8], [11, 43], [11, 7], [12, 44], [12, 6], [13, 45], [13, 5], [14, 46], [14, 4], [15, 47], [15, 3], [16, 48], [16, 2], [17, 49], [17, 1], [18, 0], [33, 49], [34, 48], [35, 47], [36, 46], [37, 45], [38, 44], [39, 43], [40, 42], [41, 41], [42, 40], [43, 39], [44, 38], [45, 37], [46, 36], [47, 35], [48, 34], [49, 33], [49, 17], [48, 16], [47, 15], [46, 14], [45, 13], [44, 12], [43, 11], [42, 10], [41, 9], [40, 8], [39, 7], [38, 6], [37, 5], [36, 4], [35, 3], [34, 2], [33, 1], [32, 0], [0, 33], [0, 17], [1, 34], [1, 16], [2, 35], [2, 15], [3, 36], [3, 14], [4, 37], [4, 13], [5, 38], [5, 12], [6, 39], [6, 11], [7, 40], [7, 10], [8, 41], [8, 9], [9, 42], [9, 8], [10, 43], [10, 7], [11, 44], [11, 6], [12, 45], [12, 5], [13, 46], [13, 4], [14, 47], [14, 3], [15, 48], [15, 2], [16, 49], [16, 1], [17, 0], [34, 49], [35, 48], [36, 47], [37, 46], [38, 45], [39, 44], [40, 43], [41, 42], [42, 41], [43, 40], [44, 39], [45, 38], [46, 37], [47, 36], [48, 35], [49, 34], [49, 16], [48, 15], [47, 14], [46, 13], [45, 12], [44, 11], [43, 10], [42, 9], [41, 8], [40, 7], [39, 6], [38, 5], [37, 4], [36, 3], [35, 2], [34, 1], [33, 0], [0, 34], [0, 16], [1, 35], [1, 15], [2, 36], [2, 14], [3, 37], [3, 13], [4, 38], [4, 12], [5, 39], [5, 11], [6, 40], [6, 10], [7, 41], [7, 9], [8, 42], [8, 8], [9, 43], [9, 7], [10, 44], [10, 6], [11, 45], [11, 5], [12, 46], [12, 4], [13, 47], [13, 3], [14, 48], [14, 2], [15, 49], [15, 1], [16, 0], [35, 49], [36, 48], [37, 47], [38, 46], [39, 45], [40, 44], [41, 43], [42, 42], [43, 41], [44, 40], [45, 39], [46, 38], [47, 37], [48, 36], [49, 35], [49, 15], [48, 14], [47, 13], [46, 12], [45, 11], [44, 10], [43, 9], [42, 8], [41, 7], [40, 6], [39, 5], [38, 4], [37, 3], [36, 2], [35, 1], [34, 0], [0, 35], [0, 15], [1, 36], [1, 14], [2, 37], [2, 13], [3, 38], [3, 12], [4, 39], [4, 11], [5, 40], [5, 10], [6, 41], [6, 9], [7, 42], [7, 8], [8, 43], [8, 7], [9, 44], [9, 6], [10, 45], [10, 5], [11, 46], [11, 4], [12, 47], [12, 3], [13, 48], [13, 2], [14, 49], [14, 1], [15, 0], [36, 49], [37, 48], [38, 47], [39, 46], [40, 45], [41, 44], [42, 43], [43, 42], [44, 41], [45, 40], [46, 39], [47, 38], [48, 37], [49, 36], [49, 14], [48, 13], [47, 12], [46, 11], [45, 10], [44, 9], [43, 8], [42, 7], [41, 6], [40, 5], [39, 4], [38, 3], [37, 2], [36, 1], [35, 0], [0, 36], [0, 14], [1, 37], [1, 13], [2, 38], [2, 12], [3, 39], [3, 11], [4, 40], [4, 10], [5, 41], [5, 9], [6, 42], [6, 8], [7, 43], [7, 7], [8, 44], [8, 6], [9, 45], [9, 5], [10, 46], [10, 4], [11, 47], [11, 3], [12, 48], [12, 2], [13, 49], [13, 1], [14, 0], [37, 49], [38, 48], [39, 47], [40, 46], [41, 45], [42, 44], [43, 43], [44, 42], [45, 41], [46, 40], [47, 39], [48, 38], [49, 37], [49, 13], [48, 12], [47, 11], [46, 10], [45, 9], [44, 8], [43, 7], [42, 6], [41, 5], [40, 4], [39, 3], [38, 2], [37, 1], [36, 0], [0, 37], [0, 13], [1, 38], [1, 12], [2, 39], [2, 11], [3, 40], [3, 10], [4, 41], [4, 9], [5, 42], [5, 8], [6, 43], [6, 7], [7, 44], [7, 6], [8, 45], [8, 5], [9, 46], [9, 4], [10, 47], [10, 3], [11, 48], [11, 2], [12, 49], [12, 1], [13, 0], [38, 49], [39, 48], [40, 47], [41, 46], [42, 45], [43, 44], [44, 43], [45, 42], [46, 41], [47, 40], [48, 39], [49, 38], [49, 12], [48, 11], [47, 10], [46, 9], [45, 8], [44, 7], [43, 6], [42, 5], [41, 4], [40, 3], [39, 2], [38, 1], [37, 0], [0, 38], [0, 12], [1, 39], [1, 11], [2, 40], [2, 10], [3, 41], [3, 9], [4, 42], [4, 8], [5, 43], [5, 7], [6, 44], [6, 6], [7, 45], [7, 5], [8, 46], [8, 4], [9, 47], [9, 3], [10, 48], [10, 2], [11, 49], [11, 1], [12, 0], [39, 49], [40, 48], [41, 47], [42, 46], [43, 45], [44, 44], [45, 43], [46, 42], [47, 41], [48, 40], [49, 39], [49, 11], [48, 10], [47, 9], [46, 8], [45, 7], [44, 6], [43, 5], [42, 4], [41, 3], [40, 2], [39, 1], [38, 0], [0, 39], [0, 11], [1, 40], [1, 10], [2, 41], [2, 9], [3, 42], [3, 8], [4, 43], [4, 7], [5, 44], [5, 6], [6, 45], [6, 5], [7, 46], [7, 4], [8, 47], [8, 3], [9, 48], [9, 2], [10, 49], [10, 1], [11, 0], [40, 49], [41, 48], [42, 47], [43, 46], [44, 45], [45, 44], [46, 43], [47, 42], [48, 41], [49, 40], [49, 10], [48, 9], [47, 8], [46, 7], [45, 6], [44, 5], [43, 4], [42, 3], [41, 2], [40, 1], [39, 0], [0, 40], [0, 10], [1, 41], [1, 9], [2, 42], [2, 8], [3, 43], [3, 7], [4, 44], [4, 6], [5, 45], [5, 5], [6, 46], [6, 4], [7, 47], [7, 3], [8, 48], [8, 2], [9, 49], [9, 1], [10, 0], [41, 49], [42, 48], [43, 47], [44, 46], [45, 45], [46, 44], [47, 43], [48, 42], [49, 41], [49, 9], [48, 8], [47, 7], [46, 6], [45, 5], [44, 4], [43, 3], [42, 2], [41, 1], [40, 0], [0, 41], [0, 9], [1, 42], [1, 8], [2, 43], [2, 7], [3, 44], [3, 6], [4, 45], [4, 5], [5, 46], [5, 4], [6, 47], [6, 3], [7, 48], [7, 2], [8, 49], [8, 1], [9, 0], [42, 49], [43, 48], [44, 47], [45, 46], [46, 45], [47, 44], [48, 43], [49, 42], [49, 8], [48, 7], [47, 6], [46, 5], [45, 4], [44, 3], [43, 2], [42, 1], [41, 0], [0, 42], [0, 8], [1, 43], [1, 7], [2, 44], [2, 6], [3, 45], [3, 5], [4, 46], [4, 4], [5, 47], [5, 3], [6, 48], [6, 2], [7, 49], [7, 1], [8, 0], [43, 49], [44, 48], [45, 47], [46, 46], [47, 45], [48, 44], [49, 43], [49, 7], [48, 6], [47, 5], [46, 4], [45, 3], [44, 2], [43, 1], [42, 0], [0, 43], [0, 7], [1, 44], [1, 6], [2, 45], [2, 5], [3, 46], [3, 4], [4, 47], [4, 3], [5, 48], [5, 2], [6, 49], [6, 1], [7, 0], [44, 49], [45, 48], [46, 47], [47, 46], [48, 45], [49, 44], [49, 6], [48, 5], [47, 4], [46, 3], [45, 2], [44, 1], [43, 0], [0, 44], [0, 6], [1, 45], [1, 5], [2, 46], [2, 4], [3, 47], [3, 3], [4, 48], [4, 2], [5, 49], [5, 1], [6, 0], [45, 49], [46, 48], [47, 47], [48, 46], [49, 45], [49, 5], [48, 4], [47, 3], [46, 2], [45, 1], [44, 0], [0, 45], [0, 5], [1, 46], [1, 4], [2, 47], [2, 3], [3, 48], [3, 2], [4, 49], [4, 1], [5, 0], [46, 49], [47, 48], [48, 47], [49, 46], [49, 4], [48, 3], [47, 2], [46, 1], [45, 0], [0, 46], [0, 4], [1, 47], [1, 3], [2, 48], [2, 2], [3, 49], [3, 1], [4, 0], [47, 49], [48, 48], [49, 47], [49, 3], [48, 2], [47, 1], [46, 0], [0, 47], [0, 3], [1, 48], [1, 2], [2, 49], [2, 1], [3, 0], [48, 49], [49, 48], [49, 2], [48, 1], [47, 0], [0, 48], [0, 2], [1, 49], [1, 1], [2, 0], [49, 49], [49, 1], [48, 0], [0, 49], [0, 1], [1, 0], [49, 0], [0, 0]]"
      },
      {
        "input": "rows = 4, cols = 6, rCenter = 3, cCenter = 0",
        "output": "[[3, 0], [2, 0], [3, 1], [1, 0], [2, 1], [3, 2], [0, 0], [1, 1], [2, 2], [3, 3], [0, 1], [1, 2], [2, 3], [3, 4], [0, 2], [1, 3], [2, 4], [3, 5], [0, 3], [1, 4], [2, 5], [0, 4], [1, 5], [0, 5]]"
      },
      {
        "input": "rows = 10, cols = 10, rCenter = 0, cCenter = 9",
        "output": "[[0, 9], [1, 9], [0, 8], [2, 9], [1, 8], [0, 7], [3, 9], [2, 8], [1, 7], [0, 6], [4, 9], [3, 8], [2, 7], [1, 6], [0, 5], [5, 9], [4, 8], [3, 7], [2, 6], [1, 5], [0, 4], [6, 9], [5, 8], [4, 7], [3, 6], [2, 5], [1, 4], [0, 3], [7, 9], [6, 8], [5, 7], [4, 6], [3, 5], [2, 4], [1, 3], [0, 2], [8, 9], [7, 8], [6, 7], [5, 6], [4, 5], [3, 4], [2, 3], [1, 2], [0, 1], [9, 9], [8, 8], [7, 7], [6, 6], [5, 5], [4, 4], [3, 3], [2, 2], [1, 1], [0, 0], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1], [1, 0], [9, 7], [8, 6], [7, 5], [6, 4], [5, 3], [4, 2], [3, 1], [2, 0], [9, 6], [8, 5], [7, 4], [6, 3], [5, 2], [4, 1], [3, 0], [9, 5], [8, 4], [7, 3], [6, 2], [5, 1], [4, 0], [9, 4], [8, 3], [7, 2], [6, 1], [5, 0], [9, 3], [8, 2], [7, 1], [6, 0], [9, 2], [8, 1], [7, 0], [9, 1], [8, 0], [9, 0]]"
      },
      {
        "input": "rows = 7, cols = 12, rCenter = 6, cCenter = 11",
        "output": "[[6, 11], [5, 11], [6, 10], [4, 11], [5, 10], [6, 9], [3, 11], [4, 10], [5, 9], [6, 8], [2, 11], [3, 10], [4, 9], [5, 8], [6, 7], [1, 11], [2, 10], [3, 9], [4, 8], [5, 7], [6, 6], [0, 11], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [6, 5], [0, 10], [1, 9], [2, 8], [3, 7], [4, 6], [5, 5], [6, 4], [0, 9], [1, 8], [2, 7], [3, 6], [4, 5], [5, 4], [6, 3], [0, 8], [1, 7], [2, 6], [3, 5], [4, 4], [5, 3], [6, 2], [0, 7], [1, 6], [2, 5], [3, 4], [4, 3], [5, 2], [6, 1], [0, 6], [1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 0], [0, 5], [1, 4], [2, 3], [3, 2], [4, 1], [5, 0], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 2], [1, 1], [2, 0], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 7, cols = 2, rCenter = 3, cCenter = 1",
        "output": "[[3, 1], [2, 1], [4, 1], [3, 0], [1, 1], [2, 0], [5, 1], [4, 0], [0, 1], [1, 0], [6, 1], [5, 0], [0, 0], [6, 0]]"
      },
      {
        "input": "rows = 5, cols = 5, rCenter = 3, cCenter = 3",
        "output": "[[3, 3], [2, 3], [3, 4], [4, 3], [3, 2], [1, 3], [2, 4], [2, 2], [4, 4], [4, 2], [3, 1], [0, 3], [1, 4], [1, 2], [2, 1], [4, 1], [3, 0], [0, 4], [0, 2], [1, 1], [2, 0], [4, 0], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 5, cols = 10, rCenter = 3, cCenter = 0",
        "output": "[[3, 0], [2, 0], [3, 1], [4, 0], [1, 0], [2, 1], [3, 2], [4, 1], [0, 0], [1, 1], [2, 2], [3, 3], [4, 2], [0, 1], [1, 2], [2, 3], [3, 4], [4, 3], [0, 2], [1, 3], [2, 4], [3, 5], [4, 4], [0, 3], [1, 4], [2, 5], [3, 6], [4, 5], [0, 4], [1, 5], [2, 6], [3, 7], [4, 6], [0, 5], [1, 6], [2, 7], [3, 8], [4, 7], [0, 6], [1, 7], [2, 8], [3, 9], [4, 8], [0, 7], [1, 8], [2, 9], [4, 9], [0, 8], [1, 9], [0, 9]]"
      },
      {
        "input": "rows = 100, cols = 1, rCenter = 50, cCenter = 0",
        "output": "[[50, 0], [49, 0], [51, 0], [48, 0], [52, 0], [47, 0], [53, 0], [46, 0], [54, 0], [45, 0], [55, 0], [44, 0], [56, 0], [43, 0], [57, 0], [42, 0], [58, 0], [41, 0], [59, 0], [40, 0], [60, 0], [39, 0], [61, 0], [38, 0], [62, 0], [37, 0], [63, 0], [36, 0], [64, 0], [35, 0], [65, 0], [34, 0], [66, 0], [33, 0], [67, 0], [32, 0], [68, 0], [31, 0], [69, 0], [30, 0], [70, 0], [29, 0], [71, 0], [28, 0], [72, 0], [27, 0], [73, 0], [26, 0], [74, 0], [25, 0], [75, 0], [24, 0], [76, 0], [23, 0], [77, 0], [22, 0], [78, 0], [21, 0], [79, 0], [20, 0], [80, 0], [19, 0], [81, 0], [18, 0], [82, 0], [17, 0], [83, 0], [16, 0], [84, 0], [15, 0], [85, 0], [14, 0], [86, 0], [13, 0], [87, 0], [12, 0], [88, 0], [11, 0], [89, 0], [10, 0], [90, 0], [9, 0], [91, 0], [8, 0], [92, 0], [7, 0], [93, 0], [6, 0], [94, 0], [5, 0], [95, 0], [4, 0], [96, 0], [3, 0], [97, 0], [2, 0], [98, 0], [1, 0], [99, 0], [0, 0]]"
      },
      {
        "input": "rows = 12, cols = 12, rCenter = 3, cCenter = 3",
        "output": "[[3, 3], [2, 3], [3, 4], [4, 3], [3, 2], [1, 3], [2, 4], [2, 2], [3, 5], [4, 4], [5, 3], [4, 2], [3, 1], [0, 3], [1, 4], [1, 2], [2, 5], [2, 1], [3, 6], [4, 5], [5, 4], [6, 3], [5, 2], [4, 1], [3, 0], [0, 4], [0, 2], [1, 5], [1, 1], [2, 6], [2, 0], [3, 7], [4, 6], [5, 5], [6, 4], [7, 3], [6, 2], [5, 1], [4, 0], [0, 5], [0, 1], [1, 6], [1, 0], [2, 7], [3, 8], [4, 7], [5, 6], [6, 5], [7, 4], [8, 3], [7, 2], [6, 1], [5, 0], [0, 6], [0, 0], [1, 7], [2, 8], [3, 9], [4, 8], [5, 7], [6, 6], [7, 5], [8, 4], [9, 3], [8, 2], [7, 1], [6, 0], [0, 7], [1, 8], [2, 9], [3, 10], [4, 9], [5, 8], [6, 7], [7, 6], [8, 5], [9, 4], [10, 3], [9, 2], [8, 1], [7, 0], [0, 8], [1, 9], [2, 10], [3, 11], [4, 10], [5, 9], [6, 8], [7, 7], [8, 6], [9, 5], [10, 4], [11, 3], [10, 2], [9, 1], [8, 0], [0, 9], [1, 10], [2, 11], [4, 11], [5, 10], [6, 9], [7, 8], [8, 7], [9, 6], [10, 5], [11, 4], [11, 2], [10, 1], [9, 0], [0, 10], [1, 11], [5, 11], [6, 10], [7, 9], [8, 8], [9, 7], [10, 6], [11, 5], [11, 1], [10, 0], [0, 11], [6, 11], [7, 10], [8, 9], [9, 8], [10, 7], [11, 6], [11, 0], [7, 11], [8, 10], [9, 9], [10, 8], [11, 7], [8, 11], [9, 10], [10, 9], [11, 8], [9, 11], [10, 10], [11, 9], [10, 11], [11, 10], [11, 11]]"
      },
      {
        "input": "rows = 20, cols = 5, rCenter = 19, cCenter = 0",
        "output": "[[19, 0], [18, 0], [19, 1], [17, 0], [18, 1], [19, 2], [16, 0], [17, 1], [18, 2], [19, 3], [15, 0], [16, 1], [17, 2], [18, 3], [19, 4], [14, 0], [15, 1], [16, 2], [17, 3], [18, 4], [13, 0], [14, 1], [15, 2], [16, 3], [17, 4], [12, 0], [13, 1], [14, 2], [15, 3], [16, 4], [11, 0], [12, 1], [13, 2], [14, 3], [15, 4], [10, 0], [11, 1], [12, 2], [13, 3], [14, 4], [9, 0], [10, 1], [11, 2], [12, 3], [13, 4], [8, 0], [9, 1], [10, 2], [11, 3], [12, 4], [7, 0], [8, 1], [9, 2], [10, 3], [11, 4], [6, 0], [7, 1], [8, 2], [9, 3], [10, 4], [5, 0], [6, 1], [7, 2], [8, 3], [9, 4], [4, 0], [5, 1], [6, 2], [7, 3], [8, 4], [3, 0], [4, 1], [5, 2], [6, 3], [7, 4], [2, 0], [3, 1], [4, 2], [5, 3], [6, 4], [1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [0, 1], [1, 2], [2, 3], [3, 4], [0, 2], [1, 3], [2, 4], [0, 3], [1, 4], [0, 4]]"
      },
      {
        "input": "rows = 6, cols = 8, rCenter = 4, cCenter = 7",
        "output": "[[4, 7], [3, 7], [5, 7], [4, 6], [2, 7], [3, 6], [5, 6], [4, 5], [1, 7], [2, 6], [3, 5], [5, 5], [4, 4], [0, 7], [1, 6], [2, 5], [3, 4], [5, 4], [4, 3], [0, 6], [1, 5], [2, 4], [3, 3], [5, 3], [4, 2], [0, 5], [1, 4], [2, 3], [3, 2], [5, 2], [4, 1], [0, 4], [1, 3], [2, 2], [3, 1], [5, 1], [4, 0], [0, 3], [1, 2], [2, 1], [3, 0], [5, 0], [0, 2], [1, 1], [2, 0], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 4, cols = 5, rCenter = 2, cCenter = 3",
        "output": "[[2, 3], [1, 3], [2, 4], [3, 3], [2, 2], [0, 3], [1, 4], [1, 2], [3, 4], [3, 2], [2, 1], [0, 4], [0, 2], [1, 1], [3, 1], [2, 0], [0, 1], [1, 0], [3, 0], [0, 0]]"
      },
      {
        "input": "rows = 8, cols = 8, rCenter = 1, cCenter = 1",
        "output": "[[1, 1], [0, 1], [1, 2], [2, 1], [1, 0], [0, 2], [0, 0], [1, 3], [2, 2], [3, 1], [2, 0], [0, 3], [1, 4], [2, 3], [3, 2], [4, 1], [3, 0], [0, 4], [1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [4, 0], [0, 5], [1, 6], [2, 5], [3, 4], [4, 3], [5, 2], [6, 1], [5, 0], [0, 6], [1, 7], [2, 6], [3, 5], [4, 4], [5, 3], [6, 2], [7, 1], [6, 0], [0, 7], [2, 7], [3, 6], [4, 5], [5, 4], [6, 3], [7, 2], [7, 0], [3, 7], [4, 6], [5, 5], [6, 4], [7, 3], [4, 7], [5, 6], [6, 5], [7, 4], [5, 7], [6, 6], [7, 5], [6, 7], [7, 6], [7, 7]]"
      },
      {
        "input": "rows = 6, cols = 4, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0], [1, 3], [2, 2], [3, 1], [4, 0], [2, 3], [3, 2], [4, 1], [5, 0], [3, 3], [4, 2], [5, 1], [4, 3], [5, 2], [5, 3]]"
      },
      {
        "input": "rows = 8, cols = 4, rCenter = 0, cCenter = 3",
        "output": "[[0, 3], [1, 3], [0, 2], [2, 3], [1, 2], [0, 1], [3, 3], [2, 2], [1, 1], [0, 0], [4, 3], [3, 2], [2, 1], [1, 0], [5, 3], [4, 2], [3, 1], [2, 0], [6, 3], [5, 2], [4, 1], [3, 0], [7, 3], [6, 2], [5, 1], [4, 0], [7, 2], [6, 1], [5, 0], [7, 1], [6, 0], [7, 0]]"
      },
      {
        "input": "rows = 7, cols = 7, rCenter = 3, cCenter = 3",
        "output": "[[3, 3], [2, 3], [3, 4], [4, 3], [3, 2], [1, 3], [2, 4], [2, 2], [3, 5], [4, 4], [5, 3], [4, 2], [3, 1], [0, 3], [1, 4], [1, 2], [2, 5], [2, 1], [3, 6], [4, 5], [5, 4], [6, 3], [5, 2], [4, 1], [3, 0], [0, 4], [0, 2], [1, 5], [1, 1], [2, 6], [2, 0], [4, 6], [5, 5], [6, 4], [6, 2], [5, 1], [4, 0], [0, 5], [0, 1], [1, 6], [1, 0], [5, 6], [6, 5], [6, 1], [5, 0], [0, 6], [0, 0], [6, 6], [6, 0]]"
      },
      {
        "input": "rows = 10, cols = 10, rCenter = 9, cCenter = 0",
        "output": "[[9, 0], [8, 0], [9, 1], [7, 0], [8, 1], [9, 2], [6, 0], [7, 1], [8, 2], [9, 3], [5, 0], [6, 1], [7, 2], [8, 3], [9, 4], [4, 0], [5, 1], [6, 2], [7, 3], [8, 4], [9, 5], [3, 0], [4, 1], [5, 2], [6, 3], [7, 4], [8, 5], [9, 6], [2, 0], [3, 1], [4, 2], [5, 3], [6, 4], [7, 5], [8, 6], [9, 7], [1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [0, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [5, 8], [6, 9], [0, 4], [1, 5], [2, 6], [3, 7], [4, 8], [5, 9], [0, 5], [1, 6], [2, 7], [3, 8], [4, 9], [0, 6], [1, 7], [2, 8], [3, 9], [0, 7], [1, 8], [2, 9], [0, 8], [1, 9], [0, 9]]"
      },
      {
        "input": "rows = 15, cols = 5, rCenter = 14, cCenter = 2",
        "output": "[[14, 2], [13, 2], [14, 3], [14, 1], [12, 2], [13, 3], [13, 1], [14, 4], [14, 0], [11, 2], [12, 3], [12, 1], [13, 4], [13, 0], [10, 2], [11, 3], [11, 1], [12, 4], [12, 0], [9, 2], [10, 3], [10, 1], [11, 4], [11, 0], [8, 2], [9, 3], [9, 1], [10, 4], [10, 0], [7, 2], [8, 3], [8, 1], [9, 4], [9, 0], [6, 2], [7, 3], [7, 1], [8, 4], [8, 0], [5, 2], [6, 3], [6, 1], [7, 4], [7, 0], [4, 2], [5, 3], [5, 1], [6, 4], [6, 0], [3, 2], [4, 3], [4, 1], [5, 4], [5, 0], [2, 2], [3, 3], [3, 1], [4, 4], [4, 0], [1, 2], [2, 3], [2, 1], [3, 4], [3, 0], [0, 2], [1, 3], [1, 1], [2, 4], [2, 0], [0, 3], [0, 1], [1, 4], [1, 0], [0, 4], [0, 0]]"
      },
      {
        "input": "rows = 7, cols = 7, rCenter = 3, cCenter = 4",
        "output": "[[3, 4], [2, 4], [3, 5], [4, 4], [3, 3], [1, 4], [2, 5], [2, 3], [3, 6], [4, 5], [5, 4], [4, 3], [3, 2], [0, 4], [1, 5], [1, 3], [2, 6], [2, 2], [4, 6], [5, 5], [6, 4], [5, 3], [4, 2], [3, 1], [0, 5], [0, 3], [1, 6], [1, 2], [2, 1], [5, 6], [6, 5], [6, 3], [5, 2], [4, 1], [3, 0], [0, 6], [0, 2], [1, 1], [2, 0], [6, 6], [6, 2], [5, 1], [4, 0], [0, 1], [1, 0], [6, 1], [5, 0], [0, 0], [6, 0]]"
      },
      {
        "input": "rows = 10, cols = 1, rCenter = 5, cCenter = 0",
        "output": "[[5, 0], [4, 0], [6, 0], [3, 0], [7, 0], [2, 0], [8, 0], [1, 0], [9, 0], [0, 0]]"
      },
      {
        "input": "rows = 6, cols = 6, rCenter = 3, cCenter = 3",
        "output": "[[3, 3], [2, 3], [3, 4], [4, 3], [3, 2], [1, 3], [2, 4], [2, 2], [3, 5], [4, 4], [5, 3], [4, 2], [3, 1], [0, 3], [1, 4], [1, 2], [2, 5], [2, 1], [4, 5], [5, 4], [5, 2], [4, 1], [3, 0], [0, 4], [0, 2], [1, 5], [1, 1], [2, 0], [5, 5], [5, 1], [4, 0], [0, 5], [0, 1], [1, 0], [5, 0], [0, 0]]"
      },
      {
        "input": "rows = 6, cols = 4, rCenter = 3, cCenter = 0",
        "output": "[[3, 0], [2, 0], [3, 1], [4, 0], [1, 0], [2, 1], [3, 2], [4, 1], [5, 0], [0, 0], [1, 1], [2, 2], [3, 3], [4, 2], [5, 1], [0, 1], [1, 2], [2, 3], [4, 3], [5, 2], [0, 2], [1, 3], [5, 3], [0, 3]]"
      },
      {
        "input": "rows = 7, cols = 7, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [0, 5], [1, 4], [2, 3], [3, 2], [4, 1], [5, 0], [0, 6], [1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 0], [1, 6], [2, 5], [3, 4], [4, 3], [5, 2], [6, 1], [2, 6], [3, 5], [4, 4], [5, 3], [6, 2], [3, 6], [4, 5], [5, 4], [6, 3], [4, 6], [5, 5], [6, 4], [5, 6], [6, 5], [6, 6]]"
      },
      {
        "input": "rows = 4, cols = 5, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 4], [1, 3], [2, 2], [3, 1], [1, 4], [2, 3], [3, 2], [2, 4], [3, 3], [3, 4]]"
      },
      {
        "input": "rows = 6, cols = 3, rCenter = 3, cCenter = 1",
        "output": "[[3, 1], [2, 1], [3, 2], [4, 1], [3, 0], [1, 1], [2, 2], [2, 0], [4, 2], [5, 1], [4, 0], [0, 1], [1, 2], [1, 0], [5, 2], [5, 0], [0, 2], [0, 0]]"
      },
      {
        "input": "rows = 15, cols = 5, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [1, 4], [2, 3], [3, 2], [4, 1], [5, 0], [2, 4], [3, 3], [4, 2], [5, 1], [6, 0], [3, 4], [4, 3], [5, 2], [6, 1], [7, 0], [4, 4], [5, 3], [6, 2], [7, 1], [8, 0], [5, 4], [6, 3], [7, 2], [8, 1], [9, 0], [6, 4], [7, 3], [8, 2], [9, 1], [10, 0], [7, 4], [8, 3], [9, 2], [10, 1], [11, 0], [8, 4], [9, 3], [10, 2], [11, 1], [12, 0], [9, 4], [10, 3], [11, 2], [12, 1], [13, 0], [10, 4], [11, 3], [12, 2], [13, 1], [14, 0], [11, 4], [12, 3], [13, 2], [14, 1], [12, 4], [13, 3], [14, 2], [13, 4], [14, 3], [14, 4]]"
      },
      {
        "input": "rows = 12, cols = 12, rCenter = 6, cCenter = 6",
        "output": "[[6, 6], [5, 6], [6, 7], [7, 6], [6, 5], [4, 6], [5, 7], [5, 5], [6, 8], [7, 7], [8, 6], [7, 5], [6, 4], [3, 6], [4, 7], [4, 5], [5, 8], [5, 4], [6, 9], [7, 8], [8, 7], [9, 6], [8, 5], [7, 4], [6, 3], [2, 6], [3, 7], [3, 5], [4, 8], [4, 4], [5, 9], [5, 3], [6, 10], [7, 9], [8, 8], [9, 7], [10, 6], [9, 5], [8, 4], [7, 3], [6, 2], [1, 6], [2, 7], [2, 5], [3, 8], [3, 4], [4, 9], [4, 3], [5, 10], [5, 2], [6, 11], [7, 10], [8, 9], [9, 8], [10, 7], [11, 6], [10, 5], [9, 4], [8, 3], [7, 2], [6, 1], [0, 6], [1, 7], [1, 5], [2, 8], [2, 4], [3, 9], [3, 3], [4, 10], [4, 2], [5, 11], [5, 1], [7, 11], [8, 10], [9, 9], [10, 8], [11, 7], [11, 5], [10, 4], [9, 3], [8, 2], [7, 1], [6, 0], [0, 7], [0, 5], [1, 8], [1, 4], [2, 9], [2, 3], [3, 10], [3, 2], [4, 11], [4, 1], [5, 0], [8, 11], [9, 10], [10, 9], [11, 8], [11, 4], [10, 3], [9, 2], [8, 1], [7, 0], [0, 8], [0, 4], [1, 9], [1, 3], [2, 10], [2, 2], [3, 11], [3, 1], [4, 0], [9, 11], [10, 10], [11, 9], [11, 3], [10, 2], [9, 1], [8, 0], [0, 9], [0, 3], [1, 10], [1, 2], [2, 11], [2, 1], [3, 0], [10, 11], [11, 10], [11, 2], [10, 1], [9, 0], [0, 10], [0, 2], [1, 11], [1, 1], [2, 0], [11, 11], [11, 1], [10, 0], [0, 11], [0, 1], [1, 0], [11, 0], [0, 0]]"
      },
      {
        "input": "rows = 99, cols = 99, rCenter = 0, cCenter = 0",
        "output": "Execution timed out"
      },
      {
        "input": "rows = 20, cols = 20, rCenter = 19, cCenter = 19",
        "output": "[[19, 19], [18, 19], [19, 18], [17, 19], [18, 18], [19, 17], [16, 19], [17, 18], [18, 17], [19, 16], [15, 19], [16, 18], [17, 17], [18, 16], [19, 15], [14, 19], [15, 18], [16, 17], [17, 16], [18, 15], [19, 14], [13, 19], [14, 18], [15, 17], [16, 16], [17, 15], [18, 14], [19, 13], [12, 19], [13, 18], [14, 17], [15, 16], [16, 15], [17, 14], [18, 13], [19, 12], [11, 19], [12, 18], [13, 17], [14, 16], [15, 15], [16, 14], [17, 13], [18, 12], [19, 11], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [15, 14], [16, 13], [17, 12], [18, 11], [19, 10], [9, 19], [10, 18], [11, 17], [12, 16], [13, 15], [14, 14], [15, 13], [16, 12], [17, 11], [18, 10], [19, 9], [8, 19], [9, 18], [10, 17], [11, 16], [12, 15], [13, 14], [14, 13], [15, 12], [16, 11], [17, 10], [18, 9], [19, 8], [7, 19], [8, 18], [9, 17], [10, 16], [11, 15], [12, 14], [13, 13], [14, 12], [15, 11], [16, 10], [17, 9], [18, 8], [19, 7], [6, 19], [7, 18], [8, 17], [9, 16], [10, 15], [11, 14], [12, 13], [13, 12], [14, 11], [15, 10], [16, 9], [17, 8], [18, 7], [19, 6], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 13], [12, 12], [13, 11], [14, 10], [15, 9], [16, 8], [17, 7], [18, 6], [19, 5], [4, 19], [5, 18], [6, 17], [7, 16], [8, 15], [9, 14], [10, 13], [11, 12], [12, 11], [13, 10], [14, 9], [15, 8], [16, 7], [17, 6], [18, 5], [19, 4], [3, 19], [4, 18], [5, 17], [6, 16], [7, 15], [8, 14], [9, 13], [10, 12], [11, 11], [12, 10], [13, 9], [14, 8], [15, 7], [16, 6], [17, 5], [18, 4], [19, 3], [2, 19], [3, 18], [4, 17], [5, 16], [6, 15], [7, 14], [8, 13], [9, 12], [10, 11], [11, 10], [12, 9], [13, 8], [14, 7], [15, 6], [16, 5], [17, 4], [18, 3], [19, 2], [1, 19], [2, 18], [3, 17], [4, 16], [5, 15], [6, 14], [7, 13], [8, 12], [9, 11], [10, 10], [11, 9], [12, 8], [13, 7], [14, 6], [15, 5], [16, 4], [17, 3], [18, 2], [19, 1], [0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10], [10, 9], [11, 8], [12, 7], [13, 6], [14, 5], [15, 4], [16, 3], [17, 2], [18, 1], [19, 0], [0, 18], [1, 17], [2, 16], [3, 15], [4, 14], [5, 13], [6, 12], [7, 11], [8, 10], [9, 9], [10, 8], [11, 7], [12, 6], [13, 5], [14, 4], [15, 3], [16, 2], [17, 1], [18, 0], [0, 17], [1, 16], [2, 15], [3, 14], [4, 13], [5, 12], [6, 11], [7, 10], [8, 9], [9, 8], [10, 7], [11, 6], [12, 5], [13, 4], [14, 3], [15, 2], [16, 1], [17, 0], [0, 16], [1, 15], [2, 14], [3, 13], [4, 12], [5, 11], [6, 10], [7, 9], [8, 8], [9, 7], [10, 6], [11, 5], [12, 4], [13, 3], [14, 2], [15, 1], [16, 0], [0, 15], [1, 14], [2, 13], [3, 12], [4, 11], [5, 10], [6, 9], [7, 8], [8, 7], [9, 6], [10, 5], [11, 4], [12, 3], [13, 2], [14, 1], [15, 0], [0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8], [7, 7], [8, 6], [9, 5], [10, 4], [11, 3], [12, 2], [13, 1], [14, 0], [0, 13], [1, 12], [2, 11], [3, 10], [4, 9], [5, 8], [6, 7], [7, 6], [8, 5], [9, 4], [10, 3], [11, 2], [12, 1], [13, 0], [0, 12], [1, 11], [2, 10], [3, 9], [4, 8], [5, 7], [6, 6], [7, 5], [8, 4], [9, 3], [10, 2], [11, 1], [12, 0], [0, 11], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [6, 5], [7, 4], [8, 3], [9, 2], [10, 1], [11, 0], [0, 10], [1, 9], [2, 8], [3, 7], [4, 6], [5, 5], [6, 4], [7, 3], [8, 2], [9, 1], [10, 0], [0, 9], [1, 8], [2, 7], [3, 6], [4, 5], [5, 4], [6, 3], [7, 2], [8, 1], [9, 0], [0, 8], [1, 7], [2, 6], [3, 5], [4, 4], [5, 3], [6, 2], [7, 1], [8, 0], [0, 7], [1, 6], [2, 5], [3, 4], [4, 3], [5, 2], [6, 1], [7, 0], [0, 6], [1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 0], [0, 5], [1, 4], [2, 3], [3, 2], [4, 1], [5, 0], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 2], [1, 1], [2, 0], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 8, cols = 8, rCenter = 7, cCenter = 7",
        "output": "[[7, 7], [6, 7], [7, 6], [5, 7], [6, 6], [7, 5], [4, 7], [5, 6], [6, 5], [7, 4], [3, 7], [4, 6], [5, 5], [6, 4], [7, 3], [2, 7], [3, 6], [4, 5], [5, 4], [6, 3], [7, 2], [1, 7], [2, 6], [3, 5], [4, 4], [5, 3], [6, 2], [7, 1], [0, 7], [1, 6], [2, 5], [3, 4], [4, 3], [5, 2], [6, 1], [7, 0], [0, 6], [1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 0], [0, 5], [1, 4], [2, 3], [3, 2], [4, 1], [5, 0], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 2], [1, 1], [2, 0], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 8, cols = 8, rCenter = 4, cCenter = 4",
        "output": "[[4, 4], [3, 4], [4, 5], [5, 4], [4, 3], [2, 4], [3, 5], [3, 3], [4, 6], [5, 5], [6, 4], [5, 3], [4, 2], [1, 4], [2, 5], [2, 3], [3, 6], [3, 2], [4, 7], [5, 6], [6, 5], [7, 4], [6, 3], [5, 2], [4, 1], [0, 4], [1, 5], [1, 3], [2, 6], [2, 2], [3, 7], [3, 1], [5, 7], [6, 6], [7, 5], [7, 3], [6, 2], [5, 1], [4, 0], [0, 5], [0, 3], [1, 6], [1, 2], [2, 7], [2, 1], [3, 0], [6, 7], [7, 6], [7, 2], [6, 1], [5, 0], [0, 6], [0, 2], [1, 7], [1, 1], [2, 0], [7, 7], [7, 1], [6, 0], [0, 7], [0, 1], [1, 0], [7, 0], [0, 0]]"
      },
      {
        "input": "rows = 15, cols = 5, rCenter = 7, cCenter = 2",
        "output": "[[7, 2], [6, 2], [7, 3], [8, 2], [7, 1], [5, 2], [6, 3], [6, 1], [7, 4], [8, 3], [9, 2], [8, 1], [7, 0], [4, 2], [5, 3], [5, 1], [6, 4], [6, 0], [8, 4], [9, 3], [10, 2], [9, 1], [8, 0], [3, 2], [4, 3], [4, 1], [5, 4], [5, 0], [9, 4], [10, 3], [11, 2], [10, 1], [9, 0], [2, 2], [3, 3], [3, 1], [4, 4], [4, 0], [10, 4], [11, 3], [12, 2], [11, 1], [10, 0], [1, 2], [2, 3], [2, 1], [3, 4], [3, 0], [11, 4], [12, 3], [13, 2], [12, 1], [11, 0], [0, 2], [1, 3], [1, 1], [2, 4], [2, 0], [12, 4], [13, 3], [14, 2], [13, 1], [12, 0], [0, 3], [0, 1], [1, 4], [1, 0], [13, 4], [14, 3], [14, 1], [13, 0], [0, 4], [0, 0], [14, 4], [14, 0]]"
      },
      {
        "input": "rows = 6, cols = 4, rCenter = 0, cCenter = 3",
        "output": "[[0, 3], [1, 3], [0, 2], [2, 3], [1, 2], [0, 1], [3, 3], [2, 2], [1, 1], [0, 0], [4, 3], [3, 2], [2, 1], [1, 0], [5, 3], [4, 2], [3, 1], [2, 0], [5, 2], [4, 1], [3, 0], [5, 1], [4, 0], [5, 0]]"
      },
      {
        "input": "rows = 9, cols = 9, rCenter = 4, cCenter = 8",
        "output": "[[4, 8], [3, 8], [5, 8], [4, 7], [2, 8], [3, 7], [6, 8], [5, 7], [4, 6], [1, 8], [2, 7], [3, 6], [7, 8], [6, 7], [5, 6], [4, 5], [0, 8], [1, 7], [2, 6], [3, 5], [8, 8], [7, 7], [6, 6], [5, 5], [4, 4], [0, 7], [1, 6], [2, 5], [3, 4], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [0, 6], [1, 5], [2, 4], [3, 3], [8, 6], [7, 5], [6, 4], [5, 3], [4, 2], [0, 5], [1, 4], [2, 3], [3, 2], [8, 5], [7, 4], [6, 3], [5, 2], [4, 1], [0, 4], [1, 3], [2, 2], [3, 1], [8, 4], [7, 3], [6, 2], [5, 1], [4, 0], [0, 3], [1, 2], [2, 1], [3, 0], [8, 3], [7, 2], [6, 1], [5, 0], [0, 2], [1, 1], [2, 0], [8, 2], [7, 1], [6, 0], [0, 1], [1, 0], [8, 1], [7, 0], [0, 0], [8, 0]]"
      },
      {
        "input": "rows = 5, cols = 5, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [1, 4], [2, 3], [3, 2], [4, 1], [2, 4], [3, 3], [4, 2], [3, 4], [4, 3], [4, 4]]"
      },
      {
        "input": "rows = 7, cols = 5, rCenter = 3, cCenter = 2",
        "output": "[[3, 2], [2, 2], [3, 3], [4, 2], [3, 1], [1, 2], [2, 3], [2, 1], [3, 4], [4, 3], [5, 2], [4, 1], [3, 0], [0, 2], [1, 3], [1, 1], [2, 4], [2, 0], [4, 4], [5, 3], [6, 2], [5, 1], [4, 0], [0, 3], [0, 1], [1, 4], [1, 0], [5, 4], [6, 3], [6, 1], [5, 0], [0, 4], [0, 0], [6, 4], [6, 0]]"
      },
      {
        "input": "rows = 8, cols = 3, rCenter = 1, cCenter = 2",
        "output": "[[1, 2], [0, 2], [2, 2], [1, 1], [0, 1], [3, 2], [2, 1], [1, 0], [0, 0], [4, 2], [3, 1], [2, 0], [5, 2], [4, 1], [3, 0], [6, 2], [5, 1], [4, 0], [7, 2], [6, 1], [5, 0], [7, 1], [6, 0], [7, 0]]"
      },
      {
        "input": "rows = 7, cols = 2, rCenter = 6, cCenter = 0",
        "output": "[[6, 0], [5, 0], [6, 1], [4, 0], [5, 1], [3, 0], [4, 1], [2, 0], [3, 1], [1, 0], [2, 1], [0, 0], [1, 1], [0, 1]]"
      },
      {
        "input": "rows = 99, cols = 99, rCenter = 98, cCenter = 98",
        "output": "Execution timed out"
      },
      {
        "input": "rows = 8, cols = 8, rCenter = 7, cCenter = 0",
        "output": "[[7, 0], [6, 0], [7, 1], [5, 0], [6, 1], [7, 2], [4, 0], [5, 1], [6, 2], [7, 3], [3, 0], [4, 1], [5, 2], [6, 3], [7, 4], [2, 0], [3, 1], [4, 2], [5, 3], [6, 4], [7, 5], [1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [0, 2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [0, 4], [1, 5], [2, 6], [3, 7], [0, 5], [1, 6], [2, 7], [0, 6], [1, 7], [0, 7]]"
      },
      {
        "input": "rows = 5, cols = 9, rCenter = 2, cCenter = 8",
        "output": "[[2, 8], [1, 8], [3, 8], [2, 7], [0, 8], [1, 7], [4, 8], [3, 7], [2, 6], [0, 7], [1, 6], [4, 7], [3, 6], [2, 5], [0, 6], [1, 5], [4, 6], [3, 5], [2, 4], [0, 5], [1, 4], [4, 5], [3, 4], [2, 3], [0, 4], [1, 3], [4, 4], [3, 3], [2, 2], [0, 3], [1, 2], [4, 3], [3, 2], [2, 1], [0, 2], [1, 1], [4, 2], [3, 1], [2, 0], [0, 1], [1, 0], [4, 1], [3, 0], [0, 0], [4, 0]]"
      },
      {
        "input": "rows = 100, cols = 100, rCenter = 0, cCenter = 99",
        "output": "Execution timed out"
      },
      {
        "input": "rows = 60, cols = 25, rCenter = 30, cCenter = 10",
        "output": "[[30, 10], [29, 10], [30, 11], [31, 10], [30, 9], [28, 10], [29, 11], [29, 9], [30, 12], [31, 11], [32, 10], [31, 9], [30, 8], [27, 10], [28, 11], [28, 9], [29, 12], [29, 8], [30, 13], [31, 12], [32, 11], [33, 10], [32, 9], [31, 8], [30, 7], [26, 10], [27, 11], [27, 9], [28, 12], [28, 8], [29, 13], [29, 7], [30, 14], [31, 13], [32, 12], [33, 11], [34, 10], [33, 9], [32, 8], [31, 7], [30, 6], [25, 10], [26, 11], [26, 9], [27, 12], [27, 8], [28, 13], [28, 7], [29, 14], [29, 6], [30, 15], [31, 14], [32, 13], [33, 12], [34, 11], [35, 10], [34, 9], [33, 8], [32, 7], [31, 6], [30, 5], [24, 10], [25, 11], [25, 9], [26, 12], [26, 8], [27, 13], [27, 7], [28, 14], [28, 6], [29, 15], [29, 5], [30, 16], [31, 15], [32, 14], [33, 13], [34, 12], [35, 11], [36, 10], [35, 9], [34, 8], [33, 7], [32, 6], [31, 5], [30, 4], [23, 10], [24, 11], [24, 9], [25, 12], [25, 8], [26, 13], [26, 7], [27, 14], [27, 6], [28, 15], [28, 5], [29, 16], [29, 4], [30, 17], [31, 16], [32, 15], [33, 14], [34, 13], [35, 12], [36, 11], [37, 10], [36, 9], [35, 8], [34, 7], [33, 6], [32, 5], [31, 4], [30, 3], [22, 10], [23, 11], [23, 9], [24, 12], [24, 8], [25, 13], [25, 7], [26, 14], [26, 6], [27, 15], [27, 5], [28, 16], [28, 4], [29, 17], [29, 3], [30, 18], [31, 17], [32, 16], [33, 15], [34, 14], [35, 13], [36, 12], [37, 11], [38, 10], [37, 9], [36, 8], [35, 7], [34, 6], [33, 5], [32, 4], [31, 3], [30, 2], [21, 10], [22, 11], [22, 9], [23, 12], [23, 8], [24, 13], [24, 7], [25, 14], [25, 6], [26, 15], [26, 5], [27, 16], [27, 4], [28, 17], [28, 3], [29, 18], [29, 2], [30, 19], [31, 18], [32, 17], [33, 16], [34, 15], [35, 14], [36, 13], [37, 12], [38, 11], [39, 10], [38, 9], [37, 8], [36, 7], [35, 6], [34, 5], [33, 4], [32, 3], [31, 2], [30, 1], [20, 10], [21, 11], [21, 9], [22, 12], [22, 8], [23, 13], [23, 7], [24, 14], [24, 6], [25, 15], [25, 5], [26, 16], [26, 4], [27, 17], [27, 3], [28, 18], [28, 2], [29, 19], [29, 1], [30, 20], [31, 19], [32, 18], [33, 17], [34, 16], [35, 15], [36, 14], [37, 13], [38, 12], [39, 11], [40, 10], [39, 9], [38, 8], [37, 7], [36, 6], [35, 5], [34, 4], [33, 3], [32, 2], [31, 1], [30, 0], [19, 10], [20, 11], [20, 9], [21, 12], [21, 8], [22, 13], [22, 7], [23, 14], [23, 6], [24, 15], [24, 5], [25, 16], [25, 4], [26, 17], [26, 3], [27, 18], [27, 2], [28, 19], [28, 1], [29, 20], [29, 0], [30, 21], [31, 20], [32, 19], [33, 18], [34, 17], [35, 16], [36, 15], [37, 14], [38, 13], [39, 12], [40, 11], [41, 10], [40, 9], [39, 8], [38, 7], [37, 6], [36, 5], [35, 4], [34, 3], [33, 2], [32, 1], [31, 0], [18, 10], [19, 11], [19, 9], [20, 12], [20, 8], [21, 13], [21, 7], [22, 14], [22, 6], [23, 15], [23, 5], [24, 16], [24, 4], [25, 17], [25, 3], [26, 18], [26, 2], [27, 19], [27, 1], [28, 20], [28, 0], [29, 21], [30, 22], [31, 21], [32, 20], [33, 19], [34, 18], [35, 17], [36, 16], [37, 15], [38, 14], [39, 13], [40, 12], [41, 11], [42, 10], [41, 9], [40, 8], [39, 7], [38, 6], [37, 5], [36, 4], [35, 3], [34, 2], [33, 1], [32, 0], [17, 10], [18, 11], [18, 9], [19, 12], [19, 8], [20, 13], [20, 7], [21, 14], [21, 6], [22, 15], [22, 5], [23, 16], [23, 4], [24, 17], [24, 3], [25, 18], [25, 2], [26, 19], [26, 1], [27, 20], [27, 0], [28, 21], [29, 22], [30, 23], [31, 22], [32, 21], [33, 20], [34, 19], [35, 18], [36, 17], [37, 16], [38, 15], [39, 14], [40, 13], [41, 12], [42, 11], [43, 10], [42, 9], [41, 8], [40, 7], [39, 6], [38, 5], [37, 4], [36, 3], [35, 2], [34, 1], [33, 0], [16, 10], [17, 11], [17, 9], [18, 12], [18, 8], [19, 13], [19, 7], [20, 14], [20, 6], [21, 15], [21, 5], [22, 16], [22, 4], [23, 17], [23, 3], [24, 18], [24, 2], [25, 19], [25, 1], [26, 20], [26, 0], [27, 21], [28, 22], [29, 23], [30, 24], [31, 23], [32, 22], [33, 21], [34, 20], [35, 19], [36, 18], [37, 17], [38, 16], [39, 15], [40, 14], [41, 13], [42, 12], [43, 11], [44, 10], [43, 9], [42, 8], [41, 7], [40, 6], [39, 5], [38, 4], [37, 3], [36, 2], [35, 1], [34, 0], [15, 10], [16, 11], [16, 9], [17, 12], [17, 8], [18, 13], [18, 7], [19, 14], [19, 6], [20, 15], [20, 5], [21, 16], [21, 4], [22, 17], [22, 3], [23, 18], [23, 2], [24, 19], [24, 1], [25, 20], [25, 0], [26, 21], [27, 22], [28, 23], [29, 24], [31, 24], [32, 23], [33, 22], [34, 21], [35, 20], [36, 19], [37, 18], [38, 17], [39, 16], [40, 15], [41, 14], [42, 13], [43, 12], [44, 11], [45, 10], [44, 9], [43, 8], [42, 7], [41, 6], [40, 5], [39, 4], [38, 3], [37, 2], [36, 1], [35, 0], [14, 10], [15, 11], [15, 9], [16, 12], [16, 8], [17, 13], [17, 7], [18, 14], [18, 6], [19, 15], [19, 5], [20, 16], [20, 4], [21, 17], [21, 3], [22, 18], [22, 2], [23, 19], [23, 1], [24, 20], [24, 0], [25, 21], [26, 22], [27, 23], [28, 24], [32, 24], [33, 23], [34, 22], [35, 21], [36, 20], [37, 19], [38, 18], [39, 17], [40, 16], [41, 15], [42, 14], [43, 13], [44, 12], [45, 11], [46, 10], [45, 9], [44, 8], [43, 7], [42, 6], [41, 5], [40, 4], [39, 3], [38, 2], [37, 1], [36, 0], [13, 10], [14, 11], [14, 9], [15, 12], [15, 8], [16, 13], [16, 7], [17, 14], [17, 6], [18, 15], [18, 5], [19, 16], [19, 4], [20, 17], [20, 3], [21, 18], [21, 2], [22, 19], [22, 1], [23, 20], [23, 0], [24, 21], [25, 22], [26, 23], [27, 24], [33, 24], [34, 23], [35, 22], [36, 21], [37, 20], [38, 19], [39, 18], [40, 17], [41, 16], [42, 15], [43, 14], [44, 13], [45, 12], [46, 11], [47, 10], [46, 9], [45, 8], [44, 7], [43, 6], [42, 5], [41, 4], [40, 3], [39, 2], [38, 1], [37, 0], [12, 10], [13, 11], [13, 9], [14, 12], [14, 8], [15, 13], [15, 7], [16, 14], [16, 6], [17, 15], [17, 5], [18, 16], [18, 4], [19, 17], [19, 3], [20, 18], [20, 2], [21, 19], [21, 1], [22, 20], [22, 0], [23, 21], [24, 22], [25, 23], [26, 24], [34, 24], [35, 23], [36, 22], [37, 21], [38, 20], [39, 19], [40, 18], [41, 17], [42, 16], [43, 15], [44, 14], [45, 13], [46, 12], [47, 11], [48, 10], [47, 9], [46, 8], [45, 7], [44, 6], [43, 5], [42, 4], [41, 3], [40, 2], [39, 1], [38, 0], [11, 10], [12, 11], [12, 9], [13, 12], [13, 8], [14, 13], [14, 7], [15, 14], [15, 6], [16, 15], [16, 5], [17, 16], [17, 4], [18, 17], [18, 3], [19, 18], [19, 2], [20, 19], [20, 1], [21, 20], [21, 0], [22, 21], [23, 22], [24, 23], [25, 24], [35, 24], [36, 23], [37, 22], [38, 21], [39, 20], [40, 19], [41, 18], [42, 17], [43, 16], [44, 15], [45, 14], [46, 13], [47, 12], [48, 11], [49, 10], [48, 9], [47, 8], [46, 7], [45, 6], [44, 5], [43, 4], [42, 3], [41, 2], [40, 1], [39, 0], [10, 10], [11, 11], [11, 9], [12, 12], [12, 8], [13, 13], [13, 7], [14, 14], [14, 6], [15, 15], [15, 5], [16, 16], [16, 4], [17, 17], [17, 3], [18, 18], [18, 2], [19, 19], [19, 1], [20, 20], [20, 0], [21, 21], [22, 22], [23, 23], [24, 24], [36, 24], [37, 23], [38, 22], [39, 21], [40, 20], [41, 19], [42, 18], [43, 17], [44, 16], [45, 15], [46, 14], [47, 13], [48, 12], [49, 11], [50, 10], [49, 9], [48, 8], [47, 7], [46, 6], [45, 5], [44, 4], [43, 3], [42, 2], [41, 1], [40, 0], [9, 10], [10, 11], [10, 9], [11, 12], [11, 8], [12, 13], [12, 7], [13, 14], [13, 6], [14, 15], [14, 5], [15, 16], [15, 4], [16, 17], [16, 3], [17, 18], [17, 2], [18, 19], [18, 1], [19, 20], [19, 0], [20, 21], [21, 22], [22, 23], [23, 24], [37, 24], [38, 23], [39, 22], [40, 21], [41, 20], [42, 19], [43, 18], [44, 17], [45, 16], [46, 15], [47, 14], [48, 13], [49, 12], [50, 11], [51, 10], [50, 9], [49, 8], [48, 7], [47, 6], [46, 5], [45, 4], [44, 3], [43, 2], [42, 1], [41, 0], [8, 10], [9, 11], [9, 9], [10, 12], [10, 8], [11, 13], [11, 7], [12, 14], [12, 6], [13, 15], [13, 5], [14, 16], [14, 4], [15, 17], [15, 3], [16, 18], [16, 2], [17, 19], [17, 1], [18, 20], [18, 0], [19, 21], [20, 22], [21, 23], [22, 24], [38, 24], [39, 23], [40, 22], [41, 21], [42, 20], [43, 19], [44, 18], [45, 17], [46, 16], [47, 15], [48, 14], [49, 13], [50, 12], [51, 11], [52, 10], [51, 9], [50, 8], [49, 7], [48, 6], [47, 5], [46, 4], [45, 3], [44, 2], [43, 1], [42, 0], [7, 10], [8, 11], [8, 9], [9, 12], [9, 8], [10, 13], [10, 7], [11, 14], [11, 6], [12, 15], [12, 5], [13, 16], [13, 4], [14, 17], [14, 3], [15, 18], [15, 2], [16, 19], [16, 1], [17, 20], [17, 0], [18, 21], [19, 22], [20, 23], [21, 24], [39, 24], [40, 23], [41, 22], [42, 21], [43, 20], [44, 19], [45, 18], [46, 17], [47, 16], [48, 15], [49, 14], [50, 13], [51, 12], [52, 11], [53, 10], [52, 9], [51, 8], [50, 7], [49, 6], [48, 5], [47, 4], [46, 3], [45, 2], [44, 1], [43, 0], [6, 10], [7, 11], [7, 9], [8, 12], [8, 8], [9, 13], [9, 7], [10, 14], [10, 6], [11, 15], [11, 5], [12, 16], [12, 4], [13, 17], [13, 3], [14, 18], [14, 2], [15, 19], [15, 1], [16, 20], [16, 0], [17, 21], [18, 22], [19, 23], [20, 24], [40, 24], [41, 23], [42, 22], [43, 21], [44, 20], [45, 19], [46, 18], [47, 17], [48, 16], [49, 15], [50, 14], [51, 13], [52, 12], [53, 11], [54, 10], [53, 9], [52, 8], [51, 7], [50, 6], [49, 5], [48, 4], [47, 3], [46, 2], [45, 1], [44, 0], [5, 10], [6, 11], [6, 9], [7, 12], [7, 8], [8, 13], [8, 7], [9, 14], [9, 6], [10, 15], [10, 5], [11, 16], [11, 4], [12, 17], [12, 3], [13, 18], [13, 2], [14, 19], [14, 1], [15, 20], [15, 0], [16, 21], [17, 22], [18, 23], [19, 24], [41, 24], [42, 23], [43, 22], [44, 21], [45, 20], [46, 19], [47, 18], [48, 17], [49, 16], [50, 15], [51, 14], [52, 13], [53, 12], [54, 11], [55, 10], [54, 9], [53, 8], [52, 7], [51, 6], [50, 5], [49, 4], [48, 3], [47, 2], [46, 1], [45, 0], [4, 10], [5, 11], [5, 9], [6, 12], [6, 8], [7, 13], [7, 7], [8, 14], [8, 6], [9, 15], [9, 5], [10, 16], [10, 4], [11, 17], [11, 3], [12, 18], [12, 2], [13, 19], [13, 1], [14, 20], [14, 0], [15, 21], [16, 22], [17, 23], [18, 24], [42, 24], [43, 23], [44, 22], [45, 21], [46, 20], [47, 19], [48, 18], [49, 17], [50, 16], [51, 15], [52, 14], [53, 13], [54, 12], [55, 11], [56, 10], [55, 9], [54, 8], [53, 7], [52, 6], [51, 5], [50, 4], [49, 3], [48, 2], [47, 1], [46, 0], [3, 10], [4, 11], [4, 9], [5, 12], [5, 8], [6, 13], [6, 7], [7, 14], [7, 6], [8, 15], [8, 5], [9, 16], [9, 4], [10, 17], [10, 3], [11, 18], [11, 2], [12, 19], [12, 1], [13, 20], [13, 0], [14, 21], [15, 22], [16, 23], [17, 24], [43, 24], [44, 23], [45, 22], [46, 21], [47, 20], [48, 19], [49, 18], [50, 17], [51, 16], [52, 15], [53, 14], [54, 13], [55, 12], [56, 11], [57, 10], [56, 9], [55, 8], [54, 7], [53, 6], [52, 5], [51, 4], [50, 3], [49, 2], [48, 1], [47, 0], [2, 10], [3, 11], [3, 9], [4, 12], [4, 8], [5, 13], [5, 7], [6, 14], [6, 6], [7, 15], [7, 5], [8, 16], [8, 4], [9, 17], [9, 3], [10, 18], [10, 2], [11, 19], [11, 1], [12, 20], [12, 0], [13, 21], [14, 22], [15, 23], [16, 24], [44, 24], [45, 23], [46, 22], [47, 21], [48, 20], [49, 19], [50, 18], [51, 17], [52, 16], [53, 15], [54, 14], [55, 13], [56, 12], [57, 11], [58, 10], [57, 9], [56, 8], [55, 7], [54, 6], [53, 5], [52, 4], [51, 3], [50, 2], [49, 1], [48, 0], [1, 10], [2, 11], [2, 9], [3, 12], [3, 8], [4, 13], [4, 7], [5, 14], [5, 6], [6, 15], [6, 5], [7, 16], [7, 4], [8, 17], [8, 3], [9, 18], [9, 2], [10, 19], [10, 1], [11, 20], [11, 0], [12, 21], [13, 22], [14, 23], [15, 24], [45, 24], [46, 23], [47, 22], [48, 21], [49, 20], [50, 19], [51, 18], [52, 17], [53, 16], [54, 15], [55, 14], [56, 13], [57, 12], [58, 11], [59, 10], [58, 9], [57, 8], [56, 7], [55, 6], [54, 5], [53, 4], [52, 3], [51, 2], [50, 1], [49, 0], [0, 10], [1, 11], [1, 9], [2, 12], [2, 8], [3, 13], [3, 7], [4, 14], [4, 6], [5, 15], [5, 5], [6, 16], [6, 4], [7, 17], [7, 3], [8, 18], [8, 2], [9, 19], [9, 1], [10, 20], [10, 0], [11, 21], [12, 22], [13, 23], [14, 24], [46, 24], [47, 23], [48, 22], [49, 21], [50, 20], [51, 19], [52, 18], [53, 17], [54, 16], [55, 15], [56, 14], [57, 13], [58, 12], [59, 11], [59, 9], [58, 8], [57, 7], [56, 6], [55, 5], [54, 4], [53, 3], [52, 2], [51, 1], [50, 0], [0, 11], [0, 9], [1, 12], [1, 8], [2, 13], [2, 7], [3, 14], [3, 6], [4, 15], [4, 5], [5, 16], [5, 4], [6, 17], [6, 3], [7, 18], [7, 2], [8, 19], [8, 1], [9, 20], [9, 0], [10, 21], [11, 22], [12, 23], [13, 24], [47, 24], [48, 23], [49, 22], [50, 21], [51, 20], [52, 19], [53, 18], [54, 17], [55, 16], [56, 15], [57, 14], [58, 13], [59, 12], [59, 8], [58, 7], [57, 6], [56, 5], [55, 4], [54, 3], [53, 2], [52, 1], [51, 0], [0, 12], [0, 8], [1, 13], [1, 7], [2, 14], [2, 6], [3, 15], [3, 5], [4, 16], [4, 4], [5, 17], [5, 3], [6, 18], [6, 2], [7, 19], [7, 1], [8, 20], [8, 0], [9, 21], [10, 22], [11, 23], [12, 24], [48, 24], [49, 23], [50, 22], [51, 21], [52, 20], [53, 19], [54, 18], [55, 17], [56, 16], [57, 15], [58, 14], [59, 13], [59, 7], [58, 6], [57, 5], [56, 4], [55, 3], [54, 2], [53, 1], [52, 0], [0, 13], [0, 7], [1, 14], [1, 6], [2, 15], [2, 5], [3, 16], [3, 4], [4, 17], [4, 3], [5, 18], [5, 2], [6, 19], [6, 1], [7, 20], [7, 0], [8, 21], [9, 22], [10, 23], [11, 24], [49, 24], [50, 23], [51, 22], [52, 21], [53, 20], [54, 19], [55, 18], [56, 17], [57, 16], [58, 15], [59, 14], [59, 6], [58, 5], [57, 4], [56, 3], [55, 2], [54, 1], [53, 0], [0, 14], [0, 6], [1, 15], [1, 5], [2, 16], [2, 4], [3, 17], [3, 3], [4, 18], [4, 2], [5, 19], [5, 1], [6, 20], [6, 0], [7, 21], [8, 22], [9, 23], [10, 24], [50, 24], [51, 23], [52, 22], [53, 21], [54, 20], [55, 19], [56, 18], [57, 17], [58, 16], [59, 15], [59, 5], [58, 4], [57, 3], [56, 2], [55, 1], [54, 0], [0, 15], [0, 5], [1, 16], [1, 4], [2, 17], [2, 3], [3, 18], [3, 2], [4, 19], [4, 1], [5, 20], [5, 0], [6, 21], [7, 22], [8, 23], [9, 24], [51, 24], [52, 23], [53, 22], [54, 21], [55, 20], [56, 19], [57, 18], [58, 17], [59, 16], [59, 4], [58, 3], [57, 2], [56, 1], [55, 0], [0, 16], [0, 4], [1, 17], [1, 3], [2, 18], [2, 2], [3, 19], [3, 1], [4, 20], [4, 0], [5, 21], [6, 22], [7, 23], [8, 24], [52, 24], [53, 23], [54, 22], [55, 21], [56, 20], [57, 19], [58, 18], [59, 17], [59, 3], [58, 2], [57, 1], [56, 0], [0, 17], [0, 3], [1, 18], [1, 2], [2, 19], [2, 1], [3, 20], [3, 0], [4, 21], [5, 22], [6, 23], [7, 24], [53, 24], [54, 23], [55, 22], [56, 21], [57, 20], [58, 19], [59, 18], [59, 2], [58, 1], [57, 0], [0, 18], [0, 2], [1, 19], [1, 1], [2, 20], [2, 0], [3, 21], [4, 22], [5, 23], [6, 24], [54, 24], [55, 23], [56, 22], [57, 21], [58, 20], [59, 19], [59, 1], [58, 0], [0, 19], [0, 1], [1, 20], [1, 0], [2, 21], [3, 22], [4, 23], [5, 24], [55, 24], [56, 23], [57, 22], [58, 21], [59, 20], [59, 0], [0, 20], [0, 0], [1, 21], [2, 22], [3, 23], [4, 24], [56, 24], [57, 23], [58, 22], [59, 21], [0, 21], [1, 22], [2, 23], [3, 24], [57, 24], [58, 23], [59, 22], [0, 22], [1, 23], [2, 24], [58, 24], [59, 23], [0, 23], [1, 24], [59, 24], [0, 24]]"
      },
      {
        "input": "rows = 15, cols = 10, rCenter = 2, cCenter = 8",
        "output": "[[2, 8], [1, 8], [2, 9], [3, 8], [2, 7], [0, 8], [1, 9], [1, 7], [3, 9], [4, 8], [3, 7], [2, 6], [0, 9], [0, 7], [1, 6], [4, 9], [5, 8], [4, 7], [3, 6], [2, 5], [0, 6], [1, 5], [5, 9], [6, 8], [5, 7], [4, 6], [3, 5], [2, 4], [0, 5], [1, 4], [6, 9], [7, 8], [6, 7], [5, 6], [4, 5], [3, 4], [2, 3], [0, 4], [1, 3], [7, 9], [8, 8], [7, 7], [6, 6], [5, 5], [4, 4], [3, 3], [2, 2], [0, 3], [1, 2], [8, 9], [9, 8], [8, 7], [7, 6], [6, 5], [5, 4], [4, 3], [3, 2], [2, 1], [0, 2], [1, 1], [9, 9], [10, 8], [9, 7], [8, 6], [7, 5], [6, 4], [5, 3], [4, 2], [3, 1], [2, 0], [0, 1], [1, 0], [10, 9], [11, 8], [10, 7], [9, 6], [8, 5], [7, 4], [6, 3], [5, 2], [4, 1], [3, 0], [0, 0], [11, 9], [12, 8], [11, 7], [10, 6], [9, 5], [8, 4], [7, 3], [6, 2], [5, 1], [4, 0], [12, 9], [13, 8], [12, 7], [11, 6], [10, 5], [9, 4], [8, 3], [7, 2], [6, 1], [5, 0], [13, 9], [14, 8], [13, 7], [12, 6], [11, 5], [10, 4], [9, 3], [8, 2], [7, 1], [6, 0], [14, 9], [14, 7], [13, 6], [12, 5], [11, 4], [10, 3], [9, 2], [8, 1], [7, 0], [14, 6], [13, 5], [12, 4], [11, 3], [10, 2], [9, 1], [8, 0], [14, 5], [13, 4], [12, 3], [11, 2], [10, 1], [9, 0], [14, 4], [13, 3], [12, 2], [11, 1], [10, 0], [14, 3], [13, 2], [12, 1], [11, 0], [14, 2], [13, 1], [12, 0], [14, 1], [13, 0], [14, 0]]"
      },
      {
        "input": "rows = 5, cols = 8, rCenter = 0, cCenter = 7",
        "output": "[[0, 7], [1, 7], [0, 6], [2, 7], [1, 6], [0, 5], [3, 7], [2, 6], [1, 5], [0, 4], [4, 7], [3, 6], [2, 5], [1, 4], [0, 3], [4, 6], [3, 5], [2, 4], [1, 3], [0, 2], [4, 5], [3, 4], [2, 3], [1, 2], [0, 1], [4, 4], [3, 3], [2, 2], [1, 1], [0, 0], [4, 3], [3, 2], [2, 1], [1, 0], [4, 2], [3, 1], [2, 0], [4, 1], [3, 0], [4, 0]]"
      },
      {
        "input": "rows = 1, cols = 10, rCenter = 0, cCenter = 5",
        "output": "[[0, 5], [0, 6], [0, 4], [0, 7], [0, 3], [0, 8], [0, 2], [0, 9], [0, 1], [0, 0]]"
      },
      {
        "input": "rows = 9, cols = 9, rCenter = 8, cCenter = 8",
        "output": "[[8, 8], [7, 8], [8, 7], [6, 8], [7, 7], [8, 6], [5, 8], [6, 7], [7, 6], [8, 5], [4, 8], [5, 7], [6, 6], [7, 5], [8, 4], [3, 8], [4, 7], [5, 6], [6, 5], [7, 4], [8, 3], [2, 8], [3, 7], [4, 6], [5, 5], [6, 4], [7, 3], [8, 2], [1, 8], [2, 7], [3, 6], [4, 5], [5, 4], [6, 3], [7, 2], [8, 1], [0, 8], [1, 7], [2, 6], [3, 5], [4, 4], [5, 3], [6, 2], [7, 1], [8, 0], [0, 7], [1, 6], [2, 5], [3, 4], [4, 3], [5, 2], [6, 1], [7, 0], [0, 6], [1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 0], [0, 5], [1, 4], [2, 3], [3, 2], [4, 1], [5, 0], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 2], [1, 1], [2, 0], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 6, cols = 4, rCenter = 3, cCenter = 3",
        "output": "[[3, 3], [2, 3], [4, 3], [3, 2], [1, 3], [2, 2], [5, 3], [4, 2], [3, 1], [0, 3], [1, 2], [2, 1], [5, 2], [4, 1], [3, 0], [0, 2], [1, 1], [2, 0], [5, 1], [4, 0], [0, 1], [1, 0], [5, 0], [0, 0]]"
      },
      {
        "input": "rows = 50, cols = 50, rCenter = 0, cCenter = 0",
        "output": "[[0, 0], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0], [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [0, 5], [1, 4], [2, 3], [3, 2], [4, 1], [5, 0], [0, 6], [1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 0], [0, 7], [1, 6], [2, 5], [3, 4], [4, 3], [5, 2], [6, 1], [7, 0], [0, 8], [1, 7], [2, 6], [3, 5], [4, 4], [5, 3], [6, 2], [7, 1], [8, 0], [0, 9], [1, 8], [2, 7], [3, 6], [4, 5], [5, 4], [6, 3], [7, 2], [8, 1], [9, 0], [0, 10], [1, 9], [2, 8], [3, 7], [4, 6], [5, 5], [6, 4], [7, 3], [8, 2], [9, 1], [10, 0], [0, 11], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [6, 5], [7, 4], [8, 3], [9, 2], [10, 1], [11, 0], [0, 12], [1, 11], [2, 10], [3, 9], [4, 8], [5, 7], [6, 6], [7, 5], [8, 4], [9, 3], [10, 2], [11, 1], [12, 0], [0, 13], [1, 12], [2, 11], [3, 10], [4, 9], [5, 8], [6, 7], [7, 6], [8, 5], [9, 4], [10, 3], [11, 2], [12, 1], [13, 0], [0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8], [7, 7], [8, 6], [9, 5], [10, 4], [11, 3], [12, 2], [13, 1], [14, 0], [0, 15], [1, 14], [2, 13], [3, 12], [4, 11], [5, 10], [6, 9], [7, 8], [8, 7], [9, 6], [10, 5], [11, 4], [12, 3], [13, 2], [14, 1], [15, 0], [0, 16], [1, 15], [2, 14], [3, 13], [4, 12], [5, 11], [6, 10], [7, 9], [8, 8], [9, 7], [10, 6], [11, 5], [12, 4], [13, 3], [14, 2], [15, 1], [16, 0], [0, 17], [1, 16], [2, 15], [3, 14], [4, 13], [5, 12], [6, 11], [7, 10], [8, 9], [9, 8], [10, 7], [11, 6], [12, 5], [13, 4], [14, 3], [15, 2], [16, 1], [17, 0], [0, 18], [1, 17], [2, 16], [3, 15], [4, 14], [5, 13], [6, 12], [7, 11], [8, 10], [9, 9], [10, 8], [11, 7], [12, 6], [13, 5], [14, 4], [15, 3], [16, 2], [17, 1], [18, 0], [0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10], [10, 9], [11, 8], [12, 7], [13, 6], [14, 5], [15, 4], [16, 3], [17, 2], [18, 1], [19, 0], [0, 20], [1, 19], [2, 18], [3, 17], [4, 16], [5, 15], [6, 14], [7, 13], [8, 12], [9, 11], [10, 10], [11, 9], [12, 8], [13, 7], [14, 6], [15, 5], [16, 4], [17, 3], [18, 2], [19, 1], [20, 0], [0, 21], [1, 20], [2, 19], [3, 18], [4, 17], [5, 16], [6, 15], [7, 14], [8, 13], [9, 12], [10, 11], [11, 10], [12, 9], [13, 8], [14, 7], [15, 6], [16, 5], [17, 4], [18, 3], [19, 2], [20, 1], [21, 0], [0, 22], [1, 21], [2, 20], [3, 19], [4, 18], [5, 17], [6, 16], [7, 15], [8, 14], [9, 13], [10, 12], [11, 11], [12, 10], [13, 9], [14, 8], [15, 7], [16, 6], [17, 5], [18, 4], [19, 3], [20, 2], [21, 1], [22, 0], [0, 23], [1, 22], [2, 21], [3, 20], [4, 19], [5, 18], [6, 17], [7, 16], [8, 15], [9, 14], [10, 13], [11, 12], [12, 11], [13, 10], [14, 9], [15, 8], [16, 7], [17, 6], [18, 5], [19, 4], [20, 3], [21, 2], [22, 1], [23, 0], [0, 24], [1, 23], [2, 22], [3, 21], [4, 20], [5, 19], [6, 18], [7, 17], [8, 16], [9, 15], [10, 14], [11, 13], [12, 12], [13, 11], [14, 10], [15, 9], [16, 8], [17, 7], [18, 6], [19, 5], [20, 4], [21, 3], [22, 2], [23, 1], [24, 0], [0, 25], [1, 24], [2, 23], [3, 22], [4, 21], [5, 20], [6, 19], [7, 18], [8, 17], [9, 16], [10, 15], [11, 14], [12, 13], [13, 12], [14, 11], [15, 10], [16, 9], [17, 8], [18, 7], [19, 6], [20, 5], [21, 4], [22, 3], [23, 2], [24, 1], [25, 0], [0, 26], [1, 25], [2, 24], [3, 23], [4, 22], [5, 21], [6, 20], [7, 19], [8, 18], [9, 17], [10, 16], [11, 15], [12, 14], [13, 13], [14, 12], [15, 11], [16, 10], [17, 9], [18, 8], [19, 7], [20, 6], [21, 5], [22, 4], [23, 3], [24, 2], [25, 1], [26, 0], [0, 27], [1, 26], [2, 25], [3, 24], [4, 23], [5, 22], [6, 21], [7, 20], [8, 19], [9, 18], [10, 17], [11, 16], [12, 15], [13, 14], [14, 13], [15, 12], [16, 11], [17, 10], [18, 9], [19, 8], [20, 7], [21, 6], [22, 5], [23, 4], [24, 3], [25, 2], [26, 1], [27, 0], [0, 28], [1, 27], [2, 26], [3, 25], [4, 24], [5, 23], [6, 22], [7, 21], [8, 20], [9, 19], [10, 18], [11, 17], [12, 16], [13, 15], [14, 14], [15, 13], [16, 12], [17, 11], [18, 10], [19, 9], [20, 8], [21, 7], [22, 6], [23, 5], [24, 4], [25, 3], [26, 2], [27, 1], [28, 0], [0, 29], [1, 28], [2, 27], [3, 26], [4, 25], [5, 24], [6, 23], [7, 22], [8, 21], [9, 20], [10, 19], [11, 18], [12, 17], [13, 16], [14, 15], [15, 14], [16, 13], [17, 12], [18, 11], [19, 10], [20, 9], [21, 8], [22, 7], [23, 6], [24, 5], [25, 4], [26, 3], [27, 2], [28, 1], [29, 0], [0, 30], [1, 29], [2, 28], [3, 27], [4, 26], [5, 25], [6, 24], [7, 23], [8, 22], [9, 21], [10, 20], [11, 19], [12, 18], [13, 17], [14, 16], [15, 15], [16, 14], [17, 13], [18, 12], [19, 11], [20, 10], [21, 9], [22, 8], [23, 7], [24, 6], [25, 5], [26, 4], [27, 3], [28, 2], [29, 1], [30, 0], [0, 31], [1, 30], [2, 29], [3, 28], [4, 27], [5, 26], [6, 25], [7, 24], [8, 23], [9, 22], [10, 21], [11, 20], [12, 19], [13, 18], [14, 17], [15, 16], [16, 15], [17, 14], [18, 13], [19, 12], [20, 11], [21, 10], [22, 9], [23, 8], [24, 7], [25, 6], [26, 5], [27, 4], [28, 3], [29, 2], [30, 1], [31, 0], [0, 32], [1, 31], [2, 30], [3, 29], [4, 28], [5, 27], [6, 26], [7, 25], [8, 24], [9, 23], [10, 22], [11, 21], [12, 20], [13, 19], [14, 18], [15, 17], [16, 16], [17, 15], [18, 14], [19, 13], [20, 12], [21, 11], [22, 10], [23, 9], [24, 8], [25, 7], [26, 6], [27, 5], [28, 4], [29, 3], [30, 2], [31, 1], [32, 0], [0, 33], [1, 32], [2, 31], [3, 30], [4, 29], [5, 28], [6, 27], [7, 26], [8, 25], [9, 24], [10, 23], [11, 22], [12, 21], [13, 20], [14, 19], [15, 18], [16, 17], [17, 16], [18, 15], [19, 14], [20, 13], [21, 12], [22, 11], [23, 10], [24, 9], [25, 8], [26, 7], [27, 6], [28, 5], [29, 4], [30, 3], [31, 2], [32, 1], [33, 0], [0, 34], [1, 33], [2, 32], [3, 31], [4, 30], [5, 29], [6, 28], [7, 27], [8, 26], [9, 25], [10, 24], [11, 23], [12, 22], [13, 21], [14, 20], [15, 19], [16, 18], [17, 17], [18, 16], [19, 15], [20, 14], [21, 13], [22, 12], [23, 11], [24, 10], [25, 9], [26, 8], [27, 7], [28, 6], [29, 5], [30, 4], [31, 3], [32, 2], [33, 1], [34, 0], [0, 35], [1, 34], [2, 33], [3, 32], [4, 31], [5, 30], [6, 29], [7, 28], [8, 27], [9, 26], [10, 25], [11, 24], [12, 23], [13, 22], [14, 21], [15, 20], [16, 19], [17, 18], [18, 17], [19, 16], [20, 15], [21, 14], [22, 13], [23, 12], [24, 11], [25, 10], [26, 9], [27, 8], [28, 7], [29, 6], [30, 5], [31, 4], [32, 3], [33, 2], [34, 1], [35, 0], [0, 36], [1, 35], [2, 34], [3, 33], [4, 32], [5, 31], [6, 30], [7, 29], [8, 28], [9, 27], [10, 26], [11, 25], [12, 24], [13, 23], [14, 22], [15, 21], [16, 20], [17, 19], [18, 18], [19, 17], [20, 16], [21, 15], [22, 14], [23, 13], [24, 12], [25, 11], [26, 10], [27, 9], [28, 8], [29, 7], [30, 6], [31, 5], [32, 4], [33, 3], [34, 2], [35, 1], [36, 0], [0, 37], [1, 36], [2, 35], [3, 34], [4, 33], [5, 32], [6, 31], [7, 30], [8, 29], [9, 28], [10, 27], [11, 26], [12, 25], [13, 24], [14, 23], [15, 22], [16, 21], [17, 20], [18, 19], [19, 18], [20, 17], [21, 16], [22, 15], [23, 14], [24, 13], [25, 12], [26, 11], [27, 10], [28, 9], [29, 8], [30, 7], [31, 6], [32, 5], [33, 4], [34, 3], [35, 2], [36, 1], [37, 0], [0, 38], [1, 37], [2, 36], [3, 35], [4, 34], [5, 33], [6, 32], [7, 31], [8, 30], [9, 29], [10, 28], [11, 27], [12, 26], [13, 25], [14, 24], [15, 23], [16, 22], [17, 21], [18, 20], [19, 19], [20, 18], [21, 17], [22, 16], [23, 15], [24, 14], [25, 13], [26, 12], [27, 11], [28, 10], [29, 9], [30, 8], [31, 7], [32, 6], [33, 5], [34, 4], [35, 3], [36, 2], [37, 1], [38, 0], [0, 39], [1, 38], [2, 37], [3, 36], [4, 35], [5, 34], [6, 33], [7, 32], [8, 31], [9, 30], [10, 29], [11, 28], [12, 27], [13, 26], [14, 25], [15, 24], [16, 23], [17, 22], [18, 21], [19, 20], [20, 19], [21, 18], [22, 17], [23, 16], [24, 15], [25, 14], [26, 13], [27, 12], [28, 11], [29, 10], [30, 9], [31, 8], [32, 7], [33, 6], [34, 5], [35, 4], [36, 3], [37, 2], [38, 1], [39, 0], [0, 40], [1, 39], [2, 38], [3, 37], [4, 36], [5, 35], [6, 34], [7, 33], [8, 32], [9, 31], [10, 30], [11, 29], [12, 28], [13, 27], [14, 26], [15, 25], [16, 24], [17, 23], [18, 22], [19, 21], [20, 20], [21, 19], [22, 18], [23, 17], [24, 16], [25, 15], [26, 14], [27, 13], [28, 12], [29, 11], [30, 10], [31, 9], [32, 8], [33, 7], [34, 6], [35, 5], [36, 4], [37, 3], [38, 2], [39, 1], [40, 0], [0, 41], [1, 40], [2, 39], [3, 38], [4, 37], [5, 36], [6, 35], [7, 34], [8, 33], [9, 32], [10, 31], [11, 30], [12, 29], [13, 28], [14, 27], [15, 26], [16, 25], [17, 24], [18, 23], [19, 22], [20, 21], [21, 20], [22, 19], [23, 18], [24, 17], [25, 16], [26, 15], [27, 14], [28, 13], [29, 12], [30, 11], [31, 10], [32, 9], [33, 8], [34, 7], [35, 6], [36, 5], [37, 4], [38, 3], [39, 2], [40, 1], [41, 0], [0, 42], [1, 41], [2, 40], [3, 39], [4, 38], [5, 37], [6, 36], [7, 35], [8, 34], [9, 33], [10, 32], [11, 31], [12, 30], [13, 29], [14, 28], [15, 27], [16, 26], [17, 25], [18, 24], [19, 23], [20, 22], [21, 21], [22, 20], [23, 19], [24, 18], [25, 17], [26, 16], [27, 15], [28, 14], [29, 13], [30, 12], [31, 11], [32, 10], [33, 9], [34, 8], [35, 7], [36, 6], [37, 5], [38, 4], [39, 3], [40, 2], [41, 1], [42, 0], [0, 43], [1, 42], [2, 41], [3, 40], [4, 39], [5, 38], [6, 37], [7, 36], [8, 35], [9, 34], [10, 33], [11, 32], [12, 31], [13, 30], [14, 29], [15, 28], [16, 27], [17, 26], [18, 25], [19, 24], [20, 23], [21, 22], [22, 21], [23, 20], [24, 19], [25, 18], [26, 17], [27, 16], [28, 15], [29, 14], [30, 13], [31, 12], [32, 11], [33, 10], [34, 9], [35, 8], [36, 7], [37, 6], [38, 5], [39, 4], [40, 3], [41, 2], [42, 1], [43, 0], [0, 44], [1, 43], [2, 42], [3, 41], [4, 40], [5, 39], [6, 38], [7, 37], [8, 36], [9, 35], [10, 34], [11, 33], [12, 32], [13, 31], [14, 30], [15, 29], [16, 28], [17, 27], [18, 26], [19, 25], [20, 24], [21, 23], [22, 22], [23, 21], [24, 20], [25, 19], [26, 18], [27, 17], [28, 16], [29, 15], [30, 14], [31, 13], [32, 12], [33, 11], [34, 10], [35, 9], [36, 8], [37, 7], [38, 6], [39, 5], [40, 4], [41, 3], [42, 2], [43, 1], [44, 0], [0, 45], [1, 44], [2, 43], [3, 42], [4, 41], [5, 40], [6, 39], [7, 38], [8, 37], [9, 36], [10, 35], [11, 34], [12, 33], [13, 32], [14, 31], [15, 30], [16, 29], [17, 28], [18, 27], [19, 26], [20, 25], [21, 24], [22, 23], [23, 22], [24, 21], [25, 20], [26, 19], [27, 18], [28, 17], [29, 16], [30, 15], [31, 14], [32, 13], [33, 12], [34, 11], [35, 10], [36, 9], [37, 8], [38, 7], [39, 6], [40, 5], [41, 4], [42, 3], [43, 2], [44, 1], [45, 0], [0, 46], [1, 45], [2, 44], [3, 43], [4, 42], [5, 41], [6, 40], [7, 39], [8, 38], [9, 37], [10, 36], [11, 35], [12, 34], [13, 33], [14, 32], [15, 31], [16, 30], [17, 29], [18, 28], [19, 27], [20, 26], [21, 25], [22, 24], [23, 23], [24, 22], [25, 21], [26, 20], [27, 19], [28, 18], [29, 17], [30, 16], [31, 15], [32, 14], [33, 13], [34, 12], [35, 11], [36, 10], [37, 9], [38, 8], [39, 7], [40, 6], [41, 5], [42, 4], [43, 3], [44, 2], [45, 1], [46, 0], [0, 47], [1, 46], [2, 45], [3, 44], [4, 43], [5, 42], [6, 41], [7, 40], [8, 39], [9, 38], [10, 37], [11, 36], [12, 35], [13, 34], [14, 33], [15, 32], [16, 31], [17, 30], [18, 29], [19, 28], [20, 27], [21, 26], [22, 25], [23, 24], [24, 23], [25, 22], [26, 21], [27, 20], [28, 19], [29, 18], [30, 17], [31, 16], [32, 15], [33, 14], [34, 13], [35, 12], [36, 11], [37, 10], [38, 9], [39, 8], [40, 7], [41, 6], [42, 5], [43, 4], [44, 3], [45, 2], [46, 1], [47, 0], [0, 48], [1, 47], [2, 46], [3, 45], [4, 44], [5, 43], [6, 42], [7, 41], [8, 40], [9, 39], [10, 38], [11, 37], [12, 36], [13, 35], [14, 34], [15, 33], [16, 32], [17, 31], [18, 30], [19, 29], [20, 28], [21, 27], [22, 26], [23, 25], [24, 24], [25, 23], [26, 22], [27, 21], [28, 20], [29, 19], [30, 18], [31, 17], [32, 16], [33, 15], [34, 14], [35, 13], [36, 12], [37, 11], [38, 10], [39, 9], [40, 8], [41, 7], [42, 6], [43, 5], [44, 4], [45, 3], [46, 2], [47, 1], [48, 0], [0, 49], [1, 48], [2, 47], [3, 46], [4, 45], [5, 44], [6, 43], [7, 42], [8, 41], [9, 40], [10, 39], [11, 38], [12, 37], [13, 36], [14, 35], [15, 34], [16, 33], [17, 32], [18, 31], [19, 30], [20, 29], [21, 28], [22, 27], [23, 26], [24, 25], [25, 24], [26, 23], [27, 22], [28, 21], [29, 20], [30, 19], [31, 18], [32, 17], [33, 16], [34, 15], [35, 14], [36, 13], [37, 12], [38, 11], [39, 10], [40, 9], [41, 8], [42, 7], [43, 6], [44, 5], [45, 4], [46, 3], [47, 2], [48, 1], [49, 0], [1, 49], [2, 48], [3, 47], [4, 46], [5, 45], [6, 44], [7, 43], [8, 42], [9, 41], [10, 40], [11, 39], [12, 38], [13, 37], [14, 36], [15, 35], [16, 34], [17, 33], [18, 32], [19, 31], [20, 30], [21, 29], [22, 28], [23, 27], [24, 26], [25, 25], [26, 24], [27, 23], [28, 22], [29, 21], [30, 20], [31, 19], [32, 18], [33, 17], [34, 16], [35, 15], [36, 14], [37, 13], [38, 12], [39, 11], [40, 10], [41, 9], [42, 8], [43, 7], [44, 6], [45, 5], [46, 4], [47, 3], [48, 2], [49, 1], [2, 49], [3, 48], [4, 47], [5, 46], [6, 45], [7, 44], [8, 43], [9, 42], [10, 41], [11, 40], [12, 39], [13, 38], [14, 37], [15, 36], [16, 35], [17, 34], [18, 33], [19, 32], [20, 31], [21, 30], [22, 29], [23, 28], [24, 27], [25, 26], [26, 25], [27, 24], [28, 23], [29, 22], [30, 21], [31, 20], [32, 19], [33, 18], [34, 17], [35, 16], [36, 15], [37, 14], [38, 13], [39, 12], [40, 11], [41, 10], [42, 9], [43, 8], [44, 7], [45, 6], [46, 5], [47, 4], [48, 3], [49, 2], [3, 49], [4, 48], [5, 47], [6, 46], [7, 45], [8, 44], [9, 43], [10, 42], [11, 41], [12, 40], [13, 39], [14, 38], [15, 37], [16, 36], [17, 35], [18, 34], [19, 33], [20, 32], [21, 31], [22, 30], [23, 29], [24, 28], [25, 27], [26, 26], [27, 25], [28, 24], [29, 23], [30, 22], [31, 21], [32, 20], [33, 19], [34, 18], [35, 17], [36, 16], [37, 15], [38, 14], [39, 13], [40, 12], [41, 11], [42, 10], [43, 9], [44, 8], [45, 7], [46, 6], [47, 5], [48, 4], [49, 3], [4, 49], [5, 48], [6, 47], [7, 46], [8, 45], [9, 44], [10, 43], [11, 42], [12, 41], [13, 40], [14, 39], [15, 38], [16, 37], [17, 36], [18, 35], [19, 34], [20, 33], [21, 32], [22, 31], [23, 30], [24, 29], [25, 28], [26, 27], [27, 26], [28, 25], [29, 24], [30, 23], [31, 22], [32, 21], [33, 20], [34, 19], [35, 18], [36, 17], [37, 16], [38, 15], [39, 14], [40, 13], [41, 12], [42, 11], [43, 10], [44, 9], [45, 8], [46, 7], [47, 6], [48, 5], [49, 4], [5, 49], [6, 48], [7, 47], [8, 46], [9, 45], [10, 44], [11, 43], [12, 42], [13, 41], [14, 40], [15, 39], [16, 38], [17, 37], [18, 36], [19, 35], [20, 34], [21, 33], [22, 32], [23, 31], [24, 30], [25, 29], [26, 28], [27, 27], [28, 26], [29, 25], [30, 24], [31, 23], [32, 22], [33, 21], [34, 20], [35, 19], [36, 18], [37, 17], [38, 16], [39, 15], [40, 14], [41, 13], [42, 12], [43, 11], [44, 10], [45, 9], [46, 8], [47, 7], [48, 6], [49, 5], [6, 49], [7, 48], [8, 47], [9, 46], [10, 45], [11, 44], [12, 43], [13, 42], [14, 41], [15, 40], [16, 39], [17, 38], [18, 37], [19, 36], [20, 35], [21, 34], [22, 33], [23, 32], [24, 31], [25, 30], [26, 29], [27, 28], [28, 27], [29, 26], [30, 25], [31, 24], [32, 23], [33, 22], [34, 21], [35, 20], [36, 19], [37, 18], [38, 17], [39, 16], [40, 15], [41, 14], [42, 13], [43, 12], [44, 11], [45, 10], [46, 9], [47, 8], [48, 7], [49, 6], [7, 49], [8, 48], [9, 47], [10, 46], [11, 45], [12, 44], [13, 43], [14, 42], [15, 41], [16, 40], [17, 39], [18, 38], [19, 37], [20, 36], [21, 35], [22, 34], [23, 33], [24, 32], [25, 31], [26, 30], [27, 29], [28, 28], [29, 27], [30, 26], [31, 25], [32, 24], [33, 23], [34, 22], [35, 21], [36, 20], [37, 19], [38, 18], [39, 17], [40, 16], [41, 15], [42, 14], [43, 13], [44, 12], [45, 11], [46, 10], [47, 9], [48, 8], [49, 7], [8, 49], [9, 48], [10, 47], [11, 46], [12, 45], [13, 44], [14, 43], [15, 42], [16, 41], [17, 40], [18, 39], [19, 38], [20, 37], [21, 36], [22, 35], [23, 34], [24, 33], [25, 32], [26, 31], [27, 30], [28, 29], [29, 28], [30, 27], [31, 26], [32, 25], [33, 24], [34, 23], [35, 22], [36, 21], [37, 20], [38, 19], [39, 18], [40, 17], [41, 16], [42, 15], [43, 14], [44, 13], [45, 12], [46, 11], [47, 10], [48, 9], [49, 8], [9, 49], [10, 48], [11, 47], [12, 46], [13, 45], [14, 44], [15, 43], [16, 42], [17, 41], [18, 40], [19, 39], [20, 38], [21, 37], [22, 36], [23, 35], [24, 34], [25, 33], [26, 32], [27, 31], [28, 30], [29, 29], [30, 28], [31, 27], [32, 26], [33, 25], [34, 24], [35, 23], [36, 22], [37, 21], [38, 20], [39, 19], [40, 18], [41, 17], [42, 16], [43, 15], [44, 14], [45, 13], [46, 12], [47, 11], [48, 10], [49, 9], [10, 49], [11, 48], [12, 47], [13, 46], [14, 45], [15, 44], [16, 43], [17, 42], [18, 41], [19, 40], [20, 39], [21, 38], [22, 37], [23, 36], [24, 35], [25, 34], [26, 33], [27, 32], [28, 31], [29, 30], [30, 29], [31, 28], [32, 27], [33, 26], [34, 25], [35, 24], [36, 23], [37, 22], [38, 21], [39, 20], [40, 19], [41, 18], [42, 17], [43, 16], [44, 15], [45, 14], [46, 13], [47, 12], [48, 11], [49, 10], [11, 49], [12, 48], [13, 47], [14, 46], [15, 45], [16, 44], [17, 43], [18, 42], [19, 41], [20, 40], [21, 39], [22, 38], [23, 37], [24, 36], [25, 35], [26, 34], [27, 33], [28, 32], [29, 31], [30, 30], [31, 29], [32, 28], [33, 27], [34, 26], [35, 25], [36, 24], [37, 23], [38, 22], [39, 21], [40, 20], [41, 19], [42, 18], [43, 17], [44, 16], [45, 15], [46, 14], [47, 13], [48, 12], [49, 11], [12, 49], [13, 48], [14, 47], [15, 46], [16, 45], [17, 44], [18, 43], [19, 42], [20, 41], [21, 40], [22, 39], [23, 38], [24, 37], [25, 36], [26, 35], [27, 34], [28, 33], [29, 32], [30, 31], [31, 30], [32, 29], [33, 28], [34, 27], [35, 26], [36, 25], [37, 24], [38, 23], [39, 22], [40, 21], [41, 20], [42, 19], [43, 18], [44, 17], [45, 16], [46, 15], [47, 14], [48, 13], [49, 12], [13, 49], [14, 48], [15, 47], [16, 46], [17, 45], [18, 44], [19, 43], [20, 42], [21, 41], [22, 40], [23, 39], [24, 38], [25, 37], [26, 36], [27, 35], [28, 34], [29, 33], [30, 32], [31, 31], [32, 30], [33, 29], [34, 28], [35, 27], [36, 26], [37, 25], [38, 24], [39, 23], [40, 22], [41, 21], [42, 20], [43, 19], [44, 18], [45, 17], [46, 16], [47, 15], [48, 14], [49, 13], [14, 49], [15, 48], [16, 47], [17, 46], [18, 45], [19, 44], [20, 43], [21, 42], [22, 41], [23, 40], [24, 39], [25, 38], [26, 37], [27, 36], [28, 35], [29, 34], [30, 33], [31, 32], [32, 31], [33, 30], [34, 29], [35, 28], [36, 27], [37, 26], [38, 25], [39, 24], [40, 23], [41, 22], [42, 21], [43, 20], [44, 19], [45, 18], [46, 17], [47, 16], [48, 15], [49, 14], [15, 49], [16, 48], [17, 47], [18, 46], [19, 45], [20, 44], [21, 43], [22, 42], [23, 41], [24, 40], [25, 39], [26, 38], [27, 37], [28, 36], [29, 35], [30, 34], [31, 33], [32, 32], [33, 31], [34, 30], [35, 29], [36, 28], [37, 27], [38, 26], [39, 25], [40, 24], [41, 23], [42, 22], [43, 21], [44, 20], [45, 19], [46, 18], [47, 17], [48, 16], [49, 15], [16, 49], [17, 48], [18, 47], [19, 46], [20, 45], [21, 44], [22, 43], [23, 42], [24, 41], [25, 40], [26, 39], [27, 38], [28, 37], [29, 36], [30, 35], [31, 34], [32, 33], [33, 32], [34, 31], [35, 30], [36, 29], [37, 28], [38, 27], [39, 26], [40, 25], [41, 24], [42, 23], [43, 22], [44, 21], [45, 20], [46, 19], [47, 18], [48, 17], [49, 16], [17, 49], [18, 48], [19, 47], [20, 46], [21, 45], [22, 44], [23, 43], [24, 42], [25, 41], [26, 40], [27, 39], [28, 38], [29, 37], [30, 36], [31, 35], [32, 34], [33, 33], [34, 32], [35, 31], [36, 30], [37, 29], [38, 28], [39, 27], [40, 26], [41, 25], [42, 24], [43, 23], [44, 22], [45, 21], [46, 20], [47, 19], [48, 18], [49, 17], [18, 49], [19, 48], [20, 47], [21, 46], [22, 45], [23, 44], [24, 43], [25, 42], [26, 41], [27, 40], [28, 39], [29, 38], [30, 37], [31, 36], [32, 35], [33, 34], [34, 33], [35, 32], [36, 31], [37, 30], [38, 29], [39, 28], [40, 27], [41, 26], [42, 25], [43, 24], [44, 23], [45, 22], [46, 21], [47, 20], [48, 19], [49, 18], [19, 49], [20, 48], [21, 47], [22, 46], [23, 45], [24, 44], [25, 43], [26, 42], [27, 41], [28, 40], [29, 39], [30, 38], [31, 37], [32, 36], [33, 35], [34, 34], [35, 33], [36, 32], [37, 31], [38, 30], [39, 29], [40, 28], [41, 27], [42, 26], [43, 25], [44, 24], [45, 23], [46, 22], [47, 21], [48, 20], [49, 19], [20, 49], [21, 48], [22, 47], [23, 46], [24, 45], [25, 44], [26, 43], [27, 42], [28, 41], [29, 40], [30, 39], [31, 38], [32, 37], [33, 36], [34, 35], [35, 34], [36, 33], [37, 32], [38, 31], [39, 30], [40, 29], [41, 28], [42, 27], [43, 26], [44, 25], [45, 24], [46, 23], [47, 22], [48, 21], [49, 20], [21, 49], [22, 48], [23, 47], [24, 46], [25, 45], [26, 44], [27, 43], [28, 42], [29, 41], [30, 40], [31, 39], [32, 38], [33, 37], [34, 36], [35, 35], [36, 34], [37, 33], [38, 32], [39, 31], [40, 30], [41, 29], [42, 28], [43, 27], [44, 26], [45, 25], [46, 24], [47, 23], [48, 22], [49, 21], [22, 49], [23, 48], [24, 47], [25, 46], [26, 45], [27, 44], [28, 43], [29, 42], [30, 41], [31, 40], [32, 39], [33, 38], [34, 37], [35, 36], [36, 35], [37, 34], [38, 33], [39, 32], [40, 31], [41, 30], [42, 29], [43, 28], [44, 27], [45, 26], [46, 25], [47, 24], [48, 23], [49, 22], [23, 49], [24, 48], [25, 47], [26, 46], [27, 45], [28, 44], [29, 43], [30, 42], [31, 41], [32, 40], [33, 39], [34, 38], [35, 37], [36, 36], [37, 35], [38, 34], [39, 33], [40, 32], [41, 31], [42, 30], [43, 29], [44, 28], [45, 27], [46, 26], [47, 25], [48, 24], [49, 23], [24, 49], [25, 48], [26, 47], [27, 46], [28, 45], [29, 44], [30, 43], [31, 42], [32, 41], [33, 40], [34, 39], [35, 38], [36, 37], [37, 36], [38, 35], [39, 34], [40, 33], [41, 32], [42, 31], [43, 30], [44, 29], [45, 28], [46, 27], [47, 26], [48, 25], [49, 24], [25, 49], [26, 48], [27, 47], [28, 46], [29, 45], [30, 44], [31, 43], [32, 42], [33, 41], [34, 40], [35, 39], [36, 38], [37, 37], [38, 36], [39, 35], [40, 34], [41, 33], [42, 32], [43, 31], [44, 30], [45, 29], [46, 28], [47, 27], [48, 26], [49, 25], [26, 49], [27, 48], [28, 47], [29, 46], [30, 45], [31, 44], [32, 43], [33, 42], [34, 41], [35, 40], [36, 39], [37, 38], [38, 37], [39, 36], [40, 35], [41, 34], [42, 33], [43, 32], [44, 31], [45, 30], [46, 29], [47, 28], [48, 27], [49, 26], [27, 49], [28, 48], [29, 47], [30, 46], [31, 45], [32, 44], [33, 43], [34, 42], [35, 41], [36, 40], [37, 39], [38, 38], [39, 37], [40, 36], [41, 35], [42, 34], [43, 33], [44, 32], [45, 31], [46, 30], [47, 29], [48, 28], [49, 27], [28, 49], [29, 48], [30, 47], [31, 46], [32, 45], [33, 44], [34, 43], [35, 42], [36, 41], [37, 40], [38, 39], [39, 38], [40, 37], [41, 36], [42, 35], [43, 34], [44, 33], [45, 32], [46, 31], [47, 30], [48, 29], [49, 28], [29, 49], [30, 48], [31, 47], [32, 46], [33, 45], [34, 44], [35, 43], [36, 42], [37, 41], [38, 40], [39, 39], [40, 38], [41, 37], [42, 36], [43, 35], [44, 34], [45, 33], [46, 32], [47, 31], [48, 30], [49, 29], [30, 49], [31, 48], [32, 47], [33, 46], [34, 45], [35, 44], [36, 43], [37, 42], [38, 41], [39, 40], [40, 39], [41, 38], [42, 37], [43, 36], [44, 35], [45, 34], [46, 33], [47, 32], [48, 31], [49, 30], [31, 49], [32, 48], [33, 47], [34, 46], [35, 45], [36, 44], [37, 43], [38, 42], [39, 41], [40, 40], [41, 39], [42, 38], [43, 37], [44, 36], [45, 35], [46, 34], [47, 33], [48, 32], [49, 31], [32, 49], [33, 48], [34, 47], [35, 46], [36, 45], [37, 44], [38, 43], [39, 42], [40, 41], [41, 40], [42, 39], [43, 38], [44, 37], [45, 36], [46, 35], [47, 34], [48, 33], [49, 32], [33, 49], [34, 48], [35, 47], [36, 46], [37, 45], [38, 44], [39, 43], [40, 42], [41, 41], [42, 40], [43, 39], [44, 38], [45, 37], [46, 36], [47, 35], [48, 34], [49, 33], [34, 49], [35, 48], [36, 47], [37, 46], [38, 45], [39, 44], [40, 43], [41, 42], [42, 41], [43, 40], [44, 39], [45, 38], [46, 37], [47, 36], [48, 35], [49, 34], [35, 49], [36, 48], [37, 47], [38, 46], [39, 45], [40, 44], [41, 43], [42, 42], [43, 41], [44, 40], [45, 39], [46, 38], [47, 37], [48, 36], [49, 35], [36, 49], [37, 48], [38, 47], [39, 46], [40, 45], [41, 44], [42, 43], [43, 42], [44, 41], [45, 40], [46, 39], [47, 38], [48, 37], [49, 36], [37, 49], [38, 48], [39, 47], [40, 46], [41, 45], [42, 44], [43, 43], [44, 42], [45, 41], [46, 40], [47, 39], [48, 38], [49, 37], [38, 49], [39, 48], [40, 47], [41, 46], [42, 45], [43, 44], [44, 43], [45, 42], [46, 41], [47, 40], [48, 39], [49, 38], [39, 49], [40, 48], [41, 47], [42, 46], [43, 45], [44, 44], [45, 43], [46, 42], [47, 41], [48, 40], [49, 39], [40, 49], [41, 48], [42, 47], [43, 46], [44, 45], [45, 44], [46, 43], [47, 42], [48, 41], [49, 40], [41, 49], [42, 48], [43, 47], [44, 46], [45, 45], [46, 44], [47, 43], [48, 42], [49, 41], [42, 49], [43, 48], [44, 47], [45, 46], [46, 45], [47, 44], [48, 43], [49, 42], [43, 49], [44, 48], [45, 47], [46, 46], [47, 45], [48, 44], [49, 43], [44, 49], [45, 48], [46, 47], [47, 46], [48, 45], [49, 44], [45, 49], [46, 48], [47, 47], [48, 46], [49, 45], [46, 49], [47, 48], [48, 47], [49, 46], [47, 49], [48, 48], [49, 47], [48, 49], [49, 48], [49, 49]]"
      },
      {
        "input": "rows = 4, cols = 6, rCenter = 0, cCenter = 5",
        "output": "[[0, 5], [1, 5], [0, 4], [2, 5], [1, 4], [0, 3], [3, 5], [2, 4], [1, 3], [0, 2], [3, 4], [2, 3], [1, 2], [0, 1], [3, 3], [2, 2], [1, 1], [0, 0], [3, 2], [2, 1], [1, 0], [3, 1], [2, 0], [3, 0]]"
      },
      {
        "input": "rows = 8, cols = 5, rCenter = 5, cCenter = 0",
        "output": "[[5, 0], [4, 0], [5, 1], [6, 0], [3, 0], [4, 1], [5, 2], [6, 1], [7, 0], [2, 0], [3, 1], [4, 2], [5, 3], [6, 2], [7, 1], [1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 3], [7, 2], [0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [6, 4], [7, 3], [0, 1], [1, 2], [2, 3], [3, 4], [7, 4], [0, 2], [1, 3], [2, 4], [0, 3], [1, 4], [0, 4]]"
      },
      {
        "input": "rows = 4, cols = 6, rCenter = 3, cCenter = 5",
        "output": "[[3, 5], [2, 5], [3, 4], [1, 5], [2, 4], [3, 3], [0, 5], [1, 4], [2, 3], [3, 2], [0, 4], [1, 3], [2, 2], [3, 1], [0, 3], [1, 2], [2, 1], [3, 0], [0, 2], [1, 1], [2, 0], [0, 1], [1, 0], [0, 0]]"
      },
      {
        "input": "rows = 7, cols = 3, rCenter = 3, cCenter = 1",
        "output": "[[3, 1], [2, 1], [3, 2], [4, 1], [3, 0], [1, 1], [2, 2], [2, 0], [4, 2], [5, 1], [4, 0], [0, 1], [1, 2], [1, 0], [5, 2], [6, 1], [5, 0], [0, 2], [0, 0], [6, 2], [6, 0]]"
      },
      {
        "input": "rows = 10, cols = 5, rCenter = 2, cCenter = 4",
        "output": "[[2, 4], [1, 4], [3, 4], [2, 3], [0, 4], [1, 3], [4, 4], [3, 3], [2, 2], [0, 3], [1, 2], [5, 4], [4, 3], [3, 2], [2, 1], [0, 2], [1, 1], [6, 4], [5, 3], [4, 2], [3, 1], [2, 0], [0, 1], [1, 0], [7, 4], [6, 3], [5, 2], [4, 1], [3, 0], [0, 0], [8, 4], [7, 3], [6, 2], [5, 1], [4, 0], [9, 4], [8, 3], [7, 2], [6, 1], [5, 0], [9, 3], [8, 2], [7, 1], [6, 0], [9, 2], [8, 1], [7, 0], [9, 1], [8, 0], [9, 0]]"
      },
      {
        "input": "rows = 9, cols = 6, rCenter = 3, cCenter = 2",
        "output": "[[3, 2], [2, 2], [3, 3], [4, 2], [3, 1], [1, 2], [2, 3], [2, 1], [3, 4], [4, 3], [5, 2], [4, 1], [3, 0], [0, 2], [1, 3], [1, 1], [2, 4], [2, 0], [3, 5], [4, 4], [5, 3], [6, 2], [5, 1], [4, 0], [0, 3], [0, 1], [1, 4], [1, 0], [2, 5], [4, 5], [5, 4], [6, 3], [7, 2], [6, 1], [5, 0], [0, 4], [0, 0], [1, 5], [5, 5], [6, 4], [7, 3], [8, 2], [7, 1], [6, 0], [0, 5], [6, 5], [7, 4], [8, 3], [8, 1], [7, 0], [7, 5], [8, 4], [8, 0], [8, 5]]"
      }
    ]
  },
  {
    "id": 1455,
    "difficulty": "Easy",
    "tags": [
      "Two Pointers",
      "String",
      "String Matching"
    ],
    "problemDescription": "Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence.\nReturn the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.\nA prefix of a string s is any leading contiguous substring of s.\n\u00a0\nExample 1:\n\nInput: sentence = \"i love eating burger\", searchWord = \"burg\"\nOutput: 4\nExplanation: \"burg\" is prefix of \"burger\" which is the 4th word in the sentence.\n\nExample 2:\n\nInput: sentence = \"this problem is an easy problem\", searchWord = \"pro\"\nOutput: 2\nExplanation: \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.\n\nExample 3:\n\nInput: sentence = \"i am tired\", searchWord = \"you\"\nOutput: -1\nExplanation: \"you\" is not a prefix of any word in the sentence.\n\n\u00a0\nConstraints:\n\n1 <= sentence.length <= 100\n1 <= searchWord.length <= 10\nsentence consists of lowercase English letters and spaces.\nsearchWord consists of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:\n        ",
    "testCases": [
      {
        "input": "sentence = \"a ab abc abd\", searchWord = \"a\"",
        "output": "1"
      },
      {
        "input": "sentence = \"abcde fghij klmno\", searchWord = \"mnop\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"find prefix quickly\", searchWord = \"qui\"",
        "output": "3"
      },
      {
        "input": "sentence = \"prefix test\", searchWord = \"prefix\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix test\", searchWord = \"testprefix\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"hello world\", searchWord = \"he\"",
        "output": "1"
      },
      {
        "input": "sentence = \"a aa aaa aaaa\", searchWord = \"aaaa\"",
        "output": "4"
      },
      {
        "input": "sentence = \"coding in python is fun\", searchWord = \"py\"",
        "output": "3"
      },
      {
        "input": "sentence = \"i love eating burger\", searchWord = \"burg\"",
        "output": "4"
      },
      {
        "input": "sentence = \"prefix prefixation prefixed pre\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"i am tired\", searchWord = \"you\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"example test case\", searchWord = \"exa\"",
        "output": "1"
      },
      {
        "input": "sentence = \"start end\", searchWord = \"sta\"",
        "output": "1"
      },
      {
        "input": "sentence = \"no match here\", searchWord = \"none\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"the quick brown fox jumps over the lazy dog\", searchWord = \"qui\"",
        "output": "2"
      },
      {
        "input": "sentence = \"coding in python\", searchWord = \"py\"",
        "output": "3"
      },
      {
        "input": "sentence = \"prefix test\", searchWord = \"fix\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"prefix test\", searchWord = \"test\"",
        "output": "2"
      },
      {
        "input": "sentence = \"abc def ghi\", searchWord = \"def\"",
        "output": "2"
      },
      {
        "input": "sentence = \"no matches here\", searchWord = \"match\"",
        "output": "2"
      },
      {
        "input": "sentence = \"all words unique\", searchWord = \"word\"",
        "output": "2"
      },
      {
        "input": "sentence = \"a aa aaa aaaa\", searchWord = \"aaa\"",
        "output": "3"
      },
      {
        "input": "sentence = \"a aa aaa aaaa\", searchWord = \"a\"",
        "output": "1"
      },
      {
        "input": "sentence = \"unique words only here\", searchWord = \"word\"",
        "output": "2"
      },
      {
        "input": "sentence = \"prefix prefix prefix\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"one two three\", searchWord = \"four\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"prefix test\", searchWord = \"tes\"",
        "output": "2"
      },
      {
        "input": "sentence = \"a aa aaa aaaa\", searchWord = \"aa\"",
        "output": "2"
      },
      {
        "input": "sentence = \"make america great again\", searchWord = \"am\"",
        "output": "2"
      },
      {
        "input": "sentence = \"prefix is the start\", searchWord = \"start\"",
        "output": "4"
      },
      {
        "input": "sentence = \"a b c d e f g\", searchWord = \"g\"",
        "output": "7"
      },
      {
        "input": "sentence = \"find the prefix\", searchWord = \"pre\"",
        "output": "3"
      },
      {
        "input": "sentence = \"this problem is an easy problem\", searchWord = \"pro\"",
        "output": "2"
      },
      {
        "input": "sentence = \"last word match\", searchWord = \"match\"",
        "output": "3"
      },
      {
        "input": "sentence = \"prefix test\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"a ab abc abcd abcde\", searchWord = \"abc\"",
        "output": "3"
      },
      {
        "input": "sentence = \"mississippi missouri\", searchWord = \"miss\"",
        "output": "1"
      },
      {
        "input": "sentence = \"a aa aaa aaaa\", searchWord = \"aaaaa\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"multiple matches match matcher matching\", searchWord = \"mat\"",
        "output": "2"
      },
      {
        "input": "sentence = \"introduction to the world of algorithms and datastructures\", searchWord = \"data\"",
        "output": "8"
      },
      {
        "input": "sentence = \"abcdefghijklmnopqrstuvwxyz\", searchWord = \"abc\"",
        "output": "1"
      },
      {
        "input": "sentence = \"mississippi missouri missing\", searchWord = \"miss\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix is present in the prefix\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"unique words only unique\", searchWord = \"uniq\"",
        "output": "1"
      },
      {
        "input": "sentence = \"look at these examples\", searchWord = \"these\"",
        "output": "3"
      },
      {
        "input": "sentence = \"unique words only here\", searchWord = \"only\"",
        "output": "3"
      },
      {
        "input": "sentence = \"prefix suffix prefixsuffix\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"testing for edge cases with different words\", searchWord = \"dif\"",
        "output": "6"
      },
      {
        "input": "sentence = \"python java c++ c#\", searchWord = \"c\"",
        "output": "3"
      },
      {
        "input": "sentence = \"one two three four five six seven eight nine ten\", searchWord = \"ten\"",
        "output": "10"
      },
      {
        "input": "sentence = \"aaaaa aaaaa aaaaa aaaaa\", searchWord = \"aaaa\"",
        "output": "1"
      },
      {
        "input": "sentence = \"algorithm datastructure code compiler bytecode\", searchWord = \"byte\"",
        "output": "5"
      },
      {
        "input": "sentence = \"finding exact match in the sentence\", searchWord = \"exac\"",
        "output": "2"
      },
      {
        "input": "sentence = \"hello world from the other side\", searchWord = \"from\"",
        "output": "3"
      },
      {
        "input": "sentence = \"singleword\", searchWord = \"single\"",
        "output": "1"
      },
      {
        "input": "sentence = \"this is a very very long sentence to test the code properly\", searchWord = \"very\"",
        "output": "4"
      },
      {
        "input": "sentence = \"multiple occurrences of the same prefix\", searchWord = \"same\"",
        "output": "5"
      },
      {
        "input": "sentence = \"prefix testing with prefix prefix prefix\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"overlap overlapping overlapped overlap\", searchWord = \"overl\"",
        "output": "1"
      },
      {
        "input": "sentence = \"find the correct index\", searchWord = \"cor\"",
        "output": "3"
      },
      {
        "input": "sentence = \"python programming is powerful\", searchWord = \"pro\"",
        "output": "2"
      },
      {
        "input": "sentence = \"boundary conditions need testing\", searchWord = \"test\"",
        "output": "4"
      },
      {
        "input": "sentence = \"algorithm and data structures are important\", searchWord = \"and\"",
        "output": "2"
      },
      {
        "input": "sentence = \"substring matching problem\", searchWord = \"match\"",
        "output": "2"
      },
      {
        "input": "sentence = \"pneumonoultramicroscopicsilicovolcanoconiosis pneumonoultramicroscopicsilicovolcanoconiosis\", searchWord = \"pneumono\"",
        "output": "1"
      },
      {
        "input": "sentence = \"hello world hello universe\", searchWord = \"he\"",
        "output": "1"
      },
      {
        "input": "sentence = \"algorithm datastructure programming language compiler\", searchWord = \"pro\"",
        "output": "3"
      },
      {
        "input": "sentence = \"uniquewordsinthesentence\", searchWord = \"words\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"prefixprefixprefixprefix\", searchWord = \"pref\"",
        "output": "1"
      },
      {
        "input": "sentence = \"quick brown fox jumps over the lazy dog\", searchWord = \"qu\"",
        "output": "1"
      },
      {
        "input": "sentence = \"continuous conversation connection component\", searchWord = \"con\"",
        "output": "1"
      },
      {
        "input": "sentence = \"small big medium small\", searchWord = \"sm\"",
        "output": "1"
      },
      {
        "input": "sentence = \"algorithm and data structures\", searchWord = \"alg\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix problem prefixing prefixer\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"short longword reallylongword evenlongerword\", searchWord = \"long\"",
        "output": "2"
      },
      {
        "input": "sentence = \"binary search quicksort mergesort heapsort\", searchWord = \"sort\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"one two three four five six seven eight nine ten\", searchWord = \"fi\"",
        "output": "5"
      },
      {
        "input": "sentence = \"aaaaa aaaa aa a\", searchWord = \"a\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix search in a list of words\", searchWord = \"sea\"",
        "output": "2"
      },
      {
        "input": "sentence = \"testing boundary conditions\", searchWord = \"boundary\"",
        "output": "2"
      },
      {
        "input": "sentence = \"testing edgecases with variouslengthwords\", searchWord = \"var\"",
        "output": "4"
      },
      {
        "input": "sentence = \"very very long sentence with many words to test the function\", searchWord = \"very\"",
        "output": "1"
      },
      {
        "input": "sentence = \"repeated repeated repeated\", searchWord = \"rep\"",
        "output": "1"
      },
      {
        "input": "sentence = \"searching for a longprefixword\", searchWord = \"longprefix\"",
        "output": "4"
      },
      {
        "input": "sentence = \"an apple a day keeps the doctor away\", searchWord = \"app\"",
        "output": "2"
      },
      {
        "input": "sentence = \"sun moon stars planets galaxies blackholes nebulas\", searchWord = \"black\"",
        "output": "6"
      },
      {
        "input": "sentence = \"every good boy does fine great boys deserve fine gifts\", searchWord = \"fi\"",
        "output": "5"
      },
      {
        "input": "sentence = \"abcdefgh abcdefghij abcdefghijk abcdefghijkl\", searchWord = \"abcdefg\"",
        "output": "1"
      },
      {
        "input": "sentence = \"another example to check\", searchWord = \"to\"",
        "output": "3"
      },
      {
        "input": "sentence = \"this is a simple test to check for prefix matching\", searchWord = \"tes\"",
        "output": "5"
      },
      {
        "input": "sentence = \"searching for exact prefix\", searchWord = \"sea\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix prefix prefix prefix\", searchWord = \"pref\"",
        "output": "1"
      },
      {
        "input": "sentence = \"this is a simple sentence for testing\", searchWord = \"simple\"",
        "output": "4"
      },
      {
        "input": "sentence = \"hiddenprefixword is here\", searchWord = \"hidden\"",
        "output": "1"
      },
      {
        "input": "sentence = \"banana apple banana apple banana\", searchWord = \"ba\"",
        "output": "1"
      },
      {
        "input": "sentence = \"words with multiple spaces\", searchWord = \"mul\"",
        "output": "3"
      },
      {
        "input": "sentence = \"algorithm datastructure programming language\", searchWord = \"pro\"",
        "output": "3"
      },
      {
        "input": "sentence = \"prefixprefixprefixprefixprefix\", searchWord = \"prefix\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix prefix prefix prefix prefix\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"complex problem requiring careful thought\", searchWord = \"com\"",
        "output": "1"
      },
      {
        "input": "sentence = \"random words with no match\", searchWord = \"nomatch\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"python programming py pyth pytho\", searchWord = \"py\"",
        "output": "1"
      },
      {
        "input": "sentence = \"abcd efgh ijkl mnop qrst uvwx yz\", searchWord = \"yz\"",
        "output": "7"
      },
      {
        "input": "sentence = \"findingprefixsinthesentence\", searchWord = \"finding\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix matching is important for search engines\", searchWord = \"search\"",
        "output": "6"
      },
      {
        "input": "sentence = \"abcdefghij abcdefghij abcdefghij\", searchWord = \"abcdefghijk\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"abracadabra abracadabra abracadabra\", searchWord = \"abra\"",
        "output": "1"
      },
      {
        "input": "sentence = \"nonmatchingprefix prefix\", searchWord = \"non\"",
        "output": "1"
      },
      {
        "input": "sentence = \"finding the first occurrence firstness\", searchWord = \"fir\"",
        "output": "3"
      },
      {
        "input": "sentence = \"prefix matching problem prefixing preposition\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"none of these should match\", searchWord = \"non\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix prefixing prefixation prefixed\", searchWord = \"prefix\"",
        "output": "1"
      },
      {
        "input": "sentence = \"multiple occurrences of a word word\", searchWord = \"word\"",
        "output": "5"
      },
      {
        "input": "sentence = \"all words are different\", searchWord = \"dif\"",
        "output": "4"
      },
      {
        "input": "sentence = \"prefixes are important in computer science\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"mismatch mismatching mismatches\", searchWord = \"mis\"",
        "output": "1"
      },
      {
        "input": "sentence = \"the quick brown fox jumps over the lazy dog\", searchWord = \"do\"",
        "output": "9"
      },
      {
        "input": "sentence = \"xy xxy xxxy xxxxy xxxxyy xxxxyyy\", searchWord = \"xxxxy\"",
        "output": "4"
      },
      {
        "input": "sentence = \"the quick brown fox jumps over the lazy dog\", searchWord = \"dog\"",
        "output": "9"
      },
      {
        "input": "sentence = \"repeated repeated repeated repeated\", searchWord = \"repeat\"",
        "output": "1"
      },
      {
        "input": "sentence = \"quick brown fox jumps over lazy dog\", searchWord = \"quic\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefixprefixprefix prefixprefix prefix pre prefixing\", searchWord = \"prefixp\"",
        "output": "1"
      },
      {
        "input": "sentence = \"ab ac ad ae af ag ah ai aj\", searchWord = \"a\"",
        "output": "1"
      },
      {
        "input": "sentence = \"this is a simple test case\", searchWord = \"sim\"",
        "output": "4"
      },
      {
        "input": "sentence = \"prefixprefix prefixprefixer prefixprefixing\", searchWord = \"prefixpre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"unique words with no match\", searchWord = \"xyz\"",
        "output": "-1"
      },
      {
        "input": "sentence = \"abracadabra abracadabra abracadabra\", searchWord = \"abrac\"",
        "output": "1"
      },
      {
        "input": "sentence = \"continuous integration and continuous delivery\", searchWord = \"cont\"",
        "output": "1"
      },
      {
        "input": "sentence = \"searching for the prefix within\", searchWord = \"with\"",
        "output": "5"
      },
      {
        "input": "sentence = \"consecutive words with same start\", searchWord = \"con\"",
        "output": "1"
      },
      {
        "input": "sentence = \"short long longer longest\", searchWord = \"long\"",
        "output": "2"
      },
      {
        "input": "sentence = \"consistent consistent consistency consistently\", searchWord = \"consist\"",
        "output": "1"
      },
      {
        "input": "sentence = \"a short simple sentence\", searchWord = \"shor\"",
        "output": "2"
      },
      {
        "input": "sentence = \"searching for a unique prefix\", searchWord = \"uniq\"",
        "output": "4"
      },
      {
        "input": "sentence = \"a quick brown fox jumps over the lazy dog\", searchWord = \"fox\"",
        "output": "4"
      },
      {
        "input": "sentence = \"programming is fun and educational\", searchWord = \"edu\"",
        "output": "5"
      },
      {
        "input": "sentence = \"finding the veryfirst occurrence\", searchWord = \"ver\"",
        "output": "3"
      },
      {
        "input": "sentence = \"the quick brown fox jumps over the lazy dog\", searchWord = \"qu\"",
        "output": "2"
      },
      {
        "input": "sentence = \"prefix prefixing prefixed\", searchWord = \"prefix\"",
        "output": "1"
      },
      {
        "input": "sentence = \"boundary conditions are tricky\", searchWord = \"tri\"",
        "output": "4"
      },
      {
        "input": "sentence = \"complexity of the problem\", searchWord = \"com\"",
        "output": "1"
      },
      {
        "input": "sentence = \"a aa aaa aaaa aaaaa aaaaaa\", searchWord = \"aaaa\"",
        "output": "4"
      },
      {
        "input": "sentence = \"searching for a specific word\", searchWord = \"spec\"",
        "output": "4"
      },
      {
        "input": "sentence = \"multiple occurrences of the same prefix prefix prefix\", searchWord = \"pre\"",
        "output": "6"
      },
      {
        "input": "sentence = \"ab abc abcd abcde abcdef abcdefg abcdefgh abcdefghi abcdefghij\", searchWord = \"abcde\"",
        "output": "4"
      },
      {
        "input": "sentence = \"partial match is not allowed\", searchWord = \"parti\"",
        "output": "1"
      },
      {
        "input": "sentence = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", searchWord = \"z\"",
        "output": "26"
      },
      {
        "input": "sentence = \"one two three four five six seven eight nine ten\", searchWord = \"nine\"",
        "output": "9"
      },
      {
        "input": "sentence = \"prefixes prefixing prefix pre prefixed\", searchWord = \"pref\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix prefixing prefixed pre prefixable\", searchWord = \"pre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"a a aa aa aaa\", searchWord = \"aaa\"",
        "output": "5"
      },
      {
        "input": "sentence = \"looking for a specific starting sequence\", searchWord = \"spe\"",
        "output": "4"
      },
      {
        "input": "sentence = \"alibaba cloud offers many products like ecs ec2 s3\", searchWord = \"ec\"",
        "output": "7"
      },
      {
        "input": "sentence = \"algorithm data structure and algorithm\", searchWord = \"algo\"",
        "output": "1"
      },
      {
        "input": "sentence = \"overlapwording overlapword overlap\", searchWord = \"overlap\"",
        "output": "1"
      },
      {
        "input": "sentence = \"the quick brown fox jumps over the lazy dog\", searchWord = \"the\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix prefix prefix\", searchWord = \"prefix\"",
        "output": "1"
      },
      {
        "input": "sentence = \"prefix prefix prefix prefix\", searchWord = \"prefix\"",
        "output": "1"
      },
      {
        "input": "sentence = \"shorter is better\", searchWord = \"short\"",
        "output": "1"
      },
      {
        "input": "sentence = \"algorithms and data structures\", searchWord = \"and\"",
        "output": "2"
      },
      {
        "input": "sentence = \"interview question with multiple prefixes prefix\", searchWord = \"pre\"",
        "output": "5"
      },
      {
        "input": "sentence = \"banana bandana band breadth\", searchWord = \"ban\"",
        "output": "1"
      },
      {
        "input": "sentence = \"algorithms and data structures are fundamental\", searchWord = \"data\"",
        "output": "3"
      },
      {
        "input": "sentence = \"practice makes perfect in programming\", searchWord = \"per\"",
        "output": "3"
      },
      {
        "input": "sentence = \"verylongwordthatwilltesttheboundariesofthisfunction\", searchWord = \"verylong\"",
        "output": "1"
      },
      {
        "input": "sentence = \"longerprefix longerpre long pre\", searchWord = \"longerpre\"",
        "output": "1"
      },
      {
        "input": "sentence = \"this is a simple sentence with repeated words repeated words\", searchWord = \"repe\"",
        "output": "7"
      },
      {
        "input": "sentence = \"a quick brown fox jumps over the lazy dog\", searchWord = \"do\"",
        "output": "9"
      },
      {
        "input": "sentence = \"multiple occurrences of words words\", searchWord = \"words\"",
        "output": "4"
      },
      {
        "input": "sentence = \"double double double trouble\", searchWord = \"double\"",
        "output": "1"
      },
      {
        "input": "sentence = \"complicated complex complication\", searchWord = \"comp\"",
        "output": "1"
      },
      {
        "input": "sentence = \"banana bandana bandanna banana bandana\", searchWord = \"band\"",
        "output": "2"
      }
    ]
  },
  {
    "id": 108,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Binary Search Tree",
      "Array",
      "Divide and Conquer",
      "Binary Tree"
    ],
    "problemDescription": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\n\u00a0\nExample 1:\n\n\nInput: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n\n\nExample 2:\n\n\nInput: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums is sorted in a strictly increasing order.\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\n        ",
    "testCases": [
      {
        "input": "nums = [0]",
        "output": "[0]"
      },
      {
        "input": "nums = [1,3]",
        "output": "[1, None, 3]"
      },
      {
        "input": "nums = [-10,-3,0,5,9]",
        "output": "[0, -10, 5, None, -3, None, 9]"
      },
      {
        "input": "nums = [-1,0,1,2]",
        "output": "[0, -1, 1, None, None, None, 2]"
      },
      {
        "input": "nums = [-1,-2,-3,-4,-5]",
        "output": "[-3, -1, -4, None, -2, None, -5]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7]",
        "output": "[4, 2, 6, 1, 3, 5, 7]"
      },
      {
        "input": "nums = [-1,0,1]",
        "output": "[0, -1, 1]"
      },
      {
        "input": "nums = [-10,-5,0,5,10,15,20]",
        "output": "[5, -5, 15, -10, 0, 10, 20]"
      },
      {
        "input": "nums = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97]",
        "output": "[49, 21, 73, 9, 33, 61, 85, 1, 13, 25, 41, 53, 65, 77, 93, None, 5, None, 17, None, 29, 37, 45, None, 57, None, 69, None, 81, 89, 97]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "[15, 7, 23, 3, 11, 19, 27, 1, 5, 9, 13, 17, 21, 25, 29, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 31]"
      },
      {
        "input": "nums = [-20, -15, -10, -5, 0, 5, 10, 15, 20]",
        "output": "[0, -15, 10, -20, -10, 5, 15, None, None, None, -5, None, None, None, 20]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]",
        "output": "[24, 11, 37, 5, 17, 30, 43, 2, 8, 14, 20, 27, 33, 40, 46, 0, 3, 6, 9, 12, 15, 18, 22, 25, 28, 31, 35, 38, 41, 44, 48, None, 1, None, 4, None, 7, None, 10, None, 13, None, 16, None, 19, 21, 23, None, 26, None, 29, None, 32, 34, 36, None, 39, None, 42, None, 45, 47, 49]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]",
        "output": "[50, 25, 75, 10, 35, 60, 90, 5, 15, 30, 40, 55, 65, 80, 95, None, None, None, 20, None, None, None, 45, None, None, None, 70, None, 85, None, 100]"
      },
      {
        "input": "nums = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]",
        "output": "[15, 5, 24, 0, 10, 19, 29, -2, 2, 7, 12, 17, 21, 26, 31, -3, -1, 1, 3, 6, 8, 11, 13, 16, 18, 20, 22, 25, 27, 30, 32, None, None, None, None, None, None, None, 4, None, None, None, 9, None, None, None, 14, None, None, None, None, None, None, None, 23, None, None, None, 28, None, None, None, 33]"
      },
      {
        "input": "nums = [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "[0, -600, 500, -900, -300, 200, 800, -1000, -800, -500, -200, 100, 300, 600, 900, None, None, None, -700, None, -400, None, -100, None, None, None, 400, None, 700, None, 1000]"
      },
      {
        "input": "nums = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[0, -60, 50, -90, -30, 20, 80, -100, -80, -50, -20, 10, 30, 60, 90, None, None, None, -70, None, -40, None, -10, None, None, None, 40, None, 70, None, 100]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[15, 7, 23, 3, 11, 19, 27, 1, 5, 9, 13, 17, 21, 25, 29, None, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]"
      },
      {
        "input": "nums = [-100, -50, -25, -10, -5, 0, 5, 10, 25, 50, 100]",
        "output": "[0, -25, 25, -100, -10, 5, 50, None, -50, None, -5, None, 10, None, 100]"
      },
      {
        "input": "nums = [-500, -250, -125, -63, -31, -15, -7, -3, -1, 0, 1, 3, 7, 15, 31, 63, 125, 250, 500]",
        "output": "[0, -31, 31, -250, -7, 3, 125, -500, -125, -15, -3, 1, 7, 63, 250, None, None, None, -63, None, None, None, -1, None, None, None, 15, None, None, None, 500]"
      },
      {
        "input": "nums = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "[6, 1, 11, -2, 3, 8, 14, -3, -1, 2, 4, 7, 9, 12, 15, None, None, None, 0, None, None, None, 5, None, None, None, 10, None, 13, None, 16]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]",
        "output": "[49, 23, 75, 11, 35, 61, 87, 5, 17, 29, 41, 55, 67, 81, 93, 1, 7, 13, 19, 25, 31, 37, 45, 51, 57, 63, 71, 77, 83, 89, 97, None, 3, None, 9, None, 15, None, 21, None, 27, None, 33, None, 39, 43, 47, None, 53, None, 59, None, 65, 69, 73, None, 79, None, 85, None, 91, 95, 99]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "[19, 9, 29, 3, 13, 23, 35, 1, 5, 11, 15, 21, 25, 31, 37, None, None, None, 7, None, None, None, 17, None, None, None, 27, None, 33, None, 39]"
      },
      {
        "input": "nums = [-20, -15, -10, -5, 0, 1, 3, 5, 8, 10, 13, 15, 20]",
        "output": "[3, -10, 10, -20, 0, 5, 15, None, -15, -5, 1, None, 8, 13, 20]"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500]",
        "output": "[1300, 600, 1900, 300, 900, 1600, 2200, 100, 400, 700, 1100, 1400, 1700, 2000, 2400, None, 200, None, 500, None, 800, 1000, 1200, None, 1500, None, 1800, None, 2100, 2300, 2500]"
      },
      {
        "input": "nums = [-200, -190, -180, -170, -160, -150, -140, -130, -120, -110, -100, -90, -80, -70, -60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "[0, -110, 100, -160, -60, 50, 150, -190, -140, -90, -30, 20, 70, 120, 180, -200, -180, -150, -130, -100, -80, -50, -20, 10, 30, 60, 80, 110, 130, 160, 190, None, None, None, -170, None, None, None, -120, None, None, None, -70, None, -40, None, -10, None, None, None, 40, None, None, None, 90, None, None, None, 140, None, 170, None, 200]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60]",
        "output": "[30, 14, 46, 6, 22, 38, 54, 2, 10, 18, 26, 34, 42, 50, 58, None, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60]"
      },
      {
        "input": "nums = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "[8, 2, 14, -1, 5, 11, 17, -2, 0, 3, 6, 9, 12, 15, 18, None, None, None, 1, None, 4, None, 7, None, 10, None, 13, None, 16, None, 19]"
      },
      {
        "input": "nums = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625]",
        "output": "[169, 36, 361, 9, 81, 256, 484, 1, 16, 49, 121, 196, 289, 400, 576, None, 4, None, 25, None, 64, 100, 144, None, 225, None, 324, None, 441, 529, 625]"
      },
      {
        "input": "nums = [-1000, -500, -250, -100, -50, -25, -10, -5, -2, -1, 0, 1, 2, 5, 10, 25, 50, 100, 250, 500, 1000]",
        "output": "[0, -50, 25, -500, -5, 2, 250, -1000, -250, -25, -2, 1, 5, 50, 500, None, None, None, -100, None, -10, None, -1, None, None, None, 10, None, 100, None, 1000]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150]",
        "output": "[75, 35, 115, 15, 55, 95, 135, 5, 25, 45, 65, 85, 105, 125, 145, None, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]"
      },
      {
        "input": "nums = [-500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]",
        "output": "[500, -100, 1000, -400, 200, 700, 1300, -500, -300, 0, 300, 600, 800, 1100, 1400, None, None, None, -200, None, 100, None, 400, None, None, None, 900, None, 1200, None, 1500]"
      },
      {
        "input": "nums = [-2000, -1900, -1800, -1700, -1600, -1500, -1400, -1300, -1200, -1100, -1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]",
        "output": "[0, -1100, 1000, -1600, -600, 500, 1500, -1900, -1400, -900, -300, 200, 700, 1200, 1800, -2000, -1800, -1500, -1300, -1000, -800, -500, -200, 100, 300, 600, 800, 1100, 1300, 1600, 1900, None, None, None, -1700, None, None, None, -1200, None, None, None, -700, None, -400, None, -100, None, None, None, 400, None, None, None, 900, None, None, None, 1400, None, 1700, None, 2000]"
      },
      {
        "input": "nums = [-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50]",
        "output": "[0, -30, 30, -50, -20, 10, 40, None, -40, None, -10, None, 20, None, 50]"
      },
      {
        "input": "nums = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58]",
        "output": "[28, 13, 43, 4, 19, 34, 52, 1, 7, 16, 22, 31, 37, 46, 55, None, None, None, 10, None, None, None, 25, None, None, None, 40, None, 49, None, 58]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[8, 4, 12, 2, 6, 10, 14, 1, 3, 5, 7, 9, 11, 13, 15]"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "[19, 8, 30, 3, 13, 24, 35, 0, 5, 10, 16, 21, 27, 32, 38, -1, 1, 4, 6, 9, 11, 14, 17, 20, 22, 25, 28, 31, 33, 36, 39, None, None, None, 2, None, None, None, 7, None, None, None, 12, None, 15, None, 18, None, None, None, 23, None, 26, None, 29, None, None, None, 34, None, 37, None, 40]"
      },
      {
        "input": "nums = [-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]",
        "output": "[-1, -51, 49, -77, -27, 23, 75, -89, -65, -39, -15, 11, 35, 61, 87, -95, -83, -71, -59, -45, -33, -21, -9, 5, 17, 29, 41, 55, 67, 81, 93, -99, -93, -87, -81, -75, -69, -63, -55, -49, -43, -37, -31, -25, -19, -13, -5, 1, 7, 13, 19, 25, 31, 37, 45, 51, 57, 63, 71, 77, 83, 89, 97, None, -97, None, -91, None, -85, None, -79, None, -73, None, -67, None, -61, -57, -53, None, -47, None, -41, None, -35, None, -29, None, -23, None, -17, None, -11, -7, -3, None, 3, None, 9, None, 15, None, 21, None, 27, None, 33, None, 39, 43, 47, None, 53, None, 59, None, 65, 69, 73, None, 79, None, 85, None, 91, 95, 99]"
      },
      {
        "input": "nums = [-15, -10, -5, 0, 5, 10, 15, 20, 25]",
        "output": "[5, -10, 15, -15, -5, 10, 20, None, None, None, 0, None, None, None, 25]"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "[7, 2, 12, 0, 4, 9, 14, -1, 1, 3, 5, 8, 10, 13, 15, None, None, None, None, None, None, None, 6, None, None, None, 11, None, None, None, 16]"
      },
      {
        "input": "nums = [-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[0, -5, 5, -8, -3, 2, 7, -9, -7, -4, -2, 1, 3, 6, 8, None, None, None, -6, None, None, None, -1, None, None, None, 4, None, None, None, 9]"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125]",
        "output": "[65, 30, 95, 15, 45, 80, 110, 5, 20, 35, 55, 70, 85, 100, 120, None, 10, None, 25, None, 40, 50, 60, None, 75, None, 90, None, 105, 115, 125]"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "[49, 23, 75, 10, 36, 62, 88, 4, 16, 29, 42, 55, 68, 81, 94, 1, 7, 13, 19, 26, 32, 39, 45, 52, 58, 65, 71, 78, 84, 91, 97, -1, 2, 5, 8, 11, 14, 17, 21, 24, 27, 30, 34, 37, 40, 43, 47, 50, 53, 56, 60, 63, 66, 69, 73, 76, 79, 82, 86, 89, 92, 95, 99, None, 0, None, 3, None, 6, None, 9, None, 12, None, 15, None, 18, 20, 22, None, 25, None, 28, None, 31, 33, 35, None, 38, None, 41, None, 44, 46, 48, None, 51, None, 54, None, 57, 59, 61, None, 64, None, 67, None, 70, 72, 74, None, 77, None, 80, None, 83, 85, 87, None, 90, None, 93, None, 96, 98, 100]"
      },
      {
        "input": "nums = [-1000, -500, -250, -125, -62, -31, -15, -7, -3, -1, 0, 1, 3, 7, 15, 31, 62, 125, 250, 500, 1000]",
        "output": "[0, -62, 31, -500, -7, 3, 250, -1000, -250, -31, -3, 1, 7, 62, 500, None, None, None, -125, None, -15, None, -1, None, None, None, 15, None, 125, None, 1000]"
      },
      {
        "input": "nums = [-20, -18, -16, -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "[0, -12, 10, -18, -6, 4, 16, -20, -16, -10, -4, 2, 6, 12, 18, None, None, None, -14, None, -8, None, -2, None, None, None, 8, None, 14, None, 20]"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, -9989, -9988, -9987, -9986, -9985]",
        "output": "[-9992, -9996, -9988, -9998, -9994, -9990, -9986, -9999, -9997, -9995, -9993, -9991, -9989, -9987, -9985]"
      },
      {
        "input": "nums = [-100, -50, -20, -10, -5, 0, 5, 10, 20, 50, 100]",
        "output": "[0, -20, 20, -100, -10, 5, 50, None, -50, None, -5, None, 10, None, 100]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "[100, 50, 150, 20, 70, 120, 180, 10, 30, 60, 80, 110, 130, 160, 190, None, None, None, 40, None, None, None, 90, None, None, None, 140, None, 170, None, 200]"
      },
      {
        "input": "nums = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[9, 3, 15, 0, 6, 12, 18, -2, 1, 4, 7, 10, 13, 16, 19, None, -1, None, 2, None, 5, None, 8, None, 11, None, 14, None, 17, None, 20]"
      },
      {
        "input": "nums = [-5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[9, 3, 15, 0, 6, 12, 18, -5, 1, 4, 7, 10, 13, 16, 19, None, None, None, 2, None, 5, None, 8, None, 11, None, 14, None, 17, None, 20]"
      },
      {
        "input": "nums = [-30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[10, -15, 30, -25, -5, 20, 40, -30, -20, -10, 0, 15, 25, 35, 45, None, None, None, None, None, None, None, 5, None, None, None, None, None, None, None, 50]"
      },
      {
        "input": "nums = [-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "[0, -26, 25, -39, -13, 12, 38, -45, -33, -20, -7, 6, 18, 31, 44, -48, -42, -36, -30, -23, -17, -10, -4, 3, 9, 15, 21, 28, 34, 41, 47, -50, -47, -44, -41, -38, -35, -32, -28, -25, -22, -19, -15, -12, -9, -6, -2, 1, 4, 7, 10, 13, 16, 19, 23, 26, 29, 32, 36, 39, 42, 45, 49, None, -49, None, -46, None, -43, None, -40, None, -37, None, -34, None, -31, -29, -27, None, -24, None, -21, None, -18, -16, -14, None, -11, None, -8, None, -5, -3, -1, None, 2, None, 5, None, 8, None, 11, None, 14, None, 17, None, 20, 22, 24, None, 27, None, 30, None, 33, 35, 37, None, 40, None, 43, None, 46, 48, 50]"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, -9989, -9988, -9987, -9986, -9985, -9984, -9983, -9982, -9981, -9980]",
        "output": "[-9990, -9995, -9985, -9998, -9993, -9988, -9982, -9999, -9997, -9994, -9992, -9989, -9987, -9984, -9981, None, None, None, -9996, None, None, None, -9991, None, None, None, -9986, None, -9983, None, -9980]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]",
        "output": "[130, 60, 190, 30, 90, 160, 220, 10, 40, 70, 110, 140, 170, 200, 240, None, 20, None, 50, None, 80, 100, 120, None, 150, None, 180, None, 210, 230, 250]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        "output": "[8, 3, 12, 1, 5, 10, 14, 0, 2, 4, 6, 9, 11, 13, 15, None, None, None, None, None, None, None, 7, None, None, None, None, None, None, None, 16]"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[0, -6, 5, -9, -3, 2, 8, -10, -8, -5, -2, 1, 3, 6, 9, None, None, None, -7, None, -4, None, -1, None, None, None, 4, None, 7, None, 10]"
      },
      {
        "input": "nums = [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]",
        "output": "[14, 5, 23, 1, 9, 18, 27, -1, 3, 7, 11, 16, 20, 25, 29, -2, 0, 2, 4, 6, 8, 10, 12, 15, 17, 19, 21, 24, 26, 28, 30, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 13, None, None, None, None, None, None, None, 22, None, None, None, None, None, None, None, 31]"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[14, 6, 22, 2, 10, 18, 26, 0, 4, 8, 12, 16, 20, 24, 28, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 30]"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]",
        "output": "[25, 11, 37, 5, 17, 31, 43, 1, 7, 13, 21, 27, 33, 39, 47, None, 3, None, 9, None, 15, 19, 23, None, 29, None, 35, None, 41, 45, 49]"
      },
      {
        "input": "nums = [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]",
        "output": "[9, 4, 13, 2, 6, 11, 15, -1, 3, 5, 7, 10, 12, 14, 16, None, None, None, None, None, None, None, 8, None, None, None, None, None, None, None, 17]"
      },
      {
        "input": "nums = [-1000, -500, -250, -125, -63, -31, -16, -8, -4, -2, -1, 0, 1, 2, 4, 8, 16, 31, 63, 125, 250, 500, 1000]",
        "output": "[0, -31, 31, -250, -4, 4, 250, -1000, -125, -16, -2, 1, 8, 63, 500, None, -500, None, -63, None, -8, None, -1, None, 2, None, 16, None, 125, None, 1000]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300]",
        "output": "[150, 70, 230, 30, 110, 190, 270, 10, 50, 90, 130, 170, 210, 250, 290, None, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[10, 5, 15, 2, 7, 12, 18, 1, 3, 6, 8, 11, 13, 16, 19, None, None, None, 4, None, None, None, 9, None, None, None, 14, None, 17, None, 20]"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "[7, -2, 16, -7, 2, 11, 21, -9, -5, 0, 4, 9, 13, 18, 23, -10, -8, -6, -4, -1, 1, 3, 5, 8, 10, 12, 14, 17, 19, 22, 24, None, None, None, None, None, None, None, -3, None, None, None, None, None, None, None, 6, None, None, None, None, None, None, None, 15, None, None, None, 20, None, None, None, 25]"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]",
        "output": "[5000, 2000, 8000, 1000, 3000, 6000, 9000, None, None, None, 4000, None, 7000, None, 10000]"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "[12, 5, 19, 2, 8, 15, 22, 0, 3, 6, 10, 13, 17, 20, 24, None, 1, None, 4, None, 7, 9, 11, None, 14, 16, 18, None, 21, 23, 25]"
      },
      {
        "input": "nums = [500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500, 8000, 8500, 9000, 9500, 10000]",
        "output": "[5000, 2500, 7500, 1000, 3500, 6000, 9000, 500, 1500, 3000, 4000, 5500, 6500, 8000, 9500, None, None, None, 2000, None, None, None, 4500, None, None, None, 7000, None, 8500, None, 10000]"
      },
      {
        "input": "nums = [-50, -45, -40, -35, -30, -25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[0, -30, 25, -45, -15, 10, 40, -50, -40, -25, -10, 5, 15, 30, 45, None, None, None, -35, None, -20, None, -5, None, None, None, 20, None, 35, None, 50]"
      },
      {
        "input": "nums = [-100, -50, -25, -10, -3, 0, 5, 9, 20, 50, 75, 100]",
        "output": "[0, -25, 20, -100, -10, 5, 75, None, -50, None, -3, None, 9, 50, 100]"
      },
      {
        "input": "nums = [-15, -10, -5, -3, 0, 1, 2, 5, 6, 8, 10, 15]",
        "output": "[1, -5, 6, -15, -3, 2, 10, None, -10, None, 0, None, 5, 8, 15]"
      }
    ]
  },
  {
    "id": 3216,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "String"
    ],
    "problemDescription": "Given a string s containing only digits, return the lexicographically smallest string that can be obtained after swapping adjacent digits in s with the same parity at most once.\nDigits have the same parity if both are odd or both are even. For example, 5 and 9, as well as 2 and 4, have the same parity, while 6 and 9 do not.\n\u00a0\nExample 1:\n\nInput: s = \"45320\"\nOutput: \"43520\"\nExplanation: \ns[1] == '5' and s[2] == '3' both have the same parity, and swapping them results in the lexicographically smallest string.\n\nExample 2:\n\nInput: s = \"001\"\nOutput: \"001\"\nExplanation:\nThere is no need to perform a swap because s is already the lexicographically smallest.\n\n\u00a0\nConstraints:\n\n2 <= s.length <= 100\ns consists only of digits.\n\n",
    "starterCode": "class Solution:\n    def getSmallestString(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"9876543210\"",
        "output": "9876543210"
      },
      {
        "input": "s = \"1324\"",
        "output": "1324"
      },
      {
        "input": "s = \"111222333\"",
        "output": "111222333"
      },
      {
        "input": "s = \"1352468709\"",
        "output": "1352468709"
      },
      {
        "input": "s = \"2121212121\"",
        "output": "2121212121"
      },
      {
        "input": "s = \"1234567890\"",
        "output": "1234567890"
      },
      {
        "input": "s = \"9753186420\"",
        "output": "7953186420"
      },
      {
        "input": "s = \"22222\"",
        "output": "22222"
      },
      {
        "input": "s = \"97531\"",
        "output": "79531"
      },
      {
        "input": "s = \"111222\"",
        "output": "111222"
      },
      {
        "input": "s = \"001\"",
        "output": "001"
      },
      {
        "input": "s = \"87654\"",
        "output": "87654"
      },
      {
        "input": "s = \"1111111111\"",
        "output": "1111111111"
      },
      {
        "input": "s = \"13579\"",
        "output": "13579"
      },
      {
        "input": "s = \"99887766554433221100\"",
        "output": "99887766554433221100"
      },
      {
        "input": "s = \"11111\"",
        "output": "11111"
      },
      {
        "input": "s = \"34521\"",
        "output": "34521"
      },
      {
        "input": "s = \"224466\"",
        "output": "224466"
      },
      {
        "input": "s = \"24680\"",
        "output": "24608"
      },
      {
        "input": "s = \"45320\"",
        "output": "43520"
      },
      {
        "input": "s = \"1212121212\"",
        "output": "1212121212"
      },
      {
        "input": "s = \"2222222222\"",
        "output": "2222222222"
      },
      {
        "input": "s = \"86420\"",
        "output": "68420"
      },
      {
        "input": "s = \"2204466880\"",
        "output": "2024466880"
      },
      {
        "input": "s = \"555444333222111000\"",
        "output": "555444333222111000"
      },
      {
        "input": "s = \"5937197531\"",
        "output": "5397197531"
      },
      {
        "input": "s = \"8642086420\"",
        "output": "6842086420"
      },
      {
        "input": "s = \"5432109876543210\"",
        "output": "5432109876543210"
      },
      {
        "input": "s = \"9090909090\"",
        "output": "9090909090"
      },
      {
        "input": "s = \"3214680975\"",
        "output": "3214608975"
      },
      {
        "input": "s = \"555444333\"",
        "output": "555444333"
      },
      {
        "input": "s = \"2046813579\"",
        "output": "0246813579"
      },
      {
        "input": "s = \"999988887777\"",
        "output": "999988887777"
      },
      {
        "input": "s = \"1232123212\"",
        "output": "1232123212"
      },
      {
        "input": "s = \"0022446688\"",
        "output": "0022446688"
      },
      {
        "input": "s = \"2143658709\"",
        "output": "2143658709"
      },
      {
        "input": "s = \"4206813579\"",
        "output": "2406813579"
      },
      {
        "input": "s = \"1222333344\"",
        "output": "1222333344"
      },
      {
        "input": "s = \"122133445566778899\"",
        "output": "122133445566778899"
      },
      {
        "input": "s = \"5937124680\"",
        "output": "5397124680"
      },
      {
        "input": "s = \"1010101010\"",
        "output": "1010101010"
      },
      {
        "input": "s = \"2718281828\"",
        "output": "2178281828"
      },
      {
        "input": "s = \"1098765432\"",
        "output": "1098765432"
      },
      {
        "input": "s = \"908070605040302010\"",
        "output": "900870605040302010"
      },
      {
        "input": "s = \"98765432100987654321\"",
        "output": "98765432100987654321"
      },
      {
        "input": "s = \"02468135791357\"",
        "output": "02468135719357"
      },
      {
        "input": "s = \"9080706050\"",
        "output": "9008706050"
      },
      {
        "input": "s = \"8642013579\"",
        "output": "6842013579"
      },
      {
        "input": "s = \"9753124680\"",
        "output": "7953124680"
      },
      {
        "input": "s = \"5973186420\"",
        "output": "5793186420"
      },
      {
        "input": "s = \"8888888888\"",
        "output": "8888888888"
      },
      {
        "input": "s = \"1122334455\"",
        "output": "1122334455"
      },
      {
        "input": "s = \"4444444444\"",
        "output": "4444444444"
      },
      {
        "input": "s = \"5432013579\"",
        "output": "5430213579"
      },
      {
        "input": "s = \"8642097531\"",
        "output": "6842097531"
      },
      {
        "input": "s = \"01234567890123456789\"",
        "output": "01234567890123456789"
      },
      {
        "input": "s = \"2020202020\"",
        "output": "0220202020"
      },
      {
        "input": "s = \"000011112222\"",
        "output": "000011112222"
      },
      {
        "input": "s = \"1020304050\"",
        "output": "1002304050"
      },
      {
        "input": "s = \"1357924680\"",
        "output": "1357924608"
      },
      {
        "input": "s = \"4206842068\"",
        "output": "2406842068"
      },
      {
        "input": "s = \"5555555555\"",
        "output": "5555555555"
      },
      {
        "input": "s = \"6284095713\"",
        "output": "2684095713"
      },
      {
        "input": "s = \"135792468097531\"",
        "output": "135792460897531"
      },
      {
        "input": "s = \"5959595959\"",
        "output": "5599595959"
      },
      {
        "input": "s = \"1357902468\"",
        "output": "1357902468"
      },
      {
        "input": "s = \"0246813579\"",
        "output": "0246813579"
      },
      {
        "input": "s = \"0426813579\"",
        "output": "0246813579"
      },
      {
        "input": "s = \"5173924680\"",
        "output": "1573924680"
      },
      {
        "input": "s = \"8886664442\"",
        "output": "8868664442"
      },
      {
        "input": "s = \"98765432109876543210\"",
        "output": "98765432109876543210"
      },
      {
        "input": "s = \"9988776655\"",
        "output": "9988776655"
      },
      {
        "input": "s = \"2468024680\"",
        "output": "2460824680"
      },
      {
        "input": "s = \"7931524860\"",
        "output": "7391524860"
      },
      {
        "input": "s = \"6283185307\"",
        "output": "2683185307"
      },
      {
        "input": "s = \"111222333444555666777888999\"",
        "output": "111222333444555666777888999"
      },
      {
        "input": "s = \"3141592653\"",
        "output": "1341592653"
      },
      {
        "input": "s = \"3852764190\"",
        "output": "3852746190"
      },
      {
        "input": "s = \"22446688001133557799\"",
        "output": "22446680801133557799"
      },
      {
        "input": "s = \"3658742910\"",
        "output": "3658724910"
      },
      {
        "input": "s = \"9876543211\"",
        "output": "9876543211"
      },
      {
        "input": "s = \"222221111\"",
        "output": "222221111"
      },
      {
        "input": "s = \"6868686868\"",
        "output": "6688686868"
      },
      {
        "input": "s = \"4826035791\"",
        "output": "4286035791"
      },
      {
        "input": "s = \"4443332221\"",
        "output": "4443332221"
      },
      {
        "input": "s = \"9182736450\"",
        "output": "1982736450"
      },
      {
        "input": "s = \"24680246802468024680\"",
        "output": "24608246802468024680"
      },
      {
        "input": "s = \"8064213579\"",
        "output": "0864213579"
      },
      {
        "input": "s = \"5678904321\"",
        "output": "5678904321"
      },
      {
        "input": "s = \"0123456789\"",
        "output": "0123456789"
      },
      {
        "input": "s = \"2200446688\"",
        "output": "2020446688"
      },
      {
        "input": "s = \"3322110099\"",
        "output": "3322110099"
      },
      {
        "input": "s = \"8976543210\"",
        "output": "8796543210"
      },
      {
        "input": "s = \"1133557799\"",
        "output": "1133557799"
      },
      {
        "input": "s = \"1357913579\"",
        "output": "1357193579"
      },
      {
        "input": "s = \"9864213579\"",
        "output": "9684213579"
      },
      {
        "input": "s = \"999888777666555444333222111\"",
        "output": "999888777666555444333222111"
      },
      {
        "input": "s = \"9999999999\"",
        "output": "9999999999"
      },
      {
        "input": "s = \"5432109876\"",
        "output": "5432109876"
      },
      {
        "input": "s = \"4321056789\"",
        "output": "4321056789"
      },
      {
        "input": "s = \"1235467890\"",
        "output": "1235467890"
      },
      {
        "input": "s = \"35791\"",
        "output": "35719"
      },
      {
        "input": "s = \"0246802468\"",
        "output": "0246082468"
      },
      {
        "input": "s = \"3131313131\"",
        "output": "1331313131"
      },
      {
        "input": "s = \"0987654321\"",
        "output": "0987654321"
      },
      {
        "input": "s = \"5024019292\"",
        "output": "5020419292"
      },
      {
        "input": "s = \"999888777\"",
        "output": "999888777"
      },
      {
        "input": "s = \"0909090909\"",
        "output": "0909090909"
      },
      {
        "input": "s = \"4442220006\"",
        "output": "4424220006"
      },
      {
        "input": "s = \"2468013579\"",
        "output": "2460813579"
      },
      {
        "input": "s = \"123456789987654321\"",
        "output": "123456789987654321"
      },
      {
        "input": "s = \"01010101010101010101\"",
        "output": "01010101010101010101"
      },
      {
        "input": "s = \"8192837465\"",
        "output": "8192837465"
      },
      {
        "input": "s = \"102030405060708090\"",
        "output": "100230405060708090"
      },
      {
        "input": "s = \"5432101234\"",
        "output": "5432101234"
      },
      {
        "input": "s = \"000999888\"",
        "output": "000999888"
      },
      {
        "input": "s = \"1246835790\"",
        "output": "1246835790"
      },
      {
        "input": "s = \"10101010101010101010\"",
        "output": "10101010101010101010"
      },
      {
        "input": "s = \"4040404040\"",
        "output": "0440404040"
      },
      {
        "input": "s = \"5937186420\"",
        "output": "5397186420"
      },
      {
        "input": "s = \"7777777777\"",
        "output": "7777777777"
      },
      {
        "input": "s = \"6789012345\"",
        "output": "6789012345"
      },
      {
        "input": "s = \"2468097531\"",
        "output": "2460897531"
      },
      {
        "input": "s = \"2132132132\"",
        "output": "2132132132"
      }
    ]
  },
  {
    "id": 144,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, return the preorder traversal of its nodes' values.\n\u00a0\nExample 1:\n\nInput: root = [1,null,2,3]\nOutput: [1,2,3]\nExplanation:\n\n\nExample 2:\n\nInput: root = [1,2,3,4,5,null,8,null,null,6,7,9]\nOutput: [1,2,4,5,6,7,3,8,9]\nExplanation:\n\n\nExample 3:\n\nInput: root = []\nOutput: []\n\nExample 4:\n\nInput: root = [1]\nOutput: [1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow up: Recursive solution is trivial, could you do it iteratively?\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,null,4,null,5]",
        "output": "[1, 2, 4, 3, 5]"
      },
      {
        "input": "root = [1,null,null]",
        "output": "[1]"
      },
      {
        "input": "root = [1,2,3,4,5,null,8,null,null,6,7,9]",
        "output": "[1, 2, 4, 5, 6, 7, 3, 8, 9]"
      },
      {
        "input": "root = [1,null,3,null,2]",
        "output": "[1, 3, 2]"
      },
      {
        "input": "root = [1,2]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [1,null,2]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [1,null,2,3]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "root = [1]",
        "output": "[1]"
      },
      {
        "input": "root = []",
        "output": "[]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "root = [10,5,15,null,null,6,20]",
        "output": "[10, 5, 15, 6, 20]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,9]",
        "output": "[10, 5, 3, 1, 7, 6, 9, 15, 18]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18]",
        "output": "[10, 5, 3, 7, 15, 18]"
      },
      {
        "input": "root = [1,2,3,4,null,5,null,null,6,null,7,null,8,null,9,null,10,null,11,null,12]",
        "output": "[1, 2, 4, 6, 8, 10, 12, 3, 5, 7, 9, 11]"
      },
      {
        "input": "root = [1,2,3,4,null,null,null,null,null,null,5,6]",
        "output": "[1, 2, 4, 3]"
      },
      {
        "input": "root = [100,-50,50,-100,0,49,99,-150,null,-75,-25,-1,null,5,null,null,25,75,98,100]",
        "output": "[100, -50, -100, -150, 25, 0, -75, 75, 98, -25, 100, 50, 49, -1, 99, 5]"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6]",
        "output": "[1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15]",
        "output": "[8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 15]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "root = [1,2,3,null,4,5,null,6,7,null,null,8,null,9]",
        "output": "[1, 2, 4, 6, 8, 7, 9, 3, 5]"
      },
      {
        "input": "root = [3,null,5,4,6,null,7]",
        "output": "[3, 5, 4, 7, 6]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "[1, 2, 4, 8, 13, 9, 14, 5, 10, 15, 3, 6, 11, 7, 12]"
      },
      {
        "input": "root = [1,null,2,3,null,null,4,5,null,6,null,7,8,null,9,10,null,11]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 9, 11, 8, 10]"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,null,null,6,7,null,null,null,null,8,9]",
        "output": "[1, 2, 4, 5, 6, 7, 3]"
      },
      {
        "input": "root = [10,null,20,null,30,null,40,50,60]",
        "output": "[10, 20, 30, 40, 50, 60]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,4,6,9,11,20]",
        "output": "[10, 5, 3, 1, 4, 7, 6, 9, 15, 18, 11, 20]"
      },
      {
        "input": "root = [7,3,15,null,null,9,20]",
        "output": "[7, 3, 15, 9, 20]"
      },
      {
        "input": "root = [8,5,12,4,6,10,14,2,null,null,null,null,11,null,13]",
        "output": "[8, 5, 4, 2, 6, 12, 10, 11, 14, 13]"
      },
      {
        "input": "root = [1,2,3,null,4,5,null,null,null,6,null,7]",
        "output": "[1, 2, 4, 3, 5, 6, 7]"
      },
      {
        "input": "root = [1,null,2,null,null,null,null,3,null,4,null,5]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,null,4]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,9,null,null,12,null,null,null,null,null,20]",
        "output": "[10, 5, 3, 1, 12, 20, 7, 6, 9, 15, 18]"
      },
      {
        "input": "root = [1,2,3,4,null,null,5,null,6,null,7,null,8,null,9]",
        "output": "[1, 2, 4, 6, 8, 3, 5, 7, 9]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,null,null,12,null,22,28]",
        "output": "[20, 10, 5, 15, 12, 30, 25, 22, 28, 35]"
      },
      {
        "input": "root = [1,2,3,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "[1, 2, 4, 6, 8, 10, 3, 5, 7, 9]"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,null,null,6,7]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[1, 2, 4, 8, 16, 17, 9, 18, 19, 5, 10, 20, 11, 3, 6, 12, 13, 7, 14, 15]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,10,11,null,null,12,null,null,13,null,null,14,null,null,15]",
        "output": "[1, 2, 4, 5, 8, 12, 15, 9, 13, 3, 6, 10, 11, 14, 7]"
      },
      {
        "input": "root = [3,1,4,null,2,null,null,null,null,5]",
        "output": "[3, 1, 2, 4]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[1, 2, 4, 8, 9, 5, 10, 11, 3, 6, 12, 13, 7, 14, 15]"
      },
      {
        "input": "root = [100,-50,200,-200,-100,150,300,-300,-150,-75,-25,25,75,125,175,225,275]",
        "output": "[100, -50, -200, -300, 225, 275, -150, -100, -75, -25, 200, 150, 25, 75, 300, 125, 175]"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6]",
        "output": "[10, 5, 3, 1, 7, 6, 15, 18]"
      },
      {
        "input": "root = [1,2,3,null,4,5,null,null,6,null,7,null,8,null,9]",
        "output": "[1, 2, 4, 6, 8, 3, 5, 7, 9]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "root = [5,4,7,3,8,6,9,2,11,12,13,14,15,16,17]",
        "output": "[5, 4, 3, 2, 11, 8, 12, 13, 7, 6, 14, 15, 9, 16, 17]"
      },
      {
        "input": "root = [3,1,2,null,null,null,4,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "[3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "root = [0,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7,8]",
        "output": "[0, -1, -2, -4, 5, 3, -5, 6, 2, -3, -6, 7, 4, -7, 8]"
      },
      {
        "input": "root = [1,2,null,3,4,null,null,5,6]",
        "output": "[1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "root = [5,3,8,1,4,7,9,0,2,6,null,null,null,null,null,null,10]",
        "output": "[5, 3, 1, 0, 10, 2, 4, 6, 8, 7, 9]"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,4,null,5,null,6,null,7]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [-1,-2,null,-3,-4,-5]",
        "output": "[-1, -2, -3, -5, -4]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,16,17,18,19,20,21,22,23,24,25]",
        "output": "[1, 2, 4, 8, 9, 16, 17, 5, 10, 18, 19, 11, 20, 21, 3, 6, 12, 22, 23, 13, 24, 25, 7, 14, 15]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "[1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,15,25,35,45,55,65,75,85]",
        "output": "[50, 30, 20, 15, 25, 40, 35, 45, 70, 60, 55, 65, 80, 75, 85]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,16,17,18,19,20,null,21,22,23,null,24,25,26]",
        "output": "[1, 2, 4, 8, 9, 16, 17, 5, 10, 18, 19, 11, 20, 3, 6, 12, 21, 22, 13, 23, 7, 14, 24, 25, 15, 26]"
      },
      {
        "input": "root = [0,-1,2,-2,null,3,null,null,null,null,null,null,4]",
        "output": "[0, -1, -2, 2, 3]"
      },
      {
        "input": "root = [5,1,4,null,null,3,6]",
        "output": "[5, 1, 4, 3, 6]"
      },
      {
        "input": "root = [1,null,2,3,null,4,5,null,6,7,null,8,9,null,10,null,11,12]",
        "output": "[1, 2, 3, 4, 6, 8, 11, 9, 12, 5, 7, 10]"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,null,null,null,8,9]",
        "output": "[1, 2, 4, 7, 5, 3, 6, 8, 9]"
      },
      {
        "input": "root = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[0, 1, 3, 7, 15, 16, 8, 17, 18, 4, 9, 19, 20, 10, 2, 5, 11, 12, 6, 13, 14]"
      },
      {
        "input": "root = [2,1,3,null,null,4,5]",
        "output": "[2, 1, 3, 4, 5]"
      },
      {
        "input": "root = [100,-50,150,-200,0,120,200,-300,-100,-60,90,110,160,180,220]",
        "output": "[100, -50, -200, -300, -100, 0, -60, 90, 150, 120, 110, 160, 200, 180, 220]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19,null,20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "root = [5,3,6,2,4,null,7,1]",
        "output": "[5, 3, 2, 1, 4, 6, 7]"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "[1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6]",
        "output": "[10, 5, 3, 1, 7, 6, 15, 13, 18]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,null,null,null,null,null,10,11]",
        "output": "[1, 2, 4, 8, 10, 11, 9, 5, 3, 6, 7]"
      },
      {
        "input": "root = [3,1,4,null,2]",
        "output": "[3, 1, 2, 4]"
      },
      {
        "input": "root = [1,null,2,3,null,null,4,5,null,null,6]",
        "output": "[1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6]",
        "output": "[1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "[1, 2, 4, 6, 8, 10, 3, 5, 7, 9]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]"
      },
      {
        "input": "root = [1,null,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,4,null,5]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,null,null,6,7,8,9,10,11]",
        "output": "[1, 2, 4, 5, 6, 8, 9, 7, 10, 11, 3]"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "root = [5,4,6,2,5,null,null,1,null,3]",
        "output": "[5, 4, 2, 1, 5, 3, 6]"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,15,25,null,null,55,null,null,75,65,85]",
        "output": "[50, 30, 20, 15, 65, 85, 25, 40, 70, 60, 55, 80, 75]"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,null,null,4,null,null,null,null,5]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [1,null,2,null,null,null,3,null,4,null,5]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,null,null,null,null,null,null,null,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "[1, 2, 4, 8, 10, 13, 19, 20, 14, 21, 22, 9, 11, 15, 23, 24, 16, 25, 12, 17, 18, 5, 3, 6, 7]"
      },
      {
        "input": "root = [1,null,2,3,null,null,4,5,null,null,null,6,null,7]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "root = [5,null,10,null,15,null,20,null,25]",
        "output": "[5, 10, 15, 20, 25]"
      }
    ]
  },
  {
    "id": 2586,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "String",
      "Counting"
    ],
    "problemDescription": "You are given a 0-indexed array of string words and two integers left and right.\nA string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are 'a', 'e', 'i', 'o', and 'u'.\nReturn the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\n\u00a0\nExample 1:\n\nInput: words = [\"are\",\"amy\",\"u\"], left = 0, right = 2\nOutput: 2\nExplanation: \n- \"are\" is a vowel string because it starts with 'a' and ends with 'e'.\n- \"amy\" is not a vowel string because it does not end with a vowel.\n- \"u\" is a vowel string because it starts with 'u' and ends with 'u'.\nThe number of vowel strings in the mentioned range is 2.\n\nExample 2:\n\nInput: words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4\nOutput: 3\nExplanation: \n- \"aeo\" is a vowel string because it starts with 'a' and ends with 'o'.\n- \"mu\" is not a vowel string because it does not start with a vowel.\n- \"ooo\" is a vowel string because it starts with 'o' and ends with 'o'.\n- \"artro\" is a vowel string because it starts with 'a' and ends with 'o'.\nThe number of vowel strings in the mentioned range is 3.\n\n\u00a0\nConstraints:\n\n1 <= words.length <= 1000\n1 <= words[i].length <= 10\nwords[i] consists of only lowercase English letters.\n0 <= left <= right < words.length\n\n",
    "starterCode": "class Solution:\n    def vowelStrings(self, words: List[str], left: int, right: int) -> int:\n        ",
    "testCases": [
      {
        "input": "words = [\"sky\",\"fly\",\"why\"], left = 0, right = 2",
        "output": "0"
      },
      {
        "input": "words = [\"apple\",\"banana\",\"orange\",\"umbrella\"], left = 0, right = 3",
        "output": "3"
      },
      {
        "input": "words = [\"are\",\"amy\",\"u\"], left = 0, right = 2",
        "output": "2"
      },
      {
        "input": "words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4",
        "output": "3"
      },
      {
        "input": "words = [\"up\",\"open\",\"over\"], left = 1, right = 2",
        "output": "0"
      },
      {
        "input": "words = [\"ae\",\"ea\",\"ei\",\"ie\",\"ou\"], left = 0, right = 4",
        "output": "5"
      },
      {
        "input": "words = [\"aeiou\",\"uoiea\",\"aeiou\",\"uoiea\",\"aeiou\",\"uoiea\"], left = 0, right = 5",
        "output": "6"
      },
      {
        "input": "words = [\"sky\",\"fly\",\"why\",\"a\",\"e\"], left = 0, right = 4",
        "output": "2"
      },
      {
        "input": "words = [\"umbrella\",\"encyclopedia\",\"analysis\",\"outstanding\",\"initiative\"], left = 1, right = 3",
        "output": "1"
      },
      {
        "input": "words = [\"ocean\",\"mountain\",\"forest\",\"desert\",\"rain\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"beautiful\",\"world\",\"with\",\"diverse\",\"languages\"], left = 2, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"aeiou\",\"uoiea\",\"uiaeou\",\"ouaei\",\"eioua\"], left = 0, right = 4",
        "output": "5"
      },
      {
        "input": "words = [\"xylophone\",\"zephyr\",\"orchestra\",\"xylophone\",\"aeiou\",\"uoiea\",\"uoiea\"], left = 0, right = 6",
        "output": "4"
      },
      {
        "input": "words = [\"aaa\",\"eee\",\"iii\",\"ooo\",\"uuu\",\"aaee\",\"eeaa\",\"aeea\",\"aaea\",\"eeea\",\"eaae\",\"eaeaa\",\"aeaae\",\"aaeae\"], left = 0, right = 13",
        "output": "14"
      },
      {
        "input": "words = [\"queue\",\"adieu\",\"ice\",\"ocean\",\"earth\"], left = 0, right = 3",
        "output": "2"
      },
      {
        "input": "words = [\"umbrella\",\"moon\",\"noon\",\"noon\",\"moon\"], left = 2, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"algorithm\",\"education\",\"umbrella\",\"icecream\",\"operation\",\"university\"], left = 1, right = 5",
        "output": "1"
      },
      {
        "input": "words = [\"umbrella\",\"opposite\",\"idea\",\"encyclopedia\",\"algorithm\",\"umbrella\",\"opposite\",\"idea\",\"encyclopedia\",\"algorithm\"], left = 3, right = 7",
        "output": "4"
      },
      {
        "input": "words = [\"elephant\",\"umbrella\",\"apple\",\"orange\",\"ice\",\"echo\",\"umbrella\"], left = 1, right = 6",
        "output": "6"
      },
      {
        "input": "words = [\"aviation\",\"exhibition\",\"occasion\",\"environment\",\"instrumentation\"], left = 1, right = 3",
        "output": "0"
      },
      {
        "input": "words = [\"vowel\",\"nonvowel\",\"aeiou\",\"bvowel\",\"endvowel\"], left = 0, right = 4",
        "output": "1"
      },
      {
        "input": "words = [\"aabb\",\"abba\",\"baab\",\"baba\",\"abab\"], left = 0, right = 4",
        "output": "1"
      },
      {
        "input": "words = [\"example\",\"samples\",\"tests\",\"inputs\",\"outputs\"], left = 0, right = 4",
        "output": "1"
      },
      {
        "input": "words = [\"xyz\",\"uvw\",\"qwe\",\"rty\",\"poi\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"], left = 0, right = 24",
        "output": "5"
      },
      {
        "input": "words = [\"environment\",\"umbrella\",\"education\",\"algorithm\",\"university\",\"encyclopedia\"], left = 2, right = 5",
        "output": "1"
      },
      {
        "input": "words = [\"beautiful\",\"enormous\",\"interesting\",\"unexpected\",\"odd\"], left = 2, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"sequence\",\"equal\",\"education\",\"algorithm\",\"encyclopedia\"], left = 0, right = 3",
        "output": "0"
      },
      {
        "input": "words = [\"eeeee\",\"aaaaa\",\"iiiii\",\"ooooo\",\"uuuuu\",\"auaeu\",\"eiaie\",\"ouioo\",\"uaeuu\",\"ieoia\"], left = 2, right = 9",
        "output": "8"
      },
      {
        "input": "words = [\"abcdefgh\",\"ijklmnop\",\"qrstuvwxyz\",\"zyxwvutsr\",\"qrstponmlkjihgfedcba\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"banana\",\"orange\",\"grape\",\"kiwi\",\"pear\",\"peach\",\"plum\",\"grapefruit\",\"blueberry\",\"cherry\"], left = 3, right = 9",
        "output": "0"
      },
      {
        "input": "words = [\"racecar\",\"level\",\"rotor\",\"kayak\",\"reviler\"], left = 1, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"aerodynamic\",\"encyclopedia\",\"umbrella\",\"idea\",\"audio\"], left = 1, right = 4",
        "output": "4"
      },
      {
        "input": "words = [\"umbrella\",\"map\",\"python\",\"algorithm\",\"encyclopedia\"], left = 1, right = 4",
        "output": "1"
      },
      {
        "input": "words = [\"umbrella\",\"opposite\",\"idea\",\"encyclopedia\",\"algorithm\"], left = 1, right = 4",
        "output": "3"
      },
      {
        "input": "words = [\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"lazy\",\"dog\"], left = 1, right = 5",
        "output": "0"
      },
      {
        "input": "words = [\"aardvark\",\"elephant\",\"iguana\",\"okapi\",\"umbrella\"], left = 0, right = 4",
        "output": "3"
      },
      {
        "input": "words = [\"vowel\",\"voewl\",\"ovwle\",\"wolve\",\"volve\"], left = 0, right = 4",
        "output": "1"
      },
      {
        "input": "words = [\"beautiful\",\"umbrella\",\"innovative\",\"economic\",\"outstanding\",\"underwater\"], left = 0, right = 5",
        "output": "2"
      },
      {
        "input": "words = [\"applepie\",\"banana\",\"orangejuice\",\"grape\",\"peach\"], left = 1, right = 3",
        "output": "1"
      },
      {
        "input": "words = [\"ar\",\"er\",\"ir\",\"or\",\"ur\"], left = 1, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"a\",\"e\",\"i\",\"o\",\"u\",\"a\",\"e\",\"i\",\"o\",\"u\"], left = 0, right = 9",
        "output": "10"
      },
      {
        "input": "words = [\"sequence\",\"development\",\"environment\",\"assignment\",\"information\"], left = 1, right = 3",
        "output": "0"
      },
      {
        "input": "words = [\"a\",\"e\",\"i\",\"o\",\"u\",\"aeiou\"], left = 0, right = 5",
        "output": "6"
      },
      {
        "input": "words = [\"racecar\",\"level\",\"rotor\",\"deified\",\"repaper\"], left = 1, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"orchid\",\"ocean\",\"octopus\",\"ostrich\",\"oak\",\"oceanography\"], left = 0, right = 5",
        "output": "0"
      },
      {
        "input": "words = [\"volcano\",\"trident\",\"ozone\",\"ocean\",\"mountain\"], left = 2, right = 4",
        "output": "1"
      },
      {
        "input": "words = [\"zzzzz\",\"yyyyy\",\"xxxxx\",\"wwwww\",\"vvvvv\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"banana\",\"anana\",\"nana\",\"ana\",\"na\",\"a\"], left = 0, right = 9",
        "output": "3"
      },
      {
        "input": "words = [\"education\",\"university\",\"algorithm\",\"openai\"], left = 1, right = 3",
        "output": "1"
      },
      {
        "input": "words = [\"aeiou\",\"bcd\",\"efg\",\"hij\",\"klm\",\"nop\",\"qrst\",\"uvw\",\"xyz\"], left = 2, right = 7",
        "output": "0"
      },
      {
        "input": "words = [\"aardvark\",\"algorithm\",\"antelope\",\"antenna\",\"apple\",\"antiquity\",\"apricot\",\"atlas\"], left = 1, right = 7",
        "output": "3"
      },
      {
        "input": "words = [\"algorithm\",\"evaluation\",\"interview\",\"education\",\"optimization\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"aeiou\",\"uoiea\",\"iouea\",\"uaieo\",\"oieau\",\"aeo\",\"uoiea\",\"uoiea\",\"uoiea\",\"uoiea\",\"uoiea\",\"uoiea\"], left = 0, right = 11",
        "output": "12"
      },
      {
        "input": "words = [\"abracadabra\",\"alabama\",\"alaska\",\"aerodynamic\",\"algorithm\",\"azalea\"], left = 1, right = 5",
        "output": "3"
      },
      {
        "input": "words = [\"start\",\"end\",\"begin\",\"finish\",\"conclude\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"education\",\"is\",\"awesome\",\"and\",\"effective\"], left = 1, right = 4",
        "output": "2"
      },
      {
        "input": "words = [\"xyz\",\"uvw\",\"qrs\",\"tuv\",\"lmn\",\"opq\"], left = 1, right = 5",
        "output": "0"
      },
      {
        "input": "words = [\"aeiou\",\"ueiou\",\"ieoai\",\"oeuia\",\"uaeio\"], left = 0, right = 4",
        "output": "5"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\"], left = 0, right = 14",
        "output": "4"
      },
      {
        "input": "words = [\"xylophone\",\"xylophones\",\"xylophonically\",\"xylophonist\",\"xylophonists\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"aeiou\",\"uaeiou\",\"aeu\",\"aue\",\"eua\"], left = 0, right = 4",
        "output": "5"
      },
      {
        "input": "words = [\"xylophone\",\"yacht\",\"gymnymphilia\",\"hydrangea\",\"ivory\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"bcd\",\"efg\",\"hij\",\"klm\",\"nop\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"algorithm\",\"education\",\"umbrella\",\"encyclopedia\",\"ocean\"], left = 2, right = 4",
        "output": "2"
      },
      {
        "input": "words = [\"a\",\"e\",\"i\",\"o\",\"u\"], left = 0, right = 4",
        "output": "5"
      },
      {
        "input": "words = [\"umbrella\",\"raincoat\",\"scarf\",\"boots\",\"gloves\",\"jacket\",\"shoes\",\"hat\",\"mittens\",\"gloves\",\"umbrella\",\"hat\"], left = 0, right = 11",
        "output": "2"
      },
      {
        "input": "words = [\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], left = 0, right = 5",
        "output": "6"
      },
      {
        "input": "words = [\"education\",\"algorithm\",\"encyclopedia\",\"under\",\"umbrella\"], left = 1, right = 4",
        "output": "2"
      },
      {
        "input": "words = [\"aeiou\",\"uoiea\",\"aieou\",\"euoia\",\"oueai\"], left = 0, right = 4",
        "output": "5"
      },
      {
        "input": "words = [\"education\",\"university\",\"algorithm\",\"optimization\",\"encyclopedia\"], left = 1, right = 4",
        "output": "1"
      },
      {
        "input": "words = [\"aabbcc\",\"ddeeff\",\"gghhii\",\"jjkkll\",\"mmnnoo\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"education\",\"algorithm\",\"umbrella\",\"opposite\",\"idea\"], left = 0, right = 4",
        "output": "3"
      },
      {
        "input": "words = [\"aeiouaeiou\",\"uoieauoiea\",\"aieouaieou\",\"euoiaeuoia\",\"oueaioueai\"], left = 1, right = 3",
        "output": "3"
      },
      {
        "input": "words = [\"aaa\",\"eee\",\"iii\",\"ooo\",\"uuu\"], left = 0, right = 4",
        "output": "5"
      },
      {
        "input": "words = [\"education\",\"umbrella\",\"idea\",\"algorithm\",\"elephant\"], left = 1, right = 4",
        "output": "2"
      },
      {
        "input": "words = [\"abacaxi\",\"elderberry\",\"fig\",\"grape\",\"honeydew\",\"kiwi\",\"lemon\",\"mango\",\"nectarine\",\"orange\",\"papaya\",\"quince\"], left = 0, right = 11",
        "output": "2"
      },
      {
        "input": "words = [\"sequential\",\"programming\",\"leads\",\"to\",\"complexity\"], left = 1, right = 3",
        "output": "0"
      },
      {
        "input": "words = [\"aeiou\",\"uoiea\",\"ioeau\",\"oaeiu\",\"ueiao\"], left = 0, right = 4",
        "output": "5"
      },
      {
        "input": "words = [\"aaaaa\",\"eeeee\",\"iiiii\",\"ooooo\",\"uuuuu\"], left = 1, right = 3",
        "output": "3"
      },
      {
        "input": "words = [\"sequence\",\"encounter\",\"interval\",\"equation\",\"occasion\"], left = 2, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"acoustic\",\"analysis\",\"bassoon\",\"clarinet\",\"didgeridoo\",\"flute\",\"guitar\",\"harp\",\"harp\",\"piano\",\"tuba\"], left = 2, right = 10",
        "output": "0"
      },
      {
        "input": "words = [\"sequence\",\"sequences\",\"sequentially\",\"sequenceable\",\"sequenceless\"], left = 2, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"ae\",\"ea\",\"oi\",\"io\",\"ou\",\"uo\"], left = 0, right = 5",
        "output": "6"
      },
      {
        "input": "words = [\"understanding\",\"learning\",\"grows\",\"every\",\"day\"], left = 0, right = 2",
        "output": "0"
      },
      {
        "input": "words = [\"a\",\"b\",\"c\",\"d\",\"e\"], left = 0, right = 4",
        "output": "2"
      },
      {
        "input": "words = [\"\",\"a\",\"e\",\"i\",\"o\",\"u\"], left = 0, right = 5",
        "output": "Error: string index out of range"
      },
      {
        "input": "words = [\"elephant\",\"giraffe\",\"hippo\",\"iguana\",\"jaguar\"], left = 0, right = 4",
        "output": "1"
      },
      {
        "input": "words = [\"xylophone\",\"xylo\",\"yolo\",\"mono\",\"neon\"], left = 1, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"sequence\",\"structure\",\"synergy\",\"symmetry\",\"spectrum\",\"syzygy\"], left = 2, right = 5",
        "output": "0"
      },
      {
        "input": "words = [\"vowel\",\"testing\",\"algorithm\",\"education\",\"umbrella\",\"sequence\",\"interview\",\"exhibition\",\"occasion\",\"environment\"], left = 3, right = 8",
        "output": "1"
      },
      {
        "input": "words = [\"algorithm\",\"data\",\"structure\",\"programming\",\"language\"], left = 2, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"\",\"a\",\"e\",\"i\",\"o\",\"u\",\"aeiou\",\"uoiea\",\"euioa\",\"aoieu\"], left = 1, right = 9",
        "output": "9"
      },
      {
        "input": "words = [\"vowel\",\"words\",\"only\",\"here\",\"now\"], left = 0, right = 4",
        "output": "0"
      },
      {
        "input": "words = [\"aeiou\",\"eioua\",\"iouae\",\"ouaei\",\"uaeio\"], left = 0, right = 4",
        "output": "5"
      },
      {
        "input": "words = [\"vowel\",\"vowels\",\"vowelstring\",\"vowelstrings\",\"vowels\",\"strings\",\"string\",\"vow\",\"owel\",\"vowels\",\"vowel\"], left = 3, right = 10",
        "output": "0"
      },
      {
        "input": "words = [\"vowel\",\"start\",\"end\",\"middle\",\"zone\",\"sequence\"], left = 2, right = 5",
        "output": "0"
      },
      {
        "input": "words = [\"sequence\",\"queue\",\"deque\",\"peep\",\"beep\",\"keel\",\"heel\",\"heal\",\"heap\",\"heap\",\"jeep\",\"weep\"], left = 1, right = 11",
        "output": "0"
      },
      {
        "input": "words = [\"elephant\",\"antelope\",\"giraffe\",\"hippo\",\"iguana\",\"jackal\",\"kangaroo\",\"lemur\"], left = 1, right = 7",
        "output": "2"
      },
      {
        "input": "words = [\"amazing\",\"algorithm\",\"umbrella\",\"opposite\",\"idea\",\"beautiful\",\"enormous\",\"interesting\",\"unexpected\",\"odd\"], left = 0, right = 9",
        "output": "3"
      }
    ]
  },
  {
    "id": 2864,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Math",
      "String"
    ],
    "problemDescription": "You are given a binary string s that contains at least one '1'.\nYou have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination.\nReturn a string representing the maximum odd binary number that can be created from the given combination.\nNote that the resulting string can have leading zeros.\n\u00a0\nExample 1:\n\nInput: s = \"010\"\nOutput: \"001\"\nExplanation: Because there is just one '1', it must be in the last position. So the answer is \"001\".\n\nExample 2:\n\nInput: s = \"0101\"\nOutput: \"1001\"\nExplanation: One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is \"100\". So the answer is \"1001\".\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 100\ns consists only of '0' and '1'.\ns contains at least one '1'.\n\n",
    "starterCode": "class Solution:\n    def maximumOddBinaryNumber(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"1111\"",
        "output": "1111"
      },
      {
        "input": "s = \"101010101\"",
        "output": "111100001"
      },
      {
        "input": "s = \"110011\"",
        "output": "111001"
      },
      {
        "input": "s = \"111\"",
        "output": "111"
      },
      {
        "input": "s = \"1110\"",
        "output": "1101"
      },
      {
        "input": "s = \"0000000000000000000000000000000000000000000000000000000000000001\"",
        "output": "0000000000000000000000000000000000000000000000000000000000000001"
      },
      {
        "input": "s = \"111000\"",
        "output": "110001"
      },
      {
        "input": "s = \"1001001\"",
        "output": "1100001"
      },
      {
        "input": "s = \"001010\"",
        "output": "100001"
      },
      {
        "input": "s = \"1100\"",
        "output": "1001"
      },
      {
        "input": "s = \"100001\"",
        "output": "100001"
      },
      {
        "input": "s = \"010\"",
        "output": "001"
      },
      {
        "input": "s = \"001001001\"",
        "output": "110000001"
      },
      {
        "input": "s = \"0101\"",
        "output": "1001"
      },
      {
        "input": "s = \"000001\"",
        "output": "000001"
      },
      {
        "input": "s = \"10001\"",
        "output": "10001"
      },
      {
        "input": "s = \"1100001\"",
        "output": "1100001"
      },
      {
        "input": "s = \"11111\"",
        "output": "11111"
      },
      {
        "input": "s = \"0101010101010101010101010101010101010101010101010101010101010101\"",
        "output": "1111111111111111111111111111111000000000000000000000000000000001"
      },
      {
        "input": "s = \"101010\"",
        "output": "110001"
      },
      {
        "input": "s = \"00001\"",
        "output": "00001"
      },
      {
        "input": "s = \"1000\"",
        "output": "0001"
      },
      {
        "input": "s = \"11100\"",
        "output": "11001"
      },
      {
        "input": "s = \"0101010101\"",
        "output": "1111000001"
      },
      {
        "input": "s = \"0001\"",
        "output": "0001"
      },
      {
        "input": "s = \"11001001\"",
        "output": "11100001"
      },
      {
        "input": "s = \"101010101010101010\"",
        "output": "111111110000000001"
      },
      {
        "input": "s = \"01010101010101010101010101010101\"",
        "output": "11111111111111100000000000000001"
      },
      {
        "input": "s = \"101010101010101\"",
        "output": "111111100000001"
      },
      {
        "input": "s = \"00100100101010\"",
        "output": "11110000000001"
      },
      {
        "input": "s = \"00000000000000000000001\"",
        "output": "00000000000000000000001"
      },
      {
        "input": "s = \"1111000011110000\"",
        "output": "1111111000000001"
      },
      {
        "input": "s = \"10000000000000000000000000000000000000000000000000000000000000001\"",
        "output": "10000000000000000000000000000000000000000000000000000000000000001"
      },
      {
        "input": "s = \"1000001\"",
        "output": "1000001"
      },
      {
        "input": "s = \"1001001001001001001001\"",
        "output": "1111111000000000000001"
      },
      {
        "input": "s = \"00000000001\"",
        "output": "00000000001"
      },
      {
        "input": "s = \"010011001100\"",
        "output": "111100000001"
      },
      {
        "input": "s = \"100011100111\"",
        "output": "111111000001"
      },
      {
        "input": "s = \"0000100010001\"",
        "output": "1100000000001"
      },
      {
        "input": "s = \"1111000010\"",
        "output": "1111000001"
      },
      {
        "input": "s = \"00000000000000000000000000000001\"",
        "output": "00000000000000000000000000000001"
      },
      {
        "input": "s = \"00010010101\"",
        "output": "11100000001"
      },
      {
        "input": "s = \"11110000\"",
        "output": "11100001"
      },
      {
        "input": "s = \"1111111111110\"",
        "output": "1111111111101"
      },
      {
        "input": "s = \"11010101010101010101\"",
        "output": "11111111110000000001"
      },
      {
        "input": "s = \"00000001\"",
        "output": "00000001"
      },
      {
        "input": "s = \"1111111111\"",
        "output": "1111111111"
      },
      {
        "input": "s = \"010101010101\"",
        "output": "111110000001"
      },
      {
        "input": "s = \"1010101010101010101\"",
        "output": "1111111110000000001"
      },
      {
        "input": "s = \"000000000001\"",
        "output": "000000000001"
      },
      {
        "input": "s = \"11111111111111110000\"",
        "output": "11111111111111100001"
      },
      {
        "input": "s = \"11111111111111111111\"",
        "output": "11111111111111111111"
      },
      {
        "input": "s = \"0010101010\"",
        "output": "1110000001"
      },
      {
        "input": "s = \"11111111111111111111111111111111\"",
        "output": "11111111111111111111111111111111"
      },
      {
        "input": "s = \"00000000000000000001\"",
        "output": "00000000000000000001"
      },
      {
        "input": "s = \"1111111111111111\"",
        "output": "1111111111111111"
      },
      {
        "input": "s = \"0000111111\"",
        "output": "1111100001"
      },
      {
        "input": "s = \"111000011\"",
        "output": "111100001"
      },
      {
        "input": "s = \"01010101010101010101\"",
        "output": "11111111100000000001"
      },
      {
        "input": "s = \"1001101\"",
        "output": "1110001"
      },
      {
        "input": "s = \"1100000000000000000000000000000001\"",
        "output": "1100000000000000000000000000000001"
      },
      {
        "input": "s = \"111110000000\"",
        "output": "111100000001"
      },
      {
        "input": "s = \"11111000000\"",
        "output": "11110000001"
      },
      {
        "input": "s = \"10000000000\"",
        "output": "00000000001"
      },
      {
        "input": "s = \"110100110\"",
        "output": "111100001"
      },
      {
        "input": "s = \"1010101010\"",
        "output": "1111000001"
      },
      {
        "input": "s = \"010101010101010101\"",
        "output": "111111110000000001"
      },
      {
        "input": "s = \"1000000000000000000001\"",
        "output": "1000000000000000000001"
      },
      {
        "input": "s = \"11111110000000000000000000000000\"",
        "output": "11111100000000000000000000000001"
      },
      {
        "input": "s = \"1101001\"",
        "output": "1110001"
      },
      {
        "input": "s = \"11001100\"",
        "output": "11100001"
      },
      {
        "input": "s = \"1010101010101010\"",
        "output": "1111111000000001"
      },
      {
        "input": "s = \"110000000000001\"",
        "output": "110000000000001"
      },
      {
        "input": "s = \"1111111111111111111111\"",
        "output": "1111111111111111111111"
      },
      {
        "input": "s = \"111000011000\"",
        "output": "111100000001"
      },
      {
        "input": "s = \"0101010101010101010101\"",
        "output": "1111111111000000000001"
      },
      {
        "input": "s = \"100010001\"",
        "output": "110000001"
      },
      {
        "input": "s = \"10011001100110011001100110011001\"",
        "output": "11111111111111100000000000000001"
      }
    ]
  },
  {
    "id": 2325,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String"
    ],
    "problemDescription": "You are given the strings key and message, which represent a cipher key and a secret message, respectively. The steps to decode message are as follows:\n\nUse the first appearance of all 26 lowercase English letters in key as the order of the substitution table.\nAlign the substitution table with the regular English alphabet.\nEach letter in message is then substituted using the table.\nSpaces ' ' are transformed to themselves.\n\n\nFor example, given key = \"happy boy\" (actual key would have at least one instance of each letter in the alphabet), we have the partial substitution table of ('h' -> 'a', 'a' -> 'b', 'p' -> 'c', 'y' -> 'd', 'b' -> 'e', 'o' -> 'f').\n\nReturn the decoded message.\n\u00a0\nExample 1:\n\n\nInput: key = \"the quick brown fox jumps over the lazy dog\", message = \"vkbs bs t suepuv\"\nOutput: \"this is a secret\"\nExplanation: The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in \"the quick brown fox jumps over the lazy dog\".\n\nExample 2:\n\n\nInput: key = \"eljuxhpwnyrdgtqkviszcfmabo\", message = \"zwx hnfx lqantp mnoeius ycgk vcnjrdb\"\nOutput: \"the five boxing wizards jump quickly\"\nExplanation: The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in \"eljuxhpwnyrdgtqkviszcfmabo\".\n\n\u00a0\nConstraints:\n\n26 <= key.length <= 2000\nkey consists of lowercase English letters and ' '.\nkey contains every letter in the English alphabet ('a' to 'z') at least once.\n1 <= message.length <= 2000\nmessage consists of lowercase English letters and ' '.\n\n",
    "starterCode": "class Solution:\n    def decodeMessage(self, key: str, message: str) -> str:\n        ",
    "testCases": [
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"cba zyx\"",
        "output": "xyz abc"
      },
      {
        "input": "key = \"jump quickly on this yellow pig\", message = \"fxudyjzjw lqdj fxej nqeo fxlwlt\"",
        "output": "Error: 'f'"
      },
      {
        "input": "key = \"a quick movement of the enemy will jeopardize five gunboats\", message = \"yfcj myj pyjl ufcj myj pyjl ufcj myj pyjl\"",
        "output": "omer gor sorq cmer gor sorq cmer gor sorq"
      },
      {
        "input": "key = \"the five boxing wizards jump quickly on this yellow pig\", message = \"jhxuh lqdj efxgh lpuaz fxdyjzjw\"",
        "output": "rbisb yvpr cdikb yusnm dipzrmrl"
      },
      {
        "input": "key = \"move forward zippy vim\", message = \"qldu bxwrdlw ecfbv\"",
        "output": "Error: 'q'"
      },
      {
        "input": "key = \"dvhfujngcpqxlwokzriebastmy\", message = \"mwtiaz azr\"",
        "output": "ynxsvq vqr"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"xyz abc\"",
        "output": "xyz abc"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dog\", message = \"vkbs bs t suepuv\"",
        "output": "this is a secret"
      },
      {
        "input": "key = \"byvzkgxfnqmpalwodjtrshceui\", message = \"xsm wv zmz\"",
        "output": "guk oc dkd"
      },
      {
        "input": "key = \"wmtresuavhigdcbfykjqploxzn\", message = \"lfnlccyvmdg\"",
        "output": "vpzvnnqibml"
      },
      {
        "input": "key = \"a quick movement of the enemy will jeopardize five gunboats\", message = \"ejp mysljylc kd kxveddknmc re jsicpdrysi\"",
        "output": "Error: 'x'"
      },
      {
        "input": "key = \"gymnymphs fly by my wyrm\", message = \"cqdutsh sth sh ct sqwu\"",
        "output": "Error: 'c'"
      },
      {
        "input": "key = \"zabcdefghijklmnopqrstuvwxy\", message = \"sl rfc zdf\"",
        "output": "tm sgd aeg"
      },
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"mlkjhgfedcbazyxwvutsrqpon\"",
        "output": "nopqstuvwxyzabcdefghijklm"
      },
      {
        "input": "key = \"eljuxhpwnyrdgtqkviszcfmabo\", message = \"zwx hnfx lqantp mnoeius ycgk vcnjrdb\"",
        "output": "the five boxing wizards jump quickly"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"z x c v\"",
        "output": "z x c v"
      },
      {
        "input": "key = \"gysrnhxvaofcedwmltukipjbqz\", message = \"gigv symykgl igxvxjxg\"",
        "output": "auah cbpbtaq uaghgwga"
      },
      {
        "input": "key = \"sixty zippers were quickly judged faulty\", message = \"lwhuv amvhfuhw dhu hulhuqj fxufqk mncuf\"",
        "output": "Error: 'h'"
      },
      {
        "input": "key = \"phinxajsgkrzcwvltqbdemoufy\", message = \"xvo wv pmj\"",
        "output": "eow no avg"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"zaoymnbxcqrljtheifkgdvspwu\"",
        "output": "zaoymnbxcqrljtheifkgdvspwu"
      },
      {
        "input": "key = \"qwertyuiopasdfghjklzxcvbnm\", message = \"gsv jfrxp yildm ulc\"",
        "output": "olw qnduj fhsmz gsv"
      },
      {
        "input": "key = \"the five boxing wizards jump quickly on this june day\", message = \"ymj lvfx sflhzymhs vxlw wjymjlvfx sflhzymhs\"",
        "output": "ztr yfdi qdybmztbq fiyl lrztryfdi qdybmztbq"
      },
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt\"",
        "output": "thequ ickbr ownfo xjump sover thela zydog"
      },
      {
        "input": "key = \"dfghjklwcvxziomnpqrustyabe\", message = \"kckd ykky\"",
        "output": "fifa wffw"
      },
      {
        "input": "key = \"mnychdpbxofl wgviakjuzterqs\", message = \"irhvmvccsjb\"",
        "output": "pxeoaoddzsh"
      },
      {
        "input": "key = \"pack my box with five dozen liquor jugs\", message = \"xujf qv zgy jxpx qne nfgqj sraju\"",
        "output": "ivxn uo ryf xiai usp snyux zwbxv"
      },
      {
        "input": "key = \"vampires love unicorns flying by my wyrm\", message = \"di vccvmr wv czebwqha wv iv lvyrj\"",
        "output": "Error: 'd'"
      },
      {
        "input": "key = \"mwp dhxjzvcqrkbyanflstguoei\", message = \"di vccvmr wv czebwqha wv iv lvyrj\"",
        "output": "dz ijjial bi jhynbkep bi zi siolg"
      },
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"a b c d\"",
        "output": "z y x w"
      },
      {
        "input": "key = \"the five boxing wizards jump quickly\", message = \"fmwp vifd ttp xosmead\"",
        "output": "dtlu fedp aau ihqtcnp"
      },
      {
        "input": "key = \"vuqangfkswjpryxtdmzobhcile\", message = \"wfn yv yfcv\"",
        "output": "jge na ngwa"
      },
      {
        "input": "key = \"abcdefghijk lmnopqrstuvwxyz\", message = \"eiqhw fjq hwdq\"",
        "output": "eiqhw fjq hwdq"
      },
      {
        "input": "key = \"cipher keys are always fun to create\", message = \"xjuwao awos wlu awjwy aojxw ao qjwjqao\"",
        "output": "Error: 'x'"
      },
      {
        "input": "key = \"a quick movement of the enemy will jeopardize five gunboats\", message = \"zruog glhvg frp fvdw zl glcgv\"",
        "output": "vtchw wqniw mts miup vq wqewi"
      },
      {
        "input": "key = \"thejumpsquickbrownfoxoverlazydog\", message = \"svhjyjsiqphsjudprvcbgijz\"",
        "output": "htbdxdhjigbhdeygntkmzjdw"
      },
      {
        "input": "key = \"ab ac ad ae af ag ah ai aj ak al am an ao ap aq ar as at au av aw ax ay az\", message = \"qz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz\"",
        "output": "qz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz vz"
      },
      {
        "input": "key = \"swzybfrxlnaoumdgtqivhjkpce\", message = \"flgxswdliefyirukyoaqmpjc\"",
        "output": "fiphaboiszfdsgmwdlkrnxvy"
      },
      {
        "input": "key = \"all animals are equal but some animals are more equal than others\", message = \"zik xkkvmsw zmj xrsui zqtk ziv zsu xkkvmsw zmj iwti xrsui zqtk ziv zik\"",
        "output": "Error: 'z'"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dog\", message = \"qruqz efn nhr htyq\"",
        "output": "djedw cnm mbj baxd"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dog\", message = \"xibohu uvp xibohu\"",
        "output": "ofikbe etr ofikbe"
      },
      {
        "input": "key = \"abcd efgh ijkl mnop qrst uvwx yz\", message = \"vuwx yz abcd ef\"",
        "output": "vuwx yz abcd ef"
      },
      {
        "input": "key = \"gymnopqrstuvwxzabcdefhiljk\", message = \"xqmgq zm zmjy\"",
        "output": "ngcag oc ocyb"
      },
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"yxe xe xe\"",
        "output": "bcv cv cv"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\", message = \"abc def abc\"",
        "output": "abc def abc"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"vxp qpy o\"",
        "output": "vxp qpy o"
      },
      {
        "input": "key = \"jumps over the lazy dog quick brown fox\", message = \"pvuzr cgviy ojizv bxz cfiwz nqzsx vgrb\"",
        "output": "dgbni tqgso fasng vzn tyswn xrnez gqiv"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"xqf\"",
        "output": "odn"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"gfn\"",
        "output": "znm"
      },
      {
        "input": "key = \"pzucfelxwyabqomtjirdnsvhgk\", message = \"kwj kwi kwv wkv\"",
        "output": "ziq zir ziw izw"
      },
      {
        "input": "key = \"fmwtkujhpnobxigcsqrzydalve\", message = \"fyh fyt fyv yfj\"",
        "output": "auh aud auy uag"
      },
      {
        "input": "key = \"abcdefghij klmnopqrstuvwxyz\", message = \"qzcfj nx ud qzcfj\"",
        "output": "qzcfj nx ud qzcfj"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"yjx x\"",
        "output": "xpo o"
      },
      {
        "input": "key = \"jumps over lazy dogs quick brown fox the this\", message = \"yjiwxtw vqzj spwq ovbxc yoz qjxv\"",
        "output": "maquxyu gpla edup fgtxr mfl paxg"
      },
      {
        "input": "key = \"jklmnopqrstuvwxyzabcdefghi\", message = \"frg fmh gfn\"",
        "output": "wix wdy xwe"
      },
      {
        "input": "key = \"if the army of pharaoh had followed them closely the lord would have swept them away\", message = \"tk svj fkhxjg zq xjfkfvmj xfvmtk svj gsvtqy svj ef kfvbvmb xjfv tk\"",
        "output": "Error: 'k'"
      },
      {
        "input": "key = \"zabcdefghijklmnopqrstuvwxy\", message = \"qxy xyx yxq\"",
        "output": "ryz yzy zyr"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dog and the quick brown fox jumps over the lazy dog\", message = \"vkbs bs t suepuv\"",
        "output": "this is a secret"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"zurq zfrq zqr ku\", \"abcdefghijklmnopqrstuvwxyz\"",
        "output": "Error: 'zurq zfrq zqr ku'"
      },
      {
        "input": "key = \"ekmflgdqvzntowyhxuspaibrcj\", message = \"jbs xut hig\"",
        "output": "zws qrl pvf"
      },
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"iyh uhy l\"",
        "output": "rbs fsb o"
      },
      {
        "input": "key = \"vwxymnbcdfghjklqropstuzaike\", message = \"vcp o cv vcp\"",
        "output": "ahs r ha ahs"
      },
      {
        "input": "key = \"ajfzldkgotmhrvwsypnqicxebu\", message = \"oxt oxi oxd xot\"",
        "output": "iwj iwu iwf wij"
      },
      {
        "input": "key = \"jklmnopqrstuvwxyzabcdefghi\", message = \"wfn yv yfcv\"",
        "output": "nwe pm pwtm"
      },
      {
        "input": "key = \"tevosjhbnyxrgqkfaumzilwpcd\", message = \"npu gpm gpy lgg\"",
        "output": "ixr mxs mxj vmm"
      },
      {
        "input": "key = \"mnbvcxzlkjhgfdsapoiuytrewq\", message = \"hfu q jhu\"",
        "output": "kmt z jkt"
      },
      {
        "input": "key = \"abcdefgijklmnopqrstuvwxyz\", message = \"hqv v yqv\"",
        "output": "Error: 'h'"
      },
      {
        "input": "key = \"asdfghjklqwertyuiopzxcvbnm\", message = \"yqz dpy o\"",
        "output": "ojt cso r"
      },
      {
        "input": "key = \"qbnvgjlftscxkouwamdphzreiy\", message = \"umr urv urm pyz\"",
        "output": "orw owd owr tzv"
      },
      {
        "input": "key = \"qwertyuiopasdfghjklzxcvbnm\", message = \"zqj dpy o\"",
        "output": "taq mjf i"
      },
      {
        "input": "key = \"five boxing wizards jump quickly on this lazy dog\", message = \"qzyc yvzctv yxqjvzq yjiwxtw on qjxv yoj\"",
        "output": "tkxu xckuyc xgtpckt xpbjgyj fh tpgc xfp"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"c e\"",
        "output": "g c"
      },
      {
        "input": "key = \"abcdefghizjklmnopqrstuvwxy\", message = \"lii eil eil\"",
        "output": "mii eim eim"
      },
      {
        "input": "key = \"vxznpqjwoefkytlimrdhaguscb\", message = \"tyf iy tf\"",
        "output": "nmk pm nk"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"sw uqz\"",
        "output": "sl edw"
      },
      {
        "input": "key = \"jxwtrklivnpmhudsfgcayzbeoq\", message = \"kcfizgv zr ocfv\"",
        "output": "fsqhvri ve ysqi"
      },
      {
        "input": "key = \"lazy dogs quick brown fox jumps over the this\", message = \"vqzj spwq ovbxc yjiwxtw vqzj qjxv\"",
        "output": "wict hvpi fwnsl dtkpsyp wict itsw"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"yjx z\"",
        "output": "xpo w"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"mlml qmf lml gmgg\"",
        "output": "mlml qmf lml gmgg"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"vz\"",
        "output": "tw"
      },
      {
        "input": "key = \"dbrujxfgzvcotwiympnslakqhe\", message = \"kmqs ks u kqsebs\"",
        "output": "wqxt wt d wxtzbt"
      },
      {
        "input": "key = \"lazy dogs jump quickly on the brown fox and\", message = \"vqzj spwq yjiwxtw ovbxc yoj qjxv yoz\"",
        "output": "Error: 'v'"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dog\", message = \"wqiv xi sqin sqin\"",
        "output": "ldft of sdfm sdfm"
      },
      {
        "input": "key = \"dtjgsvyzxpkbfqwulcmohraeni\", message = \"obr obn oti atn\"",
        "output": "tlv tly tbz wby"
      },
      {
        "input": "key = \"abcdefghijk lmnopqrstuvwxyz\", message = \"svil km ybgu bg ujr krkhi yjr cvvux\"",
        "output": "svil km ybgu bg ujr krkhi yjr cvvux"
      },
      {
        "input": "key = \"the quick brown fox jumps over lazy dogs\", message = \"mht zrs xqf ovkqvoq ngyu kgxqj bpxc\"",
        "output": "qba wjs odn kthdtkd mzxe hzodp irog"
      },
      {
        "input": "key = \"qwertyuiopasdfghjklzxcvbnm\", message = \"jyq zq o\"",
        "output": "qfa ta i"
      },
      {
        "input": "key = \"gibrfqotdhewakjyzlxmvncpus\", message = \"yxh lo loxhy\"",
        "output": "psj rg rgsjp"
      },
      {
        "input": "key = \"mnopqrstuvwxyzabcdefghijkl\", message = \"aov eovm eovm\"",
        "output": "ocj scja scja"
      },
      {
        "input": "key = \"zxvtrqponmlkjihgfedcbazyw\", message = \"ajc eajc eajc\"",
        "output": "vmt rvmt rvmt"
      },
      {
        "input": "key = \"rhythms can be very exciting and mysterious\", message = \"kvgzo ozx yz ovbxc yvoqzgkxq ovgx yz xebc\"",
        "output": "Error: 'k'"
      },
      {
        "input": "key = \"gfedcbauioplkjhzyxwvtsrqmn\", message = \"ixv yxv oxv\"",
        "output": "irt qrt jrt"
      },
      {
        "input": "key = \"xyzabcdefghijklmnopqrstuvw\", message = \"wvf v fv\"",
        "output": "zyi y iy"
      },
      {
        "input": "key = \"abc def ghijk lmnop qrst uvwxyz\", message = \"nvmjy nbsytw\"",
        "output": "nvmjy nbsytw"
      },
      {
        "input": "key = \"eljuxhpwnyrdgtqkviszcfmabo\", message = \"ihd hsih xihw gh hsi\"",
        "output": "rfl fsrf erfh mf fsr"
      },
      {
        "input": "key = \"nopqrstuvwxyzabcdefghijklm\", message = \"zqv qv q\"",
        "output": "mdi di d"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dog\", message = \"qytz nwt zwt\"",
        "output": "dxaw mla wla"
      },
      {
        "input": "key = \"quick brown fox jumps over the lazy dog and the quick brown fox jumps\", message = \"vxw aov g pufa ohq\"",
        "output": "qli vhq z obkv hta"
      },
      {
        "input": "key = \"vbnmxczasdfghjklpoiuytrewq\", message = \"vkbs bs t suepuv\"",
        "output": "aobi bi v itxqta"
      },
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"yvc zc yz\"",
        "output": "bex ax ba"
      },
      {
        "input": "key = \"azbycxdwevfugthrskjqplomni\", message = \"tqppf ptd je\"",
        "output": "ntuuk ung si"
      },
      {
        "input": "key = \"xylophone qwertyuiop asdfghjklz cvbnm\", message = \"cvmu cvxqv\"",
        "output": "wxzm wxaix"
      },
      {
        "input": "key = \"qwertyuiopasdfghjklzxcvbnm\", message = \"lqtfw xtg twkxq\"",
        "output": "saenb ueo ebrua"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"yjx v\"",
        "output": "xpo t"
      },
      {
        "input": "key = \"nmqpviwedklxzfgrctuhyjasob\", message = \"ohc oha ohu voh\"",
        "output": "ytq ytw yts eyt"
      },
      {
        "input": "key = \"phinxajrhqdogesbcukmfltwyz\", message = \"zvmh ecv wvmazk wv hwvm jge wh yvmazk eg\"",
        "output": "Error: 'v'"
      },
      {
        "input": "key = \"nopqrstuvwxyzabcdefghijklm\", message = \"izk zkh bva jnfrdq\"",
        "output": "vmx mxu oin waseqd"
      },
      {
        "input": "key = \"quick brown fox jumps over the lazy dog\", message = \"rwjsi exmti gsrhri zv wimtix egzewy\"",
        "output": "gimpc rlnsc zpgtgc wq icnscl rzwrix"
      },
      {
        "input": "key = \"lazy dogs jumps over the quick brown fox the\", message = \"vqzj yjiwxtw spwq yoj spwq ovbxc yoz\"",
        "output": "mrci diswzpw hlwr dfi hlwr fmvzt dfc"
      },
      {
        "input": "key = \"mnopqrstuvwxyzabcdefghijkl\", message = \"mud gct gct\"",
        "output": "air uqh uqh"
      },
      {
        "input": "key = \"lazy dogs jumps quickly over the brown fox and\", message = \"vqzj yjiwxtw spwq yoj ovbxc yoz\"",
        "output": "qmci dinwztw hlwm dfi fqvzo dfc"
      },
      {
        "input": "key = \"vzhofucmlnjqbdspartexwiykg\", message = \"dpy ld o yv\"",
        "output": "npx in d xa"
      },
      {
        "input": "key = \"mnbvcxzlkjhgfdsapoiuytrewq\", message = \"cv lpcv\"",
        "output": "ed hqed"
      },
      {
        "input": "key = \"the lazy dog jumps over the quick brown fox\", message = \"qjxv yoj vqzj spwq yjiwxtw ovbxc yvoqzgkxq\"",
        "output": "rkzp gik prfk onwr gkswzaw ipvzt gpirfjuzr"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"yjx yjx\"",
        "output": "xpo xpo"
      },
      {
        "input": "key = \"cvzkgbxquihmpnytjrsdawolef\", message = \"cfr cfd cfl mfl\"",
        "output": "azr azt azx lzx"
      },
      {
        "input": "key = \"lazy dogs jumps quickly over the brown fox the\", message = \"vqzj yjiwxtw spwq yoj ovbxc yoj\"",
        "output": "qmci dinwztw hlwm dfi fqvzo dfi"
      },
      {
        "input": "key = \"thezyxwvutsrqponmlkjihgfedcba\", message = \"zqv eovm ztqkofv ztqkofv\"",
        "output": "dlh cnhp dalrnvh dalrnvh"
      },
      {
        "input": "key = \"this is a very long key that contains all letters of the alphabet\", message = \"jktt tj x xqtj ofugj cftjkgm oayzj kgxqj kfxgy jgj\"",
        "output": "Error: 'j'"
      },
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"evh vhe yhe\"",
        "output": "ves esv bsv"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dog\", message = \"zqf ykq fqu fqo ykt nqtk\"",
        "output": "wdn xhd nde ndk xha mdah"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"hqv v yhqf\"",
        "output": "hqv v yhqf"
      },
      {
        "input": "key = \"ponmlkjihgfedcbazyxwvutsrq\", message = \"jxqy xtgy efn nhr\"",
        "output": "gszr swjr lkc ciy"
      },
      {
        "input": "key = \"the fifth of july nineteen sixty four\", message = \"wlc vihwx zq mhqy xjwvexqv ksvj yhqw\"",
        "output": "Error: 'w'"
      },
      {
        "input": "key = \"gymbztfkwjxehalnqosrudvpci\", message = \"nqzv nq p azdvmn\"",
        "output": "pqew pq x nevwcp"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"zcf bvg jnfrdq\"",
        "output": "zcf bvg jnfrdq"
      },
      {
        "input": "key = \"brown fox the quick jumps over lazy dogs and\", message = \"ovbxc yoz spwq yvoqzgkxq vqzj qjxv ovgx\"",
        "output": "ctagn xcw srdk xtckwzogk tkwp kpgt ctzg"
      },
      {
        "input": "key = \"qpwoeirutyalskdjfhgczxmvbn\", message = \"vcp o cv ocv\"",
        "output": "xtb d tx dtx"
      },
      {
        "input": "key = \"ijklmnopqrstuvwxyzabcdefgh\", message = \"wqv qv q\"",
        "output": "oin in i"
      },
      {
        "input": "key = \"cijqxfyvolnmtzgdwsaehrkpbu\", message = \"fnw uvf uft nwg\"",
        "output": "fkq zhf zfm kqo"
      },
      {
        "input": "key = \"lazy dogs jump quickly over the brown fox\", message = \"jxqy xtgy efn nhr\"",
        "output": "izmd ztgd ryx xus"
      },
      {
        "input": "key = \"phinxqbcdgjkamlstvrewyzouf\", message = \"thx thg lv xkqhs\"",
        "output": "qbe qbj or elfbp"
      },
      {
        "input": "key = \"jklmnopqrstuvwxyzabcdefghi\", message = \"dru gct gct\"",
        "output": "uil xtk xtk"
      },
      {
        "input": "key = \"jxqtvknpsmuhbdrgzlcewfoaiy\", message = \"dgy gch dgy\"",
        "output": "npz psl npz"
      },
      {
        "input": "key = \"abcdefghijklnmopqrstuvwxyz\", message = \"opq qpo qpo\"",
        "output": "opq qpo qpo"
      },
      {
        "input": "key = \"qwertyuiopasdfghjklzxcvbnm\", message = \"gsv htk gdv jgd\"",
        "output": "olw per omw qom"
      },
      {
        "input": "key = \"jzkgwvqdhnmltisrfoxcabepy\", message = \"jwpwp yv owp\"",
        "output": "aexex yf rex"
      },
      {
        "input": "key = \"wsgczxfltkbqpndohjuaevrmiy\", message = \"vmx gpm mvg maq\"",
        "output": "vxf cmx xvc xtl"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"xol mlu w yjx\"",
        "output": "xol mlu w yjx"
      },
      {
        "input": "key = \"dogs quick brown fox jumps over lazy the this\", message = \"vqzj spwq ovbxc yjiwxtw vqzj qjxv\"",
        "output": "sewp drle bsjoh xpgloyl sewp epos"
      },
      {
        "input": "key = \"abcdefgijklmnopqrstuvwxyz\", message = \"qcp zc y\"",
        "output": "pco yc x"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"yjx y\"",
        "output": "xpo x"
      },
      {
        "input": "key = \"lmnopqrstuvwxyzabcdefghijk\", message = \"vqj qjv z\"",
        "output": "kfy fyk o"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"qiy oiq z\"",
        "output": "qiy oiq z"
      },
      {
        "input": "key = \"and the quick brown fox jumps over lazy dogs\", message = \"ovgx yoj spwq yvoqzgkxq ovbxc yjiwxtw vqzj\"",
        "output": "nvzq ynr utog yvngxzkqg nvlqj yrioqdo vgxr"
      },
      {
        "input": "key = \"qwertyuioplkjhgfdsazxcvbnm\", message = \"gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt\"",
        "output": "orwmp dujfh kqzgk vapyl nkcwh orwit sxbke"
      },
      {
        "input": "key = \"nopqrstuvwxyzabcdefghijklm\", message = \"zqv qv z\"",
        "output": "mdi di m"
      },
      {
        "input": "key = \"quick brown fox jumps over lazy dogs the this\", message = \"yvoqzgkxq ovbxc yjiwxtw vqzj qjxv spwq qjxv\"",
        "output": "vqhauxela hqfld vmcilyi qaum amlq poia amlq"
      },
      {
        "input": "key = \"qwertyuiopasdfghjklzxcvbnm\", message = \"oxj o j\"",
        "output": "iuq i q"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"sw yjx\"",
        "output": "sl xpo"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"v zifw ilxqfs\"",
        "output": "t wfnl fuodns"
      },
      {
        "input": "key = \"this is a test key for decoding messages\", message = \"k xkxv v tvk dkk\"",
        "output": "Error: 'x'"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"qzcf bfgs jgcd yqcf\"",
        "output": "qzcf bfgs jgcd yqcf"
      },
      {
        "input": "key = \"abcdefghizjklmnopqrstuvwxy\", message = \"ulc cul cul\"",
        "output": "vmc cvm cvm"
      },
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"tsr rst rst\"",
        "output": "ghi ihg ihg"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"qz cf\"",
        "output": "dw gn"
      },
      {
        "input": "key = \"qwertyuiopasdfghjklzxcvbnm\", message = \"mfir kkfr ifxk\"",
        "output": "znhd rrnd hnur"
      },
      {
        "input": "key = \"fnex wpviqkdmtlugybhcarzsoj\", message = \"hcv uxl\"",
        "output": "stg odn"
      },
      {
        "input": "key = \"to be or not to be that is the question\", message = \"uj cf qz uqv uj cf uhvi zu ctzv\"",
        "output": "Error: 'j'"
      },
      {
        "input": "key = \"zebra quick brown fox jumps over the lazy dog\", message = \"gqjty efn nhr htyq\"",
        "output": "zfpux bnm mvd vuxf"
      },
      {
        "input": "key = \"gymnymphs fly by my wyrm\", message = \"hzoitpizh gza zj nz hztpi\"",
        "output": "Error: 'z'"
      },
      {
        "input": "key = \"nopqrstuvwxyzabcdefghijklm\", message = \"vqz zqv z\"",
        "output": "idm mdi m"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dog\", message = \"vgj ov sa jhygjmt oh rjw\"",
        "output": "tzp kt sv pbxzpqa kb jpl"
      },
      {
        "input": "key = \"bcadefghijklmnopqrstuvwxzy\", message = \"bdc bva jnfrdq\"",
        "output": "adb avc jnfrdq"
      },
      {
        "input": "key = \"asdfghjklqwertyuiopzxcvbnm\", message = \"wqv qv q\"",
        "output": "kjw jw j"
      },
      {
        "input": "key = \"zebra tiger quick brown fox jumps over the lazy dog\", message = \"uybvf ojizv cfiwz nqzsx vgrb cgviy ojizv bxz\"",
        "output": "jycvp mrgav kpgna oiauq vhdc khvgy mrgav cqa"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dog\", message = \"dkv v yvk\"",
        "output": "yht t xth"
      },
      {
        "input": "key = \"nopqrstuvwxyzabcdefghijklm\", message = \"zqv qv zc\"",
        "output": "mdi di mp"
      },
      {
        "input": "key = \"the brown fox jumps quickly over a lazy dog\", message = \"pjoj qvw xqt jqtqi yjiwxtw spwq jx gsvk yoj\"",
        "output": "nkfk pvg jpa kpapq ukqgjag ongp kj zovs ufk"
      },
      {
        "input": "key = \"this quick brown fox jumps over lazy dogs\", message = \"qjxv yvoqzgkxq ovbxc yjiwxtw spwq yoj vqzj\"",
        "output": "epos xskewzhoe ksiog xpcloal drle xkp sewp"
      },
      {
        "input": "key = \"jklmnopqrstuvwxyzabcdefghi\", message = \"sgtw xjxw xjxw\"",
        "output": "jxkn oaon oaon"
      },
      {
        "input": "key = \"a bc df egh ijkl mno pq rs tuvwxyz\", message = \"v lqyq w lwv yjx\"",
        "output": "v lqyq w lwv yjx"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"qzcfb qmgox ypgmt gsv fiu\"",
        "output": "qzcfb qmgox ypgmt gsv fiu"
      },
      {
        "input": "key = \"pqrkxlcdemosvahzwfygtnujib\", message = \"izv zfc yfcv\"",
        "output": "ypm prg srgm"
      },
      {
        "input": "key = \"lazy dogs jump over quick brown fox the\", message = \"bxz bpxc wxqgc ebcjg fcivw zqzsx ojizv\"",
        "output": "txc tlxr uxpgr ntrig wrqmu cpchx fiqcm"
      },
      {
        "input": "key = \"okyftdazhsxngijwumrcvqlpeb\", message = \"kqv mhg a lv vjx\"",
        "output": "bvu rim g wu uok"
      },
      {
        "input": "key = \"the brown fox jumps quickly over a lazy dog\", message = \"mht zrs xqf ovkqvoq ngyu a qzfe nax\"",
        "output": "mba xeo jpi fvspvfp hzul w pxic hwj"
      },
      {
        "input": "key = \"over lazy dogs quick brown fox jumps the this\", message = \"spwq vqzj spwq ovbxc yjiwxtw qjxv qjxv\"",
        "output": "kxrl blgv kxrl abquo hvnruyr lvub lvub"
      },
      {
        "input": "key = \"the brown quick fox jumps over lazy dogs\", message = \"zqft gqf vxt xec ohq oizd\"",
        "output": "wina zin toa ocl fbi fkwy"
      },
      {
        "input": "key = \"this is a very long key that contains all the letters of the alphabet\", message = \"slqv lv j uphb xqvo jxu qvojwv njo lvjwvq\"",
        "output": "Error: 'q'"
      },
      {
        "input": "key = \"jump quickly on this lazy dog and the brown fox\", message = \"yjiwxtw on qjxv yoj qzyc yvzctv yxqjvzq ovgx yz\"",
        "output": "Error: 'v'"
      },
      {
        "input": "key = \"jumped over the lazy brown fox quick\", message = \"ujxqyc efn nhr htyq\"",
        "output": "batuow esr rki kjou"
      },
      {
        "input": "key = \"fghijklmnopqrstuvwxyzabcde\", message = \"vrc vja vrc vja\"",
        "output": "qmx qev qmx qev"
      },
      {
        "input": "key = \"the quick brown fox jumps over lazy dogs and\", message = \"spwq yvoqzgkxq ovbxc yjiwxtw vqzj ovgx\"",
        "output": "srld xtkdwzhod ktiog xpfloal tdwp ktzo"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"qjvux xfgf q px\"",
        "output": "dpteo onzn d ro"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dog\", message = \"dkv v ydv\"",
        "output": "yht t xyt"
      },
      {
        "input": "key = \"xlsnmveizhptfjugobcdkqrway\", message = \"wcr vcv wcv xwv\"",
        "output": "xsw fsf xsf axf"
      },
      {
        "input": "key = \"quick brown fox jumps over lazy dog the\", message = \"fxfsr jxqfk wtf pvuzr bcgy jxqfk dvo\"",
        "output": "klkpg mlake iyk oqbug fdxv mlake wqh"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"yjx w\"",
        "output": "xpo l"
      },
      {
        "input": "key = \"bdfhjlnprtvxzcgikmoqsuwyae\", message = \"hc vjg cji cgy\"",
        "output": "dn keo nep nox"
      },
      {
        "input": "key = \"junta de los trabalhadores brasileiros\", message = \"hsvyz ys bse ksbvsvkzr yzctyvbs\"",
        "output": "Error: 'v'"
      },
      {
        "input": "key = \"onmlkjihgfedcbazyxwvutsrqp\", message = \"ixkz znxoz kx yq\"",
        "output": "grep pbrap er qy"
      },
      {
        "input": "key = \"phqgiumeaylnofdxjkrcvstzwb\", message = \"ixw ikg ikg ikg\"",
        "output": "epy erd erd erd"
      },
      {
        "input": "key = \"the world is a stage and all the men and women merely players\", message = \"qef egvms gq xq e cqwmg ndeqq eeq egvms xq egvms bqqrfqv\"",
        "output": "Error: 'q'"
      },
      {
        "input": "key = \"five boxing wizards jump quickly on this lazy dog\", message = \"wfkq xqfnk uveogvj pvuzr cfiwz rjgt jxqfk bxz\"",
        "output": "javt gtahv qcdficp scqkm uabjk mpiy pgtav egk"
      },
      {
        "input": "key = \"qwertyuiopasdfghjklzxcvbnm\", message = \"vqj qjv cv\"",
        "output": "waq aqw vw"
      },
      {
        "input": "key = \"abcdefghjklmnopqrstuvwxyzti\", message = \"ghw gct gct\"",
        "output": "ghv gcs gcs"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"fnbv wvxm\"",
        "output": "nmit ltoq"
      },
      {
        "input": "key = \"the quick brown fox jumps over the lazy dogs\", message = \"yjx\"",
        "output": "xpo"
      },
      {
        "input": "key = \"mnbvcxzlkjhgfdsapoiuytrewq\", message = \"qnb wql fhw fql\"",
        "output": "zbc yzh mky mzh"
      },
      {
        "input": "key = \"abcdefgilmhjnopkrstuvwxyz\", message = \"qcp zc y\"",
        "output": "Error: 'q'"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz\", message = \"anxanq azoz anu\"",
        "output": "anxanq azoz anu"
      },
      {
        "input": "key = \"thequickbrownfoxjumpsoverthelazydogs\", message = \"qjvux xfgf q px\"",
        "output": "dpteo onzn d ro"
      },
      {
        "input": "key = \"abcdefghjklmnopqrstuvwxyzti\", message = \"jkq xjxw xjxw\"",
        "output": "ijp wiwv wiwv"
      },
      {
        "input": "key = \"bujgtfayrxohqzplmwdinckevs\", message = \"yzq d pyq o\"",
        "output": "hnm s ohm k"
      },
      {
        "input": "key = \"rjkylmfdqogavwunhixpctzesb\", message = \"tzm tmz tmh tmi\"",
        "output": "vwf vfw vfq vfr"
      },
      {
        "input": "key = \"the quick brown fox jumps over lazy dogs this\", message = \"spwq yvoqzgkxq ovbxc yjiwxtw vqzj qjxv\"",
        "output": "srld xtkdwzhod ktiog xpfloal tdwp dpot"
      },
      {
        "input": "key = \"brown fox jumps over lazy dogs the quick this\", message = \"ovbxc yjiwxtw vqzj qjxv spwq yvoqzgkxq\"",
        "output": "cmagy rhxdgud mwqh whgm lkdw rmcwqtzgw"
      },
      {
        "input": "key = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", message = \"z k u o c g t w\"",
        "output": "z k u o c g t w"
      },
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"gtgt nvo gtg mpgg\"",
        "output": "tgtg mel tgt nktt"
      },
      {
        "input": "key = \"ijklmnopqrstuvwxyzabcdefgh\", message = \"wqv qv qv\"",
        "output": "oin in in"
      },
      {
        "input": "key = \"mjw qzlnf hw uo kcf jehrv dpo osxgt cyqak\", message = \"jnjfdh frl df\"",
        "output": "bgbhqi hof qh"
      },
      {
        "input": "key = \"abcdefghizjklmnopqrstuvwxy\", message = \"vuvw xw yx za\"",
        "output": "wvwx yx zy ja"
      },
      {
        "input": "key = \"abcdefghijklnmopqrstuvwxyz\", message = \"ehu zcv i\"",
        "output": "ehu zcv i"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"ehu zcv i\"",
        "output": "ehu zcv i"
      },
      {
        "input": "key = \"wvutsrqponmlkjihgfedcba zyx\", message = \"zyxwvutsrqpnmolkjihgfedcba\"",
        "output": "xyzabcdefghjkilmnopqrstuvw"
      },
      {
        "input": "key = \"mnbvcxzlkjhgfdsapoiuytrewq\", message = \"vcp o cv v\"",
        "output": "deq r ed d"
      },
      {
        "input": "key = \"qwertyuiopasdfghjklzxcvbnm\", message = \"jyq zq j\"",
        "output": "qfa ta q"
      },
      {
        "input": "key = \"the brown fox jumps over the lazy dog quickly\", message = \"tqpp d dswcp gygij\"",
        "output": "awnn u uogyn vtvxk"
      },
      {
        "input": "key = \"g fmbycy fea rzvs vujx wptfk\", message = \"ceq gcf zvzfc kcz\"",
        "output": "Error: 'q'"
      },
      {
        "input": "key = \"edcba ponmlkj ihgfedcba ponmlkj\", message = \"xgv jgv xgv jgv\"",
        "output": "Error: 'x'"
      },
      {
        "input": "key = \"zyxwvutsrqponmlkjihgfedcba\", message = \"ixq kivk eiqb\"",
        "output": "rcj prep vrjy"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"wklv lv dq xvh hqw phvvdjh\"",
        "output": "wklv lv dq xvh hqw phvvdjh"
      },
      {
        "input": "key = \"nopqrstuvwxyzabcdefghijklm\", message = \"zcf jopcnboe wj jop\"",
        "output": "mps wbcpaobr jw wbc"
      },
      {
        "input": "key = \"xyzabcdefghijklmnopqrstuvw\", message = \"xpu xh z\"",
        "output": "asx ak c"
      },
      {
        "input": "key = \"quick brown fox jumps over the lazy dog\", message = \"kxvzn hqomj jxq zpsvx wbvs hq tkgx\"",
        "output": "elqwj tahnm mla wopql ifqp ta sezl"
      },
      {
        "input": "key = \"abcdefghijklmnopqrstuvwxyz\", message = \"ehu zcv z\"",
        "output": "ehu zcv z"
      },
      {
        "input": "key = \"this quick brown fox jumps over lazy dogs and\", message = \"qjxv spwq yvoqzgkxq ovbxc yjiwxtw vqzj ovgx\"",
        "output": "epos drle xskewzhoe ksiog xpcloal sewp kszo"
      },
      {
        "input": "key = \"abcdef ghijklmnopqrstuvwxyz\", message = \"zcf bvg jnfrdq\"",
        "output": "zcf bvg jnfrdq"
      },
      {
        "input": "key = \"four score and seven years ago our fathers brought forth on this continent a new nation\", message = \"svza iadzq cmz azggk ujifq zqv zmj qjgrjcz jsvvz zr svza sgvcczvqf azj xyv\"",
        "output": "Error: 'z'"
      },
      {
        "input": "key = \"abcdefghijklnmopqrstuvwxyz\", message = \"qzdv lqaf qv yzxq\"",
        "output": "qzdv lqaf qv yzxq"
      },
      {
        "input": "key = \"abcdefghikjlmnopqrstuvwxyz\", message = \"hij iji iij\"",
        "output": "hik iki iik"
      }
    ]
  },
  {
    "id": 1742,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Math",
      "Counting"
    ],
    "problemDescription": "You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.\nGiven two integers lowLimit and highLimit, return the number of balls in the box with the most balls.\n\u00a0\nExample 1:\n\nInput: lowLimit = 1, highLimit = 10\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\nBox 1 has the most number of balls with 2 balls.\nExample 2:\n\nInput: lowLimit = 5, highLimit = 15\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each.\n\nExample 3:\n\nInput: lowLimit = 19, highLimit = 28\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\nBox 10 has the most number of balls with 2 balls.\n\n\u00a0\nConstraints:\n\n1 <= lowLimit <= highLimit <= 105\n\n",
    "starterCode": "class Solution:\n    def countBalls(self, lowLimit: int, highLimit: int) -> int:\n        ",
    "testCases": [
      {
        "input": "lowLimit = 999, highLimit = 1000",
        "output": "1"
      },
      {
        "input": "lowLimit = 1000, highLimit = 10000",
        "output": "615"
      },
      {
        "input": "lowLimit = 50000, highLimit = 50500",
        "output": "44"
      },
      {
        "input": "lowLimit = 99, highLimit = 999",
        "output": "70"
      },
      {
        "input": "lowLimit = 500, highLimit = 550",
        "output": "6"
      },
      {
        "input": "lowLimit = 9999, highLimit = 100000",
        "output": "5520"
      },
      {
        "input": "lowLimit = 1, highLimit = 10",
        "output": "2"
      },
      {
        "input": "lowLimit = 100, highLimit = 200",
        "output": "10"
      },
      {
        "input": "lowLimit = 99, highLimit = 199",
        "output": "10"
      },
      {
        "input": "lowLimit = 1, highLimit = 100",
        "output": "10"
      },
      {
        "input": "lowLimit = 1, highLimit = 20",
        "output": "3"
      },
      {
        "input": "lowLimit = 10, highLimit = 100",
        "output": "9"
      },
      {
        "input": "lowLimit = 50, highLimit = 150",
        "output": "10"
      },
      {
        "input": "lowLimit = 5, highLimit = 15",
        "output": "2"
      },
      {
        "input": "lowLimit = 19, highLimit = 28",
        "output": "2"
      },
      {
        "input": "lowLimit = 45678, highLimit = 98765",
        "output": "3544"
      },
      {
        "input": "lowLimit = 40000, highLimit = 50000",
        "output": "670"
      },
      {
        "input": "lowLimit = 10000, highLimit = 20000",
        "output": "670"
      },
      {
        "input": "lowLimit = 33333, highLimit = 44444",
        "output": "782"
      },
      {
        "input": "lowLimit = 67890, highLimit = 67990",
        "output": "11"
      },
      {
        "input": "lowLimit = 54321, highLimit = 54421",
        "output": "10"
      },
      {
        "input": "lowLimit = 88888, highLimit = 88988",
        "output": "10"
      },
      {
        "input": "lowLimit = 100, highLimit = 100",
        "output": "1"
      },
      {
        "input": "lowLimit = 99999, highLimit = 100000",
        "output": "1"
      },
      {
        "input": "lowLimit = 9995, highLimit = 10005",
        "output": "1"
      },
      {
        "input": "lowLimit = 43210, highLimit = 43250",
        "output": "5"
      },
      {
        "input": "lowLimit = 99995, highLimit = 100005",
        "output": "1"
      },
      {
        "input": "lowLimit = 30000, highLimit = 35000",
        "output": "365"
      },
      {
        "input": "lowLimit = 98765, highLimit = 98865",
        "output": "10"
      },
      {
        "input": "lowLimit = 54321, highLimit = 54341",
        "output": "3"
      },
      {
        "input": "lowLimit = 11111, highLimit = 11115",
        "output": "1"
      },
      {
        "input": "lowLimit = 10000, highLimit = 99999",
        "output": "5520"
      },
      {
        "input": "lowLimit = 66666, highLimit = 66766",
        "output": "10"
      },
      {
        "input": "lowLimit = 77777, highLimit = 77800",
        "output": "3"
      },
      {
        "input": "lowLimit = 99990, highLimit = 100000",
        "output": "1"
      },
      {
        "input": "lowLimit = 11111, highLimit = 11200",
        "output": "9"
      },
      {
        "input": "lowLimit = 5000, highLimit = 6000",
        "output": "75"
      },
      {
        "input": "lowLimit = 56789, highLimit = 56800",
        "output": "2"
      },
      {
        "input": "lowLimit = 55555, highLimit = 66666",
        "output": "782"
      },
      {
        "input": "lowLimit = 9990, highLimit = 10000",
        "output": "1"
      },
      {
        "input": "lowLimit = 12345, highLimit = 54321",
        "output": "2854"
      },
      {
        "input": "lowLimit = 50000, highLimit = 50100",
        "output": "10"
      },
      {
        "input": "lowLimit = 23456, highLimit = 23460",
        "output": "1"
      },
      {
        "input": "lowLimit = 500, highLimit = 5000",
        "output": "340"
      },
      {
        "input": "lowLimit = 5000, highLimit = 5100",
        "output": "10"
      },
      {
        "input": "lowLimit = 90000, highLimit = 95000",
        "output": "365"
      },
      {
        "input": "lowLimit = 10000, highLimit = 100000",
        "output": "5520"
      },
      {
        "input": "lowLimit = 9999, highLimit = 10000",
        "output": "1"
      },
      {
        "input": "lowLimit = 999, highLimit = 1009",
        "output": "1"
      },
      {
        "input": "lowLimit = 12345, highLimit = 12395",
        "output": "6"
      },
      {
        "input": "lowLimit = 1, highLimit = 99999",
        "output": "6000"
      },
      {
        "input": "lowLimit = 12345, highLimit = 12345",
        "output": "1"
      },
      {
        "input": "lowLimit = 1, highLimit = 1000",
        "output": "75"
      },
      {
        "input": "lowLimit = 22222, highLimit = 22322",
        "output": "10"
      },
      {
        "input": "lowLimit = 12345, highLimit = 67890",
        "output": "3699"
      },
      {
        "input": "lowLimit = 56789, highLimit = 56799",
        "output": "2"
      },
      {
        "input": "lowLimit = 100, highLimit = 1000",
        "output": "70"
      },
      {
        "input": "lowLimit = 11111, highLimit = 22222",
        "output": "754"
      },
      {
        "input": "lowLimit = 77777, highLimit = 77877",
        "output": "10"
      },
      {
        "input": "lowLimit = 100000, highLimit = 100000",
        "output": "1"
      },
      {
        "input": "lowLimit = 250, highLimit = 750",
        "output": "46"
      },
      {
        "input": "lowLimit = 30000, highLimit = 40000",
        "output": "670"
      },
      {
        "input": "lowLimit = 99900, highLimit = 100100",
        "output": "10"
      },
      {
        "input": "lowLimit = 100000, highLimit = 100050",
        "output": "6"
      },
      {
        "input": "lowLimit = 12345, highLimit = 12445",
        "output": "11"
      },
      {
        "input": "lowLimit = 5000, highLimit = 5050",
        "output": "6"
      },
      {
        "input": "lowLimit = 995, highLimit = 1005",
        "output": "1"
      },
      {
        "input": "lowLimit = 1000, highLimit = 1050",
        "output": "6"
      },
      {
        "input": "lowLimit = 33333, highLimit = 33433",
        "output": "10"
      },
      {
        "input": "lowLimit = 1234, highLimit = 5678",
        "output": "344"
      },
      {
        "input": "lowLimit = 8888, highLimit = 8900",
        "output": "2"
      },
      {
        "input": "lowLimit = 11111, highLimit = 11211",
        "output": "10"
      },
      {
        "input": "lowLimit = 999, highLimit = 1001",
        "output": "1"
      },
      {
        "input": "lowLimit = 67890, highLimit = 78900",
        "output": "749"
      },
      {
        "input": "lowLimit = 20000, highLimit = 30000",
        "output": "670"
      },
      {
        "input": "lowLimit = 50000, highLimit = 51000",
        "output": "75"
      },
      {
        "input": "lowLimit = 99, highLimit = 101",
        "output": "1"
      },
      {
        "input": "lowLimit = 88888, highLimit = 99999",
        "output": "736"
      },
      {
        "input": "lowLimit = 1234, highLimit = 1244",
        "output": "2"
      },
      {
        "input": "lowLimit = 44444, highLimit = 55555",
        "output": "785"
      },
      {
        "input": "lowLimit = 300, highLimit = 600",
        "output": "28"
      },
      {
        "input": "lowLimit = 12345, highLimit = 12355",
        "output": "2"
      },
      {
        "input": "lowLimit = 70000, highLimit = 80000",
        "output": "670"
      },
      {
        "input": "lowLimit = 88888, highLimit = 88999",
        "output": "11"
      },
      {
        "input": "lowLimit = 20000, highLimit = 25000",
        "output": "365"
      },
      {
        "input": "lowLimit = 123, highLimit = 456",
        "output": "33"
      }
    ]
  },
  {
    "id": 2335,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water.\nYou are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. Return the minimum number of seconds needed to fill up all the cups.\n\u00a0\nExample 1:\n\nInput: amount = [1,4,2]\nOutput: 4\nExplanation: One way to fill up the cups is:\nSecond 1: Fill up a cold cup and a warm cup.\nSecond 2: Fill up a warm cup and a hot cup.\nSecond 3: Fill up a warm cup and a hot cup.\nSecond 4: Fill up a warm cup.\nIt can be proven that 4 is the minimum number of seconds needed.\n\nExample 2:\n\nInput: amount = [5,4,4]\nOutput: 7\nExplanation: One way to fill up the cups is:\nSecond 1: Fill up a cold cup, and a hot cup.\nSecond 2: Fill up a cold cup, and a warm cup.\nSecond 3: Fill up a cold cup, and a warm cup.\nSecond 4: Fill up a warm cup, and a hot cup.\nSecond 5: Fill up a cold cup, and a hot cup.\nSecond 6: Fill up a cold cup, and a warm cup.\nSecond 7: Fill up a hot cup.\n\nExample 3:\n\nInput: amount = [5,0,0]\nOutput: 5\nExplanation: Every second, we fill up a cold cup.\n\n\u00a0\nConstraints:\n\namount.length == 3\n0 <= amount[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def fillCups(self, amount: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "amount = [33,33,34]",
        "output": "50"
      },
      {
        "input": "amount = [0,0,0]",
        "output": "0"
      },
      {
        "input": "amount = [99,1,1]",
        "output": "99"
      },
      {
        "input": "amount = [7,7,7]",
        "output": "11"
      },
      {
        "input": "amount = [10,10,10]",
        "output": "15"
      },
      {
        "input": "amount = [1,2,3]",
        "output": "3"
      },
      {
        "input": "amount = [100,0,0]",
        "output": "100"
      },
      {
        "input": "amount = [100,100,100]",
        "output": "150"
      },
      {
        "input": "amount = [0,1,2]",
        "output": "2"
      },
      {
        "input": "amount = [1,4,2]",
        "output": "4"
      },
      {
        "input": "amount = [5,0,0]",
        "output": "5"
      },
      {
        "input": "amount = [99,99,1]",
        "output": "100"
      },
      {
        "input": "amount = [0,50,50]",
        "output": "50"
      },
      {
        "input": "amount = [5,4,4]",
        "output": "7"
      },
      {
        "input": "amount = [98,1,1]",
        "output": "98"
      },
      {
        "input": "amount = [25,0,75]",
        "output": "75"
      },
      {
        "input": "amount = [42,42,41]",
        "output": "63"
      },
      {
        "input": "amount = [60,20,20]",
        "output": "60"
      },
      {
        "input": "amount = [10, 50, 25]",
        "output": "50"
      },
      {
        "input": "amount = [49,49,49]",
        "output": "74"
      },
      {
        "input": "amount = [1,1,0]",
        "output": "1"
      },
      {
        "input": "amount = [80, 10, 10]",
        "output": "80"
      },
      {
        "input": "amount = [1, 10, 10]",
        "output": "11"
      },
      {
        "input": "amount = [1, 1, 100]",
        "output": "100"
      },
      {
        "input": "amount = [10,90,0]",
        "output": "90"
      },
      {
        "input": "amount = [10,80,10]",
        "output": "80"
      },
      {
        "input": "amount = [0,0,100]",
        "output": "100"
      },
      {
        "input": "amount = [80,10,10]",
        "output": "80"
      },
      {
        "input": "amount = [33, 33, 34]",
        "output": "50"
      },
      {
        "input": "amount = [70, 70, 60]",
        "output": "100"
      },
      {
        "input": "amount = [50, 25, 25]",
        "output": "50"
      },
      {
        "input": "amount = [29,29,42]",
        "output": "50"
      },
      {
        "input": "amount = [50,50,49]",
        "output": "75"
      },
      {
        "input": "amount = [99,2,99]",
        "output": "100"
      },
      {
        "input": "amount = [50,49,51]",
        "output": "75"
      },
      {
        "input": "amount = [100,1,1]",
        "output": "100"
      },
      {
        "input": "amount = [80, 70, 60]",
        "output": "105"
      },
      {
        "input": "amount = [100,50,25]",
        "output": "100"
      },
      {
        "input": "amount = [1,0,1]",
        "output": "1"
      },
      {
        "input": "amount = [40, 30, 20]",
        "output": "45"
      },
      {
        "input": "amount = [1, 2, 97]",
        "output": "97"
      },
      {
        "input": "amount = [1, 1, 1]",
        "output": "2"
      },
      {
        "input": "amount = [49, 50, 1]",
        "output": "50"
      },
      {
        "input": "amount = [30,20,10]",
        "output": "30"
      },
      {
        "input": "amount = [100,10,10]",
        "output": "100"
      },
      {
        "input": "amount = [2,99,99]",
        "output": "100"
      },
      {
        "input": "amount = [1,98,1]",
        "output": "98"
      },
      {
        "input": "amount = [1,0,99]",
        "output": "99"
      },
      {
        "input": "amount = [80, 15, 5]",
        "output": "80"
      },
      {
        "input": "amount = [45,55,0]",
        "output": "55"
      },
      {
        "input": "amount = [100, 1, 1]",
        "output": "100"
      },
      {
        "input": "amount = [50,50,1]",
        "output": "51"
      },
      {
        "input": "amount = [25,25,25]",
        "output": "38"
      },
      {
        "input": "amount = [42,29,29]",
        "output": "50"
      },
      {
        "input": "amount = [100, 50, 1]",
        "output": "100"
      },
      {
        "input": "amount = [1, 90, 10]",
        "output": "90"
      },
      {
        "input": "amount = [1,1,1]",
        "output": "2"
      },
      {
        "input": "amount = [0,75,25]",
        "output": "75"
      },
      {
        "input": "amount = [55,45,5]",
        "output": "55"
      },
      {
        "input": "amount = [10, 1, 90]",
        "output": "90"
      },
      {
        "input": "amount = [100,10,0]",
        "output": "100"
      },
      {
        "input": "amount = [80,10,1]",
        "output": "80"
      },
      {
        "input": "amount = [48,48,48]",
        "output": "72"
      },
      {
        "input": "amount = [80,50,30]",
        "output": "80"
      },
      {
        "input": "amount = [90,90,1]",
        "output": "91"
      },
      {
        "input": "amount = [1,50,50]",
        "output": "51"
      },
      {
        "input": "amount = [55,0,45]",
        "output": "55"
      },
      {
        "input": "amount = [49,2,49]",
        "output": "50"
      },
      {
        "input": "amount = [45,67,23]",
        "output": "68"
      },
      {
        "input": "amount = [20,20,60]",
        "output": "60"
      },
      {
        "input": "amount = [100,100,99]",
        "output": "150"
      },
      {
        "input": "amount = [10,10,100]",
        "output": "100"
      },
      {
        "input": "amount = [50, 100, 50]",
        "output": "100"
      },
      {
        "input": "amount = [10,15,20]",
        "output": "23"
      },
      {
        "input": "amount = [0,100,100]",
        "output": "100"
      },
      {
        "input": "amount = [60, 40, 20]",
        "output": "60"
      },
      {
        "input": "amount = [0, 100, 0]",
        "output": "100"
      },
      {
        "input": "amount = [50,51,50]",
        "output": "76"
      },
      {
        "input": "amount = [33,33,33]",
        "output": "50"
      },
      {
        "input": "amount = [23,47,29]",
        "output": "50"
      },
      {
        "input": "amount = [51,51,51]",
        "output": "77"
      },
      {
        "input": "amount = [50,1,50]",
        "output": "51"
      },
      {
        "input": "amount = [25, 10, 50]",
        "output": "50"
      },
      {
        "input": "amount = [55,55,45]",
        "output": "78"
      },
      {
        "input": "amount = [0,100,10]",
        "output": "100"
      },
      {
        "input": "amount = [90, 10, 1]",
        "output": "90"
      },
      {
        "input": "amount = [33,66,0]",
        "output": "66"
      },
      {
        "input": "amount = [99, 1, 0]",
        "output": "99"
      },
      {
        "input": "amount = [50, 25, 10]",
        "output": "50"
      },
      {
        "input": "amount = [49,50,51]",
        "output": "75"
      },
      {
        "input": "amount = [60,60,61]",
        "output": "91"
      },
      {
        "input": "amount = [29,42,29]",
        "output": "50"
      },
      {
        "input": "amount = [50,50,50]",
        "output": "75"
      },
      {
        "input": "amount = [25, 25, 26]",
        "output": "38"
      },
      {
        "input": "amount = [34,33,34]",
        "output": "51"
      },
      {
        "input": "amount = [2,49,49]",
        "output": "50"
      },
      {
        "input": "amount = [25, 25, 25]",
        "output": "38"
      },
      {
        "input": "amount = [1,1,2]",
        "output": "2"
      },
      {
        "input": "amount = [1,1,99]",
        "output": "99"
      },
      {
        "input": "amount = [60,40,20]",
        "output": "60"
      },
      {
        "input": "amount = [60,60,60]",
        "output": "90"
      },
      {
        "input": "amount = [33,33,67]",
        "output": "67"
      },
      {
        "input": "amount = [10,100,10]",
        "output": "100"
      },
      {
        "input": "amount = [5,0,5]",
        "output": "5"
      },
      {
        "input": "amount = [1,100,1]",
        "output": "100"
      },
      {
        "input": "amount = [80,15,5]",
        "output": "80"
      },
      {
        "input": "amount = [99,99,99]",
        "output": "149"
      },
      {
        "input": "amount = [66,33,0]",
        "output": "66"
      },
      {
        "input": "amount = [2,3,4]",
        "output": "5"
      },
      {
        "input": "amount = [5,15,80]",
        "output": "80"
      },
      {
        "input": "amount = [30, 0, 20]",
        "output": "30"
      },
      {
        "input": "amount = [50,25,25]",
        "output": "50"
      },
      {
        "input": "amount = [47,23,29]",
        "output": "50"
      },
      {
        "input": "amount = [100, 99, 98]",
        "output": "149"
      },
      {
        "input": "amount = [90, 85, 80]",
        "output": "128"
      },
      {
        "input": "amount = [67,33,33]",
        "output": "67"
      },
      {
        "input": "amount = [98, 99, 1]",
        "output": "99"
      },
      {
        "input": "amount = [15,80,5]",
        "output": "80"
      },
      {
        "input": "amount = [10,10,80]",
        "output": "80"
      },
      {
        "input": "amount = [3, 2, 1]",
        "output": "3"
      },
      {
        "input": "amount = [23,45,67]",
        "output": "68"
      },
      {
        "input": "amount = [50, 50, 100]",
        "output": "100"
      },
      {
        "input": "amount = [90,10,90]",
        "output": "95"
      },
      {
        "input": "amount = [99,98,97]",
        "output": "147"
      },
      {
        "input": "amount = [1,99,1]",
        "output": "99"
      },
      {
        "input": "amount = [45,55,55]",
        "output": "78"
      },
      {
        "input": "amount = [75,25,0]",
        "output": "75"
      },
      {
        "input": "amount = [0, 0, 100]",
        "output": "100"
      },
      {
        "input": "amount = [1, 100, 1]",
        "output": "100"
      },
      {
        "input": "amount = [1,2,1]",
        "output": "2"
      },
      {
        "input": "amount = [70,20,10]",
        "output": "70"
      },
      {
        "input": "amount = [2,2,1]",
        "output": "3"
      },
      {
        "input": "amount = [95,3,2]",
        "output": "95"
      },
      {
        "input": "amount = [1, 2, 3]",
        "output": "3"
      },
      {
        "input": "amount = [0,99,0]",
        "output": "99"
      },
      {
        "input": "amount = [60, 40, 0]",
        "output": "60"
      },
      {
        "input": "amount = [10, 10, 10]",
        "output": "15"
      },
      {
        "input": "amount = [33,34,33]",
        "output": "50"
      },
      {
        "input": "amount = [50,50,5]",
        "output": "53"
      },
      {
        "input": "amount = [2,1,1]",
        "output": "2"
      },
      {
        "input": "amount = [2,1,2]",
        "output": "3"
      },
      {
        "input": "amount = [10, 90, 0]",
        "output": "90"
      },
      {
        "input": "amount = [66,33,3]",
        "output": "66"
      },
      {
        "input": "amount = [49,49,2]",
        "output": "50"
      },
      {
        "input": "amount = [67,23,45]",
        "output": "68"
      },
      {
        "input": "amount = [50,49,48]",
        "output": "74"
      },
      {
        "input": "amount = [55,45,55]",
        "output": "78"
      },
      {
        "input": "amount = [0,55,45]",
        "output": "55"
      },
      {
        "input": "amount = [100, 0, 0]",
        "output": "100"
      },
      {
        "input": "amount = [0,1,1]",
        "output": "1"
      },
      {
        "input": "amount = [1,1,100]",
        "output": "100"
      },
      {
        "input": "amount = [1,2,2]",
        "output": "3"
      },
      {
        "input": "amount = [50, 50, 0]",
        "output": "50"
      },
      {
        "input": "amount = [34,33,33]",
        "output": "50"
      },
      {
        "input": "amount = [0,100,0]",
        "output": "100"
      },
      {
        "input": "amount = [42,41,42]",
        "output": "63"
      },
      {
        "input": "amount = [100,50,50]",
        "output": "100"
      },
      {
        "input": "amount = [99,100,101]",
        "output": "150"
      },
      {
        "input": "amount = [100, 50, 50]",
        "output": "100"
      },
      {
        "input": "amount = [10,0,100]",
        "output": "100"
      },
      {
        "input": "amount = [0,99,1]",
        "output": "99"
      },
      {
        "input": "amount = [99,99,2]",
        "output": "100"
      },
      {
        "input": "amount = [50, 0, 50]",
        "output": "50"
      },
      {
        "input": "amount = [41,42,42]",
        "output": "63"
      },
      {
        "input": "amount = [0,5,5]",
        "output": "5"
      },
      {
        "input": "amount = [1, 99, 98]",
        "output": "99"
      },
      {
        "input": "amount = [2,2,98]",
        "output": "98"
      },
      {
        "input": "amount = [1,1,98]",
        "output": "98"
      },
      {
        "input": "amount = [10, 10, 1]",
        "output": "11"
      },
      {
        "input": "amount = [1,99,99]",
        "output": "100"
      },
      {
        "input": "amount = [29,47,23]",
        "output": "50"
      },
      {
        "input": "amount = [33,67,33]",
        "output": "67"
      },
      {
        "input": "amount = [99, 98, 97]",
        "output": "147"
      },
      {
        "input": "amount = [10,20,30]",
        "output": "30"
      },
      {
        "input": "amount = [0, 50, 50]",
        "output": "50"
      },
      {
        "input": "amount = [99,1,0]",
        "output": "99"
      },
      {
        "input": "amount = [99,1,99]",
        "output": "100"
      },
      {
        "input": "amount = [10,90,10]",
        "output": "90"
      }
    ]
  },
  {
    "id": 234,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Recursion",
      "Linked List",
      "Two Pointers"
    ],
    "problemDescription": "Given the head of a singly linked list, return true if it is a palindrome or false otherwise.\n\u00a0\nExample 1:\n\n\nInput: head = [1,2,2,1]\nOutput: true\n\nExample 2:\n\n\nInput: head = [1,2]\nOutput: false\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [1, 105].\n0 <= Node.val <= 9\n\n\u00a0\nFollow up: Could you do it in O(n) time and O(1) space?",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def isPalindrome(self, head: Optional[ListNode]) -> bool:\n        ",
    "testCases": [
      {
        "input": "head = [1,0,0,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [9,8,7,8,9]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5]",
        "output": "False"
      },
      {
        "input": "head = [1,2,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2]",
        "output": "False"
      },
      {
        "input": "head = [1]",
        "output": "True"
      },
      {
        "input": "head = [1,0,1]",
        "output": "True"
      },
      {
        "input": "head = [1,1]",
        "output": "True"
      },
      {
        "input": "head = [1,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6]",
        "output": "False"
      },
      {
        "input": "head = [1,1,2,2,1,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [2,4,6,8,10,8,6,4,2,1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "False"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,2]",
        "output": "False"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0,1]",
        "output": "False"
      },
      {
        "input": "head = [9,8,7,6,5,6,7,8,9]",
        "output": "True"
      },
      {
        "input": "head = [9,9,9,9,9,9,9,9,9]",
        "output": "True"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,4,4,3,3,2,2,1,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,3,2,4,2,3,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,4,3,2,1,0,0,1,2,3,4,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,0,1,0,1,0,1,0,1,0,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,2,3,2,2,1]",
        "output": "True"
      },
      {
        "input": "head = [9,9,8,7,6,7,8,9,9]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,0,2,0,1,0,2,0,1]",
        "output": "True"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,2,3,3,2,2,1]",
        "output": "True"
      },
      {
        "input": "head = [9,9,9,9,9,9,9]",
        "output": "True"
      },
      {
        "input": "head = [1,0,2,4,2,0,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,0,0,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,0,2,0,1]",
        "output": "True"
      },
      {
        "input": "head = [1,0,1,0,1,0,1,0,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,2,1,1,2,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,0,1,0,1,0,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,0,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,3,2,1,0]",
        "output": "False"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1]",
        "output": "False"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5]",
        "output": "True"
      },
      {
        "input": "head = [1,0,2,4,5,4,2,0,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,4,3,2,1,0]",
        "output": "False"
      },
      {
        "input": "head = [9,9,9,9,9,9,9,9,9,9,9]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,2,1,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,6,5,4,3,2,1,2,3,4,5,6,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,4,3,2,1,0,0,1,2,3,4,5]",
        "output": "False"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "head = [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "True"
      },
      {
        "input": "head = [0,0,0,0,0,0,0]",
        "output": "True"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,5,4,3,2,1,0]",
        "output": "True"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,3,3,2,2,1,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,3,5,7,9,7,5,3,1,0,0,0,0,1,3,5,7,9,7,5,3,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,0]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,2,1,2,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,3,3,7,7,7,3,3,1]",
        "output": "True"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,3,2,1,1]",
        "output": "False"
      },
      {
        "input": "head = [9,8,7,6,7,8,9]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,2,1,2,1]",
        "output": "False"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,1,2,1,1]",
        "output": "True"
      },
      {
        "input": "head = [1,1,1,1,1,2,1,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "head = [1,0,1,0,1,0,1,0,1,0,1,0]",
        "output": "False"
      },
      {
        "input": "head = [1,2,3,3,2,1,2,3,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9]",
        "output": "True"
      },
      {
        "input": "head = [1,3,5,7,5,3,1]",
        "output": "True"
      },
      {
        "input": "head = [1,1,2,2,3,3,2,2,1,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "head = [5,4,3,2,1,2,3,4,5,6,5,4,3,2,1]",
        "output": "False"
      },
      {
        "input": "head = [1,1,2,1,1,2,1,1]",
        "output": "True"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5]",
        "output": "True"
      },
      {
        "input": "head = [1,3,2,3,1]",
        "output": "True"
      },
      {
        "input": "head = [1,2,2,3,3,3,2,2,1]",
        "output": "True"
      }
    ]
  },
  {
    "id": 530,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\n\u00a0\nExample 1:\n\n\nInput: root = [4,2,6,1,3]\nOutput: 1\n\nExample 2:\n\n\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [2, 104].\n0 <= Node.val <= 105\n\n\u00a0\nNote: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [4,2,6,1,3]",
        "output": "1"
      },
      {
        "input": "root = [1,30,null,10,null,null,15,null,18]",
        "output": "-29"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5]",
        "output": "1"
      },
      {
        "input": "root = [236,104,701,null,227,null,911]",
        "output": "9"
      },
      {
        "input": "root = [5,4,7]",
        "output": "1"
      },
      {
        "input": "root = [1,0,48,null,null,12,49]",
        "output": "1"
      },
      {
        "input": "root = [5,3,7,2,4,6,8]",
        "output": "1"
      },
      {
        "input": "root = [50,25,75,15,35,65,85,10,20,30,40,60,70,80,90]",
        "output": "5"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,40,60,80,110,140,160,190]",
        "output": "5"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,4,6,8]",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,3,7,null,18]",
        "output": "2"
      },
      {
        "input": "root = [60,20,80,10,30,70,90,5,15,25,35,65,75,85,95,2,8,12,18,27,33,37,55,68,72,77,82,88,92,97,98]",
        "output": "-3"
      },
      {
        "input": "root = [10,9,20,null,null,15,21]",
        "output": "1"
      },
      {
        "input": "root = [25,10,30,5,15,26,40,2,7,12,18,27,35,38,45]",
        "output": "-5"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,17,22,35,43,48,55]",
        "output": "2"
      },
      {
        "input": "root = [10,5,15,null,null,12,20,11,null,null,14]",
        "output": "-6"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,90,110,140,160,190]",
        "output": "5"
      },
      {
        "input": "root = [60,30,90,10,40,80,100,5,15,35,45,75,85,95,105]",
        "output": "5"
      },
      {
        "input": "root = [10000,5000,15000,2500,7500,12500,17500,1250,3750,5875,8625,11250,15250,16750,18250]",
        "output": "-250"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15]",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,2,null,11,18,1,null,null,13]",
        "output": "1"
      },
      {
        "input": "root = [999,499,1499,249,749,1249,1749,125,375,587,862,1124,1524,1674,1824]",
        "output": "-25"
      },
      {
        "input": "root = [150,75,225,37,112,188,263,18,56,87,100,163,200,242,284]",
        "output": "-12"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,17,22,27,32,37]",
        "output": "2"
      },
      {
        "input": "root = [9,3,15,null,8,12,20,4,7,11,13,18,25]",
        "output": "-1"
      },
      {
        "input": "root = [7,3,15,null,null,9,20,null,null,null,17]",
        "output": "-3"
      },
      {
        "input": "root = [70,35,105,20,50,85,125,10,25,40,60,80,90,110,130]",
        "output": "5"
      },
      {
        "input": "root = [20,15,30,10,18,25,35,5,12,16,19,23,27,32,38]",
        "output": "1"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,17,22,37,42,47,52]",
        "output": "2"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,23,28,33,38]",
        "output": "2"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,140,160,180,5,15,22,32,42,58,68,78,88,108,118,138,158,178,190]",
        "output": "-12"
      },
      {
        "input": "root = [90,45,135,20,60,110,160,10,30,50,70,100,120,140,170]",
        "output": "5"
      },
      {
        "input": "root = [8,3,13,null,7,10,18,null,null,9,11,null,15,19,22]",
        "output": "-12"
      },
      {
        "input": "root = [8,3,13,null,7,10,17,null,null,9,12,14,16,18,20]",
        "output": "-10"
      },
      {
        "input": "root = [250,125,375,62,188,312,438,31,93,156,220,275,356,400,480]",
        "output": "19"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,12,18,23,28,33,37]",
        "output": "2"
      },
      {
        "input": "root = [15,10,20,5,12,null,null,2,null,11,14]",
        "output": "1"
      },
      {
        "input": "root = [30,10,50,5,20,40,60,1,null,15,25,35,45,55,65]",
        "output": "4"
      },
      {
        "input": "root = [15,10,20,5,12,18,25,3,8,11,14,17,22,24,30]",
        "output": "-2"
      },
      {
        "input": "root = [50,25,75,15,35,65,85,5,20,30,40,60,70,80,90]",
        "output": "5"
      },
      {
        "input": "root = [15,10,20,8,12,17,25,7,9,11,13,16,18,23,27,6,null,10,null,14,null,null,19,21,26,30,null,null,null,null,null,null,null,null,1]",
        "output": "-12"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,18,25,35,43,55,60]",
        "output": "-5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "-10"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,13,18,23,28,33,37]",
        "output": "2"
      },
      {
        "input": "root = [2,null,3,null,4,null,5]",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,2,null,6,8,17,19]",
        "output": "1"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,12,17,22,27,32,37,42]",
        "output": "2"
      },
      {
        "input": "root = [500,250,750,125,375,625,875,63,188,288,469,513,688,763,938,31,94,134,225,334,409,494,569,654,729,794,859,904,964,987]",
        "output": "-141"
      },
      {
        "input": "root = [50,25,75,10,35,60,85,5,15,30,40,55,65,80,90,3,7,12,18,28,32,45,52,63,68,77,82,88,93,2,4,6,8,11,13,14,17,19,27,29,31,33,39,43,48,51,54,57,62,67,70,76,79,81,83,87,89,92,95,97,1,9,16,20,23,26,34,36,38,41,42,44,46,47,49,50,53,56,58,59,61,64,66,69,71,72,73,74,75,78,80,84,86,91,94,96,98,99]",
        "output": "-95"
      },
      {
        "input": "root = [9,4,17,2,6,12,22,1,3,5,7,11,13,18,25]",
        "output": "1"
      },
      {
        "input": "root = [50,25,75,10,30,60,80,5,15,27,35,55,65,77,85]",
        "output": "2"
      },
      {
        "input": "root = [20,10,null,5,15,null,25,2,null,13,18,null,null,16,null]",
        "output": "-8"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37,1,4,6,8,12,14,16,18,22,24,26,28,32,34,36,38]",
        "output": "1"
      },
      {
        "input": "root = [50,25,75,10,35,60,85,5,15,30,40,55,65,80,90]",
        "output": "5"
      },
      {
        "input": "root = [50,25,75,12,37,63,87,6,18,30,45,58,60,72,90]",
        "output": "-3"
      },
      {
        "input": "root = [7,3,15,null,null,9,20,null,null,null,18]",
        "output": "-2"
      },
      {
        "input": "root = [500,250,750,125,375,625,875,62,188,312,438,563,712,813,938]",
        "output": "38"
      },
      {
        "input": "root = [60,30,90,20,40,70,100,15,25,35,45,65,75,85,105]",
        "output": "-5"
      },
      {
        "input": "root = [99,98,102,97,null,101,103,96,null,null,null,null,null,null]",
        "output": "1"
      },
      {
        "input": "root = [90,60,120,30,75,100,150,20,40,65,80,95,110,140,160]",
        "output": "5"
      },
      {
        "input": "root = [40,20,60,10,30,50,70,5,15,25,35,45,55,65,75]",
        "output": "5"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,35,60,90,110,140,160,190]",
        "output": "10"
      },
      {
        "input": "root = [60,30,90,20,40,70,100,15,25,35,45,65,75,85,95,10,18,23,32,43,58,63,72,78,83,92,98,110,120,130,140,150]",
        "output": "-140"
      },
      {
        "input": "root = [2,1,3,null,null,null,4,null,null,null,null,null,null,5]",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,null,null,12,20,null,null,null,null,13,18]",
        "output": "2"
      },
      {
        "input": "root = [70,35,105,15,50,85,120,10,25,40,60,80,90,110,130]",
        "output": "5"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37]",
        "output": "2"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,35,60,90,110,140,160,180]",
        "output": "5"
      },
      {
        "input": "root = [7,3,15,null,4,9,20,null,null,null,null,18,22]",
        "output": "1"
      },
      {
        "input": "root = [90,45,135,22,67,112,178,11,33,55,82,100,123,165,190]",
        "output": "8"
      },
      {
        "input": "root = [75,50,100,25,62,87,125,10,38,56,65,82,93,112,138]",
        "output": "3"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,18,25,35,42,48,55]",
        "output": "2"
      },
      {
        "input": "root = [8,3,13,1,null,7,15,0,2,6,9,14,17,null,null,null,null,null,null,null,null]",
        "output": "-2"
      },
      {
        "input": "root = [30,15,null,10,20,18,25]",
        "output": "-10"
      },
      {
        "input": "root = [75,40,100,30,55,85,110,20,35,50,60,80,90,105,115]",
        "output": "5"
      },
      {
        "input": "root = [30,10,50,5,25,40,60,null,15,null,20,35,45,55,65]",
        "output": "-5"
      },
      {
        "input": "root = [2,1,null]",
        "output": "1"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,10,25,35,45,55,65,75,85]",
        "output": "5"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,17,22,28,33,40]",
        "output": "2"
      },
      {
        "input": "root = [40,20,60,10,30,50,70,5,15,25,35,45,55,65,75,1,9,13,22,28,33,42,48,53,57,63,68,73,77,80,83,88,93,98,100]",
        "output": "-90"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]",
        "output": "-1"
      },
      {
        "input": "root = [99,49,149,24,74,124,174,12,37,62,87,112,137,162,187,6,22,31,43,56,71,82,93,103,118,132,143,158,168,178,182,193]",
        "output": "-187"
      },
      {
        "input": "root = [50,25,75,15,35,60,85,10,20,30,40,55,65,80,90]",
        "output": "5"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,140,160,180]",
        "output": "5"
      },
      {
        "input": "root = [30,20,40,10,null,35,45,5,null,null,38,null,47]",
        "output": "2"
      },
      {
        "input": "root = [1000,500,1500,250,750,1250,1750,125,375,625,875,1125,1375,1625,1875,63,225,313,438,563,688,763,894,1063,1188,1313,1438,1563,1688,1813,1938]",
        "output": "13"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,17,25,35,47,49,55]",
        "output": "-2"
      }
    ]
  },
  {
    "id": 367,
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Binary Search"
    ],
    "problemDescription": "Given a positive integer num, return true if num is a perfect square or false otherwise.\nA perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\nYou must not use any built-in library function, such as sqrt.\n\u00a0\nExample 1:\n\nInput: num = 16\nOutput: true\nExplanation: We return true because 4 * 4 = 16 and 4 is an integer.\n\nExample 2:\n\nInput: num = 14\nOutput: false\nExplanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\n\n\u00a0\nConstraints:\n\n1 <= num <= 231 - 1\n\n",
    "starterCode": "class Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "num = 14",
        "output": "False"
      },
      {
        "input": "num = 9",
        "output": "True"
      },
      {
        "input": "num = 1000000000",
        "output": "False"
      },
      {
        "input": "num = 49",
        "output": "True"
      },
      {
        "input": "num = 50",
        "output": "False"
      },
      {
        "input": "num = 25",
        "output": "True"
      },
      {
        "input": "num = 0",
        "output": "False"
      },
      {
        "input": "num = 4",
        "output": "True"
      },
      {
        "input": "num = 1524157875",
        "output": "False"
      },
      {
        "input": "num = 1",
        "output": "True"
      },
      {
        "input": "num = 100",
        "output": "True"
      },
      {
        "input": "num = 152415787501905210",
        "output": "False"
      },
      {
        "input": "num = 99",
        "output": "False"
      },
      {
        "input": "num = 2147483647",
        "output": "False"
      },
      {
        "input": "num = 101",
        "output": "False"
      },
      {
        "input": "num = 16",
        "output": "True"
      },
      {
        "input": "num = 26",
        "output": "False"
      },
      {
        "input": "num = 15",
        "output": "False"
      },
      {
        "input": "num = 12345678987654321",
        "output": "True"
      },
      {
        "input": "num = 10",
        "output": "False"
      },
      {
        "input": "num = 361294659455137",
        "output": "False"
      },
      {
        "input": "num = 9801",
        "output": "True"
      },
      {
        "input": "num = 100000000",
        "output": "True"
      },
      {
        "input": "num = 4503599627370496",
        "output": "True"
      },
      {
        "input": "num = 401",
        "output": "False"
      },
      {
        "input": "num = 12345678987654322",
        "output": "False"
      },
      {
        "input": "num = 104976",
        "output": "True"
      },
      {
        "input": "num = 1025",
        "output": "False"
      },
      {
        "input": "num = 123456789",
        "output": "False"
      },
      {
        "input": "num = 252890377088361284512",
        "output": "Error: Python int too large to convert to C ssize_t"
      },
      {
        "input": "num = 18014398509481984",
        "output": "True"
      },
      {
        "input": "num = 6984109366835872423180200032416",
        "output": "Error: Python int too large to convert to C ssize_t"
      },
      {
        "input": "num = 18014398509481985",
        "output": "False"
      },
      {
        "input": "num = 9223372036854775807",
        "output": "False"
      },
      {
        "input": "num = 1000000001",
        "output": "False"
      },
      {
        "input": "num = 2500",
        "output": "True"
      },
      {
        "input": "num = 100000001",
        "output": "False"
      },
      {
        "input": "num = 2304",
        "output": "True"
      },
      {
        "input": "num = 207936",
        "output": "True"
      },
      {
        "input": "num = 400",
        "output": "True"
      },
      {
        "input": "num = 4294967296",
        "output": "True"
      },
      {
        "input": "num = 2",
        "output": "False"
      },
      {
        "input": "num = 46656000000",
        "output": "True"
      },
      {
        "input": "num = 3",
        "output": "False"
      },
      {
        "input": "num = 141376",
        "output": "True"
      },
      {
        "input": "num = 1024",
        "output": "True"
      },
      {
        "input": "num = 1000000000000",
        "output": "True"
      },
      {
        "input": "num = 16777216",
        "output": "True"
      },
      {
        "input": "num = 18446744073709551616",
        "output": "Error: Python int too large to convert to C ssize_t"
      },
      {
        "input": "num = 999999999",
        "output": "False"
      },
      {
        "input": "num = 1000000",
        "output": "True"
      },
      {
        "input": "num = 1000001",
        "output": "False"
      },
      {
        "input": "num = 1073741824",
        "output": "True"
      }
    ]
  },
  {
    "id": 3174,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "String",
      "Simulation"
    ],
    "problemDescription": "You are given a string s.\nYour task is to remove all digits by doing this operation repeatedly:\n\nDelete the first digit and the closest non-digit character to its left.\n\nReturn the resulting string after removing all digits.\nNote that the operation cannot be performed on a digit that does not have any non-digit character to its left.\n\u00a0\nExample 1:\n\nInput: s = \"abc\"\nOutput: \"abc\"\nExplanation:\nThere is no digit in the string.\n\nExample 2:\n\nInput: s = \"cb34\"\nOutput: \"\"\nExplanation:\nFirst, we apply the operation on s[2], and s becomes \"c4\".\nThen we apply the operation on s[1], and s becomes \"\".\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 100\ns consists only of lowercase English letters and digits.\nThe input is generated such that it is possible to delete all digits.\n\n",
    "starterCode": "class Solution:\n    def clearDigits(self, s: str) -> str:\n        ",
    "testCases": [
      {
        "input": "s = \"abcdef\"",
        "output": "abcdef"
      },
      {
        "input": "s = \"1a1b1c1d\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"1a2b3c45d67e89\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"a1b2c3d4e5\"",
        "output": ""
      },
      {
        "input": "s = \"d123\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"a1b2c3d4e5f6g7h8i9j0\"",
        "output": ""
      },
      {
        "input": "s = \"1a2b3c4d\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"a1b2c3d4e5f6\"",
        "output": ""
      },
      {
        "input": "s = \"a1b2c3\"",
        "output": ""
      },
      {
        "input": "s = \"abcd1234\"",
        "output": ""
      },
      {
        "input": "s = \"abcd1\"",
        "output": "abc"
      },
      {
        "input": "s = \"cb34\"",
        "output": ""
      },
      {
        "input": "s = \"a1b1c1\"",
        "output": ""
      },
      {
        "input": "s = \"a1b2c3d4\"",
        "output": ""
      },
      {
        "input": "s = \"1a2b3c4\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"a1b\"",
        "output": "b"
      },
      {
        "input": "s = \"a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1\"",
        "output": ""
      },
      {
        "input": "s = \"abc\"",
        "output": "abc"
      },
      {
        "input": "s = \"9abc8def7ghi6jkl5mno4pqr3stu2vwx1yz\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"abc1d2e3\"",
        "output": "ab"
      },
      {
        "input": "s = \"111abc222def333\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"abcd\"",
        "output": "abcd"
      },
      {
        "input": "s = \"abc123\"",
        "output": ""
      },
      {
        "input": "s = \"123abc\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"z9y8x7w6v5u4t3s2r1q0p1o2n3m4l5k6j7i8h9g0f1e2d3c4b5a6\"",
        "output": ""
      },
      {
        "input": "s = \"abc123d4ef5\"",
        "output": "e"
      },
      {
        "input": "s = \"1a2b3c4d5e6f\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"z1y2x3w4v5u6t7s8r9q0p1o2n3m4l5k6j7i8h9g0f1e2d3c4b5a6\"",
        "output": ""
      },
      {
        "input": "s = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0\"",
        "output": ""
      },
      {
        "input": "s = \"xyz765mno432lmn109pqr876\"",
        "output": ""
      },
      {
        "input": "s = \"hello2world1\"",
        "output": "hellworl"
      },
      {
        "input": "s = \"9a8b7c6d5e4f3g2h1\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"zz9yy8xx7ww6vv5uu4tt3ss2rr1qqppooonnmmllkkjjiihhggffeedcba1\"",
        "output": "zyxwvutsrqqppooonnmmllkkjjiihhggffeedcb"
      },
      {
        "input": "s = \"1234567890abcdefghijklmnopqrstuvwxyz\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2a3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p8q9r0s1t2u3v4w5x6y7z8\"",
        "output": ""
      },
      {
        "input": "s = \"mnbv1234cvbnm5678mnbvc90\"",
        "output": "cmnb"
      },
      {
        "input": "s = \"abcdefghij1klmnopqr2stuv3wxyz4abcd5efg6hij7klmno8pqr9stu0vwx1yz2\"",
        "output": "abcdefghiklmnopqstuwxyabcefhiklmnpqstvwy"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz1234567890\"",
        "output": "abcdefghijklmnop"
      },
      {
        "input": "s = \"9876543210zyxwvutsrqponmlkjihgfedcba\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"q1w2e3r4t5y6u7i8o9p0\"",
        "output": ""
      },
      {
        "input": "s = \"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"abcdefghij1234567890klmnopqrstuvwxyz\"",
        "output": "klmnopqrstuvwxyz"
      },
      {
        "input": "s = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6\"",
        "output": ""
      },
      {
        "input": "s = \"abcdefgh12345678ijkl90mnopqrstu12345678vwxyz0\"",
        "output": "ijmvwxy"
      },
      {
        "input": "s = \"abcd1234abcd5678abcd90abcd\"",
        "output": "ababcd"
      },
      {
        "input": "s = \"9abcdefghij8klmnopqr7stuvwx6yz54321\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"z9y8x7w6v5u4t3s2r1\"",
        "output": ""
      },
      {
        "input": "s = \"x9y8z7w6v5u4t3s2r1q0p9o8n7m6l5k4j3i2h1g0f9e8d7c6b5a43210\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"x1y2z3a4b5c6d7e8f9g0\"",
        "output": ""
      },
      {
        "input": "s = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6\"",
        "output": ""
      },
      {
        "input": "s = \"a1a2a3a4a5a6a7a8a9a0b1b2b3b4b5b6b7b8b9b0c1c2c3c4c5c6c7c8c9c0\"",
        "output": ""
      },
      {
        "input": "s = \"abcdefgh1ijklm2nopqr3stuv4wxyz5\"",
        "output": "abcdefgijklnopqstuwxy"
      },
      {
        "input": "s = \"m1n2o3p4q5r6s7t8u9v0w1x2y3z4\"",
        "output": ""
      },
      {
        "input": "s = \"9x8y7z6w5v4u3t2s1r0q9p8o7n6m5l4k3j2i1h0g\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0\"",
        "output": ""
      },
      {
        "input": "s = \"9a8b7c6d5e4f3g2h1i0j\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"xyz987654321\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"9876543210abcdefghijklmnopqrstuvwxyz\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"abcdefghij0987654321klmnopqrstuvwxyz\"",
        "output": "klmnopqrstuvwxyz"
      },
      {
        "input": "s = \"abcdef123ghijkl456mnopq789rstuv0\"",
        "output": "abcghimnrstu"
      },
      {
        "input": "s = \"x1y2z3x1y2z3\"",
        "output": ""
      },
      {
        "input": "s = \"xyz123abc456def789ghi0\"",
        "output": "gh"
      },
      {
        "input": "s = \"abcdefghi1jklmnopq2rstuvwxy3z\"",
        "output": "abcdefghjklmnoprstuvwxz"
      },
      {
        "input": "s = \"1abc2def3ghi4jkl5mno6pqr7stu8vwx9yz0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"aaa1bbb2ccc3ddd4eee5fff6ggg7hhh8iii9jjj\"",
        "output": "aabbccddeeffgghhiijjj"
      },
      {
        "input": "s = \"abcdef1ghijkl2mnopqr3stuv4wxyz5\"",
        "output": "abcdeghijkmnopqstuwxy"
      },
      {
        "input": "s = \"1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4x5y6z7a8b9c0d1e2f3g4h5i6j7k8l9m0n1o2p3q4r5s6t7u8v9w0x1y2z3\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"mno4pqr5stu6vwx7yz8\"",
        "output": "mnpqstvwy"
      },
      {
        "input": "s = \"p1q2r3s4t5u6v7w8x9y0z1a2b3c4d5e6f7g8h9i0\"",
        "output": ""
      },
      {
        "input": "s = \"abc123def456ghi789jkl0mno1pqr2stu3vwx4yz5\"",
        "output": "jkmnpqstvwy"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz0123456789\"",
        "output": "abcdefghijklmnop"
      },
      {
        "input": "s = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4\"",
        "output": ""
      },
      {
        "input": "s = \"9z8y7x6w5v4u3t2s1r0q9p8o7n6m5l4k3j2i1h0gfeabcd\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"987654321zyxwvutsrqponmlkjihgfedcba0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"x9y8z7w6v5u4t3s2r1q0p\"",
        "output": "p"
      },
      {
        "input": "s = \"x9y8z7\"",
        "output": ""
      },
      {
        "input": "s = \"abcdefg1234567890\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"0123456789abcdefghijklmnopqrstuvwxyz\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"abcdefghi1jklmnopq2rstuv3wxyz4\"",
        "output": "abcdefghjklmnoprstuwxy"
      },
      {
        "input": "s = \"m9n8o7p6q5r4s3t2u1\"",
        "output": ""
      },
      {
        "input": "s = \"a123b456c789d0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"abc123def456ghi789jkl012mno345pqr678stu90\"",
        "output": "s"
      },
      {
        "input": "s = \"z9y8x7w6v5u4t3s2r1q\"",
        "output": "q"
      },
      {
        "input": "s = \"abcdefghij1klmnopqr2stuv3wxyz4\"",
        "output": "abcdefghiklmnopqstuwxy"
      },
      {
        "input": "s = \"1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4x5y6z7\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"a1b2c3d4e5f6g7h8i9j10\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"1abcd2efgh3ijkl4mnop5qrst6uvw7xyz8\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"abcdef123ghijkl456mno789pqr12stu34vwxy5z\"",
        "output": "abcghipsvwxz"
      },
      {
        "input": "s = \"1a2b3c4d5e6f7g8h9i0j1k2l3m4n5\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"abcdefghij1234567890\"",
        "output": ""
      },
      {
        "input": "s = \"1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"xyz123\"",
        "output": ""
      },
      {
        "input": "s = \"abcd1234efgh5678ijkl90\"",
        "output": "ij"
      },
      {
        "input": "s = \"123abc456def789ghi0jkl\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"abc1def2ghi3jkl4mno5pqr6stu7vwx8yz9\"",
        "output": "abdeghjkmnpqstvwy"
      },
      {
        "input": "s = \"11a22b33c44d55e66f77g88h99i\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"1234567890\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"x9y8z7x6y5z4x3y2z1\"",
        "output": ""
      },
      {
        "input": "s = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4i5j6k7l8m9n0o1p2q3r4s5t6u7v8w9x0y1z2\"",
        "output": ""
      },
      {
        "input": "s = \"abcd12345efg67890hijklmnopqrstu0vwxyz\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"1a2b3c4d5e6f7g8h9i0j\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"z9y8x7w6v5u4t3s2r1q0ponmlkjihgfedcba\"",
        "output": "ponmlkjihgfedcba"
      },
      {
        "input": "s = \"xyz7uvw8mno9\"",
        "output": "xyuvmn"
      },
      {
        "input": "s = \"1234567890abcdefghij\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"1a2b3c4d5e6f7g8h9i\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"abcdefghij1klmnopq2rstuv3wxyz4\"",
        "output": "abcdefghiklmnoprstuwxy"
      },
      {
        "input": "s = \"p1q2r3s4t5u6v7w8x9y0z\"",
        "output": "z"
      },
      {
        "input": "s = \"9a8b7c6d5e4f3g2h1i0j9k8l7m6n5o4p3q2r1s0t9u8v7w6x5y4z3\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"z1y2x3w4v5u6t7s8r9q0\"",
        "output": ""
      },
      {
        "input": "s = \"abcdefghij1klmnopq2rstuvwx3yz\"",
        "output": "abcdefghiklmnoprstuvwyz"
      },
      {
        "input": "s = \"abcdef1ghijkl2mnopqr3stuv4wxyz5abcdef6ghijkl7mnopqr8stuv9wxyz0\"",
        "output": "abcdeghijkmnopqstuwxyabcdeghijkmnopqstuwxy"
      },
      {
        "input": "s = \"1a2a3a4a5a6a7a8a9a0\"",
        "output": "Error: pop from empty list"
      },
      {
        "input": "s = \"1a1b2c2d3e3f4g4h5i5j6k6l7m7n8o8p9q0r1s2t3u4v5w6x7y8z90\"",
        "output": "Error: pop from empty list"
      }
    ]
  },
  {
    "id": 1464,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).\n\u00a0\nExample 1:\n\nInput: nums = [3,4,5,2]\nOutput: 12 \nExplanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. \n\nExample 2:\n\nInput: nums = [1,5,4,5]\nOutput: 16\nExplanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.\n\nExample 3:\n\nInput: nums = [3,7]\nOutput: 12\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 500\n1 <= nums[i] <= 10^3\n\n",
    "starterCode": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [10,10,10,10]",
        "output": "81"
      },
      {
        "input": "nums = [2,3,5,7,11,13]",
        "output": "120"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "72"
      },
      {
        "input": "nums = [1,1000,2,999,3,998]",
        "output": "997002"
      },
      {
        "input": "nums = [2,3,4,5,6,7,8,9,10]",
        "output": "72"
      },
      {
        "input": "nums = [10,20,30,40,50]",
        "output": "1911"
      },
      {
        "input": "nums = [5,6,7,8,9]",
        "output": "56"
      },
      {
        "input": "nums = [5,5,5,5]",
        "output": "16"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "12"
      },
      {
        "input": "nums = [500,500,500,500,500]",
        "output": "249001"
      },
      {
        "input": "nums = [999,1000]",
        "output": "997002"
      },
      {
        "input": "nums = [1,5,4,5]",
        "output": "16"
      },
      {
        "input": "nums = [10,2,3,8]",
        "output": "63"
      },
      {
        "input": "nums = [1,1000,1,1000]",
        "output": "998001"
      },
      {
        "input": "nums = [2,3,100,101,99]",
        "output": "9900"
      },
      {
        "input": "nums = [2,3,5,7,11,13,17,19,23,29]",
        "output": "616"
      },
      {
        "input": "nums = [100,100]",
        "output": "9801"
      },
      {
        "input": "nums = [500,500,1,1]",
        "output": "249001"
      },
      {
        "input": "nums = [3,7]",
        "output": "12"
      },
      {
        "input": "nums = [3,4,5,2]",
        "output": "12"
      },
      {
        "input": "nums = [500, 500, 499, 499, 498, 498, 497, 497, 496, 496]",
        "output": "249001"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127]",
        "output": "14112"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "898101"
      },
      {
        "input": "nums = [500, 500, 500, 500, 499, 499, 499, 499, 498, 498]",
        "output": "249001"
      },
      {
        "input": "nums = [42, 84, 126, 168, 210, 252, 294, 336, 378, 420]",
        "output": "157963"
      },
      {
        "input": "nums = [500, 250, 125, 625, 312, 156, 78, 39, 19, 9, 4, 2]",
        "output": "311376"
      },
      {
        "input": "nums = [500, 400, 300, 200, 100, 50, 40, 30, 20, 10]",
        "output": "199101"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 400, 300, 200, 100, 50, 25, 12, 6, 3, 1, 1, 1, 1, 1, 1]",
        "output": "199101"
      },
      {
        "input": "nums = [333, 666, 999, 334, 667, 998, 335, 668, 997]",
        "output": "995006"
      },
      {
        "input": "nums = [1, 1000, 2, 999, 3, 998, 4, 997, 5, 996, 6, 995, 7, 994, 8]",
        "output": "997002"
      },
      {
        "input": "nums = [1000, 999, 998, 997, 996]",
        "output": "997002"
      },
      {
        "input": "nums = [999, 998, 997, 996, 995, 994, 993, 992, 991, 1000]",
        "output": "997002"
      },
      {
        "input": "nums = [300, 301, 302, 303, 304, 305, 306, 307, 308, 309]",
        "output": "94556"
      },
      {
        "input": "nums = [1000, 1000, 999, 999, 998, 998, 997, 997]",
        "output": "998001"
      },
      {
        "input": "nums = [300, 300, 300, 300, 300, 300, 299, 299, 299, 299]",
        "output": "89401"
      },
      {
        "input": "nums = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]",
        "output": "754"
      },
      {
        "input": "nums = [500, 500, 450, 450, 400, 400, 350, 350, 300, 300]",
        "output": "249001"
      },
      {
        "input": "nums = [250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265]",
        "output": "69432"
      },
      {
        "input": "nums = [1000, 1000, 999, 999, 998, 998, 997, 997, 996, 996]",
        "output": "998001"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1000, 1000, 1000, 1000, 1000]",
        "output": "998001"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
        "output": "1932"
      },
      {
        "input": "nums = [500, 450, 400, 350, 300, 250, 200, 150, 100, 50]",
        "output": "224051"
      },
      {
        "input": "nums = [500, 499, 498, 497, 496, 495, 494, 493, 492, 491]",
        "output": "248502"
      },
      {
        "input": "nums = [1000, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "17982"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]",
        "output": "4620"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4]",
        "output": "6"
      },
      {
        "input": "nums = [300, 300, 300, 300, 300, 300, 300, 300, 300, 1]",
        "output": "89401"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]",
        "output": "9702"
      },
      {
        "input": "nums = [23, 45, 67, 89, 12, 34, 56, 78]",
        "output": "6776"
      },
      {
        "input": "nums = [100, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 99]",
        "output": "9702"
      },
      {
        "input": "nums = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500]",
        "output": "249001"
      },
      {
        "input": "nums = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991]",
        "output": "997002"
      },
      {
        "input": "nums = [999, 999, 999, 999, 999, 999, 999, 999, 999, 1000]",
        "output": "997002"
      },
      {
        "input": "nums = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "8811"
      },
      {
        "input": "nums = [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980]",
        "output": "995006"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]",
        "output": "0"
      },
      {
        "input": "nums = [1, 1000, 500, 250, 125, 62, 31, 15, 7, 3, 1]",
        "output": "498501"
      },
      {
        "input": "nums = [500, 500, 500, 1, 2, 3, 4, 5]",
        "output": "249001"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "288"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]",
        "output": "0"
      },
      {
        "input": "nums = [999, 1, 999, 2, 999, 3, 999, 4, 999, 5]",
        "output": "996004"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "182"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "72"
      },
      {
        "input": "nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "output": "616"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]",
        "output": "37611"
      },
      {
        "input": "nums = [500, 501, 502, 503, 504, 505, 506, 507, 508, 509]",
        "output": "257556"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "323"
      },
      {
        "input": "nums = [1, 1000, 2, 999, 3, 998, 4, 997, 5, 996]",
        "output": "997002"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "output": "12971"
      },
      {
        "input": "nums = [1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985]",
        "output": "997002"
      },
      {
        "input": "nums = [500, 501, 499, 502, 498, 503, 497, 504, 496, 505]",
        "output": "253512"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109]",
        "output": "11556"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "342"
      },
      {
        "input": "nums = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 100]",
        "output": "4851"
      },
      {
        "input": "nums = [1000, 999, 998, 1, 2, 3]",
        "output": "997002"
      },
      {
        "input": "nums = [999, 998, 997, 996, 995, 994, 993, 992, 991, 990]",
        "output": "995006"
      },
      {
        "input": "nums = [1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1, 1000, 1]",
        "output": "998001"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 100, 10, 1]",
        "output": "98901"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000]",
        "output": "0"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "1368"
      },
      {
        "input": "nums = [333, 666, 999, 222, 555, 888, 111, 444, 777, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "output": "885226"
      },
      {
        "input": "nums = [500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4]",
        "output": "199101"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 1000, 1000, 1000, 1000, 1000]",
        "output": "998001"
      },
      {
        "input": "nums = [1, 2, 3, 1000, 4, 5, 6, 7, 8, 9]",
        "output": "7992"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "8811"
      },
      {
        "input": "nums = [999, 999, 998, 998, 997, 997, 996, 996, 995, 995]",
        "output": "996004"
      },
      {
        "input": "nums = [999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 1000]",
        "output": "997002"
      },
      {
        "input": "nums = [999, 1000, 1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "997002"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "81"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1000]",
        "output": "8991"
      },
      {
        "input": "nums = [250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269]",
        "output": "71556"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 1000, 1001, 1002, 1003, 1004]",
        "output": "1005006"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]",
        "output": "20711"
      },
      {
        "input": "nums = [2, 2, 3, 3, 4, 4, 5, 5, 6, 6]",
        "output": "25"
      },
      {
        "input": "nums = [1000, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "7992"
      },
      {
        "input": "nums = [999, 1000, 998, 1000, 997]",
        "output": "998001"
      }
    ]
  },
  {
    "id": 925,
    "difficulty": "Easy",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "problemDescription": "Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\nYou examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n\u00a0\nExample 1:\n\nInput: name = \"alex\", typed = \"aaleex\"\nOutput: true\nExplanation: 'a' and 'e' in 'alex' were long pressed.\n\nExample 2:\n\nInput: name = \"saeed\", typed = \"ssaaedd\"\nOutput: false\nExplanation: 'e' must have been pressed twice, but it was not in the typed output.\n\n\u00a0\nConstraints:\n\n1 <= name.length, typed.length <= 1000\nname and typed consist of only lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        ",
    "testCases": [
      {
        "input": "name = \"zzzzzzzz\", typed = \"zzzzzzzz\"",
        "output": "True"
      },
      {
        "input": "name = \"abcd\", typed = \"abcde\"",
        "output": "False"
      },
      {
        "input": "name = \"test\", typed = \"ttest\"",
        "output": "True"
      },
      {
        "input": "name = \"dfuyalc\", typed = \"fuuyallc\"",
        "output": "False"
      },
      {
        "input": "name = \"zzzyyyyy\", typed = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "False"
      },
      {
        "input": "name = \"abcd\", typed = \"abcddcba\"",
        "output": "False"
      },
      {
        "input": "name = \"alex\", typed = \"aaleexa\"",
        "output": "False"
      },
      {
        "input": "name = \"kikcxmvzi\", typed = \"kiikcxxmmvvzzz\"",
        "output": "False"
      },
      {
        "input": "name = \"pyplrz\", typed = \"ppyypllrz\"",
        "output": "True"
      },
      {
        "input": "name = \"ggggggg\", typed = \"ggggggg\"",
        "output": "True"
      },
      {
        "input": "name = \"laiden\", typed = \"laiden\"",
        "output": "True"
      },
      {
        "input": "name = \"saeed\", typed = \"ssaaedd\"",
        "output": "False"
      },
      {
        "input": "name = \"a\", typed = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"",
        "output": "True"
      },
      {
        "input": "name = \"a\", typed = \"b\"",
        "output": "False"
      },
      {
        "input": "name = \"abcd\", typed = \"abc\"",
        "output": "False"
      },
      {
        "input": "name = \"pyplrz\", typed = \"ppyypllr\"",
        "output": "False"
      },
      {
        "input": "name = \"a\", typed = \"aaaaaa\"",
        "output": "True"
      },
      {
        "input": "name = \"leelee\", typed = \"lleeelee\"",
        "output": "True"
      },
      {
        "input": "name = \"zzzaaa\", typed = \"zzzzzaaaa\"",
        "output": "True"
      },
      {
        "input": "name = \"alex\", typed = \"aaleex\"",
        "output": "True"
      },
      {
        "input": "name = \"vtkgn\", typed = \"vttkgnn\"",
        "output": "True"
      },
      {
        "input": "name = \"alex\", typed = \"ale\"",
        "output": "False"
      },
      {
        "input": "name = \"hello\", typed = \"hheeelllloo\"",
        "output": "True"
      },
      {
        "input": "name = \"mississippi\", typed = \"miiiiiiissssssippiiiiii\"",
        "output": "False"
      },
      {
        "input": "name = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", typed = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzzz\"",
        "output": "True"
      },
      {
        "input": "name = \"repeated\", typed = \"repeeeaatteedd\"",
        "output": "True"
      },
      {
        "input": "name = \"testing\", typed = \"testings\"",
        "output": "False"
      },
      {
        "input": "name = \"mississippi\", typed = \"mmiissssippip\"",
        "output": "False"
      },
      {
        "input": "name = \"aabbcc\", typed = \"aaabbbccc\"",
        "output": "True"
      },
      {
        "input": "name = \"abcdefghij\", typed = \"aabbccddeeffgghhiijj\"",
        "output": "True"
      },
      {
        "input": "name = \"mississippi\", typed = \"mmiiisssssiiiippp\"",
        "output": "False"
      },
      {
        "input": "name = \"flower\", typed = \"ffflowweerrr\"",
        "output": "True"
      },
      {
        "input": "name = \"consistent\", typed = \"cccooonnsisstiisstteeennnttt\"",
        "output": "False"
      },
      {
        "input": "name = \"algorithm\", typed = \"aaalgggggorithm\"",
        "output": "True"
      },
      {
        "input": "name = \"programming\", typed = \"pprooggrammmiinngg\"",
        "output": "True"
      },
      {
        "input": "name = \"mississippi\", typed = \"mmiiississipppi\"",
        "output": "True"
      },
      {
        "input": "name = \"friend\", typed = \"ffriiieeeennnd\"",
        "output": "True"
      },
      {
        "input": "name = \"longpressed\", typed = \"lllooonngggppprrreeesssppeeeedd\"",
        "output": "False"
      },
      {
        "input": "name = \"longpressed\", typed = \"lllongggppppreeesssssssedd\"",
        "output": "True"
      },
      {
        "input": "name = \"polygon\", typed = \"pppollooogooonnnggg\"",
        "output": "False"
      },
      {
        "input": "name = \"unique\", typed = \"uuunnnnuuuuuuuuqeeeuuuuuuuuuueee\"",
        "output": "False"
      },
      {
        "input": "name = \"consistent\", typed = \"ccoonnsissssttttiinnnsss\"",
        "output": "False"
      },
      {
        "input": "name = \"mississippi\", typed = \"mmiississippip\"",
        "output": "False"
      },
      {
        "input": "name = \"xxyyzz\", typed = \"xxyyzzzxxxyyyzzz\"",
        "output": "False"
      },
      {
        "input": "name = \"alexandria\", typed = \"aaalllexxaandria\"",
        "output": "True"
      },
      {
        "input": "name = \"qwert\", typed = \"qqqqwweeeerrrttt\"",
        "output": "True"
      },
      {
        "input": "name = \"vtkgn\", typed = \"vtttkkkgggnnn\"",
        "output": "True"
      },
      {
        "input": "name = \"rhinoceros\", typed = \"rrrhhiinnoocceerrrsss\"",
        "output": "False"
      },
      {
        "input": "name = \"longpressed\", typed = \"lllooonngggpppreesssed\"",
        "output": "True"
      },
      {
        "input": "name = \"qwerty\", typed = \"qqqwwweeeerrrrttyyyy\"",
        "output": "True"
      },
      {
        "input": "name = \"xylophone\", typed = \"xxyyylloophooneee\"",
        "output": "True"
      },
      {
        "input": "name = \"rhythm\", typed = \"rhythm\"",
        "output": "True"
      },
      {
        "input": "name = \"aabbcc\", typed = \"aaabbcccc\"",
        "output": "True"
      },
      {
        "input": "name = \"mississippi\", typed = \"miiisiiisssiiipppii\"",
        "output": "False"
      },
      {
        "input": "name = \"queue\", typed = \"qqquuuuuuuuueee\"",
        "output": "False"
      },
      {
        "input": "name = \"abcdefghij\", typed = \"aabbbbccccddddeeeeffffgggghhhhiiiijjjj\"",
        "output": "True"
      },
      {
        "input": "name = \"ababab\", typed = \"aabbababb\"",
        "output": "True"
      },
      {
        "input": "name = \"qlssqwwfw\", typed = \"qqllssqqwwwwwfwf\"",
        "output": "False"
      },
      {
        "input": "name = \"aabbcc\", typed = \"aabbbcccc\"",
        "output": "True"
      },
      {
        "input": "name = \"flower\", typed = \"ffffllllooower\"",
        "output": "True"
      },
      {
        "input": "name = \"programming\", typed = \"ppprroogrraammmmiinngggg\"",
        "output": "True"
      },
      {
        "input": "name = \"mississippi\", typed = \"mmyisssssippis\"",
        "output": "False"
      },
      {
        "input": "name = \"longpress\", typed = \"lloongggppppreeessss\"",
        "output": "True"
      },
      {
        "input": "name = \"aaaabbbbcccc\", typed = \"aaaabbbbbbcccc\"",
        "output": "True"
      },
      {
        "input": "name = \"xy\", typed = \"xyxyxyxyxyxyxyxy\"",
        "output": "False"
      },
      {
        "input": "name = \"unique\", typed = \"uunniiquee\"",
        "output": "True"
      },
      {
        "input": "name = \"longpressed\", typed = \"lllllooonnggggppprrreeesss\"",
        "output": "False"
      },
      {
        "input": "name = \"abcdefgh\", typed = \"aabbbcccdddddeeeeeffffffgggghhhh\"",
        "output": "True"
      },
      {
        "input": "name = \"algorithm\", typed = \"aalllgggggoooooorrrriiitthhhhhmmmmm\"",
        "output": "True"
      },
      {
        "input": "name = \"kikcxmvzi\", typed = \"kiikcxxmmvvvzzzii\"",
        "output": "True"
      },
      {
        "input": "name = \"abcde\", typed = \"abcdeabcde\"",
        "output": "False"
      },
      {
        "input": "name = \"keyboard\", typed = \"kkkkeeyyyboooaarrdd\"",
        "output": "True"
      },
      {
        "input": "name = \"a\", typed = \"aaaaaaaaaaa\"",
        "output": "True"
      },
      {
        "input": "name = \"qwerty\", typed = \"qqqqwwwwertyyyyy\"",
        "output": "True"
      },
      {
        "input": "name = \"leetcode\", typed = \"lleettcoodde\"",
        "output": "True"
      },
      {
        "input": "name = \"laiden\", typed = \"laidenlaiden\"",
        "output": "False"
      },
      {
        "input": "name = \"aabbcc\", typed = \"aabbbccc\"",
        "output": "True"
      },
      {
        "input": "name = \"characters\", typed = \"ccccchaarrrrrttaaaaccchhhhheeeersss\"",
        "output": "False"
      },
      {
        "input": "name = \"xylophone\", typed = \"xyyylloophooneee\"",
        "output": "True"
      },
      {
        "input": "name = \"keyboard\", typed = \"kkkkeeyyyboaaaarrrddddd\"",
        "output": "True"
      },
      {
        "input": "name = \"elephant\", typed = \"eleelphhhaannnttt\"",
        "output": "False"
      },
      {
        "input": "name = \"longnamehere\", typed = \"lllooonnggnnaaammmeehheerrree\"",
        "output": "True"
      },
      {
        "input": "name = \"zebra\", typed = \"zzzeebrraaa\"",
        "output": "True"
      },
      {
        "input": "name = \"function\", typed = \"fffuunncctttiooonnnn\"",
        "output": "True"
      },
      {
        "input": "name = \"abcdefg\", typed = \"abcdeeeefg\"",
        "output": "True"
      },
      {
        "input": "name = \"qwertyuiop\", typed = \"qqqwwweerrttyyuuiioopp\"",
        "output": "True"
      },
      {
        "input": "name = \"hello\", typed = \"heeeelllllooo\"",
        "output": "True"
      },
      {
        "input": "name = \"robert\", typed = \"rroobbeerrtt\"",
        "output": "True"
      },
      {
        "input": "name = \"repeated\", typed = \"rrreeeepppeeeaaatteeeedd\"",
        "output": "True"
      },
      {
        "input": "name = \"rhell\", typed = \"rhellllllll\"",
        "output": "True"
      },
      {
        "input": "name = \"mississippi\", typed = \"mmiisssssippppi\"",
        "output": "False"
      },
      {
        "input": "name = \"supercalifragilisticexpialidocious\", typed = \"ssuupercccaliiifffragggiilissticceexpiialiiddoouuusss\"",
        "output": "False"
      },
      {
        "input": "name = \"triangle\", typed = \"tttriiaanngggllee\"",
        "output": "True"
      },
      {
        "input": "name = \"variable\", typed = \"vvvvvaaarriiiaabbbblllee\"",
        "output": "True"
      },
      {
        "input": "name = \"aabbc\", typed = \"aabbbcc\"",
        "output": "True"
      },
      {
        "input": "name = \"abcd\", typed = \"aabbbccccdddd\"",
        "output": "True"
      },
      {
        "input": "name = \"hello\", typed = \"heeeelllllllllo\"",
        "output": "True"
      },
      {
        "input": "name = \"typing\", typed = \"ttypiinggggg\"",
        "output": "True"
      },
      {
        "input": "name = \"longpressed\", typed = \"lllllonggggppppreeeesssssssppppeeeedd\"",
        "output": "False"
      },
      {
        "input": "name = \"unique\", typed = \"uunniiqueee\"",
        "output": "True"
      },
      {
        "input": "name = \"aaab\", typed = \"aaaaaabbbb\"",
        "output": "True"
      },
      {
        "input": "name = \"\", typed = \"\"",
        "output": "True"
      },
      {
        "input": "name = \"elephant\", typed = \"eeelleeeephhhhaaaalllllltttt\"",
        "output": "False"
      },
      {
        "input": "name = \"ggg\", typed = \"ggggggggggg\"",
        "output": "True"
      },
      {
        "input": "name = \"abcd\", typed = \"aabbccddeeffgg\"",
        "output": "False"
      },
      {
        "input": "name = \"testing\", typed = \"testtinngg\"",
        "output": "True"
      },
      {
        "input": "name = \"abcdef\", typed = \"aabbccddeeffgg\"",
        "output": "False"
      },
      {
        "input": "name = \"sequence\", typed = \"sseeqqqquuuuuuennnnccccceee\"",
        "output": "True"
      },
      {
        "input": "name = \"carlosgomez\", typed = \"cccarllloossgggoommezz\"",
        "output": "True"
      },
      {
        "input": "name = \"elephant\", typed = \"eeellllepphaaannntt\"",
        "output": "True"
      },
      {
        "input": "name = \"aaaaaa\", typed = \"aaaaaaaaaaaa\"",
        "output": "True"
      },
      {
        "input": "name = \"programming\", typed = \"ppprroogggrraammmiinnnggg\"",
        "output": "True"
      },
      {
        "input": "name = \"aaabbbccc\", typed = \"aabbbccc\"",
        "output": "False"
      },
      {
        "input": "name = \"algorithm\", typed = \"aalllggggorrrrithhhoonnmmm\"",
        "output": "False"
      },
      {
        "input": "name = \"abcdabcd\", typed = \"aabbccddeeffgg\"",
        "output": "False"
      },
      {
        "input": "name = \"programming\", typed = \"pprrrooggggrrraaaaammmmmmiiiiinnnggggggggg\"",
        "output": "True"
      },
      {
        "input": "name = \"sequence\", typed = \"sseeeequuuuueeeennnnncceeeeee\"",
        "output": "True"
      },
      {
        "input": "name = \"farruh\", typed = \"faaarrrruuhhhh\"",
        "output": "True"
      },
      {
        "input": "name = \"abcdefghijk\", typed = \"aabbcdddeeeffggghhhiiiijjjkkk\"",
        "output": "True"
      },
      {
        "input": "name = \"xylophone\", typed = \"xyyyylloophooneee\"",
        "output": "True"
      },
      {
        "input": "name = \"xylophone\", typed = \"xxxyyylloooophooooneee\"",
        "output": "True"
      },
      {
        "input": "name = \"abcdefg\", typed = \"abcdddddeeeffffffggg\"",
        "output": "True"
      },
      {
        "input": "name = \"carlos\", typed = \"cccaaarlllooss\"",
        "output": "True"
      },
      {
        "input": "name = \"mississippi\", typed = \"miisissiipppi\"",
        "output": "False"
      },
      {
        "input": "name = \"challenge\", typed = \"chhaalllaannggeee\"",
        "output": "False"
      },
      {
        "input": "name = \"abcd\", typed = \"aabbccdd\"",
        "output": "True"
      },
      {
        "input": "name = \"consistent\", typed = \"ccconinnsisttteeennnsssstt\"",
        "output": "False"
      },
      {
        "input": "name = \"consistent\", typed = \"cccooonnsiisstteeeennnttt\"",
        "output": "True"
      },
      {
        "input": "name = \"abababa\", typed = \"aabbaabbaabbaaba\"",
        "output": "False"
      },
      {
        "input": "name = \"mississippi\", typed = \"mmiissssssiiipppp\"",
        "output": "False"
      },
      {
        "input": "name = \"example\", typed = \"eexxaammmppllee\"",
        "output": "True"
      },
      {
        "input": "name = \"testcase\", typed = \"tteeeessttccaaase\"",
        "output": "True"
      },
      {
        "input": "name = \"aaa\", typed = \"aaaaa\"",
        "output": "True"
      },
      {
        "input": "name = \"friend\", typed = \"frrriieeedd\"",
        "output": "False"
      },
      {
        "input": "name = \"algorithm\", typed = \"aalllgggggoooooorrriiithhhhhmmmmm\"",
        "output": "True"
      },
      {
        "input": "name = \"xyz\", typed = \"xxxyyyzzz\"",
        "output": "True"
      },
      {
        "input": "name = \"xyz\", typed = \"xxyyyzzz\"",
        "output": "True"
      },
      {
        "input": "name = \"longpressed\", typed = \"lllllooonngggpppprrreeeesssssseeeedd\"",
        "output": "True"
      },
      {
        "input": "name = \"complexity\", typed = \"cccomppplleexxiittiityyy\"",
        "output": "False"
      },
      {
        "input": "name = \"zebra\", typed = \"zzzeeebrrraa\"",
        "output": "True"
      }
    ]
  },
  {
    "id": 2965,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Matrix"
    ],
    "problemDescription": "You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.\nReturn a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.\n\u00a0\nExample 1:\n\nInput: grid = [[1,3],[2,2]]\nOutput: [2,4]\nExplanation: Number 2 is repeated and number 4 is missing so the answer is [2,4].\n\nExample 2:\n\nInput: grid = [[9,1,7],[8,9,2],[3,4,6]]\nOutput: [9,5]\nExplanation: Number 9 is repeated and number 5 is missing so the answer is [9,5].\n\n\u00a0\nConstraints:\n\n2 <= n == grid.length == grid[i].length <= 50\n1 <= grid[i][j] <= n * n\nFor all x that 1 <= x <= n * n there is exactly one x that is not equal to any of the grid members.\nFor all x that 1 <= x <= n * n there is exactly one x that is equal to exactly two of the grid members.\nFor all x that 1 <= x <= n * n except two of them there is exactly one pair of i, j that 0 <= i, j <= n - 1 and grid[i][j] == x.\n\n",
    "starterCode": "class Solution:\n    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "grid = [[1,1],[2,3]]",
        "output": "[1, 4]"
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,8]]",
        "output": "[8, 9]"
      },
      {
        "input": "grid = [[1,3],[2,2]]",
        "output": "[2, 4]"
      },
      {
        "input": "grid = [[16,14,9,11],[17,13,12,15],[1,4,3,2],[6,5,8,7]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[4,5,6],[7,8,9],[1,2,1]]",
        "output": "[1, 3]"
      },
      {
        "input": "grid = [[1,2],[2,3]]",
        "output": "[2, 4]"
      },
      {
        "input": "grid = [[4,3,2],[1,5,2],[6,7,8]]",
        "output": "[2, 9]"
      },
      {
        "input": "grid = [[9,1,7],[8,9,2],[3,4,6]]",
        "output": "[9, 5]"
      },
      {
        "input": "grid = [[16,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,13]]",
        "output": "[13, 1]"
      },
      {
        "input": "grid = [[16,2,3,4],[5,13,6,7],[8,9,12,10],[11,15,14,13]]",
        "output": "[13, 1]"
      },
      {
        "input": "grid = [[4,1,3],[3,2,5],[6,5,7]]",
        "output": "[5, 9]"
      },
      {
        "input": "grid = [[4,3,2],[1,5,1],[6,7,8]]",
        "output": "[1, 9]"
      },
      {
        "input": "grid = [[16,2,3],[4,5,6],[7,8,9]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[25,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[25,21,22,23,24]]",
        "output": "[25, 1]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,99]]",
        "output": "[99, 100]"
      },
      {
        "input": "grid = [[36,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50]]",
        "output": "[36, 100]"
      },
      {
        "input": "grid = [[36,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[1,31,32,33,34,35]]",
        "output": "[0, 0]"
      },
      {
        "input": "grid = [[36,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,36]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,26]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,36]]",
        "output": "[0, 0]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,42]]",
        "output": "[42, 49]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,1]]",
        "output": "[1, 25]"
      },
      {
        "input": "grid = [[25, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 24, 24]]",
        "output": "[24, 23]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,23,25]]",
        "output": "[23, 24]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,30]]",
        "output": "[30, 36]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,24]]",
        "output": "[24, 25]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,48]]",
        "output": "[48, 49]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,36,36]]",
        "output": "[36, 35]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,49,49]]",
        "output": "[49, 48]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,40]]",
        "output": "[40, 49]"
      },
      {
        "input": "grid = [[36,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,36]]",
        "output": "[36, 1]"
      },
      {
        "input": "grid = [[25,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,15]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16],[17,18,19,20,21,22,23,24],[25,26,27,28,29,30,31,32],[33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48],[49,50,51,52,53,54,55,56],[57,58,59,60,61,62,63,63]]",
        "output": "[63, 64]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,10],[21,22,23,24,25]]",
        "output": "[10, 20]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,44]]",
        "output": "[44, 49]"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 25, 25]]",
        "output": "[25, 24]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,25,24,25]]",
        "output": "[25, 23]"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 26, 26]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[25,24,23,22,21],[20,19,18,17,16],[15,14,13,12,11],[10,9,8,7,6],[5,4,3,2,3]]",
        "output": "[3, 1]"
      },
      {
        "input": "grid = [[25,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
        "output": "[25, 1]"
      },
      {
        "input": "grid = [[36,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[49,1,2,3,4,5],[6,7,8,9,10,11],[12,13,14,15,16,17],[18,19,20,21,22,23],[24,25,26,27,28,29],[30,31,32,33,34,35],[36,37,38,39,40,41],[42,43,44,45,46,47],[48,49,50,51,52,53],[54,55,56,57,58,59]]",
        "output": "[49, 100]"
      },
      {
        "input": "grid = [[25,1,3,5,7],[9,11,13,15,17],[19,21,23,25,2],[4,6,8,10,12],[14,16,18,20,22]]",
        "output": "[25, 24]"
      },
      {
        "input": "grid = [[4,2,3,1,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,36],[37,38,39,40,41,42],[43,44,45,46,47,48],[49,50,51,52,53,54],[55,56,57,58,59,59]]",
        "output": "[59, 100]"
      },
      {
        "input": "grid = [[30,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,30]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[25,1,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,24]]",
        "output": "[24, 2]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,25,25]]",
        "output": "[25, 24]"
      },
      {
        "input": "grid = [[49,1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16,17],[18,19,20,21,22,23,24,25,26],[27,28,29,30,31,32,33,34,35],[36,37,38,39,40,41,42,43,44],[45,46,47,48,49,50,51,52,53],[54,55,56,57,58,59,60,61,62],[63,64,65,66,67,68,69,70,71],[72,73,74,75,76,77,78,79,80]]",
        "output": "[49, 81]"
      },
      {
        "input": "grid = [[4,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
        "output": "[4, 1]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[25,22,23,24,25]]",
        "output": "[25, 21]"
      },
      {
        "input": "grid = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 24]]",
        "output": "[24, 25]"
      },
      {
        "input": "grid = [[25,24,23,22,21],[20,19,18,17,16],[15,14,13,12,11],[10,9,8,7,6],[5,4,3,3,1]]",
        "output": "[3, 2]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,25,26]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,25],[21,22,23,24,25]]",
        "output": "[25, 20]"
      },
      {
        "input": "grid = [[36,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,35]]",
        "output": "[35, 1]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,16]]",
        "output": "[16, 25]"
      },
      {
        "input": "grid = [[16, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 24]]",
        "output": "[24, 25]"
      },
      {
        "input": "grid = [[36,35,34,33,32,31],[30,29,28,27,26,25],[24,23,22,21,20,19],[18,17,16,15,14,13],[12,11,10,9,8,7],[6,5,4,3,2,2]]",
        "output": "[2, 1]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,50]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,25]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19],[12,14,16,18,20],[21,22,23,24,24]]",
        "output": "[24, 25]"
      },
      {
        "input": "grid = [[1, 3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14, 15, 16], [17, 18, 19, 20, 21], [22, 23, 24, 25, 22]]",
        "output": "[22, 2]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,25],[21,22,25,24,25]]",
        "output": "[0, 23]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,29]]",
        "output": "[29, 36]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
        "output": "[0, 0]"
      },
      {
        "input": "grid = [[2,3,4,5,6],[7,8,9,10,11],[12,13,14,15,16],[17,18,19,20,21],[22,23,24,25,25]]",
        "output": "[25, 1]"
      },
      {
        "input": "grid = [[36, 28, 30, 33, 34], [31, 27, 29, 35, 32], [20, 23, 22, 24, 25], [19, 17, 18, 16, 26], [21, 37, 14, 15, 13]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,37]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[49,1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16,17],[18,19,20,21,22,23,24,25,26],[27,28,29,30,31,32,33,34,35],[36,37,38,39,40,41,42,43,44],[45,46,47,48,49,50,51,52,53],[54,55,56,57,58,59,60,61,62],[63,64,65,66,67,68,69,70,71],[72,73,74,75,76,77,78,79,90]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[4,2,3,1,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,24]]",
        "output": "[24, 25]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,10]]",
        "output": "[10, 25]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,23]]",
        "output": "[23, 25]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[22,23,24,25,22]]",
        "output": "[22, 21]"
      },
      {
        "input": "grid = [[30,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,25,25]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[25,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[1,21,22,23,24]]",
        "output": "[0, 0]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,20,20],[21,22,23,24,19]]",
        "output": "[20, 25]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18],[19,20,21,22,23,24,25,26,27],[28,29,30,31,32,33,34,35,36],[37,38,39,40,41,42,43,44,45],[46,47,48,49,50,51,52,53,54],[55,56,57,58,59,60,61,62,63],[64,65,66,67,68,69,70,71,72],[73,74,75,76,77,78,79,80,80]]",
        "output": "[80, 81]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,35]]",
        "output": "[35, 36]"
      },
      {
        "input": "grid = [[49,1,2,3,4,5,6,7,8],[9,10,11,12,13,14,15,16,17],[18,19,20,21,22,23,24,25,26],[27,28,29,30,31,32,33,34,35],[36,37,38,39,40,41,42,43,44],[45,46,47,48,49,50,51,52,53],[54,55,56,57,58,59,60,61,62],[63,64,65,66,67,68,69,70,71],[72,73,74,75,76,77,78,80,80]]",
        "output": "[80, 81]"
      },
      {
        "input": "grid = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,49]]",
        "output": "[0, 0]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,30]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[49, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 4]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "grid = [[25, 22, 23, 24, 20], [18, 17, 16, 15, 14], [13, 12, 11, 10, 9], [8, 7, 6, 5, 4], [3, 2, 1, 1, 19]]",
        "output": "[1, 21]"
      },
      {
        "input": "grid = [[25,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,24]]",
        "output": "[24, 1]"
      },
      {
        "input": "grid = [[25,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[25,22,23,24,21]]",
        "output": "[25, 1]"
      },
      {
        "input": "grid = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,21]]",
        "output": "[21, 25]"
      }
    ]
  },
  {
    "id": 3099,
    "difficulty": "Easy",
    "tags": [
      "Math"
    ],
    "problemDescription": "An integer divisible by the sum of its digits is said to be a Harshad number. You are given an integer x. Return the sum of the digits of x if x is a Harshad number, otherwise, return -1.\n\u00a0\nExample 1:\n\nInput: x = 18\nOutput: 9\nExplanation:\nThe sum of digits of x is 9. 18 is divisible by 9. So 18 is a Harshad number and the answer is 9.\n\nExample 2:\n\nInput: x = 23\nOutput: -1\nExplanation:\nThe sum of digits of x is 5. 23 is not divisible by 5. So 23 is not a Harshad number and the answer is -1.\n\n\u00a0\nConstraints:\n\n1 <= x <= 100\n\n",
    "starterCode": "class Solution:\n    def sumOfTheDigitsOfHarshadNumber(self, x: int) -> int:\n        ",
    "testCases": [
      {
        "input": "x = 50",
        "output": "5"
      },
      {
        "input": "x = 23",
        "output": "-1"
      },
      {
        "input": "x = 10",
        "output": "1"
      },
      {
        "input": "x = 18",
        "output": "9"
      },
      {
        "input": "x = 1",
        "output": "1"
      },
      {
        "input": "x = 90",
        "output": "9"
      },
      {
        "input": "x = 57",
        "output": "-1"
      },
      {
        "input": "x = 99",
        "output": "-1"
      },
      {
        "input": "x = 81",
        "output": "9"
      },
      {
        "input": "x = 45",
        "output": "9"
      },
      {
        "input": "x = 13",
        "output": "-1"
      },
      {
        "input": "x = 100",
        "output": "1"
      },
      {
        "input": "x = 12",
        "output": "3"
      },
      {
        "input": "x = 54",
        "output": "9"
      },
      {
        "input": "x = 234",
        "output": "9"
      },
      {
        "input": "x = 621",
        "output": "9"
      },
      {
        "input": "x = 111",
        "output": "3"
      },
      {
        "input": "x = 72",
        "output": "9"
      },
      {
        "input": "x = 42",
        "output": "6"
      },
      {
        "input": "x = 153",
        "output": "9"
      },
      {
        "input": "x = 216",
        "output": "9"
      },
      {
        "input": "x = 990",
        "output": "18"
      },
      {
        "input": "x = 135",
        "output": "9"
      },
      {
        "input": "x = 132",
        "output": "6"
      },
      {
        "input": "x = 201",
        "output": "3"
      },
      {
        "input": "x = 27",
        "output": "9"
      },
      {
        "input": "x = 729",
        "output": "-1"
      },
      {
        "input": "x = 303",
        "output": "-1"
      },
      {
        "input": "x = 513",
        "output": "9"
      },
      {
        "input": "x = 981",
        "output": "-1"
      },
      {
        "input": "x = 450",
        "output": "9"
      },
      {
        "input": "x = 70",
        "output": "7"
      },
      {
        "input": "x = 270",
        "output": "9"
      },
      {
        "input": "x = 999",
        "output": "27"
      },
      {
        "input": "x = 108",
        "output": "9"
      },
      {
        "input": "x = 36",
        "output": "9"
      },
      {
        "input": "x = 200",
        "output": "2"
      },
      {
        "input": "x = 756",
        "output": "18"
      },
      {
        "input": "x = 801",
        "output": "9"
      },
      {
        "input": "x = 342",
        "output": "9"
      },
      {
        "input": "x = 49",
        "output": "-1"
      },
      {
        "input": "x = 144",
        "output": "9"
      },
      {
        "input": "x = 810",
        "output": "9"
      },
      {
        "input": "x = 405",
        "output": "9"
      },
      {
        "input": "x = 300",
        "output": "3"
      },
      {
        "input": "x = 504",
        "output": "9"
      },
      {
        "input": "x = 180",
        "output": "9"
      },
      {
        "input": "x = 369",
        "output": "-1"
      },
      {
        "input": "x = 75",
        "output": "-1"
      },
      {
        "input": "x = 900",
        "output": "9"
      },
      {
        "input": "x = 123",
        "output": "-1"
      },
      {
        "input": "x = 198",
        "output": "18"
      },
      {
        "input": "x = 63",
        "output": "9"
      }
    ]
  },
  {
    "id": 1356,
    "difficulty": "Easy",
    "tags": [
      "Bit Manipulation",
      "Array",
      "Counting",
      "Sorting"
    ],
    "problemDescription": "You are given an integer array arr. Sort the integers in the array\u00a0in ascending order by the number of 1's\u00a0in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.\nReturn the array after sorting it.\n\u00a0\nExample 1:\n\nInput: arr = [0,1,2,3,4,5,6,7,8]\nOutput: [0,1,2,4,8,3,5,6,7]\nExplantion: [0] is the only integer with 0 bits.\n[1,2,4,8] all have 1 bit.\n[3,5,6] have 2 bits.\n[7] has 3 bits.\nThe sorted array by bits is [0,1,2,4,8,3,5,6,7]\n\nExample 2:\n\nInput: arr = [1024,512,256,128,64,32,16,8,4,2,1]\nOutput: [1,2,4,8,16,32,64,128,256,512,1024]\nExplantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 500\n0 <= arr[i] <= 104\n\n",
    "starterCode": "class Solution:\n    def sortByBits(self, arr: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "arr = [3,7,8,9]",
        "output": "[8, 3, 9, 7]"
      },
      {
        "input": "arr = [1,3,5,7,9]",
        "output": "[1, 3, 5, 9, 7]"
      },
      {
        "input": "arr = [1,0,2,3,4]",
        "output": "[0, 1, 2, 4, 3]"
      },
      {
        "input": "arr = [3,8,3,6,5,7,9,2]",
        "output": "[2, 8, 3, 3, 5, 6, 9, 7]"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15]",
        "output": "[1, 3, 5, 9, 7, 11, 13, 15]"
      },
      {
        "input": "arr = [0,1,2,3,4,5,6,7,8]",
        "output": "[0, 1, 2, 4, 8, 3, 5, 6, 7]"
      },
      {
        "input": "arr = [1024,512,256,128,64,32,16,8,4,2,1]",
        "output": "[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]"
      },
      {
        "input": "arr = [10,100,1000,10000]",
        "output": "[10, 100, 10000, 1000]"
      },
      {
        "input": "arr = [1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]"
      },
      {
        "input": "arr = [31, 15, 7, 3, 1, 0, 16, 8, 4, 2]",
        "output": "[0, 1, 2, 4, 8, 16, 3, 7, 15, 31]"
      },
      {
        "input": "arr = [8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]",
        "output": "[1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191]"
      },
      {
        "input": "arr = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "[3, 5, 9, 17, 7, 11, 13, 19, 21, 25, 15, 23, 27, 29, 31]"
      },
      {
        "input": "arr = [123, 456, 789, 101, 234, 567, 890, 112, 345, 678]",
        "output": "[112, 101, 456, 234, 345, 678, 789, 123, 567, 890]"
      },
      {
        "input": "arr = [4095, 4094, 4093, 4092, 4091, 4090, 4089, 4088, 4087, 4086, 4085, 4084]",
        "output": "[4084, 4088, 4085, 4086, 4089, 4090, 4092, 4087, 4091, 4093, 4094, 4095]"
      },
      {
        "input": "arr = [4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095]"
      },
      {
        "input": "arr = [123, 456, 789, 101, 234, 567, 890, 111, 222, 333]",
        "output": "[101, 456, 234, 333, 789, 111, 123, 222, 567, 890]"
      },
      {
        "input": "arr = [33, 2, 7, 5, 8, 9, 6, 11, 14]",
        "output": "[2, 8, 5, 6, 9, 33, 7, 11, 14]"
      },
      {
        "input": "arr = [9, 5, 3, 7, 11, 13, 19, 21, 23, 29, 31, 37, 41, 43, 47]",
        "output": "[3, 5, 9, 7, 11, 13, 19, 21, 37, 41, 23, 29, 43, 31, 47]"
      },
      {
        "input": "arr = [1234, 4321, 5678, 8765, 9876, 6789, 2345, 5432]",
        "output": "[1234, 2345, 4321, 5432, 6789, 9876, 5678, 8765]"
      },
      {
        "input": "arr = [3, 7, 8, 9, 6, 5, 2, 1, 0, 4]",
        "output": "[0, 1, 2, 4, 8, 3, 5, 6, 9, 7]"
      },
      {
        "input": "arr = [65535, 32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0]",
        "output": "[0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535]"
      },
      {
        "input": "arr = [8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0, 2, 4, 8, 16, 32]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191]"
      },
      {
        "input": "arr = [49, 33, 25, 17, 9, 5, 3, 1, 0, 2, 6, 10, 18, 34, 66, 130]",
        "output": "[0, 1, 2, 3, 5, 6, 9, 10, 17, 18, 33, 34, 66, 130, 25, 49]"
      },
      {
        "input": "arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "arr = [1023, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1023]"
      },
      {
        "input": "arr = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]",
        "output": "[1, 3, 7, 15, 31, 63, 127, 255, 511, 1023]"
      },
      {
        "input": "arr = [2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]",
        "output": "[0, 1, 1, 2, 2, 4, 4, 8, 8, 16, 16, 32, 32, 64, 64, 128, 128, 256, 256, 512, 512, 1024, 1024, 2048, 2048]"
      },
      {
        "input": "arr = [13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[17, 18, 20, 24, 13, 19, 21, 22, 25, 26, 28, 23, 27, 29, 30]"
      },
      {
        "input": "arr = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]",
        "output": "[3, 5, 17, 7, 11, 13, 19, 37, 41, 23, 29, 43, 53, 31, 47]"
      },
      {
        "input": "arr = [1234, 2345, 3456, 4567, 5678, 6789, 7890, 8901, 9012]",
        "output": "[3456, 1234, 2345, 6789, 8901, 9012, 5678, 4567, 7890]"
      },
      {
        "input": "arr = [4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 8191, 16383, 32767]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767]"
      },
      {
        "input": "arr = [101, 202, 303, 404, 505, 606, 707, 808, 909, 1010, 1111, 1212, 1313, 1414, 1515, 1616, 1717]",
        "output": "[101, 202, 404, 808, 1313, 1616, 707, 1414, 303, 606, 909, 1111, 1212, 505, 1010, 1717, 1515]"
      },
      {
        "input": "arr = [63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48]",
        "output": "[48, 49, 50, 52, 56, 51, 53, 54, 57, 58, 60, 55, 59, 61, 62, 63]"
      },
      {
        "input": "arr = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0, 2, 4, 8, 16, 32, 64, 128, 256]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 3, 7, 15, 31, 63, 127, 255, 511, 1023]"
      },
      {
        "input": "arr = [5, 3, 15, 7, 8, 12, 9, 6, 2, 4, 10, 14, 13, 11, 1]",
        "output": "[1, 2, 4, 8, 3, 5, 6, 9, 10, 12, 7, 11, 13, 14, 15]"
      },
      {
        "input": "arr = [8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0]",
        "output": "[0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191]"
      },
      {
        "input": "arr = [9, 5, 6, 2, 31, 14, 12, 10, 28, 20, 24]",
        "output": "[2, 5, 6, 9, 10, 12, 20, 24, 14, 28, 31]"
      },
      {
        "input": "arr = [1001, 1010, 1011, 1100, 1101, 1110, 1111, 100, 101, 110, 111, 10, 1, 0]",
        "output": "[0, 1, 10, 100, 101, 1100, 110, 1101, 1110, 111, 1111, 1001, 1010, 1011]"
      },
      {
        "input": "arr = [10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989, 9988]",
        "output": "[9988, 9992, 10000, 9989, 9990, 9993, 9994, 9996, 9991, 9995, 9997, 9998, 9999]"
      },
      {
        "input": "arr = [1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]",
        "output": "[10000, 1000, 100000, 1000000, 10000000, 100000000, 1000000000]"
      },
      {
        "input": "arr = [8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191]"
      },
      {
        "input": "arr = [9999, 8888, 7777, 6666, 5555, 4444, 3333, 2222, 1111, 1110, 1101, 1100, 1011, 1010, 1001, 1000, 999, 888, 777, 666, 555, 444, 333, 222, 111, 110, 101, 100, 99, 88, 77, 66, 55, 44, 33, 22, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "[0, 1, 2, 4, 8, 3, 5, 6, 9, 10, 33, 66, 7, 11, 22, 44, 88, 100, 77, 99, 101, 777, 1100, 55, 110, 333, 555, 666, 1101, 1110, 3333, 6666, 111, 222, 444, 888, 1000, 1111, 2222, 4444, 8888, 1001, 1010, 7777, 999, 1011, 5555, 9999]"
      },
      {
        "input": "arr = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1, 0]",
        "output": "[0, 1, 3, 7, 15, 31, 62, 125, 250, 500, 1000]"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]",
        "output": "[1, 2, 4, 8, 16, 32, 3, 5, 6, 9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 7, 11, 13, 14, 19, 21, 22, 25, 26, 28, 35, 37, 38, 41, 42, 44, 49, 50, 52, 56, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 31, 47, 55, 59, 61, 62, 63]"
      },
      {
        "input": "arr = [31, 15, 7, 3, 1, 0, 32, 16, 8, 4, 2]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 3, 7, 15, 31]"
      },
      {
        "input": "arr = [15, 31, 63, 127, 255, 511, 1023, 2047]",
        "output": "[15, 31, 63, 127, 255, 511, 1023, 2047]"
      },
      {
        "input": "arr = [3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767]",
        "output": "[3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767]"
      },
      {
        "input": "arr = [500, 125, 62, 31, 15, 7, 3, 1, 0, 2, 4, 8, 16, 32, 64, 128, 256, 512]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 3, 7, 15, 31, 62, 125, 500]"
      },
      {
        "input": "arr = [129, 258, 516, 1032, 2064, 4128, 8256]",
        "output": "[129, 258, 516, 1032, 2064, 4128, 8256]"
      },
      {
        "input": "arr = [2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]",
        "output": "[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]"
      },
      {
        "input": "arr = [1001, 1010, 1100, 1101, 1110, 1111, 999, 998, 997, 996, 995, 994]",
        "output": "[1100, 1101, 1110, 994, 996, 1111, 995, 997, 998, 1001, 1010, 999]"
      },
      {
        "input": "arr = [9, 5, 1, 3, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "[1, 3, 5, 9, 17, 7, 11, 13, 19, 21, 25, 15, 23, 27, 29, 31]"
      },
      {
        "input": "arr = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0, 3, 5, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 3, 5, 6, 9, 10, 12, 17, 18, 20, 24, 7, 13, 14, 19, 21, 22, 25, 26, 28, 15, 23, 27, 29, 30]"
      },
      {
        "input": "arr = [64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]",
        "output": "[64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]"
      },
      {
        "input": "arr = [32, 16, 8, 4, 2, 1, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768]",
        "output": "[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768]"
      },
      {
        "input": "arr = [13, 29, 11, 7, 3, 1, 0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 3, 7, 11, 13, 29]"
      },
      {
        "input": "arr = [1001, 1100, 1010, 1110, 1000, 1111, 1101, 1011, 111, 110, 101, 11, 10, 1, 0]",
        "output": "[0, 1, 10, 11, 101, 1100, 110, 1101, 1110, 111, 1000, 1111, 1001, 1010, 1011]"
      },
      {
        "input": "arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]",
        "output": "[1, 3, 5, 9, 17, 7, 11, 13, 19, 21, 25, 15, 23, 27, 29, 31]"
      },
      {
        "input": "arr = [9999, 8888, 7777, 6666, 5555, 4444, 3333, 2222, 1111, 1010, 1101, 1000, 111, 110, 101, 11, 10, 1, 0]",
        "output": "[0, 1, 10, 11, 101, 110, 1101, 3333, 6666, 111, 1000, 1111, 2222, 4444, 8888, 1010, 7777, 5555, 9999]"
      },
      {
        "input": "arr = [8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]",
        "output": "[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 2, 4, 8, 16, 3, 5, 6, 9, 10, 12, 17, 18, 20, 7, 11, 13, 14, 19, 15]"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]",
        "output": "[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]"
      },
      {
        "input": "arr = [1234, 4321, 5678, 8765, 9876, 6789, 3456, 7890]",
        "output": "[3456, 1234, 4321, 6789, 9876, 5678, 8765, 7890]"
      },
      {
        "input": "arr = [31, 15, 7, 3, 1, 0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 3, 7, 15, 31]"
      },
      {
        "input": "arr = [5, 3, 15, 7, 11, 13, 19, 21, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
        "output": "[3, 5, 7, 11, 13, 19, 21, 37, 41, 67, 73, 97, 15, 23, 29, 43, 53, 71, 83, 89, 31, 47, 59, 61, 79]"
      },
      {
        "input": "arr = [31, 29, 28, 27, 26, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "[1, 3, 5, 9, 17, 7, 11, 13, 19, 21, 25, 26, 28, 15, 23, 27, 29, 31]"
      },
      {
        "input": "arr = [33, 65, 129, 257, 513, 1025, 2049, 4097, 8193, 16385, 32769, 65537, 131073, 262145, 524289, 1048577, 2097153, 4194305, 8388609, 16777217]",
        "output": "[33, 65, 129, 257, 513, 1025, 2049, 4097, 8193, 16385, 32769, 65537, 131073, 262145, 524289, 1048577, 2097153, 4194305, 8388609, 16777217]"
      },
      {
        "input": "arr = [3, 5, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45]",
        "output": "[3, 5, 6, 9, 12, 18, 24, 33, 36, 21, 42, 15, 27, 30, 39, 45]"
      },
      {
        "input": "arr = [1234, 4321, 2345, 5432, 3456, 6543, 4567, 7654, 5678, 8765, 6789, 9876, 7890, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[0, 1, 2, 4, 8, 3, 5, 6, 9, 10, 12, 7, 11, 13, 14, 15, 3456, 1234, 2345, 4321, 5432, 6789, 9876, 5678, 8765, 4567, 6543, 7890, 7654]"
      },
      {
        "input": "arr = [10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989]",
        "output": "[9992, 10000, 9989, 9990, 9993, 9994, 9996, 9991, 9995, 9997, 9998, 9999]"
      },
      {
        "input": "arr = [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]",
        "output": "[17, 18, 20, 24, 19, 21, 22, 25, 26, 28, 23, 27, 29, 30, 31]"
      },
      {
        "input": "arr = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0]",
        "output": "[0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023]"
      },
      {
        "input": "arr = [777, 888, 999, 1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999]",
        "output": "[777, 3333, 6666, 888, 1111, 2222, 4444, 8888, 7777, 999, 5555, 9999]"
      },
      {
        "input": "arr = [32767, 16383, 8191, 4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0]",
        "output": "[0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767]"
      },
      {
        "input": "arr = [9, 5, 3, 7, 11, 13, 14, 19, 21, 22, 25, 29]",
        "output": "[3, 5, 9, 7, 11, 13, 14, 19, 21, 22, 25, 29]"
      },
      {
        "input": "arr = [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012]",
        "output": "[1008, 1001, 1002, 1004, 1009, 1010, 1012, 1003, 1005, 1006, 1011, 1007]"
      },
      {
        "input": "arr = [9, 5, 6, 7, 8, 4, 2, 3, 1, 0]",
        "output": "[0, 1, 2, 4, 8, 3, 5, 6, 9, 7]"
      },
      {
        "input": "arr = [1431655765, 1431655764, 1431655763, 1431655762, 1431655761, 1431655760, 1431655759, 1431655758, 1431655757, 1431655756, 1431655755, 1431655754, 1431655753, 1431655752, 1431655751, 1431655750, 1431655749]",
        "output": "[1431655752, 1431655760, 1431655749, 1431655750, 1431655753, 1431655754, 1431655756, 1431655761, 1431655762, 1431655764, 1431655751, 1431655755, 1431655757, 1431655758, 1431655763, 1431655765, 1431655759]"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200]",
        "output": "[100, 200, 400, 800, 300, 600, 900, 1100, 1200, 500, 700, 1000]"
      },
      {
        "input": "arr = [13, 7, 14, 28, 35, 42, 56, 70, 84, 98]",
        "output": "[7, 13, 14, 28, 35, 42, 56, 70, 84, 98]"
      },
      {
        "input": "arr = [9, 5, 3, 7, 2, 8, 6, 4, 1, 0, 11, 13, 14, 10, 12]",
        "output": "[0, 1, 2, 4, 8, 3, 5, 6, 9, 10, 12, 7, 11, 13, 14]"
      },
      {
        "input": "arr = [8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]",
        "output": "[0, 1, 1, 2, 2, 4, 4, 8, 8, 16, 16, 32, 32, 64, 64, 128, 128, 256, 256, 512, 512, 1024, 1024, 2048, 2048, 4096, 4096, 8192, 8192]"
      },
      {
        "input": "arr = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
        "output": "[0, 1, 1, 2, 2, 4, 4, 8, 8, 16, 16, 32, 32, 64, 64, 128, 128, 256, 256, 512, 512, 1024, 1024]"
      },
      {
        "input": "arr = [500, 400, 300, 200, 100, 50, 25, 12, 6, 3, 1, 0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 3, 6, 12, 25, 50, 100, 200, 400, 300, 500]"
      },
      {
        "input": "arr = [2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0, 1023, 511]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 511, 1023]"
      },
      {
        "input": "arr = [1431655765, 2863311530, 1431655764, 715827882, 357913941, 178956970, 89478485, 44739242, 22369621, 11184810, 5592405, 2796202, 1398101, 699050, 349525, 174762, 87381, 43690, 21845, 10922, 5461, 2730, 1365, 682, 341, 170, 85, 42, 21, 10, 5, 2, 1, 0]",
        "output": "[0, 1, 2, 5, 10, 21, 42, 85, 170, 341, 682, 1365, 2730, 5461, 10922, 21845, 43690, 87381, 174762, 349525, 699050, 1398101, 2796202, 5592405, 11184810, 22369621, 44739242, 89478485, 178956970, 357913941, 715827882, 1431655764, 1431655765, 2863311530]"
      },
      {
        "input": "arr = [15, 7, 3, 1, 0, 8, 16, 4]",
        "output": "[0, 1, 4, 8, 16, 3, 7, 15]"
      },
      {
        "input": "arr = [1001, 2002, 3003, 4004, 5005, 6006, 7007, 8008, 9009]",
        "output": "[9009, 1001, 2002, 4004, 5005, 8008, 3003, 6006, 7007]"
      },
      {
        "input": "arr = [1374, 8314, 5296, 7916, 4154, 9666, 8078, 2933, 269, 9218, 4688, 7266, 2650, 9016, 1350, 8202]",
        "output": "[8202, 9218, 269, 4688, 1350, 4154, 5296, 2650, 7266, 8314, 9016, 9666, 1374, 2933, 7916, 8078]"
      },
      {
        "input": "arr = [1234, 4321, 5678, 8765, 2345, 5432, 6789, 9876, 3456, 6543, 7890, 8907]",
        "output": "[3456, 1234, 2345, 4321, 5432, 6789, 9876, 5678, 8765, 8907, 6543, 7890]"
      },
      {
        "input": "arr = [32767, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0]",
        "output": "[0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32767]"
      },
      {
        "input": "arr = [13, 9, 6, 5, 12, 10, 3, 7, 2, 8, 4, 1, 0]",
        "output": "[0, 1, 2, 4, 8, 3, 5, 6, 9, 10, 12, 7, 13]"
      },
      {
        "input": "arr = [31, 15, 7, 3, 1, 0, 2, 4, 8, 16]",
        "output": "[0, 1, 2, 4, 8, 16, 3, 7, 15, 31]"
      },
      {
        "input": "arr = [1023, 511, 255, 127, 63, 31, 15, 7, 3, 1, 0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023]",
        "output": "[0, 1, 1, 3, 3, 7, 7, 15, 15, 31, 31, 63, 63, 127, 127, 255, 255, 511, 511, 1023, 1023]"
      },
      {
        "input": "arr = [5, 3, 1, 9, 7, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]",
        "output": "[1, 3, 5, 9, 17, 33, 7, 11, 13, 19, 21, 25, 35, 37, 15, 23, 27, 29, 39, 31]"
      }
    ]
  },
  {
    "id": 783,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Search Tree",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.\n\u00a0\nExample 1:\n\n\nInput: root = [4,2,6,1,3]\nOutput: 1\n\nExample 2:\n\n\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [2, 100].\n0 <= Node.val <= 105\n\n\u00a0\nNote: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minDiffInBST(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [4,2,6,1,3]",
        "output": "1"
      },
      {
        "input": "root = [10,5,15,3,7,null,18]",
        "output": "2"
      },
      {
        "input": "root = [2,1,3]",
        "output": "1"
      },
      {
        "input": "root = [1,0,48,null,null,12,49]",
        "output": "1"
      },
      {
        "input": "root = [90,69,null,49,89,null,52]",
        "output": "1"
      },
      {
        "input": "root = [4,2,7,1,3,6,9]",
        "output": "1"
      },
      {
        "input": "root = [4,2,null,1,3]",
        "output": "1"
      },
      {
        "input": "root = [50,25,75,15,35,65,85,10,20,30,40,60,70,80,90]",
        "output": "5"
      },
      {
        "input": "root = [5,3,7,2,4,6,8,1,null,null,null,null,null,null,9]",
        "output": "1"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,18,25,35,42,47,55]",
        "output": "2"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,130,160,180]",
        "output": "5"
      },
      {
        "input": "root = [88,44,132,22,66,110,154,11,33,55,77,88,99,121,143]",
        "output": "-11"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,85,115,140,160,185]",
        "output": "5"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,17,25,35,42,48,55,1,8,14,16,19,23,28,33,37,41,44,46,49,53,52,56,58,59,60]",
        "output": "-57"
      },
      {
        "input": "root = [8,3,10,null,6,null,null,4,7,9,12]",
        "output": "-6"
      },
      {
        "input": "root = [2,1,null,0]",
        "output": "1"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15]",
        "output": "1"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8]",
        "output": "-1"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,12,18,22,28,33,37,1,null,null,null,null,13,null,null,21,27,null,31,36,null,null,null,14,17,null,23,26,32,34,null,null,null,null,null,null,null,null,16]",
        "output": "-13"
      },
      {
        "input": "root = [27,18,35,12,24,30,40,9,15,21,26,28,33,38,45]",
        "output": "1"
      },
      {
        "input": "root = [8,3,13,null,7,10,18,null,null,9,12,15,20]",
        "output": "1"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,90,110,140,160,180]",
        "output": "5"
      },
      {
        "input": "root = [50,25,75,10,40,60,90,5,15,30,45,55,65,85,95]",
        "output": "5"
      },
      {
        "input": "root = [70,30,110,10,50,90,130,5,25,40,60,80,100,120,140]",
        "output": "5"
      },
      {
        "input": "root = [50,25,75,10,40,60,90,null,null,30,45,55,70,null,null,null,null,35,42,52,65,68,72,85,87,95]",
        "output": "-53"
      },
      {
        "input": "root = [60,30,90,15,45,75,105,5,25,35,50,65,85,95,110,3,10,20,32,40,48,55,63,68,72,80,88,92,98,102,108,113,115,118,120]",
        "output": "-110"
      },
      {
        "input": "root = [33,16,50,13,18,45,55,8,14,17,22,40,48,52,60]",
        "output": "1"
      },
      {
        "input": "root = [5,3,10,2,4,null,15,1,null,6,8,13,18]",
        "output": "-3"
      },
      {
        "input": "root = [8,3,10,null,4,9,12,null,null,7]",
        "output": "-1"
      },
      {
        "input": "root = [2,1,3,0,4,2,5,null,null,null,6,null,null,7,8,null,null,9,10]",
        "output": "-5"
      },
      {
        "input": "root = [7,3,15,null,null,9,20]",
        "output": "2"
      },
      {
        "input": "root = [35,18,45,12,23,40,50,8,16,20,25,38,43,48,55,5,11,14,17,19,22,24,27,32,37,42,47,49,54,57,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,41]",
        "output": "-4"
      },
      {
        "input": "root = [1,2,4,3,5,7,9,6,8,10]",
        "output": "-6"
      },
      {
        "input": "root = [27,14,35,10,19,31,42,4,13,17,23,29,34,39,40,1,7,12,16,18,22,25,26,28,32,36,38,41,43,44,45,46,47,48,49,50]",
        "output": "-45"
      },
      {
        "input": "root = [30,10,45,5,20,35,50,1,7,15,25,32,37,47,55,null,8,null,null,null,null,null,22,null,null,null,null,27,40,48,null,null,null,null,null,null,52]",
        "output": "-18"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,7,12,18,23,27,32,37]",
        "output": "2"
      },
      {
        "input": "root = [60,30,90,10,45,75,105,null,null,35,50,70,80,null,null,55,null,null,null,null,95,100,110,null,null,null,null,null,null,null,115]",
        "output": "-25"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,17,25,35,48,null,null,null,9,null,null,18,null,23,33,43,47,null,null,null,27,null,null,37,41,44,null,null,null,46]",
        "output": "-17"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6,null,11,14,null,null,null,16,19]",
        "output": "-13"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,12,18,23,28,32,37]",
        "output": "2"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,null,8,12,22,28,32,40]",
        "output": "-3"
      },
      {
        "input": "root = [25,10,40,5,20,35,50,3,7,15,23,30,38,45,55]",
        "output": "2"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "-10"
      },
      {
        "input": "root = [100000,50000,150000,25000,75000,null,200000]",
        "output": "25000"
      },
      {
        "input": "root = [22,15,30,10,20,25,40,5,12,18,23,27,35,37,45]",
        "output": "-5"
      },
      {
        "input": "root = [10,5,15,null,null,13,18,12,14,16,19]",
        "output": "1"
      },
      {
        "input": "root = [60,30,90,20,40,70,100,10,25,35,45,65,80,95,105,5,15,null,32,null,null,55,75,85,98,103,110,1,null,null,12,null,null,33,null,null,null,null,62,null,null,72,null,null,82,null,null,102,null,108,null,null,107,null,109,111]",
        "output": "-107"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,18,25,35,43,47,55,3,7,11,16,19,23,28,33,38,42,46,49,52,57,60,65,70,2,8,13,17,21,26,31,37,41,44,48,51,54,59,63,67,71,62,66,72,69,73]",
        "output": "-67"
      },
      {
        "input": "root = [10,1,null,null,10]",
        "output": "0"
      },
      {
        "input": "root = [50,25,75,10,35,60,90,5,20,30,40,55,65,80,95]",
        "output": "5"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,40,60,85,110,140,160,185]",
        "output": "10"
      },
      {
        "input": "root = [15,9,21,7,11,19,25,6,8,10,12,18,20,24,26]",
        "output": "1"
      },
      {
        "input": "root = [2,1,3,null,null,2.5]",
        "output": "0.5"
      },
      {
        "input": "root = [5,3,7,1,4,6,8,null,null,2,null,null,null,null,null]",
        "output": "-1"
      },
      {
        "input": "root = [100,99,101,98,102,97,103,96,104,95,105,94,106,93,107,92,108,91,109,90,110,89,111,88,112,87,113,86,114,85,115]",
        "output": "-18"
      },
      {
        "input": "root = [10,5,15,3,7,13,null,1,4,6,8,12,14,11]",
        "output": "-10"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,35,60,85,110,140,160,190]",
        "output": "10"
      },
      {
        "input": "root = [200,100,300,50,150,250,350,25,75,125,175,225,275,325,375]",
        "output": "25"
      },
      {
        "input": "root = [50,25,75,10,35,65,85,5,15,30,40,60,70,80,90,2,8,20,32,45,55,63,68,73,78,82,87,92,3,12,18,28,42,48,53,58,62,67,72,77,81,86,91,93]",
        "output": "-77"
      },
      {
        "input": "root = [5,3,8,1,4,7,9]",
        "output": "1"
      },
      {
        "input": "root = [500,250,750,125,375,625,875,63,188,313,438,563,688,813,938]",
        "output": "62"
      },
      {
        "input": "root = [500,250,750,125,375,625,875,63,188,292,438,563,713,813,938]",
        "output": "37"
      },
      {
        "input": "root = [10,5,20,null,null,15,25,null,null,null,30,null,35]",
        "output": "5"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,7,12,18,22,27,32,40]",
        "output": "2"
      },
      {
        "input": "root = [42,21,63,10,31,52,74,5,15,26,36,47,57,67,83]",
        "output": "4"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,7,12,17,23,27,32,37]",
        "output": "2"
      },
      {
        "input": "root = [1,2,null,null,3,null,null,4,null,null,5,null,null,6,null,null,7,null,null,8,null,null,9,null,null,10]",
        "output": "-2"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,17,25,35,48,3,8,11,14,16,19,22,27,33,43,47,49]",
        "output": "-42"
      },
      {
        "input": "root = [5,3,6,2,4,null,7,1]",
        "output": "1"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37]",
        "output": "2"
      },
      {
        "input": "root = [1, null, 2, null, 3, null, 4, null, 5, null, 6]",
        "output": "1"
      },
      {
        "input": "root = [3,1,4,null,2]",
        "output": "1"
      },
      {
        "input": "root = [5,3,9,2,4,null,10,null,1,null,null,null,null,6,11]",
        "output": "-8"
      },
      {
        "input": "root = [77,50,100,30,60,80,110,20,40,55,65,75,90,105,120]",
        "output": "-2"
      },
      {
        "input": "root = [66,33,99,16,49,82,116,8,24,41,58,69,76,106,129]",
        "output": "-6"
      },
      {
        "input": "root = [10,5,15,2,7,12,20,1,null,null,8,null,null,null,9]",
        "output": "-11"
      },
      {
        "input": "root = [10,5,15,2,7,null,18,null,null,6,8]",
        "output": "1"
      },
      {
        "input": "root = [7,3,15,null,4,10,20,null,null,8,12,18,25,null,null,16,19,22,27,null,null,null,null,null,17,21,23,26,28,null,null,null,null,null,null,14,null,null,null,null,null,6,null,null,null,null,null,null,null,13,null,null,null,null,null,null,null,null,null,9,null,null,null,null,null,null,11]",
        "output": "-8"
      },
      {
        "input": "root = [50,25,75,12,37,62,87,6,18,31,43,56,69,81,93,3,9,15,21,27,34,40,48,52,60,65,72,78,84,90,96]",
        "output": "2"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,130,160,180,5,15,28,40,55,105,120,140,170,190,3,null,8,null,13,null,null,null,null,null,null,null,53,null,null,95,null,null,108,null,null,135,null,null,null,null,null,null,185,null,null,null]",
        "output": "-177"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,22,28,32,38]",
        "output": "2"
      },
      {
        "input": "root = [10,5,15,null,null,12,20,11,13,null,19,18,21,17,22]",
        "output": "-9"
      },
      {
        "input": "root = [12,5,20,3,7,16,24,1,4,6,8,14,18,22,25,null,null,null,null,null,null,null,null,null,null,null,17,19,21,23,26,27]",
        "output": "-10"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "-1"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,17,22,28,32,38]",
        "output": "2"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,80,110,140,160,180]",
        "output": "5"
      },
      {
        "input": "root = [15,9,21,7,12,18,25,5,8,10,14,17,20,23,27]",
        "output": "1"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,30,60,85,115,140,160,185,5,12,20,28,52,70,80,90,105,110,130,135,145,155,165,170,180,190,195,200]",
        "output": "-183"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,null,12,18,22,28,null,null,null,null,11,13,null,17,19,21,23,27,29]",
        "output": "-18"
      },
      {
        "input": "root = [45,20,65,10,30,55,75,5,15,25,35,50,60,70,80]",
        "output": "5"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15,17]",
        "output": "-16"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,17,25,35,47,3,8,13,18,22,33,38,44,46,48,49,51]",
        "output": "-42"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,null,null,13,17,null,28,32,40]",
        "output": "2"
      },
      {
        "input": "root = [8,3,15,1,7,12,20,null,null,null,null,null,null,10,14,16,25,null,null,null,null,null,null,22,23,26,28]",
        "output": "-6"
      }
    ]
  },
  {
    "id": 2037,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array",
      "Counting Sort",
      "Sorting"
    ],
    "problemDescription": "There are n availabe seats and n students standing in a room. You are given an array seats of length n, where seats[i] is the position of the ith seat. You are also given the array students of length n, where students[j] is the position of the jth student.\nYou may perform the following move any number of times:\n\nIncrease or decrease the position of the ith student by 1 (i.e., moving the ith student from position\u00a0x\u00a0to x + 1 or x - 1)\n\nReturn the minimum number of moves required to move each student to a seat such that no two students are in the same seat.\nNote that there may be multiple seats or students in the same position at the beginning.\n\u00a0\nExample 1:\n\nInput: seats = [3,1,5], students = [2,7,4]\nOutput: 4\nExplanation: The students are moved as follows:\n- The first student is moved from position 2 to position 1 using 1 move.\n- The second student is moved from position 7 to position 5 using 2 moves.\n- The third student is moved from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used.\n\nExample 2:\n\nInput: seats = [4,1,5,9], students = [1,3,2,6]\nOutput: 7\nExplanation: The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from position 3 to position 4 using 1 move.\n- The third student is moved from position 2 to position 5 using 3 moves.\n- The fourth student is moved from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used.\n\nExample 3:\n\nInput: seats = [2,2,6,6], students = [1,3,2,6]\nOutput: 4\nExplanation: Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from position 1 to position 2 using 1 move.\n- The second student is moved from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used.\n\n\u00a0\nConstraints:\n\nn == seats.length == students.length\n1 <= n <= 100\n1 <= seats[i], students[j] <= 100\n\n",
    "starterCode": "class Solution:\n    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "seats = [5,5,5,5], students = [5,5,5,5]",
        "output": "0"
      },
      {
        "input": "seats = [10,20,30], students = [5,15,25]",
        "output": "15"
      },
      {
        "input": "seats = [4,1,5,9], students = [1,3,2,6]",
        "output": "7"
      },
      {
        "input": "seats = [1,1,1,1], students = [1,1,1,1]",
        "output": "0"
      },
      {
        "input": "seats = [3,1,5], students = [2,7,4]",
        "output": "4"
      },
      {
        "input": "seats = [1,1,1], students = [1,1,1]",
        "output": "0"
      },
      {
        "input": "seats = [50,50,50], students = [49,50,51]",
        "output": "2"
      },
      {
        "input": "seats = [10,20,30], students = [15,25,35]",
        "output": "15"
      },
      {
        "input": "seats = [10,20,30], students = [1,2,3]",
        "output": "54"
      },
      {
        "input": "seats = [100,1,50], students = [50,100,1]",
        "output": "0"
      },
      {
        "input": "seats = [10,20,30,40,50], students = [5,15,25,35,45]",
        "output": "25"
      },
      {
        "input": "seats = [100,1,50,50], students = [50,1,100,50]",
        "output": "0"
      },
      {
        "input": "seats = [100,1,2,3,4], students = [1,2,3,4,100]",
        "output": "0"
      },
      {
        "input": "seats = [100,90,80,70], students = [70,80,90,100]",
        "output": "0"
      },
      {
        "input": "seats = [50,50,50], students = [50,50,50]",
        "output": "0"
      },
      {
        "input": "seats = [10,1,100], students = [5,10,99]",
        "output": "5"
      },
      {
        "input": "seats = [1,2,3,4,5], students = [5,4,3,2,1]",
        "output": "0"
      },
      {
        "input": "seats = [2,2,6,6], students = [1,3,2,6]",
        "output": "4"
      },
      {
        "input": "seats = [1,3,5,7,9], students = [2,4,6,8,10]",
        "output": "5"
      },
      {
        "input": "seats = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "495"
      },
      {
        "input": "seats = [5, 5, 5, 5, 5, 5], students = [1, 2, 3, 4, 5, 6]",
        "output": "11"
      },
      {
        "input": "seats = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "495"
      },
      {
        "input": "seats = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], students = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]",
        "output": "95"
      },
      {
        "input": "seats = [20, 30, 40, 50, 60, 70, 80], students = [15, 25, 35, 45, 55, 65, 75]",
        "output": "35"
      },
      {
        "input": "seats = [50, 50, 50, 50, 50, 50], students = [45, 45, 45, 55, 55, 55]",
        "output": "30"
      },
      {
        "input": "seats = [3, 3, 8, 8, 10, 10, 13, 13], students = [2, 3, 6, 8, 9, 10, 12, 15]",
        "output": "7"
      },
      {
        "input": "seats = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], students = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]",
        "output": "0"
      },
      {
        "input": "seats = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], students = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28]",
        "output": "20"
      },
      {
        "input": "seats = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], students = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "seats = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], students = [10, 1, 9, 2, 8, 3, 7, 4, 6, 5]",
        "output": "0"
      },
      {
        "input": "seats = [1, 100, 1, 100, 1, 100], students = [50, 50, 50, 50, 50, 50]",
        "output": "297"
      },
      {
        "input": "seats = [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25], students = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "300"
      },
      {
        "input": "seats = [90, 80, 70, 60, 50, 40, 30], students = [10, 20, 30, 40, 50, 60, 70]",
        "output": "140"
      },
      {
        "input": "seats = [1, 100, 1, 100, 1, 100, 1, 100, 1, 100], students = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "495"
      },
      {
        "input": "seats = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50], students = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "250"
      },
      {
        "input": "seats = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], students = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "30"
      },
      {
        "input": "seats = [99, 100, 1, 2, 3, 4], students = [5, 6, 7, 8, 9, 1]",
        "output": "191"
      },
      {
        "input": "seats = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], students = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "seats = [30, 10, 20, 40, 50, 60], students = [5, 15, 25, 35, 45, 55]",
        "output": "30"
      },
      {
        "input": "seats = [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "980"
      },
      {
        "input": "seats = [1, 5, 9, 13, 17, 21, 25, 29], students = [2, 6, 10, 14, 18, 22, 26, 30]",
        "output": "8"
      },
      {
        "input": "seats = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], students = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "9"
      },
      {
        "input": "seats = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], students = [99, 97, 95, 93, 91, 89, 87, 85, 83, 81, 79, 77, 75, 73, 71, 69, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 41, 39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1]",
        "output": "0"
      },
      {
        "input": "seats = [5, 5, 5, 5, 5], students = [1, 2, 3, 4, 5]",
        "output": "10"
      },
      {
        "input": "seats = [2, 2, 2, 3, 3, 3, 5, 5, 5, 6, 6, 6], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "32"
      },
      {
        "input": "seats = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41], students = [41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "0"
      },
      {
        "input": "seats = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], students = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5]",
        "output": "50"
      },
      {
        "input": "seats = [8, 12, 20, 25, 30, 35], students = [5, 10, 15, 22, 31, 36]",
        "output": "15"
      },
      {
        "input": "seats = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], students = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]",
        "output": "90"
      },
      {
        "input": "seats = [1, 100, 2, 99, 3, 98, 4, 97, 5, 96], students = [50, 51, 52, 53, 54, 55, 56, 57, 58, 59]",
        "output": "450"
      },
      {
        "input": "seats = [5, 3, 8, 9, 2, 10], students = [4, 6, 7, 1, 11, 15]",
        "output": "11"
      },
      {
        "input": "seats = [5, 20, 35, 50, 65, 80, 95, 110, 125, 140], students = [10, 25, 40, 55, 70, 85, 100, 115, 130, 145]",
        "output": "50"
      },
      {
        "input": "seats = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30], students = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29]",
        "output": "10"
      },
      {
        "input": "seats = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], students = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "45"
      },
      {
        "input": "seats = [50, 50, 50, 50, 50], students = [49, 50, 51, 52, 53]",
        "output": "7"
      },
      {
        "input": "seats = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "130"
      },
      {
        "input": "seats = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], students = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195]",
        "output": "100"
      },
      {
        "input": "seats = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95], students = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]",
        "output": "40"
      },
      {
        "input": "seats = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], students = [100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "0"
      },
      {
        "input": "seats = [2, 3, 5, 6, 8, 11, 13], students = [1, 4, 7, 9, 10, 12, 15]",
        "output": "12"
      },
      {
        "input": "seats = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], students = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "seats = [10, 25, 40, 55, 70, 85, 100, 115, 130, 145], students = [5, 20, 35, 50, 65, 80, 95, 110, 125, 140]",
        "output": "50"
      },
      {
        "input": "seats = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], students = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "540"
      },
      {
        "input": "seats = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], students = [1, 7, 13, 19, 24, 29, 34, 38, 44, 49]",
        "output": "17"
      },
      {
        "input": "seats = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6], students = [6, 5, 5, 4, 4, 3, 3, 2, 2, 1]",
        "output": "0"
      },
      {
        "input": "seats = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], students = [5, 5, 4, 4, 3, 3, 2, 2, 1, 1]",
        "output": "0"
      },
      {
        "input": "seats = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "25"
      },
      {
        "input": "seats = [1, 3, 6, 8, 10, 15], students = [2, 4, 5, 7, 9, 16]",
        "output": "6"
      },
      {
        "input": "seats = [50, 40, 30, 20, 10, 100, 90, 80, 70, 60], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "495"
      },
      {
        "input": "seats = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], students = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "10"
      },
      {
        "input": "seats = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], students = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]",
        "output": "90"
      },
      {
        "input": "seats = [3, 8, 15, 22, 29], students = [1, 6, 13, 21, 28]",
        "output": "8"
      },
      {
        "input": "seats = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], students = [95, 85, 75, 65, 55, 45, 35, 25, 15, 5, 105, 115, 125, 135, 145]",
        "output": "75"
      },
      {
        "input": "seats = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39], students = [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]",
        "output": "20"
      },
      {
        "input": "seats = [1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "42"
      },
      {
        "input": "seats = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60], students = [3, 7, 12, 17, 22, 27, 32, 37, 42, 47, 52, 57]",
        "output": "35"
      },
      {
        "input": "seats = [1, 4, 6, 9, 12, 15], students = [3, 5, 7, 10, 13, 16]",
        "output": "7"
      },
      {
        "input": "seats = [10, 10, 20, 20, 30, 30, 40, 40, 50, 50], students = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "210"
      },
      {
        "input": "seats = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], students = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "seats = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50], students = [45, 46, 47, 48, 49, 51, 52, 53, 54, 55]",
        "output": "30"
      },
      {
        "input": "seats = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "100"
      },
      {
        "input": "seats = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "31"
      },
      {
        "input": "seats = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], students = [150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]",
        "output": "0"
      },
      {
        "input": "seats = [2, 3, 5, 7, 11, 13, 17, 19], students = [1, 4, 6, 8, 10, 12, 14, 16]",
        "output": "12"
      },
      {
        "input": "seats = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], students = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]",
        "output": "15"
      },
      {
        "input": "seats = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], students = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "10"
      },
      {
        "input": "seats = [1, 3, 6, 8, 10, 15], students = [2, 4, 7, 9, 11, 16]",
        "output": "6"
      },
      {
        "input": "seats = [1, 2, 2, 3, 4, 4, 5, 5, 6, 6], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "17"
      },
      {
        "input": "seats = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], students = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99]",
        "output": "10"
      },
      {
        "input": "seats = [95, 96, 97, 98, 99, 100], students = [1, 2, 3, 4, 5, 6]",
        "output": "564"
      },
      {
        "input": "seats = [5, 15, 25, 35, 45, 55], students = [1, 7, 17, 27, 37, 47]",
        "output": "44"
      },
      {
        "input": "seats = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], students = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "540"
      },
      {
        "input": "seats = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90], students = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "890"
      },
      {
        "input": "seats = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], students = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]",
        "output": "0"
      },
      {
        "input": "seats = [5, 6, 8, 10, 15, 17, 20, 25, 30, 35], students = [4, 5, 7, 10, 12, 16, 18, 22, 28, 34]",
        "output": "15"
      },
      {
        "input": "seats = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], students = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95]",
        "output": "50"
      },
      {
        "input": "seats = [2, 2, 4, 4, 6, 6, 8, 8, 10, 10], students = [1, 3, 3, 5, 5, 7, 7, 9, 9, 11]",
        "output": "10"
      },
      {
        "input": "seats = [20, 20, 20, 20, 20], students = [19, 20, 21, 22, 23]",
        "output": "7"
      },
      {
        "input": "seats = [95, 55, 10, 30, 70], students = [5, 90, 60, 40, 80]",
        "output": "35"
      },
      {
        "input": "seats = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], students = [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24]",
        "output": "800"
      },
      {
        "input": "seats = [1, 2, 2, 3, 4, 4, 5, 5, 6, 6], students = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6]",
        "output": "3"
      }
    ]
  },
  {
    "id": 1539,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "problemDescription": "Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.\nReturn the kth positive integer that is missing from this array.\n\u00a0\nExample 1:\n\nInput: arr = [2,3,4,7,11], k = 5\nOutput: 9\nExplanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th\u00a0missing positive integer is 9.\n\nExample 2:\n\nInput: arr = [1,2,3,4], k = 2\nOutput: 6\nExplanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 1000\n1 <= arr[i] <= 1000\n1 <= k <= 1000\narr[i] < arr[j] for 1 <= i < j <= arr.length\n\n\u00a0\nFollow up:\nCould you solve this problem in less than O(n) complexity?\n",
    "starterCode": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10], k = 10",
        "output": "20"
      },
      {
        "input": "arr = [10,20,30], k = 15",
        "output": "16"
      },
      {
        "input": "arr = [2,3,4,7,11], k = 5",
        "output": "9"
      },
      {
        "input": "arr = [5,6,7,8,9], k = 1",
        "output": "1"
      },
      {
        "input": "arr = [5,6,8,9,10], k = 3",
        "output": "3"
      },
      {
        "input": "arr = [1,3,5,7], k = 3",
        "output": "6"
      },
      {
        "input": "arr = [1,3,5,7,9], k = 4",
        "output": "8"
      },
      {
        "input": "arr = [10,20,30], k = 5",
        "output": "5"
      },
      {
        "input": "arr = [1,2,3,4,8,10,11], k = 5",
        "output": "12"
      },
      {
        "input": "arr = [1,2,3,4], k = 2",
        "output": "6"
      },
      {
        "input": "arr = [10,20,30,40], k = 15",
        "output": "16"
      },
      {
        "input": "arr = [1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58], k = 60",
        "output": "80"
      },
      {
        "input": "arr = [2,5,9,11,15,18,22,25], k = 15",
        "output": "21"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 100",
        "output": "120"
      },
      {
        "input": "arr = [1,2,4,8,16,32,64,128,256,512], k = 500",
        "output": "509"
      },
      {
        "input": "arr = [5,6,8,9,11,14,17,18,21], k = 10",
        "output": "16"
      },
      {
        "input": "arr = [5,10,15,20,25], k = 15",
        "output": "18"
      },
      {
        "input": "arr = [5,10,15,20,25,30,35,40,45,50], k = 20",
        "output": "24"
      },
      {
        "input": "arr = [7,14,21,28,35,42,49,56,63,70,77,84,91,98], k = 25",
        "output": "29"
      },
      {
        "input": "arr = [1, 3, 7, 15, 31, 63, 127], k = 200",
        "output": "207"
      },
      {
        "input": "arr = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97], k = 120",
        "output": "145"
      },
      {
        "input": "arr = [3,7,11,15,19,23,27,31,35,39,43,47,51,55,59], k = 30",
        "output": "40"
      },
      {
        "input": "arr = [2,5,10,17,26,37,49,62,76,91,107,124,142,161,181], k = 25",
        "output": "30"
      },
      {
        "input": "arr = [1,4,6,8,11,13,15,17,19,22,24,26,28,30,32], k = 20",
        "output": "35"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], k = 30",
        "output": "55"
      },
      {
        "input": "arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1000], k = 1000",
        "output": "1011"
      },
      {
        "input": "arr = [2,4,6,8,10,12,14,16,18,20], k = 15",
        "output": "25"
      },
      {
        "input": "arr = [1,4,8,13,18,23,28,33,38], k = 20",
        "output": "26"
      },
      {
        "input": "arr = [1, 4, 6, 9, 11, 15, 17, 20, 23], k = 10",
        "output": "16"
      },
      {
        "input": "arr = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], k = 200",
        "output": "221"
      },
      {
        "input": "arr = [1, 4, 6, 8, 10, 12, 14, 16, 18, 20], k = 25",
        "output": "35"
      },
      {
        "input": "arr = [5,10,15,20,25], k = 10",
        "output": "12"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], k = 100",
        "output": "110"
      },
      {
        "input": "arr = [2,5,10,15,20,25,30,35,40,45], k = 15",
        "output": "19"
      },
      {
        "input": "arr = [1,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], k = 75",
        "output": "94"
      },
      {
        "input": "arr = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], k = 150",
        "output": "164"
      },
      {
        "input": "arr = [1,2,5,8,10,13,16,19,22,25], k = 18",
        "output": "28"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 50",
        "output": "60"
      },
      {
        "input": "arr = [2, 6, 10, 14, 18, 22, 26], k = 15",
        "output": "20"
      },
      {
        "input": "arr = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100], k = 75",
        "output": "84"
      },
      {
        "input": "arr = [3,6,9,12,15,18,21,24,27,30], k = 30",
        "output": "40"
      },
      {
        "input": "arr = [7,14,21,28,35,42,49,56,63,70], k = 30",
        "output": "34"
      },
      {
        "input": "arr = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120], k = 150",
        "output": "165"
      },
      {
        "input": "arr = [1,10,20,30,40,50,60,70,80,90], k = 25",
        "output": "28"
      },
      {
        "input": "arr = [1,2,4,5,7,8,10,11,13,14], k = 25",
        "output": "35"
      },
      {
        "input": "arr = [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71], k = 50",
        "output": "63"
      },
      {
        "input": "arr = [1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100], k = 100",
        "output": "134"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], k = 25",
        "output": "45"
      },
      {
        "input": "arr = [11,22,33,44,55,66,77,88,99,110], k = 50",
        "output": "54"
      },
      {
        "input": "arr = [1,5,9,13,17,21,25,29,33,37,41,45,49,53,57], k = 30",
        "output": "40"
      },
      {
        "input": "arr = [1,2,3,5,8,13,21,34,55,89], k = 100",
        "output": "110"
      },
      {
        "input": "arr = [25, 50, 75, 100, 125, 150, 175, 200], k = 50",
        "output": "52"
      },
      {
        "input": "arr = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45], k = 75",
        "output": "90"
      },
      {
        "input": "arr = [2,4,6,8,10,12,14,16,18,20], k = 10",
        "output": "19"
      },
      {
        "input": "arr = [3,6,9,12,15,18,21,24,27,30], k = 7",
        "output": "10"
      },
      {
        "input": "arr = [3, 7, 11, 15, 19, 23, 27, 31, 35], k = 20",
        "output": "26"
      },
      {
        "input": "arr = [3,8,12,15,19,23,27,31,35,39,43,47,51,55,59,63,67,71,75,79], k = 50",
        "output": "66"
      },
      {
        "input": "arr = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140], k = 30",
        "output": "34"
      },
      {
        "input": "arr = [1,4,9,16,25,36,49,64,81,100], k = 50",
        "output": "57"
      },
      {
        "input": "arr = [2,5,9,12,15,18,21,24,27,30], k = 20",
        "output": "29"
      },
      {
        "input": "arr = [7,14,21,28,35,42,49,56,63,70,77,84,91,98,105,112,119,126,133,140], k = 50",
        "output": "58"
      },
      {
        "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 10",
        "output": "30"
      },
      {
        "input": "arr = [3,9,15,21,27,33,39,45,51,57,63,69,75,81,87,93,99], k = 40",
        "output": "48"
      },
      {
        "input": "arr = [1,2,3,5,6,7,9,10,12,13,15,16,18,19,21], k = 30",
        "output": "45"
      },
      {
        "input": "arr = [2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], k = 100",
        "output": "109"
      },
      {
        "input": "arr = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], k = 10",
        "output": "19"
      },
      {
        "input": "arr = [1,2,4,6,8,10,12,14,16,18,20], k = 15",
        "output": "26"
      },
      {
        "input": "arr = [1,2,3,5,6,7,8,10,11,12,14,15,16,18,19,20], k = 15",
        "output": "31"
      },
      {
        "input": "arr = [1,5,10,15,20,25,30,35,40,45], k = 30",
        "output": "38"
      },
      {
        "input": "arr = [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45], k = 7",
        "output": "10"
      },
      {
        "input": "arr = [100,200,300,400,500,600,700,800,900,1000], k = 450",
        "output": "454"
      },
      {
        "input": "arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], k = 500",
        "output": "550"
      },
      {
        "input": "arr = [5,10,15,20,25,30], k = 12",
        "output": "14"
      },
      {
        "input": "arr = [2,5,7,11,14,17,20,23,26,29], k = 40",
        "output": "50"
      },
      {
        "input": "arr = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], k = 150",
        "output": "171"
      },
      {
        "input": "arr = [1,2,3,5,6,8,9,11,12,14,15,17,18,20], k = 50",
        "output": "64"
      },
      {
        "input": "arr = [4, 9, 14, 19, 24, 29, 34, 39, 44, 49], k = 25",
        "output": "31"
      },
      {
        "input": "arr = [1,2,3,5,8,13,21,34,55], k = 10",
        "output": "16"
      },
      {
        "input": "arr = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99], k = 100",
        "output": "150"
      },
      {
        "input": "arr = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 500",
        "output": "505"
      },
      {
        "input": "arr = [2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], k = 50",
        "output": "58"
      },
      {
        "input": "arr = [1,4,7,10,13,16,19,22,25], k = 25",
        "output": "34"
      },
      {
        "input": "arr = [11,22,33,44,55,66,77,88,99,110,121,132,143,154,165,176,187,198,209,220], k = 75",
        "output": "82"
      },
      {
        "input": "arr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50], k = 15",
        "output": "18"
      },
      {
        "input": "arr = [2, 5, 8, 11, 15], k = 10",
        "output": "14"
      },
      {
        "input": "arr = [15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,255], k = 60",
        "output": "64"
      },
      {
        "input": "arr = [1,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], k = 30",
        "output": "51"
      },
      {
        "input": "arr = [300, 600, 900], k = 1000",
        "output": "1003"
      },
      {
        "input": "arr = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], k = 1000",
        "output": "1015"
      },
      {
        "input": "arr = [7,14,21,28,35,42,49,56,63,70], k = 100",
        "output": "110"
      },
      {
        "input": "arr = [1, 2, 3, 5, 6, 9, 11, 12, 15], k = 15",
        "output": "24"
      },
      {
        "input": "arr = [11,22,33,44,55,66,77,88,99,110,121,132,143,154,165], k = 40",
        "output": "43"
      },
      {
        "input": "arr = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500], k = 100",
        "output": "102"
      },
      {
        "input": "arr = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97], k = 150",
        "output": "175"
      },
      {
        "input": "arr = [7,14,21,28,35,42,49,56,63,70], k = 50",
        "output": "58"
      },
      {
        "input": "arr = [2,3,5,8,12,17,23,30,38,47], k = 35",
        "output": "44"
      },
      {
        "input": "arr = [5,6,8,10,13,14], k = 7",
        "output": "11"
      },
      {
        "input": "arr = [3,6,9,12,15,18,21,24,27,30], k = 25",
        "output": "35"
      },
      {
        "input": "arr = [3,6,9,12,15,18,21,24,27,30,33,36,39,42], k = 20",
        "output": "29"
      },
      {
        "input": "arr = [100,200,300,400,500,600,700,800,900,1000], k = 500",
        "output": "505"
      },
      {
        "input": "arr = [5, 8, 12, 14, 20, 25], k = 8",
        "output": "10"
      },
      {
        "input": "arr = [5,6,8,10,12,14,16,18,20], k = 10",
        "output": "17"
      },
      {
        "input": "arr = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], k = 20",
        "output": "35"
      },
      {
        "input": "arr = [1,2,4,7,11,15,19,24,29,35], k = 20",
        "output": "28"
      },
      {
        "input": "arr = [11,14,17,20,23,26,29,32,35,38,41,44,47,50], k = 27",
        "output": "36"
      },
      {
        "input": "arr = [1,3,6,10,15,21,28,36,45,55], k = 25",
        "output": "32"
      },
      {
        "input": "arr = [1,2,5,6,9,10,13,14,17,18,21,22,25,26], k = 50",
        "output": "64"
      },
      {
        "input": "arr = [2,12,22,32,42,52,62,72,82,92,102,112,122,132,142,152,162,172,182,192,202,212,222,232,242,252,262,272,282,292,302], k = 150",
        "output": "167"
      },
      {
        "input": "arr = [7,14,21,28,35,42,49,56,63,70,77,84,91,98,105], k = 13",
        "output": "15"
      }
    ]
  },
  {
    "id": 2558,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Simulation",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given an integer array gifts denoting the number of gifts in various piles. Every second, you do the following:\n\nChoose the pile with the maximum number of gifts.\nIf there is more than one pile with the maximum number of gifts, choose any.\nReduce the number of gifts in the pile to the floor of the square root of the original number of gifts in the pile.\n\nReturn the number of gifts remaining after k seconds.\n\u00a0\nExample 1:\n\nInput: gifts = [25,64,9,4,100], k = 4\nOutput: 29\nExplanation: \nThe gifts are taken in the following way:\n- In the first second, the last pile is chosen and 10 gifts are left behind.\n- Then the second pile is chosen and 8 gifts are left behind.\n- After that the first pile is chosen and 5 gifts are left behind.\n- Finally, the last pile is chosen again and 3 gifts are left behind.\nThe final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29.\n\nExample 2:\n\nInput: gifts = [1,1,1,1], k = 4\nOutput: 4\nExplanation: \nIn this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. \nThat is, you can't take any pile with you. \nSo, the total gifts remaining are 4.\n\n\u00a0\nConstraints:\n\n1 <= gifts.length <= 103\n1 <= gifts[i] <= 109\n1 <= k <= 103\n\n",
    "starterCode": "class Solution:\n    def pickGifts(self, gifts: List[int], k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "gifts = [25,64,9,4,100], k = 4",
        "output": "29"
      },
      {
        "input": "gifts = [16,81,49], k = 3",
        "output": "20"
      },
      {
        "input": "gifts = [1,1,1,1], k = 4",
        "output": "4"
      },
      {
        "input": "gifts = [49,36,25,16,9], k = 5",
        "output": "25"
      },
      {
        "input": "gifts = [1000000000], k = 1000",
        "output": "1"
      },
      {
        "input": "gifts = [16,81,4,25,9], k = 3",
        "output": "31"
      },
      {
        "input": "gifts = [36,27,18,12,9], k = 5",
        "output": "21"
      },
      {
        "input": "gifts = [1000000000], k = 10",
        "output": "1"
      },
      {
        "input": "gifts = [36,49,64,81], k = 2",
        "output": "102"
      },
      {
        "input": "gifts = [16,25,36,49,64,81,100], k = 3",
        "output": "153"
      },
      {
        "input": "gifts = [1000000000], k = 1",
        "output": "31622"
      },
      {
        "input": "gifts = [16,81,25,9], k = 3",
        "output": "27"
      },
      {
        "input": "gifts = [2,3,5,7,11,13,17,19,23,29], k = 10",
        "output": "27"
      },
      {
        "input": "gifts = [1000000000, 999999999, 888888888, 777777777, 666666666], k = 100",
        "output": "5"
      },
      {
        "input": "gifts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], k = 25",
        "output": "20"
      },
      {
        "input": "gifts = [987654321, 876543219, 765432198, 654321987, 543219876], k = 7",
        "output": "76901"
      },
      {
        "input": "gifts = [100000000, 99999999, 99999998, 99999997, 99999996, 99999995, 99999994, 99999993, 99999992, 99999991, 99999990, 99999989, 99999988, 99999987, 99999986, 99999985, 99999984, 99999983, 99999982, 99999981], k = 1000",
        "output": "20"
      },
      {
        "input": "gifts = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 30",
        "output": "11"
      },
      {
        "input": "gifts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], k = 60",
        "output": "15"
      },
      {
        "input": "gifts = [987654321, 98765432, 9876543, 987654, 98765], k = 15",
        "output": "38"
      },
      {
        "input": "gifts = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000], k = 100",
        "output": "10"
      },
      {
        "input": "gifts = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 15",
        "output": "30"
      },
      {
        "input": "gifts = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 1024, 512, 256, 128, 64], k = 50",
        "output": "16"
      },
      {
        "input": "gifts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 75",
        "output": "20"
      },
      {
        "input": "gifts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 1000",
        "output": "20"
      },
      {
        "input": "gifts = [123456789, 987654321, 135792468, 246813579, 111213141], k = 20",
        "output": "15"
      },
      {
        "input": "gifts = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], k = 500",
        "output": "20"
      },
      {
        "input": "gifts = [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42], k = 1000",
        "output": "15"
      },
      {
        "input": "gifts = [987654321, 987654321, 987654321, 987654321, 987654321], k = 100",
        "output": "5"
      },
      {
        "input": "gifts = [1000000000, 100000000, 10000000, 1000000, 100000], k = 10",
        "output": "381"
      },
      {
        "input": "gifts = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], k = 10",
        "output": "24"
      },
      {
        "input": "gifts = [123456789, 987654321, 111111111, 222222222, 333333333, 444444444, 555555555, 666666666, 777777777, 888888888], k = 100",
        "output": "10"
      },
      {
        "input": "gifts = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71], k = 10",
        "output": "195"
      },
      {
        "input": "gifts = [1000000, 100000, 10000, 1000, 100, 10, 1], k = 1000",
        "output": "7"
      },
      {
        "input": "gifts = [81, 81, 81, 81, 81, 81, 81, 81, 81, 81], k = 20",
        "output": "30"
      },
      {
        "input": "gifts = [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42], k = 50",
        "output": "50"
      },
      {
        "input": "gifts = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 25",
        "output": "125"
      },
      {
        "input": "gifts = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 10",
        "output": "56"
      },
      {
        "input": "gifts = [1000000000, 999999999, 999999998, 999999997, 999999996], k = 1000",
        "output": "5"
      },
      {
        "input": "gifts = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], k = 100",
        "output": "10"
      },
      {
        "input": "gifts = [1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000], k = 1000",
        "output": "10"
      },
      {
        "input": "gifts = [1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144], k = 100",
        "output": "9"
      },
      {
        "input": "gifts = [1000000, 900000, 800000, 700000, 600000, 500000, 400000, 300000, 200000, 100000], k = 100",
        "output": "10"
      },
      {
        "input": "gifts = [16, 81, 4, 25, 9, 36, 64, 49, 100], k = 15",
        "output": "23"
      },
      {
        "input": "gifts = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 50",
        "output": "10"
      },
      {
        "input": "gifts = [123456, 654321, 111111, 222222, 333333], k = 50",
        "output": "5"
      },
      {
        "input": "gifts = [987654321, 876543219, 765432108, 654321097, 543210986, 432109875, 321098764, 210987653, 109876542], k = 500",
        "output": "9"
      },
      {
        "input": "gifts = [123456789, 987654321, 456789123, 321987654, 654321987], k = 15",
        "output": "58"
      },
      {
        "input": "gifts = [1000000, 990000, 980000, 970000, 960000, 950000], k = 100",
        "output": "6"
      },
      {
        "input": "gifts = [1000000, 900000, 800000, 700000, 600000, 500000, 400000, 300000, 200000, 100000], k = 500",
        "output": "10"
      },
      {
        "input": "gifts = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225], k = 75",
        "output": "15"
      },
      {
        "input": "gifts = [1000000, 999999, 999998, 999997, 999996, 999995, 999994, 999993, 999992, 999991], k = 500",
        "output": "10"
      },
      {
        "input": "gifts = [16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324], k = 100",
        "output": "15"
      },
      {
        "input": "gifts = [1000000000, 100000000, 10000000, 1000000, 100000, 10000, 1000, 100, 10], k = 10",
        "output": "1890"
      },
      {
        "input": "gifts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], k = 100",
        "output": "20"
      },
      {
        "input": "gifts = [987654321, 876543219, 765432197, 654321975, 543219753, 432197531, 321975319, 219753197, 197531975, 975319753], k = 1000",
        "output": "10"
      },
      {
        "input": "gifts = [100000, 100000, 100000, 100000, 100000], k = 250",
        "output": "5"
      },
      {
        "input": "gifts = [100000000, 10000000, 1000000, 100000, 10000, 1000, 100, 10, 1], k = 100",
        "output": "9"
      },
      {
        "input": "gifts = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71], k = 20",
        "output": "84"
      },
      {
        "input": "gifts = [999999999, 888888888, 777777777, 666666666, 555555555, 444444444, 333333333, 222222222, 111111111], k = 30",
        "output": "77"
      },
      {
        "input": "gifts = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], k = 100",
        "output": "25"
      },
      {
        "input": "gifts = [981, 961, 941, 921, 901, 881, 861, 841, 821, 801, 781, 761, 741, 721, 701], k = 15",
        "output": "428"
      },
      {
        "input": "gifts = [16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529], k = 20",
        "output": "263"
      },
      {
        "input": "gifts = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], k = 50",
        "output": "34"
      },
      {
        "input": "gifts = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625], k = 25",
        "output": "268"
      },
      {
        "input": "gifts = [1000000000, 1, 2, 3, 4, 5, 6, 7, 8, 9], k = 20",
        "output": "10"
      },
      {
        "input": "gifts = [314159265, 271828182, 161803398, 141421356, 111111111, 618033988, 333333333], k = 100",
        "output": "7"
      },
      {
        "input": "gifts = [3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61], k = 30",
        "output": "29"
      },
      {
        "input": "gifts = [999999999, 1, 999999999, 1, 999999999, 1, 999999999, 1, 999999999, 1], k = 10",
        "output": "890"
      },
      {
        "input": "gifts = [999999999], k = 1000",
        "output": "1"
      },
      {
        "input": "gifts = [9, 8, 7, 6, 5, 4, 3, 2, 1], k = 100",
        "output": "9"
      },
      {
        "input": "gifts = [1000000, 1000000, 1000000, 1000000, 1000000], k = 50",
        "output": "5"
      },
      {
        "input": "gifts = [987654321, 98765432, 9876543, 987654, 98765, 9876, 987, 98, 9, 8, 7, 6, 5, 4, 3, 2, 1], k = 20",
        "output": "106"
      },
      {
        "input": "gifts = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47], k = 20",
        "output": "37"
      },
      {
        "input": "gifts = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], k = 50",
        "output": "15"
      },
      {
        "input": "gifts = [16, 144, 121, 100, 81, 64, 49, 36, 25, 16], k = 15",
        "output": "40"
      },
      {
        "input": "gifts = [81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], k = 10",
        "output": "30"
      },
      {
        "input": "gifts = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], k = 100",
        "output": "10"
      },
      {
        "input": "gifts = [1000000000, 999999999, 888888888, 777777777, 666666666], k = 10",
        "output": "852"
      },
      {
        "input": "gifts = [361, 441, 529, 625, 729, 841, 961], k = 20",
        "output": "16"
      },
      {
        "input": "gifts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k = 20",
        "output": "51"
      },
      {
        "input": "gifts = [441, 361, 289, 225, 169, 121, 81, 49, 25, 9, 1], k = 7",
        "output": "189"
      },
      {
        "input": "gifts = [361, 441, 529, 625, 729, 841, 961, 1089, 1225, 1369, 1521, 1681, 1849, 2025, 2209], k = 15",
        "output": "495"
      },
      {
        "input": "gifts = [65536, 4096, 256, 16, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], k = 500",
        "output": "20"
      },
      {
        "input": "gifts = [123456789, 987654321, 135792468, 246813579, 864204680], k = 50",
        "output": "5"
      },
      {
        "input": "gifts = [1000000000, 999999999, 888888888, 777777777, 666666666], k = 1000",
        "output": "5"
      },
      {
        "input": "gifts = [1000, 500, 250, 125, 62, 31, 15, 7, 3, 1], k = 100",
        "output": "10"
      },
      {
        "input": "gifts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 25",
        "output": "10"
      },
      {
        "input": "gifts = [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42], k = 200",
        "output": "20"
      },
      {
        "input": "gifts = [121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484], k = 30",
        "output": "31"
      },
      {
        "input": "gifts = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], k = 500",
        "output": "10"
      },
      {
        "input": "gifts = [1000000000, 500000000, 250000000, 125000000, 62500000], k = 10",
        "output": "644"
      },
      {
        "input": "gifts = [987654321, 876543210, 765432109, 654321098, 543210987, 432109876, 321098765, 210987654, 109876543, 98765432], k = 50",
        "output": "10"
      },
      {
        "input": "gifts = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025], k = 500",
        "output": "25"
      },
      {
        "input": "gifts = [169, 441, 961, 1681, 2809, 4489, 6889, 10201, 14641], k = 75",
        "output": "9"
      },
      {
        "input": "gifts = [64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024], k = 30",
        "output": "375"
      },
      {
        "input": "gifts = [1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000], k = 5",
        "output": "5005000"
      },
      {
        "input": "gifts = [46656, 1296, 324, 81, 25, 9, 4, 1], k = 15",
        "output": "18"
      },
      {
        "input": "gifts = [1000000000, 999999999, 999999998, 999999997], k = 1000",
        "output": "4"
      },
      {
        "input": "gifts = [3125, 5625, 144, 2025, 441, 900], k = 25",
        "output": "6"
      },
      {
        "input": "gifts = [999999999, 1, 999999999, 1, 999999999, 1, 999999999, 1, 999999999, 1], k = 1000",
        "output": "10"
      },
      {
        "input": "gifts = [1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287], k = 15",
        "output": "451"
      },
      {
        "input": "gifts = [1000000000, 500000000, 250000000, 125000000, 62500000], k = 100",
        "output": "5"
      },
      {
        "input": "gifts = [1000, 500, 250, 125, 63, 32, 16, 8, 4, 2, 1], k = 500",
        "output": "11"
      },
      {
        "input": "gifts = [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1], k = 20",
        "output": "20"
      },
      {
        "input": "gifts = [999999, 888888, 777777, 666666, 555555, 444444, 333333, 222222, 111111], k = 300",
        "output": "9"
      },
      {
        "input": "gifts = [169, 144, 121, 100, 81, 64, 49, 36, 25, 16, 9, 4, 1], k = 13",
        "output": "72"
      },
      {
        "input": "gifts = [123456789, 987654321, 111213141, 212223242, 313233343, 414243444, 515253545, 616263646, 717273747, 818283848], k = 1000",
        "output": "10"
      }
    ]
  },
  {
    "id": 796,
    "difficulty": "Easy",
    "tags": [
      "String",
      "String Matching"
    ],
    "problemDescription": "Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\nA shift on s consists of moving the leftmost character of s to the rightmost position.\n\nFor example, if s = \"abcde\", then it will be \"bcdea\" after one shift.\n\n\u00a0\nExample 1:\nInput: s = \"abcde\", goal = \"cdeab\"\nOutput: true\nExample 2:\nInput: s = \"abcde\", goal = \"abced\"\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= s.length, goal.length <= 100\ns and goal consist of lowercase English letters.\n\n",
    "starterCode": "class Solution:\n    def rotateString(self, s: str, goal: str) -> bool:\n        ",
    "testCases": [
      {
        "input": "s = \"aaa\", goal = \"aaa\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefg\", goal = \"efgabcd\"",
        "output": "True"
      },
      {
        "input": "s = \"abab\", goal = \"abba\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", goal = \"dcba\"",
        "output": "False"
      },
      {
        "input": "s = \"abcd\", goal = \"dabc\"",
        "output": "True"
      },
      {
        "input": "s = \"hello\", goal = \"lohel\"",
        "output": "True"
      },
      {
        "input": "s = \"aa\", goal = \"aa\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdef\", goal = \"defabc\"",
        "output": "True"
      },
      {
        "input": "s = \"a\", goal = \"b\"",
        "output": "False"
      },
      {
        "input": "s = \"aaaa\", goal = \"aaaa\"",
        "output": "True"
      },
      {
        "input": "s = \"abab\", goal = \"abab\"",
        "output": "True"
      },
      {
        "input": "s = \"aaa\", goal = \"aab\"",
        "output": "False"
      },
      {
        "input": "s = \"xyz\", goal = \"zyx\"",
        "output": "False"
      },
      {
        "input": "s = \"abcabcabc\", goal = \"abcabcabc\"",
        "output": "True"
      },
      {
        "input": "s = \"whassup\", goal = \"psus\"",
        "output": "False"
      },
      {
        "input": "s = \"abcde\", goal = \"abced\"",
        "output": "False"
      },
      {
        "input": "s = \"a\", goal = \"a\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd\", goal = \"bcda\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd\", goal = \"abcd\"",
        "output": "True"
      },
      {
        "input": "s = \"hello\", goal = \"llohe\"",
        "output": "True"
      },
      {
        "input": "s = \"waterbottle\", goal = \"erbottlewat\"",
        "output": "True"
      },
      {
        "input": "s = \"ab\", goal = \"ba\"",
        "output": "True"
      },
      {
        "input": "s = \"abcd\", goal = \"cdab\"",
        "output": "True"
      },
      {
        "input": "s = \"abcde\", goal = \"cdeab\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdef\", goal = \"ghijkl\"",
        "output": "False"
      },
      {
        "input": "s = \"aabbccdd\", goal = \"ccddaabb\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefgabcdefg\", goal = \"efgabcdefgabcd\"",
        "output": "True"
      },
      {
        "input": "s = \"onetwothree\", goal = \"threeonetwo\"",
        "output": "True"
      },
      {
        "input": "s = \"rotationexample\", goal = \"examplerotation\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefabcdef\", goal = \"fabcdefabcde\"",
        "output": "True"
      },
      {
        "input": "s = \"testtesttest\", goal = \"sttesttestte\"",
        "output": "True"
      },
      {
        "input": "s = \"xyzxyz\", goal = \"xyzxyz\"",
        "output": "True"
      },
      {
        "input": "s = \"pattern\", goal = \"ternpat\"",
        "output": "True"
      },
      {
        "input": "s = \"algorithm\", goal = \"rithmalgo\"",
        "output": "True"
      },
      {
        "input": "s = \"aaaaaaa\", goal = \"aaaaaaa\"",
        "output": "True"
      },
      {
        "input": "s = \"identicalstring\", goal = \"identicalstring\"",
        "output": "True"
      },
      {
        "input": "s = \"longerstringhere\", goal = \"stringhereelong\"",
        "output": "False"
      },
      {
        "input": "s = \"mnopqr\", goal = \"nopqrm\"",
        "output": "True"
      },
      {
        "input": "s = \"aabbccddeeff\", goal = \"ccddeeffaabb\"",
        "output": "True"
      },
      {
        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\", goal = \"zzzzyyxwwvvuuttssrrqqppoonnmmllkkjjiihhggffeeddccbbaa\"",
        "output": "False"
      },
      {
        "input": "s = \"uniqueword\", goal = \"wordunique\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", goal = \"ghijklmnopqr\"",
        "output": "False"
      },
      {
        "input": "s = \"banana\", goal = \"ananab\"",
        "output": "True"
      },
      {
        "input": "s = \"uniquestring\", goal = \"nguniquestri\"",
        "output": "True"
      },
      {
        "input": "s = \"aaaaabbbbb\", goal = \"bbbbbAAAAA\"",
        "output": "False"
      },
      {
        "input": "s = \"longstringfortesting\", goal = \"testinglongstringfor\"",
        "output": "True"
      },
      {
        "input": "s = \"interview\", goal = \"erviewint\"",
        "output": "True"
      },
      {
        "input": "s = \"xyzabcxyz\", goal = \"abcxyzxyz\"",
        "output": "True"
      },
      {
        "input": "s = \"onesymbola\", goal = \"symbolaone\"",
        "output": "True"
      },
      {
        "input": "s = \"repeatedrepeated\", goal = \"atedrepeatedrepe\"",
        "output": "True"
      },
      {
        "input": "s = \"aquickbrownfoxjumpsoverthelazydog\", goal = \"thelazydogaquickbrownfoxjumpsover\"",
        "output": "True"
      },
      {
        "input": "s = \"xyzxyzxyz\", goal = \"xyzxyzxyz\"",
        "output": "True"
      },
      {
        "input": "s = \"unique\", goal = \"queuni\"",
        "output": "True"
      },
      {
        "input": "s = \"banana\", goal = \"anabna\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijk\", goal = \"ghijkabcdef\"",
        "output": "True"
      },
      {
        "input": "s = \"programming\", goal = \"ammingprogr\"",
        "output": "True"
      },
      {
        "input": "s = \"quickbrownfox\", goal = \"oxquickbrownf\"",
        "output": "True"
      },
      {
        "input": "s = \"xyzxyzxyz\", goal = \"yzxyzxyzx\"",
        "output": "True"
      },
      {
        "input": "s = \"almostmatchingbutnotquite\", goal = \"almostmatchingbutnotquit\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdabcdabcd\", goal = \"cdabcdabcda\"",
        "output": "False"
      },
      {
        "input": "s = \"rotatestring\", goal = \"stringrotate\"",
        "output": "True"
      },
      {
        "input": "s = \"thisisaverylongstringthatshouldworkwell\", goal = \"wellthisisaverylongstringthatshoul\"",
        "output": "False"
      },
      {
        "input": "s = \"aaaabbbbccccddddeeeeffff\", goal = \"ffffaaaabbbbccccddddeeee\"",
        "output": "True"
      },
      {
        "input": "s = \"mississippi\", goal = \"pimississi\"",
        "output": "False"
      },
      {
        "input": "s = \"interview\", goal = \"erviewin\"",
        "output": "False"
      },
      {
        "input": "s = \"aabbccdd\", goal = \"ccddaabbaa\"",
        "output": "False"
      },
      {
        "input": "s = \"xyzabc\", goal = \"abcxyz\"",
        "output": "True"
      },
      {
        "input": "s = \"singleletter\", goal = \"singleletter\"",
        "output": "True"
      },
      {
        "input": "s = \"repeated\", goal = \"atedrepe\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefghij\", goal = \"ghijklabce\"",
        "output": "False"
      },
      {
        "input": "s = \"xyzxyz\", goal = \"zxyzxy\"",
        "output": "True"
      },
      {
        "input": "s = \"algorithms\", goal = \"msalgorith\"",
        "output": "True"
      },
      {
        "input": "s = \"shiftthisstring\", goal = \"stringshiftthis\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdabcdabcd\", goal = \"dabcdabcda\"",
        "output": "False"
      },
      {
        "input": "s = \"abcde\", goal = \"deabc\"",
        "output": "True"
      },
      {
        "input": "s = \"stackoverflow\", goal = \"flowoversta\"",
        "output": "False"
      },
      {
        "input": "s = \"shiftandrotate\", goal = \"androtateshift\"",
        "output": "True"
      },
      {
        "input": "s = \"onetwothreefourfivesixseveneightnine\", goal = \"nineonetwothreefourfivesixseveneigh\"",
        "output": "False"
      },
      {
        "input": "s = \"abcdefghijklmnopqrstuvwxyz\", goal = \"zabcdefghijklmnopqrstuvwxy\"",
        "output": "True"
      },
      {
        "input": "s = \"xyxyxyxyxyxy\", goal = \"xyxyxyxyxyyx\"",
        "output": "False"
      },
      {
        "input": "s = \"programming\", goal = \"mingprogram\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefgh\", goal = \"efghabcd\"",
        "output": "True"
      },
      {
        "input": "s = \"repeatedcharacterszzzz\", goal = \"zzzzrepeatedcharacters\"",
        "output": "True"
      },
      {
        "input": "s = \"almostdone\", goal = \"nearlycom\"",
        "output": "False"
      },
      {
        "input": "s = \"samestring\", goal = \"stringames\"",
        "output": "False"
      },
      {
        "input": "s = \"complexproblem\", goal = \"lecomplexprobo\"",
        "output": "False"
      },
      {
        "input": "s = \"abababab\", goal = \"babababa\"",
        "output": "True"
      },
      {
        "input": "s = \"ababab\", goal = \"bababa\"",
        "output": "True"
      },
      {
        "input": "s = \"algorithm\", goal = \"rithalgo\"",
        "output": "False"
      },
      {
        "input": "s = \"aabbccddeeff\", goal = \"ddeeffaabbcc\"",
        "output": "True"
      },
      {
        "input": "s = \"qwertyuiop\", goal = \"uiopqwerty\"",
        "output": "True"
      },
      {
        "input": "s = \"uniquestring\", goal = \"stringunique\"",
        "output": "True"
      },
      {
        "input": "s = \"longstringexample\", goal = \"examplelongstring\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdefg\", goal = \"abcdefg\"",
        "output": "True"
      },
      {
        "input": "s = \"repeatedpatternabcabcabc\", goal = \"abcabcabcrepeatedpattern\"",
        "output": "True"
      },
      {
        "input": "s = \"ababababababababababab\", goal = \"bababababababababababa\"",
        "output": "True"
      },
      {
        "input": "s = \"uniquecharacters\", goal = \"charactersunique\"",
        "output": "True"
      },
      {
        "input": "s = \"shiftmearound\", goal = \"roundshiftmea\"",
        "output": "True"
      },
      {
        "input": "s = \"cryptography\", goal = \"graphycryp\"",
        "output": "False"
      },
      {
        "input": "s = \"complexstring\", goal = \"stringcomplex\"",
        "output": "True"
      },
      {
        "input": "s = \"1234567890\", goal = \"5678901234\"",
        "output": "True"
      },
      {
        "input": "s = \"thisisatest\", goal = \"stthisisa\"",
        "output": "False"
      },
      {
        "input": "s = \"circularrotation\", goal = \"ircularrotationc\"",
        "output": "True"
      },
      {
        "input": "s = \"longstringexample\", goal = \"plelongstringex\"",
        "output": "False"
      },
      {
        "input": "s = \"shiftleft\", goal = \"ftleftshi\"",
        "output": "True"
      },
      {
        "input": "s = \"abcdabcd\", goal = \"cdabcdab\"",
        "output": "True"
      },
      {
        "input": "s = \"aninterestingcase\", goal = \"caseaninteresting\"",
        "output": "True"
      },
      {
        "input": "s = \"question\", goal = \"uestionq\"",
        "output": "True"
      },
      {
        "input": "s = \"almostsame\", goal = \"lmostsamea\"",
        "output": "True"
      },
      {
        "input": "s = \"verylongstringthatneedstobeshifted\", goal = \"edverylongstringthatneedstobeshift\"",
        "output": "True"
      },
      {
        "input": "s = \"rotation\", goal = \"tationro\"",
        "output": "True"
      },
      {
        "input": "s = \"repeatedwordsrepeated\", goal = \"wordsrepeatedrepeated\"",
        "output": "True"
      },
      {
        "input": "s = \"example\", goal = \"mpleexa\"",
        "output": "True"
      }
    ]
  },
  {
    "id": 2748,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Math",
      "Counting",
      "Number Theory"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums. A pair of indices i, j where 0 <=\u00a0i < j < nums.length is called beautiful if the first digit of nums[i] and the last digit of nums[j] are coprime.\nReturn the total number of beautiful pairs in nums.\nTwo integers x and y are coprime if there is no integer greater than 1 that divides both of them. In other words, x and y are coprime if gcd(x, y) == 1, where gcd(x, y) is the greatest common divisor of x and y.\n\u00a0\nExample 1:\n\nInput: nums = [2,5,1,4]\nOutput: 5\nExplanation: There are 5 beautiful pairs in nums:\nWhen i = 0 and j = 1: the first digit of nums[0] is 2, and the last digit of nums[1] is 5. We can confirm that 2 and 5 are coprime, since gcd(2,5) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 2, and the last digit of nums[2] is 1. Indeed, gcd(2,1) == 1.\nWhen i = 1 and j = 2: the first digit of nums[1] is 5, and the last digit of nums[2] is 1. Indeed, gcd(5,1) == 1.\nWhen i = 1 and j = 3: the first digit of nums[1] is 5, and the last digit of nums[3] is 4. Indeed, gcd(5,4) == 1.\nWhen i = 2 and j = 3: the first digit of nums[2] is 1, and the last digit of nums[3] is 4. Indeed, gcd(1,4) == 1.\nThus, we return 5.\n\nExample 2:\n\nInput: nums = [11,21,12]\nOutput: 2\nExplanation: There are 2 beautiful pairs:\nWhen i = 0 and j = 1: the first digit of nums[0] is 1, and the last digit of nums[1] is 1. Indeed, gcd(1,1) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 1, and the last digit of nums[2] is 2. Indeed, gcd(1,2) == 1.\nThus, we return 2.\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 100\n1 <= nums[i] <= 9999\nnums[i] % 10 != 0\n\n",
    "starterCode": "class Solution:\n    def countBeautifulPairs(self, nums: List[int]) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [100,200,300,400]",
        "output": "3"
      },
      {
        "input": "nums = [34,23,12,45,56]",
        "output": "5"
      },
      {
        "input": "nums = [33,14,25,78]",
        "output": "5"
      },
      {
        "input": "nums = [123,456,789,101,202]",
        "output": "9"
      },
      {
        "input": "nums = [13,31,17,71]",
        "output": "6"
      },
      {
        "input": "nums = [78,89,90,12]",
        "output": "3"
      },
      {
        "input": "nums = [111,222,333,444]",
        "output": "5"
      },
      {
        "input": "nums = [34,23,12,45]",
        "output": "4"
      },
      {
        "input": "nums = [12,23,34,45,56]",
        "output": "6"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "9"
      },
      {
        "input": "nums = [11,21,12]",
        "output": "2"
      },
      {
        "input": "nums = [2,5,1,4]",
        "output": "5"
      },
      {
        "input": "nums = [10,20,30,40,50,60,70,80,90]",
        "output": "8"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9]",
        "output": "27"
      },
      {
        "input": "nums = [29,97,79,92]",
        "output": "4"
      },
      {
        "input": "nums = [123,456,789,101]",
        "output": "6"
      },
      {
        "input": "nums = [33,14,25,77]",
        "output": "6"
      },
      {
        "input": "nums = [987,876,765,654,543]",
        "output": "6"
      },
      {
        "input": "nums = [9876,6543,3210,1234]",
        "output": "2"
      },
      {
        "input": "nums = [98,17,31,44]",
        "output": "6"
      },
      {
        "input": "nums = [991, 992, 993, 994, 995, 996, 997, 998, 999]",
        "output": "21"
      },
      {
        "input": "nums = [987, 876, 765, 654, 543, 432, 321, 210, 109]",
        "output": "20"
      },
      {
        "input": "nums = [12, 21, 13, 31, 14, 41, 15, 51, 16, 61]",
        "output": "41"
      },
      {
        "input": "nums = [15, 21, 33, 40, 55]",
        "output": "8"
      },
      {
        "input": "nums = [13, 26, 39, 52, 65, 78, 91]",
        "output": "17"
      },
      {
        "input": "nums = [111, 222, 333, 444, 555]",
        "output": "9"
      },
      {
        "input": "nums = [9876, 6543, 3210, 123, 456, 789]",
        "output": "3"
      },
      {
        "input": "nums = [31, 73, 17, 79, 97, 37, 71, 13, 39]",
        "output": "23"
      },
      {
        "input": "nums = [2468, 1357, 8642, 7531, 9753]",
        "output": "9"
      },
      {
        "input": "nums = [22, 44, 88, 16, 32, 64]",
        "output": "3"
      },
      {
        "input": "nums = [89, 76, 53, 20, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "55"
      },
      {
        "input": "nums = [12345, 54321, 98765, 56789, 13579]",
        "output": "7"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "128"
      },
      {
        "input": "nums = [135, 246, 357, 468, 579, 681, 792, 813, 924]",
        "output": "25"
      },
      {
        "input": "nums = [9876, 8765, 7654, 6543, 5432, 4321]",
        "output": "11"
      },
      {
        "input": "nums = [12345, 23456, 34567, 45678, 56789, 67890, 78901, 89012, 90123]",
        "output": "25"
      },
      {
        "input": "nums = [12, 23, 34, 45, 56, 67, 78, 89, 91]",
        "output": "27"
      },
      {
        "input": "nums = [1234, 2345, 3456, 4567, 5678]",
        "output": "7"
      },
      {
        "input": "nums = [9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9989, 9988, 9987, 9986]",
        "output": "40"
      },
      {
        "input": "nums = [12, 34, 56, 78, 90, 21, 43, 65, 87, 99]",
        "output": "34"
      },
      {
        "input": "nums = [1234, 5678, 9101, 1112, 1314]",
        "output": "10"
      },
      {
        "input": "nums = [11, 22, 33, 44, 55, 66, 77, 88, 99]",
        "output": "27"
      },
      {
        "input": "nums = [987, 654, 321, 111, 222]",
        "output": "9"
      },
      {
        "input": "nums = [123, 456, 789, 101, 112, 131]",
        "output": "14"
      },
      {
        "input": "nums = [101, 202, 303, 404, 505, 606, 707, 808, 909, 1010, 2020, 3030, 4040]",
        "output": "34"
      },
      {
        "input": "nums = [1234, 5678, 9101, 11213, 141516]",
        "output": "8"
      },
      {
        "input": "nums = [25, 50, 75, 100, 125]",
        "output": "4"
      },
      {
        "input": "nums = [99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84]",
        "output": "73"
      },
      {
        "input": "nums = [6789, 5678, 4567, 3456, 2345, 1234]",
        "output": "8"
      },
      {
        "input": "nums = [111, 222, 333, 444, 555, 666, 777, 888, 999]",
        "output": "27"
      },
      {
        "input": "nums = [89, 76, 54, 32, 10]",
        "output": "3"
      },
      {
        "input": "nums = [123, 456, 789, 101, 202]",
        "output": "9"
      },
      {
        "input": "nums = [9876, 5432, 1234, 5678, 9012]",
        "output": "10"
      },
      {
        "input": "nums = [10101, 20202, 30303, 40404, 50505, 60606, 70707, 80808, 90909]",
        "output": "27"
      },
      {
        "input": "nums = [12, 21, 34, 43, 56, 65, 78, 87, 90]",
        "output": "19"
      },
      {
        "input": "nums = [123, 234, 345, 456, 567, 678, 789, 890, 901]",
        "output": "24"
      },
      {
        "input": "nums = [8888, 7777, 6666, 5555]",
        "output": "5"
      },
      {
        "input": "nums = [9999, 8888, 7777, 6666, 5555, 4444, 3333, 2222, 1111]",
        "output": "27"
      },
      {
        "input": "nums = [9876, 6543, 3210, 9876, 6543]",
        "output": "0"
      },
      {
        "input": "nums = [999, 888, 777, 666, 555, 444]",
        "output": "11"
      },
      {
        "input": "nums = [2357, 1113, 1719, 2329, 3137]",
        "output": "10"
      },
      {
        "input": "nums = [135, 246, 357, 468, 579]",
        "output": "8"
      },
      {
        "input": "nums = [29, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79]",
        "output": "57"
      },
      {
        "input": "nums = [19, 29, 39, 49, 59, 69, 79, 89, 97, 98, 96, 95, 94, 93, 92, 91]",
        "output": "85"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]",
        "output": "8"
      },
      {
        "input": "nums = [1234, 4321, 5678, 8765, 9012]",
        "output": "6"
      },
      {
        "input": "nums = [1234, 4321, 5678, 8765, 9876]",
        "output": "6"
      },
      {
        "input": "nums = [101, 203, 305, 407, 509]",
        "output": "9"
      },
      {
        "input": "nums = [9876, 8765, 7654, 6543, 5432]",
        "output": "6"
      },
      {
        "input": "nums = [234, 345, 456, 567, 678, 789, 890, 901]",
        "output": "16"
      },
      {
        "input": "nums = [13, 31, 37, 73, 79, 97]",
        "output": "9"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "76"
      },
      {
        "input": "nums = [9876, 6543, 3210, 9870]",
        "output": "0"
      },
      {
        "input": "nums = [1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999]",
        "output": "27"
      },
      {
        "input": "nums = [123, 321, 456, 654, 789, 987, 246, 642]",
        "output": "16"
      },
      {
        "input": "nums = [1009, 2008, 3007, 4006, 5005]",
        "output": "8"
      },
      {
        "input": "nums = [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]",
        "output": "59"
      },
      {
        "input": "nums = [9876, 8765, 7654, 6543, 5432, 4321, 3210, 2109, 1098]",
        "output": "19"
      },
      {
        "input": "nums = [89, 97, 75, 53, 31, 19, 98, 87]",
        "output": "23"
      },
      {
        "input": "nums = [113, 224, 335, 446, 557]",
        "output": "8"
      },
      {
        "input": "nums = [101, 234, 357, 479, 591]",
        "output": "9"
      },
      {
        "input": "nums = [23, 32, 45, 54, 67, 76, 89, 98, 10]",
        "output": "15"
      },
      {
        "input": "nums = [1001, 2002, 3003, 4004, 5005, 6006, 7007, 8008, 9009]",
        "output": "27"
      },
      {
        "input": "nums = [1111, 2223, 3335, 4447]",
        "output": "6"
      },
      {
        "input": "nums = [1234, 5678, 9101, 1121, 2132, 3143]",
        "output": "14"
      },
      {
        "input": "nums = [13579, 24680, 97531, 86420, 1029384756]",
        "output": "5"
      },
      {
        "input": "nums = [911, 822, 733, 644, 555, 466]",
        "output": "10"
      },
      {
        "input": "nums = [13579, 2468, 97531, 86420, 7539, 6428, 5317, 4206]",
        "output": "18"
      },
      {
        "input": "nums = [9876, 5432, 3210, 1098, 7654]",
        "output": "8"
      },
      {
        "input": "nums = [19, 28, 37, 46, 55, 64, 73, 82, 91]",
        "output": "27"
      },
      {
        "input": "nums = [89, 97, 103, 107, 109]",
        "output": "8"
      },
      {
        "input": "nums = [111, 222, 333, 444, 555, 666]",
        "output": "11"
      },
      {
        "input": "nums = [99, 88, 77, 66, 55, 44, 33, 22, 11]",
        "output": "27"
      },
      {
        "input": "nums = [111222, 222333, 333444, 444555, 555666, 666777, 777888, 888999, 999111]",
        "output": "27"
      },
      {
        "input": "nums = [101, 202, 303, 404, 505]",
        "output": "9"
      },
      {
        "input": "nums = [101, 202, 303, 404, 505, 606, 707, 808, 909]",
        "output": "27"
      },
      {
        "input": "nums = [12, 24, 36, 48, 60, 72, 84, 96]",
        "output": "12"
      },
      {
        "input": "nums = [12345, 67890, 54321, 90876, 23456]",
        "output": "7"
      },
      {
        "input": "nums = [11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999]",
        "output": "27"
      },
      {
        "input": "nums = [987, 654, 321, 123, 456, 789]",
        "output": "6"
      },
      {
        "input": "nums = [9998, 7775, 5552, 3337, 1111]",
        "output": "9"
      },
      {
        "input": "nums = [1023, 4567, 8910, 1123]",
        "output": "5"
      }
    ]
  },
  {
    "id": 171,
    "difficulty": "Easy",
    "tags": [
      "Math",
      "String"
    ],
    "problemDescription": "Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n\u00a0\nExample 1:\n\nInput: columnTitle = \"A\"\nOutput: 1\n\nExample 2:\n\nInput: columnTitle = \"AB\"\nOutput: 28\n\nExample 3:\n\nInput: columnTitle = \"ZY\"\nOutput: 701\n\n\u00a0\nConstraints:\n\n1 <= columnTitle.length <= 7\ncolumnTitle consists only of uppercase English letters.\ncolumnTitle is in the range [\"A\", \"FXSHRXW\"].\n\n",
    "starterCode": "class Solution:\n    def titleToNumber(self, columnTitle: str) -> int:\n        ",
    "testCases": [
      {
        "input": "columnTitle = \"MAD\"",
        "output": "8818"
      },
      {
        "input": "columnTitle = \"AAA\"",
        "output": "703"
      },
      {
        "input": "columnTitle = \"ZY\"",
        "output": "701"
      },
      {
        "input": "columnTitle = \"AC\"",
        "output": "29"
      },
      {
        "input": "columnTitle = \"Z\"",
        "output": "26"
      },
      {
        "input": "columnTitle = \"ZYZ\"",
        "output": "18252"
      },
      {
        "input": "columnTitle = \"FXSHRXW\"",
        "output": "2147483647"
      },
      {
        "input": "columnTitle = \"ZAB\"",
        "output": "17604"
      },
      {
        "input": "columnTitle = \"BZ\"",
        "output": "78"
      },
      {
        "input": "columnTitle = \"M\"",
        "output": "13"
      },
      {
        "input": "columnTitle = \"ABC\"",
        "output": "731"
      },
      {
        "input": "columnTitle = \"ZZZ\"",
        "output": "18278"
      },
      {
        "input": "columnTitle = \"AB\"",
        "output": "28"
      },
      {
        "input": "columnTitle = \"A\"",
        "output": "1"
      },
      {
        "input": "columnTitle = \"XYZ\"",
        "output": "16900"
      },
      {
        "input": "columnTitle = \"ZYZY\"",
        "output": "474577"
      },
      {
        "input": "columnTitle = \"AAN\"",
        "output": "716"
      },
      {
        "input": "columnTitle = \"ACB\"",
        "output": "756"
      },
      {
        "input": "columnTitle = \"AAI\"",
        "output": "711"
      },
      {
        "input": "columnTitle = \"AAD\"",
        "output": "706"
      },
      {
        "input": "columnTitle = \"FXSHRXV\"",
        "output": "2147483646"
      },
      {
        "input": "columnTitle = \"ASDFGH\"",
        "output": "20638470"
      },
      {
        "input": "columnTitle = \"SS\"",
        "output": "513"
      },
      {
        "input": "columnTitle = \"GH\"",
        "output": "190"
      },
      {
        "input": "columnTitle = \"AAR\"",
        "output": "720"
      },
      {
        "input": "columnTitle = \"ALIBABA\"",
        "output": "455640953"
      },
      {
        "input": "columnTitle = \"PQ\"",
        "output": "433"
      },
      {
        "input": "columnTitle = \"AAE\"",
        "output": "707"
      },
      {
        "input": "columnTitle = \"UU\"",
        "output": "567"
      },
      {
        "input": "columnTitle = \"LO\"",
        "output": "327"
      },
      {
        "input": "columnTitle = \"RT\"",
        "output": "488"
      },
      {
        "input": "columnTitle = \"QWJH\"",
        "output": "314608"
      },
      {
        "input": "columnTitle = \"EEEEE\"",
        "output": "2376275"
      },
      {
        "input": "columnTitle = \"AAB\"",
        "output": "704"
      },
      {
        "input": "columnTitle = \"WORLD\"",
        "output": "10786572"
      },
      {
        "input": "columnTitle = \"IK\"",
        "output": "245"
      },
      {
        "input": "columnTitle = \"COLUMN\"",
        "output": "42724228"
      },
      {
        "input": "columnTitle = \"AZZ\"",
        "output": "1378"
      },
      {
        "input": "columnTitle = \"II\"",
        "output": "243"
      },
      {
        "input": "columnTitle = \"BAA\"",
        "output": "1379"
      },
      {
        "input": "columnTitle = \"AAM\"",
        "output": "715"
      },
      {
        "input": "columnTitle = \"DDDDD\"",
        "output": "1901020"
      },
      {
        "input": "columnTitle = \"TUVW\"",
        "output": "366311"
      },
      {
        "input": "columnTitle = \"ABB\"",
        "output": "730"
      },
      {
        "input": "columnTitle = \"BB\"",
        "output": "54"
      },
      {
        "input": "columnTitle = \"MZZ\"",
        "output": "9490"
      },
      {
        "input": "columnTitle = \"AZY\"",
        "output": "1377"
      },
      {
        "input": "columnTitle = \"VV\"",
        "output": "594"
      },
      {
        "input": "columnTitle = \"TRE\"",
        "output": "13993"
      },
      {
        "input": "columnTitle = \"AAQ\"",
        "output": "719"
      },
      {
        "input": "columnTitle = \"MN\"",
        "output": "352"
      },
      {
        "input": "columnTitle = \"TY\"",
        "output": "545"
      },
      {
        "input": "columnTitle = \"HJKL\"",
        "output": "147666"
      },
      {
        "input": "columnTitle = \"ADZ\"",
        "output": "806"
      },
      {
        "input": "columnTitle = \"AAAA\"",
        "output": "18279"
      },
      {
        "input": "columnTitle = \"CB\"",
        "output": "80"
      },
      {
        "input": "columnTitle = \"LL\"",
        "output": "324"
      },
      {
        "input": "columnTitle = \"NO\"",
        "output": "379"
      },
      {
        "input": "columnTitle = \"ABCDEFG\"",
        "output": "334123303"
      },
      {
        "input": "columnTitle = \"BCD\"",
        "output": "1434"
      },
      {
        "input": "columnTitle = \"STUVWX\"",
        "output": "235270254"
      },
      {
        "input": "columnTitle = \"PO\"",
        "output": "431"
      },
      {
        "input": "columnTitle = \"CVBNM\"",
        "output": "1759329"
      },
      {
        "input": "columnTitle = \"ALGORITHM\"",
        "output": "307557815253"
      },
      {
        "input": "columnTitle = \"QWERTY\"",
        "output": "212594433"
      },
      {
        "input": "columnTitle = \"ZXCVBN\"",
        "output": "319950866"
      },
      {
        "input": "columnTitle = \"QRSTU\"",
        "output": "8098345"
      },
      {
        "input": "columnTitle = \"ALPHABET\"",
        "output": "11932576390"
      },
      {
        "input": "columnTitle = \"UVWX\"",
        "output": "384590"
      },
      {
        "input": "columnTitle = \"DF\"",
        "output": "110"
      },
      {
        "input": "columnTitle = \"WW\"",
        "output": "621"
      },
      {
        "input": "columnTitle = \"CC\"",
        "output": "81"
      },
      {
        "input": "columnTitle = \"AAO\"",
        "output": "717"
      },
      {
        "input": "columnTitle = \"GG\"",
        "output": "189"
      },
      {
        "input": "columnTitle = \"QWEN\"",
        "output": "314484"
      },
      {
        "input": "columnTitle = \"SD\"",
        "output": "498"
      },
      {
        "input": "columnTitle = \"QWJRTYUP\"",
        "output": "143773244150"
      },
      {
        "input": "columnTitle = \"WZYZ\"",
        "output": "422500"
      },
      {
        "input": "columnTitle = \"MNBVCXZ\"",
        "output": "4183547654"
      },
      {
        "input": "columnTitle = \"FXSH\"",
        "output": "122182"
      },
      {
        "input": "columnTitle = \"PQRST\"",
        "output": "7623090"
      },
      {
        "input": "columnTitle = \"AAU\"",
        "output": "723"
      },
      {
        "input": "columnTitle = \"UI\"",
        "output": "555"
      },
      {
        "input": "columnTitle = \"NUMBER\"",
        "output": "176165748"
      },
      {
        "input": "columnTitle = \"MM\"",
        "output": "351"
      },
      {
        "input": "columnTitle = \"BAC\"",
        "output": "1381"
      },
      {
        "input": "columnTitle = \"FF\"",
        "output": "162"
      },
      {
        "input": "columnTitle = \"WX\"",
        "output": "622"
      },
      {
        "input": "columnTitle = \"FXSHRXU\"",
        "output": "2147483645"
      },
      {
        "input": "columnTitle = \"YUIOP\"",
        "output": "11799986"
      },
      {
        "input": "columnTitle = \"MATH\"",
        "output": "229692"
      },
      {
        "input": "columnTitle = \"MIX\"",
        "output": "9046"
      },
      {
        "input": "columnTitle = \"LM\"",
        "output": "325"
      },
      {
        "input": "columnTitle = \"XY\"",
        "output": "649"
      },
      {
        "input": "columnTitle = \"BBZ\"",
        "output": "1430"
      },
      {
        "input": "columnTitle = \"AAF\"",
        "output": "708"
      },
      {
        "input": "columnTitle = \"IO\"",
        "output": "249"
      },
      {
        "input": "columnTitle = \"TU\"",
        "output": "541"
      },
      {
        "input": "columnTitle = \"AEZ\"",
        "output": "832"
      },
      {
        "input": "columnTitle = \"ER\"",
        "output": "148"
      },
      {
        "input": "columnTitle = \"ZZ\"",
        "output": "702"
      },
      {
        "input": "columnTitle = \"OL\"",
        "output": "402"
      },
      {
        "input": "columnTitle = \"AAV\"",
        "output": "724"
      },
      {
        "input": "columnTitle = \"AFZ\"",
        "output": "858"
      },
      {
        "input": "columnTitle = \"AAT\"",
        "output": "722"
      },
      {
        "input": "columnTitle = \"FGHTY\"",
        "output": "2870841"
      },
      {
        "input": "columnTitle = \"QQ\"",
        "output": "459"
      },
      {
        "input": "columnTitle = \"MID\"",
        "output": "9026"
      },
      {
        "input": "columnTitle = \"DEF\"",
        "output": "2840"
      },
      {
        "input": "columnTitle = \"ST\"",
        "output": "514"
      },
      {
        "input": "columnTitle = \"ZXCVBNM\"",
        "output": "8318722529"
      },
      {
        "input": "columnTitle = \"ACZ\"",
        "output": "780"
      },
      {
        "input": "columnTitle = \"ABZ\"",
        "output": "754"
      },
      {
        "input": "columnTitle = \"RS\"",
        "output": "487"
      },
      {
        "input": "columnTitle = \"QQQQQ\"",
        "output": "8079335"
      },
      {
        "input": "columnTitle = \"AS\"",
        "output": "45"
      },
      {
        "input": "columnTitle = \"LETTERS\"",
        "output": "3775891099"
      },
      {
        "input": "columnTitle = \"XYZZY\"",
        "output": "11425101"
      },
      {
        "input": "columnTitle = \"CODING\"",
        "output": "42575527"
      },
      {
        "input": "columnTitle = \"AXX\"",
        "output": "1324"
      },
      {
        "input": "columnTitle = \"FG\"",
        "output": "163"
      },
      {
        "input": "columnTitle = \"AAH\"",
        "output": "710"
      },
      {
        "input": "columnTitle = \"QW\"",
        "output": "465"
      },
      {
        "input": "columnTitle = \"XYZZ\"",
        "output": "439426"
      },
      {
        "input": "columnTitle = \"MIXED\"",
        "output": "6115230"
      },
      {
        "input": "columnTitle = \"AGZ\"",
        "output": "884"
      },
      {
        "input": "columnTitle = \"AAL\"",
        "output": "714"
      },
      {
        "input": "columnTitle = \"UY\"",
        "output": "571"
      },
      {
        "input": "columnTitle = \"TR\"",
        "output": "538"
      },
      {
        "input": "columnTitle = \"UV\"",
        "output": "568"
      },
      {
        "input": "columnTitle = \"AXY\"",
        "output": "1325"
      },
      {
        "input": "columnTitle = \"UPPERCASE\"",
        "output": "4518887657679"
      },
      {
        "input": "columnTitle = \"AAK\"",
        "output": "713"
      },
      {
        "input": "columnTitle = \"VBN\"",
        "output": "14938"
      },
      {
        "input": "columnTitle = \"ZZZZ\"",
        "output": "475254"
      },
      {
        "input": "columnTitle = \"HJ\"",
        "output": "218"
      },
      {
        "input": "columnTitle = \"PROGRAMMING\"",
        "output": "2359598803856431"
      },
      {
        "input": "columnTitle = \"ZYXWVUT\"",
        "output": "8340231686"
      },
      {
        "input": "columnTitle = \"CAT\"",
        "output": "2074"
      },
      {
        "input": "columnTitle = \"BNM\"",
        "output": "1729"
      },
      {
        "input": "columnTitle = \"ZZZZZ\"",
        "output": "12356630"
      },
      {
        "input": "columnTitle = \"XYZXYZ\"",
        "output": "297051300"
      },
      {
        "input": "columnTitle = \"STUVWXYZ\"",
        "output": "159042692380"
      },
      {
        "input": "columnTitle = \"SHEET\"",
        "output": "8826682"
      },
      {
        "input": "columnTitle = \"OP\"",
        "output": "406"
      },
      {
        "input": "columnTitle = \"BBA\"",
        "output": "1405"
      },
      {
        "input": "columnTitle = \"NN\"",
        "output": "378"
      },
      {
        "input": "columnTitle = \"EE\"",
        "output": "135"
      },
      {
        "input": "columnTitle = \"ZZZZZZ\"",
        "output": "321272406"
      },
      {
        "input": "columnTitle = \"MNO\"",
        "output": "9167"
      },
      {
        "input": "columnTitle = \"QR\"",
        "output": "460"
      },
      {
        "input": "columnTitle = \"AAJ\"",
        "output": "712"
      },
      {
        "input": "columnTitle = \"AAX\"",
        "output": "726"
      },
      {
        "input": "columnTitle = \"QQQQ\"",
        "output": "310743"
      },
      {
        "input": "columnTitle = \"HH\"",
        "output": "216"
      },
      {
        "input": "columnTitle = \"AZX\"",
        "output": "1376"
      },
      {
        "input": "columnTitle = \"AAZ\"",
        "output": "728"
      },
      {
        "input": "columnTitle = \"AAG\"",
        "output": "709"
      },
      {
        "input": "columnTitle = \"TITLE\"",
        "output": "9311541"
      },
      {
        "input": "columnTitle = \"BN\"",
        "output": "66"
      },
      {
        "input": "columnTitle = \"TT\"",
        "output": "540"
      },
      {
        "input": "columnTitle = \"LEETCODE\"",
        "output": "97994910369"
      },
      {
        "input": "columnTitle = \"ABCD\"",
        "output": "19010"
      },
      {
        "input": "columnTitle = \"ASDFGHJKL\"",
        "output": "362741755778"
      },
      {
        "input": "columnTitle = \"AXZ\"",
        "output": "1326"
      },
      {
        "input": "columnTitle = \"PYTHON\"",
        "output": "201883748"
      },
      {
        "input": "columnTitle = \"AAS\"",
        "output": "721"
      },
      {
        "input": "columnTitle = \"AAC\"",
        "output": "705"
      },
      {
        "input": "columnTitle = \"AA\"",
        "output": "27"
      },
      {
        "input": "columnTitle = \"OO\"",
        "output": "405"
      },
      {
        "input": "columnTitle = \"EXCEL\"",
        "output": "2708874"
      },
      {
        "input": "columnTitle = \"HELLO\"",
        "output": "3752127"
      },
      {
        "input": "columnTitle = \"GHJKL\"",
        "output": "3346498"
      },
      {
        "input": "columnTitle = \"AXB\"",
        "output": "1302"
      },
      {
        "input": "columnTitle = \"YY\"",
        "output": "675"
      },
      {
        "input": "columnTitle = \"TUVWX\"",
        "output": "9524110"
      },
      {
        "input": "columnTitle = \"DD\"",
        "output": "108"
      },
      {
        "input": "columnTitle = \"XX\"",
        "output": "648"
      },
      {
        "input": "columnTitle = \"JK\"",
        "output": "271"
      },
      {
        "input": "columnTitle = \"KL\"",
        "output": "298"
      },
      {
        "input": "columnTitle = \"RR\"",
        "output": "486"
      },
      {
        "input": "columnTitle = \"CA\"",
        "output": "79"
      },
      {
        "input": "columnTitle = \"JKLMNOPQR\"",
        "output": "2180488677476"
      },
      {
        "input": "columnTitle = \"SPREADSHEET\"",
        "output": "2772846287758970"
      },
      {
        "input": "columnTitle = \"JJ\"",
        "output": "270"
      },
      {
        "input": "columnTitle = \"DA\"",
        "output": "105"
      },
      {
        "input": "columnTitle = \"PP\"",
        "output": "432"
      },
      {
        "input": "columnTitle = \"CVB\"",
        "output": "2602"
      },
      {
        "input": "columnTitle = \"OPQR\"",
        "output": "274916"
      },
      {
        "input": "columnTitle = \"CODE\"",
        "output": "62977"
      },
      {
        "input": "columnTitle = \"AAP\"",
        "output": "718"
      },
      {
        "input": "columnTitle = \"TREND\"",
        "output": "9459636"
      },
      {
        "input": "columnTitle = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
        "output": "256094574536617744129141650397448476"
      },
      {
        "input": "columnTitle = \"BEE\"",
        "output": "1487"
      },
      {
        "input": "columnTitle = \"VW\"",
        "output": "595"
      },
      {
        "input": "columnTitle = \"LMNO\"",
        "output": "220079"
      },
      {
        "input": "columnTitle = \"AAW\"",
        "output": "725"
      },
      {
        "input": "columnTitle = \"ZZZZZZZ\"",
        "output": "8353082582"
      },
      {
        "input": "columnTitle = \"ABCDEF\"",
        "output": "12850896"
      },
      {
        "input": "columnTitle = \"YZ\"",
        "output": "676"
      },
      {
        "input": "columnTitle = \"KK\"",
        "output": "297"
      }
    ]
  },
  {
    "id": 252,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Sorting"
    ],
    "problemDescription": "Given an array of meeting time intervals\u00a0where intervals[i] = [starti, endi], determine if a person could attend all meetings.\n\u00a0\nExample 1:\nInput: intervals = [[0,30],[5,10],[15,20]]\nOutput: false\nExample 2:\nInput: intervals = [[7,10],[2,4]]\nOutput: true\n\n\u00a0\nConstraints:\n\n0 <= intervals.length <= 104\nintervals[i].length == 2\n0 <= starti <\u00a0endi <= 106\n\n",
    "starterCode": "class Solution:\n    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:\n        ",
    "testCases": [
      {
        "input": "intervals = [[1,5],[2,3]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,2]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,2],[2,3]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,2],[3,4],[5,6]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,10]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,1000000],[1000001,2000000]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,5],[2,6],[3,7]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,5],[6,10],[11,15]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,3],[4,5],[6,7],[8,9]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,5],[2,3],[4,6]]",
        "output": "False"
      },
      {
        "input": "intervals = []",
        "output": "True"
      },
      {
        "input": "intervals = [[0,30],[5,10],[15,20]]",
        "output": "False"
      },
      {
        "input": "intervals = [[7,10],[2,4]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,3],[3,5],[5,7],[7,9],[9,11],[11,13],[13,15],[15,17],[17,19],[19,21]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,3],[2,4],[3,6],[4,8],[5,10]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1, 100], [200, 300], [400, 500], [600, 700], [800, 900]]",
        "output": "True"
      },
      {
        "input": "intervals = [[10, 20], [15, 25], [30, 40], [35, 45]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1, 3], [3, 5], [5, 7], [7, 9], [9, 11]]",
        "output": "True"
      },
      {
        "input": "intervals = [[3,9],[1,4],[7,11],[10,15],[5,8]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,4],[2,5],[3,6],[7,10]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,100],[100,200],[200,300],[50,150],[150,250],[250,350]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,100],[101,200],[201,300],[301,400],[401,500],[501,600],[601,700],[701,800],[801,900],[901,1000]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9]]",
        "output": "False"
      },
      {
        "input": "intervals = [[9,10],[4,9],[4,17]]",
        "output": "False"
      },
      {
        "input": "intervals = [[5,10],[10,15],[15,20],[20,25],[25,30],[30,35],[35,40]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[7,10],[8,10],[9,10],[10,10]]",
        "output": "False"
      },
      {
        "input": "intervals = [[100000,1000000],[500000,600000],[300000,400000]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,5],[2,3],[4,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20]]",
        "output": "False"
      },
      {
        "input": "intervals = [[100, 200], [300, 400], [500, 600], [700, 800], [900, 1000], [250, 350], [450, 550], [650, 750]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,2],[1,3],[1,4],[1,5]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,20],[10,15],[15,20],[20,25],[25,30],[30,35]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,1],[1,1],[1,1]]",
        "output": "True"
      },
      {
        "input": "intervals = [[10,20],[15,25],[20,30],[25,35],[30,40],[35,45],[40,50],[45,55],[50,60],[55,65]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1000000,1000001],[999999,1000000],[1000001,1000002]]",
        "output": "True"
      },
      {
        "input": "intervals = [[10,20],[20,30],[30,40],[40,50]]",
        "output": "True"
      },
      {
        "input": "intervals = [[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "True"
      },
      {
        "input": "intervals = [[0,5],[5,10],[10,15],[15,20]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,100],[2,99],[3,98],[4,97],[5,96],[6,95],[7,94],[8,93],[9,92],[10,91]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,10],[11,20],[21,30],[31,40],[41,50]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,10],[10,20],[20,30],[5,15]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]",
        "output": "False"
      },
      {
        "input": "intervals = [[100,200],[150,250],[200,300],[250,350],[300,400]]",
        "output": "False"
      },
      {
        "input": "intervals = [[0,10],[10,20],[20,30],[30,40]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,3],[2,4],[5,7],[6,8],[9,11],[10,12]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,3],[2,4],[5,7],[6,8]]",
        "output": "False"
      },
      {
        "input": "intervals = [[0,0],[0,0],[0,0]]",
        "output": "True"
      },
      {
        "input": "intervals = [[5,10],[10,15],[15,20],[20,25],[25,30],[30,35]]",
        "output": "True"
      },
      {
        "input": "intervals = [[0,100],[100,200],[200,300],[300,400]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,5],[2,6],[4,8],[9,13],[11,15],[14,18]]",
        "output": "False"
      },
      {
        "input": "intervals = [[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100],[100,110]]",
        "output": "True"
      },
      {
        "input": "intervals = [[999999,1000000],[1000000,1000001],[1000001,1000002]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,10],[2,3],[4,5],[6,7],[8,9]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,100],[2,99],[3,98],[4,97],[5,96]]",
        "output": "False"
      },
      {
        "input": "intervals = [[5,15],[15,25],[25,35],[35,45],[45,55]]",
        "output": "True"
      },
      {
        "input": "intervals = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "True"
      },
      {
        "input": "intervals = [[2,7],[8,10],[11,13],[14,20],[18,25]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,3],[3,5],[5,7],[7,9],[9,11],[11,13],[13,15],[15,17],[17,19]]",
        "output": "True"
      },
      {
        "input": "intervals = [[10,30],[15,20],[20,25]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1, 5], [2, 3], [4, 6], [7, 8], [9, 10]]",
        "output": "False"
      },
      {
        "input": "intervals = [[3,7],[7,11],[11,15],[15,19],[19,23],[23,27]]",
        "output": "True"
      },
      {
        "input": "intervals = [[9,10],[4,9],[4,10],[5,7],[6,8],[1,5],[8,12],[11,13]]",
        "output": "False"
      },
      {
        "input": "intervals = [[10,20],[20,30],[15,25]]",
        "output": "False"
      },
      {
        "input": "intervals = [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,2],[3,4],[5,6],[7,8],[9,10],[1,2]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,5],[6,10],[11,15],[16,20],[21,25],[26,30]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,10],[10,20],[20,30],[30,40],[40,50],[50,60],[60,70],[70,80],[80,90],[90,100]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,3],[2,4],[3,5],[4,6],[5,7],[6,8],[7,9],[8,10],[9,11],[10,12]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,100],[50,150],[100,200],[150,250],[200,300],[250,350]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,10]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,4],[2,5],[3,6],[4,7],[5,8],[6,9]]",
        "output": "False"
      },
      {
        "input": "intervals = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]",
        "output": "True"
      },
      {
        "input": "intervals = [[5, 10], [15, 20], [25, 30], [10, 15], [20, 25]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,10],[11,20],[21,30],[31,40],[41,50],[51,60],[61,70],[71,80],[81,90],[91,100]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,10],[2,9],[3,8],[4,7],[5,6],[6,5],[7,4],[8,3],[9,2],[10,1]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,2],[2,2],[3,4]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,2],[4,5],[7,8],[9,10],[11,12],[13,14]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,5],[2,6],[8,10],[15,20]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1]]",
        "output": "True"
      },
      {
        "input": "intervals = [[2, 4], [5, 7], [8, 10], [11, 13], [1, 3], [12, 14]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1000,2000],[2000,3000],[3000,4000],[4000,5000],[5000,6000]]",
        "output": "True"
      },
      {
        "input": "intervals = [[2,4],[7,10],[11,15],[13,20],[21,25],[22,27]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,5],[6,10],[11,15],[16,20],[21,25]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,10],[10,20],[20,30],[30,40],[15,25]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,3],[2,4],[3,5],[4,6],[5,7]]",
        "output": "False"
      },
      {
        "input": "intervals = [[5,10],[10,15],[15,20],[20,25],[25,30]]",
        "output": "True"
      },
      {
        "input": "intervals = [[5,15],[15,25],[25,35],[1,5]]",
        "output": "True"
      },
      {
        "input": "intervals = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]",
        "output": "True"
      },
      {
        "input": "intervals = [[2,5],[8,10],[15,20],[10,15],[20,25]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,5],[5,10],[10,15],[15,20]]",
        "output": "True"
      },
      {
        "input": "intervals = [[1,5],[2,6],[8,10],[10,15]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,5],[6,10],[11,15],[16,20],[5,10]]",
        "output": "False"
      },
      {
        "input": "intervals = [[9,10],[4,9],[4,17],[3,5]]",
        "output": "False"
      },
      {
        "input": "intervals = [[1,10],[10,20],[15,25],[25,35]]",
        "output": "False"
      }
    ]
  },
  {
    "id": 338,
    "difficulty": "Easy",
    "tags": [
      "Bit Manipulation",
      "Dynamic Programming"
    ],
    "problemDescription": "Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\n\u00a0\nExample 1:\n\nInput: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n\nExample 2:\n\nInput: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n\n\u00a0\nConstraints:\n\n0 <= n <= 105\n\n\u00a0\nFollow up:\n\nIt is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?\nCan you do it without using any built-in function (i.e., like __builtin_popcount in C++)?\n\n",
    "starterCode": "class Solution:\n    def countBits(self, n: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "n = 0",
        "output": "[0]"
      },
      {
        "input": "n = 100000",
        "output": "Execution timed out"
      },
      {
        "input": "n = 10000",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 9, 10, 10, 11, 10, 11, 11, 12, 10, 11, 11, 12, 11, 12, 12, 13, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5]"
      },
      {
        "input": "n = 31",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5]"
      },
      {
        "input": "n = 2",
        "output": "[0, 1, 1]"
      },
      {
        "input": "n = 100",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3]"
      },
      {
        "input": "n = 1000",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6]"
      },
      {
        "input": "n = 1",
        "output": "[0, 1]"
      },
      {
        "input": "n = 10",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2]"
      },
      {
        "input": "n = 5",
        "output": "[0, 1, 1, 2, 1, 2]"
      },
      {
        "input": "n = 99999",
        "output": "Execution timed out"
      },
      {
        "input": "n = 63",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6]"
      },
      {
        "input": "n = 131071",
        "output": "Execution timed out"
      },
      {
        "input": "n = 12345",
        "output": "Execution timed out"
      },
      {
        "input": "n = 4096",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 1]"
      },
      {
        "input": "n = 32767",
        "output": "Execution timed out"
      },
      {
        "input": "n = 511",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9]"
      },
      {
        "input": "n = 50000",
        "output": "Execution timed out"
      },
      {
        "input": "n = 2047",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11]"
      },
      {
        "input": "n = 262143",
        "output": "Execution timed out"
      },
      {
        "input": "n = 16383",
        "output": "Execution timed out"
      },
      {
        "input": "n = 16384",
        "output": "Execution timed out"
      },
      {
        "input": "n = 300",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4]"
      },
      {
        "input": "n = 524287",
        "output": "Execution timed out"
      },
      {
        "input": "n = 64",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1]"
      },
      {
        "input": "n = 254",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7]"
      },
      {
        "input": "n = 200000",
        "output": "Execution timed out"
      },
      {
        "input": "n = 1024",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 1]"
      },
      {
        "input": "n = 128",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1]"
      },
      {
        "input": "n = 80000",
        "output": "Execution timed out"
      },
      {
        "input": "n = 4095",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12]"
      },
      {
        "input": "n = 1048576",
        "output": "Execution timed out"
      },
      {
        "input": "n = 8192",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 9, 10, 10, 11, 10, 11, 11, 12, 10, 11, 11, 12, 11, 12, 12, 13, 1]"
      },
      {
        "input": "n = 2048",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 1]"
      },
      {
        "input": "n = 8191",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 9, 10, 10, 11, 10, 11, 11, 12, 10, 11, 11, 12, 11, 12, 12, 13]"
      },
      {
        "input": "n = 255",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8]"
      },
      {
        "input": "n = 65536",
        "output": "Execution timed out"
      },
      {
        "input": "n = 5000",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5]"
      },
      {
        "input": "n = 768",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2]"
      },
      {
        "input": "n = 256",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1]"
      },
      {
        "input": "n = 1023",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10]"
      },
      {
        "input": "n = 65535",
        "output": "Execution timed out"
      },
      {
        "input": "n = 127",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7]"
      },
      {
        "input": "n = 15",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]"
      },
      {
        "input": "n = 32768",
        "output": "Execution timed out"
      },
      {
        "input": "n = 200",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3]"
      },
      {
        "input": "n = 1048575",
        "output": "Execution timed out"
      },
      {
        "input": "n = 512",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1]"
      },
      {
        "input": "n = 500",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6]"
      },
      {
        "input": "n = 7",
        "output": "[0, 1, 1, 2, 1, 2, 2, 3]"
      }
    ]
  },
  {
    "id": 1710,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "Array",
      "Sorting"
    ],
    "problemDescription": "You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:\n\nnumberOfBoxesi is the number of boxes of type i.\nnumberOfUnitsPerBoxi is the number of units in each box of the type i.\n\nYou are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number\u00a0of boxes does not exceed truckSize.\nReturn the maximum total number of units that can be put on the truck.\n\u00a0\nExample 1:\n\nInput: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4\nOutput: 8\nExplanation: There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.\n\nExample 2:\n\nInput: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10\nOutput: 91\n\n\u00a0\nConstraints:\n\n1 <= boxTypes.length <= 1000\n1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000\n1 <= truckSize <= 106\n\n",
    "starterCode": "class Solution:\n    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:\n        ",
    "testCases": [
      {
        "input": "boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4",
        "output": "8"
      },
      {
        "input": "boxTypes = [[1,1],[2,2],[3,3],[4,4]], truckSize = 1",
        "output": "4"
      },
      {
        "input": "boxTypes = [[2,1],[4,4],[3,3]], truckSize = 5",
        "output": "19"
      },
      {
        "input": "boxTypes = [[10,1],[20,2],[30,3]], truckSize = 50",
        "output": "130"
      },
      {
        "input": "boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10",
        "output": "91"
      },
      {
        "input": "boxTypes = [[1,100],[2,99],[3,98],[4,97]], truckSize = 10",
        "output": "980"
      },
      {
        "input": "boxTypes = [[10,1],[5,2],[3,3]], truckSize = 10",
        "output": "21"
      },
      {
        "input": "boxTypes = [[100,1],[99,2],[98,3],[97,4]], truckSize = 200",
        "output": "692"
      },
      {
        "input": "boxTypes = [[10,1]], truckSize = 10",
        "output": "10"
      },
      {
        "input": "boxTypes = [[1,1000],[1000,1]], truckSize = 500",
        "output": "1499"
      },
      {
        "input": "boxTypes = [[1,100],[2,90],[3,80],[4,70],[5,60]], truckSize = 10",
        "output": "800"
      },
      {
        "input": "boxTypes = [[5,5],[5,5],[5,5],[5,5]], truckSize = 15",
        "output": "75"
      },
      {
        "input": "boxTypes = [[2,1],[3,2],[4,3],[5,4],[6,5]], truckSize = 15",
        "output": "62"
      },
      {
        "input": "boxTypes = [[2,1000],[1,900],[2,800],[1,700],[2,600],[1,500],[2,400],[1,300],[2,200],[1,100]], truckSize = 10",
        "output": "7300"
      },
      {
        "input": "boxTypes = [[9, 1], [8, 2], [7, 3], [6, 4], [5, 5], [4, 6], [3, 7], [2, 8], [1, 9]], truckSize = 20",
        "output": "115"
      },
      {
        "input": "boxTypes = [[5,10],[1,15],[3,12],[2,14],[4,8]], truckSize = 15",
        "output": "161"
      },
      {
        "input": "boxTypes = [[7,10],[5,3],[2,6],[8,1]], truckSize = 20",
        "output": "103"
      },
      {
        "input": "boxTypes = [[5,1],[4,2],[3,3],[2,4],[1,5]], truckSize = 15",
        "output": "35"
      },
      {
        "input": "boxTypes = [[5,10],[4,20],[3,30],[2,40],[1,50]], truckSize = 15",
        "output": "350"
      },
      {
        "input": "boxTypes = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10]], truckSize = 5",
        "output": "40"
      },
      {
        "input": "boxTypes = [[9,2],[8,3],[7,4],[6,5],[5,6],[4,7],[3,8],[2,9],[1,10]], truckSize = 30",
        "output": "174"
      },
      {
        "input": "boxTypes = [[999,1],[1,999],[500,500],[250,250],[125,125]], truckSize = 1000",
        "output": "329248"
      },
      {
        "input": "boxTypes = [[1,5],[2,3],[3,2],[4,1]], truckSize = 10",
        "output": "21"
      },
      {
        "input": "boxTypes = [[50,10],[100,9],[150,8],[200,7],[250,6],[300,5]], truckSize = 800",
        "output": "5750"
      },
      {
        "input": "boxTypes = [[50,5],[30,6],[20,7]], truckSize = 100",
        "output": "570"
      },
      {
        "input": "boxTypes = [[3,100],[2,200],[1,300],[5,400]], truckSize = 5",
        "output": "2000"
      },
      {
        "input": "boxTypes = [[20,5],[15,10],[10,15],[5,20],[1,25]], truckSize = 35",
        "output": "445"
      },
      {
        "input": "boxTypes = [[1,100],[2,200],[3,300],[4,400],[5,500],[6,600],[7,700],[8,800],[9,900],[10,1000]], truckSize = 20",
        "output": "18900"
      },
      {
        "input": "boxTypes = [[10,10],[10,20],[10,30],[10,40],[10,50]], truckSize = 40",
        "output": "1400"
      },
      {
        "input": "boxTypes = [[50,10],[30,20],[20,30],[10,40],[5,50]], truckSize = 120",
        "output": "2350"
      },
      {
        "input": "boxTypes = [[200, 1], [100, 2], [150, 3], [50, 4], [250, 5]], truckSize = 500",
        "output": "2000"
      },
      {
        "input": "boxTypes = [[100,1],[50,2],[25,3],[10,4],[5,5],[1,6]], truckSize = 150",
        "output": "305"
      },
      {
        "input": "boxTypes = [[20, 25], [15, 30], [10, 35], [5, 40]], truckSize = 50",
        "output": "1500"
      },
      {
        "input": "boxTypes = [[10,10],[5,7],[15,5],[20,3]], truckSize = 25",
        "output": "185"
      },
      {
        "input": "boxTypes = [[50,10],[30,20],[20,30],[10,40]], truckSize = 100",
        "output": "2000"
      },
      {
        "input": "boxTypes = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50]], truckSize = 150",
        "output": "5500"
      },
      {
        "input": "boxTypes = [[1,900],[2,800],[3,700],[4,600],[5,500],[6,400],[7,300],[8,200],[9,100]], truckSize = 15",
        "output": "9500"
      },
      {
        "input": "boxTypes = [[1,999],[2,998],[3,997],[4,996],[5,995],[6,994],[7,993],[8,992],[9,991],[10,990]], truckSize = 20",
        "output": "19915"
      },
      {
        "input": "boxTypes = [[10,1],[9,2],[8,3],[7,4],[6,5],[5,6],[4,7],[3,8],[2,9],[1,10]], truckSize = 55",
        "output": "220"
      },
      {
        "input": "boxTypes = [[30,20],[20,15],[10,10],[40,5],[50,2]], truckSize = 100",
        "output": "1200"
      },
      {
        "input": "boxTypes = [[10,30],[20,20],[30,10],[40,5],[50,1]], truckSize = 60",
        "output": "1000"
      },
      {
        "input": "boxTypes = [[50,10],[40,20],[30,30],[20,40],[10,50]], truckSize = 120",
        "output": "3200"
      },
      {
        "input": "boxTypes = [[500, 1000], [400, 900], [300, 800], [200, 700], [100, 600]], truckSize = 1200",
        "output": "1100000"
      },
      {
        "input": "boxTypes = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10]], truckSize = 150",
        "output": "1450"
      },
      {
        "input": "boxTypes = [[100,10],[200,9],[150,8],[50,7],[25,6]], truckSize = 300",
        "output": "2800"
      },
      {
        "input": "boxTypes = [[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [6, 5], [7, 4], [8, 3], [9, 2], [10, 1]], truckSize = 50",
        "output": "215"
      },
      {
        "input": "boxTypes = [[500, 100], [300, 200], [200, 300], [100, 400]], truckSize = 800",
        "output": "180000"
      },
      {
        "input": "boxTypes = [[50,100],[25,200],[75,50],[100,250]], truckSize = 200",
        "output": "36250"
      },
      {
        "input": "boxTypes = [[1,999],[999,1]], truckSize = 1000",
        "output": "1998"
      },
      {
        "input": "boxTypes = [[7,9],[7,8],[7,7],[7,6],[7,5],[7,4],[7,3],[7,2],[7,1]], truckSize = 20",
        "output": "161"
      },
      {
        "input": "boxTypes = [[3,8],[5,7],[2,9],[6,10],[4,5]], truckSize = 15",
        "output": "130"
      },
      {
        "input": "boxTypes = [[5,10],[4,20],[3,30],[2,40],[1,50],[1,60],[1,70],[1,80],[1,90],[1,100]], truckSize = 20",
        "output": "750"
      },
      {
        "input": "boxTypes = [[50,20],[100,15],[150,10],[200,5],[250,1]], truckSize = 500",
        "output": "5000"
      },
      {
        "input": "boxTypes = [[1,1000],[2,999],[3,998],[4,997],[5,996]], truckSize = 15",
        "output": "14960"
      },
      {
        "input": "boxTypes = [[5,10],[5,20],[5,30],[5,40],[5,50],[5,60],[5,70],[5,80],[5,90],[5,100]], truckSize = 25",
        "output": "2000"
      },
      {
        "input": "boxTypes = [[10,1000],[9,900],[8,800],[7,700],[6,600],[5,500],[4,400],[3,300],[2,200],[1,100]], truckSize = 25",
        "output": "22900"
      },
      {
        "input": "boxTypes = [[100, 5], [200, 2], [50, 10], [150, 3]], truckSize = 350",
        "output": "1550"
      },
      {
        "input": "boxTypes = [[50, 100], [40, 99], [30, 98], [20, 97], [10, 96], [5, 95]], truckSize = 160",
        "output": "15275"
      },
      {
        "input": "boxTypes = [[1, 500], [1, 400], [1, 300], [1, 200], [1, 100]], truckSize = 2",
        "output": "900"
      },
      {
        "input": "boxTypes = [[3, 9], [2, 8], [5, 7], [1, 6], [4, 5]], truckSize = 15",
        "output": "104"
      },
      {
        "input": "boxTypes = [[10,20],[20,10],[30,5],[40,2],[50,1]], truckSize = 100",
        "output": "630"
      },
      {
        "input": "boxTypes = [[300,1],[200,2],[100,3],[50,4],[25,5]], truckSize = 700",
        "output": "1325"
      },
      {
        "input": "boxTypes = [[1, 1000], [2, 999], [3, 998], [4, 997], [5, 996]], truckSize = 15",
        "output": "14960"
      },
      {
        "input": "boxTypes = [[5,15],[10,12],[20,9],[30,7],[40,5],[50,3]], truckSize = 150",
        "output": "920"
      },
      {
        "input": "boxTypes = [[10,1],[20,2],[30,3],[40,4],[50,5],[60,6],[70,7],[80,8],[90,9],[100,10]], truckSize = 500",
        "output": "3740"
      },
      {
        "input": "boxTypes = [[5,15],[20,3],[5,20],[10,7]], truckSize = 25",
        "output": "260"
      },
      {
        "input": "boxTypes = [[100,10],[50,20],[20,30],[10,40]], truckSize = 200",
        "output": "3000"
      },
      {
        "input": "boxTypes = [[100,2],[200,3],[300,4],[400,5],[500,6]], truckSize = 1000",
        "output": "5400"
      },
      {
        "input": "boxTypes = [[100,1],[50,2],[25,3],[12,4],[6,5],[3,6],[1,7]], truckSize = 200",
        "output": "378"
      },
      {
        "input": "boxTypes = [[50,10],[40,9],[30,8],[20,7],[10,6],[5,5],[1,4]], truckSize = 160",
        "output": "1329"
      },
      {
        "input": "boxTypes = [[100,500],[50,1000],[10,2000]], truckSize = 200",
        "output": "120000"
      },
      {
        "input": "boxTypes = [[10,10],[9,9],[8,8],[7,7],[6,6],[5,5],[4,4],[3,3],[2,2],[1,1]], truckSize = 50",
        "output": "374"
      },
      {
        "input": "boxTypes = [[10,10],[20,20],[30,30],[40,40],[50,50],[60,60],[70,70],[80,80],[90,90],[100,100]], truckSize = 500",
        "output": "37400"
      },
      {
        "input": "boxTypes = [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10]], truckSize = 10",
        "output": "55"
      },
      {
        "input": "boxTypes = [[1,500],[2,400],[3,300],[4,200],[5,100]], truckSize = 10",
        "output": "3000"
      },
      {
        "input": "boxTypes = [[30,4],[10,20],[15,5]], truckSize = 50",
        "output": "375"
      },
      {
        "input": "boxTypes = [[100,10],[200,9],[300,8],[400,7]], truckSize = 1000",
        "output": "8000"
      },
      {
        "input": "boxTypes = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50]], truckSize = 1",
        "output": "50"
      },
      {
        "input": "boxTypes = [[10,100],[5,200],[3,300],[2,400],[1,500]], truckSize = 20",
        "output": "4100"
      },
      {
        "input": "boxTypes = [[10,5],[5,10],[15,3]], truckSize = 18",
        "output": "109"
      },
      {
        "input": "boxTypes = [[10,5],[20,8],[30,2],[5,9]], truckSize = 40",
        "output": "265"
      },
      {
        "input": "boxTypes = [[10,10],[20,9],[30,8],[40,7],[50,6],[60,5],[70,4],[80,3],[90,2],[100,1]], truckSize = 250",
        "output": "1560"
      },
      {
        "input": "boxTypes = [[10,1],[10,2],[10,3],[10,4],[10,5]], truckSize = 30",
        "output": "120"
      },
      {
        "input": "boxTypes = [[1,1000],[2,900],[3,800],[4,700],[5,600],[6,500],[7,400],[8,300],[9,200],[10,100]], truckSize = 15",
        "output": "11000"
      },
      {
        "input": "boxTypes = [[10,100],[20,200],[30,300],[40,400],[50,500],[60,600],[70,700],[80,800],[90,900]], truckSize = 300",
        "output": "230000"
      },
      {
        "input": "boxTypes = [[500,500],[500,500],[500,500]], truckSize = 1000",
        "output": "500000"
      },
      {
        "input": "boxTypes = [[100, 1], [200, 2], [300, 3], [400, 4], [500, 5]], truckSize = 1000",
        "output": "4400"
      },
      {
        "input": "boxTypes = [[50, 20], [30, 15], [40, 10], [20, 5]], truckSize = 100",
        "output": "1650"
      },
      {
        "input": "boxTypes = [[10, 5], [20, 3], [30, 4], [40, 2], [50, 1]], truckSize = 100",
        "output": "310"
      },
      {
        "input": "boxTypes = [[10,500],[20,450],[30,400],[40,350],[50,300],[60,250],[70,200],[80,150],[90,100],[100,50]], truckSize = 200",
        "output": "67500"
      },
      {
        "input": "boxTypes = [[3,2],[2,5],[6,1],[10,3]], truckSize = 12",
        "output": "40"
      },
      {
        "input": "boxTypes = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], truckSize = 30",
        "output": "266"
      },
      {
        "input": "boxTypes = [[5,1],[4,2],[3,3],[2,4],[1,5],[10,6],[9,7],[8,8],[7,9],[6,10]], truckSize = 50",
        "output": "340"
      },
      {
        "input": "boxTypes = [[100,10],[200,5],[300,1]], truckSize = 500",
        "output": "2200"
      },
      {
        "input": "boxTypes = [[1,100],[10,90],[100,80],[1000,70],[10000,60]], truckSize = 5000",
        "output": "312340"
      },
      {
        "input": "boxTypes = [[10,5],[9,4],[8,3],[7,2],[6,1]], truckSize = 20",
        "output": "89"
      },
      {
        "input": "boxTypes = [[100,1],[100,2],[100,3],[100,4],[100,5]], truckSize = 250",
        "output": "1050"
      },
      {
        "input": "boxTypes = [[50, 10], [50, 20], [50, 30], [50, 40], [50, 50]], truckSize = 150",
        "output": "6000"
      },
      {
        "input": "boxTypes = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]], truckSize = 15",
        "output": "145"
      },
      {
        "input": "boxTypes = [[50, 1], [200, 2], [100, 3], [30, 4], [10, 5]], truckSize = 250",
        "output": "690"
      },
      {
        "input": "boxTypes = [[1,1000],[1,999],[1,998],[1,997],[1,996],[1,995],[1,994],[1,993],[1,992],[1,991]], truckSize = 10",
        "output": "9955"
      },
      {
        "input": "boxTypes = [[10,100],[20,90],[30,80],[40,70],[50,60]], truckSize = 200",
        "output": "11000"
      },
      {
        "input": "boxTypes = [[100,100],[90,90],[80,80],[70,70],[60,60],[50,50]], truckSize = 500",
        "output": "35500"
      },
      {
        "input": "boxTypes = [[20,1],[20,2],[20,3],[20,4],[20,5],[20,6],[20,7],[20,8],[20,9],[20,10]], truckSize = 100",
        "output": "800"
      }
    ]
  },
  {
    "id": 69,
    "difficulty": "Easy",
    "tags": [
      "Math",
      "Binary Search"
    ],
    "problemDescription": "Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\nYou must not use any built-in exponent function or operator.\n\nFor example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n\n\u00a0\nExample 1:\n\nInput: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2, so we return 2.\n\nExample 2:\n\nInput: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n\n\u00a0\nConstraints:\n\n0 <= x <= 231 - 1\n\n",
    "starterCode": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        ",
    "testCases": [
      {
        "input": "x = 2147483647",
        "output": "46340"
      },
      {
        "input": "x = 26",
        "output": "5"
      },
      {
        "input": "x = 4",
        "output": "2"
      },
      {
        "input": "x = 1",
        "output": "1"
      },
      {
        "input": "x = 25",
        "output": "5"
      },
      {
        "input": "x = 0",
        "output": "0"
      },
      {
        "input": "x = 101",
        "output": "10"
      },
      {
        "input": "x = 100",
        "output": "10"
      },
      {
        "input": "x = 8",
        "output": "2"
      },
      {
        "input": "x = 1025",
        "output": "32"
      },
      {
        "input": "x = 10",
        "output": "3"
      },
      {
        "input": "x = 1234567890123456789",
        "output": "1111111106"
      },
      {
        "input": "x = 40000000000",
        "output": "200000"
      },
      {
        "input": "x = 18014398509481984",
        "output": "134217728"
      },
      {
        "input": "x = 16384",
        "output": "128"
      },
      {
        "input": "x = 1000",
        "output": "31"
      },
      {
        "input": "x = 1524157875",
        "output": "39040"
      },
      {
        "input": "x = 2147483646",
        "output": "46340"
      },
      {
        "input": "x = 99",
        "output": "9"
      },
      {
        "input": "x = 4294967296",
        "output": "65536"
      },
      {
        "input": "x = 225",
        "output": "15"
      },
      {
        "input": "x = 1522756",
        "output": "1234"
      },
      {
        "input": "x = 17",
        "output": "4"
      },
      {
        "input": "x = 2147395600",
        "output": "46340"
      },
      {
        "input": "x = 15",
        "output": "3"
      },
      {
        "input": "x = 18446744073709551615",
        "output": "4294967295"
      },
      {
        "input": "x = 16777215",
        "output": "4095"
      },
      {
        "input": "x = 1000000",
        "output": "1000"
      },
      {
        "input": "x = 18014398509481983",
        "output": "134217727"
      },
      {
        "input": "x = 1000000001",
        "output": "31622"
      },
      {
        "input": "x = 169",
        "output": "13"
      },
      {
        "input": "x = 150",
        "output": "12"
      },
      {
        "input": "x = 2",
        "output": "1"
      },
      {
        "input": "x = 141421356237",
        "output": "376060"
      },
      {
        "input": "x = 10000",
        "output": "100"
      },
      {
        "input": "x = 4294967295",
        "output": "65535"
      },
      {
        "input": "x = 361",
        "output": "19"
      },
      {
        "input": "x = 30",
        "output": "5"
      },
      {
        "input": "x = 987654321",
        "output": "31426"
      },
      {
        "input": "x = 999999999",
        "output": "31622"
      },
      {
        "input": "x = 499999999",
        "output": "22360"
      },
      {
        "input": "x = 2048",
        "output": "45"
      },
      {
        "input": "x = 1024",
        "output": "32"
      },
      {
        "input": "x = 1048575",
        "output": "1023"
      },
      {
        "input": "x = 16777216",
        "output": "4096"
      },
      {
        "input": "x = 256",
        "output": "16"
      },
      {
        "input": "x = 131072",
        "output": "362"
      },
      {
        "input": "x = 2097152",
        "output": "1448"
      },
      {
        "input": "x = 441",
        "output": "21"
      },
      {
        "input": "x = 1048576",
        "output": "1024"
      },
      {
        "input": "x = 65536",
        "output": "256"
      },
      {
        "input": "x = 10000000",
        "output": "3162"
      },
      {
        "input": "x = 49",
        "output": "7"
      },
      {
        "input": "x = 144",
        "output": "12"
      },
      {
        "input": "x = 121",
        "output": "11"
      },
      {
        "input": "x = 1234567890123456788",
        "output": "1111111106"
      },
      {
        "input": "x = 4096",
        "output": "64"
      },
      {
        "input": "x = 196",
        "output": "14"
      },
      {
        "input": "x = 9223372036854775807",
        "output": "3037000499"
      },
      {
        "input": "x = 123456789",
        "output": "11111"
      },
      {
        "input": "x = 289",
        "output": "17"
      },
      {
        "input": "x = 324",
        "output": "18"
      },
      {
        "input": "x = 24",
        "output": "4"
      },
      {
        "input": "x = 16",
        "output": "4"
      },
      {
        "input": "x = 1000000000",
        "output": "31622"
      },
      {
        "input": "x = 3",
        "output": "1"
      },
      {
        "input": "x = 36028797018963968",
        "output": "189812531"
      }
    ]
  },
  {
    "id": 2231,
    "difficulty": "Easy",
    "tags": [
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "You are given a positive integer num. You may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits).\nReturn the largest possible value of num after any number of swaps.\n\u00a0\nExample 1:\n\nInput: num = 1234\nOutput: 3412\nExplanation: Swap the digit 3 with the digit 1, this results in the number 3214.\nSwap the digit 2 with the digit 4, this results in the number 3412.\nNote that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.\nAlso note that we may not swap the digit 4 with the digit 1 since they are of different parities.\n\nExample 2:\n\nInput: num = 65875\nOutput: 87655\nExplanation: Swap the digit 8 with the digit 6, this results in the number 85675.\nSwap the first digit 5 with the digit 7, this results in the number 87655.\nNote that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.\n\n\u00a0\nConstraints:\n\n1 <= num <= 109\n\n",
    "starterCode": "class Solution:\n    def largestInteger(self, num: int) -> int:\n        ",
    "testCases": [
      {
        "input": "num = 24680",
        "output": "86420"
      },
      {
        "input": "num = 987654321",
        "output": "987654321"
      },
      {
        "input": "num = 13524687",
        "output": "75386421"
      },
      {
        "input": "num = 1000000",
        "output": "1000000"
      },
      {
        "input": "num = 2222",
        "output": "2222"
      },
      {
        "input": "num = 222222",
        "output": "222222"
      },
      {
        "input": "num = 111111",
        "output": "111111"
      },
      {
        "input": "num = 1111",
        "output": "1111"
      },
      {
        "input": "num = 975318642",
        "output": "975318642"
      },
      {
        "input": "num = 13579",
        "output": "97531"
      },
      {
        "input": "num = 2468",
        "output": "8642"
      },
      {
        "input": "num = 135246",
        "output": "531642"
      },
      {
        "input": "num = 111",
        "output": "111"
      },
      {
        "input": "num = 1234",
        "output": "3412"
      },
      {
        "input": "num = 65875",
        "output": "87655"
      },
      {
        "input": "num = 1919191919",
        "output": "9999911111"
      },
      {
        "input": "num = 9753186420",
        "output": "9753186420"
      },
      {
        "input": "num = 1234567890123456789",
        "output": "9898767654543232101"
      },
      {
        "input": "num = 8642086420",
        "output": "8866442200"
      },
      {
        "input": "num = 5432109876",
        "output": "9876543210"
      },
      {
        "input": "num = 31415926535",
        "output": "95655342311"
      },
      {
        "input": "num = 1111111111",
        "output": "1111111111"
      },
      {
        "input": "num = 13579246801357924680",
        "output": "99775886645331142200"
      },
      {
        "input": "num = 2222222222",
        "output": "2222222222"
      },
      {
        "input": "num = 1928374655",
        "output": "9786554231"
      },
      {
        "input": "num = 111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999",
        "output": "999999999988888888887777777777666666666655555555554444444444333333333322222222221111111111"
      },
      {
        "input": "num = 1010101010",
        "output": "1010101010"
      },
      {
        "input": "num = 198765432",
        "output": "978563412"
      },
      {
        "input": "num = 1357913579",
        "output": "9977553311"
      },
      {
        "input": "num = 10203040506070809",
        "output": "98647200500030001"
      },
      {
        "input": "num = 1000000000",
        "output": "1000000000"
      },
      {
        "input": "num = 123456789",
        "output": "987654321"
      },
      {
        "input": "num = 9876543210",
        "output": "9876543210"
      },
      {
        "input": "num = 111333555777",
        "output": "777555333111"
      },
      {
        "input": "num = 333111555777",
        "output": "777555333111"
      },
      {
        "input": "num = 222444666888",
        "output": "888666444222"
      },
      {
        "input": "num = 973518642",
        "output": "975318642"
      },
      {
        "input": "num = 8282828282",
        "output": "8888822222"
      },
      {
        "input": "num = 1000000001",
        "output": "1000000001"
      },
      {
        "input": "num = 1234567890987654321",
        "output": "9898767654543232101"
      },
      {
        "input": "num = 999888777666555444333222111000",
        "output": "999888777666555444333222111000"
      },
      {
        "input": "num = 8246035791",
        "output": "8642097531"
      },
      {
        "input": "num = 5656565656565656565",
        "output": "5656565656565656565"
      },
      {
        "input": "num = 973159731",
        "output": "997753311"
      },
      {
        "input": "num = 1234567890",
        "output": "9876543210"
      },
      {
        "input": "num = 111333555777999",
        "output": "999777555333111"
      },
      {
        "input": "num = 543210987654321",
        "output": "987654543232101"
      },
      {
        "input": "num = 908070605040302010",
        "output": "986472005000300010"
      },
      {
        "input": "num = 8642097531",
        "output": "8642097531"
      },
      {
        "input": "num = 191928283737",
        "output": "997788223311"
      },
      {
        "input": "num = 1098765432",
        "output": "9876543210"
      },
      {
        "input": "num = 100200400600800",
        "output": "186420000000000"
      },
      {
        "input": "num = 102030405060708090",
        "output": "986472005000300010"
      },
      {
        "input": "num = 2468024680",
        "output": "8866442200"
      },
      {
        "input": "num = 987654321987654321",
        "output": "989876765543432121"
      },
      {
        "input": "num = 59876543210",
        "output": "97856543210"
      },
      {
        "input": "num = 2040608000",
        "output": "8642000000"
      },
      {
        "input": "num = 555444333222111",
        "output": "555444333222111"
      },
      {
        "input": "num = 5555555555",
        "output": "5555555555"
      },
      {
        "input": "num = 99887766554433221100",
        "output": "99887766554433221100"
      },
      {
        "input": "num = 2468135790",
        "output": "8642975310"
      },
      {
        "input": "num = 1133557799",
        "output": "9977553311"
      },
      {
        "input": "num = 111222333444555666777888999",
        "output": "999888777666555444333222111"
      },
      {
        "input": "num = 111222333444",
        "output": "333444111222"
      },
      {
        "input": "num = 7777777777",
        "output": "7777777777"
      },
      {
        "input": "num = 98765432101234567890",
        "output": "98987676545432321010"
      },
      {
        "input": "num = 9999999999",
        "output": "9999999999"
      },
      {
        "input": "num = 9876543211111",
        "output": "9876543211111"
      },
      {
        "input": "num = 1357924680",
        "output": "9753186420"
      },
      {
        "input": "num = 111122223333444455556666777788889999",
        "output": "999988887777666655554444333322221111"
      },
      {
        "input": "num = 1938765420",
        "output": "9758361420"
      },
      {
        "input": "num = 9735186420",
        "output": "9753186420"
      },
      {
        "input": "num = 987654321098765432109876543210",
        "output": "989898767676545454323232101010"
      },
      {
        "input": "num = 9999999999888888888877777777776666666666555555555544444444443333333333222222222211111111110000000000",
        "output": "9999999999888888888877777777776666666666555555555544444444443333333333222222222211111111110000000000"
      },
      {
        "input": "num = 2244668800",
        "output": "8866442200"
      },
      {
        "input": "num = 112233445566778899",
        "output": "998877665544332211"
      },
      {
        "input": "num = 2468013579",
        "output": "8642097531"
      },
      {
        "input": "num = 8080808080",
        "output": "8888800000"
      }
    ]
  },
  {
    "id": 94,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, return the inorder traversal of its nodes' values.\n\u00a0\nExample 1:\n\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\nExplanation:\n\n\nExample 2:\n\nInput: root = [1,2,3,4,5,null,8,null,null,6,7,9]\nOutput: [4,2,6,5,7,1,3,9,8]\nExplanation:\n\n\nExample 3:\n\nInput: root = []\nOutput: []\n\nExample 4:\n\nInput: root = [1]\nOutput: [1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow up: Recursive solution is trivial, could you do it iteratively?",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,5,null,8,null,null,6,7,9]",
        "output": "[4, 2, 6, 5, 7, 1, 3, 9, 8]"
      },
      {
        "input": "root = [1]",
        "output": "[1]"
      },
      {
        "input": "root = [1,null,2,3]",
        "output": "[1, 3, 2]"
      },
      {
        "input": "root = []",
        "output": "[]"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,12,null,18,28,32,null,45]",
        "output": "[5, 10, 12, 15, 20, 18, 25, 28, 30, 32, 35, 40, 45]"
      },
      {
        "input": "root = [3,1,4,null,2,null,null]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "root = [10,5,15,null,null,6,20]",
        "output": "[5, 10, 6, 15, 20]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18]",
        "output": "[3, 5, 7, 10, 15, 18]"
      },
      {
        "input": "root = [5,3,7,2,4,6,8,1]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,4,null,null,5]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [8,3,10,1,6,null,14,null,null,4,7,13]",
        "output": "[1, 3, 4, 6, 7, 8, 10, 13, 14]"
      },
      {
        "input": "root = [6,2,8,0,4,7,9,null,null,3,5]",
        "output": "[0, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "root = [8,4,12,2,6,10,14,1,3,5,7,9,11,13,15]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "root = [5,3,7,2,4,6,8,1,null,null,null,null,9]",
        "output": "[1, 2, 3, 4, 5, 6, 9, 7, 8]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,12,18,23,27,32,37,1,3,6,8,11,13,16,19,22,24,26,28,31,33,36,38]",
        "output": "[1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38]"
      },
      {
        "input": "root = [1,2,null,null,3,null,4,null,5]",
        "output": "[2, 3, 4, 5, 1]"
      },
      {
        "input": "root = [50,25,75,10,35,60,90,5,20,30,40,55,65,85,100]",
        "output": "[5, 10, 20, 25, 30, 35, 40, 50, 55, 60, 65, 75, 85, 90, 100]"
      },
      {
        "input": "root = [8,5,12,4,6,10,14,2,null,null,7,9,11,13,15]",
        "output": "[2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "root = [50,30,70,20,40,60,80,15,25,null,null,null,null,null,90]",
        "output": "[15, 20, 25, 30, 40, 50, 60, 70, 80, 90]"
      },
      {
        "input": "root = [5,1,8,null,4,null,null,null,3,null,6]",
        "output": "[1, 4, 3, 6, 5, 8]"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,null,25,35,47,null,null,11,14,23,37,null,null,null,null,48,null,49,51]",
        "output": "[49, 11, 51, 5, 14, 10, 23, 12, 37, 15, 20, 25, 30, 35, 40, 48, 47, 45, 50]"
      },
      {
        "input": "root = [9,6,15,5,8,12,20,2,7,null,11,14,18,1,null,null,4,null,null,null,null,10,13,null,null,null,null,null,null,null,16,17,19,null,null,null,null,null,null,null,21,null,null,null,null,null,null,22]",
        "output": "[2, 4, 5, 7, 6, 8, 11, 9, 10, 16, 14, 17, 13, 19, 12, 18, 15, 1, 20]"
      },
      {
        "input": "root = [5,3,7,2,4,6,8,1,null,null,null,null,null,9,null]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 9, 8]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,2,7,null,17,22,28,32,38]",
        "output": "[2, 5, 7, 10, 15, 17, 20, 22, 25, 28, 30, 32, 35, 38]"
      },
      {
        "input": "root = [3,1,2]",
        "output": "[1, 3, 2]"
      },
      {
        "input": "root = [8,5,10,3,6,null,12,null,null,null,null,11,14]",
        "output": "[3, 5, 6, 8, 10, 11, 12, 14]"
      },
      {
        "input": "root = [7,3,15,null,null,9,20]",
        "output": "[3, 7, 9, 15, 20]"
      },
      {
        "input": "root = [100,-50,null,-100,null,-75,null,-150,null,-200,null,-175,null,-225]",
        "output": "[-225, -175, -200, -150, -75, -100, -50, 100]"
      },
      {
        "input": "root = [5,4,6,null,3,null,null,null,2]",
        "output": "[4, 3, 2, 5, 6]"
      },
      {
        "input": "root = [5,3,8,1,4,7,9,0,2,6,null,null,10]",
        "output": "[0, 1, 2, 3, 6, 4, 5, 7, 10, 8, 9]"
      },
      {
        "input": "root = [2,1,3,4,5]",
        "output": "[4, 1, 5, 2, 3]"
      },
      {
        "input": "root = [7,3,15,null,null,null,20]",
        "output": "[3, 7, 15, 20]"
      },
      {
        "input": "root = [2,1,null,4,3]",
        "output": "[4, 1, 3, 2]"
      },
      {
        "input": "root = [2,1,3,4,5,null,null,null,null,null,6,7]",
        "output": "[4, 1, 5, 7, 6, 2, 3]"
      },
      {
        "input": "root = [7,3,9,null,4,8,10]",
        "output": "[3, 4, 7, 8, 9, 10]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,1,7,null,17,22,27,32,40]",
        "output": "[1, 5, 7, 10, 15, 17, 20, 22, 25, 27, 30, 32, 35, 40]"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,null,null,4,null,null,null,5]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [7,3,15,null,null,9,20,null,null,null,null,17]",
        "output": "[3, 7, 9, 15, 20]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "[4, 2, 5, 1, 6, 3, 7]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,null,6]",
        "output": "[1, 3, 5, 7, 6, 10, 15, 18]"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "[16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 22, 11, 23, 1, 24, 12, 25, 6, 13, 3, 14, 7, 15]"
      },
      {
        "input": "root = [50,25,75,10,30,60,80,5,15,27,35,55,65,77,85]",
        "output": "[5, 10, 15, 25, 27, 30, 35, 50, 55, 60, 65, 75, 77, 80, 85]"
      },
      {
        "input": "root = [-10,-20,-30,-40,null,-50,-60]",
        "output": "[-40, -20, -10, -50, -30, -60]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "root = [7,3,15,null,null,9,20,null,8,17,22]",
        "output": "[3, 7, 9, 8, 15, 17, 20, 22]"
      },
      {
        "input": "root = [2,1,3,null,4,null,null,null,5]",
        "output": "[1, 4, 5, 2, 3]"
      },
      {
        "input": "root = [7,3,15,null,null,null,9]",
        "output": "[3, 7, 15, 9]"
      },
      {
        "input": "root = [25,15,30,10,20,27,35,5,12,18,23,26,29,32,40]",
        "output": "[5, 10, 12, 15, 18, 20, 23, 25, 26, 27, 29, 30, 32, 35, 40]"
      },
      {
        "input": "root = [8,3,10,null,1,6,null,4,7,11,14]",
        "output": "[3, 4, 1, 7, 8, 11, 6, 14, 10]"
      },
      {
        "input": "root = [5,3,8,1,4,null,10,0,2,null,null,9,11]",
        "output": "[0, 1, 2, 3, 4, 5, 8, 9, 10, 11]"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,12,18,23,27,32,37,42,47,1,7,11,13,17,22,24,26,28,31,33,36,38,41,43,46,48]",
        "output": "[46, 47, 48, 5, 1, 10, 7, 12, 11, 15, 13, 18, 17, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43]"
      },
      {
        "input": "root = [5,3,8,1,4,7,9]",
        "output": "[1, 3, 4, 5, 7, 8, 9]"
      },
      {
        "input": "root = [5,1,4,null,null,3,6]",
        "output": "[1, 5, 3, 4, 6]"
      },
      {
        "input": "root = [100,50,150,25,75,125,175,10,35,60,90,110,140,160,190]",
        "output": "[10, 25, 35, 50, 60, 75, 90, 100, 110, 125, 140, 150, 160, 175, 190]"
      },
      {
        "input": "root = [10,5,15,null,null,12,20,11,14,13,18,17,19,16]",
        "output": "[5, 10, 17, 11, 19, 12, 16, 14, 15, 13, 20, 18]"
      },
      {
        "input": "root = [30,15,45,10,20,40,50,5,12,18,25,35,42,48,55,1,7,11,13,17,23,27,33,37,41,43,47,51,53,57]",
        "output": "[1, 5, 7, 10, 11, 12, 13, 15, 17, 18, 23, 20, 27, 25, 33, 30, 37, 35, 41, 40, 43, 42, 47, 45, 51, 48, 53, 50, 57, 55]"
      },
      {
        "input": "root = [1,null,2,null,null,null,3]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "[7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,3,7,13,17,23,27,33,37]",
        "output": "[3, 5, 7, 10, 13, 15, 17, 20, 23, 25, 27, 30, 33, 35, 37]"
      },
      {
        "input": "root = [10,5,15,3,7,13,18,1,null,6]",
        "output": "[1, 3, 5, 6, 7, 10, 13, 15, 18]"
      },
      {
        "input": "root = [3,1,4,null,2]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "root = [4,2,6,1,3,5,7,0,null,null,null,null,null,null,8]",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "input": "root = [1,3,2,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99]",
        "output": "[61, 29, 63, 13, 65, 31, 67, 5, 69, 33, 71, 15, 73, 35, 75, 3, 77, 37, 79, 17, 81, 39, 83, 7, 85, 41, 87, 19, 89, 43, 91, 1, 93, 45, 95, 21, 97, 47, 99, 9, 49, 23, 51, 2, 53, 25, 55, 11, 57, 27, 59]"
      },
      {
        "input": "root = [10,5,15,null,null,6,20,null,null,11,18,16,25]",
        "output": "[5, 10, 6, 15, 16, 11, 25, 20, 18]"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6]",
        "output": "[1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "root = [8,5,15,3,7,12,18,1,4,6,9,11,13,17,19]",
        "output": "[1, 3, 4, 5, 6, 7, 9, 8, 11, 12, 13, 15, 17, 18, 19]"
      },
      {
        "input": "root = [40,20,60,10,30,50,70,5,15,25,35,45,55,65,75,2,7,12,18,23,27,32,37,42,47,52,57,62,67,72,77,1,3,6,8,11,13,16,19,22,24,26,28,31,33,36,38,41,43,46,48,51,53,56,58,61,63,66,68,71,73,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]",
        "output": "[79, 1, 80, 2, 81, 3, 82, 5, 83, 6, 84, 7, 85, 8, 86, 10, 87, 11, 88, 12, 89, 13, 90, 15, 91, 16, 92, 18, 93, 19, 94, 20, 95, 22, 96, 23, 97, 24, 98, 25, 99, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78]"
      },
      {
        "input": "root = [4,2,6,1,3,5,7]",
        "output": "[1, 2, 3, 4, 5, 6, 7]"
      },
      {
        "input": "root = [10,null,15,12,20,null,null,11,14,13,18,null,null,null,null,null,19,17]",
        "output": "[10, 12, 15, 13, 11, 18, 17, 19, 20, 14]"
      },
      {
        "input": "root = [1,null,2,null,null,3,null,null,null,4,null,null,null,5,null,null,null,6,null,null,null,7]",
        "output": "[1, 2]"
      },
      {
        "input": "root = [8,5,12,4,6,9,13,2,null,null,7,8,11,10]",
        "output": "[2, 4, 5, 6, 7, 8, 8, 9, 11, 12, 10, 13]"
      },
      {
        "input": "root = [3,1,4,null,2,null,null,null,null,null,5]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "root = [100,-100,null,-99,null,-98,null,-97,null,-96,null,-95,null,-94,null,-93,null,-92,null,-91,null,-90,null,-89,null,-88,null,-87,null,-86,null,-85,null,-84,null,-83,null,-82,null,-81,null,-80,null,-79,null,-78,null,-77,null,-76,null,-75,null,-74,null,-73,null,-72,null,-71,null,-70,null,-69,null,-68,null,-67,null,-66,null,-65,null,-64,null,-63,null,-62,null,-61,null,-60,null,-59,null,-58,null,-57,null,-56,null,-55,null,-54,null,-53,null,-52,null,-51,null,-50,null,-49,null,-48,null,-47,null,-46,null,-45,null,-44,null,-43,null,-42,null,-41,null,-40,null,-39,null,-38,null,-37,null,-36,null,-35,null,-34,null,-33,null,-32,null,-31,null,-30,null,-29,null,-28,null,-27,null,-26,null,-25,null,-24,null,-23,null,-22,null,-21,null,-20,null,-19,null,-18,null,-17,null,-16,null,-15,null,-14,null,-13,null,-12,null,-11,null,-10,null,-9,null,-8,null,-7,null,-6,null,-5,null,-4,null,-3,null,-2,null,-1]",
        "output": "[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, 100]"
      },
      {
        "input": "root = [4,2,null,1,3]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "root = [15,10,20,8,12,16,25,6,9,11,13,14,17,22,28,5,7,null,null,null,null,null,null,18,21,23,24,26,27,null,null,null,null,null,null,19]",
        "output": "[5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 19, 18, 14, 21, 16, 23, 17, 24, 20, 26, 22, 27, 25, 28]"
      },
      {
        "input": "root = [3,1,5,0,2,4,6]",
        "output": "[0, 1, 2, 3, 4, 5, 6]"
      },
      {
        "input": "root = [25,15,35,10,20,30,40,5,12,null,22,28,38,null,null,null,14,null,18,null,32,null,null,null,null,29,null,33]",
        "output": "[5, 29, 14, 10, 12, 33, 18, 15, 20, 22, 32, 25, 28, 30, 38, 35, 40]"
      },
      {
        "input": "root = [8,3,10,1,5,null,14,null,null,4,7,12,15,11,13]",
        "output": "[1, 3, 11, 4, 13, 5, 7, 8, 10, 12, 14, 15]"
      }
    ]
  },
  {
    "id": 977,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "problemDescription": "Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.\n\u00a0\nExample 1:\n\nInput: nums = [-4,-1,0,3,10]\nOutput: [0,1,9,16,100]\nExplanation: After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n\nExample 2:\n\nInput: nums = [-7,-3,2,3,11]\nOutput: [4,9,9,49,121]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums is sorted in non-decreasing order.\n\n\u00a0\nFollow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?",
    "starterCode": "class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [-2,-1,0,1,2]",
        "output": "[0, 1, 1, 4, 4]"
      },
      {
        "input": "nums = [0,1,2,3,4,5]",
        "output": "[0, 1, 4, 9, 16, 25]"
      },
      {
        "input": "nums = [-1,-1,0,0,1,1]",
        "output": "[0, 0, 1, 1, 1, 1]"
      },
      {
        "input": "nums = [-1]",
        "output": "[1]"
      },
      {
        "input": "nums = [-4,-4,-3,-2,-1,0,1,2,3,4]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 16, 16]"
      },
      {
        "input": "nums = [-3,0,3]",
        "output": "[0, 9, 9]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
      },
      {
        "input": "nums = [-7,-3,2,3,11]",
        "output": "[4, 9, 9, 49, 121]"
      },
      {
        "input": "nums = [-5,-3,-1,0,1,2,3]",
        "output": "[0, 1, 1, 4, 9, 9, 25]"
      },
      {
        "input": "nums = [-10,-5,0,5,10]",
        "output": "[0, 25, 25, 100, 100]"
      },
      {
        "input": "nums = [-5,-4,-3,-2,-1]",
        "output": "[1, 4, 9, 16, 25]"
      },
      {
        "input": "nums = [0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "[1, 4, 9, 16, 25]"
      },
      {
        "input": "nums = [0,1,2,3,4]",
        "output": "[0, 1, 4, 9, 16]"
      },
      {
        "input": "nums = [-9,-7,-5,-3,-1,2,4,6,8]",
        "output": "[1, 4, 9, 16, 25, 36, 49, 64, 81]"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]",
        "output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
      },
      {
        "input": "nums = [-8,-6,-4,-2,0,1,3,5,7]",
        "output": "[0, 1, 4, 9, 16, 25, 36, 49, 64]"
      },
      {
        "input": "nums = [0]",
        "output": "[0]"
      },
      {
        "input": "nums = [0,0,0,0]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "nums = [-10000,10000]",
        "output": "[100000000, 100000000]"
      },
      {
        "input": "nums = [-5,-3,-1,0,2,4]",
        "output": "[0, 1, 4, 9, 16, 25]"
      },
      {
        "input": "nums = [-5,-3,-2,-1]",
        "output": "[1, 4, 9, 25]"
      },
      {
        "input": "nums = [-2,-2,2,2]",
        "output": "[4, 4, 4, 4]"
      },
      {
        "input": "nums = [-10,-8,-6,-4,-2]",
        "output": "[4, 16, 36, 64, 100]"
      },
      {
        "input": "nums = [-10000,0,10000]",
        "output": "[0, 100000000, 100000000]"
      },
      {
        "input": "nums = [-4,-1,0,3,10]",
        "output": "[0, 1, 9, 16, 100]"
      },
      {
        "input": "nums = [-3,-2,-1,0,1,2,3]",
        "output": "[0, 1, 1, 4, 4, 9, 9]"
      },
      {
        "input": "nums = [-5,-3,-1,0,1,3,5]",
        "output": "[0, 1, 1, 9, 9, 25, 25]"
      },
      {
        "input": "nums = [-1,0,1]",
        "output": "[0, 1, 1]"
      },
      {
        "input": "nums = [-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 16, 25, 25, 36, 36]"
      },
      {
        "input": "nums = [-2, -2, -2, -1, 0, 0, 1, 2, 2, 2]",
        "output": "[0, 0, 1, 1, 4, 4, 4, 4, 4, 4]"
      },
      {
        "input": "nums = [-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 16, 25, 25, 36, 36, 49, 49, 64, 64, 81, 81]"
      },
      {
        "input": "nums = [-3, -2, -1, 0, 0, 0, 1, 2, 3]",
        "output": "[0, 0, 0, 1, 1, 4, 4, 9, 9]"
      },
      {
        "input": "nums = [-10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, -9989, -9988, -9987, -9986, -9985, -9984, -9983, -9982, -9981, -9980, -9979, -9978, -9977, -9976, -9975, -9974, -9973, -9972, -9971, -9970, -9969, -9968, -9967, -9966, -9965, -9964, -9963, -9962, -9961, -9960, -9959, -9958, -9957, -9956, -9955, -9954, -9953, -9952, -9951, -9950, -9949, -9948, -9947, -9946, -9945, -9944, -9943, -9942, -9941, -9940, -9939, -9938, -9937, -9936, -9935, -9934, -9933, -9932, -9931, -9930, -9929, -9928, -9927, -9926, -9925, -9924, -9923, -9922, -9921, -9920, -9919, -9918, -9917, -9916, -9915, -9914, -9913, -9912, -9911, -9910, -9909, -9908, -9907, -9906, -9905, -9904, -9903, -9902, -9901, -9900, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000, 98010000, 98029801, 98049604, 98069409, 98089216, 98109025, 98128836, 98148649, 98168464, 98188281, 98208100, 98227921, 98247744, 98267569, 98287396, 98307225, 98327056, 98346889, 98366724, 98386561, 98406400, 98426241, 98446084, 98465929, 98485776, 98505625, 98525476, 98545329, 98565184, 98585041, 98604900, 98624761, 98644624, 98664489, 98684356, 98704225, 98724096, 98743969, 98763844, 98783721, 98803600, 98823481, 98843364, 98863249, 98883136, 98903025, 98922916, 98942809, 98962704, 98982601, 99002500, 99022401, 99042304, 99062209, 99082116, 99102025, 99121936, 99141849, 99161764, 99181681, 99201600, 99221521, 99241444, 99261369, 99281296, 99301225, 99321156, 99341089, 99361024, 99380961, 99400900, 99420841, 99440784, 99460729, 99480676, 99500625, 99520576, 99540529, 99560484, 99580441, 99600400, 99620361, 99640324, 99660289, 99680256, 99700225, 99720196, 99740169, 99760144, 99780121, 99800100, 99820081, 99840064, 99860049, 99880036, 99900025, 99920016, 99940009, 99960004, 99980001, 100000000]"
      },
      {
        "input": "nums = [-100, -50, -25, -10, -5, 0, 5, 10, 25, 50, 100]",
        "output": "[0, 25, 25, 100, 100, 625, 625, 2500, 2500, 10000, 10000]"
      },
      {
        "input": "nums = [-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[0, 25, 25, 100, 100, 225, 400, 625, 900, 1225, 1600, 2025, 2500]"
      },
      {
        "input": "nums = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums = [-100, -50, -20, -10, -5, -1, 0, 1, 5, 10, 20, 50, 100]",
        "output": "[0, 1, 1, 25, 25, 100, 100, 400, 400, 2500, 2500, 10000, 10000]"
      },
      {
        "input": "nums = [-10000, -9000, -8000, -7000, -6000, -5000, -4000, -3000, -2000, -1000, 0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]",
        "output": "[0, 1000000, 1000000, 4000000, 4000000, 9000000, 9000000, 16000000, 16000000, 25000000, 25000000, 36000000, 36000000, 49000000, 49000000, 64000000, 64000000, 81000000, 81000000, 100000000, 100000000]"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 1, 4, 4, 9, 9, 16, 16, 25, 25, 36, 36, 49, 49, 64, 64, 81, 81, 100, 100]"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999]",
        "output": "[99800100, 99800100, 99820081, 99820081, 99840064, 99840064, 99860049, 99860049, 99880036, 99880036, 99900025, 99900025, 99920016, 99920016, 99940009, 99940009, 99960004, 99960004, 99980001, 99980001]"
      },
      {
        "input": "nums = [-1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1]",
        "output": "[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums = [-1, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]",
        "output": "[0, 1, 1, 1, 1, 4, 4, 4, 9, 9, 9, 16, 16, 16, 25, 25, 25]"
      },
      {
        "input": "nums = [-5, -3, -1, 2, 4, 6, 8]",
        "output": "[1, 4, 9, 16, 25, 36, 64]"
      },
      {
        "input": "nums = [-10, -5, -1, 0, 1, 5, 10]",
        "output": "[0, 1, 1, 25, 25, 100, 100]"
      },
      {
        "input": "nums = [-5000, -1000, -500, -100, -50, -10, -5, -1, 0, 1, 5, 10, 50, 100, 500, 1000, 5000]",
        "output": "[0, 1, 1, 25, 25, 100, 100, 2500, 2500, 10000, 10000, 250000, 250000, 1000000, 1000000, 25000000, 25000000]"
      },
      {
        "input": "nums = [-10000, -9000, -8000, -7000, -6000, -5000, 0, 5000, 6000, 7000, 8000, 9000, 10000]",
        "output": "[0, 25000000, 25000000, 36000000, 36000000, 49000000, 49000000, 64000000, 64000000, 81000000, 81000000, 100000000, 100000000]"
      },
      {
        "input": "nums = [-5000, -2500, -1250, -625, -312, -156, -78, -39, 0, 39, 78, 156, 312, 625, 1250, 2500, 5000]",
        "output": "[0, 1521, 1521, 6084, 6084, 24336, 24336, 97344, 97344, 390625, 390625, 1562500, 1562500, 6250000, 6250000, 25000000, 25000000]"
      },
      {
        "input": "nums = [-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 81, 64, 49, 36, 25, 16, 9, 4, 1, 0, 1, 1, 4, 4, 9, 9, 16, 16, 25, 25, 36, 36, 49, 49, 64, 64, 81, 81, 100]"
      },
      {
        "input": "nums = [-9, -8, -7, -6, -5, -4, -3, -2, -1]",
        "output": "[1, 4, 9, 16, 25, 36, 49, 64, 81]"
      },
      {
        "input": "nums = [-10, -5, -1, 0, 1, 2, 3, 4, 5, 10]",
        "output": "[0, 1, 1, 4, 9, 16, 25, 25, 100, 100]"
      },
      {
        "input": "nums = [-1, 0, 1]",
        "output": "[0, 1, 1]"
      },
      {
        "input": "nums = [-1, 0, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000]",
        "output": "[0, 1, 1, 100, 10000, 1000000, 100000000, 10000000000, 1000000000000, 100000000000000]"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, 0, 1, 2, 3, 4, 5]",
        "output": "[0, 1, 4, 9, 16, 25, 99800100, 99820081, 99840064, 99860049, 99880036, 99900025, 99920016, 99940009, 99960004, 99980001]"
      },
      {
        "input": "nums = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[0, 25, 25, 100, 100, 225, 225, 400, 400, 625, 900, 1225, 1600, 2025, 2500]"
      },
      {
        "input": "nums = [-9999, -5000, -1000, -500, -100, -50, -10, -5, -2, -1, 0, 1, 2, 5, 10, 50, 100, 500, 1000, 5000, 9999]",
        "output": "[0, 1, 1, 4, 4, 25, 25, 100, 100, 2500, 2500, 10000, 10000, 250000, 250000, 1000000, 1000000, 25000000, 25000000, 99980001, 99980001]"
      },
      {
        "input": "nums = [-2,-2,-2,-1,0,0,0,1,2,2,2]",
        "output": "[0, 0, 0, 1, 1, 4, 4, 4, 4, 4, 4]"
      },
      {
        "input": "nums = [-100, -50, -25, -10, -5, -1, 0, 1, 5, 10, 25, 50, 100]",
        "output": "[0, 1, 1, 25, 25, 100, 100, 625, 625, 2500, 2500, 10000, 10000]"
      },
      {
        "input": "nums = [-10000, 0, 10000]",
        "output": "[0, 100000000, 100000000]"
      },
      {
        "input": "nums = [-10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991]",
        "output": "[99820081, 99840064, 99860049, 99880036, 99900025, 99920016, 99940009, 99960004, 99980001, 100000000]"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, -9989, -9988, -9987, -9986, -9985, -9984, -9983, -9982, -9981, -9980, 0, 9980, 9981, 9982, 9983, 9984, 9985, 9986, 9987, 9988, 9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999]",
        "output": "[0, 99600400, 99600400, 99620361, 99620361, 99640324, 99640324, 99660289, 99660289, 99680256, 99680256, 99700225, 99700225, 99720196, 99720196, 99740169, 99740169, 99760144, 99760144, 99780121, 99780121, 99800100, 99800100, 99820081, 99820081, 99840064, 99840064, 99860049, 99860049, 99880036, 99880036, 99900025, 99900025, 99920016, 99920016, 99940009, 99940009, 99960004, 99960004, 99980001, 99980001]"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990]",
        "output": "[99800100, 99820081, 99840064, 99860049, 99880036, 99900025, 99920016, 99940009, 99960004, 99980001]"
      },
      {
        "input": "nums = [-10000, -5000, -1000, -500, -100, -50, -10, -5, -1, 0, 1, 5, 10, 50, 100, 500, 1000, 5000, 10000]",
        "output": "[0, 1, 1, 25, 25, 100, 100, 2500, 2500, 10000, 10000, 250000, 250000, 1000000, 1000000, 25000000, 25000000, 100000000, 100000000]"
      },
      {
        "input": "nums = [-20, -15, -10, -5, 0, 5, 10, 15, 20]",
        "output": "[0, 25, 25, 100, 100, 225, 225, 400, 400]"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, 0, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999]",
        "output": "[0, 99820081, 99820081, 99840064, 99840064, 99860049, 99860049, 99880036, 99880036, 99900025, 99900025, 99920016, 99920016, 99940009, 99940009, 99960004, 99960004, 99980001, 99980001]"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, 0, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999]",
        "output": "[0, 99800100, 99800100, 99820081, 99820081, 99840064, 99840064, 99860049, 99860049, 99880036, 99880036, 99900025, 99900025, 99920016, 99920016, 99940009, 99940009, 99960004, 99960004, 99980001, 99980001]"
      },
      {
        "input": "nums = [-100, -99, -98, -97, -96, -95, -94, -93, -92, -91]",
        "output": "[8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000]"
      },
      {
        "input": "nums = [-9999, 0, 9999]",
        "output": "[0, 99980001, 99980001]"
      },
      {
        "input": "nums = [-5000, -3000, -1000, 0, 1000, 3000, 5000]",
        "output": "[0, 1000000, 1000000, 9000000, 9000000, 25000000, 25000000]"
      },
      {
        "input": "nums = [-1, 0, 1, 0, -1, 0, 1, 0, -1, 0]",
        "output": "[0, 1, 0, 1, 0, 1, 0, 1, 0, 1]"
      },
      {
        "input": "nums = [-3, -2, -1, 0, 1, 2, 3, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 100, 400, 900, 1600, 2500, 3600, 4900, 6400, 8100, 10000]"
      },
      {
        "input": "nums = [-1000, -500, -100, -50, -10, -5, -1, 0, 1, 5, 10, 50, 100, 500, 1000]",
        "output": "[0, 1, 1, 25, 25, 100, 100, 2500, 2500, 10000, 10000, 250000, 250000, 1000000, 1000000]"
      },
      {
        "input": "nums = [-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 25, 36, 49, 64, 81, 100]"
      },
      {
        "input": "nums = [-1,-1,-1,0,0,0,1,1,1]",
        "output": "[0, 0, 0, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums = [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 1, 2, 3, 4, 5]",
        "output": "[1, 1, 4, 4, 9, 9, 16, 16, 25, 25]"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 99800100, 99820081, 99840064, 99860049, 99880036, 99900025, 99920016, 99940009, 99960004, 99980001]"
      },
      {
        "input": "nums = [-100,-50,-20,-10,-5,0,5,10,20,50,100]",
        "output": "[0, 25, 25, 100, 100, 400, 400, 2500, 2500, 10000, 10000]"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 16, 25, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]"
      },
      {
        "input": "nums = [-100, -50, -25, -10, -5, -2, 0, 2, 5, 10, 25, 50, 100]",
        "output": "[0, 4, 4, 25, 25, 100, 100, 625, 625, 2500, 2500, 10000, 10000]"
      },
      {
        "input": "nums = [-10,-5,0,5,10,-10,-5,0,5,10]",
        "output": "[0, 25, 100, 100, 25, 0, 25, 25, 100, 100]"
      },
      {
        "input": "nums = [-1000, -500, -100, -50, -10, -5, -2, -1, 0, 1, 2, 5, 10, 50, 100, 500, 1000]",
        "output": "[0, 1, 1, 4, 4, 25, 25, 100, 100, 2500, 2500, 10000, 10000, 250000, 250000, 1000000, 1000000]"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 16, 25, 25]"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 16, 25, 25, 36, 36, 49, 49, 64, 64, 81, 81, 100, 100]"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "nums = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 25, 36, 49, 64, 81]"
      },
      {
        "input": "nums = [-1,-1,-1,-1,-1,0,1,1,1,1,1]",
        "output": "[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums = [-50, -40, -30, -20, -10, -5, -1, 0, 1, 5, 10, 20, 30, 40, 50]",
        "output": "[0, 1, 1, 25, 25, 100, 100, 400, 400, 900, 900, 1600, 1600, 2500, 2500]"
      },
      {
        "input": "nums = [-10, -10, -10, -10, -10, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10]",
        "output": "[0, 0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]"
      },
      {
        "input": "nums = [-25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 16, 25, 25, 36, 36, 49, 49, 64, 64, 81, 81, 100, 100, 121, 121, 144, 144, 169, 169, 196, 196, 225, 225, 256, 256, 289, 289, 324, 324, 361, 361, 400, 400, 441, 441, 484, 484, 529, 529, 576, 576, 625, 625]"
      },
      {
        "input": "nums = [-5000, -4000, -3000, -2000, -1000, 0, 1000, 2000, 3000, 4000, 5000]",
        "output": "[0, 1000000, 1000000, 4000000, 4000000, 9000000, 9000000, 16000000, 16000000, 25000000, 25000000]"
      },
      {
        "input": "nums = [-999, -998, -997, -996, -995, -994, -993, -992, -991, -990, 0, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999]",
        "output": "[0, 980100, 980100, 982081, 982081, 984064, 984064, 986049, 986049, 988036, 988036, 990025, 990025, 992016, 992016, 994009, 994009, 996004, 996004, 998001, 998001]"
      },
      {
        "input": "nums = [-100, -90, -80, -70, -60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "[0, 100, 100, 400, 400, 900, 900, 1600, 1600, 2500, 2500, 3600, 3600, 4900, 4900, 6400, 6400, 8100, 8100, 10000, 10000]"
      },
      {
        "input": "nums = [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "[0, 10000, 10000, 40000, 40000, 90000, 90000, 160000, 160000, 250000, 250000, 360000, 360000, 490000, 490000, 640000, 640000, 810000, 810000, 1000000, 1000000]"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "[0, 1, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625]"
      },
      {
        "input": "nums = [-10, -5, -1, 0, 2, 5, 8]",
        "output": "[0, 1, 4, 25, 25, 64, 100]"
      },
      {
        "input": "nums = [-1, -1, 0, 1, 1]",
        "output": "[0, 1, 1, 1, 1]"
      },
      {
        "input": "nums = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]",
        "output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
      },
      {
        "input": "nums = [-100, -50, -25, -10, -5, 0, 1, 2, 5, 10, 25, 50, 100]",
        "output": "[0, 1, 4, 25, 25, 100, 100, 625, 625, 2500, 2500, 10000, 10000]"
      },
      {
        "input": "nums = [-5000, -4000, -3000, -2000, -1000, -500, -100, -50, -10, -1, 0, 1, 10, 50, 100, 500, 1000, 2000, 3000, 4000, 5000]",
        "output": "[0, 1, 1, 100, 100, 2500, 2500, 10000, 10000, 250000, 250000, 1000000, 1000000, 4000000, 4000000, 9000000, 9000000, 16000000, 16000000, 25000000, 25000000]"
      },
      {
        "input": "nums = [-3000, -2500, -2000, -1500, -1000, -500, -250, -100, -50, -25, -10, -5, -1, 0, 1, 5, 10, 25, 50, 100, 250, 500, 1000, 1500, 2000, 2500, 3000]",
        "output": "[0, 1, 1, 25, 25, 100, 100, 625, 625, 2500, 2500, 10000, 10000, 62500, 62500, 250000, 250000, 1000000, 1000000, 2250000, 2250000, 4000000, 4000000, 6250000, 6250000, 9000000, 9000000]"
      },
      {
        "input": "nums = [-1, -1, -1, 0, 0, 0, 1, 1, 1]",
        "output": "[0, 0, 0, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums = [-1000, -500, -250, -100, -50, -25, -10, -5, -2, -1, 0, 1, 2, 5, 10, 25, 50, 100, 250, 500, 1000]",
        "output": "[0, 1, 1, 4, 4, 25, 25, 100, 100, 625, 625, 2500, 2500, 10000, 10000, 62500, 62500, 250000, 250000, 1000000, 1000000]"
      },
      {
        "input": "nums = [-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50]",
        "output": "[0, 100, 100, 400, 400, 900, 900, 1600, 1600, 2500, 2500]"
      },
      {
        "input": "nums = [-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2500, 2601, 2601, 2704, 2704, 2809, 2809, 2916, 2916, 3025, 3025, 3136, 3136, 3249, 3249, 3364, 3364, 3481, 3481, 3600, 3600, 3721, 3721, 3844, 3844, 3969, 3969, 4096, 4096, 4225, 4225, 4356, 4356, 4489, 4489, 4624, 4624, 4761, 4761, 4900, 4900, 5041, 5041, 5184, 5184, 5329, 5329, 5476, 5476, 5625, 5625, 5776, 5776, 5929, 5929, 6084, 6084, 6241, 6241, 6400, 6400, 6561, 6561, 6724, 6724, 6889, 6889, 7056, 7056, 7225, 7225, 7396, 7396, 7569, 7569, 7744, 7744, 7921, 7921, 8100, 8100, 8281, 8281, 8464, 8464, 8649, 8649, 8836, 8836, 9025, 9025, 9216, 9216, 9409, 9409, 9604, 9604, 9801, 9801, 10000, 10000]"
      },
      {
        "input": "nums = [-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 16, 25, 25, 36, 36, 49, 49, 64, 64, 81, 81, 100, 100, 121, 121, 144, 144, 169, 169, 196, 196, 225, 225, 256, 256, 289, 289, 324, 324, 361, 361, 400, 400, 441, 441, 484, 484, 529, 529, 576, 576, 625, 625, 676, 676, 729, 729, 784, 784, 841, 841, 900, 900, 961, 961, 1024, 1024, 1089, 1089, 1156, 1156, 1225, 1225, 1296, 1296, 1369, 1369, 1444, 1444, 1521, 1521, 1600, 1600, 1681, 1681, 1764, 1764, 1849, 1849, 1936, 1936, 2025, 2025, 2116, 2116, 2209, 2209, 2304, 2304, 2401, 2401, 2500, 2500, 2601, 2601, 2704, 2704, 2809, 2809, 2916, 2916, 3025, 3025, 3136, 3136, 3249, 3249, 3364, 3364, 3481, 3481, 3600, 3600, 3721, 3721, 3844, 3844, 3969, 3969, 4096, 4096, 4225, 4225, 4356, 4356, 4489, 4489, 4624, 4624, 4761, 4761, 4900, 4900, 5041, 5041, 5184, 5184, 5329, 5329, 5476, 5476, 5625, 5625, 5776, 5776, 5929, 5929, 6084, 6084, 6241, 6241, 6400, 6400, 6561, 6561, 6724, 6724, 6889, 6889, 7056, 7056, 7225, 7225, 7396, 7396, 7569, 7569, 7744, 7744, 7921, 7921, 8100, 8100, 8281, 8281, 8464, 8464, 8649, 8649, 8836, 8836, 9025, 9025, 9216, 9216, 9409, 9409, 9604, 9604, 9801, 9801, 10000, 10000]"
      },
      {
        "input": "nums = [-9, -6, -3, 0, 3, 6, 9]",
        "output": "[0, 9, 9, 36, 36, 81, 81]"
      },
      {
        "input": "nums = [-1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]",
        "output": "[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "output": "[1, 16, 81, 256, 625, 1296, 2401, 4096, 6561, 10000]"
      },
      {
        "input": "nums = [-10, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 10]",
        "output": "[0, 1, 1, 4, 4, 9, 9, 16, 16, 25, 25, 36, 36, 100, 100]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums = [-2, -2, 0, 2, 2]",
        "output": "[0, 4, 4, 4, 4]"
      },
      {
        "input": "nums = [-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "[8100, 8100, 8281, 8281, 8464, 8464, 8649, 8649, 8836, 8836, 9025, 9025, 9216, 9216, 9409, 9409, 9604, 9604, 9801, 9801, 10000, 10000]"
      },
      {
        "input": "nums = [-9, -6, -5, -3, -1, 0, 1, 3, 5, 6, 9, 12, 15, 18, 21]",
        "output": "[0, 1, 1, 9, 9, 25, 25, 36, 36, 81, 81, 144, 225, 324, 441]"
      },
      {
        "input": "nums = [-10,-5,-1,0,1,5,10]",
        "output": "[0, 1, 1, 25, 25, 100, 100]"
      },
      {
        "input": "nums = [-10000, -9999, -9998, -9997, -9996, 0, 1, 2, 3, 4, 5]",
        "output": "[0, 1, 4, 9, 16, 25, 99920016, 99940009, 99960004, 99980001, 100000000]"
      },
      {
        "input": "nums = [-1000, -999, -998, -997, -996, -995, -994, -993, -992, -991, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000]",
        "output": "[982081, 982081, 984064, 984064, 986049, 986049, 988036, 988036, 990025, 990025, 992016, 992016, 994009, 994009, 996004, 996004, 998001, 998001, 1000000, 1000000]"
      },
      {
        "input": "nums = [-10, -5, -3, -2, -1, 0, 0, 0, 1, 2, 3, 5, 10]",
        "output": "[0, 0, 0, 1, 1, 4, 4, 9, 9, 25, 25, 100, 100]"
      },
      {
        "input": "nums = [-25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25]",
        "output": "[0, 25, 25, 100, 100, 225, 225, 400, 400, 625, 625]"
      }
    ]
  },
  {
    "id": 2103,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String"
    ],
    "problemDescription": "There are n rings and each ring is either red, green, or blue. The rings are distributed across ten rods labeled from 0 to 9.\nYou are given a string rings of length 2n that describes the n rings that are placed onto the rods. Every two characters in rings forms a color-position pair that is used to describe each ring where:\n\nThe first character of the ith pair denotes the ith ring's color ('R', 'G', 'B').\nThe second character of the ith pair denotes the rod that the ith ring is placed on ('0' to '9').\n\nFor example, \"R3G2B1\" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.\nReturn the number of rods that have all three colors of rings on them.\n\u00a0\nExample 1:\n\n\nInput: rings = \"B0B6G0R6R0R6G9\"\nOutput: 1\nExplanation: \n- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1.\n\nExample 2:\n\n\nInput: rings = \"B0R0G0R9R0B0G0\"\nOutput: 1\nExplanation: \n- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1.\n\nExample 3:\n\nInput: rings = \"G4\"\nOutput: 0\nExplanation: \nOnly one ring is given. Thus, no rods have all three colors.\n\n\u00a0\nConstraints:\n\nrings.length == 2 * n\n1 <= n <= 100\nrings[i] where i is even is either 'R', 'G', or 'B' (0-indexed).\nrings[i] where i is odd is a digit from '0' to '9' (0-indexed).\n\n",
    "starterCode": "class Solution:\n    def countPoints(self, rings: str) -> int:\n        ",
    "testCases": [
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2\"",
        "output": "3"
      },
      {
        "input": "rings = \"R9G9B9R9G9B9R9G9B9\"",
        "output": "1"
      },
      {
        "input": "rings = \"G4\"",
        "output": "0"
      },
      {
        "input": "rings = \"R0G0R0G0R0G0\"",
        "output": "0"
      },
      {
        "input": "rings = \"G0G1G2G3G4G5G6G7G8G9\"",
        "output": "0"
      },
      {
        "input": "rings = \"B0B1B2B3B4B5B6B7B8B9\"",
        "output": "0"
      },
      {
        "input": "rings = \"G1G2G3G4G5G6G7G8G9G0\"",
        "output": "0"
      },
      {
        "input": "rings = \"R1R2R3R4R5R6R7R8R9R0\"",
        "output": "0"
      },
      {
        "input": "rings = \"B0B6G0R6R0R6G9\"",
        "output": "1"
      },
      {
        "input": "rings = \"R9G9B9\"",
        "output": "1"
      },
      {
        "input": "rings = \"B1B2B3B4B5B6B7B8B9B0\"",
        "output": "0"
      },
      {
        "input": "rings = \"R0R0G0G0B0B0R1R1G1G1B1B1\"",
        "output": "2"
      },
      {
        "input": "rings = \"B0R0G0R9R0B0G0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G1B2R3G4B5R6G7B8R9\"",
        "output": "0"
      },
      {
        "input": "rings = \"R1R1R1G1G1G1B1B1B1\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0R1R2R3R4R5R6R7R8R9\"",
        "output": "0"
      },
      {
        "input": "rings = \"R9G9B9R9G9B9\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R1G0B0R2G0B0R3G0B0R4G0B0R5G0B0R6G0B0R7G0B0R8G0B0R9G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R5G5B5R5G5B5R5G5B5\"",
        "output": "1"
      },
      {
        "input": "rings = \"R1G1B1R2G2B2R3G3B3\"",
        "output": "3"
      },
      {
        "input": "rings = \"B9B9B9G9G9G9R9R9R9\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R1G1B1R2G2B2\"",
        "output": "2"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R2G2B2R4G4B4R6G6B6R8G8B8\"",
        "output": "5"
      },
      {
        "input": "rings = \"R9G9B9R8G8B8R7G7B7\"",
        "output": "3"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R1G1B1R1G1B1R1G1B1R1G1B1R2G2B2R2G2B2R2G2B2R2G2B2\"",
        "output": "3"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G1B2R3G4B5R6G7B8R9G0B1R2G3B4R5G6B7R8G9B0R1G2B3R4G5B6R7G8B9\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G1B2R3G4B5R6G7B8R9G0B1R2G3B4R5G6B7R8G9B0R1G2B3R4G5B6R7G8B9R0G1B2R3G4B5\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R0G0B0R1G1B1R2G2B2R3G3B3R0G0B0\"",
        "output": "4"
      },
      {
        "input": "rings = \"R0R0G0G0B0B0R1R1G1G1B1B1R2R2G2G2B2B2R3R3G3G3B3B3R4R4G4G4B4B4R5R5G5G5B5B5\"",
        "output": "6"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R1G0B1R2G0B2R3G0B3R4G0B4R5G0B5R6G0B6R7G0B7R8G0B8R9G0B9R0G0B0R1G0B1R2G0B2R3G0B3R4G0B4R5G0B5R6G0B6R7G0B7R8G0B8R9G0B9\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R5G5B5R5G5B5R5G5B5R5G5B5R5G5B5\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R9G9B9\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G1B2R3G4B5R6G7B8R9G0B1R2G3B4R5G6B7R8G9B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R1G1B1\"",
        "output": "10"
      },
      {
        "input": "rings = \"R5G5B5R5G5B5R5G5B5R5G5B5R5G5B5R5G5B5R5G5B5R5G5B5R5G5B5\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0R0R0R0R0R0R0R0R0R0G0G0G0G0G0G0G0G0G0G0G0G0B0B0B0B0B0B0B0B0B0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2\"",
        "output": "0"
      },
      {
        "input": "rings = \"R0G0B0R0G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9\"",
        "output": "9"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0\"",
        "output": "10"
      },
      {
        "input": "rings = \"R1G2B3R1G2B3R1G2B3R1G2B3R1G2B3R1G2B3R1G2B3\"",
        "output": "0"
      },
      {
        "input": "rings = \"R0G0B0R1G0B0R2G0B0R3G0B0R4G0B0R5G0B0R6G0B0R7G0B0R8G0B0R9G0B0R0G0B0R1G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R9G9B9R9G9B9\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R0G0B0R0G0B0\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R3G3B3R3G3B3R3G3B3R3G3B3R3G3B3R3G3B3R3G3B3R3G3B3R3G3B3R3G3B3R3G3B3\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G1B2R3G4B5R6G7B8R9G0B1R2G3B4R5G6B7R8G9B0R1G1B1R2G2B2R3G3B3\"",
        "output": "4"
      },
      {
        "input": "rings = \"R1G2B3R1G2B3R1G2B3R1G2B3R1G2B3R1G2B3R1G2B3R1G2B3R1G2B3R1G2B3\"",
        "output": "0"
      },
      {
        "input": "rings = \"R9G9B9R8G8B8R7G7B7R6G6B6R5G5B5R4G4B4R3G3B3R2G2B2R1G1B1R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R1G1B1R1G1B1R1G1B1R2G2B2R2G2B2R2G2B2R3G3B3\"",
        "output": "4"
      },
      {
        "input": "rings = \"R0R0R0R0R0R1R1R1R1R1R2R2R2R2R2R3R3R3R3R3R4R4R4R4R4R5R5R5R5R5R6R6R6R6R6R7R7R7R7R7R8R8R8R8R8R9R9R9R9R9\"",
        "output": "0"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2R3G3B3\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0G0B0R1G1B1R1G1B2G2B2R2G2B3G3B3R3G3B4G4B4R4G4B5G5B5R5G5B6G6B6R6G6B7G7B7R7G7B8G8B8R8G8B9G9B9R9G9B9\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R8G8B8\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R1G1B1R1G1B1R1G1B1R1G1B1R1G1B1\"",
        "output": "2"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R1G1B1R1G1B1R1G1B1R1G1B1R1G1B1R1G1B1\"",
        "output": "2"
      },
      {
        "input": "rings = \"R9G8B7R6G5B4R3G2B1R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5\"",
        "output": "6"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R7G7B7R7G7B7R7G7B7\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2\"",
        "output": "0"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9\"",
        "output": "10"
      },
      {
        "input": "rings = \"R9G9B9R8G8B8R7G7B7R6G6B6R5G5B5R4G4B4R3G3B3R2G2B2R1G1B1R0G0B0\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G1B2R3G4B5R6G7B8R9G0B1R2G3B4R5G6B7R8G9B0R1G2B3R4G5B6R7G8B9R0G1B2R3G4B5R6G7B8R9G0\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0B0G1R1B1G2R2B2G3R3B3G4R4B4G5R5B5G6R6B6G7R7B7G8R8B8G9R9B9\"",
        "output": "9"
      },
      {
        "input": "rings = \"R0G0B0G0B0R0B0G0R0R0G0B0R0G0B0R0R0G0R0G0B0R0B0G0R0G0R0B0G0R0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0R0\"",
        "output": "0"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R6G6B6R6G6B6R6G6B6R6G6B6\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R4G4B4R4G4B4R4G4B4R4G4B4R4G4B4R4G4B4R4G4B4R4G4B4\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0R0R0G0G0G0B0B0B0R1R1R1G1G1G1B1B1B1R2R2R2G2G2G2B2B2B2\"",
        "output": "3"
      },
      {
        "input": "rings = \"R1G1B1R1G1B1R1G1B1R1G1B1R1G1B1R1G1B1R1G1B1R1G1B1R1G1B1R1G1B1\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0R0R0R0R0R0R0R0R0R0G0G0G0G0G0G0G0G0G0G0G0B0B0B0B0B0B0B0B0B0B0B0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2R0G1B2\"",
        "output": "0"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R1G1B1R1G1B1R1G1B1R1G1B1\"",
        "output": "2"
      },
      {
        "input": "rings = \"G0B0R0G1B1R1G2B2R2G3B3R3G4B4R4G5B5R5G6B6R6G7B7R7G8B8R8G9B9R9G0B0R0G1B1R1G2B2R2G3B3R3G4B4R4G5B5R5G6B6R6G7B7R7G8B8R8G9B9R9\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R1G0B0R1G0B0R1G0B0R1G0B0R1G0B0R1G0B0R1G0B0R1G0B0R1G0B0R1G0B0R1G0B0R1G0B0R1G0B0R1G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"B9G9R9B8G8R8B7G7R7B6G6R6B5G5R5B4G4R4B3G3R3B2G2R2B1G1R1B0G0R0B9G9R9B8G8R8B7G7R7B6G6R6B5G5R5B4G4R4B3G3R3B2G2R2B1G1R1B0G0R0\"",
        "output": "10"
      },
      {
        "input": "rings = \"R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0\"",
        "output": "10"
      },
      {
        "input": "rings = \"B0G0B0G0B0R1G1R1G1R1B2G2B2G2G2R3G3R3G3G3B4G4B4G4G4R5G5R5G5G5B6G6B6G6G6R7G7R7G7G7B8G8B8G8G8R9G9R9G9G9B9G9B9G9G9\"",
        "output": "1"
      },
      {
        "input": "rings = \"G0B0R0G1B1R1G2B2R2G3B3R3G4B4R4G5B5R5G6B6R6G7B7R7G8B8R8G9B9R9G0B1R2G3B4R5G6B7R8G9B0\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R0G1B1R0G2B2R0G3B3R0G4B4R0G5B5R0G6B6R0G7B7R0G8B8R0G9B9\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R1G1B1R2G2B2R3G3B3R4G4B4R5G5B5R6G6B6R7G7B7R8G8B8R9G9B9R0G0B0\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0B1G2R3B4G5R6B7G8R9B0G1R2B3G4R5B6G7R8B9G0R1B2G3R4B5G6R7B8G9\"",
        "output": "10"
      },
      {
        "input": "rings = \"B9G8R7B6G5R4B3G2R1B0G9R8B7G6R5B4G3R2B1G0R9B8G7R6B5G4R3B2G1R0\"",
        "output": "10"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      },
      {
        "input": "rings = \"R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0R0G0B0\"",
        "output": "1"
      }
    ]
  },
  {
    "id": 734,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "String"
    ],
    "problemDescription": "We can represent a sentence as an array of words, for example, the sentence \"I am happy with leetcode\" can be represented as arr = [\"I\",\"am\",happy\",\"with\",\"leetcode\"].\nGiven two sentences sentence1 and sentence2 each represented as a string array and given an array of string pairs similarPairs where similarPairs[i] = [xi, yi] indicates that the two words xi and yi are similar.\nReturn true if sentence1 and sentence2 are similar, or false if they are not similar.\nTwo sentences are similar if:\n\nThey have the same length (i.e., the same number of words)\nsentence1[i] and sentence2[i] are similar.\n\nNotice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words a and b are similar, and the words b and c are similar, a and c are not necessarily similar.\n\u00a0\nExample 1:\n\nInput: sentence1 = [\"great\",\"acting\",\"skills\"], sentence2 = [\"fine\",\"drama\",\"talent\"], similarPairs = [[\"great\",\"fine\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]]\nOutput: true\nExplanation: The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.\n\nExample 2:\n\nInput: sentence1 = [\"great\"], sentence2 = [\"great\"], similarPairs = []\nOutput: true\nExplanation: A word is similar to itself.\n\nExample 3:\n\nInput: sentence1 = [\"great\"], sentence2 = [\"doubleplus\",\"good\"], similarPairs = [[\"great\",\"doubleplus\"]]\nOutput: false\nExplanation: As they don't have the same length, we return false.\n\n\u00a0\nConstraints:\n\n1 <= sentence1.length, sentence2.length <= 1000\n1 <= sentence1[i].length, sentence2[i].length <= 20\nsentence1[i] and sentence2[i] consist of English letters.\n0 <= similarPairs.length <= 1000\nsimilarPairs[i].length == 2\n1 <= xi.length, yi.length <= 20\nxi and yi consist of lower-case and upper-case English letters.\nAll the pairs (xi, yi) are distinct.\n\n",
    "starterCode": "class Solution:\n    def areSentencesSimilar(self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]) -> bool:\n        ",
    "testCases": [
      {
        "input": "sentence1 = [\"happy\"], sentence2 = [\"happy\"], similarPairs = [[\"happy\",\"joyful\"],[\"joyful\",\"happy\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"one\",\"two\",\"three\"], sentence2 = [\"uno\",\"dos\",\"tres\"], similarPairs = [[\"one\",\"uno\"],[\"two\",\"dos\"],[\"three\",\"tres\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Python\",\"is\",\"fun\"], sentence2 = [\"Programming\",\"is\",\"enjoyable\"], similarPairs = [[\"Python\",\"Programming\"], [\"fun\",\"enjoyable\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"a\",\"b\",\"c\"], sentence2 = [\"a\",\"b\",\"d\"], similarPairs = [[\"c\",\"d\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"great\"], sentence2 = [\"great\"], similarPairs = []",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Leetcode\",\"is\",\"cool\"], sentence2 = [\"Leetcode\",\"is\",\"amazing\"], similarPairs = [[\"cool\",\"amazing\"],[\"is\",\"was\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"a\",\"b\"], sentence2 = [\"b\",\"a\"], similarPairs = [[\"a\",\"b\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\",\"am\",\"happy\"], sentence2 = [\"I\",\"am\",\"joyful\"], similarPairs = [[\"happy\",\"joyful\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"a\",\"b\",\"c\"], sentence2 = [\"d\",\"e\",\"f\"], similarPairs = [[\"a\",\"d\"],[\"b\",\"e\"]] ",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"an\",\"extraordinary\",\"meal\"], sentence2 = [\"one\",\"good\",\"dinner\"], similarPairs = [[\"extraordinary\",\"good\"],[\"extraordinary\",\"one\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"I\",\"love\",\"leetcode\"], sentence2 = [\"I\",\"love\",\"leetcode\"], similarPairs = [[\"I\",\"me\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"hello\"], sentence2 = [\"hi\"], similarPairs = [[\"hello\",\"hi\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"great\",\"acting\",\"skills\"], sentence2 = [\"fine\",\"drama\",\"talent\"], similarPairs = [[\"great\",\"fine\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"x\",\"y\",\"z\"], sentence2 = [\"x\",\"y\",\"z\"], similarPairs = [[\"x\",\"x\"],[\"y\",\"y\"],[\"z\",\"z\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"coding\",\"is\",\"fun\"], sentence2 = [\"programming\",\"is\",\"fun\"], similarPairs = [[\"coding\",\"programming\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"great\"], sentence2 = [\"doubleplus\",\"good\"], similarPairs = [[\"great\",\"doubleplus\"]] ",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"I\",\"am\",\"happy\"], sentence2 = [\"I\",\"am\",\"joyful\"], similarPairs = [[\"happy\",\"joyful\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"great\"], sentence2 = [\"doubleplus\",\"good\"], similarPairs = [[\"great\",\"doubleplus\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"great\",\"acting\",\"skills\"], sentence2 = [\"fine\",\"drama\",\"talent\"], similarPairs = [[\"great\",\"fine\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"a\",\"very\",\"delicious\",\"meal\"], sentence2 = [\"a\",\"quite\",\"delicious\",\"dine\"], similarPairs = [[\"very\",\"quite\"],[\"delicious\",\"nice\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"hello\"], sentence2 = [\"world\"], similarPairs = [[\"hello\",\"world\"],[\"world\",\"hello\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"leetcode\",\"is\",\"amazing\"], sentence2 = [\"leetcode\",\"is\",\"great\"], similarPairs = [[\"great\",\"amazing\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"a\",\"b\",\"c\"], sentence2 = [\"a\",\"b\",\"c\"], similarPairs = [[\"a\",\"d\"],[\"b\",\"e\"],[\"c\",\"f\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"great\"], sentence2 = [\"great\"], similarPairs = [] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"word\"], sentence2 = [\"word\"], similarPairs = [[\"word\",\"word\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\",\"am\",\"happy\"], sentence2 = [\"I\",\"am\",\"joyful\"], similarPairs = [[\"happy\",\"joyful\"], [\"sad\",\"unhappy\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\",\"love\",\"leetcode\"], sentence2 = [\"I\",\"love\",\"leetcode\"], similarPairs = []",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Mary\",\"has\",\"a\",\"little\",\"lamb\"], sentence2 = [\"Mary\",\"possesses\",\"a\",\"tiny\",\"sheep\"], similarPairs = [[\"has\",\"possesses\"],[\"little\",\"tiny\"],[\"lamb\",\"sheep\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"John\",\"plays\",\"piano\"], sentence2 = [\"John\",\"plays\",\"keyboard\"], similarPairs = [[\"piano\",\"keyboard\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Programming\",\"is\",\"fun\"], sentence2 = [\"Coding\",\"is\",\"fun\"], similarPairs = [[\"Programming\",\"Coding\"],[\"fun\",\"entertaining\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"We\",\"are\",\"going\",\"on\",\"a\",\"trip\"], sentence2 = [\"We\",\"are\",\"taking\",\"a\",\"journey\"], similarPairs = [[\"going\",\"taking\"],[\"trip\",\"journey\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"Programming\", \"is\", \"fun\"], sentence2 = [\"Coding\", \"is\", \"fun\"], similarPairs = [[\"Programming\", \"Coding\"], [\"fun\", \"exciting\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Programming\",\"is\",\"challenging\",\"but\",\"rewarding\"], sentence2 = [\"Coding\",\"is\",\"difficult\",\"but\",\"fulfilling\"], similarPairs = [[\"Programming\",\"Coding\"],[\"challenging\",\"difficult\"],[\"rewarding\",\"fulfilling\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"amazing\",\"great\",\"skills\"], sentence2 = [\"fantastic\",\"excellent\",\"abilities\"], similarPairs = [[\"amazing\",\"fantastic\"],[\"great\",\"excellent\"],[\"skills\",\"abilities\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"Programming\",\"is\",\"fun\"], sentence2 = [\"Coding\",\"is\",\"enjoyable\"], similarPairs = [[\"Programming\",\"Coding\"],[\"fun\",\"enjoyable\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"This\",\"is\",\"a\",\"test\"], sentence2 = [\"That\",\"is\",\"a\",\"trial\"], similarPairs = [[\"This\",\"That\"], [\"test\",\"trial\"], [\"test\",\"experiment\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"A\",\"B\",\"C\",\"D\"], sentence2 = [\"D\",\"C\",\"B\",\"A\"], similarPairs = [[\"A\",\"D\"],[\"B\",\"C\"],[\"D\",\"A\"],[\"C\",\"B\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Hello\",\"world\"], sentence2 = [\"Hi\",\"earth\"], similarPairs = [[\"Hello\",\"Hi\"], [\"world\",\"earth\"], [\"world\",\"universe\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Data\",\"Science\",\"is\",\"fun\"], sentence2 = [\"Data\",\"Science\",\"is\",\"interesting\"], similarPairs = [[\"fun\",\"interesting\"],[\"Data\",\"Information\"],[\"Science\",\"Studies\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\",\"love\",\"to\",\"code\"], sentence2 = [\"I\",\"enjoy\",\"coding\"], similarPairs = [[\"love\",\"enjoy\"],[\"to\",\"coding\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"Hello\",\"World\"], sentence2 = [\"Hi\",\"Earth\"], similarPairs = [[\"Hello\",\"Hi\"],[\"World\",\"Earth\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"This\",\"is\",\"a\",\"test\"], sentence2 = [\"That\",\"is\",\"a\",\"trial\"], similarPairs = [[\"This\",\"That\"],[\"test\",\"trial\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Python\",\"is\",\"awesome\"], sentence2 = [\"Python\",\"is\",\"great\"], similarPairs = [[\"awesome\",\"great\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"The\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"the\",\"lazy\",\"dog\"], sentence2 = [\"The\",\"swift\",\"brown\",\"fox\",\"leaps\",\"above\",\"the\",\"idle\",\"dog\"], similarPairs = [[\"quick\",\"swift\"],[\"jumps\",\"leaps\"],[\"over\",\"above\"],[\"lazy\",\"idle\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"A\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"the\",\"lazy\",\"dog\"], sentence2 = [\"A\",\"fast\",\"brown\",\"fox\",\"jumps\",\"over\",\"the\",\"lazy\",\"dog\"], similarPairs = [[\"quick\",\"fast\"],[\"slow\",\"lazy\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Python\",\"is\",\"awesome\"], sentence2 = [\"Python\",\"is\",\"excellent\"], similarPairs = [[\"awesome\",\"excellent\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\",\"love\",\"to\",\"code\"], sentence2 = [\"I\",\"enjoy\",\"programming\"], similarPairs = [[\"love\",\"enjoy\"],[\"to\",\"programming\"],[\"code\",\"programming\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"Java\", \"is\", \"cool\"], sentence2 = [\"Java\", \"is\", \"awesome\"], similarPairs = [[\"cool\", \"awesome\"], [\"Java\", \"cool\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Hello\",\"world\"], sentence2 = [\"Hi\",\"earth\"], similarPairs = [[\"Hello\",\"Hi\"],[\"world\",\"earth\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"The\",\"quick\",\"brown\",\"fox\",\"jumps\"], sentence2 = [\"The\",\"quick\",\"brown\",\"dog\",\"jumps\"], similarPairs = [[\"fox\",\"dog\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"one\",\"two\",\"three\"], sentence2 = [\"un\",\"deux\",\"trois\"], similarPairs = [[\"one\",\"un\"], [\"two\",\"deux\"], [\"three\",\"trois\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\",\"love\",\"Python\",\"programming\"], sentence2 = [\"I\",\"enjoy\",\"coding\",\"in\",\"Python\"], similarPairs = [[\"love\",\"enjoy\"],[\"coding\",\"programming\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"This\",\"is\",\"a\",\"test\"], sentence2 = [\"This\",\"is\",\"a\",\"trial\"], similarPairs = [[\"test\",\"trial\"],[\"trial\",\"test\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Big\",\"data\",\"is\",\"interesting\"], sentence2 = [\"Big\",\"data\",\"is\",\"intriguing\"], similarPairs = [[\"interesting\",\"intriguing\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"The\",\"quick\",\"brown\",\"fox\"], sentence2 = [\"The\",\"fast\",\"grey\",\"fox\"], similarPairs = [[\"quick\",\"fast\"],[\"brown\",\"grey\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\",\"am\",\"happy\"], sentence2 = [\"I\",\"am\",\"joyful\"], similarPairs = [[\"happy\",\"joyful\"],[\"joyful\",\"cheerful\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Python\",\"is\",\"great\"], sentence2 = [\"Python\",\"is\",\"awesome\"], similarPairs = [[\"great\",\"awesome\"],[\"amazing\",\"fantastic\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Alice\",\"loves\",\"Bob\"], sentence2 = [\"Alice\",\"adores\",\"Bob\"], similarPairs = [[\"loves\",\"adores\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"She\",\"is\",\"an\",\"excellent\",\"teacher\"], sentence2 = [\"She\",\"is\",\"a\",\"great\",\"educator\"], similarPairs = [[\"excellent\",\"great\"],[\"teacher\",\"educator\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"Mismatched\",\"length\"], sentence2 = [\"Mismatched\",\"length\",\"here\"], similarPairs = [[\"Mismatched\",\"Mismatched\"], [\"length\",\"length\"]] ",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"I\",\"love\",\"to\",\"eat\",\"apple\"], sentence2 = [\"I\",\"love\",\"to\",\"eat\",\"fruit\"], similarPairs = [[\"apple\",\"fruit\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"He\",\"is\",\"going\",\"to\",\"the\",\"market\"], sentence2 = [\"He\",\"is\",\"headed\",\"to\",\"the\",\"store\"], similarPairs = [[\"going\",\"headed\"],[\"market\",\"store\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Alice\",\"loves\",\"Bob\"], sentence2 = [\"Alice\",\"adore\",\"Bob\"], similarPairs = [[\"loves\",\"adore\"],[\"Bob\",\"Charlie\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"sun\",\"rises\",\"in\",\"east\"], sentence2 = [\"sun\",\"arises\",\"from\",\"east\"], similarPairs = [[\"rises\",\"arises\"],[\"in\",\"from\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"The\",\"cat\",\"sat\",\"on\",\"the\",\"mat\"], sentence2 = [\"The\",\"kitty\",\"sat\",\"on\",\"the\",\"rug\"], similarPairs = [[\"cat\",\"kitty\"],[\"mat\",\"rug\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"OpenAI\",\"creates\",\"AI\"], sentence2 = [\"OpenAI\",\"builds\",\"AI\"], similarPairs = [[\"creates\",\"builds\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\", \"am\", \"happy\"], sentence2 = [\"I\", \"feel\", \"joyful\"], similarPairs = [[\"am\", \"feel\"], [\"happy\", \"joyful\"], [\"joyful\", \"ecstatic\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"He\",\"reads\",\"a\",\"lot\"], sentence2 = [\"He\",\"reads\",\"many\",\"books\"], similarPairs = [[\"lot\",\"many\"],[\"reads\",\"peruses\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"fast\",\"and\",\"efficient\"], sentence2 = [\"quick\",\"and\",\"productive\"], similarPairs = [[\"fast\",\"quick\"],[\"efficient\",\"productive\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"She\",\"is\",\"a\",\"great\",\"teacher\"], sentence2 = [\"She\",\"is\",\"a\",\"fantastic\",\"educator\"], similarPairs = [[\"great\",\"fantastic\"],[\"teacher\",\"educator\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Happy\",\"New\",\"Year\"], sentence2 = [\"Joyful\",\"New\",\"Year\"], similarPairs = [[\"Happy\",\"Joyful\"],[\"Joyful\",\"Happy\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Quick\",\"brown\",\"fox\"], sentence2 = [\"Fast\",\"brown\",\"fox\"], similarPairs = [[\"Quick\",\"Fast\"],[\"lazy\",\"slow\"],[\"dog\",\"fox\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"This\",\"is\",\"a\",\"test\"], sentence2 = [\"This\",\"is\",\"a\",\"test\"], similarPairs = []\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"I\",\"love\",\"to\",\"eat\"], sentence2 = [\"I\",\"enjoy\",\"consuming\"], similarPairs = [[\"love\",\"enjoy\"],[\"eat\",\"consuming\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"He\",\"is\",\"very\",\"happy\"], sentence2 = [\"He\",\"is\",\"very\",\"joyful\"], similarPairs = [[\"happy\",\"joyful\"],[\"sad\",\"melancholic\"],[\"happy\",\"joyous\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"a\",\"b\",\"c\",\"d\"], sentence2 = [\"e\",\"f\",\"g\",\"h\"], similarPairs = [[\"a\",\"e\"],[\"b\",\"f\"],[\"c\",\"g\"],[\"d\",\"h\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"complex\",\"sentences\",\"are\",\"hard\"], sentence2 = [\"complex\",\"phrases\",\"are\",\"difficult\"], similarPairs = [[\"sentences\",\"phrases\"],[\"hard\",\"difficult\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Alice\",\"loves\",\"Bob\"], sentence2 = [\"Alice\",\"likes\",\"Bob\"], similarPairs = [[\"loves\",\"likes\"],[\"likes\",\"loves\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"the\",\"quick\",\"brown\",\"fox\"], sentence2 = [\"the\",\"fast\",\"brown\",\"fox\"], similarPairs = [[\"quick\",\"fast\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"coding\",\"every\",\"day\"], sentence2 = [\"programming\",\"daily\",\"activity\"], similarPairs = [[\"coding\",\"programming\"],[\"every\",\"daily\"],[\"day\",\"activity\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"She\",\"eats\",\"an\",\"apple\"], sentence2 = [\"He\",\"consumes\",\"a\",\"fruit\"], similarPairs = [[\"She\",\"He\"],[\"eats\",\"consumes\"],[\"apple\",\"fruit\"],[\"an\",\"a\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"Python\",\"programming\",\"is\",\"fun\"], sentence2 = [\"Python\",\"coding\",\"is\",\"amusing\"], similarPairs = [[\"programming\",\"coding\"], [\"fun\",\"amusing\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"This\",\"is\",\"a\",\"beautiful\",\"day\"], sentence2 = [\"This\",\"is\",\"a\",\"lovely\",\"day\"], similarPairs = [[\"beautiful\",\"lovely\"],[\"day\",\"weather\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"She\",\"loves\",\"cats\"], sentence2 = [\"He\",\"likes\",\"dogs\"], similarPairs = [[\"loves\",\"likes\"],[\"cats\",\"dogs\"]] ",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"She\",\"is\",\"very\",\"happy\"], sentence2 = [\"She\",\"is\",\"extremely\",\"joyful\"], similarPairs = [[\"very\",\"extremely\"],[\"happy\",\"joyful\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"He\",\"plays\",\"guitar\"], sentence2 = [\"He\",\"strums\",\"guitar\"], similarPairs = [[\"plays\",\"strums\"],[\"guitar\",\"instrument\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"The\",\"sky\",\"is\",\"blue\"], sentence2 = [\"The\",\"atmosphere\",\"is\",\"azure\"], similarPairs = [[\"sky\",\"atmosphere\"],[\"blue\",\"azure\"],[\"green\",\"yellow\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"A\",\"quick\",\"brown\",\"fox\"], sentence2 = [\"A\",\"swift\",\"brown\",\"canine\"], similarPairs = [[\"quick\",\"swift\"], [\"fox\",\"canine\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"She\",\"has\",\"a\",\"big\",\"dog\"], sentence2 = [\"She\",\"has\",\"a\",\"large\",\"canine\"], similarPairs = [[\"big\",\"large\"],[\"dog\",\"canine\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Similarity\", \"check\"], sentence2 = [\"Similarity\", \"validation\"], similarPairs = [[\"check\", \"validation\"], [\"check\", \"test\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"a\", \"b\", \"c\", \"d\"], sentence2 = [\"a\", \"b\", \"c\", \"d\"], similarPairs = [[\"a\", \"z\"], [\"b\", \"y\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"The\",\"sun\",\"rises\",\"in\",\"the\",\"east\"], sentence2 = [\"The\",\"sun\",\"ascends\",\"in\",\"the\",\"east\"], similarPairs = [[\"rises\",\"ascends\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"This\",\"is\",\"a\",\"test\"], sentence2 = [\"This\",\"is\",\"a\",\"check\"], similarPairs = [[\"test\",\"check\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\", \"love\", \"coding\"], sentence2 = [\"I\", \"adore\", \"programming\"], similarPairs = [[\"love\", \"adore\"], [\"coding\", \"programming\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Python\",\"is\",\"fun\"], sentence2 = [\"Python\",\"is\",\"awesome\"], similarPairs = [[\"fun\",\"awesome\"],[\"awesome\",\"fun\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"She\",\"sings\",\"beautifully\"], sentence2 = [\"She\",\"sings\",\"sweetly\"], similarPairs = [[\"beautifully\",\"sweetly\"],[\"badly\",\"poorly\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"these\",\"are\",\"not\",\"similar\"], sentence2 = [\"these\",\"are\",\"definitely\",\"not\",\"similar\"], similarPairs = [[\"not\",\"definitely\"],[\"similar\",\"not\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"They\",\"went\",\"to\",\"the\",\"park\"], sentence2 = [\"They\",\"visited\",\"the\",\"park\"], similarPairs = [[\"went\",\"visited\"],[\"park\",\"recreation\"]]",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"The\",\"cat\",\"is\",\"black\"], sentence2 = [\"The\",\"feline\",\"is\",\"dark\"], similarPairs = [[\"cat\",\"feline\"],[\"black\",\"dark\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Python\",\"is\",\"fun\"], sentence2 = [\"Java\",\"is\",\"fun\"], similarPairs = [[\"Python\",\"Java\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"example\",\"sentences\",\"with\",\"many\",\"pairs\"], sentence2 = [\"sample\",\"utterances\",\"with\",\"many\",\"matches\"], similarPairs = [[\"example\",\"sample\"], [\"sentences\",\"utterances\"], [\"pairs\",\"matches\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"complex\",\"sentences\",\"are\",\"handled\"], sentence2 = [\"difficult\",\"utterances\",\"are\",\"dealt\"], similarPairs = [[\"complex\",\"difficult\"], [\"sentences\",\"utterances\"], [\"handled\",\"dealt\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\",\"will\",\"go\",\"to\",\"the\",\"store\"], sentence2 = [\"I\",\"shall\",\"go\",\"to\",\"the\",\"shop\"], similarPairs = [[\"will\",\"shall\"],[\"store\",\"shop\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"She\",\"loves\",\"to\",\"read\",\"books\"], sentence2 = [\"She\",\"enjoys\",\"to\",\"read\",\"books\"], similarPairs = [[\"loves\",\"enjoys\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Alice\",\"loves\",\"Bob\"], sentence2 = [\"Alice\",\"likes\",\"Bob\"], similarPairs = [[\"loves\",\"likes\"],[\"hates\",\"dislikes\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"word\"], sentence2 = [\"word\"], similarPairs = []",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Similar\",\"Sentences\",\"Problem\"], sentence2 = [\"Comparable\",\"Sentences\",\"Challenge\"], similarPairs = [[\"Similar\",\"Comparable\"],[\"Problem\",\"Challenge\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Python\", \"is\", \"awesome\"], sentence2 = [\"Python\", \"is\", \"great\"], similarPairs = [[\"awesome\", \"great\"], [\"Python\", \"awesome\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"Python\",\"is\",\"an\",\"awesome\",\"language\"], sentence2 = [\"Python\",\"is\",\"a\",\"great\",\"programming\",\"language\"], similarPairs = [[\"awesome\",\"great\"],[\"language\",\"programming\"]] ",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"quick\",\"brown\",\"fox\"], sentence2 = [\"swift\",\"brown\",\"fox\"], similarPairs = [[\"quick\",\"swift\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"similar\",\"words\",\"are\",\"here\"], sentence2 = [\"same\",\"terms\",\"are\",\"present\"], similarPairs = [[\"similar\",\"same\"],[\"words\",\"terms\"],[\"here\",\"present\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Alice\",\"loves\",\"Bob\"], sentence2 = [\"Alice\",\"likes\",\"Bob\"], similarPairs = [[\"loves\",\"likes\"],[\"Bob\",\"Charlie\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"Data\",\"Science\",\"is\",\"cool\"], sentence2 = [\"Data\",\"Analytics\",\"is\",\"cool\"], similarPairs = [[\"Science\",\"Analytics\"],[\"Analytics\",\"Science\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"She\",\"is\",\"reading\",\"a\",\"book\"], sentence2 = [\"She\",\"is\",\"perusing\",\"a\",\"book\"], similarPairs = [[\"reading\",\"perusing\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Similar\",\"Sentences\",\"Are\",\"Fun\"], sentence2 = [\"Identical\",\"Phrases\",\"Are\",\"Delightful\"], similarPairs = [[\"Similar\",\"Identical\"],[\"Sentences\",\"Phrases\"],[\"Fun\",\"Delightful\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Python\",\"Java\",\"C++\",\"Ruby\"], sentence2 = [\"Java\",\"Python\",\"C\",\"R\"], similarPairs = [[\"Python\",\"Java\"],[\"C++\",\"C\"],[\"Ruby\",\"R\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Happy\",\"Sad\",\"Excited\",\"Angry\"], sentence2 = [\"Joyful\",\"Melancholy\",\"Thrilled\",\"Furious\"], similarPairs = [[\"Happy\",\"Joyful\"],[\"Sad\",\"Melancholy\"],[\"Excited\",\"Thrilled\"],[\"Angry\",\"Furious\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"one\", \"two\", \"three\"], sentence2 = [\"uno\", \"dos\", \"tres\"], similarPairs = [[\"one\", \"uno\"], [\"two\", \"dos\"], [\"tres\", \"three\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Word1\",\"Word2\",\"Word3\"], sentence2 = [\"Word3\",\"Word2\",\"Word1\"], similarPairs = [[\"Word1\",\"Word3\"],[\"Word2\",\"Word2\"],[\"Word3\",\"Word1\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"The\", \"quick\", \"brown\", \"fox\"], sentence2 = [\"The\", \"swift\", \"brown\", \"dog\"], similarPairs = [[\"quick\", \"swift\"], [\"fox\", \"dog\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"I\",\"will\",\"never\",\"forget\",\"this\",\"moment\"], sentence2 = [\"I\",\"will\",\"always\",\"remember\",\"this\",\"instant\"], similarPairs = [[\"never\",\"always\"],[\"forget\",\"remember\"],[\"moment\",\"instant\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"a\",\"very\",\"delightful\",\"and\",\"wonderful\",\"movie\"], sentence2 = [\"a\",\"quite\",\"enjoyable\",\"and\",\"marvelous\",\"film\"], similarPairs = [[\"very\",\"quite\"],[\"delightful\",\"enjoyable\"],[\"wonderful\",\"marvelous\"],[\"movie\",\"film\"]] ",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Alice\",\"loves\",\"Bob\"], sentence2 = [\"Alice\",\"adore\",\"Bob\"], similarPairs = [[\"loves\",\"adore\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"A\", \"B\", \"C\", \"D\"], sentence2 = [\"E\", \"F\", \"G\", \"H\"], similarPairs = [[\"A\", \"E\"], [\"B\", \"F\"], [\"C\", \"G\"], [\"D\", \"H\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"The\",\"weather\",\"is\",\"nice\"], sentence2 = [\"The\",\"weather\",\"is\",\"pleasant\"], similarPairs = [[\"nice\",\"pleasant\"],[\"weather\",\"conditions\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"a\",\"b\",\"c\",\"d\",\"e\"], sentence2 = [\"x\",\"y\",\"z\",\"a\",\"b\"], similarPairs = [[\"a\",\"x\"], [\"b\",\"y\"], [\"c\",\"z\"]] ",
        "output": "False"
      },
      {
        "input": "sentence1 = [\"OpenAI\", \"creates\", \"AI\"], sentence2 = [\"OpenAI\", \"develops\", \"AI\"], similarPairs = [[\"creates\", \"develops\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"sentence\",\"with\",\"many\",\"words\"], sentence2 = [\"phrase\",\"with\",\"many\",\"words\"], similarPairs = [[\"sentence\",\"phrase\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Hello\", \"World\"], sentence2 = [\"Hi\", \"Earth\"], similarPairs = [[\"Hello\", \"Hi\"], [\"World\", \"Earth\"], [\"Earth\", \"Planet\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"a\",\"b\",\"c\",\"d\",\"e\"], sentence2 = [\"a\",\"x\",\"c\",\"y\",\"e\"], similarPairs = [[\"b\",\"x\"],[\"d\",\"y\"]]\"",
        "output": "Error: Solution.areSentencesSimilar() missing 1 required positional argument: 'similarPairs'"
      },
      {
        "input": "sentence1 = [\"The\",\"quick\",\"brown\",\"fox\"], sentence2 = [\"The\",\"fast\",\"brown\",\"fox\"], similarPairs = [[\"quick\",\"fast\"],[\"fast\",\"quick\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"The\",\"cat\",\"sat\",\"on\",\"the\",\"mat\"], sentence2 = [\"The\",\"kitten\",\"rested\",\"on\",\"the\",\"rug\"], similarPairs = [[\"cat\",\"kitten\"],[\"sat\",\"rested\"],[\"mat\",\"rug\"]]",
        "output": "True"
      },
      {
        "input": "sentence1 = [\"Python\",\"is\",\"fun\"], sentence2 = [\"Java\",\"is\",\"cool\"], similarPairs = [[\"Python\",\"Java\"],[\"fun\",\"cool\"]]",
        "output": "True"
      }
    ]
  },
  {
    "id": 326,
    "difficulty": "Easy",
    "tags": [
      "Recursion",
      "Math"
    ],
    "problemDescription": "Given an integer n, return true if it is a power of three. Otherwise, return false.\nAn integer n is a power of three, if there exists an integer x such that n == 3x.\n\u00a0\nExample 1:\n\nInput: n = 27\nOutput: true\nExplanation: 27 = 33\n\nExample 2:\n\nInput: n = 0\nOutput: false\nExplanation: There is no x where 3x = 0.\n\nExample 3:\n\nInput: n = -1\nOutput: false\nExplanation: There is no x where 3x = (-1).\n\n\u00a0\nConstraints:\n\n-231 <= n <= 231 - 1\n\n\u00a0\nFollow up: Could you solve it without loops/recursion?",
    "starterCode": "class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        ",
    "testCases": [
      {
        "input": "n = 3",
        "output": "True"
      },
      {
        "input": "n = 45",
        "output": "False"
      },
      {
        "input": "n = 729",
        "output": "True"
      },
      {
        "input": "n = 2147483647",
        "output": "False"
      },
      {
        "input": "n = 19683",
        "output": "True"
      },
      {
        "input": "n = 100",
        "output": "False"
      },
      {
        "input": "n = 244",
        "output": "False"
      },
      {
        "input": "n = 10",
        "output": "False"
      },
      {
        "input": "n = -1",
        "output": "False"
      },
      {
        "input": "n = -27",
        "output": "False"
      },
      {
        "input": "n = 3**19",
        "output": "Error: Solution.isPowerOfThree() missing 1 required positional argument: 'n'"
      },
      {
        "input": "n = 0",
        "output": "False"
      },
      {
        "input": "n = -2147483648",
        "output": "False"
      },
      {
        "input": "n = 27",
        "output": "True"
      },
      {
        "input": "n = 6561",
        "output": "True"
      },
      {
        "input": "n = 2187",
        "output": "True"
      },
      {
        "input": "n = 1000000000",
        "output": "False"
      },
      {
        "input": "n = 81",
        "output": "True"
      },
      {
        "input": "n = -81",
        "output": "False"
      },
      {
        "input": "n = -3**19",
        "output": "Error: Solution.isPowerOfThree() missing 1 required positional argument: 'n'"
      },
      {
        "input": "n = -243",
        "output": "False"
      },
      {
        "input": "n = 9",
        "output": "True"
      },
      {
        "input": "n = -3",
        "output": "False"
      },
      {
        "input": "n = 1",
        "output": "True"
      },
      {
        "input": "n = 243",
        "output": "True"
      },
      {
        "input": "n = 59049",
        "output": "True"
      },
      {
        "input": "n = 14124",
        "output": "False"
      },
      {
        "input": "n = 239148450531289",
        "output": "False"
      },
      {
        "input": "n = 32805",
        "output": "False"
      },
      {
        "input": "n = 2147483646",
        "output": "False"
      },
      {
        "input": "n = 797161567330890596",
        "output": "False"
      },
      {
        "input": "n = 12157665459056928802",
        "output": "False"
      },
      {
        "input": "n = 4096",
        "output": "False"
      },
      {
        "input": "n = -9",
        "output": "False"
      },
      {
        "input": "n = 82",
        "output": "False"
      },
      {
        "input": "n = 387420489",
        "output": "True"
      },
      {
        "input": "n = 1594323",
        "output": "True"
      },
      {
        "input": "n = 1000",
        "output": "False"
      },
      {
        "input": "n = 5",
        "output": "False"
      },
      {
        "input": "n = 28",
        "output": "False"
      },
      {
        "input": "n = 12157665459056928801",
        "output": "True"
      },
      {
        "input": "n = -19683",
        "output": "False"
      },
      {
        "input": "n = -162",
        "output": "False"
      },
      {
        "input": "n = 4",
        "output": "False"
      },
      {
        "input": "n = 59050",
        "output": "False"
      },
      {
        "input": "n = 2",
        "output": "False"
      },
      {
        "input": "n = 1162261469",
        "output": "False"
      },
      {
        "input": "n = -6561",
        "output": "False"
      },
      {
        "input": "n = 80",
        "output": "False"
      },
      {
        "input": "n = 14348907",
        "output": "True"
      },
      {
        "input": "n = 1073741824",
        "output": "False"
      },
      {
        "input": "n = 282429536481",
        "output": "True"
      },
      {
        "input": "n = 100000",
        "output": "False"
      },
      {
        "input": "n = 231",
        "output": "False"
      },
      {
        "input": "n = 4052555153018976267",
        "output": "True"
      },
      {
        "input": "n = 3645",
        "output": "False"
      },
      {
        "input": "n = -59049",
        "output": "False"
      },
      {
        "input": "n = 18",
        "output": "False"
      },
      {
        "input": "n = 500",
        "output": "False"
      },
      {
        "input": "n = 1594322",
        "output": "False"
      },
      {
        "input": "n = 20",
        "output": "False"
      },
      {
        "input": "n = 177147",
        "output": "True"
      },
      {
        "input": "n = -45",
        "output": "False"
      },
      {
        "input": "n = 19",
        "output": "False"
      },
      {
        "input": "n = 1162261467",
        "output": "True"
      },
      {
        "input": "n = 2188",
        "output": "False"
      },
      {
        "input": "n = 531441",
        "output": "True"
      },
      {
        "input": "n = 24",
        "output": "False"
      },
      {
        "input": "n = 129140163",
        "output": "True"
      },
      {
        "input": "n = 43046721",
        "output": "True"
      },
      {
        "input": "n = -1046527",
        "output": "False"
      },
      {
        "input": "n = 1162261468",
        "output": "False"
      },
      {
        "input": "n = 1162261466",
        "output": "False"
      },
      {
        "input": "n = 3486784401",
        "output": "True"
      },
      {
        "input": "n = 200",
        "output": "False"
      },
      {
        "input": "n = 6",
        "output": "False"
      },
      {
        "input": "n = 1111111111",
        "output": "False"
      },
      {
        "input": "n = 2125764400",
        "output": "False"
      }
    ]
  },
  {
    "id": 2229,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "problemDescription": "Given an integer array nums, return true if nums is consecutive, otherwise return false.\nAn array is consecutive if it contains every number in the range [x, x + n - 1] (inclusive), where x is the minimum number in the array and n is the length of the array.\n\u00a0\nExample 1:\n\nInput: nums = [1,3,4,2]\nOutput: true\nExplanation:\nThe minimum value is 1 and the length of nums is 4.\nAll of the values in the range [x, x + n - 1] = [1, 1 + 4 - 1] = [1, 4] = (1, 2, 3, 4) occur in nums.\nTherefore, nums is consecutive.\n\nExample 2:\n\nInput: nums = [1,3]\nOutput: false\nExplanation:\nThe minimum value is 1 and the length of nums is 2.\nThe value 2 in the range [x, x + n - 1] = [1, 1 + 2 - 1], = [1, 2] = (1, 2) does not occur in nums.\nTherefore, nums is not consecutive.\n\nExample 3:\n\nInput: nums = [3,5,4]\nOutput: true\nExplanation:\nThe minimum value is 3 and the length of nums is 3.\nAll of the values in the range [x, x + n - 1] = [3, 3 + 3 - 1] = [3, 5] = (3, 4, 5) occur in nums.\nTherefore, nums is consecutive.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def isConsecutive(self, nums: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "nums = [10,11,12,13,14,15]",
        "output": "True"
      },
      {
        "input": "nums = [100,101,102,103,104,105]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,2,3]",
        "output": "False"
      },
      {
        "input": "nums = [0,1,2,3,4,5]",
        "output": "True"
      },
      {
        "input": "nums = [0,2]",
        "output": "False"
      },
      {
        "input": "nums = [1,2,4,5]",
        "output": "False"
      },
      {
        "input": "nums = [100,101,102,99,103]",
        "output": "True"
      },
      {
        "input": "nums = [10,11,12,13,14]",
        "output": "True"
      },
      {
        "input": "nums = [1]",
        "output": "True"
      },
      {
        "input": "nums = [7,8,9,10,11,12,13]",
        "output": "True"
      },
      {
        "input": "nums = [5,6,7,8,9,10]",
        "output": "True"
      },
      {
        "input": "nums = [2,2,3,4]",
        "output": "False"
      },
      {
        "input": "nums = [0,2,3,4,5,6]",
        "output": "False"
      },
      {
        "input": "nums = [0,1,2,3,4]",
        "output": "True"
      },
      {
        "input": "nums = [100,101,102,103,104]",
        "output": "True"
      },
      {
        "input": "nums = [0]",
        "output": "True"
      },
      {
        "input": "nums = [1,3]",
        "output": "False"
      },
      {
        "input": "nums = [5,4,6,7,8]",
        "output": "True"
      },
      {
        "input": "nums = [2,2,3,4,5]",
        "output": "False"
      },
      {
        "input": "nums = [5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "nums = [1,3,4,2]",
        "output": "True"
      },
      {
        "input": "nums = [100000]",
        "output": "True"
      },
      {
        "input": "nums = [7,8,9,10,11,12]",
        "output": "True"
      },
      {
        "input": "nums = [5]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,4,5,6]",
        "output": "False"
      },
      {
        "input": "nums = [3,5,4]",
        "output": "True"
      },
      {
        "input": "nums = [100,101,99,102,98]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 4, 3, 6, 5, 7, 8, 10, 9]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]",
        "output": "False"
      },
      {
        "input": "nums = [0,2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15,18,17,20,19,22,21,24,23,26,25,28,27,30,29,32,31,34,33,36,35,38,37,40,39]",
        "output": "True"
      },
      {
        "input": "nums = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]",
        "output": "True"
      },
      {
        "input": "nums = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "False"
      },
      {
        "input": "nums = [100, 200, 150, 125, 175]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "True"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 99, 98, 97, 96, 95]",
        "output": "True"
      },
      {
        "input": "nums = [5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "True"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130]",
        "output": "True"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20]",
        "output": "True"
      },
      {
        "input": "nums = [10, 11, 13, 12, 14, 15, 16]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5]",
        "output": "False"
      },
      {
        "input": "nums = [1,1,1,1,1]",
        "output": "False"
      },
      {
        "input": "nums = [1,2,4,5,6,7,8,9,10]",
        "output": "False"
      },
      {
        "input": "nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "True"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "True"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,2,3,4]",
        "output": "False"
      },
      {
        "input": "nums = [10, 11, 12, 13, 15, 14, 16, 17, 18, 19]",
        "output": "True"
      },
      {
        "input": "nums = [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70]",
        "output": "True"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10]",
        "output": "True"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95]",
        "output": "True"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 105, 99]",
        "output": "True"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10]",
        "output": "True"
      },
      {
        "input": "nums = [-3,-2,-1,0,1,2,3]",
        "output": "True"
      },
      {
        "input": "nums = [5, 1, 3, 2, 4, 6, 7, 8, 9, 10]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "True"
      },
      {
        "input": "nums = [99990, 99991, 99992, 99993, 99994, 99995, 99996, 99997, 99998, 99999]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 4, 5, 6]",
        "output": "False"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40]",
        "output": "True"
      },
      {
        "input": "nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "True"
      },
      {
        "input": "nums = [10000, 10002, 10001, 10004, 10003]",
        "output": "True"
      },
      {
        "input": "nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]",
        "output": "False"
      },
      {
        "input": "nums = [1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991]",
        "output": "True"
      },
      {
        "input": "nums = [3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "True"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11]",
        "output": "True"
      },
      {
        "input": "nums = [50, 52, 51, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40]",
        "output": "True"
      },
      {
        "input": "nums = [1,3,5,7,9,11,13,15,17,19]",
        "output": "False"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 7, 8, 9, 10]",
        "output": "False"
      },
      {
        "input": "nums = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]",
        "output": "True"
      },
      {
        "input": "nums = [50, 51, 49, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]",
        "output": "True"
      },
      {
        "input": "nums = [9, 7, 8, 6, 5, 4, 3, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91]",
        "output": "True"
      },
      {
        "input": "nums = [30, 29, 28, 27, 26, 25, 24, 23, 22, 21]",
        "output": "True"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0]",
        "output": "False"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "True"
      },
      {
        "input": "nums = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140]",
        "output": "True"
      },
      {
        "input": "nums = [99999, 100000, 100001, 100002, 100003, 100004, 100005, 100006, 100007, 100008]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996]",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 7, 6, 9, 8, 10, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 100001, 100002, 100003, 100004, 100005, 100006, 100007, 100008, 100009]",
        "output": "True"
      },
      {
        "input": "nums = [10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "True"
      },
      {
        "input": "nums = [100, 102, 103, 104, 105]",
        "output": "False"
      },
      {
        "input": "nums = [10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009, 10010]",
        "output": "True"
      },
      {
        "input": "nums = [50000, 50001, 50002, 50003, 50004, 50005, 50006, 50007, 50008, 50009, 50010, 50011, 50012, 50013, 50014, 50015, 50016, 50017, 50018, 50019]",
        "output": "True"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 4]",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "False"
      },
      {
        "input": "nums = [100000, 99999, 100001, 99998]",
        "output": "True"
      },
      {
        "input": "nums = [1000, 1001, 1002, 1003, 1004, 999]",
        "output": "True"
      },
      {
        "input": "nums = [20, 22, 21, 19, 18, 23, 24, 25, 26, 27]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "True"
      },
      {
        "input": "nums = [100, 101, 99, 102, 103]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 100000, 100000, 100000, 100000]",
        "output": "False"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "True"
      },
      {
        "input": "nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]",
        "output": "True"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
        "output": "False"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "False"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]",
        "output": "True"
      },
      {
        "input": "nums = [5, 1, 4, 2, 3]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "True"
      },
      {
        "input": "nums = [10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009, 10010, 10011, 10012, 10013, 10014, 10015, 10016, 10017, 10018, 10019]",
        "output": "True"
      },
      {
        "input": "nums = [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58]",
        "output": "True"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5]",
        "output": "False"
      },
      {
        "input": "nums = [10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "False"
      },
      {
        "input": "nums = [0,1,2,3,4,5,6,7,8,9,10]",
        "output": "True"
      },
      {
        "input": "nums = [25000, 25001, 25002, 25003, 25004, 25005, 25006, 25007, 25008, 25009, 25010, 25011, 25012, 25013, 25014, 25015, 25016, 25017, 25018, 25019, 25020]",
        "output": "True"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "True"
      },
      {
        "input": "nums = [9,8,7,6,5,4,3,2,1]",
        "output": "True"
      },
      {
        "input": "nums = [-3, -2, -1, 0, 1, 2]",
        "output": "True"
      },
      {
        "input": "nums = [99995, 99996, 99997, 99998, 99999, 100000]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 99998, 99999, 100001]",
        "output": "True"
      },
      {
        "input": "nums = [50000, 49999, 50001, 49998, 50002]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 99999, 100001, 100002, 99998]",
        "output": "True"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 2, 4, 5]",
        "output": "False"
      },
      {
        "input": "nums = [10, 12, 11, 9, 8, 7, 13, 14, 15, 16, 17]",
        "output": "True"
      },
      {
        "input": "nums = [200000, 199999, 199998, 199997, 199996, 199995, 199994, 199993, 199992, 199991]",
        "output": "True"
      },
      {
        "input": "nums = [5, 6, 7, 8, 9, 11, 12, 13, 14, 15]",
        "output": "False"
      },
      {
        "input": "nums = [7]",
        "output": "True"
      },
      {
        "input": "nums = [42, 44, 43, 41, 40, 39, 38]",
        "output": "True"
      },
      {
        "input": "nums = [50, 52, 51, 53, 54, 55, 56, 57, 58, 59]",
        "output": "True"
      }
    ]
  },
  {
    "id": 203,
    "difficulty": "Easy",
    "tags": [
      "Recursion",
      "Linked List"
    ],
    "problemDescription": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\n\u00a0\nExample 1:\n\n\nInput: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]\n\nExample 2:\n\nInput: head = [], val = 1\nOutput: []\n\nExample 3:\n\nInput: head = [7,7,7,7], val = 7\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [0, 104].\n1 <= Node.val <= 50\n0 <= val <= 50\n\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n        ",
    "testCases": [
      {
        "input": "head = [1,2,6,3,4,5,6], val = 6",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [10,20,30,40,50], val = 10",
        "output": "[20, 30, 40, 50]"
      },
      {
        "input": "head = [50,20,30,20,10], val = 20",
        "output": "[50, 30, 10]"
      },
      {
        "input": "head = [1,1,1,1,1], val = 1",
        "output": "None"
      },
      {
        "input": "head = [50,40,30,20,10], val = 50",
        "output": "[40, 30, 20, 10]"
      },
      {
        "input": "head = [7,7,7,7], val = 7",
        "output": "None"
      },
      {
        "input": "head = [5,1,2,3,5,4,5], val = 5",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "head = [5,1,5,2,5,3,5], val = 5",
        "output": "[1, 2, 3]"
      },
      {
        "input": "head = [1,2,3,4,5], val = 3",
        "output": "[1, 2, 4, 5]"
      },
      {
        "input": "head = [], val = 1",
        "output": "None"
      },
      {
        "input": "head = [1,1,1,2,3], val = 1",
        "output": "[2, 3]"
      },
      {
        "input": "head = [1,2,3,4,5], val = 6",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], val = 10",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31], val = 35",
        "output": "[50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 34, 33, 32, 31]"
      },
      {
        "input": "head = [50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21], val = 45",
        "output": "[50, 49, 48, 47, 46, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], val = 15",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [42,42,42,42,42,42], val = 42",
        "output": "None"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], val = 20",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 22, 24, 26, 28, 30]"
      },
      {
        "input": "head = [1,1,1,1,2,2,2,2,3,3,3,3], val = 2",
        "output": "[1, 1, 1, 1, 3, 3, 3, 3]"
      },
      {
        "input": "head = [1,2,2,3,2,4,2,5,2,6], val = 2",
        "output": "[1, 3, 4, 5, 6]"
      },
      {
        "input": "head = [1,2,2,1,3,3,3,2,2,1], val = 2",
        "output": "[1, 1, 3, 3, 3, 1]"
      },
      {
        "input": "head = [50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50], val = 50",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [10,20,30,40,50,10,20,30], val = 20",
        "output": "[10, 30, 40, 50, 10, 30]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,5,10,15,20,25,30,35,40,45,50], val = 5",
        "output": "[10, 15, 20, 25, 30, 35, 40, 45, 50, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], val = 8",
        "output": "[10, 9, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19], val = 11",
        "output": "[1, 3, 5, 7, 9, 13, 15, 17, 19]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50], val = 2",
        "output": "[4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19], val = 20",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19], val = 13",
        "output": "[1, 3, 5, 7, 9, 11, 15, 17, 19]"
      },
      {
        "input": "head = [1,2,3,2,4,2,5,2,6,2,7], val = 2",
        "output": "[1, 3, 4, 5, 6, 7]"
      },
      {
        "input": "head = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2], val = 2",
        "output": "[1, 3, 1, 3, 1]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], val = 5",
        "output": "[1, 2, 3, 4, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], val = 9",
        "output": "[10, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], val = 10",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100,10,20,30,40,50], val = 10",
        "output": "[20, 30, 40, 50, 60, 70, 80, 90, 100, 20, 30, 40, 50]"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], val = 70",
        "output": "[10, 20, 30, 40, 50, 60, 80, 90, 100]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30], val = 14",
        "output": "[2, 4, 6, 8, 10, 12, 16, 18, 20, 22, 24, 26, 28, 30]"
      },
      {
        "input": "head = [1,2,1,3,1,4,1,5], val = 1",
        "output": "[2, 3, 4, 5]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], val = 1",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], val = 7",
        "output": "[1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22], val = 22",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,1,2,3,4,5,6], val = 3",
        "output": "[1, 2, 4, 5, 6, 1, 2, 4, 5, 6]"
      },
      {
        "input": "head = [3,5,2,3,7,3,8,3,3], val = 3",
        "output": "[5, 2, 7, 8]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], val = 2",
        "output": "[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1,2,3,2,4,2,5,2,6,2], val = 2",
        "output": "[1, 3, 4, 5, 6]"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], val = 10",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]"
      },
      {
        "input": "head = [3,2,1,4,5,6,3,7,8,9,3], val = 3",
        "output": "[2, 1, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [3,1,4,1,5,9,2,6,5,3,5], val = 5",
        "output": "[3, 1, 4, 1, 9, 2, 6, 3]"
      },
      {
        "input": "head = [3,2,1,3,2,1,3,2,1,3,2,1], val = 3",
        "output": "[2, 1, 2, 1, 2, 1, 2, 1]"
      },
      {
        "input": "head = [15,16,15,17,15,18,15,19,15,20], val = 15",
        "output": "[16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1], val = 25",
        "output": "[30, 29, 28, 27, 26, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [34,33,32,31,30,29,28,27,26,25], val = 27",
        "output": "[34, 33, 32, 31, 30, 29, 28, 26, 25]"
      },
      {
        "input": "head = [2,2,2,1,1,1,3,3,3], val = 2",
        "output": "[1, 1, 1, 3, 3, 3]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], val = 19",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20]"
      },
      {
        "input": "head = [50,49,48,47,46,45,44,43,42,41], val = 47",
        "output": "[50, 49, 48, 46, 45, 44, 43, 42, 41]"
      },
      {
        "input": "head = [1,2,2,3,3,2,2,1,1,2,2,1,1], val = 1",
        "output": "[2, 2, 3, 3, 2, 2, 2, 2]"
      },
      {
        "input": "head = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4], val = 4",
        "output": "None"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19], val = 1",
        "output": "[3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "head = [1,2,1,2,1,2,1,2,1,2], val = 1",
        "output": "[2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42], val = 42",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,4,3,2,1,2,3,4,3,2,1], val = 3",
        "output": "[1, 2, 4, 2, 1, 2, 4, 2, 1]"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], val = 1",
        "output": "None"
      },
      {
        "input": "head = [1,2,3,1,2,3,1,2,3,1], val = 1",
        "output": "[2, 3, 2, 3, 2, 3]"
      },
      {
        "input": "head = [42,42,42,42,42,42,42,42,42,42], val = 42",
        "output": "None"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20], val = 18",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 20]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39], val = 19",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]"
      },
      {
        "input": "head = [50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31], val = 31",
        "output": "[50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32]"
      },
      {
        "input": "head = [10,20,30,10,40,10,50], val = 10",
        "output": "[20, 30, 40, 50]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20], val = 16",
        "output": "[2, 4, 6, 8, 10, 12, 14, 18, 20]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], val = 1",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], val = 15",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], val = 7",
        "output": "[1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21], val = 21",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "head = [3,3,3,2,2,1,1,1,2,2,2], val = 2",
        "output": "[3, 3, 3, 1, 1, 1]"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], val = 2",
        "output": "[1, 1, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]"
      },
      {
        "input": "head = [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], val = 4",
        "output": "[1, 2, 2, 3, 3, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]"
      },
      {
        "input": "head = [1,1,1,2,2,2,3,3,3,4,4,4], val = 2",
        "output": "[1, 1, 1, 3, 3, 3, 4, 4, 4]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], val = 10",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2], val = 1",
        "output": "[2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], val = 2",
        "output": "[1, 1, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49], val = 13",
        "output": "[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]"
      },
      {
        "input": "head = [42, 17, 22, 17, 35, 17, 5, 17], val = 17",
        "output": "[42, 22, 35, 5]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,50], val = 50",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21], val = 13",
        "output": "[1, 3, 5, 7, 9, 11, 15, 17, 19, 21]"
      },
      {
        "input": "head = [25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25], val = 25",
        "output": "None"
      },
      {
        "input": "head = [1,3,2,6,5,4,6,7,8,6,9], val = 6",
        "output": "[1, 3, 2, 5, 4, 7, 8, 9]"
      },
      {
        "input": "head = [5,6,7,8,9,10,11,12,13,14,15], val = 10",
        "output": "[5, 6, 7, 8, 9, 11, 12, 13, 14, 15]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], val = 5",
        "output": "None"
      },
      {
        "input": "head = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9], val = 1",
        "output": "[2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], val = 20",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5], val = 1",
        "output": "[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 2, 3, 4, 5]"
      },
      {
        "input": "head = [5,1,2,3,4,5,6,7,8,9,5,10], val = 5",
        "output": "[1, 2, 3, 4, 6, 7, 8, 9, 10]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], val = 3",
        "output": "[1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50], val = 26",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]"
      },
      {
        "input": "head = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], val = 3",
        "output": "[1, 4, 1, 5, 9, 2, 6, 5, 5]"
      },
      {
        "input": "head = [2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3], val = 3",
        "output": "[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]"
      },
      {
        "input": "head = [1, 3, 2, 3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 3, 9, 3], val = 3",
        "output": "[1, 2, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "head = [1,2,3,4,3,2,1,3,2,1], val = 3",
        "output": "[1, 2, 4, 2, 1, 2, 1]"
      },
      {
        "input": "head = [10,20,10,30,10,40], val = 10",
        "output": "[20, 30, 40]"
      },
      {
        "input": "head = [50,49,48,47,46,45,44,43,42,41,40], val = 45",
        "output": "[50, 49, 48, 47, 46, 44, 43, 42, 41, 40]"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5], val = 5",
        "output": "None"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20], val = 20",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18]"
      },
      {
        "input": "head = [50,49,48,47,46,45,44,43,42,41], val = 45",
        "output": "[50, 49, 48, 47, 46, 44, 43, 42, 41]"
      },
      {
        "input": "head = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], val = 50",
        "output": "[10, 20, 30, 40, 60, 70, 80, 90, 100]"
      },
      {
        "input": "head = [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100], val = 50",
        "output": "[5, 10, 15, 20, 25, 30, 35, 40, 45, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]"
      },
      {
        "input": "head = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10], val = 3",
        "output": "[1, 1, 1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]"
      },
      {
        "input": "head = [10,20,30,40,50,40,30,20,10], val = 30",
        "output": "[10, 20, 40, 50, 40, 20, 10]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], val = 3",
        "output": "[10, 9, 8, 7, 6, 5, 4, 2, 1]"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], val = 10",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "head = [2,3,2,2,2,2,2,2,2,2,2,2], val = 2",
        "output": "[3]"
      },
      {
        "input": "head = [49,48,47,46,45,44,43,42,41,40], val = 45",
        "output": "[49, 48, 47, 46, 44, 43, 42, 41, 40]"
      },
      {
        "input": "head = [1], val = 1",
        "output": "None"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4], val = 10",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4]"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], val = 15",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"
      },
      {
        "input": "head = [42,23,42,23,42,23,42,23,42], val = 42",
        "output": "[23, 23, 23, 23]"
      },
      {
        "input": "head = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40], val = 30",
        "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 32, 34, 36, 38, 40]"
      }
    ]
  },
  {
    "id": 704,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Binary Search"
    ],
    "problemDescription": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\nYou must write an algorithm with O(log n) runtime complexity.\n\u00a0\nExample 1:\n\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n\nExample 2:\n\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 104\n-104 < nums[i], target < 104\nAll the integers in nums are unique.\nnums is sorted in ascending order.\n\n",
    "starterCode": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        ",
    "testCases": [
      {
        "input": "nums = [-10,0,10,20,30], target = -5",
        "output": "-1"
      },
      {
        "input": "nums = [1,2,3,4,5], target = 6",
        "output": "-1"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1], target = 0",
        "output": "-1"
      },
      {
        "input": "nums = [1,2,3,4,5], target = 3",
        "output": "2"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = 5",
        "output": "4"
      },
      {
        "input": "nums = [-10,0,10,20,30], target = 0",
        "output": "1"
      },
      {
        "input": "nums = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1], target = -5",
        "output": "5"
      },
      {
        "input": "nums = [0], target = 0",
        "output": "0"
      },
      {
        "input": "nums = [-1,0,3,5,9,12], target = 9",
        "output": "4"
      },
      {
        "input": "nums = [5], target = 5",
        "output": "0"
      },
      {
        "input": "nums = [-10,-5,-3,-1,0,1,3,5,8,10], target = 10",
        "output": "9"
      },
      {
        "input": "nums = [5], target = 4",
        "output": "-1"
      },
      {
        "input": "nums = [-1,0,3,5,9,12], target = 2",
        "output": "-1"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10], target = 11",
        "output": "-1"
      },
      {
        "input": "nums = [0], target = 1",
        "output": "-1"
      },
      {
        "input": "nums = [-10,-5,-3,-1,0,1,3,5,8,10], target = -5",
        "output": "1"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], target = 210",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], target = 256",
        "output": "8"
      },
      {
        "input": "nums = [-10000, -9999, -9998, ..., -1, 0, 1, ..., 9998, 9999, 10000], target = 5000",
        "output": "Error: '>=' not supported between instances of 'ellipsis' and 'int'"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40], target = 15",
        "output": "-1"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], target = 155",
        "output": "-1"
      },
      {
        "input": "nums = [-100, -50, -20, -10, -5, 0, 5, 10, 20, 50, 100], target = 0",
        "output": "5"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], target = -6",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 0",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], target = 15",
        "output": "14"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], target = 18",
        "output": "-1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], target = 19",
        "output": "9"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], target = 99",
        "output": "104"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 16",
        "output": "-1"
      },
      {
        "input": "nums = [-1000, -500, -250, -125, -63, -31, -15, -7, -3, -1, 1, 3, 7, 15, 31, 63, 125, 250, 500, 1000], target = -15",
        "output": "6"
      },
      {
        "input": "nums = [10000], target = 10000",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 1",
        "output": "0"
      },
      {
        "input": "nums = [-10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991], target = -9995",
        "output": "5"
      },
      {
        "input": "nums = [-1, 1, 3, 5, 7, 9, 11, 13, 15, 17], target = 0",
        "output": "-1"
      },
      {
        "input": "nums = [-10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990], target = -9995",
        "output": "5"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], target = 0",
        "output": "-1"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], target = -3",
        "output": "2"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512], target = 64",
        "output": "6"
      },
      {
        "input": "nums = [-5, -3, -1, 0, 1, 3, 5], target = -2",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 18",
        "output": "17"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], target = 37",
        "output": "18"
      },
      {
        "input": "nums = [-9999, -9997, -9995, -9993, -9991, -9989, -9987, -9985, -9983, -9981], target = -9985",
        "output": "7"
      },
      {
        "input": "nums = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49], target = 50",
        "output": "-1"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], target = 6",
        "output": "-1"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000], target = 15000",
        "output": "14"
      },
      {
        "input": "nums = [-50, -20, -10, 0, 10, 20, 30, 50, 60], target = 30",
        "output": "6"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99], target = 98",
        "output": "-1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], target = 15",
        "output": "7"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], target = 155",
        "output": "-1"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = -10",
        "output": "-1"
      },
      {
        "input": "nums = [-10000, -5000, -2500, -1250, -625, 0, 625, 1250, 2500, 5000, 10000], target = -1250",
        "output": "3"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1], target = -5",
        "output": "5"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 10",
        "output": "9"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000], target = 99",
        "output": "-1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 1",
        "output": "0"
      },
      {
        "input": "nums = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49], target = 49",
        "output": "16"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], target = 50",
        "output": "50"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], target = 1",
        "output": "0"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288], target = 1",
        "output": "0"
      },
      {
        "input": "nums = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100], target = 50",
        "output": "-1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], target = 26",
        "output": "-1"
      },
      {
        "input": "nums = [5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050], target = 5005",
        "output": "5"
      },
      {
        "input": "nums = [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], target = 500",
        "output": "15"
      },
      {
        "input": "nums = [1], target = 0",
        "output": "-1"
      },
      {
        "input": "nums = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], target = 0",
        "output": "10"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], target = 27",
        "output": "13"
      },
      {
        "input": "nums = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145], target = 146",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 20",
        "output": "19"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], target = 16384",
        "output": "14"
      },
      {
        "input": "nums = [50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200], target = 175",
        "output": "-1"
      },
      {
        "input": "nums = [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], target = 0",
        "output": "-1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], target = 30",
        "output": "-1"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000], target = 2001",
        "output": "-1"
      },
      {
        "input": "nums = [-1000, -900, -800, -700, -600, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], target = -550",
        "output": "-1"
      },
      {
        "input": "nums = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400], target = 225",
        "output": "14"
      },
      {
        "input": "nums = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946], target = 610",
        "output": "13"
      },
      {
        "input": "nums = [-9999, -9997, -9995, -9993, -9991, -9989, -9987, -9985, -9983, -9981, -9979, -9977, -9975, -9973, -9971, -9969, -9967, -9965, -9963, -9961], target = -9975",
        "output": "12"
      },
      {
        "input": "nums = [-10000, -5000, 0, 5000, 10000], target = 5000",
        "output": "3"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150], target = 88",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], target = 1024",
        "output": "10"
      },
      {
        "input": "nums = [-10000, -9000, -8000, -7000, -6000, -5000, -4000, -3000, -2000, -1000], target = -5000",
        "output": "5"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], target = 5500",
        "output": "-1"
      },
      {
        "input": "nums = [-100, -99, -98, -97, -96, -95, -94, -93, -92, -91], target = -95",
        "output": "5"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], target = 5",
        "output": "-1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], target = 29",
        "output": "14"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000], target = 1500",
        "output": "14"
      },
      {
        "input": "nums = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49], target = 1",
        "output": "0"
      },
      {
        "input": "nums = [1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], target = 1005",
        "output": "5"
      },
      {
        "input": "nums = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100], target = 25",
        "output": "4"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 8",
        "output": "7"
      },
      {
        "input": "nums = [-10000, -9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991], target = -9990",
        "output": "-1"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], target = 23",
        "output": "-1"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990, -9989, -9988, -9987, -9986, -9985, -9984, -9983, -9982, -9981, -9980, -9979, -9978, -9977, -9976, -9975, -9974, -9973, -9972, -9971, -9970, -9969, -9968, -9967, -9966, -9965, -9964, -9963, -9962, -9961, -9960, -9959, -9958, -9957, -9956, -9955, -9954, -9953, -9952, -9951, -9950], target = -9952",
        "output": "47"
      },
      {
        "input": "nums = [1], target = 2",
        "output": "-1"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40], target = 21",
        "output": "-1"
      },
      {
        "input": "nums = [-10000, -5000, -2500, -1000, -500, -250, -100, -50, -25, 0, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000], target = 1500",
        "output": "-1"
      },
      {
        "input": "nums = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361], target = 144",
        "output": "12"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500], target = 950",
        "output": "-1"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150], target = 150",
        "output": "14"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], target = 550",
        "output": "-1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19], target = 20",
        "output": "-1"
      },
      {
        "input": "nums = [-9999, -9998, -9997, -9996, -9995, -9994, -9993, -9992, -9991, -9990], target = -9995",
        "output": "4"
      },
      {
        "input": "nums = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625], target = 289",
        "output": "16"
      },
      {
        "input": "nums = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400], target = 196",
        "output": "13"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], target = 14",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 21",
        "output": "-1"
      },
      {
        "input": "nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39], target = 39",
        "output": "19"
      },
      {
        "input": "nums = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000], target = 55000",
        "output": "-1"
      },
      {
        "input": "nums = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000], target = 100000",
        "output": "5"
      },
      {
        "input": "nums = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000], target = 5000",
        "output": "4"
      },
      {
        "input": "nums = [5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019], target = 5000",
        "output": "0"
      },
      {
        "input": "nums = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49], target = 25",
        "output": "8"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], target = 15",
        "output": "14"
      },
      {
        "input": "nums = [1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], target = 1000",
        "output": "0"
      },
      {
        "input": "nums = [-10000, -9000, -8000, -7000, -6000, -5000, -4000, -3000, -2000, -1000], target = -5500",
        "output": "-1"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], target = 15",
        "output": "14"
      }
    ]
  },
  {
    "id": 496,
    "difficulty": "Easy",
    "tags": [
      "Stack",
      "Array",
      "Hash Table",
      "Monotonic Stack"
    ],
    "problemDescription": "The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\nFor each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\nReturn an array ans of length nums1.length such that ans[i] is the next greater element as described above.\n\u00a0\nExample 1:\n\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n\nExample 2:\n\nInput: nums1 = [2,4], nums2 = [1,2,3,4]\nOutput: [3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\n\n\u00a0\nConstraints:\n\n1 <= nums1.length <= nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 104\nAll integers in nums1 and nums2 are unique.\nAll the integers of nums1 also appear in nums2.\n\n\u00a0\nFollow up: Could you find an O(nums1.length + nums2.length) solution?",
    "starterCode": "class Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums1 = [2,3,5,6], nums2 = [5,6,2,3,8,9]",
        "output": "[3, 8, 6, 8]"
      },
      {
        "input": "nums1 = [1,2], nums2 = [2,1]",
        "output": "[-1, -1]"
      },
      {
        "input": "nums1 = [1,2,3,4], nums2 = [4,3,2,1]",
        "output": "[-1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [5], nums2 = [5]",
        "output": "[-1]"
      },
      {
        "input": "nums1 = [1,6,4,8], nums2 = [4,5,1,8,6,7,9]",
        "output": "[8, 7, 5, 9]"
      },
      {
        "input": "nums1 = [5,2,6], nums2 = [4,1,5,2,3,6]",
        "output": "[6, 3, -1]"
      },
      {
        "input": "nums1 = [2,4], nums2 = [1,2,3,4]",
        "output": "[3, -1]"
      },
      {
        "input": "nums1 = [4,1,2], nums2 = [1,3,4,2]",
        "output": "[-1, 3, -1]"
      },
      {
        "input": "nums1 = [10,5,6], nums2 = [3,4,2,1,5,7,8,9,10,6]",
        "output": "[-1, 7, -1]"
      },
      {
        "input": "nums1 = [2], nums2 = [1,2]",
        "output": "[-1]"
      },
      {
        "input": "nums1 = [1,3,5,7], nums2 = [1,2,3,4,5,6,7,8]",
        "output": "[2, 4, 6, 8]"
      },
      {
        "input": "nums1 = [3,5,8], nums2 = [2,3,4,5,7,8,10]",
        "output": "[4, 7, 10]"
      },
      {
        "input": "nums1 = [1], nums2 = [3,2,1]",
        "output": "[-1]"
      },
      {
        "input": "nums1 = [9,8,7], nums2 = [8,9,7,6,5,4,3,2,1]",
        "output": "[-1, 9, -1]"
      },
      {
        "input": "nums1 = [3,5,8], nums2 = [1,2,3,4,5,6,7,8,9]",
        "output": "[4, 6, 9]"
      },
      {
        "input": "nums1 = [9,10,7], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[10, -1, 8]"
      },
      {
        "input": "nums1 = [1,3,5,7], nums2 = [7,5,3,1,9,11,13]",
        "output": "[9, 9, 9, 9]"
      },
      {
        "input": "nums1 = [1], nums2 = [1]",
        "output": "[-1]"
      },
      {
        "input": "nums1 = [1,3], nums2 = [2,1,3,4]",
        "output": "[3, 4]"
      },
      {
        "input": "nums1 = [10,8,6], nums2 = [1,2,3,4,5,6,7,8,9,10,11]",
        "output": "[11, 9, 7]"
      },
      {
        "input": "nums1 = [9,7,3], nums2 = [3,6,9,12,15,7]",
        "output": "[12, -1, 6]"
      },
      {
        "input": "nums1 = [10,9,8], nums2 = [8,9,10,5,7]",
        "output": "[-1, 10, 9]"
      },
      {
        "input": "nums1 = [100,90,80,70], nums2 = [70,80,90,100,110,120,130,140,150]",
        "output": "[110, 100, 90, 80]"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [2,4,6,8,10,1,3,5,7,9]",
        "output": "[3, 5, 7, 9, -1]"
      },
      {
        "input": "nums1 = [33, 22, 11], nums2 = [11, 22, 33, 44, 55, 66, 77, 88, 99]",
        "output": "[44, 33, 22]"
      },
      {
        "input": "nums1 = [100,99,98,97], nums2 = [98,100,97,99,96,95,94,93,92]",
        "output": "[-1, -1, 100, 99]"
      },
      {
        "input": "nums1 = [3,5,2,1], nums2 = [1,2,3,5,4]",
        "output": "[5, -1, 3, 2]"
      },
      {
        "input": "nums1 = [3,5,2,4,9], nums2 = [8,5,3,9,2,4,7,6]",
        "output": "[9, 9, 4, 7, -1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [7,8,9], nums2 = [1,2,3,4,5,6,7,8,9]",
        "output": "[8, 9, -1]"
      },
      {
        "input": "nums1 = [3,8,9], nums2 = [10,11,7,8,6,5,3,4,9,2,1]",
        "output": "[4, 9, -1]"
      },
      {
        "input": "nums1 = [5,7,3,9,1], nums2 = [11,14,8,15,13,2,11,5,12,7,9,3,6,10,4,1]",
        "output": "[12, 9, 6, 10, -1]"
      },
      {
        "input": "nums1 = [6, 2, 8, 9], nums2 = [6, 5, 4, 3, 2, 1, 10, 11, 8, 9, 7]",
        "output": "[10, 10, 9, -1]"
      },
      {
        "input": "nums1 = [11, 13, 15, 17], nums2 = [17, 15, 13, 11, 19, 21, 23]",
        "output": "[19, 19, 19, 19]"
      },
      {
        "input": "nums1 = [9,8,7,6,5], nums2 = [5,6,7,8,9]",
        "output": "[-1, 9, 8, 7, 6]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1,6,7]",
        "output": "[6, 6, 6, 6, 6]"
      },
      {
        "input": "nums1 = [1,3,5,7], nums2 = [7,5,3,1,2,4,6,8,10]",
        "output": "[2, 4, 6, 8]"
      },
      {
        "input": "nums1 = [3,6,9,12,15], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[4, 7, 10, 13, -1]"
      },
      {
        "input": "nums1 = [3,5,7,9], nums2 = [9,7,5,3,1,2,4,6,8,10]",
        "output": "[4, 6, 8, 10]"
      },
      {
        "input": "nums1 = [15,25,35], nums2 = [10,15,20,25,30,35,40,45,50,55,60]",
        "output": "[20, 30, 40]"
      },
      {
        "input": "nums1 = [6, 5, 4, 3, 2, 1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [100,90,80,70], nums2 = [70,80,90,100,110]",
        "output": "[110, 100, 90, 80]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40], nums2 = [40, 10, 20, 30, 50, 60, 70]",
        "output": "[20, 30, 50, 50]"
      },
      {
        "input": "nums1 = [6,5,4,3,2,1], nums2 = [1,2,3,4,5,6]",
        "output": "[-1, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [3, 2, 1], nums2 = [5, 3, 2, 1, 6, 4]",
        "output": "[6, 6, 6]"
      },
      {
        "input": "nums1 = [23,56,78,90], nums2 = [90,78,56,23,12,34,45,67,89,100]",
        "output": "[34, 67, 89, 100]"
      },
      {
        "input": "nums1 = [42,55,66,77], nums2 = [42,77,55,88,66,99,100]",
        "output": "[77, 88, 99, 88]"
      },
      {
        "input": "nums1 = [8, 6, 4, 2], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[9, 7, 5, 3]"
      },
      {
        "input": "nums1 = [100, 90, 80], nums2 = [70, 80, 90, 100, 60, 50, 40, 30, 20, 10]",
        "output": "[-1, 100, 90]"
      },
      {
        "input": "nums1 = [10,20,30], nums2 = [10,20,30,25,15,5,40,35,33,31]",
        "output": "[20, 30, 40]"
      },
      {
        "input": "nums1 = [6,7,8,9,10], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[7, 8, 9, 10, -1]"
      },
      {
        "input": "nums1 = [7,3,2], nums2 = [5,7,3,2,1,8]",
        "output": "[8, 8, 8]"
      },
      {
        "input": "nums1 = [12,14,13,11,15], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[13, 15, 14, 12, -1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1,11]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [8,10,4,3], nums2 = [1,11,10,4,8,3,7]",
        "output": "[-1, -1, 8, 7]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [7,6,5,4,3,2,1], nums2 = [2,1,3,6,5,4,7]",
        "output": "[-1, 7, 7, 7, 6, 3, 3]"
      },
      {
        "input": "nums1 = [2,6,4,5,3], nums2 = [3,1,2,5,4,7,6]",
        "output": "[5, -1, 7, 7, 5]"
      },
      {
        "input": "nums1 = [8,9,10,11], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "[9, 10, 11, 12]"
      },
      {
        "input": "nums1 = [3, 6, 9], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "[4, 7, 10]"
      },
      {
        "input": "nums1 = [3,5,7,9], nums2 = [1,2,3,4,5,6,7,8,9]",
        "output": "[4, 6, 8, -1]"
      },
      {
        "input": "nums1 = [7,5,3,1], nums2 = [9,7,5,3,1,2,4,6,8,10]",
        "output": "[8, 6, 4, 2]"
      },
      {
        "input": "nums1 = [100, 90, 80, 70], nums2 = [70, 80, 90, 100, 110, 120, 130]",
        "output": "[110, 100, 90, 80]"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [9,7,5,3,1,2,4,6,8,10]",
        "output": "[2, 4, 6, 8, 10]"
      },
      {
        "input": "nums1 = [3, 5, 2, 4, 9], nums2 = [9, 1, 2, 5, 3, 7, 8, 4, 6]",
        "output": "[7, 7, 5, 6, -1]"
      },
      {
        "input": "nums1 = [42, 23, 14, 5, 1], nums2 = [1, 5, 14, 23, 42, 3, 7, 11, 13, 19, 21, 27]",
        "output": "[-1, 42, 23, 14, 5]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15, 17], nums2 = [15, 13, 11, 9, 7, 5, 3, 1, 17, 19]",
        "output": "[17, 17, 17, 17, 17, 17, 17, 17, 19]"
      },
      {
        "input": "nums1 = [5,10,15,20], nums2 = [20,15,10,5,25,30,35,40]",
        "output": "[25, 25, 25, 25]"
      },
      {
        "input": "nums1 = [7,3,9,1], nums2 = [1,3,5,7,9]",
        "output": "[9, 5, -1, 3]"
      },
      {
        "input": "nums1 = [15,10,5], nums2 = [1,2,3,4,5,10,15,20,25]",
        "output": "[20, 15, 10]"
      },
      {
        "input": "nums1 = [10,11,12,13], nums2 = [13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[-1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [7,6,5,4,3,2,1], nums2 = [1,2,3,4,5,6,7]",
        "output": "[-1, 7, 6, 5, 4, 3, 2]"
      },
      {
        "input": "nums1 = [6, 7, 8], nums2 = [1, 2, 3, 6, 7, 8, 5, 4]",
        "output": "[7, 8, -1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1,6]",
        "output": "[6, 6, 6, 6, 6]"
      },
      {
        "input": "nums1 = [7,8,9], nums2 = [9,8,7,6,5,4,3,2,1]",
        "output": "[-1, -1, -1]"
      },
      {
        "input": "nums1 = [1,10,100,1000], nums2 = [100,1,1000,10,200,300,400,500]",
        "output": "[1000, 200, 1000, -1]"
      },
      {
        "input": "nums1 = [3,6,1,4], nums2 = [9,3,8,1,7,6,5,4,2]",
        "output": "[8, -1, 7, -1]"
      },
      {
        "input": "nums1 = [15,12,11,13], nums2 = [15,12,11,14,10,9,8,13,16]",
        "output": "[16, 14, 14, 16]"
      },
      {
        "input": "nums1 = [100, 99, 98, 97, 96], nums2 = [96, 97, 98, 99, 100, 101, 102, 103]",
        "output": "[101, 100, 99, 98, 97]"
      },
      {
        "input": "nums1 = [9, 7, 5, 3, 1], nums2 = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "output": "[11, 9, 7, 5, 3]"
      },
      {
        "input": "nums1 = [1, 7, 4, 2, 10], nums2 = [2, 1, 10, 7, 4, 5, 3]",
        "output": "[10, -1, 5, 10, -1]"
      },
      {
        "input": "nums1 = [11, 13, 7, 5, 3, 1], nums2 = [1, 3, 5, 7, 9, 11, 13, 15]",
        "output": "[13, 15, 9, 7, 5, 3]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1,11,12,13,14,15]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [10, 20, 30], nums2 = [30, 20, 10, 40, 50, 60]",
        "output": "[40, 40, 40]"
      },
      {
        "input": "nums1 = [9, 8, 7, 6, 5, 4, 3, 2, 1], nums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[-1, -1, -1, -1, -1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [10,20,30], nums2 = [10,15,20,25,30]",
        "output": "[15, 25, -1]"
      },
      {
        "input": "nums1 = [6, 4, 1], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[7, 5, 2]"
      },
      {
        "input": "nums1 = [7, 5, 9], nums2 = [9, 4, 7, 3, 5, 1, 8, 6, 2]",
        "output": "[8, 8, -1]"
      },
      {
        "input": "nums1 = [7,6,5], nums2 = [5,1,2,3,4,6,7]",
        "output": "[-1, 7, 6]"
      },
      {
        "input": "nums1 = [3, 11, 17, 19], nums2 = [3, 19, 23, 11, 17, 29, 21, 25]",
        "output": "[19, 17, 29, 23]"
      },
      {
        "input": "nums1 = [1,7,3,4,5,6], nums2 = [3,4,1,6,8,9,5,2,7]",
        "output": "[6, -1, 4, 6, 7, 8]"
      },
      {
        "input": "nums1 = [2,5,10,15,20], nums2 = [1,3,5,7,9,11,13,15,17,19,20,18,16,14,12,10,8,6,4,2]",
        "output": "[-1, 7, -1, 17, -1]"
      },
      {
        "input": "nums1 = [15, 10, 18, 23, 5], nums2 = [18, 10, 15, 5, 23, 2, 11, 17, 3, 12]",
        "output": "[23, 15, 23, -1, 23]"
      },
      {
        "input": "nums1 = [11,12,13], nums2 = [5,11,9,12,13,8,7,6,10]",
        "output": "[12, 13, -1]"
      },
      {
        "input": "nums1 = [50,60,70,80,90], nums2 = [90,80,70,60,50,40,30,20,10]",
        "output": "[-1, -1, -1, -1, -1]"
      },
      {
        "input": "nums1 = [100,200,300,400], nums2 = [400,300,200,100,50,150,250,350,450]",
        "output": "[150, 250, 350, 450]"
      },
      {
        "input": "nums1 = [1,6,11,13], nums2 = [1,3,5,7,9,11,13,2,4,6,8,10,12,14]",
        "output": "[3, 8, 13, 14]"
      },
      {
        "input": "nums1 = [15, 25, 35], nums2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 15, 25, 35]",
        "output": "[25, 35, -1]"
      },
      {
        "input": "nums1 = [7, 5, 3, 1], nums2 = [1, 3, 5, 7, 9]",
        "output": "[9, 7, 5, 3]"
      },
      {
        "input": "nums1 = [5, 8, 12, 15], nums2 = [15, 12, 5, 8, 20, 25, 30, 35]",
        "output": "[8, 20, 20, 20]"
      },
      {
        "input": "nums1 = [5,1,4], nums2 = [2,6,4,5,1,9]",
        "output": "[9, 9, 5]"
      },
      {
        "input": "nums1 = [9,10,11], nums2 = [3,4,5,1,6,9,7,8,11,10,2]",
        "output": "[11, -1, -1]"
      },
      {
        "input": "nums1 = [9, 8, 7, 6], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[-1, 9, 8, 7]"
      },
      {
        "input": "nums1 = [4,3,2,1], nums2 = [1,2,3,4]",
        "output": "[-1, 4, 3, 2]"
      },
      {
        "input": "nums1 = [4, 3, 2, 1, 0], nums2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [8,6,4,2], nums2 = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]",
        "output": "[10, 8, 6, 4]"
      },
      {
        "input": "nums1 = [2, 6, 4, 5, 7, 3], nums2 = [3, 5, 4, 6, 2, 1, 7, 9, 8]",
        "output": "[7, 7, 6, 6, 9, 5]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9], nums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]",
        "output": "[10, 10, 10, 10, 10, 10, 10, 10, 10]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6, 8, 1, 3, 5, 7]",
        "output": "[3, 5, 7, -1]"
      },
      {
        "input": "nums1 = [11,22,33], nums2 = [33,22,11,44,55,66,77]",
        "output": "[44, 44, 44]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [50, 40, 30, 20, 10, 60, 70, 80, 90]",
        "output": "[60, 60, 60, 60, 60]"
      },
      {
        "input": "nums1 = [4,1,3,7,6,2,5], nums2 = [7,8,2,3,4,1,6,5,9]",
        "output": "[6, 6, 4, 8, 9, 3, 9]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9], nums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 11, 12]",
        "output": "[11, 11, 11, 11, 11, 11, 11, 11, 11]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [3,4,5,1,2]",
        "output": "[2, -1, 4, 5, -1]"
      },
      {
        "input": "nums1 = [1,10,5,3], nums2 = [3,1,10,5,9,7,4,6,8]",
        "output": "[10, -1, 9, 10]"
      },
      {
        "input": "nums1 = [5, 10, 20], nums2 = [20, 10, 5, 25, 15, 30]",
        "output": "[25, 25, 25]"
      },
      {
        "input": "nums1 = [7, 5, 3, 2], nums2 = [3, 2, 7, 5, 4]",
        "output": "[-1, -1, 7, 7]"
      },
      {
        "input": "nums1 = [1,7,4,3], nums2 = [3,4,1,5,7,8,9]",
        "output": "[5, 8, 5, 4]"
      }
    ]
  },
  {
    "id": 661,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Matrix"
    ],
    "problemDescription": "An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\n\nGiven an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.\n\u00a0\nExample 1:\n\n\nInput: img = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[0,0,0],[0,0,0],[0,0,0]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n\nExample 2:\n\n\nInput: img = [[100,200,100],[200,50,200],[100,200,100]]\nOutput: [[137,141,137],[141,138,141],[137,141,137]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n\n\u00a0\nConstraints:\n\nm == img.length\nn == img[i].length\n1 <= m, n <= 200\n0 <= img[i][j] <= 255\n\n",
    "starterCode": "class Solution:\n    def imageSmoother(self, img: List[List[int]]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "img = [[100,200,100],[200,50,200],[100,200,100]]",
        "output": "[[137, 141, 137], [141, 138, 141], [137, 141, 137]]"
      },
      {
        "input": "img = [[10,20,30],[40,50,60],[70,80,90]]",
        "output": "[[30, 35, 40], [45, 50, 55], [60, 65, 70]]"
      },
      {
        "input": "img = [[1]]",
        "output": "[[1]]"
      },
      {
        "input": "img = [[255,255,255],[255,255,255],[255,255,255]]",
        "output": "[[255, 255, 255], [255, 255, 255], [255, 255, 255]]"
      },
      {
        "input": "img = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[3, 3, 4], [4, 5, 5], [6, 6, 7]]"
      },
      {
        "input": "img = [[1,1,1],[1,0,1],[1,1,1]]",
        "output": "[[0, 0, 0], [0, 0, 0], [0, 0, 0]]"
      },
      {
        "input": "img = [[1,2],[3,4]]",
        "output": "[[2, 2], [2, 2]]"
      },
      {
        "input": "img = [[1,2,3],[4,5,6]]",
        "output": "[[3, 3, 4], [3, 3, 4]]"
      },
      {
        "input": "img = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]",
        "output": "[[3, 4, 5, 5], [5, 6, 7, 7], [9, 10, 11, 11], [11, 12, 13, 13]]"
      },
      {
        "input": "img = [[0,0,0],[0,0,0],[0,0,0]]",
        "output": "[[0, 0, 0], [0, 0, 0], [0, 0, 0]]"
      },
      {
        "input": "img = [[255]]",
        "output": "[[255]]"
      },
      {
        "input": "img = [[1,1],[1,1]]",
        "output": "[[1, 1], [1, 1]]"
      },
      {
        "input": "img = [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]",
        "output": "[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]"
      },
      {
        "input": "img = [[255, 255, 255, 255], [255, 0, 0, 255], [255, 0, 0, 255], [255, 255, 255, 255]]",
        "output": "[[191, 170, 170, 191], [170, 141, 141, 170], [170, 141, 141, 170], [191, 170, 170, 191]]"
      },
      {
        "input": "img = [[128, 64, 32, 16, 8], [8, 128, 64, 32, 16], [16, 8, 128, 64, 32], [32, 16, 8, 128, 64], [64, 32, 16, 8, 128]]",
        "output": "[[82, 70, 56, 28, 18], [58, 64, 59, 43, 28], [34, 45, 64, 59, 56], [28, 35, 45, 64, 70], [36, 28, 34, 58, 82]]"
      },
      {
        "input": "img = [[255, 0, 255], [0, 255, 0], [255, 0, 255]]",
        "output": "[[127, 127, 127], [127, 141, 127], [127, 127, 127]]"
      },
      {
        "input": "img = [[123, 45, 67], [89, 101, 113], [125, 137, 149], [161, 173, 185], [197, 209, 221]]",
        "output": "[[89, 89, 81], [103, 105, 102], [131, 137, 143], [167, 173, 179], [185, 191, 197]]"
      },
      {
        "input": "img = [[255, 0, 0], [0, 255, 0], [0, 0, 255]]",
        "output": "[[127, 85, 63], [85, 85, 85], [63, 85, 127]]"
      },
      {
        "input": "img = [[10,20,30,40,50],[60,70,80,90,100],[110,120,130,140,150],[160,170,180,190,200],[210,220,230,240,250]]",
        "output": "[[40, 45, 55, 65, 70], [65, 70, 80, 90, 95], [115, 120, 130, 140, 145], [165, 170, 180, 190, 195], [190, 195, 205, 215, 220]]"
      },
      {
        "input": "img = [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]]",
        "output": "[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]"
      },
      {
        "input": "img = [[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30]]",
        "output": "[[4, 5, 6, 7, 8, 8], [7, 8, 9, 10, 11, 11], [13, 14, 15, 16, 17, 17], [19, 20, 21, 22, 23, 23], [22, 23, 24, 25, 26, 26]]"
      },
      {
        "input": "img = [[255, 127, 63, 31], [15, 7, 3, 1], [255, 255, 255, 255], [255, 255, 255, 255]]",
        "output": "[[101, 78, 38, 24], [152, 137, 110, 101], [173, 172, 171, 170], [255, 255, 255, 255]]"
      },
      {
        "input": "img = [[10, 20], [30, 40]]",
        "output": "[[25, 25], [25, 25]]"
      },
      {
        "input": "img = [[200, 150, 100], [50, 0, 50], [100, 150, 200]]",
        "output": "[[100, 91, 75], [108, 111, 108], [75, 91, 100]]"
      },
      {
        "input": "img = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]",
        "output": "[[3, 3, 4], [4, 5, 5], [7, 8, 8], [10, 11, 11], [12, 12, 13]]"
      },
      {
        "input": "img = [[0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0]]",
        "output": "[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]"
      },
      {
        "input": "img = [[123,156,189],[212,245,278],[311,344,377]]",
        "output": "[[184, 200, 217], [231, 248, 264], [278, 294, 311]]"
      },
      {
        "input": "img = [[0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0]]",
        "output": "[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "img = [[255, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [255, 0, 0, 255]]",
        "output": "[[63, 42, 42, 63], [42, 28, 28, 42], [42, 28, 28, 42], [63, 42, 42, 63]]"
      },
      {
        "input": "img = [[50,50,50],[50,50,50],[50,50,50],[50,50,50]]",
        "output": "[[50, 50, 50], [50, 50, 50], [50, 50, 50], [50, 50, 50]]"
      },
      {
        "input": "img = [[255,0,255,0,255],[0,255,0,255,0],[255,0,255,0,255],[0,255,0,255,0],[255,0,255,0,255]]",
        "output": "[[127, 127, 127, 127, 127], [127, 141, 113, 141, 127], [127, 113, 141, 113, 127], [127, 141, 113, 141, 127], [127, 127, 127, 127, 127]]"
      },
      {
        "input": "img = [[255,255,255,255,255],[255,255,255,255,255],[255,255,255,255,255],[255,255,255,255,255],[255,255,255,255,255]]",
        "output": "[[255, 255, 255, 255, 255], [255, 255, 255, 255, 255], [255, 255, 255, 255, 255], [255, 255, 255, 255, 255], [255, 255, 255, 255, 255]]"
      },
      {
        "input": "img = [[200, 50, 50], [50, 200, 50], [50, 50, 200]]",
        "output": "[[125, 100, 87], [100, 100, 100], [87, 100, 125]]"
      },
      {
        "input": "img = [[0, 0, 0, 0], [0, 255, 255, 0], [0, 255, 255, 0], [0, 0, 0, 0]]",
        "output": "[[63, 85, 85, 63], [85, 113, 113, 85], [85, 113, 113, 85], [63, 85, 85, 63]]"
      },
      {
        "input": "img = [[0,0,0,0,0,0,0],[0,1,1,1,1,1,0],[0,1,255,255,255,1,0],[0,1,255,0,255,1,0],[0,1,255,255,255,1,0],[0,1,1,1,1,1,0],[0,0,0,0,0,0,0]]",
        "output": "[[0, 0, 0, 0, 0, 0, 0], [0, 28, 57, 85, 57, 28, 0], [0, 57, 85, 142, 85, 57, 0], [0, 85, 142, 226, 142, 85, 0], [0, 57, 85, 142, 85, 57, 0], [0, 28, 57, 85, 57, 28, 0], [0, 0, 0, 0, 0, 0, 0]]"
      },
      {
        "input": "img = [[10, 20, 30], [40, 50, 60], [70, 80, 90], [100, 110, 120], [130, 140, 150]]",
        "output": "[[30, 35, 40], [45, 50, 55], [75, 80, 85], [105, 110, 115], [120, 125, 130]]"
      },
      {
        "input": "img = [[255,0,0,0,255],[0,255,255,255,0],[0,255,0,255,0],[0,255,255,255,0],[255,0,0,0,255]]",
        "output": "[[127, 127, 127, 127, 127], [127, 113, 141, 113, 127], [127, 141, 226, 141, 127], [127, 113, 141, 113, 127], [127, 127, 127, 127, 127]]"
      },
      {
        "input": "img = [[0,0,0,0,0],[0,1,1,1,0],[0,1,255,1,0],[0,1,1,1,0],[0,0,0,0,0]]",
        "output": "[[0, 0, 0, 0, 0], [0, 28, 28, 28, 0], [0, 28, 29, 28, 0], [0, 28, 28, 28, 0], [0, 0, 0, 0, 0]]"
      },
      {
        "input": "img = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]",
        "output": "[[3, 4, 5, 5], [5, 6, 7, 7], [9, 10, 11, 11], [11, 12, 13, 13]]"
      },
      {
        "input": "img = [[0, 1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24, 25, 26]]",
        "output": "[[5, 5, 6, 7, 8, 9, 10, 11, 12], [9, 10, 11, 12, 13, 14, 15, 16, 16], [14, 14, 15, 16, 17, 18, 19, 20, 21]]"
      },
      {
        "input": "img = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]",
        "output": "[[4, 4, 5, 6, 7], [6, 7, 8, 9, 9], [11, 12, 13, 14, 14], [14, 14, 15, 16, 17]]"
      },
      {
        "input": "img = [[0,1,2,3,4,5],[5,4,3,2,1,0],[0,1,2,3,4,5],[5,4,3,2,1,0],[0,1,2,3,4,5],[5,4,3,2,1,0]]",
        "output": "[[2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 3, 3], [3, 3, 2, 2, 2, 1], [1, 2, 2, 2, 3, 3], [3, 3, 2, 2, 2, 1], [2, 2, 2, 2, 2, 2]]"
      },
      {
        "input": "img = [[100,200,300,400,500],[600,700,800,900,1000],[1100,1200,1300,1400,1500],[1600,1700,1800,1900,2000],[2100,2200,2300,2400,2500]]",
        "output": "[[400, 450, 550, 650, 700], [650, 700, 800, 900, 950], [1150, 1200, 1300, 1400, 1450], [1650, 1700, 1800, 1900, 1950], [1900, 1950, 2050, 2150, 2200]]"
      },
      {
        "input": "img = [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]]",
        "output": "[[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]]"
      },
      {
        "input": "img = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]",
        "output": "[[1, 1, 1, 1, 1], [1, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]]"
      },
      {
        "input": "img = [[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120], [130, 140, 150, 160], [170, 180, 190, 200]]",
        "output": "[[35, 40, 50, 55], [55, 60, 70, 75], [95, 100, 110, 115], [135, 140, 150, 155], [155, 160, 170, 175]]"
      },
      {
        "input": "img = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]",
        "output": "[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]"
      },
      {
        "input": "img = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36]]",
        "output": "[[4, 5, 6, 7, 8, 8], [7, 8, 9, 10, 11, 11], [13, 14, 15, 16, 17, 17], [19, 20, 21, 22, 23, 23], [25, 26, 27, 28, 29, 29], [28, 29, 30, 31, 32, 32]]"
      },
      {
        "input": "img = [[255, 100, 50, 25, 0], [25, 50, 100, 255, 255], [0, 25, 50, 100, 255], [255, 255, 100, 50, 25], [25, 100, 255, 255, 0]]",
        "output": "[[107, 96, 96, 114, 133], [75, 72, 83, 121, 148], [101, 95, 109, 132, 156], [110, 118, 132, 121, 114], [158, 165, 169, 114, 82]]"
      },
      {
        "input": "img = [[50, 100, 150, 200], [250, 50, 100, 150], [200, 250, 50, 100], [100, 150, 200, 250]]",
        "output": "[[112, 116, 125, 150], [150, 133, 127, 125], [166, 150, 144, 141], [175, 158, 166, 150]]"
      },
      {
        "input": "img = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]",
        "output": "[[4, 4, 5, 6, 7], [6, 7, 8, 9, 9], [11, 12, 13, 14, 14], [16, 17, 18, 19, 19], [19, 19, 20, 21, 22]]"
      },
      {
        "input": "img = [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]",
        "output": "[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]"
      },
      {
        "input": "img = [[150, 160, 170, 180], [190, 200, 210, 220], [230, 240, 250, 260], [270, 280, 290, 300]]",
        "output": "[[175, 180, 190, 195], [195, 200, 210, 215], [235, 240, 250, 255], [255, 260, 270, 275]]"
      },
      {
        "input": "img = [[255, 255, 255, 255], [255, 0, 0, 255], [255, 0, 255, 255], [255, 255, 255, 255]]",
        "output": "[[191, 170, 170, 191], [170, 170, 170, 212], [170, 170, 170, 212], [191, 212, 212, 255]]"
      },
      {
        "input": "img = [[100, 100, 100, 100, 100], [100, 100, 100, 100, 100], [100, 100, 100, 100, 100], [100, 100, 100, 100, 100], [100, 100, 100, 100, 100]]",
        "output": "[[100, 100, 100, 100, 100], [100, 100, 100, 100, 100], [100, 100, 100, 100, 100], [100, 100, 100, 100, 100], [100, 100, 100, 100, 100]]"
      },
      {
        "input": "img = [[10, 10, 10], [10, 10, 10], [10, 10, 10], [10, 10, 10], [10, 10, 10]]",
        "output": "[[10, 10, 10], [10, 10, 10], [10, 10, 10], [10, 10, 10], [10, 10, 10]]"
      },
      {
        "input": "img = [[100, 150, 200, 250], [100, 150, 200, 250], [100, 150, 200, 250], [100, 150, 200, 250], [100, 150, 200, 250], [100, 150, 200, 250]]",
        "output": "[[125, 150, 200, 225], [125, 150, 200, 225], [125, 150, 200, 225], [125, 150, 200, 225], [125, 150, 200, 225], [125, 150, 200, 225]]"
      },
      {
        "input": "img = [[0, 255, 255], [255, 255, 0], [255, 0, 0]]",
        "output": "[[191, 170, 191], [170, 141, 127], [191, 127, 63]]"
      },
      {
        "input": "img = [[100, 200, 150], [175, 200, 125], [100, 150, 200]]",
        "output": "[[168, 158, 168], [154, 155, 170], [156, 158, 168]]"
      },
      {
        "input": "img = [[50, 50, 50, 50], [50, 50, 50, 50], [50, 50, 50, 50], [50, 50, 50, 50]]",
        "output": "[[50, 50, 50, 50], [50, 50, 50, 50], [50, 50, 50, 50], [50, 50, 50, 50]]"
      },
      {
        "input": "img = [[255, 255, 255], [255, 0, 255], [255, 255, 255]]",
        "output": "[[191, 212, 191], [212, 226, 212], [191, 212, 191]]"
      },
      {
        "input": "img = [[128, 64, 32], [16, 8, 4], [2, 1, 0]]",
        "output": "[[54, 42, 27], [36, 28, 18], [6, 5, 3]]"
      },
      {
        "input": "img = [[50, 100, 150, 200, 250], [250, 50, 100, 150, 200], [200, 250, 50, 100, 150], [150, 200, 250, 50, 100], [100, 150, 200, 250, 50]]",
        "output": "[[112, 116, 125, 175, 200], [150, 133, 127, 150, 175], [183, 166, 133, 127, 125], [175, 172, 166, 133, 116], [150, 175, 183, 150, 112]]"
      },
      {
        "input": "img = [[255, 0, 255, 0], [0, 255, 0, 255], [255, 0, 255, 0], [0, 255, 0, 255]]",
        "output": "[[127, 127, 127, 127], [127, 141, 113, 127], [127, 113, 141, 127], [127, 127, 127, 127]]"
      },
      {
        "input": "img = [[100, 200, 150, 125], [250, 50, 75, 200], [150, 250, 100, 50], [200, 100, 250, 150]]",
        "output": "[[150, 137, 133, 137], [166, 147, 133, 116], [166, 158, 136, 137], [175, 175, 150, 137]]"
      },
      {
        "input": "img = [[5,10,15,20],[25,30,35,40],[45,50,55,60],[65,70,75,80]]",
        "output": "[[17, 20, 25, 27], [27, 30, 35, 37], [47, 50, 55, 57], [57, 60, 65, 67]]"
      },
      {
        "input": "img = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]",
        "output": "[[3, 3, 4], [4, 5, 5], [7, 8, 8], [10, 11, 11], [13, 14, 14], [15, 15, 16]]"
      },
      {
        "input": "img = [[255, 255, 255, 255], [255, 255, 255, 255], [255, 255, 255, 255], [255, 255, 255, 255]]",
        "output": "[[255, 255, 255, 255], [255, 255, 255, 255], [255, 255, 255, 255], [255, 255, 255, 255]]"
      },
      {
        "input": "img = [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]",
        "output": "[[3, 3, 4], [4, 5, 5], [7, 8, 8], [10, 11, 11], [12, 12, 13]]"
      },
      {
        "input": "img = [[10, 20, 30, 40, 50], [20, 30, 40, 50, 60], [30, 40, 50, 60, 70], [40, 50, 60, 70, 80], [50, 60, 70, 80, 90]]",
        "output": "[[20, 25, 35, 45, 50], [25, 30, 40, 50, 55], [35, 40, 50, 60, 65], [45, 50, 60, 70, 75], [50, 55, 65, 75, 80]]"
      },
      {
        "input": "img = [[255,255,255,255],[255,0,0,255],[255,0,0,255],[255,255,255,255]]",
        "output": "[[191, 170, 170, 191], [170, 141, 141, 170], [170, 141, 141, 170], [191, 170, 170, 191]]"
      },
      {
        "input": "img = [[50, 60, 70, 80], [40, 50, 60, 70], [30, 40, 50, 60], [20, 30, 40, 50]]",
        "output": "[[50, 55, 65, 70], [45, 50, 60, 65], [35, 40, 50, 55], [30, 35, 45, 50]]"
      },
      {
        "input": "img = [[128,128,128],[128,128,128],[128,128,128],[128,128,128],[128,128,128]]",
        "output": "[[128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128], [128, 128, 128]]"
      },
      {
        "input": "img = [[0, 0, 0, 0, 0], [0, 255, 255, 255, 0], [0, 255, 255, 255, 0], [0, 255, 255, 255, 0], [0, 0, 0, 0, 0]]",
        "output": "[[63, 85, 127, 85, 63], [85, 113, 170, 113, 85], [127, 170, 255, 170, 127], [85, 113, 170, 113, 85], [63, 85, 127, 85, 63]]"
      },
      {
        "input": "img = [[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1],[1,3,5,7,9,7,5,3,1],[2,4,6,8,10,8,6,4,2],[1,1,1,1,1,1,1,1,1],[2,3,4,5,6,7,8,9,10],[10,9,8,7,6,5,4,3,2],[3,2,1,4,5,6,9,8,7],[7,8,9,6,5,4,1,2,3]]",
        "output": "[[5, 5, 5, 5, 5, 5, 5, 5, 5], [4, 4, 5, 5, 5, 5, 5, 4, 4], [4, 5, 6, 7, 7, 6, 4, 3, 2], [2, 2, 4, 5, 5, 5, 4, 2, 2], [2, 2, 3, 4, 5, 5, 5, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 5, 5, 6, 6, 6, 6], [6, 6, 6, 5, 5, 5, 4, 4, 4], [5, 5, 5, 5, 5, 5, 5, 5, 5]]"
      },
      {
        "input": "img = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]",
        "output": "[[4, 4, 5, 6, 7], [6, 7, 8, 9, 9], [11, 12, 13, 14, 14], [16, 17, 18, 19, 19], [19, 19, 20, 21, 22]]"
      },
      {
        "input": "img = [[0, 0, 0, 0, 0, 0], [0, 255, 255, 255, 255, 0], [0, 255, 0, 0, 255, 0], [0, 255, 0, 0, 255, 0], [0, 255, 255, 255, 255, 0], [0, 0, 0, 0, 0, 0]]",
        "output": "[[63, 85, 127, 127, 85, 63], [85, 85, 113, 113, 85, 85], [127, 113, 141, 141, 113, 127], [127, 113, 141, 141, 113, 127], [85, 85, 113, 113, 85, 85], [63, 85, 127, 127, 85, 63]]"
      },
      {
        "input": "img = [[255, 0, 0, 255, 0], [0, 255, 0, 255, 0], [0, 0, 255, 0, 0], [0, 255, 0, 255, 0], [255, 0, 0, 255, 0]]",
        "output": "[[127, 85, 127, 85, 127], [85, 85, 113, 85, 85], [85, 85, 141, 85, 85], [85, 85, 113, 85, 85], [127, 85, 127, 85, 127]]"
      },
      {
        "input": "img = [[255,0,255,0],[0,255,0,255],[255,0,255,0],[0,255,0,255]]",
        "output": "[[127, 127, 127, 127], [127, 141, 113, 127], [127, 113, 141, 127], [127, 127, 127, 127]]"
      },
      {
        "input": "img = [[255, 0, 0, 0], [0, 255, 0, 0], [0, 0, 255, 0], [0, 0, 0, 255]]",
        "output": "[[127, 85, 42, 0], [85, 85, 56, 42], [42, 56, 85, 85], [0, 42, 85, 127]]"
      },
      {
        "input": "img = [[200, 100, 150, 200, 50], [50, 100, 150, 200, 250], [250, 200, 150, 100, 50], [50, 100, 150, 200, 250], [250, 200, 150, 100, 50]]",
        "output": "[[112, 125, 150, 166, 175], [150, 150, 150, 144, 141], [125, 133, 150, 166, 175], [175, 166, 150, 133, 125], [150, 150, 150, 150, 150]]"
      }
    ]
  },
  {
    "id": 1736,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "String"
    ],
    "problemDescription": "You are given a string time in the form of  hh:mm, where some of the digits in the string are hidden (represented by ?).\nThe valid times are those inclusively between 00:00 and 23:59.\nReturn the latest valid time you can get from time by replacing the hidden digits.\n\u00a0\nExample 1:\n\nInput: time = \"2?:?0\"\nOutput: \"23:50\"\nExplanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.\n\nExample 2:\n\nInput: time = \"0?:3?\"\nOutput: \"09:39\"\n\nExample 3:\n\nInput: time = \"1?:22\"\nOutput: \"19:22\"\n\n\u00a0\nConstraints:\n\ntime is in the format hh:mm.\nIt is guaranteed that you can produce a valid time from the given string.\n\n",
    "starterCode": "class Solution:\n    def maximumTime(self, time: str) -> str:\n        ",
    "testCases": [
      {
        "input": "time = \"?3:?0\"",
        "output": "23:50"
      },
      {
        "input": "time = \"1?:22\"",
        "output": "19:22"
      },
      {
        "input": "time = \"?:59\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "time = \"1?:??\"",
        "output": "19:59"
      },
      {
        "input": "time = \"0?:59\"",
        "output": "09:59"
      },
      {
        "input": "time = \"23:?9\"",
        "output": "23:59"
      },
      {
        "input": "time = \"00:?0\"",
        "output": "00:50"
      },
      {
        "input": "time = \"2?:5?\"",
        "output": "23:59"
      },
      {
        "input": "time = \"2?:?0\"",
        "output": "23:50"
      },
      {
        "input": "time = \"?:?:??\"",
        "output": "2:?:9?"
      },
      {
        "input": "time = \"00:??\"",
        "output": "00:59"
      },
      {
        "input": "time = \"1?:?5\"",
        "output": "19:55"
      },
      {
        "input": "time = \"?9:5?\"",
        "output": "19:59"
      },
      {
        "input": "time = \"??:??\"",
        "output": "23:59"
      },
      {
        "input": "time = \"?:00\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "time = \"12:3?\"",
        "output": "12:39"
      },
      {
        "input": "time = \"??:00\"",
        "output": "23:00"
      },
      {
        "input": "time = \"0?:3?\"",
        "output": "09:39"
      },
      {
        "input": "time = \"1?:?9\"",
        "output": "19:59"
      },
      {
        "input": "time = \"00:?5\"",
        "output": "00:55"
      },
      {
        "input": "time = \"?9:59\"",
        "output": "19:59"
      },
      {
        "input": "time = \"2?:59\"",
        "output": "23:59"
      },
      {
        "input": "time = \"12:?5\"",
        "output": "12:55"
      },
      {
        "input": "time = \"1?:3?\"",
        "output": "19:39"
      },
      {
        "input": "time = \"20:??\"",
        "output": "20:59"
      },
      {
        "input": "time = \"?4:2?\"",
        "output": "14:29"
      },
      {
        "input": "time = \"2?:3?\"",
        "output": "23:39"
      },
      {
        "input": "time = \"??:45\"",
        "output": "23:45"
      },
      {
        "input": "time = \"23:?0\"",
        "output": "23:50"
      },
      {
        "input": "time = \"??:09\"",
        "output": "23:09"
      },
      {
        "input": "time = \"0?:2?\"",
        "output": "09:29"
      },
      {
        "input": "time = \"?4:?4\"",
        "output": "14:54"
      },
      {
        "input": "time = \"23:?5\"",
        "output": "23:55"
      },
      {
        "input": "time = \"23:?7\"",
        "output": "23:57"
      },
      {
        "input": "time = \"20:?9\"",
        "output": "20:59"
      },
      {
        "input": "time = \"?:23\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "time = \"?3:?2\"",
        "output": "23:52"
      },
      {
        "input": "time = \"0?:?4\"",
        "output": "09:54"
      },
      {
        "input": "time = \"?3:?8\"",
        "output": "23:58"
      },
      {
        "input": "time = \"???:59\"",
        "output": "23?:59"
      },
      {
        "input": "time = \"2??:5?\"",
        "output": "23?:5?"
      },
      {
        "input": "time = \"2?:1?\"",
        "output": "23:19"
      },
      {
        "input": "time = \"22:?8\"",
        "output": "22:58"
      },
      {
        "input": "time = \"0?:?9\"",
        "output": "09:59"
      },
      {
        "input": "time = \"2?:??\"",
        "output": "23:59"
      },
      {
        "input": "time = \"0?:?2\"",
        "output": "09:52"
      },
      {
        "input": "time = \"02:?7\"",
        "output": "02:57"
      },
      {
        "input": "time = \"1?:?8\"",
        "output": "19:58"
      },
      {
        "input": "time = \"09:?5\"",
        "output": "09:55"
      },
      {
        "input": "time = \"???:??\"",
        "output": "23?:9?"
      },
      {
        "input": "time = \"09:?3\"",
        "output": "09:53"
      },
      {
        "input": "time = \"?2:?7\"",
        "output": "22:57"
      },
      {
        "input": "time = \"1?:4?\"",
        "output": "19:49"
      },
      {
        "input": "time = \"2?:0?\"",
        "output": "23:09"
      },
      {
        "input": "time = \"??:59\"",
        "output": "23:59"
      },
      {
        "input": "time = \"23:?4\"",
        "output": "23:54"
      },
      {
        "input": "time = \"2??:3?\"",
        "output": "23?:3?"
      },
      {
        "input": "time = \"0??:30\"",
        "output": "09?:30"
      },
      {
        "input": "time = \"0?:?5\"",
        "output": "09:55"
      },
      {
        "input": "time = \"0?:4?\"",
        "output": "09:49"
      },
      {
        "input": "time = \"?:11\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "time = \"09:5?\"",
        "output": "09:59"
      },
      {
        "input": "time = \"1?:?0\"",
        "output": "19:50"
      },
      {
        "input": "time = \"?:3?\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "time = \"?:22\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "time = \"00:?9\"",
        "output": "00:59"
      },
      {
        "input": "time = \"2?:?5\"",
        "output": "23:55"
      },
      {
        "input": "time = \"1?:5?\"",
        "output": "19:59"
      },
      {
        "input": "time = \"19:?9\"",
        "output": "19:59"
      },
      {
        "input": "time = \"1?:?4\"",
        "output": "19:54"
      },
      {
        "input": "time = \"1?:0?\"",
        "output": "19:09"
      },
      {
        "input": "time = \"2?:4?\"",
        "output": "23:49"
      },
      {
        "input": "time = \"?0:?5\"",
        "output": "20:55"
      },
      {
        "input": "time = \"??:?9\"",
        "output": "23:59"
      },
      {
        "input": "time = \"???:00\"",
        "output": "23?:00"
      },
      {
        "input": "time = \"?9:?8\"",
        "output": "19:58"
      },
      {
        "input": "time = \"?3:?9\"",
        "output": "23:59"
      },
      {
        "input": "time = \"0?:5?\"",
        "output": "09:59"
      },
      {
        "input": "time = \"2?:?4\"",
        "output": "23:54"
      },
      {
        "input": "time = \"?9:?9\"",
        "output": "19:59"
      },
      {
        "input": "time = \"2?:00\"",
        "output": "23:00"
      },
      {
        "input": "time = \"?:4?\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "time = \"?2:3?\"",
        "output": "22:39"
      },
      {
        "input": "time = \"0?:??\"",
        "output": "09:59"
      },
      {
        "input": "time = \"?4:?8\"",
        "output": "14:58"
      },
      {
        "input": "time = \"?:?5\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "time = \"0?:?0\"",
        "output": "09:50"
      },
      {
        "input": "time = \"20:?4\"",
        "output": "20:54"
      },
      {
        "input": "time = \"1?:59\"",
        "output": "19:59"
      },
      {
        "input": "time = \"0?:0?\"",
        "output": "09:09"
      },
      {
        "input": "time = \"23:??\"",
        "output": "23:59"
      },
      {
        "input": "time = \"?0:?0\"",
        "output": "20:50"
      },
      {
        "input": "time = \"0?:1?\"",
        "output": "09:19"
      },
      {
        "input": "time = \"1?:2?\"",
        "output": "19:29"
      },
      {
        "input": "time = \"0?:?8\"",
        "output": "09:58"
      },
      {
        "input": "time = \"19:?8\"",
        "output": "19:58"
      },
      {
        "input": "time = \"?2:?5\"",
        "output": "22:55"
      },
      {
        "input": "time = \"0?:45\"",
        "output": "09:45"
      },
      {
        "input": "time = \"2?:?9\"",
        "output": "23:59"
      },
      {
        "input": "time = \"?3:5?\"",
        "output": "23:59"
      },
      {
        "input": "time = \"?:?9\"",
        "output": "Error: list index out of range"
      },
      {
        "input": "time = \"23:?8\"",
        "output": "23:58"
      },
      {
        "input": "time = \"09:??\"",
        "output": "09:59"
      },
      {
        "input": "time = \"2?:?8\"",
        "output": "23:58"
      },
      {
        "input": "time = \"2?:2?\"",
        "output": "23:29"
      }
    ]
  },
  {
    "id": 2423,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "problemDescription": "You are given a 0-indexed string word, consisting of lowercase English letters. You need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal.\nReturn true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise.\nNote:\n\nThe frequency of a letter x is the number of times it occurs in the string.\nYou must remove exactly one letter and cannot choose to do nothing.\n\n\u00a0\nExample 1:\n\nInput: word = \"abcc\"\nOutput: true\nExplanation: Select index 3 and delete it: word becomes \"abc\" and each character has a frequency of 1.\n\nExample 2:\n\nInput: word = \"aazz\"\nOutput: false\nExplanation: We must delete a character, so either the frequency of \"a\" is 1 and the frequency of \"z\" is 2, or vice versa. It is impossible to make all present letters have equal frequency.\n\n\u00a0\nConstraints:\n\n2 <= word.length <= 100\nword consists of lowercase English letters only.\n\n",
    "starterCode": "class Solution:\n    def equalFrequency(self, word: str) -> bool:\n        ",
    "testCases": [
      {
        "input": "word = \"aabbccd\"",
        "output": "True"
      },
      {
        "input": "word = \"aaabbbccc\"",
        "output": "False"
      },
      {
        "input": "word = \"zazaza\"",
        "output": "False"
      },
      {
        "input": "word = \"aaaaabbbbbcccc\"",
        "output": "False"
      },
      {
        "input": "word = \"zzzzzzzz\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbccddeff\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbbbcccc\"",
        "output": "False"
      },
      {
        "input": "word = \"aazz\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbbccccc\"",
        "output": "False"
      },
      {
        "input": "word = \"aaa\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbbccddd\"",
        "output": "False"
      },
      {
        "input": "word = \"abcdef\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbcccddd\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbc\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbccddeee\"",
        "output": "True"
      },
      {
        "input": "word = \"abacabad\"",
        "output": "False"
      },
      {
        "input": "word = \"abcdabcd\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbbccc\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbccdde\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbbcccc\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbbcccccc\"",
        "output": "False"
      },
      {
        "input": "word = \"zzzz\"",
        "output": "True"
      },
      {
        "input": "word = \"abcc\"",
        "output": "True"
      },
      {
        "input": "word = \"xyyz\"",
        "output": "True"
      },
      {
        "input": "word = \"aab\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbcc\"",
        "output": "False"
      },
      {
        "input": "word = \"abcde\"",
        "output": "True"
      },
      {
        "input": "word = \"aaabbbb\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbbb\"",
        "output": "False"
      },
      {
        "input": "word = \"abcd\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
        "output": "False"
      },
      {
        "input": "word = \"abbbccddde\"",
        "output": "False"
      },
      {
        "input": "word = \"abcabcabc\"",
        "output": "False"
      },
      {
        "input": "word = \"qwerty\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbbcccd\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbccddd\"",
        "output": "True"
      },
      {
        "input": "word = \"abc\"",
        "output": "True"
      },
      {
        "input": "word = \"abcddd\"",
        "output": "False"
      },
      {
        "input": "word = \"abcdefghijklmnopqrstuvwxzy\"",
        "output": "True"
      },
      {
        "input": "word = \"aaaabbbb\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbccc\"",
        "output": "True"
      },
      {
        "input": "word = \"abcdabcdabcd\"",
        "output": "False"
      },
      {
        "input": "word = \"abcdefghi\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbcccd\"",
        "output": "False"
      },
      {
        "input": "word = \"abcdefghijj\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbbcccdddde\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbcccc\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbccddeeefffg\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbccddeeeffffgggg\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbbccccddddeeeeeffffffggggg\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbccddeeffg\"",
        "output": "True"
      },
      {
        "input": "word = \"zzzzzzzzzz\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbbccccdddde\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbccddeeffgg\"",
        "output": "False"
      },
      {
        "input": "word = \"abcdefghij\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbccddeeffgggh\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbccddeeff\"",
        "output": "False"
      },
      {
        "input": "word = \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"",
        "output": "True"
      },
      {
        "input": "word = \"abcabcabcabcabcabcabcabc\"",
        "output": "False"
      },
      {
        "input": "word = \"zzzzzyyyyy\"",
        "output": "False"
      },
      {
        "input": "word = \"aaaabbbbccccdddd\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbbccccdddd\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbbcccddd\"",
        "output": "False"
      },
      {
        "input": "word = \"abcdefg\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbbccccddddeeeeeffffff\"",
        "output": "False"
      },
      {
        "input": "word = \"abcdefghijjk\"",
        "output": "True"
      },
      {
        "input": "word = \"aabbbcccde\"",
        "output": "False"
      },
      {
        "input": "word = \"abbbbcccccdddddeeeeee\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbccddeeeffff\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbbccccddddeeeee\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbccddeeffggghhhh\"",
        "output": "False"
      },
      {
        "input": "word = \"abcabcabcabc\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbbcccdddd\"",
        "output": "False"
      },
      {
        "input": "word = \"aabbcddd\"",
        "output": "False"
      }
    ]
  },
  {
    "id": 2248,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Counting",
      "Sorting"
    ],
    "problemDescription": "Given a 2D integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order.\n\u00a0\nExample 1:\n\nInput: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]\nOutput: [3,4]\nExplanation: \nThe only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4].\nExample 2:\n\nInput: nums = [[1,2,3],[4,5,6]]\nOutput: []\nExplanation: \nThere does not exist any integer present both in nums[0] and nums[1], so we return an empty list [].\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 1000\n1 <= sum(nums[i].length) <= 1000\n1 <= nums[i][j] <= 1000\nAll the values of nums[i] are unique.\n\n",
    "starterCode": "class Solution:\n    def intersection(self, nums: List[List[int]]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [[1],[1]]",
        "output": "[1]"
      },
      {
        "input": "nums = [[10,20,30],[20,30,40],[30,40,50],[30,60,70]]",
        "output": "[30]"
      },
      {
        "input": "nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]",
        "output": "[3, 4]"
      },
      {
        "input": "nums = [[10,20,30],[20,30,40],[30,40,50]]",
        "output": "[30]"
      },
      {
        "input": "nums = [[1],[1],[1],[1]]",
        "output": "[1]"
      },
      {
        "input": "nums = [[1,2,3],[2,3,4],[3,4,5],[4,5,6]]",
        "output": "[]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]]",
        "output": "[3, 4, 5]"
      },
      {
        "input": "nums = [[5,10],[10,15],[15,20],[20,25],[5,25]]",
        "output": "[]"
      },
      {
        "input": "nums = [[10,20,30],[10,20,40],[10,30,40]]",
        "output": "[10]"
      },
      {
        "input": "nums = [[5],[5]]",
        "output": "[5]"
      },
      {
        "input": "nums = [[1,2,3,4],[2,3,4,5],[3,4,5,6]]",
        "output": "[3, 4]"
      },
      {
        "input": "nums = [[1,2],[2,3],[3,4]]",
        "output": "[]"
      },
      {
        "input": "nums = [[1,2,3,4,5],[2,3,5,7],[3,5,8,9]]",
        "output": "[3, 5]"
      },
      {
        "input": "nums = [[1,2,3],[4,5,6]]",
        "output": "[]"
      },
      {
        "input": "nums = [[10,20,30],[10,20,40],[10,30,50]]",
        "output": "[10]"
      },
      {
        "input": "nums = [[2,4,6,8,10],[2,4,6,8,10,12],[2,4,6,8,10,12,14],[2,4,6,8,10,12,14,16]]",
        "output": "[2, 4, 6, 8, 10]"
      },
      {
        "input": "nums = [[1, 2, 3], [3, 2, 1], [2, 1, 3], [1, 3, 2], [3, 1, 2]]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "nums = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9], [9, 10, 11, 12, 1], [1, 3, 5, 7, 9]]",
        "output": "[]"
      },
      {
        "input": "nums = [[5, 10, 15, 20, 25], [15, 20, 25, 30, 35], [20, 25, 30, 35, 40], [25, 30, 35, 40, 45], [30, 35, 40, 45, 50]]",
        "output": "[]"
      },
      {
        "input": "nums = [[7, 14, 21, 28, 35], [14, 21, 28, 42, 56], [21, 28, 35, 42, 56, 70]]",
        "output": "[21, 28]"
      },
      {
        "input": "nums = [[1,3,5,7,9],[3,5,7,9,11],[5,7,9,11,13],[7,9,11,13,15]]",
        "output": "[7, 9]"
      },
      {
        "input": "nums = [[10, 20, 30], [30, 40, 50], [20, 30, 40], [30, 50, 60]]",
        "output": "[30]"
      },
      {
        "input": "nums = [[100, 200, 300, 400], [400, 500, 600, 700], [400, 800, 900, 1000], [400, 1100, 1200, 1300]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [[10, 20, 30], [20, 30, 40], [30, 40, 50], [30, 50, 60]]",
        "output": "[30]"
      },
      {
        "input": "nums = [[10, 20, 30], [20, 30, 40], [30, 40, 50], [40, 50, 60], [50, 60, 70], [60, 70, 80], [70, 80, 90], [80, 90, 100], [90, 100, 110]]",
        "output": "[]"
      },
      {
        "input": "nums = [[10, 20, 30, 40, 50], [10, 30, 50, 70], [10, 30, 50, 90]]",
        "output": "[10, 30, 50]"
      },
      {
        "input": "nums = [[100, 200, 300, 400, 500], [100, 200, 600, 700, 800], [100, 300, 500, 700, 900], [100, 400, 600, 800, 900], [100, 500, 700, 900, 1100]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [[10, 20], [20, 30], [30, 40], [40, 50], [50, 10]]",
        "output": "[]"
      },
      {
        "input": "nums = [[100, 200, 300], [300, 400, 500], [500, 600, 700], [700, 800, 900], [900, 1000, 100]]",
        "output": "[]"
      },
      {
        "input": "nums = [[5, 10, 15, 20], [10, 15, 25, 30], [15, 20, 30, 35], [20, 25, 30, 35]]",
        "output": "[]"
      },
      {
        "input": "nums = [[500, 501, 502, 503, 504, 505], [503, 504, 505, 506, 507, 508], [505, 506, 507, 508, 509, 510], [507, 508, 509, 510, 511, 512], [509, 510, 511, 512, 513, 514]]",
        "output": "[]"
      },
      {
        "input": "nums = [[7,11,13],[11,13,15],[11,13,17],[11,13,19]]",
        "output": "[11, 13]"
      },
      {
        "input": "nums = [[5, 10, 15, 20], [5, 20, 25, 30], [5, 10, 20, 35], [5, 10, 15, 20, 40]]",
        "output": "[5, 20]"
      },
      {
        "input": "nums = [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]",
        "output": "[1]"
      },
      {
        "input": "nums = [[999],[999,998],[999,998,997],[999,998,997,996]]",
        "output": "[999]"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [[5, 10, 15], [10, 15, 20], [15, 20, 25], [20, 25, 30], [25, 30, 35]]",
        "output": "[]"
      },
      {
        "input": "nums = [[1, 3, 5, 7, 9], [3, 5, 7, 9, 11], [5, 7, 9, 11, 13], [7, 9, 11, 13, 15], [9, 11, 13, 15, 17]]",
        "output": "[9]"
      },
      {
        "input": "nums = [[5, 15, 25], [5, 25, 35], [25, 35, 45], [15, 25, 35], [5, 15, 25, 35]]",
        "output": "[25]"
      },
      {
        "input": "nums = [[100, 200, 300], [100, 400, 500], [100, 600, 700], [100, 800, 900]]",
        "output": "[100]"
      },
      {
        "input": "nums = [[5, 50, 500, 5000], [5, 50, 500, 5000, 50000], [5, 50, 500, 5000, 50000, 500000]]",
        "output": "Error: list index out of range"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 3, 5, 7, 9], [9, 7, 5, 3, 1], [1, 5, 9, 13, 17]]",
        "output": "[1, 5]"
      },
      {
        "input": "nums = [[100,200,300,400,500],[100,200,300,400,600],[100,200,300,500,600],[100,200,400,500,600]]",
        "output": "[100, 200]"
      },
      {
        "input": "nums = [[1, 3, 5, 7, 9], [2, 3, 5, 8, 9], [3, 4, 5, 7, 9], [3, 5, 6, 7, 9]]",
        "output": "[3, 5, 9]"
      },
      {
        "input": "nums = [[10,20,30],[30,40,50],[10,30,50,70],[30,80,90,100]]",
        "output": "[30]"
      },
      {
        "input": "nums = [[100,200,300],[200,300,400],[300,400,500],[400,500,600]]",
        "output": "[]"
      },
      {
        "input": "nums = [[100, 200, 300], [200, 300, 400], [300, 400, 500], [400, 500, 600], [500, 600, 700]]",
        "output": "[]"
      },
      {
        "input": "nums = [[10, 20, 30, 40], [20, 30, 40, 50], [30, 40, 50, 60], [40, 50, 60, 70]]",
        "output": "[40]"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]",
        "output": "[9, 10]"
      },
      {
        "input": "nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]",
        "output": "[]"
      },
      {
        "input": "nums = [[5,10,15,20,25],[15,20,25,30,35],[20,25,30,35,40],[25,30,35,40,45]]",
        "output": "[25]"
      },
      {
        "input": "nums = [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [3, 5, 7, 11, 13, 17, 19, 23, 29, 31]]",
        "output": "[3, 5, 7, 11, 13, 17, 19]"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10], [3, 6, 9, 12], [6, 12, 18]]",
        "output": "[6]"
      },
      {
        "input": "nums = [[10,20,30],[10,20,30,40],[10,20,30,40,50],[10,20,30,40,50,60]]",
        "output": "[10, 20, 30]"
      },
      {
        "input": "nums = [[50, 100, 150, 200], [100, 150, 200, 250], [150, 200, 250, 300], [200, 250, 300, 350], [250, 300, 350, 400]]",
        "output": "[]"
      },
      {
        "input": "nums = [[100, 200, 300], [101, 201, 301], [102, 202, 302], [103, 203, 303], [104, 204, 304], [105, 205, 305]]",
        "output": "[]"
      },
      {
        "input": "nums = [[100, 200, 300], [200, 300, 400], [300, 400, 500], [300, 600, 900]]",
        "output": "[300]"
      },
      {
        "input": "nums = [[7,14,21,28],[14,21,28,35],[21,28,35,42],[28,35,42,49]]",
        "output": "[28]"
      },
      {
        "input": "nums = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]",
        "output": "[]"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], [4, 8, 12, 16, 20, 24, 28, 32, 36, 40]]",
        "output": "[4, 8]"
      },
      {
        "input": "nums = [[300, 301, 302, 303, 304, 305], [300, 301, 302, 303, 304, 305, 306], [300, 301, 302, 303, 304, 305, 307, 308]]",
        "output": "[300, 301, 302, 303, 304, 305]"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5]]",
        "output": "[]"
      },
      {
        "input": "nums = [[999, 1000], [1000, 999], [999, 1000, 998], [1000, 999, 998], [998, 999, 1000], [998, 1000, 999]]",
        "output": "[999, 1000]"
      },
      {
        "input": "nums = [[1, 1000], [1, 999], [1, 998], [1, 997], [1, 996]]",
        "output": "[1]"
      },
      {
        "input": "nums = [[999, 1000], [999], [999, 1000, 998], [998, 999, 997], [999, 998, 997, 1000]]",
        "output": "[999]"
      },
      {
        "input": "nums = [[2, 4, 6, 8, 10, 12], [4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [8, 16, 24, 32, 40], [10, 20, 30, 40, 50]]",
        "output": "[]"
      },
      {
        "input": "nums = [[5, 15, 25, 35, 45], [15, 25, 35, 45, 55], [5, 15, 25, 35, 45, 65], [15, 25, 35, 45, 75]]",
        "output": "[15, 25, 35, 45]"
      },
      {
        "input": "nums = [[11, 22, 33, 44, 55], [22, 33, 44, 55, 66], [33, 44, 55, 66, 77], [44, 55, 66, 77, 88], [55, 66, 77, 88, 99]]",
        "output": "[55]"
      },
      {
        "input": "nums = [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 5, 9], [2, 6, 10]]",
        "output": "[]"
      },
      {
        "input": "nums = [[10,20,30,40,50,60,70,80,90,100],[20,30,40,50,60,70,80,90,100,110],[30,40,50,60,70,80,90,100,110,120]]",
        "output": "[30, 40, 50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "nums = [[10, 20, 30, 40], [10, 20, 50], [10, 30, 40, 50]]",
        "output": "[10]"
      },
      {
        "input": "nums = [[10, 20, 30, 40, 50], [20, 30, 40, 50, 60], [30, 40, 50, 60, 70], [40, 50, 60, 70, 80], [50, 60, 70, 80, 90]]",
        "output": "[50]"
      },
      {
        "input": "nums = [[7, 14, 21, 28], [14, 21, 28, 35], [21, 28, 35, 42], [28, 35, 42, 49], [35, 42, 49, 56], [42, 49, 56, 63]]",
        "output": "[]"
      },
      {
        "input": "nums = [[7, 8, 9], [7, 8, 9], [7, 8, 9], [7, 8, 9], [7, 8, 9]]",
        "output": "[7, 8, 9]"
      },
      {
        "input": "nums = [[1],[2],[3],[4],[5]]",
        "output": "[]"
      },
      {
        "input": "nums = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [2, 4, 6, 8, 10, 12, 14], [1, 3, 5, 7, 9, 11, 13, 15]]",
        "output": "[]"
      },
      {
        "input": "nums = [[10, 20, 30], [20, 30, 40], [30, 40, 50], [40, 50, 60]]",
        "output": "[]"
      },
      {
        "input": "nums = [[100], [100, 200], [100, 200, 300], [100, 200, 300, 400], [100, 200, 300, 400, 500]]",
        "output": "[100]"
      },
      {
        "input": "nums = [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]",
        "output": "[1]"
      },
      {
        "input": "nums = [[1, 3, 5, 7, 9], [2, 3, 5, 8, 9], [3, 5, 9, 11, 13], [3, 9, 15, 18, 21]]",
        "output": "[3, 9]"
      },
      {
        "input": "nums = [[5,10,15,20,25,30,35,40,45,50],[10,15,20,25,30,35,40,45,50,55],[15,20,25,30,35,40,45,50,55,60],[20,25,30,35,40,45,50,55,60,65]]",
        "output": "[20, 25, 30, 35, 40, 45, 50]"
      },
      {
        "input": "nums = [[500,501,502,503,504],[501,502,503,504,505],[502,503,504,505,506],[503,504,505,506,507]]",
        "output": "[503, 504]"
      },
      {
        "input": "nums = [[1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8, 9], [9, 10, 1], [1, 11, 12], [12, 2, 13], [13, 14, 3]]",
        "output": "[]"
      },
      {
        "input": "nums = [[1, 10, 100, 1000], [10, 100, 1000, 200], [100, 1000, 200, 300], [1000, 200, 300, 400]]",
        "output": "[1000]"
      },
      {
        "input": "nums = [[7, 14, 21, 28, 35], [14, 28, 42, 56, 70], [21, 42, 63, 84, 105], [14, 21, 28, 35, 42]]",
        "output": "[]"
      },
      {
        "input": "nums = [[7, 8, 9], [8, 9, 10], [9, 10, 11], [10, 11, 12], [11, 12, 13]]",
        "output": "[]"
      },
      {
        "input": "nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9]]",
        "output": "[]"
      },
      {
        "input": "nums = [[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10,11],[3,4,5,6,7,8,9,10,11,12]]",
        "output": "[3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums = [[5,10,15,20,25],[10,15,20,25,30],[15,20,25,30,35],[20,25,30,35,40]]",
        "output": "[20, 25]"
      },
      {
        "input": "nums = [[100, 200, 300, 400], [400, 500, 600, 700], [300, 400, 500, 600], [400, 600, 800, 900]]",
        "output": "[400]"
      },
      {
        "input": "nums = [[500], [500, 501, 502], [500, 502, 503], [500, 501, 503]]",
        "output": "[500]"
      },
      {
        "input": "nums = [[10], [10], [10], [10], [10], [10], [10], [10], [10], [10]]",
        "output": "[10]"
      },
      {
        "input": "nums = [[101, 202, 303], [202, 303, 404], [303, 404, 505], [404, 505, 606], [505, 606, 707], [606, 707, 808], [707, 808, 909]]",
        "output": "[]"
      },
      {
        "input": "nums = [[100], [100], [100], [100], [100]]",
        "output": "[100]"
      },
      {
        "input": "nums = [[7, 14, 21], [14, 21, 28], [21, 28, 35], [7, 14, 21, 28, 35]]",
        "output": "[21]"
      }
    ]
  },
  {
    "id": 125,
    "difficulty": "Easy",
    "tags": [
      "Two Pointers",
      "String"
    ],
    "problemDescription": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nGiven a string s, return true if it is a palindrome, or false otherwise.\n\u00a0\nExample 1:\n\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\n\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\n\nInput: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 2 * 105\ns consists only of printable ASCII characters.\n\n",
    "starterCode": "class Solution:\n    def isPalindrome(self, s: str) -> bool:",
    "testCases": [
      {
        "input": "s = \"race a car\"",
        "output": "false"
      },
      {
        "input": "s = \" \"",
        "output": "true"
      },
      {
        "input": "s = \"Able was I ere I saw Elba\"",
        "output": "True"
      },
      {
        "input": "s = \"__Level__, __level__\"",
        "output": "True"
      },
      {
        "input": "s = \"No lemon, no melon\"",
        "output": "True"
      },
      {
        "input": "s = \"0P\"",
        "output": "False"
      },
      {
        "input": "s = \"_a!a_\"",
        "output": "True"
      },
      {
        "input": "s = \"Never odd or even\"",
        "output": "True"
      },
      {
        "input": "s = \"12345678987654321\"",
        "output": "True"
      },
      {
        "input": "s = \"Was it a car or a cat I saw?\"",
        "output": "True"
      },
      {
        "input": "s = \"No 'x' in Nixon\"",
        "output": "True"
      },
      {
        "input": "s = \"Able was I, I saw Elba\"",
        "output": "True"
      },
      {
        "input": "s = \"12321\"",
        "output": "True"
      },
      {
        "input": "s = \"Not a palindrome\"",
        "output": "False"
      },
      {
        "input": "s = \"Able was I, ere I saw Elba\"",
        "output": "True"
      },
      {
        "input": "s = \"123abcba321\"",
        "output": "True"
      },
      {
        "input": "s = \"Step on no pets\"",
        "output": "True"
      },
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "True"
      },
      {
        "input": "s = \"Madam, in Eden, I'm Adam\"",
        "output": "True"
      },
      {
        "input": "s = \"123abccba321\"",
        "output": "True"
      },
      {
        "input": "s = \"__^_^__\"",
        "output": "True"
      }
    ]
  },
  {
    "id": 70,
    "difficulty": "Easy",
    "tags": [
      "Memoization",
      "Math",
      "Dynamic Programming"
    ],
    "problemDescription": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\u00a0\nExample 1:\n\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\nExample 2:\n\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\n\u00a0\nConstraints:\n\n1 <= n <= 45\n\n",
    "starterCode": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 3",
        "output": "3"
      },
      {
        "input": "n = 45",
        "output": "1836311903"
      },
      {
        "input": "n = 4",
        "output": "5"
      },
      {
        "input": "n = 20",
        "output": "10946"
      },
      {
        "input": "n = 2",
        "output": "2"
      },
      {
        "input": "n = 1",
        "output": "1"
      },
      {
        "input": "n = 10",
        "output": "89"
      },
      {
        "input": "n = 5",
        "output": "8"
      },
      {
        "input": "n = 30",
        "output": "1346269"
      },
      {
        "input": "n = 15",
        "output": "987"
      },
      {
        "input": "n = 40",
        "output": "165580141"
      },
      {
        "input": "n = 12",
        "output": "233"
      },
      {
        "input": "n = 35",
        "output": "14930352"
      },
      {
        "input": "n = 18",
        "output": "4181"
      },
      {
        "input": "n = 7",
        "output": "21"
      },
      {
        "input": "n = 25",
        "output": "121393"
      }
    ]
  },
  {
    "id": 222,
    "difficulty": "Easy",
    "tags": [
      "Bit Manipulation",
      "Tree",
      "Binary Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a complete binary tree, return the number of the nodes in the tree.\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\nDesign an algorithm that runs in less than\u00a0O(n)\u00a0time complexity.\n\u00a0\nExample 1:\n\n\nInput: root = [1,2,3,4,5,6]\nOutput: 6\n\nExample 2:\n\nInput: root = []\nOutput: 0\n\nExample 3:\n\nInput: root = [1]\nOutput: 1\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5 * 104].\n0 <= Node.val <= 5 * 104\nThe tree is guaranteed to be complete.\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countNodes(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "15"
      },
      {
        "input": "root = [1,2,3,4,5,null,7]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6]",
        "output": "6"
      },
      {
        "input": "root = [1]",
        "output": "1"
      },
      {
        "input": "root = []",
        "output": "0"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,null,null,16,17]",
        "output": "15"
      },
      {
        "input": "root = [1,2,3,null,null,6,7]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,null,null,16,17,null,null,19,20,21,22,null,null,null,null,23,24,25,26,null,null,27,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28]",
        "output": "25"
      },
      {
        "input": "root = [1,2,3,4]",
        "output": "4"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]",
        "output": "34"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]",
        "output": "32"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]",
        "output": "48"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64]",
        "output": "64"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]",
        "output": "33"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "25"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13]",
        "output": "13"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "50"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]",
        "output": "27"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]",
        "output": "38"
      },
      {
        "input": "root = [1,2]",
        "output": "2"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8]",
        "output": "8"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,null,null,16,null,18]",
        "output": "15"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11]",
        "output": "11"
      },
      {
        "input": "root = [1,2,3,4,5,null,7,8,9,10,11,12,13,14,null]",
        "output": "13"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]",
        "output": "100"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]",
        "output": "28"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "40"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10]",
        "output": "10"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]",
        "output": "17"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,null,null,16,17,null,null,19,20,21,22,null,null,23,24]",
        "output": "21"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]",
        "output": "37"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]",
        "output": "35"
      },
      {
        "input": "root = [1,2,3,4,5,null,null,8,9,10,11]",
        "output": "9"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]",
        "output": "18"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]",
        "output": "23"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]",
        "output": "19"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]",
        "output": "39"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "14"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63]",
        "output": "63"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,null,null,null,null,35]",
        "output": "32"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "15"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7]",
        "output": "7"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]",
        "output": "16"
      },
      {
        "input": "root = [1,2,3]",
        "output": "3"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]",
        "output": "36"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "30"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "20"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]",
        "output": "24"
      },
      {
        "input": "root = [1,2,3,4,5]",
        "output": "5"
      },
      {
        "input": "root = [1,2,3,null,5,6,7]",
        "output": "6"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,null,null,16,17,null,null,19,20,null,null,null,null,21]",
        "output": "18"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12]",
        "output": "12"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]",
        "output": "31"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]",
        "output": "21"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]",
        "output": "22"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]",
        "output": "26"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]",
        "output": "29"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9]",
        "output": "9"
      }
    ]
  },
  {
    "id": 1086,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting",
      "Heap (Priority Queue)"
    ],
    "problemDescription": "Given a list of the scores of different students, items, where items[i] = [IDi, scorei] represents one score from a student with IDi, calculate each student's top five average.\nReturn the answer as an array of pairs result, where result[j] = [IDj, topFiveAveragej] represents the student with IDj and their top five average. Sort result by IDj in increasing order.\nA student's top five average is calculated by taking the sum of their top five scores and dividing it by 5 using integer division.\n\u00a0\nExample 1:\n\nInput: items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]\nOutput: [[1,87],[2,88]]\nExplanation: \nThe student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87.\nThe student with ID = 2 got scores 93, 97, 77, 100, and 76. Their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but with integer division their average converts to 88.\n\nExample 2:\n\nInput: items = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]]\nOutput: [[1,100],[7,100]]\n\n\u00a0\nConstraints:\n\n1 <= items.length <= 1000\nitems[i].length == 2\n1 <= IDi <= 1000\n0 <= scorei <= 100\nFor each IDi, there will be at least five scores.\n\n",
    "starterCode": "class Solution:\n    def highFive(self, items: List[List[int]]) -> List[List[int]]:\n        ",
    "testCases": [
      {
        "input": "items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]",
        "output": "[[1, 87], [2, 88]]"
      },
      {
        "input": "items = [[3,95],[3,85],[3,75],[3,65],[3,55],[4,90],[4,80],[4,70],[4,60],[4,50]]",
        "output": "[[3, 75], [4, 70]]"
      },
      {
        "input": "items = [[5,90],[5,85],[5,95],[5,80],[5,92],[3,78],[3,85],[3,80],[3,82],[3,79]]",
        "output": "[[3, 80], [5, 88]]"
      },
      {
        "input": "items = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]]",
        "output": "[[1, 100], [7, 100]]"
      },
      {
        "input": "items = [[10,80],[10,85],[10,90],[10,95],[10,100],[20,60],[20,70],[20,80],[20,90],[20,100]]",
        "output": "[[10, 90], [20, 80]]"
      },
      {
        "input": "items = [[1,80],[1,70],[1,90],[1,60],[1,50],[2,90],[2,80],[2,70],[2,60],[2,50],[3,100],[3,90],[3,80],[3,70],[3,60]]",
        "output": "[[1, 70], [2, 70], [3, 80]]"
      },
      {
        "input": "items = [[1,85],[1,90],[1,78],[1,92],[1,88],[2,76],[2,82],[2,90],[2,88],[2,79]]",
        "output": "[[1, 86], [2, 83]]"
      },
      {
        "input": "items = [[4,100],[4,90],[4,80],[4,70],[4,60],[4,50],[4,40],[4,30],[4,20],[4,10]]",
        "output": "[[4, 80]]"
      },
      {
        "input": "items = [[5,100],[5,99],[5,98],[5,97],[5,96],[5,95],[5,94],[5,93],[5,92],[5,91]]",
        "output": "[[5, 98]]"
      },
      {
        "input": "items = [[3,85],[3,90],[3,75],[3,80],[3,95],[3,100],[3,60],[3,55],[3,40],[3,35]]",
        "output": "[[3, 90]]"
      },
      {
        "input": "items = [[1,50],[1,70],[1,90],[1,100],[1,80],[2,40],[2,60],[2,80],[2,100],[2,90]]",
        "output": "[[1, 78], [2, 74]]"
      },
      {
        "input": "items = [[5,91],[5,92],[5,93],[5,94],[5,95],[6,100],[6,99],[6,98],[6,97],[6,96],[6,95]]",
        "output": "[[5, 93], [6, 98]]"
      },
      {
        "input": "items = [[1,50],[1,60],[1,70],[1,80],[1,90],[2,10],[2,20],[2,30],[2,40],[2,50],[2,60],[2,70],[2,80],[2,90],[2,100]]",
        "output": "[[1, 70], [2, 80]]"
      },
      {
        "input": "items = [[10,80],[10,90],[10,100],[10,70],[10,60],[20,50],[20,40],[20,30],[20,20],[20,10],[20,90]]",
        "output": "[[10, 80], [20, 46]]"
      },
      {
        "input": "items = [[1,50],[1,80],[1,90],[1,100],[1,40],[2,90],[2,80],[2,70],[2,60],[2,50]]",
        "output": "[[1, 72], [2, 70]]"
      },
      {
        "input": "items = [[1,95],[1,85],[1,75],[1,65],[1,55],[1,45],[2,88],[2,82],[2,76],[2,70],[2,64],[2,58],[3,99],[3,94],[3,89],[3,84],[3,79],[3,74],[3,69],[4,90],[4,85],[4,80],[4,75],[4,70],[4,65],[4,60],[5,100],[5,90],[5,80],[5,70],[5,60],[5,50],[5,40],[5,30]]",
        "output": "[[1, 75], [2, 76], [3, 89], [4, 80], [5, 80]]"
      },
      {
        "input": "items = [[1,90],[1,85],[1,88],[1,92],[1,95],[1,100],[2,65],[2,70],[2,75],[2,80],[2,85],[2,90],[2,95]]",
        "output": "[[1, 93], [2, 85]]"
      },
      {
        "input": "items = [[1,100],[2,90],[3,80],[4,70],[5,60],[1,50],[2,40],[3,30],[4,20],[5,10],[1,85],[2,95],[3,85],[4,75],[5,65],[1,55],[2,45],[3,35],[4,25],[5,15]]",
        "output": "[[1, 58], [2, 54], [3, 46], [4, 38], [5, 30]]"
      },
      {
        "input": "items = [[1,85],[2,85],[3,85],[4,85],[5,85],[6,85],[7,85],[8,85],[9,85],[10,85],[1,85],[2,85],[3,85],[4,85],[5,85]]",
        "output": "[[1, 34], [2, 34], [3, 34], [4, 34], [5, 34], [6, 17], [7, 17], [8, 17], [9, 17], [10, 17]]"
      },
      {
        "input": "items = [[1,100],[1,100],[1,100],[1,100],[1,100],[2,100],[2,100],[2,100],[2,100],[2,100],[3,100],[3,100],[3,100],[3,100],[3,100]]",
        "output": "[[1, 100], [2, 100], [3, 100]]"
      },
      {
        "input": "items = [[1,90],[1,90],[1,90],[1,90],[1,90],[2,100],[2,100],[2,100],[2,100],[2,100],[3,85],[3,85],[3,85],[3,85],[3,85],[4,75],[4,75],[4,75],[4,75],[4,75],[5,65],[5,65],[5,65],[5,65],[5,65]]",
        "output": "[[1, 90], [2, 100], [3, 85], [4, 75], [5, 65]]"
      },
      {
        "input": "items = [[5,50],[5,55],[5,60],[5,65],[5,70],[5,75],[5,80],[5,85],[5,90],[5,95],[6,30],[6,35],[6,40],[6,45],[6,50]]",
        "output": "[[5, 85], [6, 40]]"
      },
      {
        "input": "items = [[1,60],[1,70],[1,80],[1,90],[1,100],[2,60],[2,70],[2,80],[2,90],[2,100],[3,60],[3,70],[3,80],[3,90],[3,100],[4,60],[4,70],[4,80],[4,90],[4,100]]",
        "output": "[[1, 80], [2, 80], [3, 80], [4, 80]]"
      },
      {
        "input": "items = [[3,95],[3,90],[3,85],[3,80],[3,75],[3,70],[3,65],[3,60],[3,55],[3,50],[3,45],[3,40],[3,35],[3,30],[3,25],[3,20],[3,15],[3,10],[3,5],[3,1]]",
        "output": "[[3, 85]]"
      },
      {
        "input": "items = [[1,95],[1,90],[1,85],[1,80],[1,75],[2,95],[2,90],[2,85],[2,80],[2,75],[3,95],[3,90],[3,85],[3,80],[3,75],[4,95],[4,90],[4,85],[4,80],[4,75],[5,95],[5,90],[5,85],[5,80],[5,75],[6,95],[6,90],[6,85],[6,80],[6,75]]",
        "output": "[[1, 85], [2, 85], [3, 85], [4, 85], [5, 85], [6, 85]]"
      },
      {
        "input": "items = [[1,50],[2,60],[3,70],[4,80],[5,90],[1,100],[2,50],[3,60],[4,70],[5,80],[1,90],[2,40],[3,50],[4,60],[5,70],[1,80],[2,30],[3,40],[4,50],[5,60],[1,70],[2,20],[3,30],[4,40],[5,50],[1,60],[2,10],[3,20],[4,30],[5,40]]",
        "output": "[[1, 80], [2, 40], [3, 50], [4, 60], [5, 70]]"
      },
      {
        "input": "items = [[1,100],[1,99],[1,98],[1,97],[1,96],[1,95],[1,94],[1,93],[1,92],[1,91],[1,90],[1,89],[1,88],[1,87],[1,86],[1,85],[1,84],[1,83],[1,82],[1,81]]",
        "output": "[[1, 98]]"
      },
      {
        "input": "items = [[1,95],[1,85],[1,75],[1,65],[1,55],[1,45],[1,35],[1,25],[1,15],[1,5],[2,90],[2,80],[2,70],[2,60],[2,50],[2,40],[2,30],[2,20],[2,10],[2,0]]",
        "output": "[[1, 75], [2, 70]]"
      },
      {
        "input": "items = [[1,95],[1,85],[1,75],[1,65],[1,55],[1,45],[1,35],[1,25],[1,15],[1,5],[2,100],[2,99],[2,98],[2,97],[2,96],[2,95],[2,94],[2,93],[2,92],[2,91]]",
        "output": "[[1, 75], [2, 98]]"
      },
      {
        "input": "items = [[1,50],[1,51],[1,52],[1,53],[1,54],[1,55],[1,56],[1,57],[1,58],[1,59],[2,60],[2,61],[2,62],[2,63],[2,64],[2,65],[2,66],[2,67],[2,68],[2,69],[3,70],[3,71],[3,72],[3,73],[3,74],[3,75],[3,76],[3,77],[3,78],[3,79],[3,80],[4,81],[4,82],[4,83],[4,84],[4,85],[4,86],[4,87],[4,88],[4,89],[4,90],[5,91],[5,92],[5,93],[5,94],[5,95],[5,96],[5,97],[5,98],[5,99],[5,100]]",
        "output": "[[1, 57], [2, 67], [3, 78], [4, 88], [5, 98]]"
      },
      {
        "input": "items = [[1,99],[1,98],[1,97],[1,96],[1,95],[1,94],[1,93],[1,92],[1,91],[1,90],[2,89],[2,88],[2,87],[2,86],[2,85],[2,84],[2,83],[2,82],[2,81],[2,80]]",
        "output": "[[1, 97], [2, 87]]"
      },
      {
        "input": "items = [[1,91],[1,92],[1,93],[1,94],[1,95],[1,96],[1,97],[1,98],[1,99],[1,100],[2,91],[2,92],[2,93],[2,94],[2,95],[2,96],[2,97],[2,98],[2,99],[2,100],[3,91],[3,92],[3,93],[3,94],[3,95],[3,96],[3,97],[3,98],[3,99],[3,100],[4,91],[4,92],[4,93],[4,94],[4,95],[4,96],[4,97],[4,98],[4,99],[4,100]]",
        "output": "[[1, 98], [2, 98], [3, 98], [4, 98]]"
      },
      {
        "input": "items = [[10,90],[10,95],[10,85],[10,80],[10,75],[10,65],[10,60],[10,55],[10,50],[10,45],[11,90],[11,95],[11,85],[11,80],[11,75]]",
        "output": "[[10, 85], [11, 85]]"
      },
      {
        "input": "items = [[1,85],[1,90],[1,78],[1,92],[1,88],[2,76],[2,82],[2,90],[2,88],[2,79],[3,81],[3,86],[3,79],[3,91],[3,84]]",
        "output": "[[1, 86], [2, 83], [3, 84]]"
      },
      {
        "input": "items = [[100,50],[100,60],[100,70],[100,80],[100,90],[100,100],[200,100],[200,90],[200,80],[200,70],[200,60],[200,50],[200,40],[200,30],[200,20],[200,10]]",
        "output": "[[100, 80], [200, 80]]"
      },
      {
        "input": "items = [[9,55],[9,60],[9,65],[9,70],[9,75],[9,80],[9,85],[9,90],[9,95],[9,100],[9,105],[9,110],[9,115],[9,120],[9,125],[9,130],[9,135],[9,140],[9,145],[9,150]]",
        "output": "[[9, 140]]"
      },
      {
        "input": "items = [[1,100],[1,99],[1,98],[1,97],[1,96],[1,95],[1,94],[1,93],[1,92],[1,91],[1,90],[1,89],[1,88],[1,87],[1,86],[1,85],[1,84],[1,83],[1,82],[1,81],[1,80],[1,79],[1,78],[1,77],[1,76],[1,75],[1,74],[1,73],[1,72],[1,71],[1,70]]",
        "output": "[[1, 98]]"
      },
      {
        "input": "items = [[1,85],[1,70],[1,60],[1,90],[1,100],[1,55],[1,75],[2,80],[2,85],[2,90],[2,95],[2,100],[2,60],[2,70],[2,75],[3,95],[3,85],[3,75],[3,65],[3,55],[3,45],[3,35],[3,25],[4,90],[4,80],[4,70],[4,60],[4,50],[4,40],[4,30],[4,20],[4,10]]",
        "output": "[[1, 84], [2, 90], [3, 75], [4, 70]]"
      },
      {
        "input": "items = [[11,100],[11,99],[11,98],[11,97],[11,96],[11,95],[11,94],[11,93],[11,92],[11,91],[11,90],[11,89],[11,88],[11,87],[11,86],[11,85],[11,84],[11,83],[11,82],[11,81],[11,80]]",
        "output": "[[11, 98]]"
      },
      {
        "input": "items = [[2,100],[2,100],[2,100],[2,100],[2,100],[2,100],[2,100],[2,100],[2,100],[2,100],[3,100],[3,100],[3,100],[3,100],[3,100],[3,100],[3,100],[3,100],[3,100],[3,100],[4,100],[4,100],[4,100],[4,100],[4,100],[4,100],[4,100],[4,100],[4,100],[4,100],[5,100],[5,100],[5,100],[5,100],[5,100],[5,100],[5,100],[5,100],[5,100],[5,100]]",
        "output": "[[2, 100], [3, 100], [4, 100], [5, 100]]"
      },
      {
        "input": "items = [[1,100],[1,99],[1,98],[1,97],[1,96],[1,95],[1,94],[1,93],[1,92],[1,91],[2,85],[2,84],[2,83],[2,82],[2,81],[2,80],[2,79],[2,78],[2,77],[2,76]]",
        "output": "[[1, 98], [2, 83]]"
      },
      {
        "input": "items = [[1,100],[1,100],[1,100],[1,100],[1,100],[1,99],[1,99],[1,99],[1,99],[1,99],[2,50],[2,50],[2,50],[2,50],[2,50],[2,49],[2,49],[2,49],[2,49],[2,49],[3,70],[3,70],[3,70],[3,70],[3,70],[3,69],[3,69],[3,69],[3,69],[3,69],[4,80],[4,80],[4,80],[4,80],[4,80],[4,79],[4,79],[4,79],[4,79],[4,79],[5,85],[5,85],[5,85],[5,85],[5,85],[5,84],[5,84],[5,84],[5,84],[5,84]]",
        "output": "[[1, 100], [2, 50], [3, 70], [4, 80], [5, 85]]"
      },
      {
        "input": "items = [[1,90],[1,80],[1,70],[1,60],[1,50],[1,40],[1,30],[1,20],[1,10],[2,100],[2,90],[2,80],[2,70],[2,60],[2,50],[2,40],[2,30],[2,20],[2,10],[3,95],[3,85],[3,75],[3,65],[3,55],[3,45],[3,35],[3,25],[3,15],[3,5]]",
        "output": "[[1, 70], [2, 80], [3, 75]]"
      },
      {
        "input": "items = [[5,50],[5,55],[5,60],[5,65],[5,70],[5,75],[5,80],[5,85],[5,90],[5,95],[6,30],[6,35],[6,40],[6,45],[6,50],[6,55],[6,60],[6,65],[6,70],[6,75]]",
        "output": "[[5, 85], [6, 65]]"
      },
      {
        "input": "items = [[7,60],[7,65],[7,70],[7,75],[7,80],[7,85],[7,90],[7,95],[7,100],[8,40],[8,45],[8,50],[8,55],[8,60],[8,65],[8,70],[8,75]]",
        "output": "[[7, 90], [8, 65]]"
      },
      {
        "input": "items = [[5,90],[5,95],[5,85],[5,80],[5,75],[5,65],[5,60],[5,55],[5,50],[5,45]]",
        "output": "[[5, 85]]"
      },
      {
        "input": "items = [[6,88],[6,92],[6,79],[6,85],[6,81],[6,86],[6,87],[6,90],[6,93],[6,94],[6,78],[6,84],[6,91],[6,89],[6,83]]",
        "output": "[[6, 92]]"
      },
      {
        "input": "items = [[9,100],[9,99],[9,98],[9,97],[9,96],[9,95],[9,94],[9,93],[9,92],[9,91],[10,100],[10,99],[10,98],[10,97],[10,96],[10,95],[10,94],[10,93],[10,92],[10,91],[11,100],[11,99],[11,98],[11,97],[11,96],[11,95],[11,94],[11,93],[11,92],[11,91]]",
        "output": "[[9, 98], [10, 98], [11, 98]]"
      },
      {
        "input": "items = [[1,50],[1,60],[1,70],[1,80],[1,90],[2,50],[2,60],[2,70],[2,80],[2,90],[3,50],[3,60],[3,70],[3,80],[3,90]]",
        "output": "[[1, 70], [2, 70], [3, 70]]"
      },
      {
        "input": "items = [[5,50],[5,60],[5,70],[5,80],[5,90],[5,100],[5,110],[5,120],[5,130],[5,140],[5,150]]",
        "output": "[[5, 130]]"
      },
      {
        "input": "items = [[1,100],[1,99],[1,98],[1,97],[1,96],[1,95],[2,100],[2,99],[2,98],[2,97],[2,96],[3,100],[3,99],[3,98],[3,97],[3,96],[4,100],[4,99],[4,98],[4,97],[4,96],[5,100],[5,99],[5,98],[5,97],[5,96]]",
        "output": "[[1, 98], [2, 98], [3, 98], [4, 98], [5, 98]]"
      },
      {
        "input": "items = [[1,50],[2,60],[3,70],[4,80],[5,90],[6,80],[7,70],[8,60],[9,50],[10,40],[11,30],[12,20],[13,10],[14,95],[15,85]]",
        "output": "[[1, 10], [2, 12], [3, 14], [4, 16], [5, 18], [6, 16], [7, 14], [8, 12], [9, 10], [10, 8], [11, 6], [12, 4], [13, 2], [14, 19], [15, 17]]"
      },
      {
        "input": "items = [[1,88],[1,77],[1,66],[1,55],[1,44],[1,33],[1,22],[1,11],[1,0],[2,100],[2,99],[2,98],[2,97],[2,96],[2,95],[2,94],[2,93],[2,92],[2,91],[2,90],[3,89],[3,78],[3,67],[3,56],[3,45],[3,34],[3,23],[3,12],[3,1],[3,88],[3,77],[3,66],[3,55],[3,44],[3,33],[3,22],[3,11],[3,2]]",
        "output": "[[1, 66], [2, 98], [3, 79]]"
      },
      {
        "input": "items = [[1,95],[2,95],[3,95],[4,95],[5,95],[1,90],[2,90],[3,90],[4,90],[5,90],[1,85],[2,85],[3,85],[4,85],[5,85],[1,80],[2,80],[3,80],[4,80],[5,80],[1,75],[2,75],[3,75],[4,75],[5,75],[1,70],[2,70],[3,70],[4,70],[5,70]]",
        "output": "[[1, 85], [2, 85], [3, 85], [4, 85], [5, 85]]"
      },
      {
        "input": "items = [[1,100],[1,99],[1,98],[1,97],[1,96],[1,95],[1,94],[1,93],[1,92],[1,91],[2,100],[2,99],[2,98],[2,97],[2,96]]",
        "output": "[[1, 98], [2, 98]]"
      },
      {
        "input": "items = [[3,50],[3,60],[3,70],[3,80],[3,90],[3,100],[3,10],[3,20],[3,30],[3,40],[3,5],[3,15],[3,25],[3,35],[3,45]]",
        "output": "[[3, 80]]"
      },
      {
        "input": "items = [[2,80],[2,85],[2,90],[2,95],[2,100],[2,105],[2,110],[2,115],[2,120],[2,125],[3,60],[3,65],[3,70],[3,75],[3,80],[3,85],[3,90],[3,95],[3,100],[3,105]]",
        "output": "[[2, 115], [3, 95]]"
      },
      {
        "input": "items = [[5,50],[5,55],[5,60],[5,65],[5,70],[5,75],[5,80],[5,85],[5,90],[5,95]]",
        "output": "[[5, 85]]"
      },
      {
        "input": "items = [[1,70],[1,80],[1,90],[1,100],[1,60],[2,60],[2,70],[2,80],[2,90],[2,100],[3,50],[3,60],[3,70],[3,80],[3,90]]",
        "output": "[[1, 80], [2, 80], [3, 70]]"
      },
      {
        "input": "items = [[3,100],[3,99],[3,98],[3,97],[3,96],[3,95],[3,94],[3,93],[3,92],[3,91]]",
        "output": "[[3, 98]]"
      },
      {
        "input": "items = [[1,90],[1,85],[1,80],[1,75],[1,70],[1,65],[1,60],[1,55],[1,50],[1,45],[2,95],[2,90],[2,85],[2,80],[2,75],[2,70],[2,65],[2,60],[2,55],[2,50],[3,100],[3,95],[3,90],[3,85],[3,80],[3,75],[3,70],[3,65],[3,60],[3,55],[3,50],[3,45],[3,40],[3,35],[3,30],[3,25],[3,20],[3,15],[3,10],[3,5]]",
        "output": "[[1, 80], [2, 85], [3, 90]]"
      },
      {
        "input": "items = [[1,85],[1,90],[1,78],[1,92],[1,88],[2,76],[2,82],[2,90],[2,88],[2,79],[3,65],[3,70],[3,75],[3,80],[3,85]]",
        "output": "[[1, 86], [2, 83], [3, 75]]"
      },
      {
        "input": "items = [[10,88],[10,89],[10,90],[10,91],[10,92],[20,70],[20,71],[20,72],[20,73],[20,74],[30,60],[30,61],[30,62],[30,63],[30,64],[40,50],[40,51],[40,52],[40,53],[40,54],[50,40],[50,41],[50,42],[50,43],[50,44],[60,30],[60,31],[60,32],[60,33],[60,34],[70,20],[70,21],[70,22],[70,23],[70,24],[80,10],[80,11],[80,12],[80,13],[80,14]]",
        "output": "[[10, 90], [20, 72], [30, 62], [40, 52], [50, 42], [60, 32], [70, 22], [80, 12]]"
      },
      {
        "input": "items = [[9,99],[9,98],[9,97],[9,96],[9,95],[9,94],[9,93],[9,92],[9,91],[9,90],[10,99],[10,98],[10,97],[10,96],[10,95],[10,94],[10,93],[10,92],[10,91],[10,90],[11,99],[11,98],[11,97],[11,96],[11,95],[11,94],[11,93],[11,92],[11,91],[11,90],[12,99],[12,98],[12,97],[12,96],[12,95],[12,94],[12,93],[12,92],[12,91],[12,90]]",
        "output": "[[9, 97], [10, 97], [11, 97], [12, 97]]"
      },
      {
        "input": "items = [[3,100],[3,99],[3,98],[3,97],[3,96],[3,95],[3,94],[3,93],[3,92],[3,91],[3,90],[3,89],[3,88]]",
        "output": "[[3, 98]]"
      },
      {
        "input": "items = [[1,60],[1,70],[1,80],[1,90],[1,100],[2,50],[2,60],[2,70],[2,80],[2,90],[3,40],[3,50],[3,60],[3,70],[3,80],[4,30],[4,40],[4,50],[4,60],[4,70],[5,20],[5,30],[5,40],[5,50],[5,60],[1,30],[1,40],[2,20],[2,30],[3,10],[3,20],[4,10],[4,20],[5,10],[5,20]]",
        "output": "[[1, 80], [2, 70], [3, 60], [4, 50], [5, 40]]"
      },
      {
        "input": "items = [[1,95],[1,85],[1,75],[1,65],[1,55],[1,45],[1,35],[1,25],[1,15],[1,5],[2,95],[2,85],[2,75],[2,65],[2,55],[2,45],[2,35],[2,25],[2,15],[2,5],[2,10],[2,20],[2,30],[2,40]]",
        "output": "[[1, 75], [2, 75]]"
      },
      {
        "input": "items = [[5,90],[5,85],[5,80],[5,75],[5,70],[5,65],[5,60],[5,55],[5,50],[5,45],[6,90],[6,85],[6,80],[6,75],[6,70],[6,65],[6,60],[6,55],[6,50],[6,45]]",
        "output": "[[5, 80], [6, 80]]"
      },
      {
        "input": "items = [[1,90],[2,90],[3,90],[4,90],[5,90],[6,90],[7,90],[8,90],[9,90],[10,90],[11,90],[12,90],[13,90],[14,90],[15,90]]",
        "output": "[[1, 18], [2, 18], [3, 18], [4, 18], [5, 18], [6, 18], [7, 18], [8, 18], [9, 18], [10, 18], [11, 18], [12, 18], [13, 18], [14, 18], [15, 18]]"
      },
      {
        "input": "items = [[1,70],[1,80],[1,90],[1,100],[1,60],[2,50],[2,60],[2,70],[2,80],[2,90],[3,40],[3,50],[3,60],[3,70],[3,80],[3,90],[4,30],[4,40],[4,50],[4,60],[4,70],[5,20],[5,30],[5,40],[5,50],[5,60],[5,70],[5,80],[5,90],[5,100]]",
        "output": "[[1, 80], [2, 70], [3, 70], [4, 50], [5, 80]]"
      },
      {
        "input": "items = [[1,100],[1,99],[1,98],[1,97],[1,96],[1,95],[1,94],[1,93],[1,92],[1,91],[2,100],[2,99],[2,98],[2,97],[2,96],[2,95],[2,94],[2,93],[2,92],[2,91],[3,100],[3,99],[3,98],[3,97],[3,96],[3,95],[3,94],[3,93],[3,92],[3,91]]",
        "output": "[[1, 98], [2, 98], [3, 98]]"
      },
      {
        "input": "items = [[100,85],[100,88],[100,91],[100,94],[100,97],[200,86],[200,89],[200,92],[200,95],[200,98],[300,87],[300,90],[300,93],[300,96],[300,99],[400,84],[400,87],[400,90],[400,93],[400,96],[500,83],[500,86],[500,89],[500,92],[500,95],[600,82],[600,85],[600,88],[600,91],[600,94],[700,81],[700,84],[700,87],[700,90],[700,93]]",
        "output": "[[100, 91], [200, 92], [300, 93], [400, 90], [500, 89], [600, 88], [700, 87]]"
      },
      {
        "input": "items = [[1,50],[1,60],[1,70],[1,80],[1,90],[1,100],[2,50],[2,60],[2,70],[2,80],[2,90],[2,100],[3,50],[3,60],[3,70],[3,80],[3,90],[3,100],[4,50],[4,60],[4,70],[4,80],[4,90],[4,100],[5,50],[5,60],[5,70],[5,80],[5,90],[5,100],[6,50],[6,60],[6,70],[6,80],[6,90],[6,100]]",
        "output": "[[1, 80], [2, 80], [3, 80], [4, 80], [5, 80], [6, 80]]"
      },
      {
        "input": "items = [[5,50],[5,60],[5,70],[5,80],[5,90],[6,60],[6,70],[6,80],[6,90],[6,100],[7,70],[7,80],[7,90],[7,100],[7,10],[7,20],[7,30],[7,40],[8,80],[8,90],[8,100],[8,10],[8,20],[8,30],[8,40],[8,50]]",
        "output": "[[5, 70], [6, 80], [7, 76], [8, 72]]"
      },
      {
        "input": "items = [[3,50],[3,55],[3,60],[3,65],[3,70],[3,75],[3,80],[3,85],[3,90],[3,95],[4,100],[4,90],[4,80],[4,70],[4,60],[4,50],[4,40],[4,30],[4,20],[4,10],[5,10],[5,20],[5,30],[5,40],[5,50],[5,60],[5,70],[5,80],[5,90],[5,100]]",
        "output": "[[3, 85], [4, 80], [5, 80]]"
      },
      {
        "input": "items = [[1,85],[1,90],[1,95],[1,80],[1,88],[2,76],[2,82],[2,88],[2,90],[2,79],[1,60],[1,70],[1,80],[1,90],[1,100],[2,50],[2,60],[2,70],[2,80],[2,90]]",
        "output": "[[1, 92], [2, 86]]"
      },
      {
        "input": "items = [[3,85],[3,80],[3,75],[3,70],[3,65],[3,60],[3,55],[3,50],[3,45],[3,40],[3,35],[3,30],[3,25],[3,20],[3,15],[3,10],[3,5],[3,0]]",
        "output": "[[3, 75]]"
      },
      {
        "input": "items = [[1,88],[1,92],[1,95],[1,100],[1,90],[2,75],[2,80],[2,85],[2,90],[2,95],[3,60],[3,65],[3,70],[3,75],[3,80],[4,45],[4,50],[4,55],[4,60],[4,65]]",
        "output": "[[1, 93], [2, 85], [3, 70], [4, 55]]"
      },
      {
        "input": "items = [[1,100],[1,99],[1,98],[1,97],[1,96],[1,95],[2,80],[2,85],[2,90],[2,95],[2,100],[3,70],[3,75],[3,80],[3,85],[3,90],[4,60],[4,65],[4,70],[4,75],[4,80],[5,50],[5,55],[5,60],[5,65],[5,70]]",
        "output": "[[1, 98], [2, 90], [3, 80], [4, 70], [5, 60]]"
      }
    ]
  },
  {
    "id": 896,
    "difficulty": "Easy",
    "tags": [
      "Array"
    ],
    "problemDescription": "An array is monotonic if it is either monotone increasing or monotone decreasing.\nAn array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].\nGiven an integer array nums, return true if the given array is monotonic, or false otherwise.\n\u00a0\nExample 1:\n\nInput: nums = [1,2,2,3]\nOutput: true\n\nExample 2:\n\nInput: nums = [6,5,4,4]\nOutput: true\n\nExample 3:\n\nInput: nums = [1,3,2]\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-105 <= nums[i] <= 105\n\n",
    "starterCode": "class Solution:\n    def isMonotonic(self, nums: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "nums = [1,2,2,3]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,4,5]",
        "output": "True"
      },
      {
        "input": "nums = [-1,-2,-2,-3]",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1]",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1]",
        "output": "True"
      },
      {
        "input": "nums = [10,-10,-20,-30]",
        "output": "True"
      },
      {
        "input": "nums = [-100,0,100]",
        "output": "True"
      },
      {
        "input": "nums = [-100000,100000]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,2,1]",
        "output": "False"
      },
      {
        "input": "nums = [1]",
        "output": "True"
      },
      {
        "input": "nums = [5,3,3,2,1]",
        "output": "True"
      },
      {
        "input": "nums = [-1,-5,-10,-10]",
        "output": "True"
      },
      {
        "input": "nums = [6,5,4,4]",
        "output": "True"
      },
      {
        "input": "nums = [100000, -100000, 0]",
        "output": "False"
      },
      {
        "input": "nums = [1,3,2]",
        "output": "False"
      },
      {
        "input": "nums = [100000,-100000]",
        "output": "True"
      },
      {
        "input": "nums = [4,4,4,4]",
        "output": "True"
      },
      {
        "input": "nums = [-100000, 0, 100000]",
        "output": "True"
      },
      {
        "input": "nums = [-1,-2,-3,-4]",
        "output": "True"
      },
      {
        "input": "nums = [5,5,4,4,3,3,2,2]",
        "output": "True"
      },
      {
        "input": "nums = [100,90,90,80,70,60,50]",
        "output": "True"
      },
      {
        "input": "nums = [5,3,2,4,1]",
        "output": "False"
      },
      {
        "input": "nums = [1,2,4,5,6,7,8]",
        "output": "True"
      },
      {
        "input": "nums = [5]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,4,5,3]",
        "output": "False"
      },
      {
        "input": "nums = [1, 3, 5, 4, 4, 3, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [9, 8, 8, 7, 7, 7, 6, 5, 5, 5, 4, 3, 2, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 8, 9, 10]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 2, 2, 1, 1, 0, 0, -1, -1]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 5, 5, 5, 5, 4, 3, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4]",
        "output": "False"
      },
      {
        "input": "nums = [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5]",
        "output": "False"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "True"
      },
      {
        "input": "nums = [-1, 0, 1, 0, -1, 0, 1]",
        "output": "False"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "True"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 400, 300, 200, 100, 0, -100, -200, -300, -400, -500]",
        "output": "False"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 2, 2, 3, 4, 5, 5, 5, 4, 3, 2, 1, 0, 0, 0, 1, 1, 1]",
        "output": "False"
      },
      {
        "input": "nums = [-100000, -99999, -99998, -99997, -99996]",
        "output": "True"
      },
      {
        "input": "nums = [-100000, -90000, -80000, -70000, -60000, -50000, -40000, -30000, -20000, -10000, 0]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "True"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6]",
        "output": "True"
      },
      {
        "input": "nums = [10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, -1, -1, -2, -2, -3, -3]",
        "output": "True"
      },
      {
        "input": "nums = [5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]",
        "output": "False"
      },
      {
        "input": "nums = [-100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000]",
        "output": "True"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "True"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 2, 2, 2, 1, 1, 1]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]",
        "output": "True"
      },
      {
        "input": "nums = [1,-1,2,-2,3,-3,4,-4,5,-5]",
        "output": "False"
      },
      {
        "input": "nums = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,2,3,3,4,5,5,6,7,7,8,9,10,10]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 4, 4, 5, 5]",
        "output": "True"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3, -4, -4, -4, -4, -4]",
        "output": "True"
      },
      {
        "input": "nums = [0,1,0,1,0,1,0,1,0,1,0,1,0,1]",
        "output": "False"
      },
      {
        "input": "nums = [10, 9, 8, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,-1]",
        "output": "True"
      },
      {
        "input": "nums = [4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1]",
        "output": "True"
      },
      {
        "input": "nums = [100, 100, 100, 100, 100]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
        "output": "False"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "True"
      },
      {
        "input": "nums = [1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10]",
        "output": "False"
      },
      {
        "input": "nums = [4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,5,4,3,2,1]",
        "output": "False"
      },
      {
        "input": "nums = [5,5,4,4,3,3,2,2,1,1]",
        "output": "True"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 100000, 100000, 99999, 99998, 99997, 99996]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]",
        "output": "True"
      },
      {
        "input": "nums = [100,99,98,97,96,95,94,93,92,91,90]",
        "output": "True"
      },
      {
        "input": "nums = [10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4]",
        "output": "True"
      },
      {
        "input": "nums = [-50000, -50000, -50000, -50000, -50000, -50000]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,10,10]",
        "output": "True"
      },
      {
        "input": "nums = [100, 200, 300, 400, 500, 400, 300, 200, 100]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]",
        "output": "True"
      },
      {
        "input": "nums = [-50000, -50000, -50000, -50000, -50000]",
        "output": "True"
      },
      {
        "input": "nums = [1,2,2,3,4,4,5,6,6,7,8,9,9,10,10,10,10]",
        "output": "True"
      },
      {
        "input": "nums = [-1, 0, 1, 2, 3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3]",
        "output": "False"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995]",
        "output": "True"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 5, 4, 3, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 3, 2, 1, 0, -1, -2, -3, -4, -3, -2, -1, 0]",
        "output": "False"
      },
      {
        "input": "nums = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]",
        "output": "True"
      },
      {
        "input": "nums = [100000,-100000,100000,-100000,100000]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 3, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "True"
      },
      {
        "input": "nums = [9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]",
        "output": "True"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 1, 2]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 2, 2, 1, 1, 2, 2, 3, 3, 2, 2, 1, 1, 2, 2, 3]",
        "output": "False"
      },
      {
        "input": "nums = [-1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 2, 2, 1, 1]",
        "output": "False"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4]",
        "output": "True"
      },
      {
        "input": "nums = [100000,-100000,0,0,0,0,100000]",
        "output": "False"
      },
      {
        "input": "nums = [10,9,8,7,6,5,5,4,3,2,1,1,0,-1,-1,-2,-3,-3,-4,-5]",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5]",
        "output": "True"
      },
      {
        "input": "nums = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 9, 9, 9]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 2, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 8, 9]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8]",
        "output": "False"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]",
        "output": "True"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5]",
        "output": "True"
      },
      {
        "input": "nums = [100,200,300,400,500,400,300,200,100]",
        "output": "False"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "True"
      },
      {
        "input": "nums = [-5, -5, -5, -5, 0, 0, 0, 0, 5, 5, 5, 5]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 99999, 99998, 99997, 99996, 99995, 99994, 99993, 99992, 99991, 99990]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 100000, 100000, 100000]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 100000, 99999, 99998, 99997]",
        "output": "True"
      },
      {
        "input": "nums = [100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000, 0, -10000, -20000, -30000, -40000, -50000, -60000, -70000, -80000, -90000, -100000]",
        "output": "True"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6]",
        "output": "True"
      },
      {
        "input": "nums = [5,5,4,4,3,3,2,2,1,1,0,0,-1,-1,-2,-2]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]",
        "output": "False"
      },
      {
        "input": "nums = [100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]",
        "output": "True"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]",
        "output": "False"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "True"
      },
      {
        "input": "nums = [0,1,2,3,4,3,2,1,0]",
        "output": "False"
      },
      {
        "input": "nums = [-1, -2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -7, -7, -8, -8, -9, -9, -10, -10]",
        "output": "True"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10]",
        "output": "True"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 1, 1, 1, 1, 2, 3, 4, 5, 5, 5, 5, 5]",
        "output": "False"
      },
      {
        "input": "nums = [-100000, -99999, -99998, -99997, -99996, -99995]",
        "output": "True"
      },
      {
        "input": "nums = [-100000, -99999, -99998, -99997, -99996, -99995, -99994, -99993, -99992, -99991, -99990]",
        "output": "True"
      },
      {
        "input": "nums = [5, 5, 5, 4, 4, 4, 3, 3, 3]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 2, 1, 0, -1, -2, -3, -2, -1, 0, 1, 2, 3]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5]",
        "output": "True"
      },
      {
        "input": "nums = [9, 9, 9, 9, 9, 8, 7, 6, 5, 5, 4, 3, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "True"
      }
    ]
  },
  {
    "id": 884,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "String",
      "Counting"
    ],
    "problemDescription": "A sentence is a string of single-space separated words where each word consists only of lowercase letters.\nA word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.\nGiven two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.\n\u00a0\nExample 1:\n\nInput: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\nOutput: [\"sweet\",\"sour\"]\nExplanation:\nThe word \"sweet\" appears only in s1, while the word \"sour\" appears only in s2.\n\nExample 2:\n\nInput: s1 = \"apple apple\", s2 = \"banana\"\nOutput: [\"banana\"]\n\n\u00a0\nConstraints:\n\n1 <= s1.length, s2.length <= 200\ns1 and s2 consist of lowercase English letters and spaces.\ns1 and s2 do not have leading or trailing spaces.\nAll the words in s1 and s2 are separated by a single space.\n\n",
    "starterCode": "class Solution:\n    def uncommonFromSentences(self, s1: str, s2: str) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "s1 = \"overlap words here\", s2 = \"words here\"",
        "output": "['overlap']"
      },
      {
        "input": "s1 = \"hello world\", s2 = \"hold the door\"",
        "output": "['hello', 'world', 'hold', 'the', 'door']"
      },
      {
        "input": "s1 = \"hello world\", s2 = \"hello there\"",
        "output": "['world', 'there']"
      },
      {
        "input": "s1 = \"cat dog\", s2 = \"fish bird\"",
        "output": "['cat', 'dog', 'fish', 'bird']"
      },
      {
        "input": "s1 = \"unique words here\", s2 = \"some unique there\"",
        "output": "['words', 'here', 'some', 'there']"
      },
      {
        "input": "s1 = \"unique words\", s2 = \"different words\"",
        "output": "['unique', 'different']"
      },
      {
        "input": "s1 = \"single\", s2 = \"word\"",
        "output": "['single', 'word']"
      },
      {
        "input": "s1 = \"one two three\", s2 = \"four five six\"",
        "output": "['one', 'two', 'three', 'four', 'five', 'six']"
      },
      {
        "input": "s1 = \"same same\", s2 = \"same same\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"apple apple\", s2 = \"banana\"",
        "output": "['banana']"
      },
      {
        "input": "s1 = \"a b c\", s2 = \"d e f\"",
        "output": "['a', 'b', 'c', 'd', 'e', 'f']"
      },
      {
        "input": "s1 = \"exclusive to s1\", s2 = \"exclusive to s2\"",
        "output": "['s1', 's2']"
      },
      {
        "input": "s1 = \"hello world\", s2 = \"world is great\"",
        "output": "['hello', 'is', 'great']"
      },
      {
        "input": "s1 = \"a b c\", s2 = \"a b d\"",
        "output": "['c', 'd']"
      },
      {
        "input": "s1 = \"a b c d\", s2 = \"d e f g\"",
        "output": "['a', 'b', 'c', 'e', 'f', 'g']"
      },
      {
        "input": "s1 = \"one two three\", s2 = \"three two one\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"this apple is sweet\", s2 = \"this apple is sour\"",
        "output": "['sweet', 'sour']"
      },
      {
        "input": "s1 = \"hello from the other side\", s2 = \"hello from this side\"",
        "output": "['the', 'other', 'this']"
      },
      {
        "input": "s1 = \"long sentence with multiple occurrences of words\", s2 = \"words occurrences sentence\"",
        "output": "['long', 'with', 'multiple', 'of']"
      },
      {
        "input": "s1 = \"shared unique shared\", s2 = \"unique shared unique\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"abc def ghi jkl mno pqr stu vwx yz\", s2 = \"stu vwx yz abc def ghi jkl mno pqr\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"python is great\", s2 = \"great language python\"",
        "output": "['is', 'language']"
      },
      {
        "input": "s1 = \"alpha beta gamma\", s2 = \"delta epsilon zeta\"",
        "output": "['alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta']"
      },
      {
        "input": "s1 = \"common common words in both\", s2 = \"common words in both sentences\"",
        "output": "['sentences']"
      },
      {
        "input": "s1 = \"repeat repeat repeat repeat\", s2 = \"single\"",
        "output": "['single']"
      },
      {
        "input": "s1 = \"hello world from python\", s2 = \"hello world from java\"",
        "output": "['python', 'java']"
      },
      {
        "input": "s1 = \"same same same same\", s2 = \"same\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"multiple words in a sentence\", s2 = \"multiple unique words\"",
        "output": "['in', 'a', 'sentence', 'unique']"
      },
      {
        "input": "s1 = \"alpha beta gamma delta\", s2 = \"delta epsilon zeta\"",
        "output": "['alpha', 'beta', 'gamma', 'epsilon', 'zeta']"
      },
      {
        "input": "s1 = \"\", s2 = \"single word\"",
        "output": "['single', 'word']"
      },
      {
        "input": "s1 = \"repeated repeated words\", s2 = \"words words repeated\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"repeated repeated repeated\", s2 = \"unique word\"",
        "output": "['unique', 'word']"
      },
      {
        "input": "s1 = \"unique words only here\", s2 = \"completely different set of words\"",
        "output": "['unique', 'only', 'here', 'completely', 'different', 'set', 'of']"
      },
      {
        "input": "s1 = \"one two three four five six seven eight nine ten eleven twelve\", s2 = \"twelve eleven ten nine eight seven six five four three two one\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"one two one\", s2 = \"three two three\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"apple orange banana\", s2 = \"banana orange grape\"",
        "output": "['apple', 'grape']"
      },
      {
        "input": "s1 = \"a quick brown fox jumps over the lazy dog\", s2 = \"the quick brown dog jumps over a lazy\"",
        "output": "['fox']"
      },
      {
        "input": "s1 = \"common words appear here\", s2 = \"here common words appear\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"common common common\", s2 = \"uncommon\"",
        "output": "['uncommon']"
      },
      {
        "input": "s1 = \"single\", s2 = \"different\"",
        "output": "['single', 'different']"
      },
      {
        "input": "s1 = \"one two three four five six seven eight nine ten\", s2 = \"ten nine eight seven six five four three two one\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"overlap this is a test\", s2 = \"this is another test\"",
        "output": "['overlap', 'a', 'another']"
      },
      {
        "input": "s1 = \"longer sentence with many uncommon words\", s2 = \"many uncommon words longer sentence\"",
        "output": "['with']"
      },
      {
        "input": "s1 = \"common words in both\", s2 = \"common words in both\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"abc def ghi jkl mno pqr stu vwx yza\", s2 = \"stu vwx yza abc def ghi jkl\"",
        "output": "['mno', 'pqr']"
      },
      {
        "input": "s1 = \"python java cplusplus\", s2 = \"java csharp python\"",
        "output": "['cplusplus', 'csharp']"
      },
      {
        "input": "s1 = \"same same same\", s2 = \"different different different\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"hello world hello\", s2 = \"world world\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"test test test\", s2 = \"unique test\"",
        "output": "['unique']"
      },
      {
        "input": "s1 = \"distinct words only\", s2 = \"entirely distinct words\"",
        "output": "['only', 'entirely']"
      },
      {
        "input": "s1 = \"\", s2 = \"single\"",
        "output": "['single']"
      },
      {
        "input": "s1 = \"repeated repeated words\", s2 = \"unique words in second sentence\"",
        "output": "['unique', 'in', 'second', 'sentence']"
      },
      {
        "input": "s1 = \"test test test\", s2 = \"test test test test\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"single\", s2 = \"unique\"",
        "output": "['single', 'unique']"
      },
      {
        "input": "s1 = \"repeated repeated word\", s2 = \"word unique\"",
        "output": "['unique']"
      },
      {
        "input": "s1 = \"unique word in first sentence\", s2 = \"unique word in second sentence\"",
        "output": "['first', 'second']"
      },
      {
        "input": "s1 = \"many many words in this sentence\", s2 = \"many words\"",
        "output": "['in', 'this', 'sentence']"
      },
      {
        "input": "s1 = \"unique words only\", s2 = \"completely different set\"",
        "output": "['unique', 'words', 'only', 'completely', 'different', 'set']"
      },
      {
        "input": "s1 = \"unique words only\", s2 = \"different set words\"",
        "output": "['unique', 'only', 'different', 'set']"
      },
      {
        "input": "s1 = \"this is a test\", s2 = \"this is another test\"",
        "output": "['a', 'another']"
      },
      {
        "input": "s1 = \"same same same\", s2 = \"same\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"unique word in sentence one\", s2 = \"unique word in sentence two\"",
        "output": "['one', 'two']"
      },
      {
        "input": "s1 = \"multiple words are present\", s2 = \"multiple words are missing\"",
        "output": "['present', 'missing']"
      },
      {
        "input": "s1 = \"overlap words in both\", s2 = \"overlap words in both\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"longer sentence with more words\", s2 = \"shorter with\"",
        "output": "['longer', 'sentence', 'more', 'words', 'shorter']"
      },
      {
        "input": "s1 = \"identical identical identical\", s2 = \"identical identical identical\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"this is a test sentence\", s2 = \"sentence is a this\"",
        "output": "['test']"
      },
      {
        "input": "s1 = \"common common words in both\", s2 = \"common words\"",
        "output": "['in', 'both']"
      },
      {
        "input": "s1 = \"overlapping words in both\", s2 = \"overlapping words in both\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"repeated repeated words here\", s2 = \"different words here\"",
        "output": "['different']"
      },
      {
        "input": "s1 = \"distinctive words in each sentence\", s2 = \"each sentence has distinctive words\"",
        "output": "['in', 'has']"
      },
      {
        "input": "s1 = \"a a a b b c d e f g h i j k l m n o p q r s t u v w x y z\", s2 = \"a b c\"",
        "output": "['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
      },
      {
        "input": "s1 = \"a b c d e f g h i j\", s2 = \"k l m n o p q r s t\"",
        "output": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't']"
      },
      {
        "input": "s1 = \"unique words only here\", s2 = \"unique words are everywhere\"",
        "output": "['only', 'here', 'are', 'everywhere']"
      },
      {
        "input": "s1 = \"one two three four five six\", s2 = \"six five four three two one\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"longer sentence with multiple uncommon words here\", s2 = \"here are some uncommon words\"",
        "output": "['longer', 'sentence', 'with', 'multiple', 'are', 'some']"
      },
      {
        "input": "s1 = \"first sentence here\", s2 = \"second unique sentence\"",
        "output": "['first', 'here', 'second', 'unique']"
      },
      {
        "input": "s1 = \"same same same same\", s2 = \"different different\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"unique words in each sentence\", s2 = \"other unique words\"",
        "output": "['in', 'each', 'sentence', 'other']"
      },
      {
        "input": "s1 = \"common words and unique\", s2 = \"unique words and common\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"shared words words\", s2 = \"words shared\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"python java c++\", s2 = \"java c++ python\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"overlap overlap words\", s2 = \"words overlap\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"some common words here\", s2 = \"here some unique\"",
        "output": "['common', 'words', 'unique']"
      },
      {
        "input": "s1 = \"unique word only\", s2 = \"entirely different\"",
        "output": "['unique', 'word', 'only', 'entirely', 'different']"
      },
      {
        "input": "s1 = \"multiple multiple words in first\", s2 = \"words in second\"",
        "output": "['first', 'second']"
      },
      {
        "input": "s1 = \"repeated repeated words\", s2 = \"unique single\"",
        "output": "['words', 'unique', 'single']"
      },
      {
        "input": "s1 = \"one two three four five\", s2 = \"six seven eight nine ten\"",
        "output": "['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']"
      },
      {
        "input": "s1 = \"complexity in first\", s2 = \"complexity in second\"",
        "output": "['first', 'second']"
      },
      {
        "input": "s1 = \"\", s2 = \"\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"same same same\", s2 = \"same same\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"no overlap\", s2 = \"no common words\"",
        "output": "['overlap', 'common', 'words']"
      },
      {
        "input": "s1 = \"shared words shared\", s2 = \"shared words unique\"",
        "output": "['unique']"
      },
      {
        "input": "s1 = \"common word common\", s2 = \"word common unique\"",
        "output": "['unique']"
      },
      {
        "input": "s1 = \"shared words are common\", s2 = \"common shared words\"",
        "output": "['are']"
      },
      {
        "input": "s1 = \"singleword\", s2 = \"singleword\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"a a a a a a a a a a\", s2 = \"b b b b b b b b b b\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"repeated repeated repeated\", s2 = \"repeated unique\"",
        "output": "['unique']"
      },
      {
        "input": "s1 = \"hello world hello\", s2 = \"world hello universe\"",
        "output": "['universe']"
      },
      {
        "input": "s1 = \"repeated repeated word\", s2 = \"word\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"common words in both sentences\", s2 = \"common words in both sentences\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"a b c d e f g h i j\", s2 = \"j i h g f e d c b a\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"overlap overlap here\", s2 = \"here overlap\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"exclusive to first\", s2 = \"exclusive to second\"",
        "output": "['first', 'second']"
      },
      {
        "input": "s1 = \"multiple unique words here\", s2 = \"here multiple\"",
        "output": "['unique', 'words']"
      },
      {
        "input": "s1 = \"one two three four\", s2 = \"five six seven eight\"",
        "output": "['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight']"
      },
      {
        "input": "s1 = \"singleword\", s2 = \"differentword\"",
        "output": "['singleword', 'differentword']"
      },
      {
        "input": "s1 = \"unique words only\", s2 = \"completely different\"",
        "output": "['unique', 'words', 'only', 'completely', 'different']"
      },
      {
        "input": "s1 = \"a b c d e\", s2 = \"f g h i j\"",
        "output": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']"
      },
      {
        "input": "s1 = \"overlap words here and there\", s2 = \"there and words\"",
        "output": "['overlap', 'here']"
      },
      {
        "input": "s1 = \"single\", s2 = \"\"",
        "output": "['single']"
      },
      {
        "input": "s1 = \"apple banana cherry\", s2 = \"banana cherry date\"",
        "output": "['apple', 'date']"
      },
      {
        "input": "s1 = \"a b c d e f g\", s2 = \"h i j k l m n o p q r s t u v w x y z\"",
        "output": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
      },
      {
        "input": "s1 = \"\", s2 = \"singleword\"",
        "output": "['singleword']"
      },
      {
        "input": "s1 = \"uncommon word one\", s2 = \"uncommon word two\"",
        "output": "['one', 'two']"
      },
      {
        "input": "s1 = \"single\", s2 = \"single single\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", s2 = \"a b c\"",
        "output": "['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
      },
      {
        "input": "s1 = \"repeated repeated repeated\", s2 = \"unique\"",
        "output": "['unique']"
      },
      {
        "input": "s1 = \"a b c d e f g\", s2 = \"h i j k l m n\"",
        "output": "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']"
      },
      {
        "input": "s1 = \"longer sentence with more words included\", s2 = \"included more words with longer sentence\"",
        "output": "[]"
      },
      {
        "input": "s1 = \"overlap many words here\", s2 = \"many words overlap\"",
        "output": "['here']"
      },
      {
        "input": "s1 = \"singleword\", s2 = \"different\"",
        "output": "['singleword', 'different']"
      },
      {
        "input": "s1 = \"multiple same words here and here\", s2 = \"here and\"",
        "output": "['multiple', 'same', 'words']"
      },
      {
        "input": "s1 = \"python programming language\", s2 = \"programming language for python\"",
        "output": "['for']"
      },
      {
        "input": "s1 = \"abc def ghi jkl mno\", s2 = \"pqr stu vwx yza\"",
        "output": "['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yza']"
      },
      {
        "input": "s1 = \"single\", s2 = \"single unique\"",
        "output": "['unique']"
      },
      {
        "input": "s1 = \"many different words in this sentence\", s2 = \"completely different words in this sentence\"",
        "output": "['many', 'completely']"
      },
      {
        "input": "s1 = \"only one word\", s2 = \"\"",
        "output": "['only', 'one', 'word']"
      },
      {
        "input": "s1 = \"singleword\", s2 = \"\"",
        "output": "['singleword']"
      },
      {
        "input": "s1 = \"common words overlap\", s2 = \"overlap common words\"",
        "output": "[]"
      }
    ]
  },
  {
    "id": 1232,
    "difficulty": "Easy",
    "tags": [
      "Geometry",
      "Array",
      "Math"
    ],
    "problemDescription": "You are given an array\u00a0coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points\u00a0make a straight line in the XY plane.\n\u00a0\n\u00a0\nExample 1:\n\n\nInput: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\nOutput: true\n\nExample 2:\n\n\nInput: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\nOutput: false\n\n\u00a0\nConstraints:\n\n2 <=\u00a0coordinates.length <= 1000\ncoordinates[i].length == 2\n-10^4 <=\u00a0coordinates[i][0],\u00a0coordinates[i][1] <= 10^4\ncoordinates\u00a0contains no duplicate point.\n\n",
    "starterCode": "class Solution:\n    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:\n        ",
    "testCases": [
      {
        "input": "coordinates = [[0,0],[0,1],[0,2],[0,3]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-10000,-10000],[0,0],[10000,10000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-4,-3],[1,0],[3,-1],[0,-1],[-5,2]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[0,0],[5,5],[10,10],[15,15]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,1],[2,2],[3,3],[4,4],[5,4]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[1,1],[2,2],[3,5]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[-1,0],[0,1],[1,2],[2,3]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,2],[2,1],[3,0],[4,-1],[5,-2]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1,-1],[0,0],[1,1],[2,2],[3,3]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,2],[1,3],[1,4],[1,5],[1,6]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0,0],[1,1],[2,2],[3,3]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,1],[2,2],[2,3]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[-4,-3],[-1,1],[2,5],[5,9]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0,0],[1,1],[2,2],[3,3],[4,4]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1,-1],[0,0],[1,1],[2,2]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0,1],[1,3],[-1,-1],[2,5]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,1],[2,2],[3,3],[4,6]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[1,2],[2,3],[3,5]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[-1,0],[0,1],[1,0],[2,1],[3,0]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[-1,-1],[-2,-2],[-3,-3],[-4,-4],[-5,-5]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1,0],[0,1],[1,2],[2,3],[3,4]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[10,5],[15,10],[20,15],[25,20]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[10000,10000],[5000,5000],[0,0]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[2,4],[2,5],[2,6]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0,0],[0,1],[0,2],[0,3],[0,4]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1, 0], [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[5, -10], [10, -5], [15, 0], [20, 5], [25, 10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1, -2], [-2, -3], [-3, -4], [-4, -5], [-5, -6]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-10, 5], [-5, 10], [0, 15], [5, 20], [10, 25], [15, 30], [20, 35], [25, 40]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-2,-4],[-1,-2],[0,0],[1,2],[2,4]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1000, 2000], [2000, 4000], [3000, 6000], [4000, 8000], [5000, 10000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[10, 20], [20, 40], [30, 60], [40, 80], [50, 100], [60, 120]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,2],[2,3],[4,5],[5,6],[7,8],[8,9],[10,11]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-5,-20],[0,-10],[5,0],[10,10],[15,20]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 8]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1, -2], [-2, -4], [-3, -6], [-4, -8], [-5, -10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-10, 15], [-5, 10], [0, 5], [5, 0], [10, -5], [15, -10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[2, 2], [4, 4], [6, 6], [8, 8], [10, 10], [12, 12], [14, 14], [16, 16]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1, 3], [2, 5], [3, 7], [4, 9], [5, 11]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-2, 3], [-1, 4], [0, 5], [1, 6], [2, 7], [3, 8], [4, 9], [5, 10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[10000,10000],[5000,5000],[0,0],[-5000,-5000],[-10000,-10000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-20, -30], [-10, -15], [0, 0], [10, 15], [20, 30]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-5, 5], [-10, 10], [-15, 15], [-20, 20], [-25, 25], [-30, 30]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1, 1], [2, 3], [3, 5], [4, 7], [5, 9], [6, 11], [7, 13], [8, 15]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-5, -10], [0, 0], [5, 10], [10, 20], [15, 30]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[10, 5], [20, 10], [30, 15], [40, 20], [50, 25], [60, 30], [70, 35]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-3, -3], [-2, -2], [-1, -1], [0, 0], [1, 1], [2, 2], [3, 3]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-2, 1], [-1, 3], [0, 5], [1, 7], [2, 9], [3, 11]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0, -10000], [10000, -10000], [20000, -10000], [30000, -10000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-4, -2], [-2, 0], [0, 2], [2, 4], [4, 6]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-100, 100], [-50, 150], [0, 200], [50, 250], [100, 300]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-2, 2], [0, 0], [2, -2], [4, -4], [6, -6]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1,-2],[1,0],[3,2],[5,4],[7,6],[9,8]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-10, 15], [-5, 10], [0, 5], [5, 0], [10, -5]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[5,0],[5,1],[5,2],[5,3],[5,4]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0, -10], [0, -5], [0, 0], [0, 5], [0, 10], [0, 15]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[100, 200], [200, 400], [300, 600], [400, 800], [500, 1000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0,1],[1,3],[2,5],[3,7],[4,9]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-3, 7], [-2, 5], [-1, 3], [0, 1], [1, -1], [2, -3]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1, -2], [1, 0], [3, 2], [5, 4], [7, 6], [9, 8], [11, 10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-5,-5],[0,-2.5],[5,0],[10,2.5],[15,5]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-500, 500], [-250, 750], [0, 1000], [250, 1250], [500, 1500]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1,0],[0,1],[1,2],[2,3],[3,4],[4,5]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-10, 0], [-5, 0], [0, 0], [5, 0], [10, 0], [15, 0]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-2,-1],[0,0],[2,1],[4,2],[6,3],[8,4]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-2,-3],[-1,-1],[0,1],[1,3],[2,5],[3,7]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-3,-3],[-2,-2],[-1,-1],[0,0],[1,1],[2,2],[3,3]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-100,200],[-200,400],[-300,600],[-400,800],[-500,1000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-5,-10],[0,0],[5,10],[10,20],[15,30]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-5,-10],[-4,-8],[-3,-6],[-2,-4],[-1,-2],[0,0]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-5, -5], [0, 0], [5, 5], [10, 10], [15, 15], [20, 20]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-100, 100], [-50, 50], [0, 0], [50, -50], [100, -100]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-5,5],[-4,4],[-3,3],[-2,2],[-1,1],[0,0]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-100, -100], [-50, -50], [0, 0], [50, 50], [100, 100]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-5, 5], [0, 10], [5, 15], [10, 20], [15, 25], [20, 30], [25, 35]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[100,-200],[200,-400],[300,-600],[400,-800],[500,-1000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1, 3], [2, 5], [3, 7], [4, 9], [5, 11], [6, 13], [7, 15], [8, 17], [9, 19], [10, 21]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1,-2],[-2,-4],[-3,-6],[-4,-8],[-5,-10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[100,100],[200,200],[300,300],[400,401],[500,500]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[-100,100],[100,-100],[0,0]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[2, 3], [4, 6], [6, 9], [8, 12], [10, 15]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-3, 3], [-6, 6], [-9, 9], [-12, 12], [-15, 15]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1, 0], [0, 1], [1, 0], [0, -1], [-1, 0]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[-10, -20], [0, 0], [10, 20], [20, 40], [30, 60]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1, 1], [3, 5], [5, 9], [7, 13], [9, 17]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,2],[2,4],[3,6],[4,8],[5,10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1,-5],[0,-2],[1,1],[2,4],[3,7],[4,10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0, 1000], [1000, 1000], [2000, 1000], [3000, 1000], [4000, 1000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-2,-3],[-1,-1],[0,1],[1,3],[2,5]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1, 2], [2, 4], [4, 8], [8, 16], [16, 32], [32, 64]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-100, -200], [-200, -400], [-300, -600], [-400, -800], [-500, -1000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10], [6, 12], [7, 14]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1, 2], [4, 6], [7, 10], [10, 14], [13, 18], [16, 22], [19, 26]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[10,10],[20,20],[30,30],[40,40],[50,50]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-3,-6],[1,-2],[5,2],[7,3]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[-100,0],[0,0],[100,0],[200,0],[300,0]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1000, 2000], [0, 0], [1000, -2000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-5, -10], [0, 0], [5, 10], [10, 20], [15, 30], [20, 40]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-10, 0], [0, 5], [10, 10], [20, 15], [30, 20], [40, 25], [50, 30], [60, 35]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1, 1], [0, 0], [1, -1], [2, -2], [3, -3]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0,0],[1,2],[2,4],[3,6],[4,8],[5,10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1,1],[1,2],[1,3],[1,4],[1,5]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-10,-10],[-5,-5],[0,0],[5,5],[10,10]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0, 1], [1, 2], [2, 3], [3, 5], [4, 6], [5, 8]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 15]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[10, 20], [20, 30], [30, 40], [40, 50], [50, 60], [60, 70], [70, 80]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1, -1], [1, 1], [3, 3], [5, 5], [7, 7], [9, 9]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-1000, 0], [-500, 0], [0, 0], [500, 0], [1000, 0]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[-10000, 10000], [-5000, 10000], [0, 10000], [5000, 10000], [10000, 10000]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[5, 3], [10, 6], [15, 9], [20, 12], [25, 15]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[1, 1], [2, 2], [3, 3], [4, 3], [5, 5]]",
        "output": "False"
      },
      {
        "input": "coordinates = [[-2, 4], [-1, 2], [0, 0], [1, -2], [2, -4]]",
        "output": "True"
      },
      {
        "input": "coordinates = [[0,5],[1,5],[2,5],[3,5],[4,5]]",
        "output": "True"
      }
    ]
  },
  {
    "id": 2784,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "problemDescription": "You are given an integer array nums. We consider an array good if it is a permutation of an array base[n].\nbase[n] = [1, 2, ..., n - 1, n, n] (in other words, it is an array of length n + 1 which contains 1 to n - 1 exactly once, plus two occurrences of n). For example, base[1] = [1, 1] and base[3] = [1, 2, 3, 3].\nReturn true if the given array is good, otherwise return false.\nNote: A permutation of integers represents an arrangement of these numbers.\n\u00a0\nExample 1:\n\nInput: nums = [2, 1, 3]\nOutput: false\nExplanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.\n\nExample 2:\n\nInput: nums = [1, 3, 3, 2]\nOutput: true\nExplanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true.\nExample 3:\n\nInput: nums = [1, 1]\nOutput: true\nExplanation: Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true.\nExample 4:\n\nInput: nums = [3, 4, 4, 1, 2, 1]\nOutput: false\nExplanation: Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n1 <= num[i] <= 200\n\n",
    "starterCode": "class Solution:\n    def isGood(self, nums: List[int]) -> bool:\n        ",
    "testCases": [
      {
        "input": "nums = [1, 3, 3, 2]",
        "output": "True"
      },
      {
        "input": "nums = [2, 1, 1]",
        "output": "False"
      },
      {
        "input": "nums = [2, 1, 2]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 3, 5, 4]",
        "output": "False"
      },
      {
        "input": "nums = [2, 2]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 3, 4, 4]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 2]",
        "output": "True"
      },
      {
        "input": "nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "True"
      },
      {
        "input": "nums = [10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "True"
      },
      {
        "input": "nums = [1]",
        "output": "False"
      },
      {
        "input": "nums = [2, 1, 3]",
        "output": "False"
      },
      {
        "input": "nums = [1, 1]",
        "output": "True"
      },
      {
        "input": "nums = [2, 2, 1, 3]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 3]",
        "output": "True"
      },
      {
        "input": "nums = [2, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 4]",
        "output": "True"
      },
      {
        "input": "nums = [3, 4, 4, 1, 2, 1]",
        "output": "False"
      },
      {
        "input": "nums = [4, 3, 4, 2, 1]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 4]",
        "output": "False"
      },
      {
        "input": "nums = [5, 5, 1, 2, 3, 4]",
        "output": "True"
      },
      {
        "input": "nums = [5, 1, 2, 3, 4, 5]",
        "output": "True"
      },
      {
        "input": "nums = [4, 1, 2, 3, 4]",
        "output": "True"
      },
      {
        "input": "nums = [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12]",
        "output": "False"
      },
      {
        "input": "nums = [5, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "False"
      },
      {
        "input": "nums = [8, 1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11]",
        "output": "True"
      },
      {
        "input": "nums = [9, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "output": "True"
      },
      {
        "input": "nums = [3, 2, 1, 4, 4]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 4, 4]",
        "output": "False"
      },
      {
        "input": "nums = [20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "True"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1, 1, 7]",
        "output": "False"
      },
      {
        "input": "nums = [11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "output": "True"
      },
      {
        "input": "nums = [19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24]",
        "output": "True"
      },
      {
        "input": "nums = [5, 1, 2, 3, 4, 4, 5]",
        "output": "False"
      },
      {
        "input": "nums = [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 10]",
        "output": "True"
      },
      {
        "input": "nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5]",
        "output": "False"
      },
      {
        "input": "nums = [7, 1, 2, 3, 4, 5, 6, 7]",
        "output": "True"
      },
      {
        "input": "nums = [3, 1, 2, 3]",
        "output": "True"
      },
      {
        "input": "nums = [6, 1, 2, 3, 4, 5, 6]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 28]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]",
        "output": "False"
      },
      {
        "input": "nums = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 15]",
        "output": "True"
      },
      {
        "input": "nums = [100, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 10]",
        "output": "False"
      },
      {
        "input": "nums = [5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "False"
      },
      {
        "input": "nums = [2, 1, 4, 3, 5, 6, 6]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27]",
        "output": "True"
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30]",
        "output": "True"
      },
      {
        "input": "nums = [200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 100]",
        "output": "False"
      },
      {
        "input": "nums = [6, 6, 1, 2, 3, 4, 5]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26]",
        "output": "True"
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1, 7]",
        "output": "True"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 1, 2, 3, 4, 5]",
        "output": "False"
      },
      {
        "input": "nums = [2, 3, 1, 1, 4, 5, 6, 7, 8, 9]",
        "output": "False"
      },
      {
        "input": "nums = [6, 5, 4, 3, 2, 1, 6, 7]",
        "output": "False"
      },
      {
        "input": "nums = [200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 200]",
        "output": "True"
      },
      {
        "input": "nums = [5, 4, 3, 2, 1, 5, 6]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 20, 20]",
        "output": "False"
      },
      {
        "input": "nums = [6, 1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9]",
        "output": "False"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 6, 6]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22]",
        "output": "True"
      },
      {
        "input": "nums = [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 19]",
        "output": "True"
      },
      {
        "input": "nums = [6, 2, 1, 3, 4, 5, 6]",
        "output": "True"
      },
      {
        "input": "nums = [2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20]",
        "output": "True"
      },
      {
        "input": "nums = [6, 1, 2, 3, 4, 5, 6, 6, 7]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 100]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20]",
        "output": "True"
      },
      {
        "input": "nums = [2, 2, 1, 3, 4]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "False"
      },
      {
        "input": "nums = [18, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50, 1]",
        "output": "False"
      },
      {
        "input": "nums = [19, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19]",
        "output": "False"
      },
      {
        "input": "nums = [6, 3, 2, 1, 4, 5, 6]",
        "output": "True"
      },
      {
        "input": "nums = [100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 100]",
        "output": "False"
      },
      {
        "input": "nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 10, 20]",
        "output": "False"
      },
      {
        "input": "nums = [13, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "True"
      },
      {
        "input": "nums = [5, 2, 3, 4, 4, 1, 5]",
        "output": "False"
      },
      {
        "input": "nums = [17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17]",
        "output": "False"
      },
      {
        "input": "nums = [7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 7]",
        "output": "False"
      },
      {
        "input": "nums = [18, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18]",
        "output": "False"
      },
      {
        "input": "nums = [5, 5, 1, 2, 3, 4, 5]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]",
        "output": "False"
      },
      {
        "input": "nums = [7, 1, 2, 3, 4, 5, 6, 6]",
        "output": "False"
      },
      {
        "input": "nums = [11, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]",
        "output": "False"
      },
      {
        "input": "nums = [1, 3, 2, 5, 4, 5]",
        "output": "True"
      },
      {
        "input": "nums = [5, 3, 4, 5, 1, 2]",
        "output": "True"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 100]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25]",
        "output": "True"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 50]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 21]",
        "output": "False"
      },
      {
        "input": "nums = [7, 1, 2, 3, 4, 5, 6, 6, 8]",
        "output": "False"
      },
      {
        "input": "nums = [15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]",
        "output": "True"
      },
      {
        "input": "nums = [1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]",
        "output": "False"
      },
      {
        "input": "nums = [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "output": "True"
      },
      {
        "input": "nums = [18, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 18, 18]",
        "output": "False"
      },
      {
        "input": "nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1]",
        "output": "False"
      },
      {
        "input": "nums = [200, 1, 2, 3, ..., 198, 199, 199]",
        "output": "False"
      },
      {
        "input": "nums = [16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16]",
        "output": "False"
      },
      {
        "input": "nums = [9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9]",
        "output": "False"
      },
      {
        "input": "nums = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 11]",
        "output": "True"
      },
      {
        "input": "nums = [15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15]",
        "output": "False"
      },
      {
        "input": "nums = [2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11]",
        "output": "False"
      },
      {
        "input": "nums = [19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]",
        "output": "True"
      },
      {
        "input": "nums = [8, 1, 2, 3, 4, 5, 6, 7, 7, 9]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "False"
      },
      {
        "input": "nums = [20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 19, 20]",
        "output": "False"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29]",
        "output": "True"
      },
      {
        "input": "nums = [9, 1, 2, 3, 4, 5, 6, 7, 8, 8]",
        "output": "False"
      },
      {
        "input": "nums = [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 101, 101]",
        "output": "True"
      },
      {
        "input": "nums = [8, 1, 2, 3, 4, 5, 6, 7, 7, 8, 8]",
        "output": "False"
      },
      {
        "input": "nums = [2, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "False"
      },
      {
        "input": "nums = [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 50, 50]",
        "output": "False"
      }
    ]
  },
  {
    "id": 141,
    "difficulty": "Easy",
    "tags": [
      "Hash Table",
      "Linked List",
      "Two Pointers"
    ],
    "problemDescription": "Given head, the head of a linked list, determine if the linked list has a cycle in it.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the\u00a0next\u00a0pointer. Internally, pos\u00a0is used to denote the index of the node that\u00a0tail's\u00a0next\u00a0pointer is connected to.\u00a0Note that\u00a0pos\u00a0is not passed as a parameter.\nReturn\u00a0true if there is a cycle in the linked list. Otherwise, return false.\n\u00a0\nExample 1:\n\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\nExample 2:\n\n\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n\nExample 3:\n\n\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\n\u00a0\nConstraints:\n\nThe number of the nodes in the list is in the range [0, 104].\n-105 <= Node.val <= 105\npos is -1 or a valid index in the linked-list.\n\n\u00a0\nFollow up: Can you solve it using O(1) (i.e. constant) memory?\n",
    "starterCode": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        ",
    "testCases": [
      {
        "input": "head = [3,2,0,-4], pos = 1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15], pos = 15",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = 6",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [0,-1,-2,-3,-4,-5,-6,-7,-8,-9], pos = 7",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [5,-5,5,-5,5,-5,5,-5,5,-5,5,-5,5,-5,5,-5,5,-5,5,-5], pos = 18",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], pos = 5",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [5,4,3,2,1,0,-1,-2,-3,-4,-5], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], pos = 5",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], pos = 10",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [100,90,80,70,60,50,40,30,20,10,0,-10,-20,-30,-40,-50], pos = 14",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5,5,5], pos = 11",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20], pos = 15",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,13000,14000,15000,16000,17000,18000,19000,20000], pos = 10",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = 5",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], pos = 5",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], pos = 39",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], pos = 10",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = 4",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19], pos = 9",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], pos = 10",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1], pos = 5",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,20,30,40,50,60,70], pos = 4",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [100000,-100000,50000,-50000,25000,-25000,12500,-12500,6250,-6250,3125,-3125,1562,-1562,781,-781,390,-390,195,-195], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [100000,-100000,50000,-50000,25000,-25000,12500,-12500,6250,-6250,3125,-3125,1562,-1562,781,-781,390,-390,195,-195], pos = 18",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [100000,-100000,50000,-50000,25000,-25000], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,2,2,2,2,2,2,2,2], pos = 1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000], pos = 9",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = 7",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,2,3,4,5,6,7,8,9,10], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [0,-1,-2,-3,-4,-5,-6], pos = 6",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40], pos = 20",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5], pos = 8",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [5,4,3,2,1,0,-1,-2,-3,-4,-5], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000], pos = 7",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], pos = 20",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [5,4,3,2,1], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], pos = 7",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2], pos = 1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15], pos = 8",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [100,99,98,97,96,95,94,93,92,91,90], pos = 10",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [5,4,3,2,1,0,-1,-2,-3,-4,-5], pos = 9",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,20,30,40,50,60,70,80,90,100], pos = 5",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29], pos = 7",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [5,5,5,5,5,5,5,5,5,5], pos = 5",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,3,2,4,5,6,7,8,9,10], pos = 8",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], pos = 19",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [0,0,0,0,0,0,0,0,0,0], pos = 4",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], pos = 50",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = 8",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], pos = 15",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,-20,30,40,50,60,70,80,90,100], pos = 5",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], pos = 7",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], pos = 25",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], pos = 10",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500], pos = 7",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = 1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], pos = 15",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10], pos = 9",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,3,5,7,9,11,13,15,17,19,21], pos = 10",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [-1,-7,7,-4,19,6,-9,-5,-2,-5], pos = 6",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1], pos = 1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,3,4,2,2], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [0], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [5,4,3,2,1], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1,1], pos = 4",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1], pos = 4",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2]",
        "output": "False"
      },
      {
        "input": "head = [1,3,4,5,6,1,3], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1,1,1,1,1,1], pos = 7",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,3,2], pos = 1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,20,30,40,50], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1]",
        "output": "False"
      },
      {
        "input": "head = [-1,-2,-3,-4,-5], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [0], pos = -1",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1,1], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12], pos = 11",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [0,1,2,3,4,5,6,7,8,9], pos = 5",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = []",
        "output": "False"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,11,12], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5], pos = 4",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10,1]",
        "output": "False"
      },
      {
        "input": "head = [3,2,0,-4]",
        "output": "False"
      },
      {
        "input": "head = [1,2,3,4,5,6,7,8,9,10]",
        "output": "False"
      },
      {
        "input": "head = [2,2,2,2], pos = 2",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], pos = 4",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [10,9,8,7,6,5,4,3,2,1], pos = 3",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      },
      {
        "input": "head = [1,1,1,1], pos = 0",
        "output": "Error: Solution.hasCycle() got an unexpected keyword argument 'pos'"
      }
    ]
  },
  {
    "id": 563,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, return the sum of every tree node's tilt.\nThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.\n\u00a0\nExample 1:\n\n\nInput: root = [1,2,3]\nOutput: 1\nExplanation: \nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1\n\nExample 2:\n\n\nInput: root = [4,2,9,3,5,null,7]\nOutput: 15\nExplanation: \nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\n\nExample 3:\n\n\nInput: root = [21,7,14,1,1,2,2,3,3]\nOutput: 9\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-1000 <= Node.val <= 1000\n\n",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findTilt(self, root: Optional[TreeNode]) -> int:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3]",
        "output": "1"
      },
      {
        "input": "root = [21,7,14,1,1,2,2,3,3]",
        "output": "9"
      },
      {
        "input": "root = [10,5,15,3,7,null,18]",
        "output": "40"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,null,null,7,null,8,9]",
        "output": "55"
      },
      {
        "input": "root = [4,2,9,3,5,null,7]",
        "output": "15"
      },
      {
        "input": "root = [1,2]",
        "output": "2"
      },
      {
        "input": "root = [1, null, 2, null, 3]",
        "output": "8"
      },
      {
        "input": "root = [1,null,2]",
        "output": "2"
      },
      {
        "input": "root = [1,null,2,null,3]",
        "output": "8"
      },
      {
        "input": "root = [0]",
        "output": "0"
      },
      {
        "input": "root = [1,null,2,null,3,null,4]",
        "output": "20"
      },
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "41"
      },
      {
        "input": "root = [1]",
        "output": "0"
      },
      {
        "input": "root = []",
        "output": "0"
      },
      {
        "input": "root = [1,2,3,null,null,4,null,null,5,6,null,7,null,null,8]",
        "output": "131"
      },
      {
        "input": "root = [1000,-1000,500,null,null,-250,250]",
        "output": "2000"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "330"
      },
      {
        "input": "root = [5,3,9,1,4,8,10,0,2,null,null,null,null,6,11]",
        "output": "61"
      },
      {
        "input": "root = [10,9,8,7,6,5,4,3,2,1]",
        "output": "19"
      },
      {
        "input": "root = [1000,-1000,1000,-1000,1000,-1000,1000,-1000,1000,-1000,1000,-1000,1000,-1000,1000]",
        "output": "14000"
      },
      {
        "input": "root = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]",
        "output": "35"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,16,17,18,19,20,21,22,23,24,25]",
        "output": "441"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]",
        "output": "647"
      },
      {
        "input": "root = [1,2,3,null,null,4,5,null,null,null,null,6,7,8,9]",
        "output": "11"
      },
      {
        "input": "root = [1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1]",
        "output": "14"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]",
        "output": "167"
      },
      {
        "input": "root = [1,2,2,3,3,null,null,4,4,5,5,null,null,6,6,7,7,null,null,8,8,9,9,null,null,10,10]",
        "output": "216"
      },
      {
        "input": "root = [100,-50,50,25,-25,25,-25,12,-12,12,-12,12,-12,12,-12]",
        "output": "296"
      },
      {
        "input": "root = [1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]",
        "output": "114"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,null,null,6,9]",
        "output": "43"
      },
      {
        "input": "root = [1,2,3,4,null,6,7,8,null,10,null,12,null,14]",
        "output": "97"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "1120"
      },
      {
        "input": "root = [50,25,75,10,40,60,90,5,15,30,45,55,65,80,100]",
        "output": "585"
      },
      {
        "input": "root = [0,1,-1,2,-2,3,-3,4,-4,5,-5,6,-6,7,-7]",
        "output": "56"
      },
      {
        "input": "root = [1,null,null,2,null,null,3,null,null,4,null,null,5,null,null,6]",
        "output": "0"
      },
      {
        "input": "root = [10,5,15,3,7,null,18,1,null,6,null,16,null,17]",
        "output": "109"
      },
      {
        "input": "root = [1,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11]",
        "output": "440"
      },
      {
        "input": "root = [10,5,-3,3,2,null,11,3,-2,null,1,null,null,-1,null,null,null,null,null]",
        "output": "20"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,16]",
        "output": "57"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "35"
      },
      {
        "input": "root = [100,-50,-50,30,20,10,-10,2,8,-2,-8,1,-1,0,0]",
        "output": "114"
      },
      {
        "input": "root = [0,1,1,2,2,2,2,3,3,3,3,3,3,3,3]",
        "output": "0"
      },
      {
        "input": "root = [20,10,30,5,15,25,35,-1,3,8,18,23,27,32,38]",
        "output": "240"
      },
      {
        "input": "root = [100,90,90,80,null,null,80,70,null,null,70,60,null,null,60,50,null,null,50,40,null,null,40,30,null,null,30,20,null,null,20,10,null,null,10]",
        "output": "2400"
      },
      {
        "input": "root = [-10,15,-3,7,-8,null,null,6,4]",
        "output": "54"
      },
      {
        "input": "root = [1000,-1000,500,250,-250,0,0,125,-125,62,-62,31,-31,15,-15,7,-7,3,-3,1,-1]",
        "output": "2488"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]",
        "output": "87"
      },
      {
        "input": "root = [20,15,25,10,17,22,30,null,null,13,19,null,null,21,24,27,33]",
        "output": "227"
      },
      {
        "input": "root = [10,9,8,7,6,5,4,3,2,1,-1,-2,-3,-4,-5]",
        "output": "40"
      },
      {
        "input": "root = [1000,-500,-500,250,250,-250,-250,125,125,125,125,-125,-125,-125,-125]",
        "output": "2000"
      },
      {
        "input": "root = [1,2,3,4,5,null,6,7,null,null,null,null,8,9,10]",
        "output": "94"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "163"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "167"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
        "output": "35"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,null,null,16,17,18,19,20,21,22,23,24,25,-1]",
        "output": "533"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "215"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]",
        "output": "928"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "root = [5,3,6,2,4,null,null,1,null,null,null,null,null,null,8]",
        "output": "6"
      },
      {
        "input": "root = [-10,-20,-30,-40,null,-50,-60,-70,null,-80,-90]",
        "output": "530"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,1,2,3,4,5,6,7,8]",
        "output": "107"
      },
      {
        "input": "root = [20,-10,10,null,5,5,null,3,null,2]",
        "output": "39"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,16,17,18,19,20,21,22,23,24,25,-1,26,27,28,29,30,-1]",
        "output": "35"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]",
        "output": "155"
      },
      {
        "input": "root = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]",
        "output": "35"
      },
      {
        "input": "root = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "159"
      },
      {
        "input": "root = [1,-2,-3,1,3,-2,null,-1,null,null,-1]",
        "output": "11"
      },
      {
        "input": "root = [9,4,20,null,null,15,17,12,null,6,18,null,13,7,null,null,null,null,null,null]",
        "output": "162"
      },
      {
        "input": "root = [1,2,2,3,null,3,null,4,null,4,null,5,null,5,null,6,null,6,null,7,null,7,null,8,null,8,null,9,null,9,null,10,null,10]",
        "output": "552"
      },
      {
        "input": "root = [1000,-1000,1000,-1000,1000,-1000,1000]",
        "output": "6000"
      },
      {
        "input": "root = [100,-100,200,-200,300,-300,400]",
        "output": "1500"
      },
      {
        "input": "root = [3,9,20,null,null,15,7,null,null,25,15,null,null,null,null,30,null]",
        "output": "115"
      },
      {
        "input": "root = [1,-2,-3,-4,-5,4,5,6,7,8,9,10,11,12,13]",
        "output": "45"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15]",
        "output": "301"
      },
      {
        "input": "root = [5,3,8,1,4,7,9,null,2,null,null,null,null,null,6]",
        "output": "37"
      },
      {
        "input": "root = [5,14,3,7,13,null,null,5,9,null,null,4,10,null,null,2,8,11,12]",
        "output": "216"
      },
      {
        "input": "root = [1,2,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10]",
        "output": "132"
      },
      {
        "input": "root = [15,10,20,8,12,16,25,4,9,11,13,17,21,24,27]",
        "output": "134"
      },
      {
        "input": "root = [-1,-2,-3,-4,null,-5,-6,-7,null,-8,null,-9,null,-10]",
        "output": "75"
      },
      {
        "input": "root = [10,5,-3,3,2,null,11,3,-2,null,1]",
        "output": "22"
      },
      {
        "input": "root = [5,3,6,2,4,null,null,1,null,null,null,null,7]",
        "output": "32"
      },
      {
        "input": "root = [100,90,80,70,60,50,40,30,20,10,0,-10,-20,-30,-40,-50,-60,-70,-80,-90,-100]",
        "output": "590"
      },
      {
        "input": "root = [1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "20"
      },
      {
        "input": "root = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "20"
      },
      {
        "input": "root = [10,5,-3,3,2,null,11,3,-2,null,1,null,null,null,null,8]",
        "output": "44"
      },
      {
        "input": "root = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "0"
      },
      {
        "input": "root = [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9,null,10,null,11,null,12,null,13,null,14,null,15,null,16,null,17,null,18,null,19]",
        "output": "2280"
      },
      {
        "input": "root = [1,2,3,4,null,5,6,null,7,8,null,9,10,11,null,12,null,13,14,null,15,16,17,null,18,null,19]",
        "output": "437"
      }
    ]
  },
  {
    "id": 119,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Dynamic Programming"
    ],
    "problemDescription": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n\n\u00a0\nExample 1:\nInput: rowIndex = 3\nOutput: [1,3,3,1]\nExample 2:\nInput: rowIndex = 0\nOutput: [1]\nExample 3:\nInput: rowIndex = 1\nOutput: [1,1]\n\n\u00a0\nConstraints:\n\n0 <= rowIndex <= 33\n\n\u00a0\nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?\n",
    "starterCode": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "rowIndex = 0",
        "output": "[1]"
      },
      {
        "input": "rowIndex = 10",
        "output": "[1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]"
      },
      {
        "input": "rowIndex = 15",
        "output": "[1, 15, 105, 455, 1365, 3003, 5005, 6435, 6435, 5005, 3003, 1365, 455, 105, 15, 1]"
      },
      {
        "input": "rowIndex = 1",
        "output": "[1, 1]"
      },
      {
        "input": "rowIndex = 3",
        "output": "[1, 3, 3, 1]"
      },
      {
        "input": "rowIndex = 20",
        "output": "[1, 20, 190, 1140, 4845, 15504, 38760, 77520, 125970, 167960, 184756, 167960, 125970, 77520, 38760, 15504, 4845, 1140, 190, 20, 1]"
      },
      {
        "input": "rowIndex = 5",
        "output": "[1, 5, 10, 10, 5, 1]"
      },
      {
        "input": "rowIndex = 33",
        "output": "[1, 33, 528, 5456, 40920, 237336, 1107568, 4272048, 13884156, 38567100, 92561040, 193536720, 354817320, 573166440, 818809200, 1037158320, 1166803110, 1166803110, 1037158320, 818809200, 573166440, 354817320, 193536720, 92561040, 38567100, 13884156, 4272048, 1107568, 237336, 40920, 5456, 528, 33, 1]"
      },
      {
        "input": "rowIndex = 11",
        "output": "[1, 11, 55, 165, 330, 462, 462, 330, 165, 55, 11, 1]"
      },
      {
        "input": "rowIndex = 7",
        "output": "[1, 7, 21, 35, 35, 21, 7, 1]"
      },
      {
        "input": "rowIndex = 8",
        "output": "[1, 8, 28, 56, 70, 56, 28, 8, 1]"
      },
      {
        "input": "rowIndex = 30",
        "output": "[1, 30, 435, 4060, 27405, 142506, 593775, 2035800, 5852925, 14307150, 30045015, 54627300, 86493225, 119759850, 145422675, 155117520, 145422675, 119759850, 86493225, 54627300, 30045015, 14307150, 5852925, 2035800, 593775, 142506, 27405, 4060, 435, 30, 1]"
      },
      {
        "input": "rowIndex = 25",
        "output": "[1, 25, 300, 2300, 12650, 53130, 177100, 480700, 1081575, 2042975, 3268760, 4457400, 5200300, 5200300, 4457400, 3268760, 2042975, 1081575, 480700, 177100, 53130, 12650, 2300, 300, 25, 1]"
      },
      {
        "input": "rowIndex = 16",
        "output": "[1, 16, 120, 560, 1820, 4368, 8008, 11440, 12870, 11440, 8008, 4368, 1820, 560, 120, 16, 1]"
      },
      {
        "input": "rowIndex = 29",
        "output": "[1, 29, 406, 3654, 23751, 118755, 475020, 1560780, 4292145, 10015005, 20030010, 34597290, 51895935, 67863915, 77558760, 77558760, 67863915, 51895935, 34597290, 20030010, 10015005, 4292145, 1560780, 475020, 118755, 23751, 3654, 406, 29, 1]"
      },
      {
        "input": "rowIndex = 22",
        "output": "[1, 22, 231, 1540, 7315, 26334, 74613, 170544, 319770, 497420, 646646, 705432, 646646, 497420, 319770, 170544, 74613, 26334, 7315, 1540, 231, 22, 1]"
      },
      {
        "input": "rowIndex = 12",
        "output": "[1, 12, 66, 220, 495, 792, 924, 792, 495, 220, 66, 12, 1]"
      },
      {
        "input": "rowIndex = 28",
        "output": "[1, 28, 378, 3276, 20475, 98280, 376740, 1184040, 3108105, 6906900, 13123110, 21474180, 30421755, 37442160, 40116600, 37442160, 30421755, 21474180, 13123110, 6906900, 3108105, 1184040, 376740, 98280, 20475, 3276, 378, 28, 1]"
      },
      {
        "input": "rowIndex = 18",
        "output": "[1, 18, 153, 816, 3060, 8568, 18564, 31824, 43758, 48620, 43758, 31824, 18564, 8568, 3060, 816, 153, 18, 1]"
      },
      {
        "input": "rowIndex = 27",
        "output": "[1, 27, 351, 2925, 17550, 80730, 296010, 888030, 2220075, 4686825, 8436285, 13037895, 17383860, 20058300, 20058300, 17383860, 13037895, 8436285, 4686825, 2220075, 888030, 296010, 80730, 17550, 2925, 351, 27, 1]"
      }
    ]
  },
  {
    "id": 2259,
    "difficulty": "Easy",
    "tags": [
      "Greedy",
      "String",
      "Enumeration"
    ],
    "problemDescription": "You are given a string number representing a positive integer and a character digit.\nReturn the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized. The test cases are generated such that digit occurs at least once in number.\n\u00a0\nExample 1:\n\nInput: number = \"123\", digit = \"3\"\nOutput: \"12\"\nExplanation: There is only one '3' in \"123\". After removing '3', the result is \"12\".\n\nExample 2:\n\nInput: number = \"1231\", digit = \"1\"\nOutput: \"231\"\nExplanation: We can remove the first '1' to get \"231\" or remove the second '1' to get \"123\".\nSince 231 > 123, we return \"231\".\n\nExample 3:\n\nInput: number = \"551\", digit = \"5\"\nOutput: \"51\"\nExplanation: We can remove either the first or second '5' from \"551\".\nBoth result in the string \"51\".\n\n\u00a0\nConstraints:\n\n2 <= number.length <= 100\nnumber consists of digits from '1' to '9'.\ndigit is a digit from '1' to '9'.\ndigit occurs at least once in number.\n\n",
    "starterCode": "class Solution:\n    def removeDigit(self, number: str, digit: str) -> str:\n        ",
    "testCases": [
      {
        "input": "number = \"222333\", digit = \"2\"",
        "output": "22333"
      },
      {
        "input": "number = \"99999\", digit = \"9\"",
        "output": "9999"
      },
      {
        "input": "number = \"999\", digit = \"9\"",
        "output": "99"
      },
      {
        "input": "number = \"551\", digit = \"5\"",
        "output": "51"
      },
      {
        "input": "number = \"10001\", digit = \"0\"",
        "output": "1001"
      },
      {
        "input": "number = \"987654321\", digit = \"9\"",
        "output": "87654321"
      },
      {
        "input": "number = \"123456789\", digit = \"5\"",
        "output": "12346789"
      },
      {
        "input": "number = \"11111\", digit = \"1\"",
        "output": "1111"
      },
      {
        "input": "number = \"123456789123456789\", digit = \"4\"",
        "output": "12356789123456789"
      },
      {
        "input": "number = \"1000001\", digit = \"0\"",
        "output": "100001"
      },
      {
        "input": "number = \"11211\", digit = \"1\"",
        "output": "1211"
      },
      {
        "input": "number = \"123\", digit = \"3\"",
        "output": "12"
      },
      {
        "input": "number = \"111111111\", digit = \"1\"",
        "output": "11111111"
      },
      {
        "input": "number = \"1112\", digit = \"1\"",
        "output": "112"
      },
      {
        "input": "number = \"999999999\", digit = \"9\"",
        "output": "99999999"
      },
      {
        "input": "number = \"1231\", digit = \"1\"",
        "output": "231"
      },
      {
        "input": "number = \"1221\", digit = \"1\"",
        "output": "221"
      },
      {
        "input": "number = \"100000001\", digit = \"0\"",
        "output": "10000001"
      },
      {
        "input": "number = \"87654321\", digit = \"8\"",
        "output": "7654321"
      },
      {
        "input": "number = \"3141592653589793\", digit = \"1\"",
        "output": "341592653589793"
      },
      {
        "input": "number = \"123456789\", digit = \"8\"",
        "output": "12345679"
      },
      {
        "input": "number = \"987654321\", digit = \"2\"",
        "output": "98765431"
      },
      {
        "input": "number = \"1221\", digit = \"2\"",
        "output": "121"
      },
      {
        "input": "number = \"2222222\", digit = \"2\"",
        "output": "222222"
      },
      {
        "input": "number = \"1111\", digit = \"1\"",
        "output": "111"
      },
      {
        "input": "number = \"123456789\", digit = \"9\"",
        "output": "12345678"
      },
      {
        "input": "number = \"5656565656\", digit = \"6\"",
        "output": "565656565"
      },
      {
        "input": "number = \"987654321123456789\", digit = \"4\"",
        "output": "98765432112356789"
      },
      {
        "input": "number = \"123123123123\", digit = \"2\"",
        "output": "13123123123"
      },
      {
        "input": "number = \"10101010101010101010101010101010101010101010101010\", digit = \"1\"",
        "output": "1010101010101010101010101010101010101010101010100"
      },
      {
        "input": "number = \"9898989898\", digit = \"8\"",
        "output": "998989898"
      },
      {
        "input": "number = \"1122334455\", digit = \"1\"",
        "output": "122334455"
      },
      {
        "input": "number = \"333333333\", digit = \"3\"",
        "output": "33333333"
      },
      {
        "input": "number = \"1000000000\", digit = \"1\"",
        "output": "000000000"
      },
      {
        "input": "number = \"9876543210\", digit = \"5\"",
        "output": "987643210"
      },
      {
        "input": "number = \"12345654321\", digit = \"3\"",
        "output": "1245654321"
      },
      {
        "input": "number = \"112233445566778899\", digit = \"5\"",
        "output": "11223344566778899"
      },
      {
        "input": "number = \"100000000\", digit = \"0\"",
        "output": "10000000"
      },
      {
        "input": "number = \"987987987\", digit = \"7\"",
        "output": "98987987"
      },
      {
        "input": "number = \"101010101010\", digit = \"0\"",
        "output": "11010101010"
      },
      {
        "input": "number = \"5959595959\", digit = \"9\"",
        "output": "595959595"
      },
      {
        "input": "number = \"11223344556677889900\", digit = \"1\"",
        "output": "1223344556677889900"
      },
      {
        "input": "number = \"987654321123456789987654321\", digit = \"3\"",
        "output": "98765432112456789987654321"
      },
      {
        "input": "number = \"12345678901234567890\", digit = \"0\"",
        "output": "1234567891234567890"
      },
      {
        "input": "number = \"122122122\", digit = \"2\"",
        "output": "12212212"
      },
      {
        "input": "number = \"12345678901234567890\", digit = \"4\"",
        "output": "1235678901234567890"
      },
      {
        "input": "number = \"123456789101112\", digit = \"1\"",
        "output": "23456789101112"
      },
      {
        "input": "number = \"98765432109876543210\", digit = \"5\"",
        "output": "9876543210987643210"
      },
      {
        "input": "number = \"11111111111111111111111111111111111111111111111111\", digit = \"1\"",
        "output": "1111111111111111111111111111111111111111111111111"
      },
      {
        "input": "number = \"1919191919191919\", digit = \"9\"",
        "output": "191919191919191"
      },
      {
        "input": "number = \"1000000001\", digit = \"0\"",
        "output": "100000001"
      },
      {
        "input": "number = \"543219876\", digit = \"9\"",
        "output": "54321876"
      },
      {
        "input": "number = \"56789101112131415161718192021\", digit = \"1\"",
        "output": "5678910112131415161718192021"
      },
      {
        "input": "number = \"987654321987654321987654321987654321\", digit = \"8\"",
        "output": "98765432198765432198765432197654321"
      },
      {
        "input": "number = \"123412341234\", digit = \"2\"",
        "output": "13412341234"
      },
      {
        "input": "number = \"11223344556677889900\", digit = \"0\"",
        "output": "1122334455667788990"
      },
      {
        "input": "number = \"12345678901234567890123456789012345678901234567890\", digit = \"0\"",
        "output": "1234567891234567890123456789012345678901234567890"
      },
      {
        "input": "number = \"1919191919\", digit = \"9\"",
        "output": "191919191"
      },
      {
        "input": "number = \"1919191919191919191919191919191919191919191919191\", digit = \"9\"",
        "output": "191919191919191919191919191919191919191919191911"
      },
      {
        "input": "number = \"9999999999\", digit = \"9\"",
        "output": "999999999"
      },
      {
        "input": "number = \"543219876987654321\", digit = \"9\"",
        "output": "54321987687654321"
      },
      {
        "input": "number = \"987654321123456789\", digit = \"1\"",
        "output": "98765432123456789"
      },
      {
        "input": "number = \"3131313131\", digit = \"1\"",
        "output": "331313131"
      },
      {
        "input": "number = \"555555555555555555555\", digit = \"5\"",
        "output": "55555555555555555555"
      },
      {
        "input": "number = \"123456789876543210987654321\", digit = \"9\"",
        "output": "12345678987654321087654321"
      },
      {
        "input": "number = \"9999999999999999999\", digit = \"9\"",
        "output": "999999999999999999"
      },
      {
        "input": "number = \"1212121212\", digit = \"2\"",
        "output": "121212121"
      },
      {
        "input": "number = \"12345123451234512345\", digit = \"4\"",
        "output": "1235123451234512345"
      },
      {
        "input": "number = \"91827364591827364591\", digit = \"1\"",
        "output": "9827364591827364591"
      },
      {
        "input": "number = \"567567567\", digit = \"7\"",
        "output": "56756756"
      },
      {
        "input": "number = \"999888777666555444333222111\", digit = \"9\"",
        "output": "99888777666555444333222111"
      },
      {
        "input": "number = \"10000000001\", digit = \"0\"",
        "output": "1000000001"
      },
      {
        "input": "number = \"876543210\", digit = \"0\"",
        "output": "87654321"
      },
      {
        "input": "number = \"5645645645645645645645645645645645645645645645645\", digit = \"5\"",
        "output": "645645645645645645645645645645645645645645645645"
      },
      {
        "input": "number = \"1234321\", digit = \"3\"",
        "output": "124321"
      },
      {
        "input": "number = \"123456789123456789123456789\", digit = \"8\"",
        "output": "12345679123456789123456789"
      },
      {
        "input": "number = \"123123123123123\", digit = \"1\"",
        "output": "23123123123123"
      },
      {
        "input": "number = \"5656565656\", digit = \"5\"",
        "output": "656565656"
      },
      {
        "input": "number = \"20202020202020202020202020202020202020202020202020\", digit = \"2\"",
        "output": "2020202020202020202020202020202020202020202020200"
      },
      {
        "input": "number = \"2345678901234567890\", digit = \"0\"",
        "output": "234567891234567890"
      },
      {
        "input": "number = \"918273645\", digit = \"9\"",
        "output": "18273645"
      },
      {
        "input": "number = \"12233445566778899\", digit = \"9\"",
        "output": "1223344556677889"
      },
      {
        "input": "number = \"5555555555555555555\", digit = \"5\"",
        "output": "555555555555555555"
      },
      {
        "input": "number = \"101010101\", digit = \"0\"",
        "output": "11010101"
      },
      {
        "input": "number = \"999999999999999999999\", digit = \"9\"",
        "output": "99999999999999999999"
      },
      {
        "input": "number = \"8765432109876543210\", digit = \"5\"",
        "output": "876543210987643210"
      },
      {
        "input": "number = \"33333333333333333333333333333333333333333333333333\", digit = \"3\"",
        "output": "3333333333333333333333333333333333333333333333333"
      },
      {
        "input": "number = \"98765432109876543210\", digit = \"6\"",
        "output": "9876543210987543210"
      },
      {
        "input": "number = \"100000000000000000000\", digit = \"0\"",
        "output": "10000000000000000000"
      },
      {
        "input": "number = \"12345678901234567890\", digit = \"7\"",
        "output": "1234568901234567890"
      },
      {
        "input": "number = \"3232323232323232\", digit = \"3\"",
        "output": "323232323232322"
      },
      {
        "input": "number = \"123456789\", digit = \"2\"",
        "output": "13456789"
      },
      {
        "input": "number = \"19191919191919191919\", digit = \"9\"",
        "output": "1919191919191919191"
      },
      {
        "input": "number = \"123123123\", digit = \"1\"",
        "output": "23123123"
      },
      {
        "input": "number = \"5645645645645645645645645645645645645645645645645\", digit = \"6\"",
        "output": "564564564564564564564564564564564564564564564545"
      },
      {
        "input": "number = \"123987654321987654321987654321\", digit = \"9\"",
        "output": "12398765432198765432187654321"
      },
      {
        "input": "number = \"1212121212121212121\", digit = \"2\"",
        "output": "121212121212121211"
      },
      {
        "input": "number = \"123123123123123123123\", digit = \"3\"",
        "output": "12312312312312312312"
      },
      {
        "input": "number = \"11111111111111111111\", digit = \"1\"",
        "output": "1111111111111111111"
      },
      {
        "input": "number = \"112233445566778899\", digit = \"1\"",
        "output": "12233445566778899"
      },
      {
        "input": "number = \"2222222222222222222222222222222\", digit = \"2\"",
        "output": "222222222222222222222222222222"
      },
      {
        "input": "number = \"123987654321987654321987654321\", digit = \"1\"",
        "output": "23987654321987654321987654321"
      },
      {
        "input": "number = \"987654321987654321\", digit = \"9\"",
        "output": "98765432187654321"
      },
      {
        "input": "number = \"11111111111111111111111111111111111111111111\", digit = \"1\"",
        "output": "1111111111111111111111111111111111111111111"
      },
      {
        "input": "number = \"9999999999999999999999999999999999999999999999999\", digit = \"9\"",
        "output": "999999999999999999999999999999999999999999999999"
      },
      {
        "input": "number = \"111222333444555666777888999\", digit = \"3\"",
        "output": "11122233444555666777888999"
      },
      {
        "input": "number = \"23333332\", digit = \"3\"",
        "output": "2333332"
      },
      {
        "input": "number = \"22222222222222222222222222222222222222222222\", digit = \"2\"",
        "output": "2222222222222222222222222222222222222222222"
      },
      {
        "input": "number = \"99999999991\", digit = \"9\"",
        "output": "9999999991"
      },
      {
        "input": "number = \"333333\", digit = \"3\"",
        "output": "33333"
      },
      {
        "input": "number = \"123456789123456789123456789\", digit = \"9\"",
        "output": "12345678912345678912345678"
      },
      {
        "input": "number = \"123412341234\", digit = \"1\"",
        "output": "23412341234"
      },
      {
        "input": "number = \"987654321123456789\", digit = \"9\"",
        "output": "98765432112345678"
      },
      {
        "input": "number = \"543212345\", digit = \"2\"",
        "output": "54321345"
      },
      {
        "input": "number = \"1111111111\", digit = \"1\"",
        "output": "111111111"
      },
      {
        "input": "number = \"432143214321\", digit = \"2\"",
        "output": "43214321431"
      },
      {
        "input": "number = \"12233445566778899\", digit = \"1\"",
        "output": "2233445566778899"
      },
      {
        "input": "number = \"5555555555555555555555555555555555555555555555555\", digit = \"5\"",
        "output": "555555555555555555555555555555555555555555555555"
      },
      {
        "input": "number = \"9876543210123456789\", digit = \"9\"",
        "output": "987654321012345678"
      },
      {
        "input": "number = \"11112222\", digit = \"2\"",
        "output": "1111222"
      },
      {
        "input": "number = \"31415926535\", digit = \"1\"",
        "output": "3415926535"
      },
      {
        "input": "number = \"1234567890987654321\", digit = \"5\"",
        "output": "123467890987654321"
      },
      {
        "input": "number = \"98877665544332211\", digit = \"8\"",
        "output": "9877665544332211"
      },
      {
        "input": "number = \"1000000000\", digit = \"0\"",
        "output": "100000000"
      },
      {
        "input": "number = \"2468135791113151719\", digit = \"1\"",
        "output": "246835791113151719"
      },
      {
        "input": "number = \"12345678987654321\", digit = \"7\"",
        "output": "1234568987654321"
      }
    ]
  },
  {
    "id": 350,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Binary Search",
      "Sorting"
    ],
    "problemDescription": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n\u00a0\nExample 1:\n\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\n\nExample 2:\n\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.\n\n\u00a0\nConstraints:\n\n1 <= nums1.length, nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 1000\n\n\u00a0\nFollow up:\n\nWhat if the given array is already sorted? How would you optimize your algorithm?\nWhat if nums1's size is small compared to nums2's size? Which algorithm is better?\nWhat if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\n\n",
    "starterCode": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [50,40,30,20,10]",
        "output": "[50, 40, 30, 20, 10]"
      },
      {
        "input": "nums1 = [100,200,300], nums2 = [300,200,100]",
        "output": "[300, 200, 100]"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3], nums2 = [3,3,3,3,1,1]",
        "output": "[3, 3, 1, 1]"
      },
      {
        "input": "nums1 = [1,3,5,7], nums2 = [2,4,6,8]",
        "output": "[]"
      },
      {
        "input": "nums1 = [0,0,0,0], nums2 = [0,0,0,0]",
        "output": "[0, 0, 0, 0]"
      },
      {
        "input": "nums1 = [0,0,0], nums2 = [0,0,0,0]",
        "output": "[0, 0, 0]"
      },
      {
        "input": "nums1 = [1000,1000,1000], nums2 = [1000,1000,1000]",
        "output": "[1000, 1000, 1000]"
      },
      {
        "input": "nums1 = [1,1,2,2], nums2 = [2,2,2,2]",
        "output": "[2, 2]"
      },
      {
        "input": "nums1 = [10,20,30,40], nums2 = [30,40,50,60]",
        "output": "[30, 40]"
      },
      {
        "input": "nums1 = [1,3,5,7,9], nums2 = [2,4,6,8,10]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1000], nums2 = [1000]",
        "output": "[1000]"
      },
      {
        "input": "nums1 = [1,3,2,4], nums2 = [3,2,2,1]",
        "output": "[3, 2, 1]"
      },
      {
        "input": "nums1 = [1000,1000], nums2 = [1000,1000,1000]",
        "output": "[1000, 1000]"
      },
      {
        "input": "nums1 = [], nums2 = []",
        "output": "[]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [1,2,2,1], nums2 = [2,2]",
        "output": "[2, 2]"
      },
      {
        "input": "nums1 = [1000,1000,1000], nums2 = [1000,1000]",
        "output": "[1000, 1000]"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [5,5,5,5,5]",
        "output": "[5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [7,8,9], nums2 = [10,11,12]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1], nums2 = [2]",
        "output": "[]"
      },
      {
        "input": "nums1 = [4,9,5], nums2 = [9,4,9,8,4]",
        "output": "[9, 4]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [1,1,1,1,1], nums2 = [1,1,1]",
        "output": "[1, 1, 1]"
      },
      {
        "input": "nums1 = [1,1,1,1], nums2 = [1,1]",
        "output": "[1, 1]"
      },
      {
        "input": "nums1 = [5,5,5,5,5], nums2 = [5,5,5,5]",
        "output": "[5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [1,2,3], nums2 = [4,5,6]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1,1,1,1], nums2 = [1,1,1]",
        "output": "[1, 1, 1]"
      },
      {
        "input": "nums1 = [1], nums2 = [1]",
        "output": "[1]"
      },
      {
        "input": "nums1 = [999,998,997,996,995,994,993,992,991,990], nums2 = [1,2,3,4,5,6,7,8,9,10,999,998,997]",
        "output": "[999, 998, 997]"
      },
      {
        "input": "nums1 = [999,998,997,996,995,994,993,992,991,990], nums2 = [990,991,992,993,994,995,996,997,998,999,999,998,997,996,995,994,993,992,991,990]",
        "output": "[990, 991, 992, 993, 994, 995, 996, 997, 998, 999]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [5, 5, 6, 6, 7, 7, 8, 8]",
        "output": "[5, 6, 7, 8]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [2,4,6,8,10,12,14,16,18,20]",
        "output": "[2, 4, 6, 8, 10]"
      },
      {
        "input": "nums1 = [500, 500, 500, 500], nums2 = [500, 500, 500, 500, 500, 500, 500]",
        "output": "[500, 500, 500, 500]"
      },
      {
        "input": "nums1 = [1,1,2,2,2,3,3,3,3,4,4,4,4,4], nums2 = [1,2,2,3,3,3,4,4]",
        "output": "[1, 2, 2, 3, 3, 3, 4, 4]"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19], nums2 = [2,3,5,7,11,13,17,19,23,29]",
        "output": "[3, 5, 7, 11, 13, 17, 19]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [50,40,30,20,10,10]",
        "output": "[50, 40, 30, 20, 10]"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [0,0,0,0,0,0,0,0,0,0], nums2 = [0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [11,12,13,14,15]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], nums2 = [11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]",
        "output": "[11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[10, 11, 12, 13, 14, 15]"
      },
      {
        "input": "nums1 = [1,1,2,2,2,3,3,4,4,5], nums2 = [2,2,2,3,3,3,4,4,4,5,5,5]",
        "output": "[2, 2, 2, 3, 3, 4, 4, 5]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1]",
        "output": "[1]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
        "output": "[5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [15, 20, 25, 30, 35, 40, 45, 50]",
        "output": "[20, 30, 40, 50]"
      },
      {
        "input": "nums1 = [100,200,300,400,500,600,700,800,900,1000], nums2 = [150,250,350,450,550,650,750,850,950]",
        "output": "[]"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [10,20,30,40,50,60,70,80,90,100]",
        "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], nums2 = [2,4,6,8,10,12,14]",
        "output": "[2, 4, 6, 8, 10, 12, 14]"
      },
      {
        "input": "nums1 = [100,200,300,400,500,600,700,800,900,1000], nums2 = [100,200,300,400,500,600,700,800,900,1000]",
        "output": "[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [10,20,30,40,50,60,70,80,90,100,10,20,30,40,50,60,70,80,90,100]",
        "output": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [3, 4, 5, 6, 7]",
        "output": "[3, 4, 5]"
      },
      {
        "input": "nums1 = [999,998,997,996,995,994,993,992,991,990], nums2 = [990,991,992,993,994,995,996,997,998,999]",
        "output": "[990, 991, 992, 993, 994, 995, 996, 997, 998, 999]"
      },
      {
        "input": "nums1 = [3,4,4,5,6,7,8,8,9], nums2 = [4,4,8,9,10]",
        "output": "[4, 4, 8, 9]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], nums2 = [1,3,5,7,9,11,13,15,17,19]",
        "output": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
      },
      {
        "input": "nums1 = [7, 7, 8, 8, 9, 9], nums2 = [7, 7, 7, 8, 8, 8, 9, 9, 9]",
        "output": "[7, 7, 8, 8, 9, 9]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [100, 200, 300, 400, 500]",
        "output": "[100, 200, 300, 400, 500]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], nums2 = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 3, 5, 7, 9]",
        "output": "[1, 3, 5, 7, 9]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [1,3,5,7,9,11,13,15,17,19]",
        "output": "[1, 3, 5, 7, 9]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5,5], nums2 = [5,5,5,5,5]",
        "output": "[5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [0, 0, 0, 0, 0], nums2 = [0, 0, 0]",
        "output": "[0, 0, 0]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4], nums2 = [1, 1, 2, 2, 3, 3, 4, 4]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4]"
      },
      {
        "input": "nums1 = [33,44,55,66,77,88,99,100], nums2 = [33,66,99,100,132,165,198,231]",
        "output": "[33, 66, 99, 100]"
      },
      {
        "input": "nums1 = [1,3,5,7,9,11,13,15,17,19], nums2 = [2,4,6,8,10,12,14,16,18,20]",
        "output": "[]"
      },
      {
        "input": "nums1 = [7,7,7,7,7], nums2 = [7,7,7,7,7,7,7]",
        "output": "[7, 7, 7, 7, 7]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9, 11, 13, 15], nums2 = [2, 4, 6, 8, 10, 12, 14, 16]",
        "output": "[]"
      },
      {
        "input": "nums1 = [100,200,300,400,500,600,700,800,900,1000], nums2 = [100,200,300,400,500]",
        "output": "[100, 200, 300, 400, 500]"
      },
      {
        "input": "nums1 = [100,200,300,400,500], nums2 = [500,400,300,200,100,500,400,300,200,100]",
        "output": "[500, 400, 300, 200, 100]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1], nums2 = [1, 2, 3, 4, 5]",
        "output": "[1]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [5, 4, 3, 2, 1]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [2, 4, 6, 8, 10]",
        "output": "[2, 4]"
      },
      {
        "input": "nums1 = [7, 8, 9], nums2 = [1, 2, 3]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5], nums2 = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [1, 2, 2, 3, 4, 5, 5], nums2 = [5, 5, 4, 3, 2, 2, 1]",
        "output": "[5, 5, 4, 3, 2, 2, 1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [10,9,8,7,6,5,4,3,2,1]",
        "output": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9], nums2 = [5,6,7,8,9,10,11,12,13]",
        "output": "[5, 6, 7, 8, 9]"
      },
      {
        "input": "nums1 = [1], nums2 = [2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], nums2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10], nums2 = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10]",
        "output": "[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]"
      },
      {
        "input": "nums1 = [1,2,3,4,5], nums2 = [5,4,3,2,1,1,2,3,4,5]",
        "output": "[5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [100,200,300,400,500], nums2 = [500,400,300,200,100,100]",
        "output": "[500, 400, 300, 200, 100]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3], nums2 = [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1]",
        "output": "[3, 3, 2, 2, 1, 1]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [1, 1, 1, 1, 1]",
        "output": "[1]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], nums2 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9]",
        "output": "[9, 8, 7, 6, 5, 4, 3, 2, 1]"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4], nums2 = [2,2,2,2,3,3,3,3]",
        "output": "[2, 2, 3, 3]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[5]"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5], nums2 = [2,2,4,4,6,6,8,8,10,10]",
        "output": "[2, 2, 4, 4]"
      },
      {
        "input": "nums1 = [5,5,5,5,5,5,5,5,5,5], nums2 = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1], nums2 = [1,1,1]",
        "output": "[1, 1, 1]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [1, 1, 1, 1]",
        "output": "[1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5], nums2 = [5,5,4,4,3,3,2,2,1,1]",
        "output": "[5, 5, 4, 4, 3, 3, 2, 2, 1, 1]"
      },
      {
        "input": "nums1 = [3,3,3,3,3,3,3,3,3,3], nums2 = [3,3,3,3,3]",
        "output": "[3, 3, 3, 3, 3]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3], nums2 = [1, 1, 1, 2, 2, 3]",
        "output": "[1, 1, 2, 2, 3]"
      },
      {
        "input": "nums1 = [0,0,0,0,0,0,0,0,0,0], nums2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "nums1 = [1, 3, 5, 7, 9], nums2 = [2, 4, 6, 8, 10]",
        "output": "[]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]",
        "output": "[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]"
      },
      {
        "input": "nums1 = [500, 500, 500, 500, 500], nums2 = [500, 500]",
        "output": "[500, 500]"
      },
      {
        "input": "nums1 = [1,2,2,3,4], nums2 = [2,2,4,4,6]",
        "output": "[2, 2, 4]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], nums2 = [100, 200, 300, 400, 500]",
        "output": "[]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500], nums2 = [500, 400, 300, 200, 100]",
        "output": "[500, 400, 300, 200, 100]"
      },
      {
        "input": "nums1 = [1,2,2,3,4,4,5,5,5,6,7,8,9,10], nums2 = [2,2,4,4,5,5,5,10,11,12]",
        "output": "[2, 2, 4, 4, 5, 5, 5, 10]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10], nums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [1, 2, 2, 3, 3, 4], nums2 = [2, 2, 3, 5]",
        "output": "[2, 2, 3]"
      },
      {
        "input": "nums1 = [0,0,0,0,0,0,0,0,0,0], nums2 = [0,0,0,0,0,0,0,0,0,0]",
        "output": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
      },
      {
        "input": "nums1 = [2,4,6,8,10,12,14,16,18,20], nums2 = [1,3,5,7,9,11,13,15,17,19]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1,1,2,2,3,3,4,4,5,5], nums2 = [1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60], nums2 = [15,25,35,45,55,65]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [11,12,13,14,15,16,17,18,19,20]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1, 2, 3, 4, 5], nums2 = [6, 7, 8, 9, 10]",
        "output": "[]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [5,6,7,8,9,10,11,12,13,14]",
        "output": "[5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [7, 7, 7, 8, 8, 9], nums2 = [8, 7, 9, 7, 7, 10]",
        "output": "[8, 7, 9, 7, 7]"
      },
      {
        "input": "nums1 = [5, 5, 5, 5, 5], nums2 = [5, 5, 5]",
        "output": "[5, 5, 5]"
      },
      {
        "input": "nums1 = [10,20,30,40,50], nums2 = [5,15,25,35,45,55]",
        "output": "[]"
      },
      {
        "input": "nums1 = [234,456,789,123,567,890,111,222,333,444], nums2 = [111,222,333,444,555,666,777,888,999,123]",
        "output": "[111, 222, 333, 444, 123]"
      },
      {
        "input": "nums1 = [3,3,3,3,3], nums2 = [3,3,3]",
        "output": "[3, 3, 3]"
      },
      {
        "input": "nums1 = [10,20,30,40,50,60,70,80,90,100], nums2 = [50,60,70,80,90,100,110,120,130,140]",
        "output": "[50, 60, 70, 80, 90, 100]"
      },
      {
        "input": "nums1 = [1,1,1,1,1,1,1,1,1,1], nums2 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10], nums2 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      },
      {
        "input": "nums1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], nums2 = [2, 2, 2, 2]",
        "output": "[]"
      },
      {
        "input": "nums1 = [100,200,300,400,500], nums2 = [500,400,300,200,100]",
        "output": "[500, 400, 300, 200, 100]"
      },
      {
        "input": "nums1 = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5], nums2 = [1,2,3,4,5,1,2,3,4,5]",
        "output": "[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]"
      },
      {
        "input": "nums1 = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109], nums2 = [100, 101, 102, 103, 104, 105, 106, 107, 108, 109]",
        "output": "[100, 101, 102, 103, 104, 105, 106, 107, 108, 109]"
      },
      {
        "input": "nums1 = [10, 20, 30, 40, 50], nums2 = [50, 40, 30, 20, 10]",
        "output": "[50, 40, 30, 20, 10]"
      },
      {
        "input": "nums1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30], nums2 = [5,10,15,20,25,30]",
        "output": "[5, 10, 15, 20, 25, 30]"
      },
      {
        "input": "nums1 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], nums2 = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]",
        "output": "[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]"
      },
      {
        "input": "nums1 = [1, 1, 2, 2, 3, 3], nums2 = [1, 2, 3, 4, 5, 6]",
        "output": "[1, 2, 3]"
      },
      {
        "input": "nums1 = [5, 1, 3, 3, 2, 4], nums2 = [3, 2, 2, 5, 1]",
        "output": "[3, 2, 5, 1]"
      },
      {
        "input": "nums1 = [500,500,500,500,500], nums2 = [500,500,500,500,500,500,500,500,500,500]",
        "output": "[500, 500, 500, 500, 500]"
      }
    ]
  },
  {
    "id": 2418,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "String",
      "Sorting"
    ],
    "problemDescription": "You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.\nFor each index i, names[i] and heights[i] denote the name and height of the ith person.\nReturn names sorted in descending order by the people's heights.\n\u00a0\nExample 1:\n\nInput: names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]\nOutput: [\"Mary\",\"Emma\",\"John\"]\nExplanation: Mary is the tallest, followed by Emma and John.\n\nExample 2:\n\nInput: names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]\nOutput: [\"Bob\",\"Alice\",\"Bob\"]\nExplanation: The first Bob is the tallest, followed by Alice and the second Bob.\n\n\u00a0\nConstraints:\n\nn == names.length == heights.length\n1 <= n <= 103\n1 <= names[i].length <= 20\n1 <= heights[i] <= 105\nnames[i] consists of lower and upper case English letters.\nAll the values of heights are distinct.\n\n",
    "starterCode": "class Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        ",
    "testCases": [
      {
        "input": "names = [\"Zoe\",\"Lily\",\"Rose\"], heights = [150,145,155]",
        "output": "['Rose', 'Zoe', 'Lily']"
      },
      {
        "input": "names = [\"Qwen\",\"Alibaba\",\"Cloud\"], heights = [200,190,180]",
        "output": "['Qwen', 'Alibaba', 'Cloud']"
      },
      {
        "input": "names = [\"Ava\",\"Sophia\",\"Isabella\"], heights = [160,165,170]",
        "output": "['Isabella', 'Sophia', 'Ava']"
      },
      {
        "input": "names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]",
        "output": "['Mary', 'Emma', 'John']"
      },
      {
        "input": "names = [\"A\",\"B\",\"C\",\"D\"], heights = [150,160,170,180]",
        "output": "['D', 'C', 'B', 'A']"
      },
      {
        "input": "names = [\"Ava\",\"Ella\",\"Olivia\"], heights = [168,162,170]",
        "output": "['Olivia', 'Ava', 'Ella']"
      },
      {
        "input": "names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]",
        "output": "['Bob', 'Alice', 'Bob']"
      },
      {
        "input": "names = [\"Zoe\",\"Liam\",\"Noah\"], heights = [165,175,185]",
        "output": "['Noah', 'Liam', 'Zoe']"
      },
      {
        "input": "names = [\"Noah\",\"Liam\",\"Mason\"], heights = [185,180,175]",
        "output": "['Noah', 'Liam', 'Mason']"
      },
      {
        "input": "names = [\"Mia\",\"Ella\",\"Olivia\"], heights = [168,162,170]",
        "output": "['Olivia', 'Mia', 'Ella']"
      },
      {
        "input": "names = [\"Tom\",\"Jerry\",\"Spike\"], heights = [190,160,175]",
        "output": "['Tom', 'Spike', 'Jerry']"
      },
      {
        "input": "names = [\"Zoe\",\"Liam\",\"Noah\"], heights = [175,180,165]",
        "output": "['Liam', 'Zoe', 'Noah']"
      },
      {
        "input": "names = [\"Z\",\"Y\",\"X\"], heights = [165,175,185]",
        "output": "['X', 'Y', 'Z']"
      },
      {
        "input": "names = [\"Anna\",\"Elsa\",\"Olaf\"], heights = [170,180,160]",
        "output": "['Elsa', 'Anna', 'Olaf']"
      },
      {
        "input": "names = [\"Liam\",\"Noah\",\"Oliver\",\"Elijah\",\"James\",\"William\",\"Benjamin\"], heights = [179,178,177,176,175,174,173]",
        "output": "['Liam', 'Noah', 'Oliver', 'Elijah', 'James', 'William', 'Benjamin']"
      },
      {
        "input": "names = [\"William\",\"James\",\"Benjamin\",\"Henry\"], heights = [190,170,180,160]",
        "output": "['William', 'Benjamin', 'James', 'Henry']"
      },
      {
        "input": "names = [\"Jackson\",\"Aiden\",\"Mason\",\"Lucas\"], heights = [182,188,178,180]",
        "output": "['Aiden', 'Jackson', 'Lucas', 'Mason']"
      },
      {
        "input": "names = [\"Dominic\",\"Penelope\",\"Victor\",\"Emilia\",\"Mason\"], heights = [178,173,189,169,174]",
        "output": "['Victor', 'Dominic', 'Mason', 'Penelope', 'Emilia']"
      },
      {
        "input": "names = [\"Ezra\",\"Isabella\",\"Oliver\",\"Sophia\",\"Noah\",\"Emma\",\"James\",\"Amelia\",\"Benjamin\",\"Ava\",\"Elijah\",\"Liam\"], heights = [177,165,183,170,185,171,179,172,180,167,182,184]",
        "output": "['Noah', 'Liam', 'Oliver', 'Elijah', 'Benjamin', 'James', 'Ezra', 'Amelia', 'Emma', 'Sophia', 'Ava', 'Isabella']"
      },
      {
        "input": "names = [\"Daniel\",\"Matthew\",\"Ethan\",\"Logan\",\"Jackson\"], heights = [175,170,165,160,155]",
        "output": "['Daniel', 'Matthew', 'Ethan', 'Logan', 'Jackson']"
      },
      {
        "input": "names = [\"William\",\"James\",\"George\",\"Charles\"], heights = [188,192,178,180]",
        "output": "['James', 'William', 'Charles', 'George']"
      },
      {
        "input": "names = [\"Liam\",\"Noah\",\"Oliver\",\"Elijah\",\"William\"], heights = [180,178,175,173,170]",
        "output": "['Liam', 'Noah', 'Oliver', 'Elijah', 'William']"
      },
      {
        "input": "names = [\"Sophia\",\"Jackson\",\"Mia\",\"Logan\"], heights = [160,200,180,170]",
        "output": "['Jackson', 'Mia', 'Logan', 'Sophia']"
      },
      {
        "input": "names = [\"Amelia\",\"Olivia\",\"Emma\",\"Sophia\"], heights = [155,165,175,185]",
        "output": "['Sophia', 'Emma', 'Olivia', 'Amelia']"
      },
      {
        "input": "names = [\"Emma\",\"Noah\",\"Olivia\",\"Elijah\",\"Ava\",\"Sophia\"], heights = [173,186,168,183,170,165]",
        "output": "['Noah', 'Elijah', 'Emma', 'Ava', 'Olivia', 'Sophia']"
      },
      {
        "input": "names = [\"Levi\",\"Carter\",\"Aria\",\"Sebastian\",\"Avery\"], heights = [175,184,168,189,176]",
        "output": "['Sebastian', 'Carter', 'Avery', 'Levi', 'Aria']"
      },
      {
        "input": "names = [\"Sophia\",\"Olivia\",\"Isabella\",\"Ava\",\"Emma\"], heights = [162,178,168,173,175]",
        "output": "['Olivia', 'Emma', 'Ava', 'Isabella', 'Sophia']"
      },
      {
        "input": "names = [\"William\",\"James\",\"Oliver\",\"Noah\",\"Elijah\",\"Lucas\"], heights = [195,194,193,192,191,190]",
        "output": "['William', 'James', 'Oliver', 'Noah', 'Elijah', 'Lucas']"
      },
      {
        "input": "names = [\"Zachary\",\"Christopher\",\"Jonathan\",\"Matthew\"], heights = [195,190,180,185]",
        "output": "['Zachary', 'Christopher', 'Matthew', 'Jonathan']"
      },
      {
        "input": "names = [\"Charlie\",\"Delta\",\"Echo\",\"Foxtrot\",\"Golf\"], heights = [160,165,170,175,180]",
        "output": "['Golf', 'Foxtrot', 'Echo', 'Delta', 'Charlie']"
      },
      {
        "input": "names = [\"Ava\",\"Isabella\",\"Sophia\",\"Emma\",\"Olivia\",\"Mia\"], heights = [155,157,158,160,159,156]",
        "output": "['Emma', 'Olivia', 'Sophia', 'Isabella', 'Mia', 'Ava']"
      },
      {
        "input": "names = [\"Grace\",\"Heidi\",\"Ivy\",\"Judy\",\"Kara\"], heights = [158,168,178,188,198]",
        "output": "['Kara', 'Judy', 'Ivy', 'Heidi', 'Grace']"
      },
      {
        "input": "names = [\"Mila\",\"Aaron\",\"Jasper\",\"Sophie\"], heights = [170,160,200,180]",
        "output": "['Jasper', 'Sophie', 'Mila', 'Aaron']"
      },
      {
        "input": "names = [\"Finn\",\"Jake\",\"BMO\",\"Marceline\",\"LSP\"], heights = [160,170,155,180,150]",
        "output": "['Marceline', 'Jake', 'Finn', 'BMO', 'LSP']"
      },
      {
        "input": "names = [\"Zoe\",\"Chris\",\"Ava\",\"Ian\"], heights = [165,190,175,180]",
        "output": "['Chris', 'Ian', 'Ava', 'Zoe']"
      },
      {
        "input": "names = [\"Grace\",\"Katherine\",\"Ava\",\"Sophie\",\"Liam\"], heights = [165,172,160,170,180]",
        "output": "['Liam', 'Katherine', 'Sophie', 'Grace', 'Ava']"
      },
      {
        "input": "names = [\"Olivia\",\"Emma\",\"Ava\",\"Sophia\"], heights = [158,159,160,157]",
        "output": "['Ava', 'Emma', 'Olivia', 'Sophia']"
      },
      {
        "input": "names = [\"Evelyn\",\"Arthur\",\"Sophie\",\"Miles\"], heights = [160,190,180,175]",
        "output": "['Arthur', 'Sophie', 'Miles', 'Evelyn']"
      },
      {
        "input": "names = [\"Ethan\",\"Abigail\",\"Daniel\",\"Ella\"], heights = [185,168,195,175]",
        "output": "['Daniel', 'Ethan', 'Ella', 'Abigail']"
      },
      {
        "input": "names = [\"Ava\",\"Ella\",\"Scarlett\",\"Grace\"], heights = [185,175,165,155]",
        "output": "['Ava', 'Ella', 'Scarlett', 'Grace']"
      },
      {
        "input": "names = [\"Amelia\",\"Olivia\",\"Ava\",\"Isla\"], heights = [168,169,170,171]",
        "output": "['Isla', 'Ava', 'Olivia', 'Amelia']"
      },
      {
        "input": "names = [\"Noah\",\"Sophia\",\"Mia\",\"Ethan\"], heights = [195,180,175,170]",
        "output": "['Noah', 'Sophia', 'Mia', 'Ethan']"
      },
      {
        "input": "names = [\"Michael\",\"Jordan\",\"LeBron\",\"Stephen\",\"Kobe\"], heights = [198,206,203,191,198]",
        "output": "['Jordan', 'LeBron', 'Michael', 'Kobe', 'Stephen']"
      },
      {
        "input": "names = [\"Alex\",\"Brian\",\"Carter\",\"David\",\"Ethan\"], heights = [155,165,175,185,195]",
        "output": "['Ethan', 'David', 'Carter', 'Brian', 'Alex']"
      },
      {
        "input": "names = [\"Jonathan\",\"Katherine\",\"Lucas\",\"Mia\",\"Nina\"], heights = [175,165,180,170,160]",
        "output": "['Lucas', 'Jonathan', 'Mia', 'Katherine', 'Nina']"
      },
      {
        "input": "names = [\"Lucas\",\"Hannah\",\"Olivia\",\"Avery\"], heights = [185,168,190,175]",
        "output": "['Olivia', 'Lucas', 'Avery', 'Hannah']"
      },
      {
        "input": "names = [\"Nina\",\"Nora\",\"Nina\",\"Nora\"], heights = [160,162,158,159]",
        "output": "['Nora', 'Nina', 'Nora', 'Nina']"
      },
      {
        "input": "names = [\"Daniel\",\"Matilda\",\"Samuel\",\"Lucas\",\"Mia\",\"Emily\",\"Oliver\",\"Ava\"], heights = [182,165,178,184,170,167,190,173]",
        "output": "['Oliver', 'Lucas', 'Daniel', 'Samuel', 'Ava', 'Mia', 'Emily', 'Matilda']"
      },
      {
        "input": "names = [\"Sophia\",\"Olivia\",\"Ava\",\"Isabella\",\"Mia\"], heights = [160,165,170,175,180]",
        "output": "['Mia', 'Isabella', 'Ava', 'Olivia', 'Sophia']"
      },
      {
        "input": "names = [\"Sophia\",\"Oliver\",\"Isabella\",\"Noah\"], heights = [172,180,168,182]",
        "output": "['Noah', 'Oliver', 'Sophia', 'Isabella']"
      },
      {
        "input": "names = [\"Zoe\",\"Sophia\",\"Ava\",\"Isabella\"], heights = [163,164,165,162]",
        "output": "['Ava', 'Sophia', 'Zoe', 'Isabella']"
      },
      {
        "input": "names = [\"Oliver\",\"Amelia\",\"Evelyn\",\"Jasper\"], heights = [185,170,180,190]",
        "output": "['Jasper', 'Oliver', 'Evelyn', 'Amelia']"
      },
      {
        "input": "names = [\"Emily\",\"Emma\",\"Mia\",\"Sophia\",\"Isabella\",\"Ava\",\"Olivia\"], heights = [163,164,162,165,166,161,160]",
        "output": "['Isabella', 'Sophia', 'Emma', 'Emily', 'Mia', 'Ava', 'Olivia']"
      },
      {
        "input": "names = [\"Isabella\",\"Sophia\",\"Olivia\",\"Ava\",\"Emma\"], heights = [162,172,182,192,202]",
        "output": "['Emma', 'Ava', 'Olivia', 'Sophia', 'Isabella']"
      },
      {
        "input": "names = [\"Liam\",\"Noah\",\"Oliver\",\"Lucas\",\"Ethan\"], heights = [200,199,198,197,196]",
        "output": "['Liam', 'Noah', 'Oliver', 'Lucas', 'Ethan']"
      },
      {
        "input": "names = [\"Scarlett\",\"Ava\",\"Emma\",\"Olivia\",\"Sophia\"], heights = [175,180,170,165,185]",
        "output": "['Sophia', 'Ava', 'Scarlett', 'Emma', 'Olivia']"
      },
      {
        "input": "names = [\"Sophia\",\"Emma\",\"Ava\",\"Olivia\",\"Isabella\",\"Mia\"], heights = [169,168,167,166,165,164]",
        "output": "['Sophia', 'Emma', 'Ava', 'Olivia', 'Isabella', 'Mia']"
      },
      {
        "input": "names = [\"Benjamin\",\"Logan\",\"Jackson\",\"David\",\"Aiden\"], heights = [150,160,170,180,190]",
        "output": "['Aiden', 'David', 'Jackson', 'Logan', 'Benjamin']"
      },
      {
        "input": "names = [\"Mia\",\"Evelyn\",\"Abigail\",\"Scarlett\",\"Amelia\"], heights = [180,175,170,165,160]",
        "output": "['Mia', 'Evelyn', 'Abigail', 'Scarlett', 'Amelia']"
      },
      {
        "input": "names = [\"Camila\",\"Lincoln\",\"Madison\",\"Isaac\",\"Scarlett\"], heights = [167,187,170,182,163]",
        "output": "['Lincoln', 'Isaac', 'Madison', 'Camila', 'Scarlett']"
      },
      {
        "input": "names = [\"Sophia\",\"Isabella\",\"Olivia\",\"Ava\",\"Mia\"], heights = [162,171,168,165,169]",
        "output": "['Isabella', 'Mia', 'Olivia', 'Ava', 'Sophia']"
      },
      {
        "input": "names = [\"Theodore\",\"George\",\"Thomas\",\"James\"], heights = [175,185,180,170]",
        "output": "['George', 'Thomas', 'Theodore', 'James']"
      },
      {
        "input": "names = [\"Sam\",\"Max\",\"Leo\",\"Sam\"], heights = [185,182,179,184]",
        "output": "['Sam', 'Sam', 'Max', 'Leo']"
      },
      {
        "input": "names = [\"Charlotte\",\"Sophia\",\"Ava\",\"Isabella\"], heights = [165,170,175,180]",
        "output": "['Isabella', 'Ava', 'Sophia', 'Charlotte']"
      },
      {
        "input": "names = [\"Charlotte\",\"Amelia\",\"Evelyn\",\"Abigail\",\"Sofia\"], heights = [150,155,160,165,170]",
        "output": "['Sofia', 'Abigail', 'Evelyn', 'Amelia', 'Charlotte']"
      },
      {
        "input": "names = [\"Lily\",\"Aaron\",\"Emma\",\"Nolan\"], heights = [165,185,175,195]",
        "output": "['Nolan', 'Aaron', 'Emma', 'Lily']"
      },
      {
        "input": "names = [\"Sophia\",\"Isabella\",\"Olivia\",\"Ava\"], heights = [165,172,168,170]",
        "output": "['Isabella', 'Ava', 'Olivia', 'Sophia']"
      },
      {
        "input": "names = [\"Ethan\",\"Noah\",\"Liam\",\"Mason\"], heights = [180,185,170,175]",
        "output": "['Noah', 'Ethan', 'Mason', 'Liam']"
      },
      {
        "input": "names = [\"Alexander\",\"Sophia\",\"Benjamin\",\"Charlotte\",\"Elijah\",\"Mia\",\"James\",\"Amelia\"], heights = [180,166,175,168,183,172,178,171]",
        "output": "['Elijah', 'Alexander', 'James', 'Benjamin', 'Mia', 'Amelia', 'Charlotte', 'Sophia']"
      },
      {
        "input": "names = [\"William\",\"James\",\"Oliver\",\"Benjamin\",\"Elijah\",\"Lucas\"], heights = [187,186,185,184,183,182]",
        "output": "['William', 'James', 'Oliver', 'Benjamin', 'Elijah', 'Lucas']"
      },
      {
        "input": "names = [\"Eva\",\"Nathan\",\"Ella\",\"Samuel\",\"Sophia\"], heights = [169,179,171,186,174]",
        "output": "['Samuel', 'Nathan', 'Sophia', 'Ella', 'Eva']"
      },
      {
        "input": "names = [\"Zoe\",\"Addison\",\"Mia\",\"Hannah\",\"Abigail\"], heights = [168,167,166,165,164]",
        "output": "['Zoe', 'Addison', 'Mia', 'Hannah', 'Abigail']"
      },
      {
        "input": "names = [\"Benjamin\",\"Olivia\",\"Daniel\",\"Zachary\"], heights = [170,180,160,190]",
        "output": "['Zachary', 'Olivia', 'Benjamin', 'Daniel']"
      },
      {
        "input": "names = [\"Carter\",\"Jackson\",\"Lucas\",\"Logan\",\"Benjamin\"], heights = [190,185,180,175,170]",
        "output": "['Carter', 'Jackson', 'Lucas', 'Logan', 'Benjamin']"
      },
      {
        "input": "names = [\"Amelia\",\"Oliver\",\"Ava\",\"Noah\",\"Sophia\",\"Ethan\",\"Isabella\",\"Elijah\"], heights = [172,188,169,185,171,182,168,184]",
        "output": "['Oliver', 'Noah', 'Elijah', 'Ethan', 'Amelia', 'Sophia', 'Ava', 'Isabella']"
      },
      {
        "input": "names = [\"Michael\",\"Christopher\",\"Jessica\",\"Matthew\",\"Ashley\"], heights = [182,178,165,180,170]",
        "output": "['Michael', 'Matthew', 'Christopher', 'Ashley', 'Jessica']"
      },
      {
        "input": "names = [\"Amelia\",\"Sophia\",\"Isabella\",\"Olivia\",\"Ava\",\"Emma\"], heights = [150,151,152,153,154,155]",
        "output": "['Emma', 'Ava', 'Olivia', 'Isabella', 'Sophia', 'Amelia']"
      },
      {
        "input": "names = [\"Catherine\",\"Margaret\",\"Joan\",\"Eleanor\"], heights = [167,173,170,169]",
        "output": "['Margaret', 'Joan', 'Eleanor', 'Catherine']"
      },
      {
        "input": "names = [\"Mason\",\"Jacob\",\"William\",\"Ethan\",\"Alexander\"], heights = [155,165,175,185,195]",
        "output": "['Alexander', 'Ethan', 'William', 'Jacob', 'Mason']"
      },
      {
        "input": "names = [\"Sophia\",\"Ava\",\"Emma\",\"Isabella\",\"Olivia\",\"Mia\",\"Charlotte\"], heights = [169,168,167,166,165,164,163]",
        "output": "['Sophia', 'Ava', 'Emma', 'Isabella', 'Olivia', 'Mia', 'Charlotte']"
      },
      {
        "input": "names = [\"Scarlett\",\"Avery\",\"James\",\"Michael\",\"Evelyn\"], heights = [162,177,181,180,166]",
        "output": "['James', 'Michael', 'Avery', 'Evelyn', 'Scarlett']"
      },
      {
        "input": "names = [\"Sophia\",\"Jackson\",\"Ava\",\"Lucas\",\"Mia\",\"Ethan\"], heights = [160,195,168,180,170,185]",
        "output": "['Jackson', 'Ethan', 'Lucas', 'Mia', 'Ava', 'Sophia']"
      },
      {
        "input": "names = [\"Sophia\",\"Isabella\",\"Olivia\",\"Ava\",\"Emma\"], heights = [160,165,170,175,180]",
        "output": "['Emma', 'Ava', 'Olivia', 'Isabella', 'Sophia']"
      },
      {
        "input": "names = [\"Alexander\",\"Michael\",\"Benjamin\",\"Daniel\"], heights = [190,188,185,187]",
        "output": "['Alexander', 'Michael', 'Daniel', 'Benjamin']"
      },
      {
        "input": "names = [\"Mia\",\"Ethan\",\"Amelia\",\"Liam\",\"Olivia\"], heights = [168,180,169,182,165]",
        "output": "['Liam', 'Ethan', 'Amelia', 'Mia', 'Olivia']"
      },
      {
        "input": "names = [\"Sophia\",\"Olivia\",\"Ava\",\"Isabella\"], heights = [165,170,175,180]",
        "output": "['Isabella', 'Ava', 'Olivia', 'Sophia']"
      },
      {
        "input": "names = [\"Alexander\",\"Michael\",\"William\",\"James\",\"Benjamin\"], heights = [155,190,165,185,170]",
        "output": "['Michael', 'James', 'Benjamin', 'William', 'Alexander']"
      },
      {
        "input": "names = [\"Emily\",\"Emma\",\"Sophia\",\"Olivia\",\"Isabella\",\"Ava\"], heights = [161,160,159,158,157,156]",
        "output": "['Emily', 'Emma', 'Sophia', 'Olivia', 'Isabella', 'Ava']"
      },
      {
        "input": "names = [\"Zoe\",\"Lily\",\"Rosie\",\"Lena\"], heights = [160,162,158,159]",
        "output": "['Lily', 'Zoe', 'Lena', 'Rosie']"
      },
      {
        "input": "names = [\"Zoe\",\"Abigail\",\"Daniel\",\"Jackson\",\"Harper\"], heights = [165,172,179,183,170]",
        "output": "['Jackson', 'Daniel', 'Abigail', 'Harper', 'Zoe']"
      },
      {
        "input": "names = [\"Jackson\",\"Aiden\",\"Lucas\",\"Caleb\",\"Noah\"], heights = [151,161,171,181,191]",
        "output": "['Noah', 'Caleb', 'Lucas', 'Aiden', 'Jackson']"
      },
      {
        "input": "names = [\"Alexander\",\"Noah\",\"Daniel\",\"Matthew\",\"Logan\"], heights = [182,181,183,180,179]",
        "output": "['Daniel', 'Alexander', 'Noah', 'Matthew', 'Logan']"
      },
      {
        "input": "names = [\"Liam\",\"Noah\",\"Oliver\",\"Elijah\",\"James\"], heights = [170,180,190,200,210]",
        "output": "['James', 'Elijah', 'Oliver', 'Noah', 'Liam']"
      },
      {
        "input": "names = [\"Lucas\",\"Mason\",\"Logan\",\"Ethan\"], heights = [178,177,179,176]",
        "output": "['Logan', 'Lucas', 'Mason', 'Ethan']"
      },
      {
        "input": "names = [\"Peter\",\"Paul\",\"Mary\",\"John\",\"Jane\"], heights = [175,180,165,170,160]",
        "output": "['Paul', 'Peter', 'John', 'Mary', 'Jane']"
      },
      {
        "input": "names = [\"William\",\"James\",\"Benjamin\",\"Henry\",\"Noah\",\"Liam\"], heights = [185,180,175,170,190,195]",
        "output": "['Liam', 'Noah', 'William', 'James', 'Benjamin', 'Henry']"
      },
      {
        "input": "names = [\"Zoe\",\"Lily\",\"Ella\",\"Amelia\"], heights = [160,165,170,175]",
        "output": "['Amelia', 'Ella', 'Lily', 'Zoe']"
      },
      {
        "input": "names = [\"Amelia\",\"Connor\",\"Sophia\",\"Ethan\"], heights = [175,195,180,185]",
        "output": "['Connor', 'Ethan', 'Sophia', 'Amelia']"
      },
      {
        "input": "names = [\"William\",\"James\",\"Oliver\",\"Benjamin\",\"Elijah\"], heights = [190,185,180,175,170]",
        "output": "['William', 'James', 'Oliver', 'Benjamin', 'Elijah']"
      },
      {
        "input": "names = [\"Emily\",\"Ava\",\"Sophia\",\"Charlotte\",\"Isabella\"], heights = [160,170,165,155,175]",
        "output": "['Isabella', 'Ava', 'Sophia', 'Emily', 'Charlotte']"
      },
      {
        "input": "names = [\"Liam\",\"Noah\",\"Oliver\",\"Elijah\",\"William\",\"James\"], heights = [179,178,177,176,175,174]",
        "output": "['Liam', 'Noah', 'Oliver', 'Elijah', 'William', 'James']"
      },
      {
        "input": "names = [\"Jonathan\",\"Jordan\",\"Jack\",\"Jared\",\"James\",\"Jackson\"], heights = [198,197,196,195,194,193]",
        "output": "['Jonathan', 'Jordan', 'Jack', 'Jared', 'James', 'Jackson']"
      },
      {
        "input": "names = [\"Zoe\",\"Yasmin\",\"Xander\",\"Will\",\"Vera\"], heights = [150,160,170,180,190]",
        "output": "['Vera', 'Will', 'Xander', 'Yasmin', 'Zoe']"
      },
      {
        "input": "names = [\"Ava\",\"Isabella\",\"Sophia\",\"Mia\"], heights = [165,175,185,155]",
        "output": "['Sophia', 'Isabella', 'Ava', 'Mia']"
      },
      {
        "input": "names = [\"Zara\",\"Oliver\",\"Isabella\",\"Charlie\"], heights = [175,190,165,180]",
        "output": "['Oliver', 'Charlie', 'Zara', 'Isabella']"
      },
      {
        "input": "names = [\"Alex\",\"Brian\",\"Craig\",\"David\",\"Evan\"], heights = [173,171,175,169,172]",
        "output": "['Craig', 'Alex', 'Evan', 'Brian', 'David']"
      },
      {
        "input": "names = [\"Alexander\",\"Michael\",\"James\",\"John\",\"Daniel\",\"David\"], heights = [172,171,173,174,175,176]",
        "output": "['David', 'Daniel', 'John', 'James', 'Alexander', 'Michael']"
      },
      {
        "input": "names = [\"Scarlett\",\"William\",\"Lily\",\"James\",\"Ava\",\"Thomas\",\"Ella\",\"Noah\",\"Ethan\",\"Mia\",\"Olivia\"], heights = [174,185,167,180,168,182,170,183,181,169,165]",
        "output": "['William', 'Noah', 'Thomas', 'Ethan', 'James', 'Scarlett', 'Ella', 'Mia', 'Ava', 'Lily', 'Olivia']"
      },
      {
        "input": "names = [\"Emma\",\"Charlotte\",\"Ava\",\"Logan\",\"Benjamin\"], heights = [163,170,167,178,185]",
        "output": "['Benjamin', 'Logan', 'Charlotte', 'Ava', 'Emma']"
      },
      {
        "input": "names = [\"Sophie\",\"Grayson\",\"Hannah\",\"Isaac\",\"Layla\"], heights = [170,185,165,188,172]",
        "output": "['Isaac', 'Grayson', 'Layla', 'Sophie', 'Hannah']"
      },
      {
        "input": "names = [\"Evelyn\",\"Sophie\",\"Isabella\",\"Mia\",\"Emma\"], heights = [168,170,166,165,172]",
        "output": "['Emma', 'Sophie', 'Evelyn', 'Isabella', 'Mia']"
      },
      {
        "input": "names = [\"Zara\",\"Xander\",\"Yasmin\",\"Will\"], heights = [160,175,170,165]",
        "output": "['Xander', 'Yasmin', 'Will', 'Zara']"
      },
      {
        "input": "names = [\"Liam\",\"Hannah\",\"Sophie\",\"Lucas\"], heights = [195,170,180,175]",
        "output": "['Liam', 'Sophie', 'Lucas', 'Hannah']"
      },
      {
        "input": "names = [\"Liam\",\"Olivia\",\"Noah\",\"Emma\",\"Oliver\",\"Ava\",\"Sophia\",\"Elijah\",\"Amelia\"], heights = [181,168,185,171,183,167,170,182,173]",
        "output": "['Noah', 'Oliver', 'Elijah', 'Liam', 'Amelia', 'Emma', 'Sophia', 'Olivia', 'Ava']"
      },
      {
        "input": "names = [\"Sophia\",\"Ava\",\"Isabella\",\"Mia\"], heights = [160,170,175,180]",
        "output": "['Mia', 'Isabella', 'Ava', 'Sophia']"
      },
      {
        "input": "names = [\"Avery\",\"Grayson\",\"Evan\",\"Nathan\"], heights = [172,182,175,180]",
        "output": "['Grayson', 'Nathan', 'Evan', 'Avery']"
      },
      {
        "input": "names = [\"Willow\",\"Tara\",\"Xander\",\"Alyson\",\"Reese\"], heights = [175,160,170,165,180]",
        "output": "['Reese', 'Willow', 'Xander', 'Alyson', 'Tara']"
      },
      {
        "input": "names = [\"Eli\",\"Ella\",\"Ezra\",\"Emilia\",\"Evan\"], heights = [170,175,160,180,165]",
        "output": "['Emilia', 'Ella', 'Eli', 'Evan', 'Ezra']"
      },
      {
        "input": "names = [\"James\",\"Benjamin\",\"Mason\",\"Noah\",\"Lucas\"], heights = [170,175,180,185,190]",
        "output": "['Lucas', 'Noah', 'Mason', 'Benjamin', 'James']"
      },
      {
        "input": "names = [\"Jack\",\"Rose\",\"Cal\",\"Fabian\",\"Molly\"], heights = [170,175,165,180,160]",
        "output": "['Fabian', 'Rose', 'Jack', 'Cal', 'Molly']"
      }
    ]
  },
  {
    "id": 2710,
    "difficulty": "Easy",
    "tags": [
      "String"
    ],
    "problemDescription": "Given a positive integer num represented as a string, return the integer num without trailing zeros as a string.\n\u00a0\nExample 1:\n\nInput: num = \"51230100\"\nOutput: \"512301\"\nExplanation: Integer \"51230100\" has 2 trailing zeros, we remove them and return integer \"512301\".\n\nExample 2:\n\nInput: num = \"123\"\nOutput: \"123\"\nExplanation: Integer \"123\" has no trailing zeros, we return integer \"123\".\n\n\u00a0\nConstraints:\n\n1 <= num.length <= 1000\nnum consists\u00a0of only digits.\nnum doesn't\u00a0have any leading zeros.\n\n",
    "starterCode": "class Solution:\n    def removeTrailingZeros(self, num: str) -> str:\n        ",
    "testCases": [
      {
        "input": "num = \"10\"",
        "output": "1"
      },
      {
        "input": "num = \"100100\"",
        "output": "1001"
      },
      {
        "input": "num = \"1111111111\"",
        "output": "1111111111"
      },
      {
        "input": "num = \"1000\"",
        "output": "1"
      },
      {
        "input": "num = \"1\"",
        "output": "1"
      },
      {
        "input": "num = \"9876543210\"",
        "output": "987654321"
      },
      {
        "input": "num = \"10500\"",
        "output": "105"
      },
      {
        "input": "num = \"0\"",
        "output": ""
      },
      {
        "input": "num = \"51230100\"",
        "output": "512301"
      },
      {
        "input": "num = \"10101000\"",
        "output": "10101"
      },
      {
        "input": "num = \"987654321000\"",
        "output": "987654321"
      },
      {
        "input": "num = \"000000000000000000000\"",
        "output": ""
      },
      {
        "input": "num = \"123\"",
        "output": "123"
      },
      {
        "input": "num = \"999999999999999999999\"",
        "output": "999999999999999999999"
      },
      {
        "input": "num = \"1000000000000000000001\"",
        "output": "1000000000000000000001"
      },
      {
        "input": "num = \"1010101010\"",
        "output": "101010101"
      },
      {
        "input": "num = \"999999999900\"",
        "output": "9999999999"
      },
      {
        "input": "num = \"10000\"",
        "output": "1"
      },
      {
        "input": "num = \"1001001000\"",
        "output": "1001001"
      },
      {
        "input": "num = \"1000000000\"",
        "output": "1"
      },
      {
        "input": "num = \"100100100\"",
        "output": "1001001"
      },
      {
        "input": "num = \"9999999999\"",
        "output": "9999999999"
      },
      {
        "input": "num = \"00001\"",
        "output": "00001"
      },
      {
        "input": "num = \"100000\"",
        "output": "1"
      }
    ]
  },
  {
    "id": 2341,
    "difficulty": "Easy",
    "tags": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "problemDescription": "You are given a 0-indexed integer array nums. In one operation, you may do the following:\n\nChoose two integers in nums that are equal.\nRemove both integers from nums, forming a pair.\n\nThe operation is done on nums as many times as possible.\nReturn a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible.\n\u00a0\nExample 1:\n\nInput: nums = [1,3,2,1,3,2,2]\nOutput: [3,1]\nExplanation:\nForm a pair with nums[0] and nums[3] and remove them from nums. Now, nums = [3,2,3,2,2].\nForm a pair with nums[0] and nums[2] and remove them from nums. Now, nums = [2,2,2].\nForm a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [2].\nNo more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums.\n\nExample 2:\n\nInput: nums = [1,1]\nOutput: [1,0]\nExplanation: Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [].\nNo more pairs can be formed. A total of 1 pair has been formed, and there are 0 numbers leftover in nums.\n\nExample 3:\n\nInput: nums = [0]\nOutput: [0,1]\nExplanation: No pairs can be formed, and there is 1 number leftover in nums.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n0 <= nums[i] <= 100\n\n",
    "starterCode": "class Solution:\n    def numberOfPairs(self, nums: List[int]) -> List[int]:\n        ",
    "testCases": [
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0]",
        "output": "[5, 0]"
      },
      {
        "input": "nums = [100,0,50,50,0,100]",
        "output": "[3, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10]",
        "output": "[0, 10]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[5, 1]"
      },
      {
        "input": "nums = [42]",
        "output": "[0, 1]"
      },
      {
        "input": "nums = [1]",
        "output": "[0, 1]"
      },
      {
        "input": "nums = [1,3,2,1,3,2,2]",
        "output": "[3, 1]"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1]",
        "output": "[4, 1]"
      },
      {
        "input": "nums = [6,6,6,7,7,7,8,8,8,8]",
        "output": "[4, 2]"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10]",
        "output": "[5, 0]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5]",
        "output": "[5, 0]"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[10, 0]"
      },
      {
        "input": "nums = [50,50,50,50,50,50,50,50,50,50,50,50]",
        "output": "[6, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5]",
        "output": "[0, 5]"
      },
      {
        "input": "nums = [1,2,3,1,2,3,1,2,3]",
        "output": "[3, 3]"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5]",
        "output": "[5, 0]"
      },
      {
        "input": "nums = [1,2,1,2,1,2,1,2,1,2,1]",
        "output": "[5, 1]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1]",
        "output": "[5, 0]"
      },
      {
        "input": "nums = [0]",
        "output": "[0, 1]"
      },
      {
        "input": "nums = [100,100,100,99,99,98]",
        "output": "[2, 2]"
      },
      {
        "input": "nums = [5,5,5,5,5,5]",
        "output": "[3, 0]"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4]",
        "output": "[4, 2]"
      },
      {
        "input": "nums = [100,100,99,99,98,98,97,97,96,96]",
        "output": "[5, 0]"
      },
      {
        "input": "nums = [1,1]",
        "output": "[1, 0]"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5]",
        "output": "[5, 0]"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2]",
        "output": "[3, 1]"
      },
      {
        "input": "nums = [100,100,100]",
        "output": "[1, 1]"
      },
      {
        "input": "nums = [30,30,30,31,31,31,31,32,32,32,32,32,33,33,33,34,34,34,34]",
        "output": "[8, 3]"
      },
      {
        "input": "nums = [1,2,1,2,3,4,3,4,5,5,5,6,6,6,6]",
        "output": "[7, 1]"
      },
      {
        "input": "nums = [10,10,10,10,10,20,20,20,20,30,30,30,40,40,40,40,40]",
        "output": "[7, 3]"
      },
      {
        "input": "nums = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]",
        "output": "[14, 1]"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]",
        "output": "[15, 0]"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]",
        "output": "[10, 0]"
      },
      {
        "input": "nums = [65,65,65,65,66,66,66,66,66,66,67,67,67,67,67,67,67,67,68,68,68,68]",
        "output": "[11, 0]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[18, 0]"
      },
      {
        "input": "nums = [34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38]",
        "output": "[13, 2]"
      },
      {
        "input": "nums = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]",
        "output": "[11, 0]"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6]",
        "output": "[8, 4]"
      },
      {
        "input": "nums = [42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42]",
        "output": "[12, 1]"
      },
      {
        "input": "nums = [7, 8, 8, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12]",
        "output": "[9, 3]"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8]",
        "output": "[16, 5]"
      },
      {
        "input": "nums = [30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33]",
        "output": "[12, 3]"
      },
      {
        "input": "nums = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
        "output": "[10, 0]"
      },
      {
        "input": "nums = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "[15, 0]"
      },
      {
        "input": "nums = [13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]",
        "output": "[13, 1]"
      },
      {
        "input": "nums = [1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5]",
        "output": "[14, 2]"
      },
      {
        "input": "nums = [1,1,1,1,2,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
        "output": "[3, 23]"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]",
        "output": "[15, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5]",
        "output": "[10, 5]"
      },
      {
        "input": "nums = [35,35,35,35,36,36,36,36,36,37,37,37,37,37,37,38,38,38,38,38,38]",
        "output": "[10, 1]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]",
        "output": "[0, 30]"
      },
      {
        "input": "nums = [10, 20, 10, 20, 30, 30, 30, 40, 40, 40, 40]",
        "output": "[5, 1]"
      },
      {
        "input": "nums = [21,22,22,21,23,24,24,23,25,25,26,26,27,27,28,28,29,29]",
        "output": "[9, 0]"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6]",
        "output": "[12, 3]"
      },
      {
        "input": "nums = [1,3,2,1,3,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,6]",
        "output": "[15, 0]"
      },
      {
        "input": "nums = [6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8]",
        "output": "[8, 1]"
      },
      {
        "input": "nums = [6,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9]",
        "output": "[11, 2]"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5]",
        "output": "[9, 2]"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4]",
        "output": "[6, 2]"
      },
      {
        "input": "nums = [10, 10, 20, 20, 30, 30, 30, 30, 40, 40, 40, 40, 40]",
        "output": "[6, 1]"
      },
      {
        "input": "nums = [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4]",
        "output": "[7, 1]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "[12, 1]"
      },
      {
        "input": "nums = [21, 21, 21, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25]",
        "output": "[9, 2]"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5]",
        "output": "[13, 3]"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]",
        "output": "[15, 0]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "[10, 0]"
      },
      {
        "input": "nums = [45, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49]",
        "output": "[14, 2]"
      },
      {
        "input": "nums = [2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5]",
        "output": "[8, 4]"
      },
      {
        "input": "nums = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6]",
        "output": "[7, 1]"
      },
      {
        "input": "nums = [16, 17, 18, 19, 20, 16, 17, 18, 19, 20, 16, 17, 18, 19, 20, 16, 17, 18, 19, 20, 16, 17, 18, 19, 20]",
        "output": "[10, 5]"
      },
      {
        "input": "nums = [10,10,10,20,20,30,30,40,40,40,50,50,50,50]",
        "output": "[6, 2]"
      },
      {
        "input": "nums = [10,20,10,30,20,30,40,40,40,50,50,50,50,60,60,60,60,60]",
        "output": "[8, 2]"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "[18, 1]"
      },
      {
        "input": "nums = [10,20,10,30,20,30,40,50,60,40,50,60,70,80,90,100,70,80,90,100]",
        "output": "[10, 0]"
      },
      {
        "input": "nums = [50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50]",
        "output": "[20, 0]"
      },
      {
        "input": "nums = [10,10,10,10,10,10,10,10,10,10,20,20,20,20,20,20,20,20,20,20]",
        "output": "[10, 0]"
      },
      {
        "input": "nums = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]",
        "output": "[10, 1]"
      },
      {
        "input": "nums = [39, 39, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44]",
        "output": "[12, 3]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]",
        "output": "[0, 20]"
      },
      {
        "input": "nums = [1,3,2,1,3,2,2,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6]",
        "output": "[11, 2]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]",
        "output": "[10, 10]"
      },
      {
        "input": "nums = [1,1,1,2,2,3,3,3,3,4,4,4,4,4,5,5,5,6,6,6]",
        "output": "[8, 4]"
      },
      {
        "input": "nums = [99,99,98,98,97,97,96,96,95,95,94,94,93,93,92,92,91,91,90,90]",
        "output": "[10, 0]"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
        "output": "[6, 3]"
      },
      {
        "input": "nums = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,9,9,10,10,10,10,10]",
        "output": "[14, 5]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14]",
        "output": "[14, 0]"
      },
      {
        "input": "nums = [99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]",
        "output": "[10, 0]"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[15, 0]"
      },
      {
        "input": "nums = [1,1,2,3,3,4,5,5,6,7,8,8,9,10,10,10,10,10,10,10,10,10,10]",
        "output": "[9, 5]"
      },
      {
        "input": "nums = [7,7,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10]",
        "output": "[9, 2]"
      },
      {
        "input": "nums = [10,10,20,20,20,30,30,30,30,40,40,40,40,40]",
        "output": "[6, 2]"
      },
      {
        "input": "nums = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80]",
        "output": "[0, 20]"
      },
      {
        "input": "nums = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,1,3,5,7,9,11,13,15,17,19]",
        "output": "[0, 25]"
      },
      {
        "input": "nums = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]",
        "output": "[15, 0]"
      },
      {
        "input": "nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20]",
        "output": "[20, 0]"
      },
      {
        "input": "nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 2, 4, 6, 8, 10]",
        "output": "[5, 5]"
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "output": "[0, 20]"
      },
      {
        "input": "nums = [7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10]",
        "output": "[13, 1]"
      },
      {
        "input": "nums = [1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]",
        "output": "[6, 2]"
      },
      {
        "input": "nums = [11,12,11,12,13,14,15,14,13,15,15,14,13,12,11]",
        "output": "[5, 5]"
      },
      {
        "input": "nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5]",
        "output": "[5, 15]"
      },
      {
        "input": "nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]",
        "output": "[10, 0]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]",
        "output": "[26, 0]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,3,3,3,4,4,4,4,5,5,5,5,5]",
        "output": "[10, 2]"
      },
      {
        "input": "nums = [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51]",
        "output": "[16, 0]"
      },
      {
        "input": "nums = [16,16,17,17,17,18,18,19,19,19,19,20,20,20,20,20]",
        "output": "[7, 2]"
      },
      {
        "input": "nums = [1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6]",
        "output": "[15, 2]"
      },
      {
        "input": "nums = [7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10]",
        "output": "[16, 0]"
      },
      {
        "input": "nums = [52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52]",
        "output": "[19, 0]"
      },
      {
        "input": "nums = [1,2,3,4,5,1,2,3,4,5,6,7,8,9,10,6,7,8,9,10]",
        "output": "[10, 0]"
      },
      {
        "input": "nums = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4]",
        "output": "[12, 2]"
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]",
        "output": "[4, 2]"
      },
      {
        "input": "nums = [1,1,1,1,1,1,2,2,2,2,3,3,4,4,5,5,5,5,6,6,6,6,7,7,8,8,8,8,8,8,8]",
        "output": "[15, 1]"
      },
      {
        "input": "nums = [60,60,61,61,61,62,62,62,62,63,63,63,63,63,64,64,64,64,64,64]",
        "output": "[9, 2]"
      },
      {
        "input": "nums = [5,5,5,5,5,5,5,5,5,5,5,5,1,2,3,4,6,7,8,9,10]",
        "output": "[6, 9]"
      },
      {
        "input": "nums = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12]",
        "output": "[12, 12]"
      },
      {
        "input": "nums = [26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29]",
        "output": "[11, 2]"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]",
        "output": "[12, 2]"
      },
      {
        "input": "nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]",
        "output": "[14, 1]"
      },
      {
        "input": "nums = [1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6]",
        "output": "[12, 2]"
      },
      {
        "input": "nums = [7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9]",
        "output": "[8, 1]"
      },
      {
        "input": "nums = [0,1,1,0,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6]",
        "output": "[12, 5]"
      },
      {
        "input": "nums = [2,3,3,2,2,3,4,4,4,4,5,5,5,6,6,6,6,6]",
        "output": "[7, 4]"
      },
      {
        "input": "nums = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5]",
        "output": "[11, 3]"
      },
      {
        "input": "nums = [7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9]",
        "output": "[7, 1]"
      },
      {
        "input": "nums = [39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]",
        "output": "[0, 21]"
      }
    ]
  },
  {
    "id": 1837,
    "difficulty": "Easy",
    "tags": [
      "Math"
    ],
    "problemDescription": "Given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.\nAfter converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.\n\u00a0\nExample 1:\n\nInput: n = 34, k = 6\nOutput: 9\nExplanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.\n\nExample 2:\n\nInput: n = 10, k = 10\nOutput: 1\nExplanation: n is already in base 10. 1 + 0 = 1.\n\n\u00a0\nConstraints:\n\n1 <= n <= 100\n2 <= k <= 10\n\n",
    "starterCode": "class Solution:\n    def sumBase(self, n: int, k: int) -> int:\n        ",
    "testCases": [
      {
        "input": "n = 64, k = 2",
        "output": "1"
      },
      {
        "input": "n = 7, k = 3",
        "output": "3"
      },
      {
        "input": "n = 42, k = 5",
        "output": "6"
      },
      {
        "input": "n = 50, k = 4",
        "output": "5"
      },
      {
        "input": "n = 100, k = 3",
        "output": "4"
      },
      {
        "input": "n = 10, k = 10",
        "output": "1"
      },
      {
        "input": "n = 50, k = 7",
        "output": "2"
      },
      {
        "input": "n = 99, k = 9",
        "output": "3"
      },
      {
        "input": "n = 81, k = 9",
        "output": "1"
      },
      {
        "input": "n = 34, k = 6",
        "output": "9"
      },
      {
        "input": "n = 8, k = 2",
        "output": "1"
      },
      {
        "input": "n = 45, k = 3",
        "output": "3"
      },
      {
        "input": "n = 25, k = 2",
        "output": "3"
      },
      {
        "input": "n = 81, k = 3",
        "output": "1"
      },
      {
        "input": "n = 64, k = 10",
        "output": "10"
      },
      {
        "input": "n = 27, k = 5",
        "output": "3"
      },
      {
        "input": "n = 100, k = 2",
        "output": "3"
      },
      {
        "input": "n = 1, k = 2",
        "output": "1"
      },
      {
        "input": "n = 100, k = 4",
        "output": "4"
      },
      {
        "input": "n = 72, k = 8",
        "output": "2"
      },
      {
        "input": "n = 50, k = 5",
        "output": "2"
      },
      {
        "input": "n = 17, k = 8",
        "output": "3"
      },
      {
        "input": "n = 91, k = 8",
        "output": "7"
      },
      {
        "input": "n = 73, k = 4",
        "output": "4"
      },
      {
        "input": "n = 85, k = 7",
        "output": "7"
      },
      {
        "input": "n = 63, k = 9",
        "output": "7"
      },
      {
        "input": "n = 100, k = 7",
        "output": "4"
      },
      {
        "input": "n = 63, k = 5",
        "output": "7"
      },
      {
        "input": "n = 37, k = 5",
        "output": "5"
      },
      {
        "input": "n = 95, k = 9",
        "output": "7"
      },
      {
        "input": "n = 63, k = 7",
        "output": "3"
      },
      {
        "input": "n = 55, k = 7",
        "output": "7"
      },
      {
        "input": "n = 31, k = 5",
        "output": "3"
      },
      {
        "input": "n = 32, k = 2",
        "output": "1"
      },
      {
        "input": "n = 42, k = 4",
        "output": "6"
      },
      {
        "input": "n = 19, k = 4",
        "output": "4"
      },
      {
        "input": "n = 55, k = 6",
        "output": "5"
      },
      {
        "input": "n = 100, k = 5",
        "output": "4"
      },
      {
        "input": "n = 15, k = 6",
        "output": "5"
      },
      {
        "input": "n = 45, k = 7",
        "output": "9"
      },
      {
        "input": "n = 84, k = 4",
        "output": "3"
      },
      {
        "input": "n = 31, k = 10",
        "output": "4"
      },
      {
        "input": "n = 45, k = 6",
        "output": "5"
      },
      {
        "input": "n = 97, k = 5",
        "output": "9"
      },
      {
        "input": "n = 45, k = 10",
        "output": "9"
      },
      {
        "input": "n = 50, k = 8",
        "output": "8"
      },
      {
        "input": "n = 67, k = 5",
        "output": "7"
      },
      {
        "input": "n = 37, k = 2",
        "output": "3"
      },
      {
        "input": "n = 67, k = 7",
        "output": "7"
      },
      {
        "input": "n = 29, k = 3",
        "output": "3"
      },
      {
        "input": "n = 50, k = 6",
        "output": "5"
      },
      {
        "input": "n = 72, k = 5",
        "output": "8"
      },
      {
        "input": "n = 37, k = 6",
        "output": "2"
      },
      {
        "input": "n = 85, k = 3",
        "output": "3"
      },
      {
        "input": "n = 88, k = 3",
        "output": "4"
      },
      {
        "input": "n = 64, k = 3",
        "output": "4"
      },
      {
        "input": "n = 64, k = 4",
        "output": "1"
      },
      {
        "input": "n = 95, k = 6",
        "output": "10"
      },
      {
        "input": "n = 67, k = 3",
        "output": "5"
      },
      {
        "input": "n = 100, k = 10",
        "output": "1"
      },
      {
        "input": "n = 81, k = 5",
        "output": "5"
      },
      {
        "input": "n = 55, k = 5",
        "output": "3"
      },
      {
        "input": "n = 98, k = 2",
        "output": "3"
      },
      {
        "input": "n = 58, k = 7",
        "output": "4"
      },
      {
        "input": "n = 48, k = 4",
        "output": "3"
      },
      {
        "input": "n = 31, k = 2",
        "output": "5"
      },
      {
        "input": "n = 81, k = 8",
        "output": "4"
      },
      {
        "input": "n = 42, k = 7",
        "output": "6"
      },
      {
        "input": "n = 27, k = 9",
        "output": "3"
      },
      {
        "input": "n = 77, k = 7",
        "output": "5"
      },
      {
        "input": "n = 29, k = 8",
        "output": "8"
      },
      {
        "input": "n = 97, k = 10",
        "output": "16"
      },
      {
        "input": "n = 77, k = 4",
        "output": "5"
      },
      {
        "input": "n = 13, k = 6",
        "output": "3"
      },
      {
        "input": "n = 49, k = 9",
        "output": "9"
      },
      {
        "input": "n = 55, k = 10",
        "output": "10"
      },
      {
        "input": "n = 41, k = 4",
        "output": "5"
      },
      {
        "input": "n = 98, k = 6",
        "output": "8"
      },
      {
        "input": "n = 50, k = 3",
        "output": "6"
      },
      {
        "input": "n = 85, k = 5",
        "output": "5"
      },
      {
        "input": "n = 73, k = 8",
        "output": "3"
      },
      {
        "input": "n = 100, k = 9",
        "output": "4"
      },
      {
        "input": "n = 77, k = 8",
        "output": "7"
      },
      {
        "input": "n = 85, k = 4",
        "output": "4"
      },
      {
        "input": "n = 99, k = 3",
        "output": "3"
      },
      {
        "input": "n = 29, k = 4",
        "output": "5"
      },
      {
        "input": "n = 72, k = 6",
        "output": "2"
      }
    ]
  },
  {
    "id": 101,
    "difficulty": "Easy",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problemDescription": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n\u00a0\nExample 1:\n\n\nInput: root = [1,2,2,3,4,4,3]\nOutput: true\n\nExample 2:\n\n\nInput: root = [1,2,2,null,3,null,3]\nOutput: false\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 1000].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow up: Could you solve it both recursively and iteratively?",
    "starterCode": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        ",
    "testCases": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,null,3]",
        "output": "True"
      },
      {
        "input": "root = [1,2,2,3,4,4,3]",
        "output": "True"
      },
      {
        "input": "root = [1,2,3,4,null,null,5]",
        "output": "False"
      },
      {
        "input": "root = [2,3,3,4,5,5,4]",
        "output": "True"
      },
      {
        "input": "root = [1,2]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,8,8,7,6,5]",
        "output": "True"
      },
      {
        "input": "root = [1,2,2,3,4,3,4]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,5,3]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,null,3,null,3]",
        "output": "False"
      },
      {
        "input": "root = [1]",
        "output": "True"
      },
      {
        "input": "root = [1,2,2,2,null,2]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,6,7,8,8,7,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,8,9,9,8,7,6,5,10,11,11,10,12,13,13,12]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,4,null,null,4]",
        "output": "True"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,null,4,4]",
        "output": "True"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,null,5,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,8,8,7,6,5,null,null,null,null,null,null,null,9,null,10]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,null,5,null,null,6,6]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,6,null,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,null,null,null,8,9,10,11]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,3,2,1,null,4,null,null,4]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,null,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,5,null,null,null,null,6,6]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,null,4,5,5,4]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,null,5,5,null,null,6,6]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,null,6,7,null,null,8,9]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,null,8,null,8,7,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,5,null,null,null,null]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,3,null,4,null,4]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,5,null,null,6,6,null,7,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,null,null,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,6,null,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,null,6,null,null,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,null,null,null,5,6,6]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,8,9,10,11,11,10,9,8,7,6,5,4,3,2,1]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,null,null,6,7,7,6]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,null,null,6,null,5,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,6,null,6,null,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,null,3,3,null,4,null,null,4,null,5,null,null,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,8,9,8,7,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,10,11,11,10,9,8]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,5,6,6,7,7,8,8,9,9,10,10]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,6,5,7,8,8,7,9,9,10,null,10]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,6,null,7,null,8,9]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,null,null,7,8,8,7,null,null,9]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,4,null,5,6,null,null,7,8]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,null,5,null,5,null,null]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,null,7,null,null,8,9,9,8]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,null,6,7,8,9,10,10,9,8,7,6,null,null,11,12,12,11]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,null,6,7,8,8,7,6,null,null,9,10,10,9]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,6,null,7,8,9,null,9,8,7,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,null,null,5,null,null,null]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,6,null,7,8,null,8,7,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,null,6,7,null,8,9]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,3,2,null,1,4,null,null,4]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,3,3,null,4,4,4,null,null,5,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,null,null,5,null,null,null,6]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,null,3,null,5,6,7,8,9,10,11,11,10,9,8,7,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,null,null,5,null,null,6,7,null,null,8]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,null,3,5,null,6,null,7,8,9,null,null,null,null,10,null,null,11,10]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,4,5,5,4]",
        "output": "True"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,null,null,5,null,null,null,6,7,8,8,7,6]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,null,8,9,10,11,null,null,12,null,null,13,null,null,14]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,null,null,null,null,5,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,4,5,null,5,null,4,6,null,null,6]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,8,9,10,11,12]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,null,null,null,5,6,5,6]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,null,5,null,6,6,null,7,null,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,4,5,5,null,6,6,7,8,8,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,5,6,6,5,7,8,8,7,9,9,10,10]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,3,4,null,null,null,null,5,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,6,7,8,9,10,11]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,null,null,null,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,6,null,7,null,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,6,null,7,8,null,null,9,null,10]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,6,null,7,null,6,5,null]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,null,null,null,5,6,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,null,7,null,8,null,null,9,10,10,9,null,8,null,7,null,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,5,null]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,null,null,4,4]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,6,6,null,5,null,null]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,8,8,7,6,5,9,10,10,9,11,12,12,11,13,14,15,15,14,13]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,6,7,8,9,10,11,11,10,9,8,7,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,null,4,5,null,null,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,8,8,7,6,5,9,null,null,null,null,null,null,null,10]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,null,null,7,6,5]",
        "output": "True"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,6,null,6,5,null,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,null,null,null,null,6,5]",
        "output": "True"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,8,8,7,6,5,9,10,10,9,11,12,12,11,13,14,14,13]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,null,3,4,5,null,null,5,4]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,4,3,5,null,6,null,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,null,null,6,7,8,8,7,6,null,null,9,10,null,null,10,9]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,3,null,null,4,4,null,null,5,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,null,5,6,6,5]",
        "output": "True"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,6,null,6,5,null,null,null]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,null,null,5,null,null,null,6,null,8,8,null,6]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,null,5,null,null,null,null]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,6,5,null,7,7,null,8,8]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,null,5,null,null,null]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,null,6,5,null,null,7,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,7,8,null,8,7,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,null,5,5,null,null,null]",
        "output": "False"
      },
      {
        "input": "root = [1,2,3,4,5,6,7,null,8,9,10,11,12,13,14]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,null,null,null,5,6,7,8,9,10,null,null,10,9,8,7,6,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,5,6,6,5,7,8,8,7]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,null,null,null,5,null,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,null,3,3,4,null,null,4,null,null,5,5]",
        "output": "False"
      },
      {
        "input": "root = [1,2,2,3,4,4,3,null,5,null,5,null,null,6,7]",
        "output": "False"
      }
    ]
  }
]